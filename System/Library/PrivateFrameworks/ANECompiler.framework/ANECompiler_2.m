void sub_22DA5EB04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void sub_22DA5EB20(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearExpressionProto::~LinearExpressionProto(operations_research::sat::LinearExpressionProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::LinearExpressionProto::~LinearExpressionProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::LinearExpressionProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void operations_research::sat::LinearExpressionProto::Clear(operations_research::sat::LinearExpressionProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::LinearExpressionProto::_InternalParse(operations_research::sat::LinearExpressionProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::internal *v10;
  google::protobuf::UnknownFieldSet *v11;
  google::protobuf::internal *v12;
  google::protobuf::internal *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  google::protobuf::internal *TagFallback;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::internal *v24;

  v6 = a2;
  v24 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::LinearExpressionProto *)((char *)this + 40);
  v10 = (operations_research::sat::LinearExpressionProto *)((char *)this + 16);
  if ((unint64_t)a2 < *(_QWORD *)a3)
  {
    while (1)
    {
LABEL_7:
      v13 = (google::protobuf::internal *)((char *)v6 + 1);
      v14 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0)
        goto LABEL_10;
      v15 = v14 + (*(unsigned __int8 *)v13 << 7);
      v14 = v15 - 128;
      if (*(char *)v13 < 0)
      {
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v15 - 128));
        v24 = TagFallback;
        if (!TagFallback)
          return 0;
        v13 = TagFallback;
        v14 = a2;
        v16 = a2 >> 3;
        if (a2 >> 3 != 3)
          goto LABEL_11;
LABEL_19:
        if (v14 != 24)
          goto LABEL_40;
        v6 = (google::protobuf::internal *)((char *)v13 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v13;
        if (*(char *)v13 < 0)
        {
          v18 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v18 << 7) - 128);
          if (v18 < 0)
          {
            v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v13, (const char *)a2);
            v24 = v6;
            *((_QWORD *)this + 8) = a2;
            if (!v6)
              return v6;
            goto LABEL_6;
          }
          v6 = (google::protobuf::internal *)((char *)v13 + 2);
          v24 = (google::protobuf::internal *)((char *)v13 + 2);
          *((_QWORD *)this + 8) = a2;
          if ((unint64_t)v13 + 2 >= *(_QWORD *)a3)
            break;
        }
        else
        {
          v24 = (google::protobuf::internal *)((char *)v13 + 1);
          *((_QWORD *)this + 8) = a2;
          if ((unint64_t)v6 >= *(_QWORD *)a3)
            break;
        }
      }
      else
      {
        v13 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
        v24 = v13;
        v16 = v14 >> 3;
        if (v14 >> 3 == 3)
          goto LABEL_19;
LABEL_11:
        if (v16 == 2)
        {
          if (v14 == 18)
          {
            v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v9, (unsigned __int8 *)v13, a3, a4);
LABEL_5:
            v6 = v12;
            v24 = v12;
            if (!v12)
              return v6;
            goto LABEL_6;
          }
          if (v14 != 16)
          {
LABEL_40:
            if (!v14 || (v14 & 7) == 4)
            {
              *((_DWORD *)a3 + 20) = v14 - 1;
              return v13;
            }
            if ((*v8 & 1) != 0)
            {
              v11 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v11 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
              v13 = v24;
            }
            v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v11, v13, (int32x2_t *)a3, a5);
            goto LABEL_5;
          }
          v21 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
          v22 = *((unsigned int *)this + 10);
          if ((_DWORD)v22 == *((_DWORD *)this + 11))
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v9, v22 + 1);
          *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v22) = v21;
          *((_DWORD *)this + 10) = v22 + 1;
        }
        else
        {
          if (v16 != 1)
            goto LABEL_40;
          if (v14 == 10)
          {
            v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v10, (unsigned __int8 *)v13, a3, a4);
            goto LABEL_5;
          }
          if (v14 != 8)
            goto LABEL_40;
          v19 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
          v20 = *((unsigned int *)this + 4);
          if ((_DWORD)v20 == *((_DWORD *)this + 5))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v20 + 1);
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v20) = v19;
          *((_DWORD *)this + 4) = v20 + 1;
        }
        v6 = v24;
        if (!v24)
          return v6;
LABEL_6:
        if ((unint64_t)v6 >= *(_QWORD *)a3)
          break;
      }
    }
  }
  if ((google::protobuf::internal *)((char *)v6 - *((_QWORD *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    v24 = v6;
    if ((a2 & 1) == 0)
      goto LABEL_7;
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearExpressionProto::_InternalSerialize(operations_research::sat::LinearExpressionProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v27 = v6 >> 14;
      v6 >>= 7;
    }
    while (v27);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (unint64_t *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v28 = v16 >> 14;
      v16 >>= 7;
    }
    while (v28);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  v26 = *((_QWORD *)this + 8);
  if (v26)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v26 = *((_QWORD *)this + 8);
      *a2 = 24;
      if (v26 <= 0x7F)
        goto LABEL_34;
    }
    else
    {
      *a2 = 24;
      if (v26 <= 0x7F)
      {
LABEL_34:
        a2[1] = v26;
        a2 += 2;
        goto LABEL_47;
      }
    }
    a2[1] = v26 | 0x80;
    v29 = v26 >> 7;
    if (v26 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v29 | 0x80;
        v30 = v29 >> 7;
        ++a2;
        v31 = v29 >> 14;
        v29 >>= 7;
      }
      while (v31);
      *(a2 - 1) = v30;
    }
    else
    {
      a2[2] = v29;
      a2 += 3;
    }
  }
LABEL_47:
  v32 = *((_QWORD *)this + 1);
  if ((v32 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::LinearExpressionProto::ByteSizeLong(operations_research::sat::LinearExpressionProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0)
    {
      *((_DWORD *)this + 8) = v2;
      v3 = v2 + 11;
      v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
      if (!v4)
        goto LABEL_9;
    }
    else
    {
      *((_DWORD *)this + 8) = v2;
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
      v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
      if (!v4)
      {
LABEL_9:
        *((_DWORD *)this + 14) = 0;
        v6 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
        v7 = *((_QWORD *)this + 8);
        if (!v7)
          goto LABEL_14;
LABEL_13:
        v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + ((9 * (__clz(v7 | 1) ^ 0x3F) + 73) >> 6) + 1);
        goto LABEL_14;
      }
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4)
      goto LABEL_9;
  }
  if ((v4 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 14) = v4;
  v6 = (const google::protobuf::UnknownFieldSet *)(v5 + v3 + v4);
  v7 = *((_QWORD *)this + 8);
  if (v7)
    goto LABEL_13;
LABEL_14:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearExpressionProto *)((char *)this + 8), v6, (_DWORD *)this + 18);
  *((_DWORD *)this + 18) = (_DWORD)v6;
  return (char *)v6;
}

void operations_research::sat::LinearExpressionProto::MergeFrom(operations_research::sat::LinearExpressionProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::LinearExpressionProto *__hidden))a2 == &off_24F981558)
    operations_research::sat::LinearExpressionProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::LinearExpressionProto::MergeFrom(operations_research::sat::LinearExpressionProto *this, const operations_research::sat::LinearExpressionProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v15 = *((_QWORD *)a2 + 8);
  if (v15)
    *((_QWORD *)this + 8) = v15;
}

void operations_research::sat::LinearExpressionProto::CopyFrom(operations_research::sat::LinearExpressionProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_QWORD *)this + 8) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::LinearExpressionProto *__hidden))a2 == &off_24F981558)
      operations_research::sat::LinearExpressionProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::LinearExpressionProto::CopyFrom(operations_research::sat::LinearExpressionProto *this, const operations_research::sat::LinearExpressionProto *a2)
{
  uint64_t v4;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_QWORD *)this + 8) = 0;
    v4 = *((_QWORD *)this + 1);
    if ((v4 & 1) != 0 && *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    operations_research::sat::LinearExpressionProto::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::LinearExpressionProto::IsInitialized(operations_research::sat::LinearExpressionProto *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearExpressionProto::GetMetadata(operations_research::sat::LinearExpressionProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[6];
}

_QWORD *google::protobuf::RepeatedPtrField<operations_research::sat::LinearExpressionProto>::~RepeatedPtrField(_QWORD *a1)
{
  operations_research::sat::LinearExpressionProto **v2;
  operations_research::sat::LinearExpressionProto **v4;
  uint64_t v5;

  v2 = (operations_research::sat::LinearExpressionProto **)a1[2];
  if (v2 && !*a1)
  {
    v4 = v2 + 1;
    v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::LinearExpressionProto::~LinearExpressionProto(*v4);
          MEMORY[0x22E31DF78]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      v2 = (operations_research::sat::LinearExpressionProto **)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

operations_research::sat::LinearArgumentProto *operations_research::sat::LinearArgumentProto::LinearArgumentProto(operations_research::sat::LinearArgumentProto *this, const operations_research::sat::LinearArgumentProto *a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  operations_research::sat::LinearExpressionProto **v10;
  operations_research::sat::LinearExpressionProto **v11;
  operations_research::sat::LinearExpressionProto *v12;
  operations_research::sat::LinearExpressionProto *v13;
  operations_research::sat::LinearExpressionProto *v14;
  google::protobuf::Arena *v15;
  int v16;
  uint64_t v17;
  operations_research::sat::LinearExpressionProto **v18;
  operations_research::sat::LinearExpressionProto **v19;
  operations_research::sat::LinearExpressionProto *v20;
  operations_research::sat::LinearExpressionProto *v21;
  int v22;
  int *v23;
  uint64_t v24;
  google::protobuf::UnknownFieldSet *v25;
  operations_research::sat::LinearExpressionProto *v26;
  unsigned int *v28;
  uint64_t v29;
  google::protobuf::Arena **v30;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F981608;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v29 = *((_QWORD *)a2 + 4);
    v30 = (google::protobuf::Arena **)((char *)this + 16);
    v28 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::LinearArgumentProto *)((char *)this + 16), v5);
    v6 = **((_DWORD **)this + 4);
    v7 = *((_DWORD *)this + 6);
    v8 = v6 - v7;
    if (v6 - v7 >= v5)
      v9 = v5;
    else
      v9 = v8;
    if ((int)v9 >= 1)
    {
      v10 = (operations_research::sat::LinearExpressionProto **)v28;
      v11 = (operations_research::sat::LinearExpressionProto **)(v29 + 8);
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = *v10++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(v12, v14);
        --v9;
      }
      while (v9);
    }
    if (v8 < v5)
    {
      v15 = *v30;
      v16 = v7 + v5 - v6;
      v17 = 2 * v8;
      v18 = (operations_research::sat::LinearExpressionProto **)&v28[v17];
      v19 = (operations_research::sat::LinearExpressionProto **)(v17 * 4 + v29 + 8);
      do
      {
        v20 = *v19++;
        v21 = (operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v15);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(v20, v21);
        *v18++ = v21;
        --v16;
      }
      while (v16);
    }
    v22 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v22;
    v23 = (int *)*((_QWORD *)this + 4);
    if (*v23 < v22)
      *v23 = v22;
  }
  *((_DWORD *)this + 12) = 0;
  v24 = *((_QWORD *)a2 + 1);
  if ((v24 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v25 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v25 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v25, (const google::protobuf::UnknownFieldSet *)((v24 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  v26 = 0;
  if (a2 != (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_
    && *((_QWORD *)a2 + 5))
  {
    v26 = (operations_research::sat::LinearExpressionProto *)operator new();
    operations_research::sat::LinearExpressionProto::LinearExpressionProto(v26, *((const operations_research::sat::LinearExpressionProto **)a2 + 5));
  }
  *((_QWORD *)this + 5) = v26;
  return this;
}

void sub_22DA5F7A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  MEMORY[0x22E31DF78](v1, 0x1081C407E89B05FLL);
  google::protobuf::RepeatedPtrField<operations_research::sat::LinearExpressionProto>::~RepeatedPtrField(v2);
  _Unwind_Resume(a1);
}

void sub_22DA5F7D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  google::protobuf::RepeatedPtrField<operations_research::sat::LinearExpressionProto>::~RepeatedPtrField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearArgumentProto::~LinearArgumentProto(operations_research::sat::LinearArgumentProto *this)
{
  operations_research::sat::LinearExpressionProto *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v7;
  operations_research::sat::LinearExpressionProto **v8;
  operations_research::sat::LinearExpressionProto **v9;
  uint64_t v10;

  if (this != (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_)
  {
    v2 = (operations_research::sat::LinearExpressionProto *)*((_QWORD *)this + 5);
    if (v2)
    {
      operations_research::sat::LinearExpressionProto::~LinearExpressionProto(v2);
      MEMORY[0x22E31DF78]();
    }
  }
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    if (v4 && v5 == 0)
    {
      v7 = *(void **)(v4 + 8);
      if (v7 != *(void **)(v4 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v4 + 8));
        v7 = *(void **)(v4 + 8);
      }
      if (v7)
      {
        *(_QWORD *)(v4 + 16) = v7;
        operator delete(v7);
      }
      MEMORY[0x22E31DF78](v4, 0x20C40DC1BFBCFLL);
    }
  }
  v8 = (operations_research::sat::LinearExpressionProto **)*((_QWORD *)this + 4);
  if (v8 && !*((_QWORD *)this + 2))
  {
    v9 = v8 + 1;
    v10 = *(unsigned int *)v8;
    if ((int)v10 >= 1)
    {
      do
      {
        if (*v9)
        {
          operations_research::sat::LinearExpressionProto::~LinearExpressionProto(*v9);
          MEMORY[0x22E31DF78]();
        }
        ++v9;
        --v10;
      }
      while (v10);
      v8 = (operations_research::sat::LinearExpressionProto **)*((_QWORD *)this + 4);
    }
    operator delete(v8);
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

{
  operations_research::sat::LinearArgumentProto::~LinearArgumentProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::LinearArgumentProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void operations_research::sat::LinearArgumentProto::Clear(operations_research::sat::LinearArgumentProto *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  operations_research::sat::LinearExpressionProto *v9;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3;
      *(_DWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 64) = 0;
      v5 = *(_QWORD *)(v4 + 8);
      if ((v5 & 1) != 0
        && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
      ++v3;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = v6 & 1;
  v8 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    if (*v8)
      goto LABEL_12;
  }
  else if (v8)
  {
    goto LABEL_12;
  }
  v9 = (operations_research::sat::LinearExpressionProto *)*((_QWORD *)this + 5);
  if (v9)
  {
    operations_research::sat::LinearExpressionProto::~LinearExpressionProto(v9);
    MEMORY[0x22E31DF78]();
    v6 = *((_QWORD *)this + 1);
    v7 = v6 & 1;
  }
LABEL_12:
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
  }
}

google::protobuf::UnknownFieldSet *operations_research::sat::LinearArgumentProto::_InternalParse(operations_research::sat::LinearArgumentProto *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t *v8;
  unsigned int *v9;
  google::protobuf::UnknownFieldSet *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  int *v15;
  uint64_t v16;
  int v17;
  operations_research::sat::LinearExpressionProto *v18;
  google::protobuf::internal *v19;
  const char *v20;
  uint64_t SizeFallback;
  google::protobuf::internal *v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t v25;
  int v26;
  __int32 v27;
  BOOL v28;
  google::protobuf::internal *v29;
  int v30;
  int32x2_t v31;
  operations_research::sat::LinearExpressionProto *v32;
  const char *v33;
  google::protobuf::internal *v34;
  uint64_t TagFallback;
  unsigned int v36;
  google::protobuf::Arena **v37;
  uint64_t v38;
  int32x2_t v39;
  int v40;
  __int32 v41;
  int v42;
  char v43;
  google::protobuf::UnknownFieldSet *v44;
  google::protobuf::internal::ParseContext *v45;

  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1])
          return a2;
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]);
        if ((v43 & 1) != 0)
          return a2;
      }
      v10 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      v11 = *(unsigned __int8 *)a2;
      if ((*(char *)a2 & 0x80000000) == 0)
      {
        v12 = v11 >> 3;
        if (v11 >> 3 == 2)
          goto LABEL_16;
        goto LABEL_5;
      }
      v14 = v11 + (*(unsigned __int8 *)v10 << 7);
      v11 = v14 - 128;
      if (*(char *)v10 < 0)
      {
        TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v14 - 128));
        if (!TagFallback)
          return 0;
        v10 = (google::protobuf::UnknownFieldSet *)TagFallback;
        v11 = v36;
        v12 = v36 >> 3;
        if (v36 >> 3 != 2)
          goto LABEL_5;
LABEL_16:
        if (v11 != 18)
          goto LABEL_9;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)v10 - 1);
        while (1)
        {
          v15 = (int *)*((_QWORD *)this + 4);
          if (!v15)
            break;
          v16 = *((int *)this + 6);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *((_DWORD *)this + 6) = v16 + 1;
            v18 = *(operations_research::sat::LinearExpressionProto **)&v15[2 * v16 + 2];
            v19 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
            v20 = (const char *)*((unsigned __int8 *)a2 + 1);
            if (*((char *)a2 + 1) < 0)
              goto LABEL_21;
            goto LABEL_27;
          }
          if (v17 == *((_DWORD *)this + 7))
            goto LABEL_25;
LABEL_26:
          *v15 = v17 + 1;
          v18 = (operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(*((google::protobuf::Arena **)this + 2));
          v23 = *((_QWORD *)this + 4);
          v24 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v24 + 1;
          *(_QWORD *)(v23 + 8 * v24 + 8) = v18;
          v19 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
          v20 = (const char *)*((unsigned __int8 *)a2 + 1);
          if (*((char *)a2 + 1) < 0)
          {
LABEL_21:
            SizeFallback = google::protobuf::internal::ReadSizeFallback(v19, v20);
            if (!SizeFallback)
              return 0;
            v22 = (google::protobuf::internal *)SizeFallback;
            goto LABEL_28;
          }
LABEL_27:
          v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
LABEL_28:
          v25 = a3[1];
          v26 = (_DWORD)v20 + (_DWORD)v22 - v25.i32[0];
          *a3 = (int32x2_t)(*(_QWORD *)&v25 + (v26 & (v26 >> 31)));
          v27 = a3[3].i32[1];
          a3[3].i32[1] = v26;
          v25.i32[0] = a3[11].i32[0];
          v28 = __OFSUB__(v25.i32[0]--, 1);
          a3[11].i32[0] = v25.i32[0];
          if (v25.i32[0] < 0 != v28)
            return 0;
          v29 = operations_research::sat::LinearExpressionProto::_InternalParse(v18, v22, (google::protobuf::internal::ParseContext *)a3, a4, a5);
          a2 = v29;
          if (!v29)
            return a2;
          ++a3[11].i32[0];
          if (a3[10].i32[0])
            return 0;
          v30 = a3[3].i32[1] + v27 - v26;
          a3[3].i32[1] = v30;
          v31 = (int32x2_t)(*(_QWORD *)&a3[1] + (v30 & (v30 >> 31)));
          *a3 = v31;
          if (*(_QWORD *)&v31 <= (unint64_t)v29 || *(_BYTE *)v29 != 18)
            goto LABEL_2;
        }
        v17 = *((_DWORD *)this + 7);
LABEL_25:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v17 + 1);
        v15 = (int *)*((_QWORD *)this + 4);
        v17 = *v15;
        goto LABEL_26;
      }
      v10 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      v12 = v11 >> 3;
      if (v11 >> 3 == 2)
        goto LABEL_16;
LABEL_5:
      if (v12 == 1 && v11 == 10)
        break;
LABEL_9:
      if (!v11 || (v11 & 7) == 4)
      {
        a3[10].i32[0] = v11 - 1;
        return v10;
      }
      if ((*v8 & 1) != 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL)+ 8), v10, a3, a5);
        if (!a2)
          return a2;
      }
      else
      {
        v44 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v44, v10, a3, v45);
        if (!a2)
          return a2;
      }
    }
    v32 = (operations_research::sat::LinearExpressionProto *)*((_QWORD *)this + 5);
    if (v32)
    {
      v33 = (const char *)*(unsigned __int8 *)v10;
      if ((*(char *)v10 & 0x80000000) == 0)
        goto LABEL_36;
    }
    else
    {
      v37 = (google::protobuf::Arena **)(*v8 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v8 & 1) != 0)
      {
        v32 = (operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(*v37);
        *((_QWORD *)this + 5) = v32;
        v33 = (const char *)*(unsigned __int8 *)v10;
        if ((*(char *)v10 & 0x80000000) == 0)
        {
LABEL_36:
          v34 = (google::protobuf::UnknownFieldSet *)((char *)v10 + 1);
          goto LABEL_44;
        }
      }
      else
      {
        v32 = (operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>((google::protobuf::Arena *)v37);
        *((_QWORD *)this + 5) = v32;
        v33 = (const char *)*(unsigned __int8 *)v10;
        if ((*(char *)v10 & 0x80000000) == 0)
          goto LABEL_36;
      }
    }
    v38 = google::protobuf::internal::ReadSizeFallback(v10, v33);
    if (!v38)
      return 0;
    v34 = (google::protobuf::internal *)v38;
LABEL_44:
    v39 = a3[1];
    v40 = (_DWORD)v33 + (_DWORD)v34 - v39.i32[0];
    *a3 = (int32x2_t)(*(_QWORD *)&v39 + (v40 & (v40 >> 31)));
    v41 = a3[3].i32[1];
    a3[3].i32[1] = v40;
    v39.i32[0] = a3[11].i32[0];
    v28 = __OFSUB__(v39.i32[0]--, 1);
    a3[11].i32[0] = v39.i32[0];
    if (v39.i32[0] < 0 != v28)
      return 0;
    a2 = operations_research::sat::LinearExpressionProto::_InternalParse(v32, v34, (google::protobuf::internal::ParseContext *)a3, a4, a5);
    if (!a2)
      return a2;
    ++a3[11].i32[0];
    if (a3[10].i32[0])
      return 0;
    v42 = a3[3].i32[1] + v41 - v40;
    a3[3].i32[1] = v42;
    *a3 = (int32x2_t)(*(_QWORD *)&a3[1] + (v42 & (v42 >> 31)));
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearArgumentProto::_InternalSerialize(operations_research::sat::LinearArgumentProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  operations_research::sat::LinearExpressionProto *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  unsigned __int8 *v14;
  operations_research::sat::LinearExpressionProto *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  if (this != (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_)
  {
    v6 = (operations_research::sat::LinearExpressionProto *)*((_QWORD *)this + 5);
    if (v6)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        v6 = (operations_research::sat::LinearExpressionProto *)*((_QWORD *)this + 5);
        *a2 = 10;
        v7 = *((_DWORD *)v6 + 18);
        if (v7 <= 0x7F)
          goto LABEL_5;
      }
      else
      {
        *a2 = 10;
        v7 = *((_DWORD *)v6 + 18);
        if (v7 <= 0x7F)
        {
LABEL_5:
          a2[1] = v7;
          v8 = (unsigned __int8 *)(a2 + 2);
LABEL_12:
          a2 = (char *)operations_research::sat::LinearExpressionProto::_InternalSerialize(v6, (char *)v8, a3, a4);
          goto LABEL_13;
        }
      }
      a2[1] = v7 | 0x80;
      v9 = v7 >> 7;
      if (v7 >> 14)
      {
        v8 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v8 - 1) = v9 | 0x80;
          v10 = v9 >> 7;
          ++v8;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v8 - 1) = v10;
      }
      else
      {
        a2[2] = v9;
        v8 = (unsigned __int8 *)(a2 + 3);
      }
      goto LABEL_12;
    }
  }
LABEL_13:
  v12 = *((_DWORD *)this + 6);
  if (v12)
  {
    for (i = 0; i != v12; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v15 = *(operations_research::sat::LinearExpressionProto **)(*((_QWORD *)this + 4) + 8 * i + 8);
      *a2 = 18;
      v16 = *((_DWORD *)v15 + 18);
      if (v16 <= 0x7F)
      {
        a2[1] = v16;
        v14 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v16 | 0x80;
        v17 = v16 >> 7;
        if (v16 >> 14)
        {
          v14 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v14 - 1) = v17 | 0x80;
            v18 = v17 >> 7;
            ++v14;
            v19 = v17 >> 14;
            v17 >>= 7;
          }
          while (v19);
          *(v14 - 1) = v18;
        }
        else
        {
          a2[2] = v17;
          v14 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)operations_research::sat::LinearExpressionProto::_InternalSerialize(v15, (char *)v14, a3, a4);
    }
  }
  v20 = *((_QWORD *)this + 1);
  if ((v20 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::LinearArgumentProto::ByteSizeLong(operations_research::sat::LinearArgumentProto *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  operations_research::sat::LinearExpressionProto **v4;
  uint64_t v5;
  operations_research::sat::LinearExpressionProto *v6;
  char *v7;
  operations_research::sat::LinearExpressionProto *v8;
  char *v9;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (operations_research::sat::LinearExpressionProto **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = operations_research::sat::LinearExpressionProto::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
    if (this == (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_)
      goto LABEL_12;
  }
  else
  {
    v2 = 0;
    if (this == (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_)
      goto LABEL_12;
  }
  v8 = (operations_research::sat::LinearExpressionProto *)*((_QWORD *)this + 5);
  if (v8)
  {
    v9 = operations_research::sat::LinearExpressionProto::ByteSizeLong(v8);
    v2 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v2
                                                      + 1
                                                      + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
  }
LABEL_12:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearArgumentProto *)((char *)this + 8), v2, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v2;
  return (char *)v2;
}

void operations_research::sat::LinearArgumentProto::MergeFrom(operations_research::sat::LinearArgumentProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::LinearArgumentProto *__hidden))a2 == &off_24F981608)
    operations_research::sat::LinearArgumentProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::LinearArgumentProto::MergeFrom(operations_research::sat::LinearArgumentProto *this, const operations_research::sat::LinearArgumentProto *a2)
{
  _QWORD *v4;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  operations_research::sat::LinearExpressionProto **v13;
  operations_research::sat::LinearExpressionProto **v14;
  operations_research::sat::LinearExpressionProto *v15;
  operations_research::sat::LinearExpressionProto *v16;
  operations_research::sat::LinearExpressionProto *v17;
  google::protobuf::Arena *v18;
  int v19;
  uint64_t v20;
  operations_research::sat::LinearExpressionProto **v21;
  operations_research::sat::LinearExpressionProto **v22;
  operations_research::sat::LinearExpressionProto *v23;
  operations_research::sat::LinearExpressionProto *v24;
  int v25;
  int *v26;
  const operations_research::sat::LinearExpressionProto *v27;
  operations_research::sat::LinearExpressionProto *v28;
  google::protobuf::Arena *v29;
  const operations_research::sat::LinearExpressionProto *v30;
  _QWORD *v31;
  unsigned int *v32;
  uint64_t v33;

  v4 = (_QWORD *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((*v4 & 1) != 0)
      v7 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v7 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v7, v6);
  }
  v8 = *((_DWORD *)a2 + 6);
  if (v8)
  {
    v31 = v4;
    v33 = *((_QWORD *)a2 + 4);
    v32 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::LinearArgumentProto *)((char *)this + 16), v8);
    v9 = **((_DWORD **)this + 4);
    v10 = *((_DWORD *)this + 6);
    v11 = v9 - v10;
    if (v9 - v10 >= v8)
      v12 = v8;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (operations_research::sat::LinearExpressionProto **)v32;
      v14 = (operations_research::sat::LinearExpressionProto **)(v33 + 8);
      do
      {
        v16 = *v14++;
        v15 = v16;
        v17 = *v13++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v8)
    {
      v18 = (google::protobuf::Arena *)*((_QWORD *)this + 2);
      v19 = v10 + v8 - v9;
      v20 = 2 * v11;
      v21 = (operations_research::sat::LinearExpressionProto **)&v32[v20];
      v22 = (operations_research::sat::LinearExpressionProto **)(v20 * 4 + v33 + 8);
      do
      {
        v23 = *v22++;
        v24 = (operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v18);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 6) + v8;
    *((_DWORD *)this + 6) = v25;
    v26 = (int *)*((_QWORD *)this + 4);
    v4 = v31;
    if (*v26 < v25)
      *v26 = v25;
  }
  if (a2 != (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_)
  {
    v27 = (const operations_research::sat::LinearExpressionProto *)*((_QWORD *)a2 + 5);
    if (v27)
    {
      v28 = (operations_research::sat::LinearExpressionProto *)*((_QWORD *)this + 5);
      if (!v28)
      {
        v29 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v4 & 1) != 0)
          v29 = *(google::protobuf::Arena **)v29;
        v28 = (operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v29);
        *((_QWORD *)this + 5) = v28;
        v27 = (const operations_research::sat::LinearExpressionProto *)*((_QWORD *)a2 + 5);
      }
      if (v27)
        v30 = v27;
      else
        v30 = (const operations_research::sat::LinearExpressionProto *)&operations_research::sat::_LinearExpressionProto_default_instance_;
      operations_research::sat::LinearExpressionProto::MergeFrom(v28, v30);
    }
  }
}

void operations_research::sat::LinearArgumentProto::CopyFrom(operations_research::sat::LinearArgumentProto *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    operations_research::sat::LinearArgumentProto::Clear(this);
    if (*(void (***)(operations_research::sat::LinearArgumentProto *__hidden))a2 == &off_24F981608)
      operations_research::sat::LinearArgumentProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v4);
  }
}

uint64_t operations_research::sat::LinearArgumentProto::IsInitialized(operations_research::sat::LinearArgumentProto *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearArgumentProto::GetMetadata(operations_research::sat::LinearArgumentProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[8];
}

void operations_research::sat::AllDifferentConstraintProto::~AllDifferentConstraintProto(operations_research::sat::AllDifferentConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::AllDifferentConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::AllDifferentConstraintProto::Clear(operations_research::sat::AllDifferentConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::AllDifferentConstraintProto::_InternalParse(operations_research::sat::AllDifferentConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::UnknownFieldSet *v10;
  google::protobuf::UnknownFieldSet *v11;
  unsigned int v12;
  unsigned int v13;
  google::protobuf::internal *TagFallback;
  int v15;
  uint64_t v16;
  google::protobuf::internal *v18;

  v6 = a2;
  v18 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::AllDifferentConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v18 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v11 = (google::protobuf::internal *)((char *)v6 + 1);
    v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_8;
    v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    v12 = v13 - 128;
    if (*(char *)v11 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      v18 = TagFallback;
      if (!TagFallback)
        return 0;
      v11 = TagFallback;
      v12 = a2;
      if ((a2 & 0xFFFFFFF8) == 8)
        goto LABEL_9;
LABEL_14:
      if (!v12 || (v12 & 7) == 4)
      {
        a3[10].i32[0] = v12 - 1;
        return v11;
      }
      if ((*v8 & 1) != 0)
      {
        v10 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        v11 = v18;
      }
      v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v10, v11, a3, a5);
      v18 = v6;
      if (!v6)
        return v6;
    }
    else
    {
      v11 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_8:
      v18 = v11;
      if ((v12 & 0xFFFFFFF8) != 8)
        goto LABEL_14;
LABEL_9:
      if (v12 == 10)
      {
        v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v11, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        v18 = v6;
        if (!v6)
          return v6;
      }
      else
      {
        if (v12 != 8)
          goto LABEL_14;
        v15 = google::protobuf::internal::ReadVarint64(&v18, (const char **)a2);
        v16 = *((unsigned int *)this + 4);
        if ((_DWORD)v16 == *((_DWORD *)this + 5))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v16 + 1);
        *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v16) = v15;
        *((_DWORD *)this + 4) = v16 + 1;
        v6 = v18;
        if (!v18)
          return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::AllDifferentConstraintProto::_InternalSerialize(operations_research::sat::AllDifferentConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v18;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v18 = v6 >> 14;
      v6 >>= 7;
    }
    while (v18);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::AllDifferentConstraintProto::ByteSizeLong(operations_research::sat::AllDifferentConstraintProto *this)
{
  uint64_t v2;
  const google::protobuf::UnknownFieldSet *v3;
  google::protobuf::UnknownFieldSet *v4;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 8) = v2;
      v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      v4 = (operations_research::sat::AllDifferentConstraintProto *)((char *)this + 8);
      if ((*((_BYTE *)this + 8) & 1) != 0)
        return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
LABEL_6:
      *((_DWORD *)this + 9) = (_DWORD)v3;
      return (char *)v3;
    }
    *((_DWORD *)this + 8) = v2;
    v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
    v4 = (operations_research::sat::AllDifferentConstraintProto *)((char *)this + 8);
    if ((*((_BYTE *)this + 8) & 1) == 0)
      goto LABEL_6;
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = (operations_research::sat::AllDifferentConstraintProto *)((char *)this + 8);
    if ((*((_BYTE *)this + 8) & 1) == 0)
      goto LABEL_6;
  }
  return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
}

void operations_research::sat::AllDifferentConstraintProto::MergeFrom(operations_research::sat::AllDifferentConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  const google::protobuf::UnknownFieldSet *v14;

  if (*(void (***)(operations_research::sat::AllDifferentConstraintProto *__hidden))a2 == off_24F9816B8)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((char *)this + 8);
      v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v8 = *((_QWORD *)this + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v14 = v7;
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
        v7 = v14;
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    }
    v10 = *((_DWORD *)a2 + 4);
    if (v10)
    {
      v12 = *((int *)this + 4);
      v11 = (unsigned int *)((char *)this + 16);
      google::protobuf::RepeatedField<int>::Reserve(v11, v12 + v10);
      v13 = *((_QWORD *)v11 + 1);
      *v11 += *((_DWORD *)a2 + 4);
      memcpy((void *)(v13 + 4 * v12), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::AllDifferentConstraintProto::CopyFrom(operations_research::sat::AllDifferentConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    operations_research::sat::AllDifferentConstraintProto::MergeFrom(this, a2, a3);
  }
}

uint64_t operations_research::sat::AllDifferentConstraintProto::IsInitialized(operations_research::sat::AllDifferentConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::AllDifferentConstraintProto::GetMetadata(operations_research::sat::AllDifferentConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[10];
}

operations_research::sat::LinearConstraintProto *operations_research::sat::LinearConstraintProto::LinearConstraintProto(operations_research::sat::LinearConstraintProto *this, const operations_research::sat::LinearConstraintProto *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  google::protobuf::UnknownFieldSet *v12;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F981768;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    v8 = (void *)*((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v9 = *((_DWORD *)a2 + 16);
  if (v9)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v9);
    v10 = (void *)*((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy(v10, *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  *((_DWORD *)this + 21) = 0;
  v11 = *((_QWORD *)a2 + 1);
  if ((v11 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v12 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v12 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v12, (const google::protobuf::UnknownFieldSet *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  return this;
}

void sub_22DA60B1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v3);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void sub_22DA60B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearConstraintProto::~LinearConstraintProto(operations_research::sat::LinearConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::LinearConstraintProto::~LinearConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::LinearConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 84) = a2;
  return this;
}

void operations_research::sat::LinearConstraintProto::Clear(operations_research::sat::LinearConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::LinearConstraintProto::_InternalParse(operations_research::sat::LinearConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  google::protobuf::internal *v11;
  google::protobuf::internal *v12;
  google::protobuf::internal *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  google::protobuf::internal *TagFallback;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  google::protobuf::UnknownFieldSet *v25;
  google::protobuf::internal *v27;

  v6 = a2;
  v27 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 64);
  v10 = (unsigned int *)((char *)this + 40);
  v11 = (operations_research::sat::LinearConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v27 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v14 = (unsigned __int8 *)v6 + 1;
    v15 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_10;
    v16 = v15 + (*v14 << 7);
    v15 = v16 - 128;
    if ((char)*v14 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v16 - 128));
      v27 = TagFallback;
      if (!TagFallback)
        return 0;
      v14 = (unsigned __int8 *)TagFallback;
      v15 = a2;
      v17 = a2 >> 3;
      if (a2 >> 3 == 3)
        goto LABEL_17;
LABEL_11:
      if (v17 == 2)
      {
        if (v15 == 18)
        {
          v12 = (google::protobuf::internal *)v10;
LABEL_4:
          v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v12, v14, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
          goto LABEL_5;
        }
        if (v15 == 16)
        {
          v19 = google::protobuf::internal::ReadVarint64(&v27, (const char **)a2);
          v20 = *((unsigned int *)this + 10);
          if ((_DWORD)v20 == *((_DWORD *)this + 11))
            google::protobuf::RepeatedField<long long>::Reserve(v10, v20 + 1);
          *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v20) = v19;
          *((_DWORD *)this + 10) = v20 + 1;
          goto LABEL_34;
        }
        goto LABEL_36;
      }
      if (v17 != 1)
        goto LABEL_36;
      if (v15 == 10)
      {
        v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, v14, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        goto LABEL_5;
      }
      if (v15 != 8)
        goto LABEL_36;
      v21 = google::protobuf::internal::ReadVarint64(&v27, (const char **)a2);
      v22 = *((unsigned int *)this + 4);
      if ((_DWORD)v22 == *((_DWORD *)this + 5))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v11, v22 + 1);
      *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v22) = v21;
      *((_DWORD *)this + 4) = v22 + 1;
LABEL_34:
      v6 = v27;
      if (!v27)
        return v6;
    }
    else
    {
      v14 = (unsigned __int8 *)v6 + 2;
LABEL_10:
      v27 = (google::protobuf::internal *)v14;
      v17 = v15 >> 3;
      if (v15 >> 3 != 3)
        goto LABEL_11;
LABEL_17:
      if (v15 == 26)
      {
        v12 = (google::protobuf::internal *)v9;
        goto LABEL_4;
      }
      if (v15 == 24)
      {
        v23 = google::protobuf::internal::ReadVarint64(&v27, (const char **)a2);
        v24 = *((unsigned int *)this + 16);
        if ((_DWORD)v24 == *((_DWORD *)this + 17))
          google::protobuf::RepeatedField<long long>::Reserve(v9, v24 + 1);
        *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v24) = v23;
        *((_DWORD *)this + 16) = v24 + 1;
        goto LABEL_34;
      }
LABEL_36:
      if (!v15 || (v15 & 7) == 4)
      {
        a3[10].i32[0] = v15 - 1;
        return (google::protobuf::internal *)v14;
      }
      if ((*v8 & 1) != 0)
      {
        v25 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v25 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        v14 = (unsigned __int8 *)v27;
      }
      v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, v25, (google::protobuf::UnknownFieldSet *)v14, a3, a5);
LABEL_5:
      v6 = v13;
      v27 = v13;
      if (!v13)
        return v6;
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearConstraintProto::_InternalSerialize(operations_research::sat::LinearConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v38 = v6 >> 14;
      v6 >>= 7;
    }
    while (v38);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (unint64_t *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v39 = v16 >> 14;
      v16 >>= 7;
    }
    while (v39);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  v26 = *((_DWORD *)this + 20);
  if ((int)v26 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
        goto LABEL_34;
    }
    else
    {
      *a2 = 26;
      v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
      {
LABEL_34:
        a2 += 2;
        *v27 = v26;
        v28 = (unint64_t *)*((_QWORD *)this + 9);
        v29 = &v28[*((int *)this + 16)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v35 = *v28++;
            v30 = v35;
            if (v35 > 0x7F)
            {
LABEL_39:
              *a2 = v30 | 0x80;
              v32 = v30 >> 7;
              if (v30 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v32 | 0x80;
                  v33 = v32 >> 7;
                  ++a2;
                  v34 = v32 >> 14;
                  v32 >>= 7;
                }
                while (v34);
                *(a2 - 1) = v33;
              }
              else
              {
                a2[1] = v32;
                a2 += 2;
              }
              goto LABEL_36;
            }
          }
          else
          {
            v31 = *v28++;
            v30 = v31;
            if (v31 > 0x7F)
              goto LABEL_39;
          }
          *a2++ = v30;
LABEL_36:
          if (v28 >= v29)
            goto LABEL_46;
        }
      }
    }
    do
    {
      *v27++ = v26 | 0x80;
      v40 = v26 >> 14;
      v26 >>= 7;
    }
    while (v40);
    a2 = (char *)(v27 - 1);
    goto LABEL_34;
  }
LABEL_46:
  v36 = *((_QWORD *)this + 1);
  if ((v36 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::LinearConstraintProto::ByteSizeLong(operations_research::sat::LinearConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const google::protobuf::UnknownFieldSet *v10;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4)
      goto LABEL_9;
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4)
      goto LABEL_9;
LABEL_6:
    if ((v4 & 0x80000000) != 0)
      v5 = 11;
    else
      v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    *((_DWORD *)this + 14) = v4;
    v6 = v5 + v3 + v4;
    v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_13;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (v4)
    goto LABEL_6;
LABEL_9:
  *((_DWORD *)this + 14) = 0;
  v6 = v3 + v4;
  v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
  if (!v7)
  {
LABEL_10:
    v8 = 0;
    goto LABEL_17;
  }
LABEL_13:
  v8 = v7;
  if ((v7 & 0x80000000) != 0)
    v9 = 11;
  else
    v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v6 += v9;
LABEL_17:
  *((_DWORD *)this + 20) = v8;
  v10 = (const google::protobuf::UnknownFieldSet *)(v6 + v7);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearConstraintProto *)((char *)this + 8), v10, (_DWORD *)this + 21);
  *((_DWORD *)this + 21) = (_DWORD)v10;
  return (char *)(v6 + v7);
}

void operations_research::sat::LinearConstraintProto::MergeFrom(operations_research::sat::LinearConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::LinearConstraintProto *__hidden))a2 == &off_24F981768)
    operations_research::sat::LinearConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::LinearConstraintProto::MergeFrom(operations_research::sat::LinearConstraintProto *this, const operations_research::sat::LinearConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    v17 = *((int *)this + 16);
    v16 = (unsigned int *)((char *)this + 64);
    google::protobuf::RepeatedField<long long>::Reserve(v16, v17 + v15);
    v18 = *((_QWORD *)v16 + 1);
    *v16 += *((_DWORD *)a2 + 16);
    memcpy((void *)(v18 + 8 * v17), *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
}

void operations_research::sat::LinearConstraintProto::CopyFrom(operations_research::sat::LinearConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_DWORD *)this + 16) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::LinearConstraintProto *__hidden))a2 == &off_24F981768)
      operations_research::sat::LinearConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::LinearConstraintProto::IsInitialized(operations_research::sat::LinearConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearConstraintProto::GetMetadata(operations_research::sat::LinearConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[12];
}

void operations_research::sat::ElementConstraintProto::~ElementConstraintProto(operations_research::sat::ElementConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::ElementConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

void operations_research::sat::ElementConstraintProto::Clear(operations_research::sat::ElementConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::ElementConstraintProto::_InternalParse(operations_research::sat::ElementConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::UnknownFieldSet *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v16;
  int v17;
  google::protobuf::internal *TagFallback;
  int v19;
  uint64_t v20;
  google::protobuf::internal *v22;

  v6 = a2;
  v22 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::ElementConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v22 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v11 = (unsigned __int8 *)v6 + 1;
    v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_8;
    v13 = v12 + (*v11 << 7);
    v12 = v13 - 128;
    if ((char)*v11 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      v22 = TagFallback;
      if (!TagFallback)
        return 0;
      v11 = (unsigned __int8 *)TagFallback;
      v12 = a2;
      v14 = a2 >> 3;
      if (a2 >> 3 != 3)
        goto LABEL_9;
LABEL_29:
      if (v12 == 26)
      {
        v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, v11, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        v22 = v6;
        if (!v6)
          return v6;
      }
      else
      {
        if (v12 != 24)
          goto LABEL_14;
        v19 = google::protobuf::internal::ReadVarint64(&v22, (const char **)a2);
        v20 = *((unsigned int *)this + 4);
        if ((_DWORD)v20 == *((_DWORD *)this + 5))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v20 + 1);
        *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v20) = v19;
        *((_DWORD *)this + 4) = v20 + 1;
        v6 = v22;
        if (!v22)
          return v6;
      }
    }
    else
    {
      v11 = (unsigned __int8 *)v6 + 2;
LABEL_8:
      v22 = (google::protobuf::internal *)v11;
      v14 = v12 >> 3;
      if (v12 >> 3 == 3)
        goto LABEL_29;
LABEL_9:
      if (v14 == 2)
      {
        if (v12 != 16)
          goto LABEL_14;
        v6 = (google::protobuf::internal *)(v11 + 1);
        a2 = (google::protobuf::internal *)*v11;
        if ((a2 & 0x80) != 0)
        {
          v16 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v16 << 7) - 128);
          if ((v16 & 0x80000000) == 0)
          {
            v6 = (google::protobuf::internal *)(v11 + 2);
            goto LABEL_22;
          }
          v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v11, (const char *)a2);
          v22 = v6;
          *((_DWORD *)this + 10) = (_DWORD)a2;
          if (!v6)
            return v6;
        }
        else
        {
LABEL_22:
          v22 = v6;
          *((_DWORD *)this + 10) = (_DWORD)a2;
        }
      }
      else if (v14 == 1 && v12 == 8)
      {
        v6 = (google::protobuf::internal *)(v11 + 1);
        a2 = (google::protobuf::internal *)*v11;
        if ((a2 & 0x80) == 0)
          goto LABEL_26;
        v17 = *(char *)v6;
        a2 = (google::protobuf::internal *)(a2 + (v17 << 7) - 128);
        if (v17 < 0)
        {
          v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v11, (const char *)a2);
          v22 = v6;
          *((_DWORD *)this + 9) = (_DWORD)a2;
          if (!v6)
            return v6;
        }
        else
        {
          v6 = (google::protobuf::internal *)(v11 + 2);
LABEL_26:
          v22 = v6;
          *((_DWORD *)this + 9) = (_DWORD)a2;
        }
      }
      else
      {
LABEL_14:
        if (!v12 || (v12 & 7) == 4)
        {
          a3[10].i32[0] = v12 - 1;
          return (google::protobuf::internal *)v11;
        }
        if ((*v8 & 1) != 0)
        {
          v10 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v11 = (unsigned __int8 *)v22;
        }
        v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v10, (google::protobuf::UnknownFieldSet *)v11, a3, a5);
        v22 = v6;
        if (!v6)
          return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::ElementConstraintProto::_InternalSerialize(operations_research::sat::ElementConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int *v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v26;

  v6 = *((_DWORD *)this + 9);
  if (!v6)
  {
LABEL_9:
    v7 = *((_DWORD *)this + 10);
    if (!v7)
      goto LABEL_21;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = *((_DWORD *)this + 9);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      v7 = *((_DWORD *)this + 10);
      if (!v7)
        goto LABEL_21;
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F)
      goto LABEL_4;
  }
  a2[1] = v6 | 0x80;
  v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    v10 = v8 >> 7;
    ++a2;
    v11 = v8 >> 14;
    v8 >>= 7;
  }
  while (v11);
  *(a2 - 1) = v10;
  v7 = *((_DWORD *)this + 10);
  if (!v7)
  {
LABEL_21:
    v9 = *((_DWORD *)this + 8);
    if (v9 >= 1)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_10:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_DWORD *)this + 10);
    *a2 = 16;
    if (v7 <= 0x7F)
    {
LABEL_12:
      a2[1] = v7;
      a2 += 2;
      v9 = *((_DWORD *)this + 8);
      if (v9 >= 1)
        goto LABEL_22;
      goto LABEL_39;
    }
  }
  else
  {
    *a2 = 16;
    if (v7 <= 0x7F)
      goto LABEL_12;
  }
  a2[1] = v7 | 0x80;
  v12 = (unint64_t)(int)v7 >> 7;
  if (!(v7 >> 14))
  {
    a2[2] = v12;
    a2 += 3;
    goto LABEL_21;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v12 | 0x80;
    v22 = v12 >> 7;
    ++a2;
    v23 = v12 >> 14;
    v12 >>= 7;
  }
  while (v23);
  *(a2 - 1) = v22;
  v9 = *((_DWORD *)this + 8);
  if (v9 >= 1)
  {
LABEL_22:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      v13 = (unsigned __int8 *)(a2 + 1);
      if (v9 < 0x80)
        goto LABEL_24;
    }
    else
    {
      *a2 = 26;
      v13 = (unsigned __int8 *)(a2 + 1);
      if (v9 < 0x80)
      {
LABEL_24:
        a2 += 2;
        *v13 = v9;
        v14 = (int *)*((_QWORD *)this + 3);
        v15 = &v14[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v21 = *v14++;
            v16 = v21;
            if (v21 > 0x7F)
            {
LABEL_29:
              *a2 = v16 | 0x80;
              v18 = v16 >> 7;
              if (v16 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v18 | 0x80;
                  v19 = v18 >> 7;
                  ++a2;
                  v20 = v18 >> 14;
                  v18 >>= 7;
                }
                while (v20);
                *(a2 - 1) = v19;
              }
              else
              {
                a2[1] = v18;
                a2 += 2;
              }
              goto LABEL_26;
            }
          }
          else
          {
            v17 = *v14++;
            v16 = v17;
            if (v17 > 0x7F)
              goto LABEL_29;
          }
          *a2++ = v16;
LABEL_26:
          if (v14 >= v15)
            goto LABEL_39;
        }
      }
    }
    do
    {
      *v13++ = v9 | 0x80;
      v26 = v9 >> 14;
      v9 = v9 >> 7;
    }
    while (v26);
    a2 = (char *)(v13 - 1);
    goto LABEL_24;
  }
LABEL_39:
  v24 = *((_QWORD *)this + 1);
  if ((v24 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v24 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::ElementConstraintProto::ByteSizeLong(operations_research::sat::ElementConstraintProto *this)
{
  uint64_t v2;
  const google::protobuf::UnknownFieldSet *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0)
    {
      *((_DWORD *)this + 8) = v2;
      v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
      v4 = *((_DWORD *)this + 9);
      if (!v4)
        goto LABEL_12;
    }
    else
    {
      *((_DWORD *)this + 8) = v2;
      v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      v4 = *((_DWORD *)this + 9);
      if (!v4)
        goto LABEL_12;
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = *((_DWORD *)this + 9);
    if (!v4)
      goto LABEL_12;
  }
  if (v4 < 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + v5);
LABEL_12:
  v6 = *((_DWORD *)this + 10);
  if (v6)
  {
    if (v6 < 0)
      v7 = 11;
    else
      v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + v7);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::ElementConstraintProto *)((char *)this + 8), v3, (_DWORD *)this + 11);
  *((_DWORD *)this + 11) = (_DWORD)v3;
  return (char *)v3;
}

void operations_research::sat::ElementConstraintProto::MergeFrom(operations_research::sat::ElementConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  const google::protobuf::UnknownFieldSet *v15;

  if (*(void (***)(operations_research::sat::ElementConstraintProto *__hidden))a2 == off_24F981818)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((char *)this + 8);
      v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v8 = *((_QWORD *)this + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v15 = v7;
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
        v7 = v15;
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    }
    v10 = *((_DWORD *)a2 + 4);
    if (v10)
    {
      v11 = *((int *)this + 4);
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v11 + v10);
      v12 = *((_QWORD *)this + 3);
      *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
      memcpy((void *)(v12 + 4 * v11), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
    }
    v13 = *((_DWORD *)a2 + 9);
    if (v13)
      *((_DWORD *)this + 9) = v13;
    v14 = *((_DWORD *)a2 + 10);
    if (v14)
      *((_DWORD *)this + 10) = v14;
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::ElementConstraintProto::CopyFrom(operations_research::sat::ElementConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *(_QWORD *)((char *)this + 36) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    operations_research::sat::ElementConstraintProto::MergeFrom(this, a2, a3);
  }
}

uint64_t operations_research::sat::ElementConstraintProto::IsInitialized(operations_research::sat::ElementConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::ElementConstraintProto::GetMetadata(operations_research::sat::ElementConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[14];
}

operations_research::sat::IntervalConstraintProto *operations_research::sat::IntervalConstraintProto::IntervalConstraintProto(operations_research::sat::IntervalConstraintProto *this, const operations_research::sat::IntervalConstraintProto *a2)
{
  uint64_t *v4;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = off_24F9818C8;
  *((_DWORD *)this + 7) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v7, v6);
  }
  v8 = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_QWORD *)this + 2) = v8;
  return this;
}

void operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto(operations_research::sat::IntervalConstraintProto *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    v3 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x22E31DF78](v2, 0x20C40DC1BFBCFLL);
    }
  }
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    v3 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x22E31DF78](v2, 0x20C40DC1BFBCFLL);
    }
  }
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::IntervalConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void operations_research::sat::IntervalConstraintProto::Clear(operations_research::sat::IntervalConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::IntervalConstraintProto::_InternalParse(operations_research::sat::IntervalConstraintProto *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, uint64_t a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t *v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t TagFallback;
  unsigned int v19;
  const char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  google::protobuf::UnknownFieldSet *v26;
  google::protobuf::internal::ParseContext *v27;

  v8 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1])
        return a2;
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]);
      if ((v25 & 1) != 0)
        return a2;
    }
    v9 = (char *)a2 + 1;
    v10 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
      goto LABEL_8;
    v11 = v10 + (*v9 << 7);
    v10 = v11 - 128;
    if (*v9 < 0)
      break;
    v9 = (char *)a2 + 2;
LABEL_8:
    v12 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
LABEL_30:
      if (v10 != 24)
        goto LABEL_14;
      a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
      LODWORD(v20) = *v9;
      if ((v20 & 0x80) != 0)
      {
        v21 = *(char *)a2;
        v20 = (const char *)(v20 + (v21 << 7) - 128);
        if ((v21 & 0x80000000) == 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
          goto LABEL_3;
        }
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v20);
        *((_DWORD *)this + 6) = v22;
        if (!a2)
          return a2;
      }
      else
      {
LABEL_3:
        *((_DWORD *)this + 6) = (_DWORD)v20;
      }
    }
    else
    {
LABEL_9:
      if (v12 == 2)
      {
        if (v10 != 16)
          goto LABEL_14;
        a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
        LODWORD(v14) = *v9;
        if ((v14 & 0x80) != 0)
        {
          v15 = *(char *)a2;
          v14 = (const char *)(v14 + (v15 << 7) - 128);
          if ((v15 & 0x80000000) == 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
            goto LABEL_23;
          }
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v14);
          *((_DWORD *)this + 5) = v23;
          if (!a2)
            return a2;
        }
        else
        {
LABEL_23:
          *((_DWORD *)this + 5) = (_DWORD)v14;
        }
      }
      else if (v12 == 1 && v10 == 8)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
        LODWORD(v16) = *v9;
        if ((v16 & 0x80) == 0)
          goto LABEL_27;
        v17 = *(char *)a2;
        v16 = (const char *)(v16 + (v17 << 7) - 128);
        if (v17 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v16);
          *((_DWORD *)this + 4) = v24;
          if (!a2)
            return a2;
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_27:
          *((_DWORD *)this + 4) = (_DWORD)v16;
        }
      }
      else
      {
LABEL_14:
        if (!v10 || (v10 & 7) == 4)
        {
          a3[10].i32[0] = v10 - 1;
          return (google::protobuf::UnknownFieldSet *)v9;
        }
        if ((*v8 & 1) != 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL)+ 8), (google::protobuf::UnknownFieldSet *)v9, a3, a5);
          if (!a2)
            return a2;
        }
        else
        {
          v26 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v26, (google::protobuf::UnknownFieldSet *)v9, a3, v27);
          if (!a2)
            return a2;
        }
      }
    }
  }
  TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v11 - 128));
  if (TagFallback)
  {
    v9 = (char *)TagFallback;
    v10 = v19;
    v12 = v19 >> 3;
    if (v19 >> 3 != 3)
      goto LABEL_9;
    goto LABEL_30;
  }
  return 0;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::IntervalConstraintProto::_InternalSerialize(operations_research::sat::IntervalConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = *((_DWORD *)this + 4);
  if (!v6)
  {
LABEL_9:
    v7 = *((_DWORD *)this + 5);
    if (!v7)
      goto LABEL_21;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = *((_DWORD *)this + 4);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      v7 = *((_DWORD *)this + 5);
      if (!v7)
        goto LABEL_21;
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F)
      goto LABEL_4;
  }
  a2[1] = v6 | 0x80;
  v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    v10 = v8 >> 7;
    ++a2;
    v11 = v8 >> 14;
    v8 >>= 7;
  }
  while (v11);
  *(a2 - 1) = v10;
  v7 = *((_DWORD *)this + 5);
  if (!v7)
    goto LABEL_21;
LABEL_10:
  if (*(_QWORD *)a3 > (unint64_t)a2)
  {
    *a2 = 16;
    if (v7 <= 0x7F)
      goto LABEL_12;
    goto LABEL_19;
  }
  a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v7 = *((_DWORD *)this + 5);
  *a2 = 16;
  if (v7 > 0x7F)
  {
LABEL_19:
    a2[1] = v7 | 0x80;
    v12 = (unint64_t)(int)v7 >> 7;
    if (v7 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++a2;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(a2 - 1) = v13;
      v9 = *((_DWORD *)this + 6);
      if (!v9)
        goto LABEL_35;
      goto LABEL_22;
    }
    a2[2] = v12;
    a2 += 3;
LABEL_21:
    v9 = *((_DWORD *)this + 6);
    if (!v9)
      goto LABEL_35;
LABEL_22:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v9 = *((_DWORD *)this + 6);
      *a2 = 24;
      if (v9 <= 0x7F)
        goto LABEL_24;
    }
    else
    {
      *a2 = 24;
      if (v9 <= 0x7F)
      {
LABEL_24:
        a2[1] = v9;
        a2 += 2;
        goto LABEL_35;
      }
    }
    a2[1] = v9 | 0x80;
    v15 = (unint64_t)(int)v9 >> 7;
    if (v9 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        v16 = v15 >> 7;
        ++a2;
        v17 = v15 >> 14;
        v15 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
    }
    goto LABEL_35;
  }
LABEL_12:
  a2[1] = v7;
  a2 += 2;
  v9 = *((_DWORD *)this + 6);
  if (v9)
    goto LABEL_22;
LABEL_35:
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::IntervalConstraintProto::ByteSizeLong(operations_research::sat::IntervalConstraintProto *this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
    {
      v2 = 11;
      v3 = *((_DWORD *)this + 5);
      if (!v3)
        goto LABEL_12;
    }
    else
    {
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
      v3 = *((_DWORD *)this + 5);
      if (!v3)
        goto LABEL_12;
    }
  }
  else
  {
    v2 = 0;
    v3 = *((_DWORD *)this + 5);
    if (!v3)
      goto LABEL_12;
  }
  if (v3 < 0)
    v4 = 11;
  else
    v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v2 += v4;
LABEL_12:
  v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0)
      v6 = 11;
    else
      v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v2 += v6;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::IntervalConstraintProto *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v2;
  return (char *)v2;
}

void operations_research::sat::IntervalConstraintProto::MergeFrom(operations_research::sat::IntervalConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  int v10;
  int v11;
  int v12;
  const google::protobuf::UnknownFieldSet *v13;

  if (*(void (***)(operations_research::sat::IntervalConstraintProto *__hidden))a2 == off_24F9818C8)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((char *)this + 8);
      v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v8 = *((_QWORD *)this + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v13 = v7;
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
        v7 = v13;
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    }
    v10 = *((_DWORD *)a2 + 4);
    if (v10)
      *((_DWORD *)this + 4) = v10;
    v11 = *((_DWORD *)a2 + 5);
    if (v11)
      *((_DWORD *)this + 5) = v11;
    v12 = *((_DWORD *)a2 + 6);
    if (v12)
      *((_DWORD *)this + 6) = v12;
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::IntervalConstraintProto::CopyFrom(operations_research::sat::IntervalConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  const google::protobuf::UnknownFieldSet *v9;
  google::protobuf::UnknownFieldSet *v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  unint64_t v15;

  if (a2 != this)
  {
    *((_QWORD *)this + 2) = 0;
    v5 = (_DWORD *)((char *)this + 16);
    *((_DWORD *)this + 6) = 0;
    v7 = (uint64_t *)((char *)this + 8);
    v6 = *((_QWORD *)this + 1);
    if ((v6 & 1) != 0 && *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::IntervalConstraintProto *__hidden))a2 == off_24F9818C8)
    {
      v8 = *((_QWORD *)a2 + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (const google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        if ((*v7 & 1) != 0)
        {
          v10 = (google::protobuf::UnknownFieldSet *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v14 = v7;
          v15 = (v8 & 0xFFFFFFFFFFFFFFFELL) + 8;
          v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v14);
          v9 = (const google::protobuf::UnknownFieldSet *)v15;
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v10, v9);
      }
      v11 = *((_DWORD *)a2 + 4);
      if (v11)
        *v5 = v11;
      v12 = *((_DWORD *)a2 + 5);
      if (v12)
        *((_DWORD *)this + 5) = v12;
      v13 = *((_DWORD *)a2 + 6);
      if (v13)
        *((_DWORD *)this + 6) = v13;
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
    }
  }
}

uint64_t operations_research::sat::IntervalConstraintProto::IsInitialized(operations_research::sat::IntervalConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::IntervalConstraintProto::GetMetadata(operations_research::sat::IntervalConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[16];
}

void operations_research::sat::NoOverlapConstraintProto::~NoOverlapConstraintProto(operations_research::sat::NoOverlapConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::NoOverlapConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::NoOverlapConstraintProto::Clear(operations_research::sat::NoOverlapConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::NoOverlapConstraintProto::_InternalParse(operations_research::sat::NoOverlapConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::UnknownFieldSet *v10;
  google::protobuf::UnknownFieldSet *v11;
  unsigned int v12;
  unsigned int v13;
  google::protobuf::internal *TagFallback;
  int v15;
  uint64_t v16;
  google::protobuf::internal *v18;

  v6 = a2;
  v18 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::NoOverlapConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v18 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v11 = (google::protobuf::internal *)((char *)v6 + 1);
    v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_8;
    v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    v12 = v13 - 128;
    if (*(char *)v11 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      v18 = TagFallback;
      if (!TagFallback)
        return 0;
      v11 = TagFallback;
      v12 = a2;
      if ((a2 & 0xFFFFFFF8) == 8)
        goto LABEL_9;
LABEL_14:
      if (!v12 || (v12 & 7) == 4)
      {
        a3[10].i32[0] = v12 - 1;
        return v11;
      }
      if ((*v8 & 1) != 0)
      {
        v10 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        v11 = v18;
      }
      v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v10, v11, a3, a5);
      v18 = v6;
      if (!v6)
        return v6;
    }
    else
    {
      v11 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_8:
      v18 = v11;
      if ((v12 & 0xFFFFFFF8) != 8)
        goto LABEL_14;
LABEL_9:
      if (v12 == 10)
      {
        v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v11, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        v18 = v6;
        if (!v6)
          return v6;
      }
      else
      {
        if (v12 != 8)
          goto LABEL_14;
        v15 = google::protobuf::internal::ReadVarint64(&v18, (const char **)a2);
        v16 = *((unsigned int *)this + 4);
        if ((_DWORD)v16 == *((_DWORD *)this + 5))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v16 + 1);
        *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v16) = v15;
        *((_DWORD *)this + 4) = v16 + 1;
        v6 = v18;
        if (!v18)
          return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::NoOverlapConstraintProto::_InternalSerialize(operations_research::sat::NoOverlapConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v18;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v18 = v6 >> 14;
      v6 >>= 7;
    }
    while (v18);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::NoOverlapConstraintProto::ByteSizeLong(operations_research::sat::NoOverlapConstraintProto *this)
{
  uint64_t v2;
  const google::protobuf::UnknownFieldSet *v3;
  google::protobuf::UnknownFieldSet *v4;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 8) = v2;
      v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      v4 = (operations_research::sat::NoOverlapConstraintProto *)((char *)this + 8);
      if ((*((_BYTE *)this + 8) & 1) != 0)
        return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
LABEL_6:
      *((_DWORD *)this + 9) = (_DWORD)v3;
      return (char *)v3;
    }
    *((_DWORD *)this + 8) = v2;
    v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
    v4 = (operations_research::sat::NoOverlapConstraintProto *)((char *)this + 8);
    if ((*((_BYTE *)this + 8) & 1) == 0)
      goto LABEL_6;
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = (operations_research::sat::NoOverlapConstraintProto *)((char *)this + 8);
    if ((*((_BYTE *)this + 8) & 1) == 0)
      goto LABEL_6;
  }
  return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
}

void operations_research::sat::NoOverlapConstraintProto::MergeFrom(operations_research::sat::NoOverlapConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  const google::protobuf::UnknownFieldSet *v14;

  if (*(void (***)(operations_research::sat::NoOverlapConstraintProto *__hidden))a2 == off_24F981978)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((char *)this + 8);
      v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v8 = *((_QWORD *)this + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v14 = v7;
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
        v7 = v14;
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    }
    v10 = *((_DWORD *)a2 + 4);
    if (v10)
    {
      v12 = *((int *)this + 4);
      v11 = (unsigned int *)((char *)this + 16);
      google::protobuf::RepeatedField<int>::Reserve(v11, v12 + v10);
      v13 = *((_QWORD *)v11 + 1);
      *v11 += *((_DWORD *)a2 + 4);
      memcpy((void *)(v13 + 4 * v12), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::NoOverlapConstraintProto::CopyFrom(operations_research::sat::NoOverlapConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    operations_research::sat::NoOverlapConstraintProto::MergeFrom(this, a2, a3);
  }
}

uint64_t operations_research::sat::NoOverlapConstraintProto::IsInitialized(operations_research::sat::NoOverlapConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::NoOverlapConstraintProto::GetMetadata(operations_research::sat::NoOverlapConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[18];
}

void operations_research::sat::NoOverlap2DConstraintProto::~NoOverlap2DConstraintProto(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::NoOverlap2DConstraintProto::~NoOverlap2DConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

void operations_research::sat::NoOverlap2DConstraintProto::Clear(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 60) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::NoOverlap2DConstraintProto::_InternalParse(operations_research::sat::NoOverlap2DConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  google::protobuf::internal *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  google::protobuf::UnknownFieldSet *v16;
  google::protobuf::internal *TagFallback;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  google::protobuf::internal *v24;

  v6 = a2;
  v24 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 40);
  v10 = (unsigned int *)((char *)this + 16);
  if ((unint64_t)a2 < *(_QWORD *)a3)
  {
    while (1)
    {
LABEL_7:
      v12 = (unsigned __int8 *)v6 + 1;
      v13 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0)
        goto LABEL_10;
      v14 = v13 + (*v12 << 7);
      v13 = v14 - 128;
      if ((char)*v12 < 0)
      {
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v14 - 128));
        v24 = TagFallback;
        if (!TagFallback)
          return 0;
        v12 = (unsigned __int8 *)TagFallback;
        v13 = a2;
        v15 = a2 >> 3;
        if (a2 >> 3 == 3)
          goto LABEL_23;
LABEL_11:
        if (v15 == 2)
        {
          if (v13 == 18)
          {
            v11 = (google::protobuf::internal *)v9;
LABEL_5:
            v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, v12, a3, a4);
            v24 = v6;
            if (!v6)
              return v6;
            goto LABEL_6;
          }
          if (v13 == 16)
          {
            v21 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
            v22 = *((unsigned int *)this + 10);
            if ((_DWORD)v22 == *((_DWORD *)this + 11))
              google::protobuf::RepeatedField<int>::Reserve(v9, v22 + 1);
            *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v22) = v21;
            *((_DWORD *)this + 10) = v22 + 1;
LABEL_42:
            v6 = v24;
            if (!v24)
              return v6;
            goto LABEL_6;
          }
        }
        else if (v15 == 1)
        {
          if (v13 == 10)
          {
            v11 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v13 == 8)
          {
            v19 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
            v20 = *((unsigned int *)this + 4);
            if ((_DWORD)v20 == *((_DWORD *)this + 5))
              google::protobuf::RepeatedField<int>::Reserve(v10, v20 + 1);
            *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v20) = v19;
            *((_DWORD *)this + 4) = v20 + 1;
            goto LABEL_42;
          }
        }
LABEL_13:
        if (!v13 || (v13 & 7) == 4)
        {
          *((_DWORD *)a3 + 20) = v13 - 1;
          return (google::protobuf::internal *)v12;
        }
        if ((*v8 & 1) != 0)
        {
          v16 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v16 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v12 = (unsigned __int8 *)v24;
        }
        v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v13, v16, (google::protobuf::UnknownFieldSet *)v12, (int32x2_t *)a3, a5);
        v24 = v6;
        if (!v6)
          return v6;
LABEL_6:
        if ((unint64_t)v6 >= *(_QWORD *)a3)
          break;
      }
      else
      {
        v12 = (unsigned __int8 *)v6 + 2;
LABEL_10:
        v24 = (google::protobuf::internal *)v12;
        v15 = v13 >> 3;
        if (v13 >> 3 != 3)
          goto LABEL_11;
LABEL_23:
        if (v13 != 24)
          goto LABEL_13;
        v6 = (google::protobuf::internal *)(v12 + 1);
        a2 = (google::protobuf::internal *)*v12;
        if ((char)*v12 < 0)
        {
          v18 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v18 << 7) - 128);
          if (v18 < 0)
          {
            v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v12, (const char *)a2);
            v24 = v6;
            *((_BYTE *)this + 60) = a2 != 0;
            if (!v6)
              return v6;
            goto LABEL_6;
          }
          v6 = (google::protobuf::internal *)(v12 + 2);
        }
        v24 = v6;
        *((_BYTE *)this + 60) = a2 != 0;
        if ((unint64_t)v6 >= *(_QWORD *)a3)
          break;
      }
    }
  }
  if ((google::protobuf::internal *)((char *)v6 - *((_QWORD *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    v24 = v6;
    if ((a2 & 1) == 0)
      goto LABEL_7;
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::NoOverlap2DConstraintProto::_InternalSerialize(operations_research::sat::NoOverlap2DConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned int v29;
  unsigned int v30;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v29 = v6 >> 14;
      v6 >>= 7;
    }
    while (v29);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (int *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v30 = v16 >> 14;
      v16 >>= 7;
    }
    while (v30);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  if (*((_BYTE *)this + 60))
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v26 = *((_BYTE *)this + 60);
    }
    else
    {
      v26 = 1;
    }
    *a2 = 24;
    a2[1] = v26;
    a2 += 2;
  }
  v27 = *((_QWORD *)this + 1);
  if ((v27 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::NoOverlap2DConstraintProto::ByteSizeLong(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const google::protobuf::UnknownFieldSet *v7;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    goto LABEL_12;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
    goto LABEL_9;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
  if (!v4)
    goto LABEL_9;
LABEL_6:
  v5 = v4;
  if ((v4 & 0x80000000) != 0)
    v6 = 11;
  else
    v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v3 += v6;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  if (*((_BYTE *)this + 60))
    v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4 + 2);
  else
    v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::NoOverlap2DConstraintProto *)((char *)this + 8), v7, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v7;
  return (char *)v7;
}

void operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(operations_research::sat::NoOverlap2DConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::NoOverlap2DConstraintProto *__hidden))a2 == &off_24F981A28)
    operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(operations_research::sat::NoOverlap2DConstraintProto *this, const operations_research::sat::NoOverlap2DConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 4 * v13), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  if (*((_BYTE *)a2 + 60))
    *((_BYTE *)this + 60) = 1;
}

void operations_research::sat::NoOverlap2DConstraintProto::CopyFrom(operations_research::sat::NoOverlap2DConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_BYTE *)this + 60) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::NoOverlap2DConstraintProto *__hidden))a2 == &off_24F981A28)
      operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::IsInitialized(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::GetMetadata(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[20];
}

void operations_research::sat::CumulativeConstraintProto::~CumulativeConstraintProto(operations_research::sat::CumulativeConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::CumulativeConstraintProto::~CumulativeConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::CumulativeConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

void operations_research::sat::CumulativeConstraintProto::Clear(operations_research::sat::CumulativeConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 15) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::CumulativeConstraintProto::_InternalParse(operations_research::sat::CumulativeConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  google::protobuf::internal *v11;
  google::protobuf::internal *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  google::protobuf::UnknownFieldSet *v17;
  google::protobuf::internal *TagFallback;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  google::protobuf::internal *v25;

  v6 = a2;
  v25 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 40);
  v10 = (unsigned int *)((char *)this + 16);
  if ((unint64_t)a2 < *(_QWORD *)a3)
  {
    while (1)
    {
LABEL_7:
      v12 = (google::protobuf::internal *)((char *)v6 + 1);
      v13 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0)
        goto LABEL_10;
      v14 = v13 + (*(unsigned __int8 *)v12 << 7);
      v13 = v14 - 128;
      if (*(char *)v12 < 0)
      {
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v14 - 128));
        v25 = TagFallback;
        if (!TagFallback)
          return 0;
        v12 = TagFallback;
        v13 = a2;
        v15 = a2 >> 3;
        if (a2 >> 3 == 3)
          goto LABEL_27;
LABEL_11:
        if (v15 == 2)
        {
          if (v13 == 18)
          {
            v11 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v13 == 16)
          {
            v20 = google::protobuf::internal::ReadVarint64(&v25, (const char **)a2);
            v21 = *((unsigned int *)this + 4);
            if ((_DWORD)v21 == *((_DWORD *)this + 5))
              google::protobuf::RepeatedField<int>::Reserve(v10, v21 + 1);
            *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v21) = v20;
            *((_DWORD *)this + 4) = v21 + 1;
            goto LABEL_45;
          }
          goto LABEL_16;
        }
        if (v15 != 1 || v13 != 8)
          goto LABEL_16;
        v6 = (google::protobuf::internal *)((char *)v12 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v12;
        if ((a2 & 0x80) != 0)
        {
          v19 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v19 << 7) - 128);
          if (v19 < 0)
          {
            v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v12, (const char *)a2);
            v25 = v6;
            *((_DWORD *)this + 15) = (_DWORD)a2;
            if (!v6)
              return v6;
            goto LABEL_6;
          }
          v6 = (google::protobuf::internal *)((char *)v12 + 2);
          v25 = (google::protobuf::internal *)((char *)v12 + 2);
          *((_DWORD *)this + 15) = (_DWORD)a2;
          if ((unint64_t)v12 + 2 >= *(_QWORD *)a3)
            break;
        }
        else
        {
          v25 = (google::protobuf::internal *)((char *)v12 + 1);
          *((_DWORD *)this + 15) = (_DWORD)a2;
          if ((unint64_t)v6 >= *(_QWORD *)a3)
            break;
        }
      }
      else
      {
        v12 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
        v25 = v12;
        v15 = v13 >> 3;
        if (v13 >> 3 != 3)
          goto LABEL_11;
LABEL_27:
        if (v13 == 26)
        {
          v11 = (google::protobuf::internal *)v9;
LABEL_5:
          v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, (unsigned __int8 *)v12, a3, a4);
          v25 = v6;
          if (!v6)
            return v6;
          goto LABEL_6;
        }
        if (v13 == 24)
        {
          v22 = google::protobuf::internal::ReadVarint64(&v25, (const char **)a2);
          v23 = *((unsigned int *)this + 10);
          if ((_DWORD)v23 == *((_DWORD *)this + 11))
            google::protobuf::RepeatedField<int>::Reserve(v9, v23 + 1);
          *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v23) = v22;
          *((_DWORD *)this + 10) = v23 + 1;
LABEL_45:
          v6 = v25;
          if (!v25)
            return v6;
          goto LABEL_6;
        }
LABEL_16:
        if (!v13 || (v13 & 7) == 4)
        {
          *((_DWORD *)a3 + 20) = v13 - 1;
          return v12;
        }
        if ((*v8 & 1) != 0)
        {
          v17 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v17 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v12 = v25;
        }
        v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v13, v17, v12, (int32x2_t *)a3, a5);
        v25 = v6;
        if (!v6)
          return v6;
LABEL_6:
        if ((unint64_t)v6 >= *(_QWORD *)a3)
          break;
      }
    }
  }
  if ((google::protobuf::internal *)((char *)v6 - *((_QWORD *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    v25 = v6;
    if ((a2 & 1) == 0)
      goto LABEL_7;
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CumulativeConstraintProto::_InternalSerialize(operations_research::sat::CumulativeConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int *v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  int *v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v32;
  unsigned int v33;

  v6 = *((_DWORD *)this + 15);
  if (!v6)
  {
LABEL_9:
    v7 = *((_DWORD *)this + 8);
    if (v7 < 1)
      goto LABEL_27;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = *((_DWORD *)this + 15);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      v7 = *((_DWORD *)this + 8);
      if (v7 < 1)
        goto LABEL_27;
LABEL_10:
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        *a2 = 18;
        v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80)
          goto LABEL_12;
      }
      else
      {
        *a2 = 18;
        v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80)
        {
LABEL_12:
          a2 += 2;
          *v9 = v7;
          v10 = (int *)*((_QWORD *)this + 3);
          v11 = &v10[*((int *)this + 4)];
          while (1)
          {
            if (*(_QWORD *)a3 <= (unint64_t)a2)
            {
              a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
              v17 = *v10++;
              v12 = v17;
              if (v17 > 0x7F)
              {
LABEL_17:
                *a2 = v12 | 0x80;
                v14 = v12 >> 7;
                if (v12 >> 14)
                {
                  a2 += 2;
                  do
                  {
                    *(a2 - 1) = v14 | 0x80;
                    v15 = v14 >> 7;
                    ++a2;
                    v16 = v14 >> 14;
                    v14 >>= 7;
                  }
                  while (v16);
                  *(a2 - 1) = v15;
                }
                else
                {
                  a2[1] = v14;
                  a2 += 2;
                }
                goto LABEL_14;
              }
            }
            else
            {
              v13 = *v10++;
              v12 = v13;
              if (v13 > 0x7F)
                goto LABEL_17;
            }
            *a2++ = v12;
LABEL_14:
            if (v10 >= v11)
              goto LABEL_27;
          }
        }
      }
      do
      {
        *v9++ = v7 | 0x80;
        v32 = v7 >> 14;
        v7 = v7 >> 7;
      }
      while (v32);
      a2 = (char *)(v9 - 1);
      goto LABEL_12;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F)
      goto LABEL_4;
  }
  a2[1] = v6 | 0x80;
  v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    v18 = v8 >> 7;
    ++a2;
    v19 = v8 >> 14;
    v8 >>= 7;
  }
  while (v19);
  *(a2 - 1) = v18;
  v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
    goto LABEL_10;
LABEL_27:
  v20 = *((_DWORD *)this + 14);
  if ((int)v20 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      v21 = (unsigned __int8 *)(a2 + 1);
      if (v20 < 0x80)
        goto LABEL_30;
    }
    else
    {
      *a2 = 26;
      v21 = (unsigned __int8 *)(a2 + 1);
      if (v20 < 0x80)
      {
LABEL_30:
        a2 += 2;
        *v21 = v20;
        v22 = (int *)*((_QWORD *)this + 6);
        v23 = &v22[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v29 = *v22++;
            v24 = v29;
            if (v29 > 0x7F)
            {
LABEL_35:
              *a2 = v24 | 0x80;
              v26 = v24 >> 7;
              if (v24 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v26 | 0x80;
                  v27 = v26 >> 7;
                  ++a2;
                  v28 = v26 >> 14;
                  v26 >>= 7;
                }
                while (v28);
                *(a2 - 1) = v27;
              }
              else
              {
                a2[1] = v26;
                a2 += 2;
              }
              goto LABEL_32;
            }
          }
          else
          {
            v25 = *v22++;
            v24 = v25;
            if (v25 > 0x7F)
              goto LABEL_35;
          }
          *a2++ = v24;
LABEL_32:
          if (v22 >= v23)
            goto LABEL_42;
        }
      }
    }
    do
    {
      *v21++ = v20 | 0x80;
      v33 = v20 >> 14;
      v20 >>= 7;
    }
    while (v33);
    a2 = (char *)(v21 - 1);
    goto LABEL_30;
  }
LABEL_42:
  v30 = *((_QWORD *)this + 1);
  if ((v30 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v30 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::CumulativeConstraintProto::ByteSizeLong(operations_research::sat::CumulativeConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  int v7;
  uint64_t v8;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0)
    {
      *((_DWORD *)this + 8) = v2;
      v3 = v2 + 11;
      v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
      if (!v4)
        goto LABEL_9;
    }
    else
    {
      *((_DWORD *)this + 8) = v2;
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
      v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
      if (!v4)
      {
LABEL_9:
        *((_DWORD *)this + 14) = 0;
        v6 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
        v7 = *((_DWORD *)this + 15);
        if (!v7)
          goto LABEL_17;
        goto LABEL_13;
      }
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (!v4)
      goto LABEL_9;
  }
  if ((v4 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 14) = v4;
  v6 = (const google::protobuf::UnknownFieldSet *)(v5 + v3 + v4);
  v7 = *((_DWORD *)this + 15);
  if (v7)
  {
LABEL_13:
    if (v7 < 0)
      v8 = 11;
    else
      v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v8);
  }
LABEL_17:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CumulativeConstraintProto *)((char *)this + 8), v6, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v6;
  return (char *)v6;
}

void operations_research::sat::CumulativeConstraintProto::MergeFrom(operations_research::sat::CumulativeConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::CumulativeConstraintProto *__hidden))a2 == &off_24F981AD8)
    operations_research::sat::CumulativeConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::CumulativeConstraintProto::MergeFrom(operations_research::sat::CumulativeConstraintProto *this, const operations_research::sat::CumulativeConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 4 * v13), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 15);
  if (v15)
    *((_DWORD *)this + 15) = v15;
}

void operations_research::sat::CumulativeConstraintProto::CopyFrom(operations_research::sat::CumulativeConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_DWORD *)this + 15) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::CumulativeConstraintProto *__hidden))a2 == &off_24F981AD8)
      operations_research::sat::CumulativeConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::CumulativeConstraintProto::IsInitialized(operations_research::sat::CumulativeConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::CumulativeConstraintProto::GetMetadata(operations_research::sat::CumulativeConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[22];
}

void operations_research::sat::ReservoirConstraintProto::~ReservoirConstraintProto(operations_research::sat::ReservoirConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::ReservoirConstraintProto::~ReservoirConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::ReservoirConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 104) = a2;
  return this;
}

void operations_research::sat::ReservoirConstraintProto::Clear(operations_research::sat::ReservoirConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::ReservoirConstraintProto::_InternalParse(operations_research::sat::ReservoirConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  unsigned int *v9;
  google::protobuf::internal *v10;
  unsigned int *v11;
  google::protobuf::internal *v12;
  google::protobuf::internal *v13;
  google::protobuf::internal *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  google::protobuf::internal *TagFallback;
  BOOL v21;
  google::protobuf::UnknownFieldSet *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  google::protobuf::internal *v30;

  v6 = a2;
  v30 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 64);
  v10 = (operations_research::sat::ReservoirConstraintProto *)((char *)this + 40);
  v11 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v30 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v14 = (google::protobuf::internal *)((char *)v6 + 1);
    v15 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_10;
    v16 = v15 + (*(unsigned __int8 *)v14 << 7);
    v15 = v16 - 128;
    if (*(char *)v14 < 0)
      break;
    v14 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
    v30 = v14;
    v17 = (v15 >> 3) - 1;
LABEL_11:
    switch(v17)
    {
      case 0u:
        if (v15 != 8)
          goto LABEL_28;
        v6 = (google::protobuf::internal *)((char *)v14 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0)
          goto LABEL_16;
        v18 = *(char *)v6;
        a2 = (google::protobuf::internal *)(a2 + (v18 << 7) - 128);
        if (v18 < 0)
        {
          v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v14, (const char *)a2);
          v30 = v6;
          *((_QWORD *)this + 11) = a2;
          if (!v6)
            return v6;
        }
        else
        {
          v6 = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_16:
          v30 = v6;
          *((_QWORD *)this + 11) = a2;
        }
        continue;
      case 1u:
        if (v15 != 16)
          goto LABEL_28;
        v6 = (google::protobuf::internal *)((char *)v14 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0)
          goto LABEL_21;
        v19 = *(char *)v6;
        a2 = (google::protobuf::internal *)(a2 + (v19 << 7) - 128);
        if (v19 < 0)
        {
          v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v14, (const char *)a2);
          v30 = v6;
          *((_QWORD *)this + 12) = a2;
          if (!v6)
            return v6;
        }
        else
        {
          v6 = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_21:
          v30 = v6;
          *((_QWORD *)this + 12) = a2;
        }
        continue;
      case 2u:
        if (v15 == 26)
        {
          v12 = (google::protobuf::internal *)v11;
          goto LABEL_4;
        }
        if (v15 != 24)
          goto LABEL_28;
        v23 = google::protobuf::internal::ReadVarint64(&v30, (const char **)a2);
        v24 = *((unsigned int *)this + 4);
        if ((_DWORD)v24 == *((_DWORD *)this + 5))
          google::protobuf::RepeatedField<int>::Reserve(v11, v24 + 1);
        *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v24) = v23;
        *((_DWORD *)this + 4) = v24 + 1;
        goto LABEL_54;
      case 3u:
        if (v15 == 34)
        {
          v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v10, (unsigned __int8 *)v14, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
          goto LABEL_5;
        }
        if (v15 != 32)
          goto LABEL_28;
        v25 = google::protobuf::internal::ReadVarint64(&v30, (const char **)a2);
        v26 = *((unsigned int *)this + 10);
        if ((_DWORD)v26 == *((_DWORD *)this + 11))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v10, v26 + 1);
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v26) = v25;
        *((_DWORD *)this + 10) = v26 + 1;
        goto LABEL_54;
      case 4u:
        if (v15 == 42)
        {
          v12 = (google::protobuf::internal *)v9;
LABEL_4:
          v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v12, (unsigned __int8 *)v14, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
LABEL_5:
          v6 = v13;
          v30 = v13;
          if (!v13)
            return v6;
        }
        else
        {
          if (v15 != 40)
            goto LABEL_28;
          v27 = google::protobuf::internal::ReadVarint64(&v30, (const char **)a2);
          v28 = *((unsigned int *)this + 16);
          if ((_DWORD)v28 == *((_DWORD *)this + 17))
            google::protobuf::RepeatedField<int>::Reserve(v9, v28 + 1);
          *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v28) = v27;
          *((_DWORD *)this + 16) = v28 + 1;
LABEL_54:
          v6 = v30;
          if (!v30)
            return v6;
        }
        break;
      default:
        goto LABEL_28;
    }
  }
  TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v16 - 128));
  v30 = TagFallback;
  if (!TagFallback)
    return 0;
  v14 = TagFallback;
  v15 = a2;
  v17 = (a2 >> 3) - 1;
  if (v17 <= 4)
    goto LABEL_11;
LABEL_28:
  if (v15)
    v21 = (v15 & 7) == 4;
  else
    v21 = 1;
  if (!v21)
  {
    if ((*v8 & 1) != 0)
    {
      v22 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else
    {
      v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v14 = v30;
    }
    v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, v22, v14, a3, a5);
    goto LABEL_5;
  }
  a3[10].i32[0] = v15 - 1;
  return v14;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::ReservoirConstraintProto::_InternalSerialize(operations_research::sat::ReservoirConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int *v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 *v35;
  int *v36;
  int *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;

  v6 = *((_QWORD *)this + 11);
  if (!v6)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 12);
    if (!v7)
      goto LABEL_21;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = *((_QWORD *)this + 11);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      v7 = *((_QWORD *)this + 12);
      if (!v7)
        goto LABEL_21;
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F)
      goto LABEL_4;
  }
  a2[1] = v6 | 0x80;
  v8 = v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    v10 = v8 >> 7;
    ++a2;
    v11 = v8 >> 14;
    v8 >>= 7;
  }
  while (v11);
  *(a2 - 1) = v10;
  v7 = *((_QWORD *)this + 12);
  if (!v7)
  {
LABEL_21:
    v9 = *((_DWORD *)this + 8);
    if (v9 >= 1)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_10:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_QWORD *)this + 12);
    *a2 = 16;
    if (v7 <= 0x7F)
    {
LABEL_12:
      a2[1] = v7;
      a2 += 2;
      v9 = *((_DWORD *)this + 8);
      if (v9 >= 1)
        goto LABEL_22;
      goto LABEL_39;
    }
  }
  else
  {
    *a2 = 16;
    if (v7 <= 0x7F)
      goto LABEL_12;
  }
  a2[1] = v7 | 0x80;
  v12 = v7 >> 7;
  if (!(v7 >> 14))
  {
    a2[2] = v12;
    a2 += 3;
    goto LABEL_21;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v12 | 0x80;
    v22 = v12 >> 7;
    ++a2;
    v23 = v12 >> 14;
    v12 >>= 7;
  }
  while (v23);
  *(a2 - 1) = v22;
  v9 = *((_DWORD *)this + 8);
  if (v9 >= 1)
  {
LABEL_22:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      v13 = (unsigned __int8 *)(a2 + 1);
      if (v9 < 0x80)
        goto LABEL_24;
    }
    else
    {
      *a2 = 26;
      v13 = (unsigned __int8 *)(a2 + 1);
      if (v9 < 0x80)
      {
LABEL_24:
        a2 += 2;
        *v13 = v9;
        v14 = (int *)*((_QWORD *)this + 3);
        v15 = &v14[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v21 = *v14++;
            v16 = v21;
            if (v21 > 0x7F)
            {
LABEL_29:
              *a2 = v16 | 0x80;
              v18 = v16 >> 7;
              if (v16 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v18 | 0x80;
                  v19 = v18 >> 7;
                  ++a2;
                  v20 = v18 >> 14;
                  v18 >>= 7;
                }
                while (v20);
                *(a2 - 1) = v19;
              }
              else
              {
                a2[1] = v18;
                a2 += 2;
              }
              goto LABEL_26;
            }
          }
          else
          {
            v17 = *v14++;
            v16 = v17;
            if (v17 > 0x7F)
              goto LABEL_29;
          }
          *a2++ = v16;
LABEL_26:
          if (v14 >= v15)
            goto LABEL_39;
        }
      }
    }
    do
    {
      *v13++ = v9 | 0x80;
      v46 = v9 >> 14;
      v9 = v9 >> 7;
    }
    while (v46);
    a2 = (char *)(v13 - 1);
    goto LABEL_24;
  }
LABEL_39:
  v24 = *((_DWORD *)this + 14);
  if ((int)v24 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      v25 = (unsigned __int8 *)(a2 + 1);
      if (v24 < 0x80)
        goto LABEL_42;
    }
    else
    {
      *a2 = 34;
      v25 = (unsigned __int8 *)(a2 + 1);
      if (v24 < 0x80)
      {
LABEL_42:
        a2 += 2;
        *v25 = v24;
        v26 = (unint64_t *)*((_QWORD *)this + 6);
        v27 = &v26[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v33 = *v26++;
            v28 = v33;
            if (v33 > 0x7F)
            {
LABEL_47:
              *a2 = v28 | 0x80;
              v30 = v28 >> 7;
              if (v28 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v30 | 0x80;
                  v31 = v30 >> 7;
                  ++a2;
                  v32 = v30 >> 14;
                  v30 >>= 7;
                }
                while (v32);
                *(a2 - 1) = v31;
              }
              else
              {
                a2[1] = v30;
                a2 += 2;
              }
              goto LABEL_44;
            }
          }
          else
          {
            v29 = *v26++;
            v28 = v29;
            if (v29 > 0x7F)
              goto LABEL_47;
          }
          *a2++ = v28;
LABEL_44:
          if (v26 >= v27)
            goto LABEL_54;
        }
      }
    }
    do
    {
      *v25++ = v24 | 0x80;
      v47 = v24 >> 14;
      v24 >>= 7;
    }
    while (v47);
    a2 = (char *)(v25 - 1);
    goto LABEL_42;
  }
LABEL_54:
  v34 = *((_DWORD *)this + 20);
  if ((int)v34 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 42;
      v35 = (unsigned __int8 *)(a2 + 1);
      if (v34 < 0x80)
        goto LABEL_57;
    }
    else
    {
      *a2 = 42;
      v35 = (unsigned __int8 *)(a2 + 1);
      if (v34 < 0x80)
      {
LABEL_57:
        a2 += 2;
        *v35 = v34;
        v36 = (int *)*((_QWORD *)this + 9);
        v37 = &v36[*((int *)this + 16)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v43 = *v36++;
            v38 = v43;
            if (v43 > 0x7F)
            {
LABEL_62:
              *a2 = v38 | 0x80;
              v40 = v38 >> 7;
              if (v38 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v40 | 0x80;
                  v41 = v40 >> 7;
                  ++a2;
                  v42 = v40 >> 14;
                  v40 >>= 7;
                }
                while (v42);
                *(a2 - 1) = v41;
              }
              else
              {
                a2[1] = v40;
                a2 += 2;
              }
              goto LABEL_59;
            }
          }
          else
          {
            v39 = *v36++;
            v38 = v39;
            if (v39 > 0x7F)
              goto LABEL_62;
          }
          *a2++ = v38;
LABEL_59:
          if (v36 >= v37)
            goto LABEL_69;
        }
      }
    }
    do
    {
      *v35++ = v34 | 0x80;
      v48 = v34 >> 14;
      v34 >>= 7;
    }
    while (v48);
    a2 = (char *)(v35 - 1);
    goto LABEL_57;
  }
LABEL_69:
  v44 = *((_QWORD *)this + 1);
  if ((v44 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::ReservoirConstraintProto::ByteSizeLong(operations_research::sat::ReservoirConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const google::protobuf::UnknownFieldSet *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  char *v15;
  const google::protobuf::UnknownFieldSet *v16;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4)
      goto LABEL_9;
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4)
      goto LABEL_9;
LABEL_6:
    if ((v4 & 0x80000000) != 0)
      v5 = 11;
    else
      v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    *((_DWORD *)this + 14) = v4;
    v6 = v5 + v3 + v4;
    v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_13;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (v4)
    goto LABEL_6;
LABEL_9:
  *((_DWORD *)this + 14) = 0;
  v6 = v3 + v4;
  v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
  if (!v7)
  {
LABEL_10:
    v8 = 0;
    goto LABEL_17;
  }
LABEL_13:
  v8 = v7;
  if ((v7 & 0x80000000) != 0)
    v9 = 11;
  else
    v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v6 += v9;
LABEL_17:
  *((_DWORD *)this + 20) = v8;
  v10 = (const google::protobuf::UnknownFieldSet *)(v6 + v7);
  v11 = *((_QWORD *)this + 11);
  v12 = *((_QWORD *)this + 12);
  v13 = v11 == 0;
  v14 = v6 + v7 + ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6);
  if (!v13)
    v10 = (const google::protobuf::UnknownFieldSet *)(v14 + 1);
  v15 = (char *)v10 + ((9 * (__clz(v12 | 1) ^ 0x3F) + 73) >> 6);
  if (v12)
    v16 = (const google::protobuf::UnknownFieldSet *)(v15 + 1);
  else
    v16 = v10;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::ReservoirConstraintProto *)((char *)this + 8), v16, (_DWORD *)this + 26);
  *((_DWORD *)this + 26) = (_DWORD)v16;
  return (char *)v16;
}

void operations_research::sat::ReservoirConstraintProto::MergeFrom(operations_research::sat::ReservoirConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::ReservoirConstraintProto *__hidden))a2 == &off_24F981B88)
    operations_research::sat::ReservoirConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::ReservoirConstraintProto::MergeFrom(operations_research::sat::ReservoirConstraintProto *this, const operations_research::sat::ReservoirConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    v16 = *((int *)this + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 16, v16 + v15);
    v17 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy((void *)(v17 + 4 * v16), *((const void **)a2 + 9), 4 * *((int *)a2 + 16));
  }
  v18 = *((_QWORD *)a2 + 11);
  if (v18)
    *((_QWORD *)this + 11) = v18;
  v19 = *((_QWORD *)a2 + 12);
  if (v19)
    *((_QWORD *)this + 12) = v19;
}

void operations_research::sat::ReservoirConstraintProto::CopyFrom(operations_research::sat::ReservoirConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_DWORD *)this + 16) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::ReservoirConstraintProto *__hidden))a2 == &off_24F981B88)
      operations_research::sat::ReservoirConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::ReservoirConstraintProto::IsInitialized(operations_research::sat::ReservoirConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::ReservoirConstraintProto::GetMetadata(operations_research::sat::ReservoirConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[24];
}

void operations_research::sat::CircuitConstraintProto::~CircuitConstraintProto(operations_research::sat::CircuitConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::CircuitConstraintProto::~CircuitConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::CircuitConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 84) = a2;
  return this;
}

void operations_research::sat::CircuitConstraintProto::Clear(operations_research::sat::CircuitConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::CircuitConstraintProto::_InternalParse(operations_research::sat::CircuitConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  google::protobuf::internal *v12;
  int v13;
  uint64_t v14;
  google::protobuf::internal *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  google::protobuf::UnknownFieldSet *v19;
  google::protobuf::internal *TagFallback;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  google::protobuf::internal *v26;

  v6 = a2;
  v26 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 64);
  v10 = (unsigned int *)((char *)this + 40);
  v11 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v26 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v15 = (google::protobuf::internal *)((char *)v6 + 1);
    v16 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_14;
    v17 = v16 + (*(unsigned __int8 *)v15 << 7);
    v16 = v17 - 128;
    if ((*(char *)v15 & 0x80000000) == 0)
    {
      v15 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_14:
      v26 = v15;
      v18 = v16 >> 3;
      if (v16 >> 3 == 5)
        goto LABEL_27;
      goto LABEL_15;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v17 - 128));
    v26 = TagFallback;
    if (!TagFallback)
      return 0;
    v15 = TagFallback;
    v16 = a2;
    v18 = a2 >> 3;
    if (a2 >> 3 == 5)
    {
LABEL_27:
      if (v16 == 42)
      {
        v12 = (google::protobuf::internal *)v9;
        goto LABEL_4;
      }
      if (v16 != 40)
        goto LABEL_17;
      v23 = google::protobuf::internal::ReadVarint64(&v26, (const char **)a2);
      v24 = *((unsigned int *)this + 16);
      if ((_DWORD)v24 == *((_DWORD *)this + 17))
        google::protobuf::RepeatedField<int>::Reserve(v9, v24 + 1);
      *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v24) = v23;
      *((_DWORD *)this + 16) = v24 + 1;
      goto LABEL_41;
    }
LABEL_15:
    if (v18 == 4)
    {
      if (v16 == 34)
      {
        v12 = (google::protobuf::internal *)v10;
        goto LABEL_4;
      }
      if (v16 != 32)
        goto LABEL_17;
      v21 = google::protobuf::internal::ReadVarint64(&v26, (const char **)a2);
      v22 = *((unsigned int *)this + 10);
      if ((_DWORD)v22 == *((_DWORD *)this + 11))
        google::protobuf::RepeatedField<int>::Reserve(v10, v22 + 1);
      *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v22) = v21;
      *((_DWORD *)this + 10) = v22 + 1;
LABEL_41:
      v6 = v26;
      if (!v26)
        return v6;
    }
    else
    {
      if (v18 != 3)
        goto LABEL_17;
      if (v16 == 26)
      {
        v12 = (google::protobuf::internal *)v11;
LABEL_4:
        v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v12, (unsigned __int8 *)v15, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        v26 = v6;
        if (!v6)
          return v6;
      }
      else
      {
        if (v16 == 24)
        {
          v13 = google::protobuf::internal::ReadVarint64(&v26, (const char **)a2);
          v14 = *((unsigned int *)this + 4);
          if ((_DWORD)v14 == *((_DWORD *)this + 5))
            google::protobuf::RepeatedField<int>::Reserve(v11, v14 + 1);
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v14) = v13;
          *((_DWORD *)this + 4) = v14 + 1;
          goto LABEL_41;
        }
LABEL_17:
        if (!v16 || (v16 & 7) == 4)
        {
          a3[10].i32[0] = v16 - 1;
          return v15;
        }
        if ((*v8 & 1) != 0)
        {
          v19 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v19 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v15 = v26;
        }
        v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v16, v19, v15, a3, a5);
        v26 = v6;
        if (!v6)
          return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CircuitConstraintProto::_InternalSerialize(operations_research::sat::CircuitConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  int *v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 26;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v38 = v6 >> 14;
      v6 >>= 7;
    }
    while (v38);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 34;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (int *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v39 = v16 >> 14;
      v16 >>= 7;
    }
    while (v39);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  v26 = *((_DWORD *)this + 20);
  if ((int)v26 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 42;
      v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
        goto LABEL_34;
    }
    else
    {
      *a2 = 42;
      v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
      {
LABEL_34:
        a2 += 2;
        *v27 = v26;
        v28 = (int *)*((_QWORD *)this + 9);
        v29 = &v28[*((int *)this + 16)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v35 = *v28++;
            v30 = v35;
            if (v35 > 0x7F)
            {
LABEL_39:
              *a2 = v30 | 0x80;
              v32 = v30 >> 7;
              if (v30 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v32 | 0x80;
                  v33 = v32 >> 7;
                  ++a2;
                  v34 = v32 >> 14;
                  v32 >>= 7;
                }
                while (v34);
                *(a2 - 1) = v33;
              }
              else
              {
                a2[1] = v32;
                a2 += 2;
              }
              goto LABEL_36;
            }
          }
          else
          {
            v31 = *v28++;
            v30 = v31;
            if (v31 > 0x7F)
              goto LABEL_39;
          }
          *a2++ = v30;
LABEL_36:
          if (v28 >= v29)
            goto LABEL_46;
        }
      }
    }
    do
    {
      *v27++ = v26 | 0x80;
      v40 = v26 >> 14;
      v26 >>= 7;
    }
    while (v40);
    a2 = (char *)(v27 - 1);
    goto LABEL_34;
  }
LABEL_46:
  v36 = *((_QWORD *)this + 1);
  if ((v36 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::CircuitConstraintProto::ByteSizeLong(operations_research::sat::CircuitConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const google::protobuf::UnknownFieldSet *v10;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (!v4)
      goto LABEL_9;
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (!v4)
      goto LABEL_9;
LABEL_6:
    if ((v4 & 0x80000000) != 0)
      v5 = 11;
    else
      v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    *((_DWORD *)this + 14) = v4;
    v6 = v5 + v3 + v4;
    v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_13;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
  if (v4)
    goto LABEL_6;
LABEL_9:
  *((_DWORD *)this + 14) = 0;
  v6 = v3 + v4;
  v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
  if (!v7)
  {
LABEL_10:
    v8 = 0;
    goto LABEL_17;
  }
LABEL_13:
  v8 = v7;
  if ((v7 & 0x80000000) != 0)
    v9 = 11;
  else
    v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v6 += v9;
LABEL_17:
  *((_DWORD *)this + 20) = v8;
  v10 = (const google::protobuf::UnknownFieldSet *)(v6 + v7);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CircuitConstraintProto *)((char *)this + 8), v10, (_DWORD *)this + 21);
  *((_DWORD *)this + 21) = (_DWORD)v10;
  return (char *)(v6 + v7);
}

void operations_research::sat::CircuitConstraintProto::MergeFrom(operations_research::sat::CircuitConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::CircuitConstraintProto *__hidden))a2 == &off_24F981C38)
    operations_research::sat::CircuitConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::CircuitConstraintProto::MergeFrom(operations_research::sat::CircuitConstraintProto *this, const operations_research::sat::CircuitConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 4 * v13), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    v17 = *((int *)this + 16);
    v16 = (unsigned int *)((char *)this + 64);
    google::protobuf::RepeatedField<int>::Reserve(v16, v17 + v15);
    v18 = *((_QWORD *)v16 + 1);
    *v16 += *((_DWORD *)a2 + 16);
    memcpy((void *)(v18 + 4 * v17), *((const void **)a2 + 9), 4 * *((int *)a2 + 16));
  }
}

void operations_research::sat::CircuitConstraintProto::CopyFrom(operations_research::sat::CircuitConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_DWORD *)this + 16) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::CircuitConstraintProto *__hidden))a2 == &off_24F981C38)
      operations_research::sat::CircuitConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::CircuitConstraintProto::IsInitialized(operations_research::sat::CircuitConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::CircuitConstraintProto::GetMetadata(operations_research::sat::CircuitConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[26];
}

void operations_research::sat::RoutesConstraintProto::~RoutesConstraintProto(operations_research::sat::RoutesConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 88);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::RoutesConstraintProto::~RoutesConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::RoutesConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 120) = a2;
  return this;
}

void operations_research::sat::RoutesConstraintProto::Clear(operations_research::sat::RoutesConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 14) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::RoutesConstraintProto::_InternalParse(operations_research::sat::RoutesConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  google::protobuf::internal *v13;
  google::protobuf::internal *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  google::protobuf::internal *TagFallback;
  BOOL v19;
  google::protobuf::UnknownFieldSet *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v31;
  int v32;
  int v33;
  int v34;
  google::protobuf::internal *v35;

  v6 = a2;
  v35 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 88);
  v10 = (unsigned int *)((char *)this + 64);
  v11 = (unsigned int *)((char *)this + 40);
  v12 = (unsigned int *)((char *)this + 16);
  if ((unint64_t)a2 < *(_QWORD *)a3)
  {
    while (1)
    {
LABEL_7:
      v14 = (google::protobuf::internal *)((char *)v6 + 1);
      v15 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0)
        goto LABEL_10;
      v16 = v15 + (*(unsigned __int8 *)v14 << 7);
      v15 = v16 - 128;
      if ((*(char *)v14 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v16 - 128));
      v35 = TagFallback;
      if (!TagFallback)
        return 0;
      v14 = TagFallback;
      v15 = a2;
      v17 = (a2 >> 3) - 1;
      if (v17 > 4)
      {
LABEL_24:
        if (v15)
          v19 = (v15 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          a3[10].i32[0] = v15 - 1;
          return v14;
        }
        if ((*v8 & 1) != 0)
        {
          v20 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v20 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v14 = v35;
        }
        v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, v20, v14, a3, a5);
        v35 = v6;
        if (!v6)
          return v6;
        goto LABEL_6;
      }
LABEL_11:
      switch(v17)
      {
        case 0u:
          if (v15 == 10)
          {
            v13 = (google::protobuf::internal *)v12;
            goto LABEL_5;
          }
          if (v15 != 8)
            goto LABEL_24;
          v22 = google::protobuf::internal::ReadVarint64(&v35, (const char **)a2);
          v23 = *((unsigned int *)this + 4);
          if ((_DWORD)v23 == *((_DWORD *)this + 5))
          {
            v31 = v22;
            google::protobuf::RepeatedField<int>::Reserve(v12, v23 + 1);
            v22 = v31;
          }
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v23) = v22;
          *((_DWORD *)this + 4) = v23 + 1;
          break;
        case 1u:
          if (v15 == 18)
          {
            v13 = (google::protobuf::internal *)v11;
            goto LABEL_5;
          }
          if (v15 != 16)
            goto LABEL_24;
          v24 = google::protobuf::internal::ReadVarint64(&v35, (const char **)a2);
          v25 = *((unsigned int *)this + 10);
          if ((_DWORD)v25 == *((_DWORD *)this + 11))
          {
            v32 = v24;
            google::protobuf::RepeatedField<int>::Reserve(v11, v25 + 1);
            v24 = v32;
          }
          *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v25) = v24;
          *((_DWORD *)this + 10) = v25 + 1;
          break;
        case 2u:
          if (v15 == 26)
          {
            v13 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v15 != 24)
            goto LABEL_24;
          v26 = google::protobuf::internal::ReadVarint64(&v35, (const char **)a2);
          v27 = *((unsigned int *)this + 16);
          if ((_DWORD)v27 == *((_DWORD *)this + 17))
          {
            v33 = v26;
            google::protobuf::RepeatedField<int>::Reserve(v10, v27 + 1);
            v26 = v33;
          }
          *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v27) = v26;
          *((_DWORD *)this + 16) = v27 + 1;
          break;
        case 3u:
          if (v15 == 34)
          {
            v13 = (google::protobuf::internal *)v9;
LABEL_5:
            v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v13, (unsigned __int8 *)v14, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
            v35 = v6;
            if (!v6)
              return v6;
            goto LABEL_6;
          }
          if (v15 != 32)
            goto LABEL_24;
          v28 = google::protobuf::internal::ReadVarint64(&v35, (const char **)a2);
          v29 = *((unsigned int *)this + 22);
          if ((_DWORD)v29 == *((_DWORD *)this + 23))
          {
            v34 = v28;
            google::protobuf::RepeatedField<int>::Reserve(v9, v29 + 1);
            v28 = v34;
          }
          *(_DWORD *)(*((_QWORD *)this + 12) + 4 * v29) = v28;
          *((_DWORD *)this + 22) = v29 + 1;
          break;
        case 4u:
          if (v15 != 40)
            goto LABEL_24;
          v6 = (google::protobuf::internal *)((char *)v14 + 1);
          a2 = (google::protobuf::internal *)*(unsigned __int8 *)v14;
          if ((*(char *)v14 & 0x80000000) == 0)
          {
            v35 = (google::protobuf::internal *)((char *)v14 + 1);
            *((_QWORD *)this + 14) = a2;
            if ((unint64_t)v6 >= *(_QWORD *)a3)
              goto LABEL_34;
            continue;
          }
          v21 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v21 << 7) - 128);
          if ((v21 & 0x80000000) == 0)
          {
            v6 = (google::protobuf::internal *)((char *)v14 + 2);
            v35 = (google::protobuf::internal *)((char *)v14 + 2);
            *((_QWORD *)this + 14) = a2;
            if ((unint64_t)v14 + 2 >= *(_QWORD *)a3)
              goto LABEL_34;
            continue;
          }
          v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v14, (const char *)a2);
          v35 = v6;
          *((_QWORD *)this + 14) = a2;
          if (!v6)
            return v6;
          goto LABEL_6;
        default:
          goto LABEL_24;
      }
      v6 = v35;
      if (!v35)
        return v6;
LABEL_6:
      if ((unint64_t)v6 >= *(_QWORD *)a3)
        goto LABEL_34;
    }
    v14 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
    v35 = v14;
    v17 = (v15 >> 3) - 1;
    goto LABEL_11;
  }
LABEL_34:
  if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) != (google::protobuf::internal *)a3[3].i32[1])
  {
    v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
    v35 = v6;
    if ((a2 & 1) == 0)
      goto LABEL_7;
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::RoutesConstraintProto::_InternalSerialize(operations_research::sat::RoutesConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  int *v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  int *v38;
  int *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v47 = v6 >> 14;
      v6 >>= 7;
    }
    while (v47);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (int *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v48 = v16 >> 14;
      v16 >>= 7;
    }
    while (v48);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  v26 = *((_DWORD *)this + 20);
  if ((int)v26 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
        goto LABEL_34;
    }
    else
    {
      *a2 = 26;
      v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
      {
LABEL_34:
        a2 += 2;
        *v27 = v26;
        v28 = (int *)*((_QWORD *)this + 9);
        v29 = &v28[*((int *)this + 16)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v35 = *v28++;
            v30 = v35;
            if (v35 > 0x7F)
            {
LABEL_39:
              *a2 = v30 | 0x80;
              v32 = v30 >> 7;
              if (v30 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v32 | 0x80;
                  v33 = v32 >> 7;
                  ++a2;
                  v34 = v32 >> 14;
                  v32 >>= 7;
                }
                while (v34);
                *(a2 - 1) = v33;
              }
              else
              {
                a2[1] = v32;
                a2 += 2;
              }
              goto LABEL_36;
            }
          }
          else
          {
            v31 = *v28++;
            v30 = v31;
            if (v31 > 0x7F)
              goto LABEL_39;
          }
          *a2++ = v30;
LABEL_36:
          if (v28 >= v29)
            goto LABEL_46;
        }
      }
    }
    do
    {
      *v27++ = v26 | 0x80;
      v49 = v26 >> 14;
      v26 >>= 7;
    }
    while (v49);
    a2 = (char *)(v27 - 1);
    goto LABEL_34;
  }
LABEL_46:
  v36 = *((_DWORD *)this + 26);
  if ((int)v36 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      v37 = (unsigned __int8 *)(a2 + 1);
      if (v36 < 0x80)
        goto LABEL_49;
    }
    else
    {
      *a2 = 34;
      v37 = (unsigned __int8 *)(a2 + 1);
      if (v36 < 0x80)
      {
LABEL_49:
        a2 += 2;
        *v37 = v36;
        v38 = (int *)*((_QWORD *)this + 12);
        v39 = &v38[*((int *)this + 22)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v45 = *v38++;
            v40 = v45;
            if (v45 > 0x7F)
            {
LABEL_54:
              *a2 = v40 | 0x80;
              v42 = v40 >> 7;
              if (v40 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v42 | 0x80;
                  v43 = v42 >> 7;
                  ++a2;
                  v44 = v42 >> 14;
                  v42 >>= 7;
                }
                while (v44);
                *(a2 - 1) = v43;
              }
              else
              {
                a2[1] = v42;
                a2 += 2;
              }
              goto LABEL_51;
            }
          }
          else
          {
            v41 = *v38++;
            v40 = v41;
            if (v41 > 0x7F)
              goto LABEL_54;
          }
          *a2++ = v40;
LABEL_51:
          if (v38 >= v39)
            goto LABEL_61;
        }
      }
    }
    do
    {
      *v37++ = v36 | 0x80;
      v50 = v36 >> 14;
      v36 >>= 7;
    }
    while (v50);
    a2 = (char *)(v37 - 1);
    goto LABEL_49;
  }
LABEL_61:
  v46 = *((_QWORD *)this + 14);
  if (v46)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v46 = *((_QWORD *)this + 14);
      *a2 = 40;
      if (v46 <= 0x7F)
        goto LABEL_64;
    }
    else
    {
      *a2 = 40;
      if (v46 <= 0x7F)
      {
LABEL_64:
        a2[1] = v46;
        a2 += 2;
        goto LABEL_83;
      }
    }
    a2[1] = v46 | 0x80;
    v51 = v46 >> 7;
    if (v46 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v51 | 0x80;
        v52 = v51 >> 7;
        ++a2;
        v53 = v51 >> 14;
        v51 >>= 7;
      }
      while (v53);
      *(a2 - 1) = v52;
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
    }
  }
LABEL_83:
  v54 = *((_QWORD *)this + 1);
  if ((v54 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v54 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::RoutesConstraintProto::ByteSizeLong(operations_research::sat::RoutesConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  char *v24;
  const google::protobuf::UnknownFieldSet *v25;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0)
    v3 = v4;
  if (v2)
    v5 = v2;
  else
    v5 = 0;
  if (!v2)
    v3 = 0;
  *((_DWORD *)this + 8) = v5;
  v6 = v3 + v2;
  v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
  v8 = 11;
  v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v7 >= 0)
    v8 = v9;
  v10 = v8 + v6;
  if (v7)
    v11 = v7;
  else
    v11 = 0;
  if (!v7)
    v10 = v6;
  *((_DWORD *)this + 14) = v11;
  v12 = v10 + v7;
  v13 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
  if (v13)
  {
    v14 = v13;
    if ((v13 & 0x80000000) != 0)
      v15 = 11;
    else
      v15 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v12 += v15;
  }
  else
  {
    v14 = 0;
  }
  *((_DWORD *)this + 20) = v14;
  v16 = v12 + v13;
  v17 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 22);
  v18 = 11;
  v19 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v17 >= 0)
    v18 = v19;
  v20 = v18 + v16;
  if (v17)
    v21 = v17;
  else
    v21 = 0;
  if (!v17)
    v20 = v16;
  *((_DWORD *)this + 26) = v21;
  v22 = (const google::protobuf::UnknownFieldSet *)(v20 + v17);
  v23 = *((_QWORD *)this + 14);
  v24 = (char *)v22 + ((9 * (__clz(v23 | 1) ^ 0x3F) + 73) >> 6);
  if (v23)
    v25 = (const google::protobuf::UnknownFieldSet *)(v24 + 1);
  else
    v25 = v22;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::RoutesConstraintProto *)((char *)this + 8), v25, (_DWORD *)this + 30);
  *((_DWORD *)this + 30) = (_DWORD)v25;
  return (char *)v25;
}

void operations_research::sat::RoutesConstraintProto::MergeFrom(operations_research::sat::RoutesConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::RoutesConstraintProto *__hidden))a2 == &off_24F981CE8)
    operations_research::sat::RoutesConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::RoutesConstraintProto::MergeFrom(operations_research::sat::RoutesConstraintProto *this, const operations_research::sat::RoutesConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 4 * v13), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    v16 = *((int *)this + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 16, v16 + v15);
    v17 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy((void *)(v17 + 4 * v16), *((const void **)a2 + 9), 4 * *((int *)a2 + 16));
  }
  v18 = *((_DWORD *)a2 + 22);
  if (v18)
  {
    v19 = *((int *)this + 22);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 22, v19 + v18);
    v20 = *((_QWORD *)this + 12);
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
    memcpy((void *)(v20 + 4 * v19), *((const void **)a2 + 12), 4 * *((int *)a2 + 22));
  }
  v21 = *((_QWORD *)a2 + 14);
  if (v21)
    *((_QWORD *)this + 14) = v21;
}

void operations_research::sat::RoutesConstraintProto::CopyFrom(operations_research::sat::RoutesConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 22) = 0;
    *((_QWORD *)this + 14) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::RoutesConstraintProto *__hidden))a2 == &off_24F981CE8)
      operations_research::sat::RoutesConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::RoutesConstraintProto::IsInitialized(operations_research::sat::RoutesConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::RoutesConstraintProto::GetMetadata(operations_research::sat::RoutesConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[28];
}

void operations_research::sat::CircuitCoveringConstraintProto::~CircuitCoveringConstraintProto(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::CircuitCoveringConstraintProto::~CircuitCoveringConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void operations_research::sat::CircuitCoveringConstraintProto::Clear(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::CircuitCoveringConstraintProto::_InternalParse(operations_research::sat::CircuitCoveringConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::internal *v10;
  google::protobuf::UnknownFieldSet *v11;
  google::protobuf::internal *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  google::protobuf::internal *TagFallback;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal *v23;

  v6 = a2;
  v23 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::CircuitCoveringConstraintProto *)((char *)this + 40);
  v10 = (operations_research::sat::CircuitCoveringConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v23 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v13 = (unsigned __int8 *)v6 + 1;
    v14 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_9;
    v15 = v14 + (*v13 << 7);
    v14 = v15 - 128;
    if ((char)*v13 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v15 - 128));
      v23 = TagFallback;
      if (!TagFallback)
        return 0;
      v13 = (unsigned __int8 *)TagFallback;
      v14 = a2;
      v16 = a2 >> 3;
      if (a2 >> 3 != 2)
        goto LABEL_10;
LABEL_15:
      if (v14 == 18)
      {
        v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v9, v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        goto LABEL_4;
      }
      if (v14 == 16)
      {
        v20 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
        v21 = *((unsigned int *)this + 10);
        if ((_DWORD)v21 == *((_DWORD *)this + 11))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v9, v21 + 1);
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v21) = v20;
        *((_DWORD *)this + 10) = v21 + 1;
        goto LABEL_28;
      }
LABEL_30:
      if (!v14 || (v14 & 7) == 4)
      {
        a3[10].i32[0] = v14 - 1;
        return (google::protobuf::internal *)v13;
      }
      if ((*v8 & 1) != 0)
      {
        v11 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v11 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        v13 = (unsigned __int8 *)v23;
      }
      v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v11, (google::protobuf::UnknownFieldSet *)v13, a3, a5);
LABEL_4:
      v6 = v12;
      v23 = v12;
      if (!v12)
        return v6;
    }
    else
    {
      v13 = (unsigned __int8 *)v6 + 2;
LABEL_9:
      v23 = (google::protobuf::internal *)v13;
      v16 = v14 >> 3;
      if (v14 >> 3 == 2)
        goto LABEL_15;
LABEL_10:
      if (v16 != 1)
        goto LABEL_30;
      if (v14 == 10)
      {
        v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v10, v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        goto LABEL_4;
      }
      if (v14 != 8)
        goto LABEL_30;
      v18 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
      v19 = *((unsigned int *)this + 4);
      if ((_DWORD)v19 == *((_DWORD *)this + 5))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v19 + 1);
      *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v19) = v18;
      *((_DWORD *)this + 4) = v19 + 1;
LABEL_28:
      v6 = v23;
      if (!v23)
        return v6;
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CircuitCoveringConstraintProto::_InternalSerialize(operations_research::sat::CircuitCoveringConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v28 = v6 >> 14;
      v6 >>= 7;
    }
    while (v28);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (unint64_t *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v29 = v16 >> 14;
      v16 >>= 7;
    }
    while (v29);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::CircuitCoveringConstraintProto::ByteSizeLong(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const google::protobuf::UnknownFieldSet *v7;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    goto LABEL_12;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
    goto LABEL_9;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (!v4)
    goto LABEL_9;
LABEL_6:
  v5 = v4;
  if ((v4 & 0x80000000) != 0)
    v6 = 11;
  else
    v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v3 += v6;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CircuitCoveringConstraintProto *)((char *)this + 8), v7, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v7;
  return (char *)(v3 + v4);
}

void operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(operations_research::sat::CircuitCoveringConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::CircuitCoveringConstraintProto *__hidden))a2 == &off_24F981D98)
    operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(operations_research::sat::CircuitCoveringConstraintProto *this, const operations_research::sat::CircuitCoveringConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v14 = *((int *)this + 10);
    v13 = (unsigned int *)((char *)this + 40);
    google::protobuf::RepeatedField<long long>::Reserve(v13, v14 + v12);
    v15 = *((_QWORD *)v13 + 1);
    *v13 += *((_DWORD *)a2 + 10);
    memcpy((void *)(v15 + 8 * v14), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
}

void operations_research::sat::CircuitCoveringConstraintProto::CopyFrom(operations_research::sat::CircuitCoveringConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::CircuitCoveringConstraintProto *__hidden))a2 == &off_24F981D98)
      operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::IsInitialized(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::GetMetadata(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[30];
}

void operations_research::sat::TableConstraintProto::~TableConstraintProto(operations_research::sat::TableConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::TableConstraintProto::~TableConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::TableConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

void operations_research::sat::TableConstraintProto::Clear(operations_research::sat::TableConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 60) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::TableConstraintProto::_InternalParse(operations_research::sat::TableConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::internal *v10;
  google::protobuf::UnknownFieldSet *v11;
  google::protobuf::internal *v12;
  google::protobuf::internal *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  google::protobuf::internal *TagFallback;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::internal *v24;

  v6 = a2;
  v24 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::TableConstraintProto *)((char *)this + 40);
  v10 = (operations_research::sat::TableConstraintProto *)((char *)this + 16);
  if ((unint64_t)a2 < *(_QWORD *)a3)
  {
    while (1)
    {
LABEL_7:
      v13 = (google::protobuf::internal *)((char *)v6 + 1);
      v14 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0)
        goto LABEL_10;
      v15 = v14 + (*(unsigned __int8 *)v13 << 7);
      v14 = v15 - 128;
      if (*(char *)v13 < 0)
      {
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v15 - 128));
        v24 = TagFallback;
        if (!TagFallback)
          return 0;
        v13 = TagFallback;
        v14 = a2;
        v16 = a2 >> 3;
        if (a2 >> 3 != 3)
          goto LABEL_11;
LABEL_19:
        if (v14 != 24)
          goto LABEL_39;
        v6 = (google::protobuf::internal *)((char *)v13 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v13;
        if (*(char *)v13 < 0)
        {
          v18 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v18 << 7) - 128);
          if (v18 < 0)
          {
            v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v13, (const char *)a2);
            v24 = v6;
            *((_BYTE *)this + 60) = a2 != 0;
            if (!v6)
              return v6;
            goto LABEL_6;
          }
          v6 = (google::protobuf::internal *)((char *)v13 + 2);
        }
        v24 = v6;
        *((_BYTE *)this + 60) = a2 != 0;
        if ((unint64_t)v6 >= *(_QWORD *)a3)
          break;
      }
      else
      {
        v13 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
        v24 = v13;
        v16 = v14 >> 3;
        if (v14 >> 3 == 3)
          goto LABEL_19;
LABEL_11:
        if (v16 == 2)
        {
          if (v14 == 18)
          {
            v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v9, (unsigned __int8 *)v13, a3, a4);
LABEL_5:
            v6 = v12;
            v24 = v12;
            if (!v12)
              return v6;
            goto LABEL_6;
          }
          if (v14 != 16)
          {
LABEL_39:
            if (!v14 || (v14 & 7) == 4)
            {
              *((_DWORD *)a3 + 20) = v14 - 1;
              return v13;
            }
            if ((*v8 & 1) != 0)
            {
              v11 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v11 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
              v13 = v24;
            }
            v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v11, v13, (int32x2_t *)a3, a5);
            goto LABEL_5;
          }
          v21 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
          v22 = *((unsigned int *)this + 10);
          if ((_DWORD)v22 == *((_DWORD *)this + 11))
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v9, v22 + 1);
          *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v22) = v21;
          *((_DWORD *)this + 10) = v22 + 1;
        }
        else
        {
          if (v16 != 1)
            goto LABEL_39;
          if (v14 == 10)
          {
            v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v10, (unsigned __int8 *)v13, a3, a4);
            goto LABEL_5;
          }
          if (v14 != 8)
            goto LABEL_39;
          v19 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
          v20 = *((unsigned int *)this + 4);
          if ((_DWORD)v20 == *((_DWORD *)this + 5))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v20 + 1);
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v20) = v19;
          *((_DWORD *)this + 4) = v20 + 1;
        }
        v6 = v24;
        if (!v24)
          return v6;
LABEL_6:
        if ((unint64_t)v6 >= *(_QWORD *)a3)
          break;
      }
    }
  }
  if ((google::protobuf::internal *)((char *)v6 - *((_QWORD *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    v24 = v6;
    if ((a2 & 1) == 0)
      goto LABEL_7;
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::TableConstraintProto::_InternalSerialize(operations_research::sat::TableConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned int v29;
  unsigned int v30;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v29 = v6 >> 14;
      v6 >>= 7;
    }
    while (v29);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (unint64_t *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v30 = v16 >> 14;
      v16 >>= 7;
    }
    while (v30);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  if (*((_BYTE *)this + 60))
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v26 = *((_BYTE *)this + 60);
    }
    else
    {
      v26 = 1;
    }
    *a2 = 24;
    a2[1] = v26;
    a2 += 2;
  }
  v27 = *((_QWORD *)this + 1);
  if ((v27 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::TableConstraintProto::ByteSizeLong(operations_research::sat::TableConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const google::protobuf::UnknownFieldSet *v7;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    goto LABEL_12;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
    goto LABEL_9;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (!v4)
    goto LABEL_9;
LABEL_6:
  v5 = v4;
  if ((v4 & 0x80000000) != 0)
    v6 = 11;
  else
    v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v3 += v6;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  if (*((_BYTE *)this + 60))
    v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4 + 2);
  else
    v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::TableConstraintProto *)((char *)this + 8), v7, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v7;
  return (char *)v7;
}

void operations_research::sat::TableConstraintProto::MergeFrom(operations_research::sat::TableConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::TableConstraintProto *__hidden))a2 == &off_24F981E48)
    operations_research::sat::TableConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::TableConstraintProto::MergeFrom(operations_research::sat::TableConstraintProto *this, const operations_research::sat::TableConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  if (*((_BYTE *)a2 + 60))
    *((_BYTE *)this + 60) = 1;
}

void operations_research::sat::TableConstraintProto::CopyFrom(operations_research::sat::TableConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_BYTE *)this + 60) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::TableConstraintProto *__hidden))a2 == &off_24F981E48)
      operations_research::sat::TableConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::TableConstraintProto::IsInitialized(operations_research::sat::TableConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::TableConstraintProto::GetMetadata(operations_research::sat::TableConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[32];
}

void operations_research::sat::InverseConstraintProto::~InverseConstraintProto(operations_research::sat::InverseConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::InverseConstraintProto::~InverseConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::InverseConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void operations_research::sat::InverseConstraintProto::Clear(operations_research::sat::InverseConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::InverseConstraintProto::_InternalParse(operations_research::sat::InverseConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  google::protobuf::internal *v11;
  int v12;
  uint64_t v13;
  google::protobuf::internal *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  google::protobuf::internal *TagFallback;
  int v20;
  uint64_t v21;
  google::protobuf::internal *v23;

  v6 = a2;
  v23 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 40);
  v10 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v23 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v14 = (google::protobuf::internal *)((char *)v6 + 1);
    v15 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_14;
    v16 = v15 + (*(unsigned __int8 *)v14 << 7);
    v15 = v16 - 128;
    if (*(char *)v14 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v16 - 128));
      v23 = TagFallback;
      if (!TagFallback)
        return 0;
      v14 = TagFallback;
      v15 = a2;
      v17 = a2 >> 3;
      if (a2 >> 3 != 2)
        goto LABEL_15;
LABEL_24:
      if (v15 == 18)
      {
        v11 = (google::protobuf::internal *)v9;
        goto LABEL_4;
      }
      if (v15 != 16)
        goto LABEL_16;
      v20 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
      v21 = *((unsigned int *)this + 10);
      if ((_DWORD)v21 == *((_DWORD *)this + 11))
        google::protobuf::RepeatedField<int>::Reserve(v9, v21 + 1);
      *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v21) = v20;
      *((_DWORD *)this + 10) = v21 + 1;
LABEL_34:
      v6 = v23;
      if (!v23)
        return v6;
    }
    else
    {
      v14 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_14:
      v23 = v14;
      v17 = v15 >> 3;
      if (v15 >> 3 == 2)
        goto LABEL_24;
LABEL_15:
      if (v17 != 1)
        goto LABEL_16;
      if (v15 == 10)
      {
        v11 = (google::protobuf::internal *)v10;
LABEL_4:
        v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, (unsigned __int8 *)v14, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        v23 = v6;
        if (!v6)
          return v6;
      }
      else
      {
        if (v15 == 8)
        {
          v12 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
          v13 = *((unsigned int *)this + 4);
          if ((_DWORD)v13 == *((_DWORD *)this + 5))
            google::protobuf::RepeatedField<int>::Reserve(v10, v13 + 1);
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v13) = v12;
          *((_DWORD *)this + 4) = v13 + 1;
          goto LABEL_34;
        }
LABEL_16:
        if (!v15 || (v15 & 7) == 4)
        {
          a3[10].i32[0] = v15 - 1;
          return v14;
        }
        if ((*v8 & 1) != 0)
        {
          v18 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v18 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v14 = v23;
        }
        v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, v18, v14, a3, a5);
        v23 = v6;
        if (!v6)
          return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::InverseConstraintProto::_InternalSerialize(operations_research::sat::InverseConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v28 = v6 >> 14;
      v6 >>= 7;
    }
    while (v28);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (int *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v29 = v16 >> 14;
      v16 >>= 7;
    }
    while (v29);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::InverseConstraintProto::ByteSizeLong(operations_research::sat::InverseConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const google::protobuf::UnknownFieldSet *v7;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    goto LABEL_12;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
    goto LABEL_9;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
  if (!v4)
    goto LABEL_9;
LABEL_6:
  v5 = v4;
  if ((v4 & 0x80000000) != 0)
    v6 = 11;
  else
    v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v3 += v6;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::InverseConstraintProto *)((char *)this + 8), v7, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v7;
  return (char *)(v3 + v4);
}

void operations_research::sat::InverseConstraintProto::MergeFrom(operations_research::sat::InverseConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::InverseConstraintProto *__hidden))a2 == &off_24F981EF8)
    operations_research::sat::InverseConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::InverseConstraintProto::MergeFrom(operations_research::sat::InverseConstraintProto *this, const operations_research::sat::InverseConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v14 = *((int *)this + 10);
    v13 = (unsigned int *)((char *)this + 40);
    google::protobuf::RepeatedField<int>::Reserve(v13, v14 + v12);
    v15 = *((_QWORD *)v13 + 1);
    *v13 += *((_DWORD *)a2 + 10);
    memcpy((void *)(v15 + 4 * v14), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
}

void operations_research::sat::InverseConstraintProto::CopyFrom(operations_research::sat::InverseConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::InverseConstraintProto *__hidden))a2 == &off_24F981EF8)
      operations_research::sat::InverseConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::InverseConstraintProto::IsInitialized(operations_research::sat::InverseConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::InverseConstraintProto::GetMetadata(operations_research::sat::InverseConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[34];
}

void operations_research::sat::AutomatonConstraintProto::~AutomatonConstraintProto(operations_research::sat::AutomatonConstraintProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 112);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 88);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::AutomatonConstraintProto::~AutomatonConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::AutomatonConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 144) = a2;
  return this;
}

void operations_research::sat::AutomatonConstraintProto::Clear(operations_research::sat::AutomatonConstraintProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 17) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::AutomatonConstraintProto::_InternalParse(operations_research::sat::AutomatonConstraintProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  google::protobuf::internal *v14;
  google::protobuf::internal *v15;
  google::protobuf::internal *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  google::protobuf::internal *TagFallback;
  BOOL v21;
  google::protobuf::UnknownFieldSet *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  google::protobuf::internal *v45;

  v6 = a2;
  v45 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::AutomatonConstraintProto *)((char *)this + 112);
  v10 = (unsigned int *)((char *)this + 88);
  v11 = (unsigned int *)((char *)this + 64);
  v12 = (unsigned int *)((char *)this + 40);
  v13 = (unsigned int *)((char *)this + 16);
  if ((unint64_t)a2 < *(_QWORD *)a3)
  {
    while (1)
    {
LABEL_8:
      v16 = (google::protobuf::internal *)((char *)v6 + 1);
      v17 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0)
        goto LABEL_11;
      v18 = v17 + (*(unsigned __int8 *)v16 << 7);
      v17 = v18 - 128;
      if ((*(char *)v16 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v18 - 128));
      v45 = TagFallback;
      if (!TagFallback)
        return 0;
      v16 = TagFallback;
      v17 = a2;
      v19 = (a2 >> 3) - 2;
      if (v19 > 5)
      {
LABEL_27:
        if (v17)
          v21 = (v17 & 7) == 4;
        else
          v21 = 1;
        if (v21)
        {
          a3[10].i32[0] = v17 - 1;
          return v16;
        }
        if ((*v8 & 1) != 0)
        {
          v22 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v16 = v45;
        }
        v15 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v17, v22, v16, a3, a5);
        goto LABEL_6;
      }
LABEL_12:
      switch(v19)
      {
        case 0u:
          if (v17 != 16)
            goto LABEL_27;
          v6 = (google::protobuf::internal *)((char *)v16 + 1);
          a2 = (google::protobuf::internal *)*(unsigned __int8 *)v16;
          if ((*(char *)v16 & 0x80000000) == 0)
          {
            v45 = (google::protobuf::internal *)((char *)v16 + 1);
            *((_QWORD *)this + 17) = a2;
            if ((unint64_t)v6 >= *(_QWORD *)a3)
              goto LABEL_36;
            continue;
          }
          v23 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v23 << 7) - 128);
          if ((v23 & 0x80000000) == 0)
          {
            v6 = (google::protobuf::internal *)((char *)v16 + 2);
            v45 = (google::protobuf::internal *)((char *)v16 + 2);
            *((_QWORD *)this + 17) = a2;
            if ((unint64_t)v16 + 2 >= *(_QWORD *)a3)
              goto LABEL_36;
            continue;
          }
          v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v16, (const char *)a2);
          v45 = v6;
          *((_QWORD *)this + 17) = a2;
          if (!v6)
            return v6;
          goto LABEL_7;
        case 1u:
          if (v17 == 26)
          {
            v14 = (google::protobuf::internal *)v13;
LABEL_5:
            v15 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v14, (unsigned __int8 *)v16, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
            goto LABEL_6;
          }
          if (v17 != 24)
            goto LABEL_27;
          v24 = google::protobuf::internal::ReadVarint64(&v45, (const char **)a2);
          v25 = *((unsigned int *)this + 4);
          v26 = v25 + 1;
          if ((_DWORD)v25 == *((_DWORD *)this + 5))
          {
            v40 = v24;
            google::protobuf::RepeatedField<long long>::Reserve(v13, v26);
            v26 = v25 + 1;
            v24 = v40;
          }
          *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v25) = v24;
          *((_DWORD *)this + 4) = v26;
          break;
        case 2u:
          if (v17 == 34)
          {
            v14 = (google::protobuf::internal *)v12;
            goto LABEL_5;
          }
          if (v17 != 32)
            goto LABEL_27;
          v27 = google::protobuf::internal::ReadVarint64(&v45, (const char **)a2);
          v28 = *((unsigned int *)this + 10);
          v29 = v28 + 1;
          if ((_DWORD)v28 == *((_DWORD *)this + 11))
          {
            v41 = v27;
            google::protobuf::RepeatedField<long long>::Reserve(v12, v29);
            v29 = v28 + 1;
            v27 = v41;
          }
          *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v28) = v27;
          *((_DWORD *)this + 10) = v29;
          break;
        case 3u:
          if (v17 == 42)
          {
            v14 = (google::protobuf::internal *)v11;
            goto LABEL_5;
          }
          if (v17 != 40)
            goto LABEL_27;
          v30 = google::protobuf::internal::ReadVarint64(&v45, (const char **)a2);
          v31 = *((unsigned int *)this + 16);
          v32 = v31 + 1;
          if ((_DWORD)v31 == *((_DWORD *)this + 17))
          {
            v42 = v30;
            google::protobuf::RepeatedField<long long>::Reserve(v11, v32);
            v32 = v31 + 1;
            v30 = v42;
          }
          *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v31) = v30;
          *((_DWORD *)this + 16) = v32;
          break;
        case 4u:
          if (v17 == 50)
          {
            v14 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v17 != 48)
            goto LABEL_27;
          v33 = google::protobuf::internal::ReadVarint64(&v45, (const char **)a2);
          v34 = *((unsigned int *)this + 22);
          v35 = v34 + 1;
          if ((_DWORD)v34 == *((_DWORD *)this + 23))
          {
            v43 = v33;
            google::protobuf::RepeatedField<long long>::Reserve(v10, v35);
            v35 = v34 + 1;
            v33 = v43;
          }
          *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v34) = v33;
          *((_DWORD *)this + 22) = v35;
          break;
        case 5u:
          if (v17 == 58)
          {
            v15 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v16, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
LABEL_6:
            v6 = v15;
            v45 = v15;
            if (!v15)
              return v6;
            goto LABEL_7;
          }
          if (v17 != 56)
            goto LABEL_27;
          v36 = google::protobuf::internal::ReadVarint64(&v45, (const char **)a2);
          v37 = *((unsigned int *)this + 28);
          v38 = v37 + 1;
          if ((_DWORD)v37 == *((_DWORD *)this + 29))
          {
            v44 = v36;
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v38);
            v38 = v37 + 1;
            v36 = v44;
          }
          *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v37) = v36;
          *((_DWORD *)this + 28) = v38;
          break;
        default:
          goto LABEL_27;
      }
      v6 = v45;
      if (!v45)
        return v6;
LABEL_7:
      if ((unint64_t)v6 >= *(_QWORD *)a3)
        goto LABEL_36;
    }
    v16 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_11:
    v45 = v16;
    v19 = (v17 >> 3) - 2;
    goto LABEL_12;
  }
LABEL_36:
  if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) != (google::protobuf::internal *)a3[3].i32[1])
  {
    v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
    v45 = v6;
    if ((a2 & 1) == 0)
      goto LABEL_8;
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::AutomatonConstraintProto::_InternalSerialize(operations_research::sat::AutomatonConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  int *v52;
  int *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;

  v6 = *((_QWORD *)this + 17);
  if (!v6)
  {
LABEL_9:
    v7 = *((_DWORD *)this + 8);
    if (v7 < 1)
      goto LABEL_27;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = *((_QWORD *)this + 17);
    *a2 = 16;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      v7 = *((_DWORD *)this + 8);
      if (v7 < 1)
        goto LABEL_27;
LABEL_10:
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        *a2 = 26;
        v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80)
          goto LABEL_12;
      }
      else
      {
        *a2 = 26;
        v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80)
        {
LABEL_12:
          a2 += 2;
          *v9 = v7;
          v10 = (unint64_t *)*((_QWORD *)this + 3);
          v11 = &v10[*((int *)this + 4)];
          while (1)
          {
            if (*(_QWORD *)a3 <= (unint64_t)a2)
            {
              a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
              v17 = *v10++;
              v12 = v17;
              if (v17 > 0x7F)
              {
LABEL_17:
                *a2 = v12 | 0x80;
                v14 = v12 >> 7;
                if (v12 >> 14)
                {
                  a2 += 2;
                  do
                  {
                    *(a2 - 1) = v14 | 0x80;
                    v15 = v14 >> 7;
                    ++a2;
                    v16 = v14 >> 14;
                    v14 >>= 7;
                  }
                  while (v16);
                  *(a2 - 1) = v15;
                }
                else
                {
                  a2[1] = v14;
                  a2 += 2;
                }
                goto LABEL_14;
              }
            }
            else
            {
              v13 = *v10++;
              v12 = v13;
              if (v13 > 0x7F)
                goto LABEL_17;
            }
            *a2++ = v12;
LABEL_14:
            if (v10 >= v11)
              goto LABEL_27;
          }
        }
      }
      do
      {
        *v9++ = v7 | 0x80;
        v62 = v7 >> 14;
        v7 = v7 >> 7;
      }
      while (v62);
      a2 = (char *)(v9 - 1);
      goto LABEL_12;
    }
  }
  else
  {
    *a2 = 16;
    if (v6 <= 0x7F)
      goto LABEL_4;
  }
  a2[1] = v6 | 0x80;
  v8 = v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    v18 = v8 >> 7;
    ++a2;
    v19 = v8 >> 14;
    v8 >>= 7;
  }
  while (v19);
  *(a2 - 1) = v18;
  v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
    goto LABEL_10;
LABEL_27:
  v20 = *((_DWORD *)this + 14);
  if ((int)v20 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      v21 = (unsigned __int8 *)(a2 + 1);
      if (v20 < 0x80)
        goto LABEL_30;
    }
    else
    {
      *a2 = 34;
      v21 = (unsigned __int8 *)(a2 + 1);
      if (v20 < 0x80)
      {
LABEL_30:
        a2 += 2;
        *v21 = v20;
        v22 = (unint64_t *)*((_QWORD *)this + 6);
        v23 = &v22[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v29 = *v22++;
            v24 = v29;
            if (v29 > 0x7F)
            {
LABEL_35:
              *a2 = v24 | 0x80;
              v26 = v24 >> 7;
              if (v24 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v26 | 0x80;
                  v27 = v26 >> 7;
                  ++a2;
                  v28 = v26 >> 14;
                  v26 >>= 7;
                }
                while (v28);
                *(a2 - 1) = v27;
              }
              else
              {
                a2[1] = v26;
                a2 += 2;
              }
              goto LABEL_32;
            }
          }
          else
          {
            v25 = *v22++;
            v24 = v25;
            if (v25 > 0x7F)
              goto LABEL_35;
          }
          *a2++ = v24;
LABEL_32:
          if (v22 >= v23)
            goto LABEL_42;
        }
      }
    }
    do
    {
      *v21++ = v20 | 0x80;
      v63 = v20 >> 14;
      v20 >>= 7;
    }
    while (v63);
    a2 = (char *)(v21 - 1);
    goto LABEL_30;
  }
LABEL_42:
  v30 = *((_DWORD *)this + 20);
  if ((int)v30 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 42;
      v31 = (unsigned __int8 *)(a2 + 1);
      if (v30 < 0x80)
        goto LABEL_45;
    }
    else
    {
      *a2 = 42;
      v31 = (unsigned __int8 *)(a2 + 1);
      if (v30 < 0x80)
      {
LABEL_45:
        a2 += 2;
        *v31 = v30;
        v32 = (unint64_t *)*((_QWORD *)this + 9);
        v33 = &v32[*((int *)this + 16)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v39 = *v32++;
            v34 = v39;
            if (v39 > 0x7F)
            {
LABEL_50:
              *a2 = v34 | 0x80;
              v36 = v34 >> 7;
              if (v34 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v36 | 0x80;
                  v37 = v36 >> 7;
                  ++a2;
                  v38 = v36 >> 14;
                  v36 >>= 7;
                }
                while (v38);
                *(a2 - 1) = v37;
              }
              else
              {
                a2[1] = v36;
                a2 += 2;
              }
              goto LABEL_47;
            }
          }
          else
          {
            v35 = *v32++;
            v34 = v35;
            if (v35 > 0x7F)
              goto LABEL_50;
          }
          *a2++ = v34;
LABEL_47:
          if (v32 >= v33)
            goto LABEL_57;
        }
      }
    }
    do
    {
      *v31++ = v30 | 0x80;
      v64 = v30 >> 14;
      v30 >>= 7;
    }
    while (v64);
    a2 = (char *)(v31 - 1);
    goto LABEL_45;
  }
LABEL_57:
  v40 = *((_DWORD *)this + 26);
  if ((int)v40 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 50;
      v41 = (unsigned __int8 *)(a2 + 1);
      if (v40 < 0x80)
        goto LABEL_60;
    }
    else
    {
      *a2 = 50;
      v41 = (unsigned __int8 *)(a2 + 1);
      if (v40 < 0x80)
      {
LABEL_60:
        a2 += 2;
        *v41 = v40;
        v42 = (unint64_t *)*((_QWORD *)this + 12);
        v43 = &v42[*((int *)this + 22)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v49 = *v42++;
            v44 = v49;
            if (v49 > 0x7F)
            {
LABEL_65:
              *a2 = v44 | 0x80;
              v46 = v44 >> 7;
              if (v44 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v46 | 0x80;
                  v47 = v46 >> 7;
                  ++a2;
                  v48 = v46 >> 14;
                  v46 >>= 7;
                }
                while (v48);
                *(a2 - 1) = v47;
              }
              else
              {
                a2[1] = v46;
                a2 += 2;
              }
              goto LABEL_62;
            }
          }
          else
          {
            v45 = *v42++;
            v44 = v45;
            if (v45 > 0x7F)
              goto LABEL_65;
          }
          *a2++ = v44;
LABEL_62:
          if (v42 >= v43)
            goto LABEL_72;
        }
      }
    }
    do
    {
      *v41++ = v40 | 0x80;
      v65 = v40 >> 14;
      v40 >>= 7;
    }
    while (v65);
    a2 = (char *)(v41 - 1);
    goto LABEL_60;
  }
LABEL_72:
  v50 = *((_DWORD *)this + 32);
  if ((int)v50 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 58;
      v51 = (unsigned __int8 *)(a2 + 1);
      if (v50 < 0x80)
        goto LABEL_75;
    }
    else
    {
      *a2 = 58;
      v51 = (unsigned __int8 *)(a2 + 1);
      if (v50 < 0x80)
      {
LABEL_75:
        a2 += 2;
        *v51 = v50;
        v52 = (int *)*((_QWORD *)this + 15);
        v53 = &v52[*((int *)this + 28)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v59 = *v52++;
            v54 = v59;
            if (v59 > 0x7F)
            {
LABEL_80:
              *a2 = v54 | 0x80;
              v56 = v54 >> 7;
              if (v54 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v56 | 0x80;
                  v57 = v56 >> 7;
                  ++a2;
                  v58 = v56 >> 14;
                  v56 >>= 7;
                }
                while (v58);
                *(a2 - 1) = v57;
              }
              else
              {
                a2[1] = v56;
                a2 += 2;
              }
              goto LABEL_77;
            }
          }
          else
          {
            v55 = *v52++;
            v54 = v55;
            if (v55 > 0x7F)
              goto LABEL_80;
          }
          *a2++ = v54;
LABEL_77:
          if (v52 >= v53)
            goto LABEL_87;
        }
      }
    }
    do
    {
      *v51++ = v50 | 0x80;
      v66 = v50 >> 14;
      v50 >>= 7;
    }
    while (v66);
    a2 = (char *)(v51 - 1);
    goto LABEL_75;
  }
LABEL_87:
  v60 = *((_QWORD *)this + 1);
  if ((v60 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v60 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::AutomatonConstraintProto::ByteSizeLong(operations_research::sat::AutomatonConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const google::protobuf::UnknownFieldSet *v28;
  uint64_t v29;
  char *v30;
  const google::protobuf::UnknownFieldSet *v31;

  v2 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 4);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0)
    v3 = v4;
  if (v2)
    v5 = v2;
  else
    v5 = 0;
  if (!v2)
    v3 = 0;
  *((_DWORD *)this + 8) = v5;
  v6 = v3 + v2;
  v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  v8 = 11;
  v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v7 >= 0)
    v8 = v9;
  v10 = v8 + v6;
  if (v7)
    v11 = v7;
  else
    v11 = 0;
  if (!v7)
    v10 = v6;
  *((_DWORD *)this + 14) = v11;
  v12 = v10 + v7;
  v13 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
  if (v13)
  {
    v14 = v13;
    if ((v13 & 0x80000000) != 0)
      v15 = 11;
    else
      v15 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v12 += v15;
  }
  else
  {
    v14 = 0;
  }
  *((_DWORD *)this + 20) = v14;
  v16 = v12 + v13;
  v17 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 22);
  v18 = 11;
  v19 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v17 >= 0)
    v18 = v19;
  v20 = v18 + v16;
  if (v17)
    v21 = v17;
  else
    v21 = 0;
  if (!v17)
    v20 = v16;
  *((_DWORD *)this + 26) = v21;
  v22 = v20 + v17;
  v23 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 28);
  v24 = 11;
  v25 = ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v23 >= 0)
    v24 = v25;
  v26 = v24 + v22;
  if (v23)
    v27 = v23;
  else
    v27 = 0;
  if (!v23)
    v26 = v22;
  *((_DWORD *)this + 32) = v27;
  v28 = (const google::protobuf::UnknownFieldSet *)(v26 + v23);
  v29 = *((_QWORD *)this + 17);
  v30 = (char *)v28 + ((9 * (__clz(v29 | 1) ^ 0x3F) + 73) >> 6);
  if (v29)
    v31 = (const google::protobuf::UnknownFieldSet *)(v30 + 1);
  else
    v31 = v28;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::AutomatonConstraintProto *)((char *)this + 8), v31, (_DWORD *)this + 36);
  *((_DWORD *)this + 36) = (_DWORD)v31;
  return (char *)v31;
}

void operations_research::sat::AutomatonConstraintProto::MergeFrom(operations_research::sat::AutomatonConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::AutomatonConstraintProto *__hidden))a2 == &off_24F981FA8)
    operations_research::sat::AutomatonConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::AutomatonConstraintProto::MergeFrom(operations_research::sat::AutomatonConstraintProto *this, const operations_research::sat::AutomatonConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 8 * v10), *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    v16 = *((int *)this + 16);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v16 + v15);
    v17 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy((void *)(v17 + 8 * v16), *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  v18 = *((_DWORD *)a2 + 22);
  if (v18)
  {
    v19 = *((int *)this + 22);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 22, v19 + v18);
    v20 = *((_QWORD *)this + 12);
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
    memcpy((void *)(v20 + 8 * v19), *((const void **)a2 + 12), 8 * *((int *)a2 + 22));
  }
  v21 = *((_DWORD *)a2 + 28);
  if (v21)
  {
    v22 = *((int *)this + 28);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 28, v22 + v21);
    v23 = *((_QWORD *)this + 15);
    *((_DWORD *)this + 28) += *((_DWORD *)a2 + 28);
    memcpy((void *)(v23 + 4 * v22), *((const void **)a2 + 15), 4 * *((int *)a2 + 28));
  }
  v24 = *((_QWORD *)a2 + 17);
  if (v24)
    *((_QWORD *)this + 17) = v24;
}

void operations_research::sat::AutomatonConstraintProto::CopyFrom(operations_research::sat::AutomatonConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 22) = 0;
    *((_DWORD *)this + 28) = 0;
    *((_QWORD *)this + 17) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::AutomatonConstraintProto *__hidden))a2 == &off_24F981FA8)
      operations_research::sat::AutomatonConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::AutomatonConstraintProto::IsInitialized(operations_research::sat::AutomatonConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::AutomatonConstraintProto::GetMetadata(operations_research::sat::AutomatonConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[36];
}

uint64_t operations_research::sat::ConstraintProto::clear_constraint(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;

  v1 = this;
  switch(*(_DWORD *)(this + 60))
  {
    case 3:
    case 4:
    case 5:
    case 0x1A:
      v4 = *(_QWORD *)(this + 8);
      v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
      if ((v4 & 1) != 0)
      {
        if (*v5)
          goto LABEL_68;
      }
      else if (v5)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::BoolArgumentProto::~BoolArgumentProto((operations_research::sat::BoolArgumentProto *)this);
      goto LABEL_104;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v2 = *(_QWORD *)(this + 8);
      v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
      if ((v2 & 1) != 0)
      {
        if (*v3)
          goto LABEL_68;
      }
      else if (v3)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::IntegerArgumentProto::~IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)this);
      goto LABEL_104;
    case 0xC:
      v8 = *(_QWORD *)(this + 8);
      v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL);
      if ((v8 & 1) != 0)
      {
        if (*v9)
          goto LABEL_68;
      }
      else if (v9)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::LinearConstraintProto::~LinearConstraintProto((operations_research::sat::LinearConstraintProto *)this);
      goto LABEL_104;
    case 0xD:
      v10 = *(_QWORD *)(this + 8);
      v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      if ((v10 & 1) != 0)
      {
        if (*v11)
          goto LABEL_68;
      }
      else if (v11)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::AllDifferentConstraintProto::~AllDifferentConstraintProto((operations_research::sat::AllDifferentConstraintProto *)this);
      goto LABEL_104;
    case 0xE:
      v12 = *(_QWORD *)(this + 8);
      v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      if ((v12 & 1) != 0)
      {
        if (*v13)
          goto LABEL_68;
      }
      else if (v13)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::ElementConstraintProto::~ElementConstraintProto((operations_research::sat::ElementConstraintProto *)this);
      goto LABEL_104;
    case 0xF:
      v14 = *(_QWORD *)(this + 8);
      v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      if ((v14 & 1) != 0)
      {
        if (*v15)
          goto LABEL_68;
      }
      else if (v15)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::CircuitConstraintProto::~CircuitConstraintProto((operations_research::sat::CircuitConstraintProto *)this);
      goto LABEL_104;
    case 0x10:
      v16 = *(_QWORD *)(this + 8);
      v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if ((v16 & 1) != 0)
      {
        if (*v17)
          goto LABEL_68;
      }
      else if (v17)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::TableConstraintProto::~TableConstraintProto((operations_research::sat::TableConstraintProto *)this);
      goto LABEL_104;
    case 0x11:
      v18 = *(_QWORD *)(this + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
      {
        if (*v19)
          goto LABEL_68;
      }
      else if (v19)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::AutomatonConstraintProto::~AutomatonConstraintProto((operations_research::sat::AutomatonConstraintProto *)this);
      goto LABEL_104;
    case 0x12:
      v20 = *(_QWORD *)(this + 8);
      v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL);
      if ((v20 & 1) != 0)
      {
        if (*v21)
          goto LABEL_68;
      }
      else if (v21)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::InverseConstraintProto::~InverseConstraintProto((operations_research::sat::InverseConstraintProto *)this);
      goto LABEL_104;
    case 0x13:
      v22 = *(_QWORD *)(this + 8);
      v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
      if ((v22 & 1) != 0)
      {
        if (*v23)
          goto LABEL_68;
      }
      else if (v23)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)this);
      goto LABEL_104;
    case 0x14:
      v24 = *(_QWORD *)(this + 8);
      v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFFELL);
      if ((v24 & 1) != 0)
      {
        if (*v25)
          goto LABEL_68;
      }
      else if (v25)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::NoOverlapConstraintProto::~NoOverlapConstraintProto((operations_research::sat::NoOverlapConstraintProto *)this);
      goto LABEL_104;
    case 0x15:
      v26 = *(_QWORD *)(this + 8);
      v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL);
      if ((v26 & 1) != 0)
      {
        if (*v27)
          goto LABEL_68;
      }
      else if (v27)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::NoOverlap2DConstraintProto::~NoOverlap2DConstraintProto((operations_research::sat::NoOverlap2DConstraintProto *)this);
      goto LABEL_104;
    case 0x16:
      v28 = *(_QWORD *)(this + 8);
      v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFFELL);
      if ((v28 & 1) != 0)
      {
        if (*v29)
          goto LABEL_68;
      }
      else if (v29)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::CumulativeConstraintProto::~CumulativeConstraintProto((operations_research::sat::CumulativeConstraintProto *)this);
      goto LABEL_104;
    case 0x17:
      v30 = *(_QWORD *)(this + 8);
      v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
      if ((v30 & 1) != 0)
      {
        if (*v31)
          goto LABEL_68;
      }
      else if (v31)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::RoutesConstraintProto::~RoutesConstraintProto((operations_research::sat::RoutesConstraintProto *)this);
      goto LABEL_104;
    case 0x18:
      v32 = *(_QWORD *)(this + 8);
      v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFFELL);
      if ((v32 & 1) != 0)
      {
        if (*v33)
          goto LABEL_68;
      }
      else if (v33)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::ReservoirConstraintProto::~ReservoirConstraintProto((operations_research::sat::ReservoirConstraintProto *)this);
      goto LABEL_104;
    case 0x19:
      v34 = *(_QWORD *)(this + 8);
      v35 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFFFFELL);
      if ((v34 & 1) != 0)
      {
        if (*v35)
          goto LABEL_68;
      }
      else if (v35)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (!this)
        goto LABEL_68;
      operations_research::sat::CircuitCoveringConstraintProto::~CircuitCoveringConstraintProto((operations_research::sat::CircuitCoveringConstraintProto *)this);
LABEL_104:
      this = MEMORY[0x22E31DF78]();
      *(_DWORD *)(v1 + 60) = 0;
      return this;
    case 0x1B:
    case 0x1C:
      v6 = *(_QWORD *)(this + 8);
      v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL);
      if ((v6 & 1) != 0)
      {
        if (*v7)
          goto LABEL_68;
      }
      else if (v7)
      {
        goto LABEL_68;
      }
      this = *(_QWORD *)(this + 48);
      if (this)
      {
        operations_research::sat::LinearArgumentProto::~LinearArgumentProto((operations_research::sat::LinearArgumentProto *)this);
        this = MEMORY[0x22E31DF78]();
        *(_DWORD *)(v1 + 60) = 0;
        return this;
      }
LABEL_68:
      *(_DWORD *)(v1 + 60) = 0;
      return this;
    default:
      goto LABEL_68;
  }
}

operations_research::sat::ConstraintProto *operations_research::sat::ConstraintProto::ConstraintProto(operations_research::sat::ConstraintProto *this, const operations_research::sat::ConstraintProto *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  uint64_t v9;
  google::protobuf::Arena *v10;
  int v11;
  uint64_t v12;
  google::protobuf::Arena *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  google::protobuf::UnknownFieldSet *v20;
  int v21;
  uint64_t v22;
  google::protobuf::Arena *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  google::protobuf::UnknownFieldSet *v28;
  uint64_t v29;
  google::protobuf::Arena *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  google::protobuf::UnknownFieldSet *v35;
  uint64_t v36;
  google::protobuf::Arena *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  google::protobuf::UnknownFieldSet *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v50;
  google::protobuf::Arena *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  google::protobuf::UnknownFieldSet *v57;
  int v58;
  uint64_t v59;
  google::protobuf::Arena *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  google::protobuf::UnknownFieldSet *v65;
  uint64_t v66;
  google::protobuf::Arena *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  google::protobuf::UnknownFieldSet *v72;
  uint64_t v73;
  google::protobuf::Arena *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  google::protobuf::UnknownFieldSet *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  google::protobuf::Arena *v83;
  operations_research::sat::LinearConstraintProto *v84;
  const operations_research::sat::LinearConstraintProto *v85;
  uint64_t v86;
  google::protobuf::Arena *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  google::protobuf::UnknownFieldSet *v92;
  uint64_t v93;
  google::protobuf::Arena *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  google::protobuf::UnknownFieldSet *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  google::protobuf::Arena *v108;
  operations_research::sat::CircuitConstraintProto *v109;
  const operations_research::sat::CircuitConstraintProto *v110;
  uint64_t v111;
  google::protobuf::Arena *v112;
  operations_research::sat::TableConstraintProto *v113;
  const operations_research::sat::TableConstraintProto *v114;
  uint64_t v115;
  google::protobuf::Arena *v116;
  operations_research::sat::AutomatonConstraintProto *v117;
  const operations_research::sat::AutomatonConstraintProto *v118;
  uint64_t v119;
  google::protobuf::Arena *v120;
  operations_research::sat::InverseConstraintProto *v121;
  const operations_research::sat::InverseConstraintProto *v122;
  uint64_t v123;
  google::protobuf::Arena *v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  google::protobuf::UnknownFieldSet *v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  google::protobuf::Arena *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  google::protobuf::UnknownFieldSet *v141;
  uint64_t v142;
  google::protobuf::Arena *v143;
  operations_research::sat::NoOverlap2DConstraintProto *v144;
  const operations_research::sat::NoOverlap2DConstraintProto *v145;
  uint64_t v146;
  google::protobuf::Arena *v147;
  operations_research::sat::CumulativeConstraintProto *v148;
  const operations_research::sat::CumulativeConstraintProto *v149;
  uint64_t v150;
  google::protobuf::Arena *v151;
  operations_research::sat::RoutesConstraintProto *v152;
  const operations_research::sat::RoutesConstraintProto *v153;
  uint64_t v154;
  google::protobuf::Arena *v155;
  operations_research::sat::ReservoirConstraintProto *v156;
  const operations_research::sat::ReservoirConstraintProto *v157;
  uint64_t v158;
  google::protobuf::Arena *v159;
  operations_research::sat::CircuitCoveringConstraintProto *v160;
  const operations_research::sat::CircuitCoveringConstraintProto *v161;
  uint64_t v162;
  google::protobuf::Arena *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  google::protobuf::UnknownFieldSet *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  google::protobuf::Arena *v173;
  operations_research::sat::LinearArgumentProto *v174;
  const operations_research::sat::LinearArgumentProto *v175;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F982058;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_DWORD *)this + 14) = 0;
  v7 = *((_QWORD *)a2 + 1);
  if ((v7 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 5);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_14;
  }
  v10 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((*v4 & 1) != 0)
    v10 = *(google::protobuf::Arena **)v10;
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, v10, (__int128 *)v9);
LABEL_14:
  *((_DWORD *)this + 15) = 0;
  v11 = *((_DWORD *)a2 + 15);
  switch(v11)
  {
    case 3:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 3;
      v12 = *((_QWORD *)this + 1);
      v13 = (google::protobuf::Arena *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      if ((v12 & 1) != 0)
        v13 = *(google::protobuf::Arena **)v13;
      v14 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v13);
      v15 = v14;
      *((_QWORD *)this + 6) = v14;
      if (*((_DWORD *)a2 + 15) == 3)
        v16 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      v17 = v16[1];
      if ((v17 & 1) != 0)
      {
        v18 = (uint64_t *)(v14 + 8);
        v19 = *(_QWORD *)(v15 + 8);
        if ((v19 & 1) != 0)
          v20 = (google::protobuf::UnknownFieldSet *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v20 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v18);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v20, (const google::protobuf::UnknownFieldSet *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v21 = *((_DWORD *)v16 + 4);
      if (!v21)
        return this;
      goto LABEL_230;
    case 4:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 4;
      v22 = *((_QWORD *)this + 1);
      v23 = (google::protobuf::Arena *)(v22 & 0xFFFFFFFFFFFFFFFELL);
      if ((v22 & 1) != 0)
        v23 = *(google::protobuf::Arena **)v23;
      v24 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v23);
      v15 = v24;
      *((_QWORD *)this + 6) = v24;
      if (*((_DWORD *)a2 + 15) == 4)
        v16 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      v25 = v16[1];
      if ((v25 & 1) != 0)
      {
        v26 = (uint64_t *)(v24 + 8);
        v27 = *(_QWORD *)(v15 + 8);
        if ((v27 & 1) != 0)
          v28 = (google::protobuf::UnknownFieldSet *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v28 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v26);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v28, (const google::protobuf::UnknownFieldSet *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v21 = *((_DWORD *)v16 + 4);
      if (v21)
        goto LABEL_230;
      return this;
    case 5:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 5;
      v29 = *((_QWORD *)this + 1);
      v30 = (google::protobuf::Arena *)(v29 & 0xFFFFFFFFFFFFFFFELL);
      if ((v29 & 1) != 0)
        v30 = *(google::protobuf::Arena **)v30;
      v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v30);
      v15 = v31;
      *((_QWORD *)this + 6) = v31;
      if (*((_DWORD *)a2 + 15) == 5)
        v16 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      v32 = v16[1];
      if ((v32 & 1) != 0)
      {
        v33 = (uint64_t *)(v31 + 8);
        v34 = *(_QWORD *)(v15 + 8);
        if ((v34 & 1) != 0)
          v35 = (google::protobuf::UnknownFieldSet *)((v34 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v35 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v33);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v35, (const google::protobuf::UnknownFieldSet *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v21 = *((_DWORD *)v16 + 4);
      if (v21)
        goto LABEL_230;
      return this;
    case 7:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 7;
      v36 = *((_QWORD *)this + 1);
      v37 = (google::protobuf::Arena *)(v36 & 0xFFFFFFFFFFFFFFFELL);
      if ((v36 & 1) != 0)
        v37 = *(google::protobuf::Arena **)v37;
      v38 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v37);
      v39 = v38;
      *((_QWORD *)this + 6) = v38;
      if (*((_DWORD *)a2 + 15) == 7)
        v40 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v40 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v41 = v40[1];
      if ((v41 & 1) != 0)
      {
        v42 = (uint64_t *)(v38 + 8);
        v43 = *(_QWORD *)(v39 + 8);
        if ((v43 & 1) != 0)
          v44 = (google::protobuf::UnknownFieldSet *)((v43 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v44 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v42);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v44, (const google::protobuf::UnknownFieldSet *)((v41 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v45 = *((_DWORD *)v40 + 4);
      if (v45)
      {
        v46 = *(int *)(v39 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v39 + 16), v46 + v45);
        v47 = *(_QWORD *)(v39 + 24);
        *(_DWORD *)(v39 + 16) += *((_DWORD *)v40 + 4);
        memcpy((void *)(v47 + 4 * v46), (const void *)v40[3], 4 * *((int *)v40 + 4));
      }
      v48 = *((_DWORD *)v40 + 9);
      if (v48)
        goto LABEL_60;
      return this;
    case 8:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 8;
      v50 = *((_QWORD *)this + 1);
      v51 = (google::protobuf::Arena *)(v50 & 0xFFFFFFFFFFFFFFFELL);
      if ((v50 & 1) != 0)
        v51 = *(google::protobuf::Arena **)v51;
      v52 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v51);
      v39 = v52;
      *((_QWORD *)this + 6) = v52;
      if (*((_DWORD *)a2 + 15) == 8)
        v53 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v53 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v54 = v53[1];
      if ((v54 & 1) != 0)
      {
        v55 = (uint64_t *)(v52 + 8);
        v56 = *(_QWORD *)(v39 + 8);
        if ((v56 & 1) != 0)
          v57 = (google::protobuf::UnknownFieldSet *)((v56 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v57 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v55);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v57, (const google::protobuf::UnknownFieldSet *)((v54 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v58 = *((_DWORD *)v53 + 4);
      if (v58)
        goto LABEL_104;
      goto LABEL_105;
    case 9:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 9;
      v59 = *((_QWORD *)this + 1);
      v60 = (google::protobuf::Arena *)(v59 & 0xFFFFFFFFFFFFFFFELL);
      if ((v59 & 1) != 0)
        v60 = *(google::protobuf::Arena **)v60;
      v61 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v60);
      v39 = v61;
      *((_QWORD *)this + 6) = v61;
      if (*((_DWORD *)a2 + 15) == 9)
        v53 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v53 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v62 = v53[1];
      if ((v62 & 1) != 0)
      {
        v63 = (uint64_t *)(v61 + 8);
        v64 = *(_QWORD *)(v39 + 8);
        if ((v64 & 1) != 0)
          v65 = (google::protobuf::UnknownFieldSet *)((v64 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v65 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v63);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v65, (const google::protobuf::UnknownFieldSet *)((v62 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v58 = *((_DWORD *)v53 + 4);
      if (v58)
        goto LABEL_104;
      goto LABEL_105;
    case 10:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 10;
      v66 = *((_QWORD *)this + 1);
      v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
      if ((v66 & 1) != 0)
        v67 = *(google::protobuf::Arena **)v67;
      v68 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v67);
      v39 = v68;
      *((_QWORD *)this + 6) = v68;
      if (*((_DWORD *)a2 + 15) == 10)
        v53 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v53 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v69 = v53[1];
      if ((v69 & 1) != 0)
      {
        v70 = (uint64_t *)(v68 + 8);
        v71 = *(_QWORD *)(v39 + 8);
        if ((v71 & 1) != 0)
          v72 = (google::protobuf::UnknownFieldSet *)((v71 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v72 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v70);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v72, (const google::protobuf::UnknownFieldSet *)((v69 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v58 = *((_DWORD *)v53 + 4);
      if (v58)
        goto LABEL_104;
      goto LABEL_105;
    case 11:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 11;
      v73 = *((_QWORD *)this + 1);
      v74 = (google::protobuf::Arena *)(v73 & 0xFFFFFFFFFFFFFFFELL);
      if ((v73 & 1) != 0)
        v74 = *(google::protobuf::Arena **)v74;
      v75 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v74);
      v39 = v75;
      *((_QWORD *)this + 6) = v75;
      if (*((_DWORD *)a2 + 15) == 11)
        v53 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v53 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v76 = v53[1];
      if ((v76 & 1) != 0)
      {
        v77 = (uint64_t *)(v75 + 8);
        v78 = *(_QWORD *)(v39 + 8);
        if ((v78 & 1) != 0)
          v79 = (google::protobuf::UnknownFieldSet *)((v78 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v79 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v77);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v79, (const google::protobuf::UnknownFieldSet *)((v76 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v58 = *((_DWORD *)v53 + 4);
      if (v58)
      {
LABEL_104:
        v80 = *(int *)(v39 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v39 + 16), v80 + v58);
        v81 = *(_QWORD *)(v39 + 24);
        *(_DWORD *)(v39 + 16) += *((_DWORD *)v53 + 4);
        memcpy((void *)(v81 + 4 * v80), (const void *)v53[3], 4 * *((int *)v53 + 4));
      }
LABEL_105:
      v48 = *((_DWORD *)v53 + 9);
      if (!v48)
        return this;
LABEL_60:
      *(_DWORD *)(v39 + 36) = v48;
      return this;
    case 12:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 12;
      v82 = *((_QWORD *)this + 1);
      v83 = (google::protobuf::Arena *)(v82 & 0xFFFFFFFFFFFFFFFELL);
      if ((v82 & 1) != 0)
        v83 = *(google::protobuf::Arena **)v83;
      v84 = (operations_research::sat::LinearConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v83);
      *((_QWORD *)this + 6) = v84;
      if (*((_DWORD *)a2 + 15) == 12)
        v85 = (const operations_research::sat::LinearConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v85 = (const operations_research::sat::LinearConstraintProto *)&operations_research::sat::_LinearConstraintProto_default_instance_;
      operations_research::sat::LinearConstraintProto::MergeFrom(v84, v85);
      return this;
    case 13:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 13;
      v86 = *((_QWORD *)this + 1);
      v87 = (google::protobuf::Arena *)(v86 & 0xFFFFFFFFFFFFFFFELL);
      if ((v86 & 1) != 0)
        v87 = *(google::protobuf::Arena **)v87;
      v88 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(v87);
      v15 = v88;
      *((_QWORD *)this + 6) = v88;
      if (*((_DWORD *)a2 + 15) == 13)
        v16 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v16 = &operations_research::sat::_AllDifferentConstraintProto_default_instance_;
      v89 = v16[1];
      if ((v89 & 1) != 0)
      {
        v90 = (uint64_t *)(v88 + 8);
        v91 = *(_QWORD *)(v15 + 8);
        if ((v91 & 1) != 0)
          v92 = (google::protobuf::UnknownFieldSet *)((v91 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v92 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v90);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v92, (const google::protobuf::UnknownFieldSet *)((v89 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v21 = *((_DWORD *)v16 + 4);
      if (v21)
        goto LABEL_230;
      return this;
    case 14:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 14;
      v93 = *((_QWORD *)this + 1);
      v94 = (google::protobuf::Arena *)(v93 & 0xFFFFFFFFFFFFFFFELL);
      if ((v93 & 1) != 0)
        v94 = *(google::protobuf::Arena **)v94;
      v95 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v94);
      v96 = v95;
      *((_QWORD *)this + 6) = v95;
      if (*((_DWORD *)a2 + 15) == 14)
        v97 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v97 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      v98 = v97[1];
      if ((v98 & 1) != 0)
      {
        v99 = (uint64_t *)(v95 + 8);
        v100 = *(_QWORD *)(v96 + 8);
        if ((v100 & 1) != 0)
          v101 = (google::protobuf::UnknownFieldSet *)((v100 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v101 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v99);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v101, (const google::protobuf::UnknownFieldSet *)((v98 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v102 = *((_DWORD *)v97 + 4);
      if (v102)
      {
        v103 = *(int *)(v96 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v96 + 16), v103 + v102);
        v104 = *(_QWORD *)(v96 + 24);
        *(_DWORD *)(v96 + 16) += *((_DWORD *)v97 + 4);
        memcpy((void *)(v104 + 4 * v103), (const void *)v97[3], 4 * *((int *)v97 + 4));
      }
      v105 = *((_DWORD *)v97 + 9);
      if (v105)
        *(_DWORD *)(v96 + 36) = v105;
      v106 = *((_DWORD *)v97 + 10);
      if (!v106)
        return this;
      *(_DWORD *)(v96 + 40) = v106;
      return this;
    case 15:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 15;
      v107 = *((_QWORD *)this + 1);
      v108 = (google::protobuf::Arena *)(v107 & 0xFFFFFFFFFFFFFFFELL);
      if ((v107 & 1) != 0)
        v108 = *(google::protobuf::Arena **)v108;
      v109 = (operations_research::sat::CircuitConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(v108);
      *((_QWORD *)this + 6) = v109;
      if (*((_DWORD *)a2 + 15) == 15)
        v110 = (const operations_research::sat::CircuitConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v110 = (const operations_research::sat::CircuitConstraintProto *)&operations_research::sat::_CircuitConstraintProto_default_instance_;
      operations_research::sat::CircuitConstraintProto::MergeFrom(v109, v110);
      return this;
    case 16:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 16;
      v111 = *((_QWORD *)this + 1);
      v112 = (google::protobuf::Arena *)(v111 & 0xFFFFFFFFFFFFFFFELL);
      if ((v111 & 1) != 0)
        v112 = *(google::protobuf::Arena **)v112;
      v113 = (operations_research::sat::TableConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v112);
      *((_QWORD *)this + 6) = v113;
      if (*((_DWORD *)a2 + 15) == 16)
        v114 = (const operations_research::sat::TableConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v114 = (const operations_research::sat::TableConstraintProto *)&operations_research::sat::_TableConstraintProto_default_instance_;
      operations_research::sat::TableConstraintProto::MergeFrom(v113, v114);
      return this;
    case 17:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 17;
      v115 = *((_QWORD *)this + 1);
      v116 = (google::protobuf::Arena *)(v115 & 0xFFFFFFFFFFFFFFFELL);
      if ((v115 & 1) != 0)
        v116 = *(google::protobuf::Arena **)v116;
      v117 = (operations_research::sat::AutomatonConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(v116);
      *((_QWORD *)this + 6) = v117;
      if (*((_DWORD *)a2 + 15) == 17)
        v118 = (const operations_research::sat::AutomatonConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v118 = (const operations_research::sat::AutomatonConstraintProto *)&operations_research::sat::_AutomatonConstraintProto_default_instance_;
      operations_research::sat::AutomatonConstraintProto::MergeFrom(v117, v118);
      return this;
    case 18:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 18;
      v119 = *((_QWORD *)this + 1);
      v120 = (google::protobuf::Arena *)(v119 & 0xFFFFFFFFFFFFFFFELL);
      if ((v119 & 1) != 0)
        v120 = *(google::protobuf::Arena **)v120;
      v121 = (operations_research::sat::InverseConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(v120);
      *((_QWORD *)this + 6) = v121;
      if (*((_DWORD *)a2 + 15) == 18)
        v122 = (const operations_research::sat::InverseConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v122 = (const operations_research::sat::InverseConstraintProto *)&operations_research::sat::_InverseConstraintProto_default_instance_;
      operations_research::sat::InverseConstraintProto::MergeFrom(v121, v122);
      return this;
    case 19:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 19;
      v123 = *((_QWORD *)this + 1);
      v124 = (google::protobuf::Arena *)(v123 & 0xFFFFFFFFFFFFFFFELL);
      if ((v123 & 1) != 0)
        v124 = *(google::protobuf::Arena **)v124;
      v125 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v124);
      v126 = v125;
      *((_QWORD *)this + 6) = v125;
      if (*((_DWORD *)a2 + 15) == 19)
        v127 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v127 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      v128 = v127[1];
      if ((v128 & 1) != 0)
      {
        v129 = v125 + 1;
        v130 = v126[1];
        if ((v130 & 1) != 0)
          v131 = (google::protobuf::UnknownFieldSet *)((v130 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v131 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v129);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v131, (const google::protobuf::UnknownFieldSet *)((v128 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v132 = *((_DWORD *)v127 + 4);
      if (v132)
        *((_DWORD *)v126 + 4) = v132;
      v133 = *((_DWORD *)v127 + 5);
      if (v133)
        *((_DWORD *)v126 + 5) = v133;
      v134 = *((_DWORD *)v127 + 6);
      if (!v134)
        return this;
      *((_DWORD *)v126 + 6) = v134;
      return this;
    case 20:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 20;
      v135 = *((_QWORD *)this + 1);
      v136 = (google::protobuf::Arena *)(v135 & 0xFFFFFFFFFFFFFFFELL);
      if ((v135 & 1) != 0)
        v136 = *(google::protobuf::Arena **)v136;
      v137 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v136);
      v15 = v137;
      *((_QWORD *)this + 6) = v137;
      if (*((_DWORD *)a2 + 15) == 20)
        v16 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v16 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
      v138 = v16[1];
      if ((v138 & 1) != 0)
      {
        v139 = (uint64_t *)(v137 + 8);
        v140 = *(_QWORD *)(v15 + 8);
        if ((v140 & 1) != 0)
          v141 = (google::protobuf::UnknownFieldSet *)((v140 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v141 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v139);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v141, (const google::protobuf::UnknownFieldSet *)((v138 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v21 = *((_DWORD *)v16 + 4);
      if (v21)
        goto LABEL_230;
      return this;
    case 21:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 21;
      v142 = *((_QWORD *)this + 1);
      v143 = (google::protobuf::Arena *)(v142 & 0xFFFFFFFFFFFFFFFELL);
      if ((v142 & 1) != 0)
        v143 = *(google::protobuf::Arena **)v143;
      v144 = (operations_research::sat::NoOverlap2DConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(v143);
      *((_QWORD *)this + 6) = v144;
      if (*((_DWORD *)a2 + 15) == 21)
        v145 = (const operations_research::sat::NoOverlap2DConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v145 = (const operations_research::sat::NoOverlap2DConstraintProto *)&operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
      operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(v144, v145);
      return this;
    case 22:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 22;
      v146 = *((_QWORD *)this + 1);
      v147 = (google::protobuf::Arena *)(v146 & 0xFFFFFFFFFFFFFFFELL);
      if ((v146 & 1) != 0)
        v147 = *(google::protobuf::Arena **)v147;
      v148 = (operations_research::sat::CumulativeConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v147);
      *((_QWORD *)this + 6) = v148;
      if (*((_DWORD *)a2 + 15) == 22)
        v149 = (const operations_research::sat::CumulativeConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v149 = (const operations_research::sat::CumulativeConstraintProto *)&operations_research::sat::_CumulativeConstraintProto_default_instance_;
      operations_research::sat::CumulativeConstraintProto::MergeFrom(v148, v149);
      return this;
    case 23:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 23;
      v150 = *((_QWORD *)this + 1);
      v151 = (google::protobuf::Arena *)(v150 & 0xFFFFFFFFFFFFFFFELL);
      if ((v150 & 1) != 0)
        v151 = *(google::protobuf::Arena **)v151;
      v152 = (operations_research::sat::RoutesConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(v151);
      *((_QWORD *)this + 6) = v152;
      if (*((_DWORD *)a2 + 15) == 23)
        v153 = (const operations_research::sat::RoutesConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v153 = (const operations_research::sat::RoutesConstraintProto *)&operations_research::sat::_RoutesConstraintProto_default_instance_;
      operations_research::sat::RoutesConstraintProto::MergeFrom(v152, v153);
      return this;
    case 24:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 24;
      v154 = *((_QWORD *)this + 1);
      v155 = (google::protobuf::Arena *)(v154 & 0xFFFFFFFFFFFFFFFELL);
      if ((v154 & 1) != 0)
        v155 = *(google::protobuf::Arena **)v155;
      v156 = (operations_research::sat::ReservoirConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(v155);
      *((_QWORD *)this + 6) = v156;
      if (*((_DWORD *)a2 + 15) == 24)
        v157 = (const operations_research::sat::ReservoirConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v157 = (const operations_research::sat::ReservoirConstraintProto *)&operations_research::sat::_ReservoirConstraintProto_default_instance_;
      operations_research::sat::ReservoirConstraintProto::MergeFrom(v156, v157);
      return this;
    case 25:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 25;
      v158 = *((_QWORD *)this + 1);
      v159 = (google::protobuf::Arena *)(v158 & 0xFFFFFFFFFFFFFFFELL);
      if ((v158 & 1) != 0)
        v159 = *(google::protobuf::Arena **)v159;
      v160 = (operations_research::sat::CircuitCoveringConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(v159);
      *((_QWORD *)this + 6) = v160;
      if (*((_DWORD *)a2 + 15) == 25)
        v161 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)a2 + 6);
      else
        v161 = (const operations_research::sat::CircuitCoveringConstraintProto *)&operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
      operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(v160, v161);
      return this;
    case 26:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 26;
      v162 = *((_QWORD *)this + 1);
      v163 = (google::protobuf::Arena *)(v162 & 0xFFFFFFFFFFFFFFFELL);
      if ((v162 & 1) != 0)
        v163 = *(google::protobuf::Arena **)v163;
      v164 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v163);
      v15 = v164;
      *((_QWORD *)this + 6) = v164;
      if (*((_DWORD *)a2 + 15) == 26)
        v16 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      v165 = v16[1];
      if ((v165 & 1) != 0)
      {
        v166 = (uint64_t *)(v164 + 8);
        v167 = *(_QWORD *)(v15 + 8);
        if ((v167 & 1) != 0)
          v168 = (google::protobuf::UnknownFieldSet *)((v167 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v168 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v166);
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v168, (const google::protobuf::UnknownFieldSet *)((v165 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      v21 = *((_DWORD *)v16 + 4);
      if (!v21)
        return this;
LABEL_230:
      v169 = *(int *)(v15 + 16);
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v15 + 16), v169 + v21);
      v170 = *(_QWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 16) += *((_DWORD *)v16 + 4);
      memcpy((void *)(v170 + 4 * v169), (const void *)v16[3], 4 * *((int *)v16 + 4));
      return this;
    case 27:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      v171 = 27;
      goto LABEL_233;
    case 28:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      v171 = 28;
LABEL_233:
      *((_DWORD *)this + 15) = v171;
      v172 = *((_QWORD *)this + 1);
      v173 = (google::protobuf::Arena *)(v172 & 0xFFFFFFFFFFFFFFFELL);
      if ((v172 & 1) != 0)
        v173 = *(google::protobuf::Arena **)v173;
      v174 = (operations_research::sat::LinearArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v173);
      *((_QWORD *)this + 6) = v174;
      if (*((_DWORD *)a2 + 15) == v11)
        v175 = (const operations_research::sat::LinearArgumentProto *)*((_QWORD *)a2 + 6);
      else
        v175 = (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
      operations_research::sat::LinearArgumentProto::MergeFrom(v174, v175);
      return this;
    default:
      return this;
  }
}

void sub_22DA6A148(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::ConstraintProto::~ConstraintProto(operations_research::sat::ConstraintProto *this)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v8;

  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E31DF78](v2, 0x1012C40EC159624);
  }
  if (*((_DWORD *)this + 15))
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(_QWORD *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x22E31DF78](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::ConstraintProto::~ConstraintProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::ConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

void operations_research::sat::ConstraintProto::Clear(operations_research::sat::ConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 == &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_4:
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
    v3 = *((_QWORD *)this + 1);
    if ((v3 & 1) == 0)
      return;
    goto LABEL_7;
  }
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_4;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 1) == 0)
    return;
LABEL_7:
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v3 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

std::string::value_type *operations_research::sat::ConstraintProto::_InternalParse(operations_research::sat::ConstraintProto *this, std::string::value_type *__s, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  std::string::value_type *SizeFallback;
  uint64_t *v8;
  google::protobuf::internal *v9;
  std::string **v10;
  std::string::value_type *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  google::protobuf::internal *TagFallback;
  google::protobuf::Arena *v16;
  std::string *v17;
  const char *v18;
  size_t size;
  google::protobuf::internal *v20;
  uint64_t v21;
  google::protobuf::Arena *v22;
  operations_research::sat::BoolArgumentProto *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  google::protobuf::Arena *v28;
  operations_research::sat::IntegerArgumentProto *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x2_t v34;
  int v35;
  __int32 v36;
  BOOL v37;
  operations_research::sat::LinearConstraintProto *v38;
  unint64_t v39;
  operations_research::sat::AllDifferentConstraintProto *v40;
  unint64_t v41;
  operations_research::sat::ElementConstraintProto *v42;
  unint64_t v43;
  operations_research::sat::CircuitConstraintProto *v44;
  unint64_t v45;
  operations_research::sat::TableConstraintProto *v46;
  unint64_t v47;
  operations_research::sat::AutomatonConstraintProto *v48;
  unint64_t v49;
  operations_research::sat::InverseConstraintProto *v50;
  unint64_t v51;
  operations_research::sat::IntervalConstraintProto *v52;
  unint64_t v53;
  operations_research::sat::NoOverlapConstraintProto *v54;
  unint64_t v55;
  operations_research::sat::NoOverlap2DConstraintProto *v56;
  unint64_t v57;
  operations_research::sat::CumulativeConstraintProto *v58;
  unint64_t v59;
  operations_research::sat::RoutesConstraintProto *v60;
  unint64_t v61;
  operations_research::sat::ReservoirConstraintProto *v62;
  unint64_t v63;
  operations_research::sat::CircuitCoveringConstraintProto *v64;
  unint64_t v65;
  int32x2_t v66;
  uint64_t v67;
  google::protobuf::Arena *v68;
  operations_research::sat::LinearArgumentProto *v69;
  unint64_t v70;
  int32x2_t v71;
  uint64_t v72;
  uint64_t v73;
  google::protobuf::Arena *v74;
  int32x2_t v75;
  uint64_t v76;
  google::protobuf::Arena *v77;
  int32x2_t v78;
  uint64_t v79;
  google::protobuf::Arena *v80;
  int32x2_t v81;
  uint64_t v82;
  google::protobuf::Arena *v83;
  int32x2_t v84;
  uint64_t v85;
  google::protobuf::Arena *v86;
  int32x2_t v87;
  uint64_t v88;
  google::protobuf::Arena *v89;
  int32x2_t v90;
  uint64_t v91;
  google::protobuf::Arena *v92;
  int32x2_t v93;
  uint64_t v94;
  google::protobuf::Arena *v95;
  int32x2_t v96;
  uint64_t v97;
  google::protobuf::Arena *v98;
  int32x2_t v99;
  uint64_t v100;
  google::protobuf::Arena *v101;
  int32x2_t v102;
  uint64_t v103;
  google::protobuf::Arena *v104;
  int32x2_t v105;
  uint64_t v106;
  google::protobuf::Arena *v107;
  int32x2_t v108;
  uint64_t v109;
  google::protobuf::Arena *v110;
  int32x2_t v111;
  uint64_t v112;
  google::protobuf::Arena *v113;
  int32x2_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  std::string *v119;
  BOOL v120;
  int v121;
  uint64_t v122;
  BOOL v123;
  google::protobuf::UnknownFieldSet *v124;
  google::protobuf::internal *v126;

  SizeFallback = __s;
  v126 = (google::protobuf::internal *)__s;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::ConstraintProto *)((char *)this + 16);
  v10 = (std::string **)((char *)this + 40);
  while (2)
  {
    if ((unint64_t)SizeFallback >= *(_QWORD *)a3)
    {
      if (&SizeFallback[-*(_QWORD *)&a3[1]] == (std::string::value_type *)a3[3].i32[1])
        return SizeFallback;
      SizeFallback = (std::string::value_type *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, SizeFallback, a3[11].i32[1]);
      v126 = (google::protobuf::internal *)SizeFallback;
      if ((__s & 1) != 0)
        return SizeFallback;
    }
    v11 = SizeFallback + 1;
    v12 = *SizeFallback;
    if (*SizeFallback < 0)
    {
      v14 = v12 + (*v11 << 7);
      v12 = v14 - 128;
      if (*v11 < 0)
      {
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)SizeFallback, (const char *)(v14 - 128));
        v126 = TagFallback;
        if (!TagFallback)
          return 0;
        v11 = (std::string::value_type *)TagFallback;
        v12 = __s;
        v13 = (__s >> 3) - 1;
      }
      else
      {
        v11 = SizeFallback + 2;
        v126 = (google::protobuf::internal *)(SizeFallback + 2);
        v13 = (v12 >> 3) - 1;
        if (v13 > 0x1B)
          goto LABEL_272;
      }
    }
    else
    {
      v126 = (google::protobuf::internal *)(SizeFallback + 1);
      v13 = (v12 >> 3) - 1;
      if (v13 > 0x1B)
        goto LABEL_272;
    }
    switch(v13)
    {
      case 0u:
        if (v12 != 10)
          goto LABEL_272;
        v16 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v8 & 1) == 0)
        {
          v17 = *v10;
          if (*v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_16;
LABEL_15:
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v10, v16, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v10;
          v11 = (std::string::value_type *)v126;
          goto LABEL_16;
        }
        v16 = *(google::protobuf::Arena **)v16;
        v17 = *v10;
        if (*v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_15;
LABEL_16:
        v126 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v17, v11, (uint64_t)a3);
        if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
        {
          v119 = (std::string *)v17->__r_.__value_.__r.__words[0];
          size = v17->__r_.__value_.__l.__size_;
          if ((size & 0x8000000000000000) != 0)
            google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v17->__r_.__value_.__l.__size_, "size_t to int conversion", v18);
          v17 = v119;
        }
        else
        {
          size = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        }
        v120 = google::protobuf::internal::VerifyUTF8(v17, size, (google::protobuf::internal *)"operations_research.sat.ConstraintProto.name");
        SizeFallback = (std::string::value_type *)v126;
        if (v126)
          v116 = 2;
        else
          v116 = 4;
        if (v120)
          goto LABEL_248;
        return 0;
      case 1u:
        if (v12 == 18)
        {
          v20 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v11, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
          goto LABEL_279;
        }
        if (v12 == 16)
        {
          v121 = google::protobuf::internal::ReadVarint64(&v126, (const char **)__s);
          v122 = *((unsigned int *)this + 4);
          if ((_DWORD)v122 == *((_DWORD *)this + 5))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v122 + 1);
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v122) = v121;
          *((_DWORD *)this + 4) = v122 + 1;
          SizeFallback = (std::string::value_type *)v126;
          if (!v126)
            return SizeFallback;
LABEL_247:
          v116 = 2;
LABEL_248:
          if (v116 != 2)
            return 0;
          continue;
        }
LABEL_272:
        if (v12)
          v123 = (v12 & 7) == 4;
        else
          v123 = 1;
        if (!v123)
        {
          if ((*v8 & 1) != 0)
          {
            v124 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v124 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
            v11 = (std::string::value_type *)v126;
          }
          v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v124, (google::protobuf::UnknownFieldSet *)v11, a3, a5);
LABEL_279:
          SizeFallback = (std::string::value_type *)v20;
          v126 = v20;
          if (!v20)
            return SizeFallback;
          goto LABEL_247;
        }
        a3[10].i32[0] = v12 - 1;
        return v11;
      case 2u:
        if (v12 != 26)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 3)
          goto LABEL_129;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 3;
        v21 = *((_QWORD *)this + 1);
        v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) == 0)
          goto LABEL_23;
        goto LABEL_28;
      case 3u:
        if (v12 != 34)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 4)
          goto LABEL_129;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 4;
        v25 = *((_QWORD *)this + 1);
        v22 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
        if ((v25 & 1) != 0)
          goto LABEL_28;
        goto LABEL_23;
      case 4u:
        if (v12 != 42)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 5)
          goto LABEL_129;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 5;
        v26 = *((_QWORD *)this + 1);
        v22 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
        if ((v26 & 1) != 0)
          goto LABEL_28;
        goto LABEL_23;
      case 6u:
        if (v12 != 58)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 7)
          goto LABEL_52;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 7;
        v27 = *((_QWORD *)this + 1);
        v28 = (google::protobuf::Arena *)(v27 & 0xFFFFFFFFFFFFFFFELL);
        if ((v27 & 1) == 0)
          goto LABEL_36;
        goto LABEL_41;
      case 7u:
        if (v12 != 66)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 8)
          goto LABEL_52;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 8;
        v31 = *((_QWORD *)this + 1);
        v28 = (google::protobuf::Arena *)(v31 & 0xFFFFFFFFFFFFFFFELL);
        if ((v31 & 1) != 0)
          goto LABEL_41;
        goto LABEL_36;
      case 8u:
        if (v12 != 74)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 9)
          goto LABEL_52;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 9;
        v32 = *((_QWORD *)this + 1);
        v28 = (google::protobuf::Arena *)(v32 & 0xFFFFFFFFFFFFFFFELL);
        if ((v32 & 1) != 0)
          goto LABEL_41;
        goto LABEL_36;
      case 9u:
        if (v12 != 82)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 10)
          goto LABEL_52;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 10;
        v33 = *((_QWORD *)this + 1);
        v28 = (google::protobuf::Arena *)(v33 & 0xFFFFFFFFFFFFFFFELL);
        if ((v33 & 1) != 0)
          goto LABEL_41;
        goto LABEL_36;
      case 0xAu:
        if (v12 != 90)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 11)
        {
LABEL_52:
          v29 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
          v30 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_37;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 11;
          v72 = *((_QWORD *)this + 1);
          v28 = (google::protobuf::Arena *)(v72 & 0xFFFFFFFFFFFFFFFELL);
          if ((v72 & 1) != 0)
LABEL_41:
            v28 = *(google::protobuf::Arena **)v28;
LABEL_36:
          v29 = (operations_research::sat::IntegerArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v28);
          *((_QWORD *)this + 6) = v29;
          v11 = (std::string::value_type *)v126;
          v30 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_37:
            SizeFallback = v11 + 1;
            goto LABEL_54;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v30);
        if (!SizeFallback)
          return SizeFallback;
LABEL_54:
        v34 = a3[1];
        v35 = v30 + (_DWORD)SizeFallback - v34.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v34 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v34.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v34.i32[0]--, 1);
        a3[11].i32[0] = v34.i32[0];
        if (v34.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::IntegerArgumentProto::_InternalParse(v29, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0xBu:
        if (v12 != 98)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 12)
        {
          v38 = (operations_research::sat::LinearConstraintProto *)*((_QWORD *)this + 6);
          v39 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_151;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 12;
          v73 = *((_QWORD *)this + 1);
          v74 = (google::protobuf::Arena *)(v73 & 0xFFFFFFFFFFFFFFFELL);
          if ((v73 & 1) != 0)
            v74 = *(google::protobuf::Arena **)v74;
          v38 = (operations_research::sat::LinearConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v74);
          *((_QWORD *)this + 6) = v38;
          v11 = (std::string::value_type *)v126;
          v39 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_151:
            SizeFallback = v11 + 1;
            goto LABEL_152;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v39);
        if (!SizeFallback)
          return SizeFallback;
LABEL_152:
        v75 = a3[1];
        v35 = v39 + (_DWORD)SizeFallback - v75.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v75 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v75.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v75.i32[0]--, 1);
        a3[11].i32[0] = v75.i32[0];
        if (v75.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::LinearConstraintProto::_InternalParse(v38, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0xCu:
        if (v12 != 106)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 13)
        {
          v40 = (operations_research::sat::AllDifferentConstraintProto *)*((_QWORD *)this + 6);
          v41 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_158;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 13;
          v76 = *((_QWORD *)this + 1);
          v77 = (google::protobuf::Arena *)(v76 & 0xFFFFFFFFFFFFFFFELL);
          if ((v76 & 1) != 0)
            v77 = *(google::protobuf::Arena **)v77;
          v40 = (operations_research::sat::AllDifferentConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(v77);
          *((_QWORD *)this + 6) = v40;
          v11 = (std::string::value_type *)v126;
          v41 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_158:
            SizeFallback = v11 + 1;
            goto LABEL_159;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v41);
        if (!SizeFallback)
          return SizeFallback;
LABEL_159:
        v78 = a3[1];
        v35 = v41 + (_DWORD)SizeFallback - v78.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v78 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v78.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v78.i32[0]--, 1);
        a3[11].i32[0] = v78.i32[0];
        if (v78.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::AllDifferentConstraintProto::_InternalParse(v40, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0xDu:
        if (v12 != 114)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 14)
        {
          v42 = (operations_research::sat::ElementConstraintProto *)*((_QWORD *)this + 6);
          v43 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_165;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 14;
          v79 = *((_QWORD *)this + 1);
          v80 = (google::protobuf::Arena *)(v79 & 0xFFFFFFFFFFFFFFFELL);
          if ((v79 & 1) != 0)
            v80 = *(google::protobuf::Arena **)v80;
          v42 = (operations_research::sat::ElementConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v80);
          *((_QWORD *)this + 6) = v42;
          v11 = (std::string::value_type *)v126;
          v43 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_165:
            SizeFallback = v11 + 1;
            goto LABEL_166;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v43);
        if (!SizeFallback)
          return SizeFallback;
LABEL_166:
        v81 = a3[1];
        v35 = v43 + (_DWORD)SizeFallback - v81.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v81 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v81.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v81.i32[0]--, 1);
        a3[11].i32[0] = v81.i32[0];
        if (v81.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::ElementConstraintProto::_InternalParse(v42, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0xEu:
        if (v12 != 122)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 15)
        {
          v44 = (operations_research::sat::CircuitConstraintProto *)*((_QWORD *)this + 6);
          v45 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_172;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 15;
          v82 = *((_QWORD *)this + 1);
          v83 = (google::protobuf::Arena *)(v82 & 0xFFFFFFFFFFFFFFFELL);
          if ((v82 & 1) != 0)
            v83 = *(google::protobuf::Arena **)v83;
          v44 = (operations_research::sat::CircuitConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(v83);
          *((_QWORD *)this + 6) = v44;
          v11 = (std::string::value_type *)v126;
          v45 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_172:
            SizeFallback = v11 + 1;
            goto LABEL_173;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v45);
        if (!SizeFallback)
          return SizeFallback;
LABEL_173:
        v84 = a3[1];
        v35 = v45 + (_DWORD)SizeFallback - v84.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v84 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v84.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v84.i32[0]--, 1);
        a3[11].i32[0] = v84.i32[0];
        if (v84.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::CircuitConstraintProto::_InternalParse(v44, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0xFu:
        if (v12 != 130)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 16)
        {
          v46 = (operations_research::sat::TableConstraintProto *)*((_QWORD *)this + 6);
          v47 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_179;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 16;
          v85 = *((_QWORD *)this + 1);
          v86 = (google::protobuf::Arena *)(v85 & 0xFFFFFFFFFFFFFFFELL);
          if ((v85 & 1) != 0)
            v86 = *(google::protobuf::Arena **)v86;
          v46 = (operations_research::sat::TableConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v86);
          *((_QWORD *)this + 6) = v46;
          v11 = (std::string::value_type *)v126;
          v47 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_179:
            SizeFallback = v11 + 1;
            goto LABEL_180;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v47);
        if (!SizeFallback)
          return SizeFallback;
LABEL_180:
        v87 = a3[1];
        v35 = v47 + (_DWORD)SizeFallback - v87.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v87 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v87.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v87.i32[0]--, 1);
        a3[11].i32[0] = v87.i32[0];
        if (v87.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::TableConstraintProto::_InternalParse(v46, (google::protobuf::internal *)SizeFallback, (google::protobuf::internal::ParseContext *)a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x10u:
        if (v12 != 138)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 17)
        {
          v48 = (operations_research::sat::AutomatonConstraintProto *)*((_QWORD *)this + 6);
          v49 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_186;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 17;
          v88 = *((_QWORD *)this + 1);
          v89 = (google::protobuf::Arena *)(v88 & 0xFFFFFFFFFFFFFFFELL);
          if ((v88 & 1) != 0)
            v89 = *(google::protobuf::Arena **)v89;
          v48 = (operations_research::sat::AutomatonConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(v89);
          *((_QWORD *)this + 6) = v48;
          v11 = (std::string::value_type *)v126;
          v49 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_186:
            SizeFallback = v11 + 1;
            goto LABEL_187;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v49);
        if (!SizeFallback)
          return SizeFallback;
LABEL_187:
        v90 = a3[1];
        v35 = v49 + (_DWORD)SizeFallback - v90.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v90 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v90.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v90.i32[0]--, 1);
        a3[11].i32[0] = v90.i32[0];
        if (v90.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::AutomatonConstraintProto::_InternalParse(v48, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x11u:
        if (v12 != 146)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 18)
        {
          v50 = (operations_research::sat::InverseConstraintProto *)*((_QWORD *)this + 6);
          v51 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_193;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 18;
          v91 = *((_QWORD *)this + 1);
          v92 = (google::protobuf::Arena *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          if ((v91 & 1) != 0)
            v92 = *(google::protobuf::Arena **)v92;
          v50 = (operations_research::sat::InverseConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(v92);
          *((_QWORD *)this + 6) = v50;
          v11 = (std::string::value_type *)v126;
          v51 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_193:
            SizeFallback = v11 + 1;
            goto LABEL_194;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v51);
        if (!SizeFallback)
          return SizeFallback;
LABEL_194:
        v93 = a3[1];
        v35 = v51 + (_DWORD)SizeFallback - v93.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v93 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v93.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v93.i32[0]--, 1);
        a3[11].i32[0] = v93.i32[0];
        if (v93.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::InverseConstraintProto::_InternalParse(v50, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x12u:
        if (v12 != 154)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 19)
        {
          v52 = (operations_research::sat::IntervalConstraintProto *)*((_QWORD *)this + 6);
          v53 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_200;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 19;
          v94 = *((_QWORD *)this + 1);
          v95 = (google::protobuf::Arena *)(v94 & 0xFFFFFFFFFFFFFFFELL);
          if ((v94 & 1) != 0)
            v95 = *(google::protobuf::Arena **)v95;
          v52 = (operations_research::sat::IntervalConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v95);
          *((_QWORD *)this + 6) = v52;
          v11 = (std::string::value_type *)v126;
          v53 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_200:
            SizeFallback = v11 + 1;
            goto LABEL_201;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v53);
        if (!SizeFallback)
          return SizeFallback;
LABEL_201:
        v96 = a3[1];
        v35 = v53 + (_DWORD)SizeFallback - v96.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v96 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v96.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v96.i32[0]--, 1);
        a3[11].i32[0] = v96.i32[0];
        if (v96.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::IntervalConstraintProto::_InternalParse(v52, (google::protobuf::UnknownFieldSet *)SizeFallback, a3, (uint64_t)a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x13u:
        if (v12 != 162)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 20)
        {
          v54 = (operations_research::sat::NoOverlapConstraintProto *)*((_QWORD *)this + 6);
          v55 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_207;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 20;
          v97 = *((_QWORD *)this + 1);
          v98 = (google::protobuf::Arena *)(v97 & 0xFFFFFFFFFFFFFFFELL);
          if ((v97 & 1) != 0)
            v98 = *(google::protobuf::Arena **)v98;
          v54 = (operations_research::sat::NoOverlapConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v98);
          *((_QWORD *)this + 6) = v54;
          v11 = (std::string::value_type *)v126;
          v55 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_207:
            SizeFallback = v11 + 1;
            goto LABEL_208;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v55);
        if (!SizeFallback)
          return SizeFallback;
LABEL_208:
        v99 = a3[1];
        v35 = v55 + (_DWORD)SizeFallback - v99.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v99 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v99.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v99.i32[0]--, 1);
        a3[11].i32[0] = v99.i32[0];
        if (v99.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::NoOverlapConstraintProto::_InternalParse(v54, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x14u:
        if (v12 != 170)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 21)
        {
          v56 = (operations_research::sat::NoOverlap2DConstraintProto *)*((_QWORD *)this + 6);
          v57 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_214;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 21;
          v100 = *((_QWORD *)this + 1);
          v101 = (google::protobuf::Arena *)(v100 & 0xFFFFFFFFFFFFFFFELL);
          if ((v100 & 1) != 0)
            v101 = *(google::protobuf::Arena **)v101;
          v56 = (operations_research::sat::NoOverlap2DConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(v101);
          *((_QWORD *)this + 6) = v56;
          v11 = (std::string::value_type *)v126;
          v57 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_214:
            SizeFallback = v11 + 1;
            goto LABEL_215;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v57);
        if (!SizeFallback)
          return SizeFallback;
LABEL_215:
        v102 = a3[1];
        v35 = v57 + (_DWORD)SizeFallback - v102.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v102 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v102.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v102.i32[0]--, 1);
        a3[11].i32[0] = v102.i32[0];
        if (v102.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::NoOverlap2DConstraintProto::_InternalParse(v56, (google::protobuf::internal *)SizeFallback, (google::protobuf::internal::ParseContext *)a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x15u:
        if (v12 != 178)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 22)
        {
          v58 = (operations_research::sat::CumulativeConstraintProto *)*((_QWORD *)this + 6);
          v59 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_221;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 22;
          v103 = *((_QWORD *)this + 1);
          v104 = (google::protobuf::Arena *)(v103 & 0xFFFFFFFFFFFFFFFELL);
          if ((v103 & 1) != 0)
            v104 = *(google::protobuf::Arena **)v104;
          v58 = (operations_research::sat::CumulativeConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v104);
          *((_QWORD *)this + 6) = v58;
          v11 = (std::string::value_type *)v126;
          v59 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_221:
            SizeFallback = v11 + 1;
            goto LABEL_222;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v59);
        if (!SizeFallback)
          return SizeFallback;
LABEL_222:
        v105 = a3[1];
        v35 = v59 + (_DWORD)SizeFallback - v105.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v105 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v105.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v105.i32[0]--, 1);
        a3[11].i32[0] = v105.i32[0];
        if (v105.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::CumulativeConstraintProto::_InternalParse(v58, (google::protobuf::internal *)SizeFallback, (google::protobuf::internal::ParseContext *)a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x16u:
        if (v12 != 186)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 23)
        {
          v60 = (operations_research::sat::RoutesConstraintProto *)*((_QWORD *)this + 6);
          v61 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_228;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 23;
          v106 = *((_QWORD *)this + 1);
          v107 = (google::protobuf::Arena *)(v106 & 0xFFFFFFFFFFFFFFFELL);
          if ((v106 & 1) != 0)
            v107 = *(google::protobuf::Arena **)v107;
          v60 = (operations_research::sat::RoutesConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(v107);
          *((_QWORD *)this + 6) = v60;
          v11 = (std::string::value_type *)v126;
          v61 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_228:
            SizeFallback = v11 + 1;
            goto LABEL_229;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v61);
        if (!SizeFallback)
          return SizeFallback;
LABEL_229:
        v108 = a3[1];
        v35 = v61 + (_DWORD)SizeFallback - v108.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v108 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v108.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v108.i32[0]--, 1);
        a3[11].i32[0] = v108.i32[0];
        if (v108.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::RoutesConstraintProto::_InternalParse(v60, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x17u:
        if (v12 != 194)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 24)
        {
          v62 = (operations_research::sat::ReservoirConstraintProto *)*((_QWORD *)this + 6);
          v63 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_235;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 24;
          v109 = *((_QWORD *)this + 1);
          v110 = (google::protobuf::Arena *)(v109 & 0xFFFFFFFFFFFFFFFELL);
          if ((v109 & 1) != 0)
            v110 = *(google::protobuf::Arena **)v110;
          v62 = (operations_research::sat::ReservoirConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(v110);
          *((_QWORD *)this + 6) = v62;
          v11 = (std::string::value_type *)v126;
          v63 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_235:
            SizeFallback = v11 + 1;
            goto LABEL_236;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v63);
        if (!SizeFallback)
          return SizeFallback;
LABEL_236:
        v111 = a3[1];
        v35 = v63 + (_DWORD)SizeFallback - v111.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v111 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v111.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v111.i32[0]--, 1);
        a3[11].i32[0] = v111.i32[0];
        if (v111.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::ReservoirConstraintProto::_InternalParse(v62, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x18u:
        if (v12 != 202)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 25)
        {
          v64 = (operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)this + 6);
          v65 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_242;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 25;
          v112 = *((_QWORD *)this + 1);
          v113 = (google::protobuf::Arena *)(v112 & 0xFFFFFFFFFFFFFFFELL);
          if ((v112 & 1) != 0)
            v113 = *(google::protobuf::Arena **)v113;
          v64 = (operations_research::sat::CircuitCoveringConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(v113);
          *((_QWORD *)this + 6) = v64;
          v11 = (std::string::value_type *)v126;
          v65 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_242:
            SizeFallback = v11 + 1;
            goto LABEL_243;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v65);
        if (!SizeFallback)
          return SizeFallback;
LABEL_243:
        v114 = a3[1];
        v35 = v65 + (_DWORD)SizeFallback - v114.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v114 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v114.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v114.i32[0]--, 1);
        a3[11].i32[0] = v114.i32[0];
        if (v114.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::CircuitCoveringConstraintProto::_InternalParse(v64, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (SizeFallback)
          goto LABEL_245;
        return SizeFallback;
      case 0x19u:
        if (v12 != 210)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 26)
        {
LABEL_129:
          v23 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
          v24 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_24;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 26;
          v117 = *((_QWORD *)this + 1);
          v22 = (google::protobuf::Arena *)(v117 & 0xFFFFFFFFFFFFFFFELL);
          if ((v117 & 1) != 0)
LABEL_28:
            v22 = *(google::protobuf::Arena **)v22;
LABEL_23:
          v23 = (operations_research::sat::BoolArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v22);
          *((_QWORD *)this + 6) = v23;
          v11 = (std::string::value_type *)v126;
          v24 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_24:
            SizeFallback = v11 + 1;
            goto LABEL_131;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v24);
        if (!SizeFallback)
          return SizeFallback;
LABEL_131:
        v66 = a3[1];
        v35 = v24 + (_DWORD)SizeFallback - v66.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v66 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v66.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v66.i32[0]--, 1);
        a3[11].i32[0] = v66.i32[0];
        if (v66.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::BoolArgumentProto::_InternalParse(v23, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
        goto LABEL_245;
      case 0x1Au:
        if (v12 != 218)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 27)
          goto LABEL_141;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 27;
        v67 = *((_QWORD *)this + 1);
        v68 = (google::protobuf::Arena *)(v67 & 0xFFFFFFFFFFFFFFFELL);
        if ((v67 & 1) == 0)
          goto LABEL_137;
        goto LABEL_253;
      case 0x1Bu:
        if (v12 != 226)
          goto LABEL_272;
        if (*((_DWORD *)this + 15) == 28)
        {
LABEL_141:
          v69 = (operations_research::sat::LinearArgumentProto *)*((_QWORD *)this + 6);
          v70 = *v11;
          if ((*v11 & 0x80000000) == 0)
            goto LABEL_138;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 28;
          v118 = *((_QWORD *)this + 1);
          v68 = (google::protobuf::Arena *)(v118 & 0xFFFFFFFFFFFFFFFELL);
          if ((v118 & 1) != 0)
LABEL_253:
            v68 = *(google::protobuf::Arena **)v68;
LABEL_137:
          v69 = (operations_research::sat::LinearArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v68);
          *((_QWORD *)this + 6) = v69;
          v11 = (std::string::value_type *)v126;
          v70 = *(unsigned __int8 *)v126;
          if ((*(char *)v126 & 0x80000000) == 0)
          {
LABEL_138:
            SizeFallback = v11 + 1;
            goto LABEL_143;
          }
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v70);
        if (!SizeFallback)
          return SizeFallback;
LABEL_143:
        v71 = a3[1];
        v35 = v70 + (_DWORD)SizeFallback - v71.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v71 + (v35 & (v35 >> 31)));
        v36 = a3[3].i32[1];
        a3[3].i32[1] = v35;
        v71.i32[0] = a3[11].i32[0];
        v37 = __OFSUB__(v71.i32[0]--, 1);
        a3[11].i32[0] = v71.i32[0];
        if (v71.i32[0] < 0 != v37)
          return 0;
        SizeFallback = (std::string::value_type *)operations_research::sat::LinearArgumentProto::_InternalParse(v69, (google::protobuf::UnknownFieldSet *)SizeFallback, a3, a4, a5);
        if (!SizeFallback)
          return SizeFallback;
LABEL_245:
        ++a3[11].i32[0];
        if (a3[10].i32[0])
          return 0;
        v115 = a3[3].i32[1] + v36 - v35;
        a3[3].i32[1] = v115;
        *a3 = (int32x2_t)(*(_QWORD *)&a3[1] + (v115 & (v115 >> 31)));
        v126 = (google::protobuf::internal *)SizeFallback;
        goto LABEL_247;
      default:
        goto LABEL_272;
    }
  }
}

google::protobuf::UnknownFieldSet *operations_research::sat::ConstraintProto::_InternalSerialize(operations_research::sat::ConstraintProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t *v7;
  const char *v8;
  uint64_t v9;
  int64_t v10;
  const void *v11;
  int v12;
  _BYTE *v13;
  int *v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  operations_research::sat::BoolArgumentProto *v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  operations_research::sat::BoolArgumentProto *v32;
  unsigned int v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  operations_research::sat::BoolArgumentProto *v38;
  unsigned int v39;
  char *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  operations_research::sat::IntegerArgumentProto *v44;
  unsigned int v45;
  char *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  operations_research::sat::IntegerArgumentProto *v50;
  unsigned int v51;
  char *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  operations_research::sat::IntegerArgumentProto *v56;
  unsigned int v57;
  char *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  operations_research::sat::IntegerArgumentProto *v62;
  unsigned int v63;
  char *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  operations_research::sat::IntegerArgumentProto *v68;
  unsigned int v69;
  char *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  operations_research::sat::LinearConstraintProto *v74;
  unsigned int v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  operations_research::sat::AllDifferentConstraintProto *v80;
  unsigned int v81;
  char *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  operations_research::sat::ElementConstraintProto *v86;
  unsigned int v87;
  char *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  operations_research::sat::CircuitConstraintProto *v92;
  unsigned int v93;
  char *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  operations_research::sat::TableConstraintProto *v98;
  unsigned int v99;
  char *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  operations_research::sat::AutomatonConstraintProto *v104;
  unsigned int v105;
  char *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  operations_research::sat::InverseConstraintProto *v110;
  unsigned int v111;
  char *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  operations_research::sat::IntervalConstraintProto *v116;
  unsigned int v117;
  char *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  operations_research::sat::NoOverlapConstraintProto *v122;
  unsigned int v123;
  char *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  operations_research::sat::NoOverlap2DConstraintProto *v128;
  unsigned int v129;
  char *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  operations_research::sat::CumulativeConstraintProto *v134;
  unsigned int v135;
  char *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  operations_research::sat::RoutesConstraintProto *v140;
  unsigned int v141;
  char *v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  operations_research::sat::ReservoirConstraintProto *v146;
  unsigned int v147;
  char *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  operations_research::sat::CircuitCoveringConstraintProto *v152;
  unsigned int v153;
  char *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  operations_research::sat::BoolArgumentProto *v158;
  unsigned int v159;
  char *v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  operations_research::sat::LinearArgumentProto *v164;
  unsigned int v165;
  char *v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  operations_research::sat::LinearArgumentProto *v170;
  unsigned int v171;
  unsigned int v172;
  char *v173;
  unsigned int v174;
  unsigned int v175;

  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)v7[1];
    if (!v8)
      goto LABEL_14;
    v7 = (uint64_t *)*v7;
  }
  else
  {
    v8 = (const char *)*((unsigned __int8 *)v7 + 23);
    if (!*((_BYTE *)v7 + 23))
      goto LABEL_14;
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v7, v8, 1, (google::protobuf::internal *)"operations_research.sat.ConstraintProto.name");
  v9 = *((_QWORD *)this + 5);
  if (*(char *)(v9 + 23) < 0)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10 > 127)
      goto LABEL_29;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v10)
  {
    *(_BYTE *)a2 = 10;
    *((_BYTE *)a2 + 1) = v10;
    if (*(char *)(v9 + 23) >= 0)
      v11 = (const void *)v9;
    else
      v11 = *(const void **)v9;
    memcpy((char *)a2 + 2, v11, v10);
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v10 + 2);
LABEL_14:
    v12 = *((_DWORD *)this + 8);
    if (v12 >= 1)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v9, (char *)a2);
  v12 = *((_DWORD *)this + 8);
  if (v12 >= 1)
  {
LABEL_15:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      *(_BYTE *)a2 = 18;
      v13 = (char *)a2 + 1;
      if (v12 < 0x80)
        goto LABEL_17;
    }
    else
    {
      *(_BYTE *)a2 = 18;
      v13 = (char *)a2 + 1;
      if (v12 < 0x80)
      {
LABEL_17:
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        *v13 = v12;
        v14 = (int *)*((_QWORD *)this + 3);
        v15 = &v14[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
            v21 = *v14++;
            v16 = v21;
            if (v21 > 0x7F)
            {
LABEL_22:
              *(_BYTE *)a2 = v16 | 0x80;
              v18 = v16 >> 7;
              if (v16 >> 14)
              {
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
                do
                {
                  *((_BYTE *)a2 - 1) = v18 | 0x80;
                  v19 = v18 >> 7;
                  a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
                  v20 = v18 >> 14;
                  v18 >>= 7;
                }
                while (v20);
                *((_BYTE *)a2 - 1) = v19;
              }
              else
              {
                *((_BYTE *)a2 + 1) = v18;
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
              }
              goto LABEL_19;
            }
          }
          else
          {
            v17 = *v14++;
            v16 = v17;
            if (v17 > 0x7F)
              goto LABEL_22;
          }
          *(_BYTE *)a2 = v16;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
LABEL_19:
          if (v14 >= v15)
            goto LABEL_30;
        }
      }
    }
    do
    {
      *v13++ = v12 | 0x80;
      v28 = v12 >> 14;
      v12 = v12 >> 7;
    }
    while (v28);
    a2 = (google::protobuf::UnknownFieldSet *)(v13 - 1);
    goto LABEL_17;
  }
LABEL_30:
  v22 = *((_DWORD *)this + 15);
  if (v22 != 3)
  {
    if (v22 != 4)
      goto LABEL_32;
    goto LABEL_70;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v25 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 26;
    v26 = *((_DWORD *)v25 + 9);
    if (v26 <= 0x7F)
      goto LABEL_59;
  }
  else
  {
    v25 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 26;
    v26 = *((_DWORD *)v25 + 9);
    if (v26 <= 0x7F)
    {
LABEL_59:
      *((_BYTE *)a2 + 1) = v26;
      v27 = (char *)a2 + 2;
      goto LABEL_69;
    }
  }
  *((_BYTE *)a2 + 1) = v26 | 0x80;
  v29 = v26 >> 7;
  if (v26 >> 14)
  {
    v27 = (char *)a2 + 3;
    do
    {
      *(v27 - 1) = v29 | 0x80;
      v30 = v29 >> 7;
      ++v27;
      v31 = v29 >> 14;
      v29 >>= 7;
    }
    while (v31);
    *(v27 - 1) = v30;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v29;
    v27 = (char *)a2 + 3;
  }
LABEL_69:
  a2 = operations_research::sat::BoolArgumentProto::_InternalSerialize(v25, v27, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 4)
  {
LABEL_32:
    if (v22 != 5)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_70:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v32 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 34;
    v33 = *((_DWORD *)v32 + 9);
    if (v33 <= 0x7F)
      goto LABEL_72;
  }
  else
  {
    v32 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 34;
    v33 = *((_DWORD *)v32 + 9);
    if (v33 <= 0x7F)
    {
LABEL_72:
      *((_BYTE *)a2 + 1) = v33;
      v34 = (char *)a2 + 2;
      goto LABEL_79;
    }
  }
  *((_BYTE *)a2 + 1) = v33 | 0x80;
  v35 = v33 >> 7;
  if (v33 >> 14)
  {
    v34 = (char *)a2 + 3;
    do
    {
      *(v34 - 1) = v35 | 0x80;
      v36 = v35 >> 7;
      ++v34;
      v37 = v35 >> 14;
      v35 >>= 7;
    }
    while (v37);
    *(v34 - 1) = v36;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v35;
    v34 = (char *)a2 + 3;
  }
LABEL_79:
  a2 = operations_research::sat::BoolArgumentProto::_InternalSerialize(v32, v34, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 5)
  {
LABEL_33:
    if (v22 != 7)
      goto LABEL_34;
    goto LABEL_90;
  }
LABEL_80:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v38 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 42;
    v39 = *((_DWORD *)v38 + 9);
    if (v39 <= 0x7F)
      goto LABEL_82;
  }
  else
  {
    v38 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 42;
    v39 = *((_DWORD *)v38 + 9);
    if (v39 <= 0x7F)
    {
LABEL_82:
      *((_BYTE *)a2 + 1) = v39;
      v40 = (char *)a2 + 2;
      goto LABEL_89;
    }
  }
  *((_BYTE *)a2 + 1) = v39 | 0x80;
  v41 = v39 >> 7;
  if (v39 >> 14)
  {
    v40 = (char *)a2 + 3;
    do
    {
      *(v40 - 1) = v41 | 0x80;
      v42 = v41 >> 7;
      ++v40;
      v43 = v41 >> 14;
      v41 >>= 7;
    }
    while (v43);
    *(v40 - 1) = v42;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v41;
    v40 = (char *)a2 + 3;
  }
LABEL_89:
  a2 = operations_research::sat::BoolArgumentProto::_InternalSerialize(v38, v40, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 7)
  {
LABEL_34:
    if (v22 != 8)
      goto LABEL_35;
    goto LABEL_100;
  }
LABEL_90:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v44 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 58;
    v45 = *((_DWORD *)v44 + 10);
    if (v45 <= 0x7F)
      goto LABEL_92;
  }
  else
  {
    v44 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 58;
    v45 = *((_DWORD *)v44 + 10);
    if (v45 <= 0x7F)
    {
LABEL_92:
      *((_BYTE *)a2 + 1) = v45;
      v46 = (char *)a2 + 2;
      goto LABEL_99;
    }
  }
  *((_BYTE *)a2 + 1) = v45 | 0x80;
  v47 = v45 >> 7;
  if (v45 >> 14)
  {
    v46 = (char *)a2 + 3;
    do
    {
      *(v46 - 1) = v47 | 0x80;
      v48 = v47 >> 7;
      ++v46;
      v49 = v47 >> 14;
      v47 >>= 7;
    }
    while (v49);
    *(v46 - 1) = v48;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v47;
    v46 = (char *)a2 + 3;
  }
LABEL_99:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v44, v46, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 8)
  {
LABEL_35:
    if (v22 != 9)
      goto LABEL_36;
    goto LABEL_110;
  }
LABEL_100:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v50 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 66;
    v51 = *((_DWORD *)v50 + 10);
    if (v51 <= 0x7F)
      goto LABEL_102;
  }
  else
  {
    v50 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 66;
    v51 = *((_DWORD *)v50 + 10);
    if (v51 <= 0x7F)
    {
LABEL_102:
      *((_BYTE *)a2 + 1) = v51;
      v52 = (char *)a2 + 2;
      goto LABEL_109;
    }
  }
  *((_BYTE *)a2 + 1) = v51 | 0x80;
  v53 = v51 >> 7;
  if (v51 >> 14)
  {
    v52 = (char *)a2 + 3;
    do
    {
      *(v52 - 1) = v53 | 0x80;
      v54 = v53 >> 7;
      ++v52;
      v55 = v53 >> 14;
      v53 >>= 7;
    }
    while (v55);
    *(v52 - 1) = v54;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v53;
    v52 = (char *)a2 + 3;
  }
LABEL_109:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v50, v52, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 9)
  {
LABEL_36:
    if (v22 != 10)
      goto LABEL_37;
    goto LABEL_120;
  }
LABEL_110:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v56 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 74;
    v57 = *((_DWORD *)v56 + 10);
    if (v57 <= 0x7F)
      goto LABEL_112;
  }
  else
  {
    v56 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 74;
    v57 = *((_DWORD *)v56 + 10);
    if (v57 <= 0x7F)
    {
LABEL_112:
      *((_BYTE *)a2 + 1) = v57;
      v58 = (char *)a2 + 2;
      goto LABEL_119;
    }
  }
  *((_BYTE *)a2 + 1) = v57 | 0x80;
  v59 = v57 >> 7;
  if (v57 >> 14)
  {
    v58 = (char *)a2 + 3;
    do
    {
      *(v58 - 1) = v59 | 0x80;
      v60 = v59 >> 7;
      ++v58;
      v61 = v59 >> 14;
      v59 >>= 7;
    }
    while (v61);
    *(v58 - 1) = v60;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v59;
    v58 = (char *)a2 + 3;
  }
LABEL_119:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v56, v58, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 10)
  {
LABEL_37:
    if (v22 != 11)
      goto LABEL_38;
    goto LABEL_130;
  }
LABEL_120:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v62 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 82;
    v63 = *((_DWORD *)v62 + 10);
    if (v63 <= 0x7F)
      goto LABEL_122;
  }
  else
  {
    v62 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 82;
    v63 = *((_DWORD *)v62 + 10);
    if (v63 <= 0x7F)
    {
LABEL_122:
      *((_BYTE *)a2 + 1) = v63;
      v64 = (char *)a2 + 2;
      goto LABEL_129;
    }
  }
  *((_BYTE *)a2 + 1) = v63 | 0x80;
  v65 = v63 >> 7;
  if (v63 >> 14)
  {
    v64 = (char *)a2 + 3;
    do
    {
      *(v64 - 1) = v65 | 0x80;
      v66 = v65 >> 7;
      ++v64;
      v67 = v65 >> 14;
      v65 >>= 7;
    }
    while (v67);
    *(v64 - 1) = v66;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v65;
    v64 = (char *)a2 + 3;
  }
LABEL_129:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v62, v64, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 11)
  {
LABEL_38:
    if (v22 != 12)
      goto LABEL_39;
    goto LABEL_140;
  }
LABEL_130:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v68 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 90;
    v69 = *((_DWORD *)v68 + 10);
    if (v69 <= 0x7F)
      goto LABEL_132;
  }
  else
  {
    v68 = (operations_research::sat::IntegerArgumentProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 90;
    v69 = *((_DWORD *)v68 + 10);
    if (v69 <= 0x7F)
    {
LABEL_132:
      *((_BYTE *)a2 + 1) = v69;
      v70 = (char *)a2 + 2;
      goto LABEL_139;
    }
  }
  *((_BYTE *)a2 + 1) = v69 | 0x80;
  v71 = v69 >> 7;
  if (v69 >> 14)
  {
    v70 = (char *)a2 + 3;
    do
    {
      *(v70 - 1) = v71 | 0x80;
      v72 = v71 >> 7;
      ++v70;
      v73 = v71 >> 14;
      v71 >>= 7;
    }
    while (v73);
    *(v70 - 1) = v72;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v71;
    v70 = (char *)a2 + 3;
  }
LABEL_139:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v68, v70, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 12)
  {
LABEL_39:
    if (v22 != 13)
      goto LABEL_40;
    goto LABEL_150;
  }
LABEL_140:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v74 = (operations_research::sat::LinearConstraintProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 98;
    v75 = *((_DWORD *)v74 + 21);
    if (v75 <= 0x7F)
      goto LABEL_142;
  }
  else
  {
    v74 = (operations_research::sat::LinearConstraintProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 98;
    v75 = *((_DWORD *)v74 + 21);
    if (v75 <= 0x7F)
    {
LABEL_142:
      *((_BYTE *)a2 + 1) = v75;
      v76 = (char *)a2 + 2;
      goto LABEL_149;
    }
  }
  *((_BYTE *)a2 + 1) = v75 | 0x80;
  v77 = v75 >> 7;
  if (v75 >> 14)
  {
    v76 = (char *)a2 + 3;
    do
    {
      *(v76 - 1) = v77 | 0x80;
      v78 = v77 >> 7;
      ++v76;
      v79 = v77 >> 14;
      v77 >>= 7;
    }
    while (v79);
    *(v76 - 1) = v78;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v77;
    v76 = (char *)a2 + 3;
  }
LABEL_149:
  a2 = operations_research::sat::LinearConstraintProto::_InternalSerialize(v74, v76, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 13)
  {
LABEL_40:
    if (v22 != 14)
      goto LABEL_41;
    goto LABEL_160;
  }
LABEL_150:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v80 = (operations_research::sat::AllDifferentConstraintProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 106;
    v81 = *((_DWORD *)v80 + 9);
    if (v81 <= 0x7F)
      goto LABEL_152;
  }
  else
  {
    v80 = (operations_research::sat::AllDifferentConstraintProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 106;
    v81 = *((_DWORD *)v80 + 9);
    if (v81 <= 0x7F)
    {
LABEL_152:
      *((_BYTE *)a2 + 1) = v81;
      v82 = (char *)a2 + 2;
      goto LABEL_159;
    }
  }
  *((_BYTE *)a2 + 1) = v81 | 0x80;
  v83 = v81 >> 7;
  if (v81 >> 14)
  {
    v82 = (char *)a2 + 3;
    do
    {
      *(v82 - 1) = v83 | 0x80;
      v84 = v83 >> 7;
      ++v82;
      v85 = v83 >> 14;
      v83 >>= 7;
    }
    while (v85);
    *(v82 - 1) = v84;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v83;
    v82 = (char *)a2 + 3;
  }
LABEL_159:
  a2 = operations_research::sat::AllDifferentConstraintProto::_InternalSerialize(v80, v82, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 14)
  {
LABEL_41:
    if (v22 != 15)
      goto LABEL_42;
    goto LABEL_170;
  }
LABEL_160:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v86 = (operations_research::sat::ElementConstraintProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 114;
    v87 = *((_DWORD *)v86 + 11);
    if (v87 <= 0x7F)
      goto LABEL_162;
  }
  else
  {
    v86 = (operations_research::sat::ElementConstraintProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 114;
    v87 = *((_DWORD *)v86 + 11);
    if (v87 <= 0x7F)
    {
LABEL_162:
      *((_BYTE *)a2 + 1) = v87;
      v88 = (char *)a2 + 2;
      goto LABEL_169;
    }
  }
  *((_BYTE *)a2 + 1) = v87 | 0x80;
  v89 = v87 >> 7;
  if (v87 >> 14)
  {
    v88 = (char *)a2 + 3;
    do
    {
      *(v88 - 1) = v89 | 0x80;
      v90 = v89 >> 7;
      ++v88;
      v91 = v89 >> 14;
      v89 >>= 7;
    }
    while (v91);
    *(v88 - 1) = v90;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v89;
    v88 = (char *)a2 + 3;
  }
LABEL_169:
  a2 = operations_research::sat::ElementConstraintProto::_InternalSerialize(v86, v88, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 15)
  {
LABEL_42:
    if (v22 != 16)
      goto LABEL_43;
    goto LABEL_180;
  }
LABEL_170:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v92 = (operations_research::sat::CircuitConstraintProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 122;
    v93 = *((_DWORD *)v92 + 21);
    if (v93 <= 0x7F)
      goto LABEL_172;
  }
  else
  {
    v92 = (operations_research::sat::CircuitConstraintProto *)*((_QWORD *)this + 6);
    *(_BYTE *)a2 = 122;
    v93 = *((_DWORD *)v92 + 21);
    if (v93 <= 0x7F)
    {
LABEL_172:
      *((_BYTE *)a2 + 1) = v93;
      v94 = (char *)a2 + 2;
      goto LABEL_179;
    }
  }
  *((_BYTE *)a2 + 1) = v93 | 0x80;
  v95 = v93 >> 7;
  if (v93 >> 14)
  {
    v94 = (char *)a2 + 3;
    do
    {
      *(v94 - 1) = v95 | 0x80;
      v96 = v95 >> 7;
      ++v94;
      v97 = v95 >> 14;
      v95 >>= 7;
    }
    while (v97);
    *(v94 - 1) = v96;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v95;
    v94 = (char *)a2 + 3;
  }
LABEL_179:
  a2 = operations_research::sat::CircuitConstraintProto::_InternalSerialize(v92, v94, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 16)
  {
LABEL_43:
    if (v22 != 17)
      goto LABEL_44;
    goto LABEL_190;
  }
LABEL_180:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v98 = (operations_research::sat::TableConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 386;
    v99 = *((_DWORD *)v98 + 16);
    if (v99 <= 0x7F)
      goto LABEL_182;
  }
  else
  {
    v98 = (operations_research::sat::TableConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 386;
    v99 = *((_DWORD *)v98 + 16);
    if (v99 <= 0x7F)
    {
LABEL_182:
      *((_BYTE *)a2 + 2) = v99;
      v100 = (char *)a2 + 3;
      goto LABEL_189;
    }
  }
  *((_BYTE *)a2 + 2) = v99 | 0x80;
  v101 = v99 >> 7;
  if (v99 >> 14)
  {
    v100 = (char *)a2 + 4;
    do
    {
      *(v100 - 1) = v101 | 0x80;
      v102 = v101 >> 7;
      ++v100;
      v103 = v101 >> 14;
      v101 >>= 7;
    }
    while (v103);
    *(v100 - 1) = v102;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v101;
    v100 = (char *)a2 + 4;
  }
LABEL_189:
  a2 = operations_research::sat::TableConstraintProto::_InternalSerialize(v98, v100, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 17)
  {
LABEL_44:
    if (v22 != 18)
      goto LABEL_45;
    goto LABEL_200;
  }
LABEL_190:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v104 = (operations_research::sat::AutomatonConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 394;
    v105 = *((_DWORD *)v104 + 36);
    if (v105 <= 0x7F)
      goto LABEL_192;
  }
  else
  {
    v104 = (operations_research::sat::AutomatonConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 394;
    v105 = *((_DWORD *)v104 + 36);
    if (v105 <= 0x7F)
    {
LABEL_192:
      *((_BYTE *)a2 + 2) = v105;
      v106 = (char *)a2 + 3;
      goto LABEL_199;
    }
  }
  *((_BYTE *)a2 + 2) = v105 | 0x80;
  v107 = v105 >> 7;
  if (v105 >> 14)
  {
    v106 = (char *)a2 + 4;
    do
    {
      *(v106 - 1) = v107 | 0x80;
      v108 = v107 >> 7;
      ++v106;
      v109 = v107 >> 14;
      v107 >>= 7;
    }
    while (v109);
    *(v106 - 1) = v108;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v107;
    v106 = (char *)a2 + 4;
  }
LABEL_199:
  a2 = operations_research::sat::AutomatonConstraintProto::_InternalSerialize(v104, v106, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 18)
  {
LABEL_45:
    if (v22 != 19)
      goto LABEL_46;
    goto LABEL_210;
  }
LABEL_200:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v110 = (operations_research::sat::InverseConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 402;
    v111 = *((_DWORD *)v110 + 15);
    if (v111 <= 0x7F)
      goto LABEL_202;
  }
  else
  {
    v110 = (operations_research::sat::InverseConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 402;
    v111 = *((_DWORD *)v110 + 15);
    if (v111 <= 0x7F)
    {
LABEL_202:
      *((_BYTE *)a2 + 2) = v111;
      v112 = (char *)a2 + 3;
      goto LABEL_209;
    }
  }
  *((_BYTE *)a2 + 2) = v111 | 0x80;
  v113 = v111 >> 7;
  if (v111 >> 14)
  {
    v112 = (char *)a2 + 4;
    do
    {
      *(v112 - 1) = v113 | 0x80;
      v114 = v113 >> 7;
      ++v112;
      v115 = v113 >> 14;
      v113 >>= 7;
    }
    while (v115);
    *(v112 - 1) = v114;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v113;
    v112 = (char *)a2 + 4;
  }
LABEL_209:
  a2 = operations_research::sat::InverseConstraintProto::_InternalSerialize(v110, v112, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 19)
  {
LABEL_46:
    if (v22 != 20)
      goto LABEL_47;
    goto LABEL_220;
  }
LABEL_210:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v116 = (operations_research::sat::IntervalConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 410;
    v117 = *((_DWORD *)v116 + 7);
    if (v117 <= 0x7F)
      goto LABEL_212;
  }
  else
  {
    v116 = (operations_research::sat::IntervalConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 410;
    v117 = *((_DWORD *)v116 + 7);
    if (v117 <= 0x7F)
    {
LABEL_212:
      *((_BYTE *)a2 + 2) = v117;
      v118 = (char *)a2 + 3;
      goto LABEL_219;
    }
  }
  *((_BYTE *)a2 + 2) = v117 | 0x80;
  v119 = v117 >> 7;
  if (v117 >> 14)
  {
    v118 = (char *)a2 + 4;
    do
    {
      *(v118 - 1) = v119 | 0x80;
      v120 = v119 >> 7;
      ++v118;
      v121 = v119 >> 14;
      v119 >>= 7;
    }
    while (v121);
    *(v118 - 1) = v120;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v119;
    v118 = (char *)a2 + 4;
  }
LABEL_219:
  a2 = operations_research::sat::IntervalConstraintProto::_InternalSerialize(v116, v118, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 20)
  {
LABEL_47:
    if (v22 != 21)
      goto LABEL_48;
    goto LABEL_230;
  }
LABEL_220:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v122 = (operations_research::sat::NoOverlapConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 418;
    v123 = *((_DWORD *)v122 + 9);
    if (v123 <= 0x7F)
      goto LABEL_222;
  }
  else
  {
    v122 = (operations_research::sat::NoOverlapConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 418;
    v123 = *((_DWORD *)v122 + 9);
    if (v123 <= 0x7F)
    {
LABEL_222:
      *((_BYTE *)a2 + 2) = v123;
      v124 = (char *)a2 + 3;
      goto LABEL_229;
    }
  }
  *((_BYTE *)a2 + 2) = v123 | 0x80;
  v125 = v123 >> 7;
  if (v123 >> 14)
  {
    v124 = (char *)a2 + 4;
    do
    {
      *(v124 - 1) = v125 | 0x80;
      v126 = v125 >> 7;
      ++v124;
      v127 = v125 >> 14;
      v125 >>= 7;
    }
    while (v127);
    *(v124 - 1) = v126;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v125;
    v124 = (char *)a2 + 4;
  }
LABEL_229:
  a2 = operations_research::sat::NoOverlapConstraintProto::_InternalSerialize(v122, v124, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 21)
  {
LABEL_48:
    if (v22 != 22)
      goto LABEL_49;
    goto LABEL_240;
  }
LABEL_230:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v128 = (operations_research::sat::NoOverlap2DConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 426;
    v129 = *((_DWORD *)v128 + 16);
    if (v129 <= 0x7F)
      goto LABEL_232;
  }
  else
  {
    v128 = (operations_research::sat::NoOverlap2DConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 426;
    v129 = *((_DWORD *)v128 + 16);
    if (v129 <= 0x7F)
    {
LABEL_232:
      *((_BYTE *)a2 + 2) = v129;
      v130 = (char *)a2 + 3;
      goto LABEL_239;
    }
  }
  *((_BYTE *)a2 + 2) = v129 | 0x80;
  v131 = v129 >> 7;
  if (v129 >> 14)
  {
    v130 = (char *)a2 + 4;
    do
    {
      *(v130 - 1) = v131 | 0x80;
      v132 = v131 >> 7;
      ++v130;
      v133 = v131 >> 14;
      v131 >>= 7;
    }
    while (v133);
    *(v130 - 1) = v132;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v131;
    v130 = (char *)a2 + 4;
  }
LABEL_239:
  a2 = operations_research::sat::NoOverlap2DConstraintProto::_InternalSerialize(v128, v130, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 22)
  {
LABEL_49:
    if (v22 != 23)
      goto LABEL_50;
    goto LABEL_250;
  }
LABEL_240:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v134 = (operations_research::sat::CumulativeConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 434;
    v135 = *((_DWORD *)v134 + 16);
    if (v135 <= 0x7F)
      goto LABEL_242;
  }
  else
  {
    v134 = (operations_research::sat::CumulativeConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 434;
    v135 = *((_DWORD *)v134 + 16);
    if (v135 <= 0x7F)
    {
LABEL_242:
      *((_BYTE *)a2 + 2) = v135;
      v136 = (char *)a2 + 3;
      goto LABEL_249;
    }
  }
  *((_BYTE *)a2 + 2) = v135 | 0x80;
  v137 = v135 >> 7;
  if (v135 >> 14)
  {
    v136 = (char *)a2 + 4;
    do
    {
      *(v136 - 1) = v137 | 0x80;
      v138 = v137 >> 7;
      ++v136;
      v139 = v137 >> 14;
      v137 >>= 7;
    }
    while (v139);
    *(v136 - 1) = v138;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v137;
    v136 = (char *)a2 + 4;
  }
LABEL_249:
  a2 = operations_research::sat::CumulativeConstraintProto::_InternalSerialize(v134, v136, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 23)
  {
LABEL_50:
    if (v22 != 24)
      goto LABEL_51;
    goto LABEL_260;
  }
LABEL_250:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v140 = (operations_research::sat::RoutesConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 442;
    v141 = *((_DWORD *)v140 + 30);
    if (v141 <= 0x7F)
      goto LABEL_252;
  }
  else
  {
    v140 = (operations_research::sat::RoutesConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 442;
    v141 = *((_DWORD *)v140 + 30);
    if (v141 <= 0x7F)
    {
LABEL_252:
      *((_BYTE *)a2 + 2) = v141;
      v142 = (char *)a2 + 3;
      goto LABEL_259;
    }
  }
  *((_BYTE *)a2 + 2) = v141 | 0x80;
  v143 = v141 >> 7;
  if (v141 >> 14)
  {
    v142 = (char *)a2 + 4;
    do
    {
      *(v142 - 1) = v143 | 0x80;
      v144 = v143 >> 7;
      ++v142;
      v145 = v143 >> 14;
      v143 >>= 7;
    }
    while (v145);
    *(v142 - 1) = v144;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v143;
    v142 = (char *)a2 + 4;
  }
LABEL_259:
  a2 = operations_research::sat::RoutesConstraintProto::_InternalSerialize(v140, v142, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 24)
  {
LABEL_51:
    if (v22 != 25)
      goto LABEL_52;
    goto LABEL_270;
  }
LABEL_260:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v146 = (operations_research::sat::ReservoirConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 450;
    v147 = *((_DWORD *)v146 + 26);
    if (v147 <= 0x7F)
      goto LABEL_262;
  }
  else
  {
    v146 = (operations_research::sat::ReservoirConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 450;
    v147 = *((_DWORD *)v146 + 26);
    if (v147 <= 0x7F)
    {
LABEL_262:
      *((_BYTE *)a2 + 2) = v147;
      v148 = (char *)a2 + 3;
      goto LABEL_269;
    }
  }
  *((_BYTE *)a2 + 2) = v147 | 0x80;
  v149 = v147 >> 7;
  if (v147 >> 14)
  {
    v148 = (char *)a2 + 4;
    do
    {
      *(v148 - 1) = v149 | 0x80;
      v150 = v149 >> 7;
      ++v148;
      v151 = v149 >> 14;
      v149 >>= 7;
    }
    while (v151);
    *(v148 - 1) = v150;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v149;
    v148 = (char *)a2 + 4;
  }
LABEL_269:
  a2 = operations_research::sat::ReservoirConstraintProto::_InternalSerialize(v146, v148, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 25)
  {
LABEL_52:
    if (v22 != 26)
      goto LABEL_53;
    goto LABEL_280;
  }
LABEL_270:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v152 = (operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 458;
    v153 = *((_DWORD *)v152 + 15);
    if (v153 <= 0x7F)
      goto LABEL_272;
  }
  else
  {
    v152 = (operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 458;
    v153 = *((_DWORD *)v152 + 15);
    if (v153 <= 0x7F)
    {
LABEL_272:
      *((_BYTE *)a2 + 2) = v153;
      v154 = (char *)a2 + 3;
      goto LABEL_279;
    }
  }
  *((_BYTE *)a2 + 2) = v153 | 0x80;
  v155 = v153 >> 7;
  if (v153 >> 14)
  {
    v154 = (char *)a2 + 4;
    do
    {
      *(v154 - 1) = v155 | 0x80;
      v156 = v155 >> 7;
      ++v154;
      v157 = v155 >> 14;
      v155 >>= 7;
    }
    while (v157);
    *(v154 - 1) = v156;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v155;
    v154 = (char *)a2 + 4;
  }
LABEL_279:
  a2 = operations_research::sat::CircuitCoveringConstraintProto::_InternalSerialize(v152, v154, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 26)
  {
LABEL_53:
    if (v22 != 27)
      goto LABEL_54;
    goto LABEL_290;
  }
LABEL_280:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v158 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 466;
    v159 = *((_DWORD *)v158 + 9);
    if (v159 <= 0x7F)
      goto LABEL_282;
  }
  else
  {
    v158 = (operations_research::sat::BoolArgumentProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 466;
    v159 = *((_DWORD *)v158 + 9);
    if (v159 <= 0x7F)
    {
LABEL_282:
      *((_BYTE *)a2 + 2) = v159;
      v160 = (char *)a2 + 3;
      goto LABEL_289;
    }
  }
  *((_BYTE *)a2 + 2) = v159 | 0x80;
  v161 = v159 >> 7;
  if (v159 >> 14)
  {
    v160 = (char *)a2 + 4;
    do
    {
      *(v160 - 1) = v161 | 0x80;
      v162 = v161 >> 7;
      ++v160;
      v163 = v161 >> 14;
      v161 >>= 7;
    }
    while (v163);
    *(v160 - 1) = v162;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v161;
    v160 = (char *)a2 + 4;
  }
LABEL_289:
  a2 = operations_research::sat::BoolArgumentProto::_InternalSerialize(v158, v160, a3, a4);
  v22 = *((_DWORD *)this + 15);
  if (v22 != 27)
  {
LABEL_54:
    if (v22 != 28)
      goto LABEL_55;
LABEL_300:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v170 = (operations_research::sat::LinearArgumentProto *)*((_QWORD *)this + 6);
      *(_WORD *)a2 = 482;
      v171 = *((_DWORD *)v170 + 12);
      if (v171 <= 0x7F)
      {
LABEL_302:
        *((_BYTE *)a2 + 2) = v171;
        a2 = operations_research::sat::LinearArgumentProto::_InternalSerialize(v170, (char *)a2 + 3, a3, a4);
        v23 = *((_QWORD *)this + 1);
        if ((v23 & 1) == 0)
          return a2;
        return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
      }
    }
    else
    {
      v170 = (operations_research::sat::LinearArgumentProto *)*((_QWORD *)this + 6);
      *(_WORD *)a2 = 482;
      v171 = *((_DWORD *)v170 + 12);
      if (v171 <= 0x7F)
        goto LABEL_302;
    }
    *((_BYTE *)a2 + 2) = v171 | 0x80;
    v172 = v171 >> 7;
    if (v171 >> 14)
    {
      v173 = (char *)a2 + 4;
      do
      {
        *(v173 - 1) = v172 | 0x80;
        v174 = v172 >> 7;
        ++v173;
        v175 = v172 >> 14;
        v172 >>= 7;
      }
      while (v175);
      *(v173 - 1) = v174;
      a2 = operations_research::sat::LinearArgumentProto::_InternalSerialize(v170, v173, a3, a4);
      v23 = *((_QWORD *)this + 1);
      if ((v23 & 1) == 0)
        return a2;
    }
    else
    {
      *((_BYTE *)a2 + 3) = v172;
      a2 = operations_research::sat::LinearArgumentProto::_InternalSerialize(v170, (char *)a2 + 4, a3, a4);
      v23 = *((_QWORD *)this + 1);
      if ((v23 & 1) == 0)
        return a2;
    }
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
  }
LABEL_290:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v164 = (operations_research::sat::LinearArgumentProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 474;
    v165 = *((_DWORD *)v164 + 12);
    if (v165 <= 0x7F)
      goto LABEL_292;
  }
  else
  {
    v164 = (operations_research::sat::LinearArgumentProto *)*((_QWORD *)this + 6);
    *(_WORD *)a2 = 474;
    v165 = *((_DWORD *)v164 + 12);
    if (v165 <= 0x7F)
    {
LABEL_292:
      *((_BYTE *)a2 + 2) = v165;
      v166 = (char *)a2 + 3;
      goto LABEL_299;
    }
  }
  *((_BYTE *)a2 + 2) = v165 | 0x80;
  v167 = v165 >> 7;
  if (v165 >> 14)
  {
    v166 = (char *)a2 + 4;
    do
    {
      *(v166 - 1) = v167 | 0x80;
      v168 = v167 >> 7;
      ++v166;
      v169 = v167 >> 14;
      v167 >>= 7;
    }
    while (v169);
    *(v166 - 1) = v168;
  }
  else
  {
    *((_BYTE *)a2 + 3) = v167;
    v166 = (char *)a2 + 4;
  }
LABEL_299:
  a2 = operations_research::sat::LinearArgumentProto::_InternalSerialize(v164, v166, a3, a4);
  if (*((_DWORD *)this + 15) == 28)
    goto LABEL_300;
LABEL_55:
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) == 0)
    return a2;
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
}

char *operations_research::sat::ConstraintProto::ByteSizeLong(operations_research::sat::ConstraintProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  int v11;
  int *v12;
  uint64_t v13;
  google::protobuf::UnknownFieldSet *v14;
  char *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  google::protobuf::UnknownFieldSet *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      *((_DWORD *)this + 8) = v2;
      v4 = *((_QWORD *)this + 5);
      v5 = *(unsigned __int8 *)(v4 + 23);
      if ((*(char *)(v4 + 23) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_14:
      v6 = (const google::protobuf::UnknownFieldSet *)(v3 + v2);
      if (*(_QWORD *)(v4 + 8))
        goto LABEL_5;
      goto LABEL_8;
    }
    v3 = 11;
    *((_DWORD *)this + 8) = v2;
    v4 = *((_QWORD *)this + 5);
    v5 = *(unsigned __int8 *)(v4 + 23);
    if (*(char *)(v4 + 23) < 0)
      goto LABEL_14;
  }
  else
  {
    v3 = 0;
    *((_DWORD *)this + 8) = 0;
    v4 = *((_QWORD *)this + 5);
    v5 = *(unsigned __int8 *)(v4 + 23);
    if (*(char *)(v4 + 23) < 0)
      goto LABEL_14;
  }
LABEL_4:
  v6 = (const google::protobuf::UnknownFieldSet *)(v3 + v2);
  if (v5)
  {
LABEL_5:
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v7 = v5;
    v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
LABEL_8:
  switch(*((_DWORD *)this + 15))
  {
    case 3:
    case 4:
    case 5:
    case 0xD:
      v12 = (int *)*((_QWORD *)this + 6);
      v13 = google::protobuf::internal::WireFormatLite::Int32Size(v12 + 4);
      if (v13)
      {
        if ((v13 & 0x80000000) != 0)
        {
          v12[8] = v13;
          v10 = (char *)(v13 + 11);
          v14 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          if ((v12[2] & 1) == 0)
            goto LABEL_21;
        }
        else
        {
          v12[8] = v13;
          v10 = (char *)(((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1 + v13);
          v14 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          if ((v12[2] & 1) == 0)
          {
LABEL_21:
            v12[9] = (int)v10;
            goto LABEL_34;
          }
        }
      }
      else
      {
        v12[8] = 0;
        v10 = 0;
        v14 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
        if ((v12[2] & 1) == 0)
          goto LABEL_21;
      }
      v16 = v12 + 9;
LABEL_107:
      v10 = google::protobuf::internal::ComputeUnknownFieldsSize(v14, (const google::protobuf::UnknownFieldSet *)v10, v16);
LABEL_34:
      v18 = (9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6;
      v19 = &v10[(_QWORD)v6];
LABEL_39:
      v6 = (const google::protobuf::UnknownFieldSet *)&v19[v18 + 1];
LABEL_103:
      if ((*((_BYTE *)this + 8) & 1) != 0)
        return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::ConstraintProto *)((char *)this + 8), v6, (_DWORD *)this + 14);
      *((_DWORD *)this + 14) = (_DWORD)v6;
      return (char *)v6;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v8 = (int *)*((_QWORD *)this + 6);
      v9 = google::protobuf::internal::WireFormatLite::Int32Size(v8 + 4);
      if (v9)
      {
        if ((v9 & 0x80000000) != 0)
        {
          v8[8] = v9;
          v10 = (char *)(v9 + 11);
          v11 = v8[9];
          if (!v11)
            goto LABEL_32;
        }
        else
        {
          v8[8] = v9;
          v10 = (char *)(((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1 + v9);
          v11 = v8[9];
          if (!v11)
            goto LABEL_32;
        }
      }
      else
      {
        v8[8] = 0;
        v10 = 0;
        v11 = v8[9];
        if (!v11)
          goto LABEL_32;
      }
      if (v11 < 0)
        v17 = 11;
      else
        v17 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
      v10 += v17;
LABEL_32:
      v14 = (google::protobuf::UnknownFieldSet *)(v8 + 2);
      if ((v8[2] & 1) == 0)
      {
        v8[10] = (int)v10;
        goto LABEL_34;
      }
      v16 = v8 + 10;
      goto LABEL_107;
    case 0xC:
      v20 = operations_research::sat::LinearConstraintProto::ByteSizeLong(*((operations_research::sat::LinearConstraintProto **)this
                                                                          + 6));
      goto LABEL_38;
    case 0xE:
      v20 = operations_research::sat::ElementConstraintProto::ByteSizeLong(*((operations_research::sat::ElementConstraintProto **)this
                                                                           + 6));
      goto LABEL_38;
    case 0xF:
      v20 = operations_research::sat::CircuitConstraintProto::ByteSizeLong(*((operations_research::sat::CircuitConstraintProto **)this
                                                                           + 6));
LABEL_38:
      v18 = (9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6;
      v19 = &v20[(_QWORD)v6];
      goto LABEL_39;
    case 0x10:
      v15 = operations_research::sat::TableConstraintProto::ByteSizeLong(*((operations_research::sat::TableConstraintProto **)this
                                                                         + 6));
      goto LABEL_55;
    case 0x11:
      v15 = operations_research::sat::AutomatonConstraintProto::ByteSizeLong(*((operations_research::sat::AutomatonConstraintProto **)this
                                                                             + 6));
      goto LABEL_55;
    case 0x12:
      v21 = (int *)*((_QWORD *)this + 6);
      v22 = google::protobuf::internal::WireFormatLite::Int32Size(v21 + 4);
      if (v22)
      {
        v23 = v22;
        if ((v22 & 0x80000000) != 0)
          v24 = 11;
        else
          v24 = ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
      v21[8] = v23;
      v38 = v24 + v22;
      v39 = google::protobuf::internal::WireFormatLite::Int32Size(v21 + 10);
      if (v39)
      {
        v40 = v39;
        if ((v39 & 0x80000000) != 0)
          v41 = 11;
        else
          v41 = ((9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6) + 1;
        v38 += v41;
      }
      else
      {
        v40 = 0;
      }
      v21[14] = v40;
      v27 = v38 + v39;
      v37 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
      if ((v21[2] & 1) != 0)
        goto LABEL_87;
      goto LABEL_96;
    case 0x13:
      v25 = (_DWORD *)*((_QWORD *)this + 6);
      v26 = v25[4];
      if (v26)
      {
        if (v26 < 0)
          v27 = 11;
        else
          v27 = ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v27 = 0;
      }
      v42 = v25[5];
      if (v42)
      {
        if (v42 < 0)
          v43 = 11;
        else
          v43 = ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
        v27 += v43;
      }
      v49 = v25[6];
      if (v49)
      {
        if (v49 < 0)
          v50 = 11;
        else
          v50 = ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6) + 1;
        v27 += v50;
      }
      v37 = (google::protobuf::UnknownFieldSet *)(v25 + 2);
      if ((v25[2] & 1) == 0)
      {
        v25[7] = v27;
        goto LABEL_101;
      }
      v48 = v25 + 7;
      goto LABEL_110;
    case 0x14:
      v28 = (int *)*((_QWORD *)this + 6);
      v29 = google::protobuf::internal::WireFormatLite::Int32Size(v28 + 4);
      if (!v29)
        goto LABEL_64;
      v30 = v29;
      if ((v29 & 0x80000000) == 0)
        goto LABEL_50;
      goto LABEL_61;
    case 0x15:
      v15 = operations_research::sat::NoOverlap2DConstraintProto::ByteSizeLong(*((operations_research::sat::NoOverlap2DConstraintProto **)this
                                                                               + 6));
      goto LABEL_55;
    case 0x16:
      v15 = operations_research::sat::CumulativeConstraintProto::ByteSizeLong(*((operations_research::sat::CumulativeConstraintProto **)this
                                                                              + 6));
      goto LABEL_55;
    case 0x17:
      v15 = operations_research::sat::RoutesConstraintProto::ByteSizeLong(*((operations_research::sat::RoutesConstraintProto **)this
                                                                          + 6));
      goto LABEL_55;
    case 0x18:
      v15 = operations_research::sat::ReservoirConstraintProto::ByteSizeLong(*((operations_research::sat::ReservoirConstraintProto **)this
                                                                             + 6));
      goto LABEL_55;
    case 0x19:
      v21 = (int *)*((_QWORD *)this + 6);
      v34 = google::protobuf::internal::WireFormatLite::Int32Size(v21 + 4);
      if (v34)
      {
        v35 = v34;
        if ((v34 & 0x80000000) != 0)
          v36 = 11;
        else
          v36 = ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
      v21[8] = v35;
      v44 = v36 + v34;
      v45 = google::protobuf::internal::WireFormatLite::Int64Size(v21 + 10);
      if (v45)
      {
        v46 = v45;
        if ((v45 & 0x80000000) != 0)
          v47 = 11;
        else
          v47 = ((9 * (__clz(v45 | 1) ^ 0x1F) + 73) >> 6) + 1;
        v44 += v47;
      }
      else
      {
        v46 = 0;
      }
      v21[14] = v46;
      v27 = v44 + v45;
      v37 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
      if ((v21[2] & 1) != 0)
      {
LABEL_87:
        v48 = v21 + 15;
        goto LABEL_110;
      }
LABEL_96:
      v21[15] = v27;
      goto LABEL_101;
    case 0x1A:
      v28 = (int *)*((_QWORD *)this + 6);
      v29 = google::protobuf::internal::WireFormatLite::Int32Size(v28 + 4);
      if (v29)
      {
        v30 = v29;
        if ((v29 & 0x80000000) != 0)
LABEL_61:
          v31 = 11;
        else
LABEL_50:
          v31 = ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
LABEL_64:
        v30 = 0;
        v31 = 0;
      }
      v28[8] = v30;
      v27 = v31 + v29;
      v37 = (google::protobuf::UnknownFieldSet *)(v28 + 2);
      if ((v28[2] & 1) != 0)
      {
        v48 = v28 + 9;
LABEL_110:
        v27 = (uint64_t)google::protobuf::internal::ComputeUnknownFieldsSize(v37, (const google::protobuf::UnknownFieldSet *)v27, v48);
      }
      else
      {
        v28[9] = v27;
      }
LABEL_101:
      v32 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
      v33 = (char *)v6 + v27;
LABEL_102:
      v6 = (const google::protobuf::UnknownFieldSet *)&v33[v32 + 2];
      goto LABEL_103;
    case 0x1B:
    case 0x1C:
      v15 = operations_research::sat::LinearArgumentProto::ByteSizeLong(*((operations_research::sat::LinearArgumentProto **)this
                                                                        + 6));
LABEL_55:
      v32 = (9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6;
      v33 = &v15[(_QWORD)v6];
      goto LABEL_102;
    default:
      goto LABEL_103;
  }
}

void operations_research::sat::ConstraintProto::MergeFrom(operations_research::sat::ConstraintProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::ConstraintProto *__hidden))a2 == &off_24F982058)
    operations_research::sat::ConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::ConstraintProto::MergeFrom(operations_research::sat::ConstraintProto *this, const operations_research::sat::ConstraintProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string **v13;
  uint64_t v14;
  google::protobuf::Arena *v15;
  std::string *v16;
  unsigned int v17;
  uint64_t v18;
  google::protobuf::Arena *v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::Arena *v22;
  uint64_t v23;
  google::protobuf::Arena *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  operations_research::sat::LinearConstraintProto *v40;
  const operations_research::sat::LinearConstraintProto *v41;
  uint64_t v42;
  google::protobuf::Arena **v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  operations_research::sat::CircuitConstraintProto *v49;
  const operations_research::sat::CircuitConstraintProto *v50;
  operations_research::sat::TableConstraintProto *v51;
  const operations_research::sat::TableConstraintProto *v52;
  operations_research::sat::AutomatonConstraintProto *v53;
  const operations_research::sat::AutomatonConstraintProto *v54;
  operations_research::sat::InverseConstraintProto *v55;
  const operations_research::sat::InverseConstraintProto *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  google::protobuf::Arena **v61;
  operations_research::sat::NoOverlap2DConstraintProto *v62;
  const operations_research::sat::NoOverlap2DConstraintProto *v63;
  operations_research::sat::CumulativeConstraintProto *v64;
  const operations_research::sat::CumulativeConstraintProto *v65;
  operations_research::sat::RoutesConstraintProto *v66;
  const operations_research::sat::RoutesConstraintProto *v67;
  operations_research::sat::ReservoirConstraintProto *v68;
  const operations_research::sat::ReservoirConstraintProto *v69;
  operations_research::sat::CircuitCoveringConstraintProto *v70;
  const operations_research::sat::CircuitCoveringConstraintProto *v71;
  const google::protobuf::UnknownFieldSet *v72;
  uint64_t v73;
  google::protobuf::UnknownFieldSet *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  operations_research::sat::LinearArgumentProto *v79;
  const operations_research::sat::LinearArgumentProto *v80;
  uint64_t v81;
  google::protobuf::Arena **v82;
  uint64_t v83;
  google::protobuf::Arena **v84;
  uint64_t v85;
  google::protobuf::Arena **v86;
  uint64_t v87;
  google::protobuf::Arena **v88;
  uint64_t v89;
  google::protobuf::Arena **v90;
  uint64_t v91;
  google::protobuf::Arena **v92;
  uint64_t v93;
  google::protobuf::Arena **v94;
  uint64_t v95;
  google::protobuf::Arena **v96;
  uint64_t v97;
  google::protobuf::Arena **v98;
  uint64_t v99;
  google::protobuf::Arena **v100;
  uint64_t v101;
  google::protobuf::Arena **v102;
  uint64_t v103;
  google::protobuf::Arena **v104;
  uint64_t v105;
  google::protobuf::Arena **v106;
  uint64_t v107;
  google::protobuf::Arena **v108;
  uint64_t v109;
  google::protobuf::Arena **v110;
  uint64_t v111;
  google::protobuf::Arena **v112;
  uint64_t v113;
  google::protobuf::Arena **v114;
  uint64_t v115;
  google::protobuf::Arena *v116;
  uint64_t v117;
  google::protobuf::Arena *v118;
  uint64_t v119;
  google::protobuf::Arena *v120;
  const google::protobuf::UnknownFieldSet *v121;
  uint64_t v122;
  google::protobuf::UnknownFieldSet *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  const google::protobuf::UnknownFieldSet *v128;
  uint64_t v129;
  google::protobuf::UnknownFieldSet *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  const google::protobuf::UnknownFieldSet *v135;
  uint64_t v136;
  google::protobuf::UnknownFieldSet *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  const google::protobuf::UnknownFieldSet *v142;
  uint64_t v143;
  google::protobuf::UnknownFieldSet *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  const google::protobuf::UnknownFieldSet *v149;
  uint64_t v150;
  google::protobuf::UnknownFieldSet *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  const google::protobuf::UnknownFieldSet *v156;
  uint64_t v157;
  google::protobuf::UnknownFieldSet *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  const google::protobuf::UnknownFieldSet *v164;
  uint64_t v165;
  google::protobuf::UnknownFieldSet *v166;
  int v167;
  int v168;
  int v169;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_QWORD *)a2 + 5);
  if ((*(char *)(v12 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v12 + 23))
      goto LABEL_14;
LABEL_11:
    v13 = (std::string **)((char *)this + 40);
    v14 = *((_QWORD *)this + 1);
    v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    if ((v14 & 1) != 0)
    {
      v15 = *(google::protobuf::Arena **)v15;
      v16 = *v13;
      if (*v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_13;
    }
    else
    {
      v16 = *v13;
      if (*v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_13:
        std::string::operator=(v16, *((const std::string **)a2 + 5));
        goto LABEL_14;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v15, (__int128 *)v12);
    v17 = *((_DWORD *)a2 + 15) - 3;
    if (v17 > 0x19)
      return;
    goto LABEL_15;
  }
  if (*(_QWORD *)(v12 + 8))
    goto LABEL_11;
LABEL_14:
  v17 = *((_DWORD *)a2 + 15) - 3;
LABEL_15:
  switch(v17)
  {
    case 0u:
      if (*((_DWORD *)this + 15) == 3)
        goto LABEL_92;
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 3;
      v18 = *((_QWORD *)this + 1);
      v19 = (google::protobuf::Arena *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) == 0)
      {
        v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v19);
        *((_QWORD *)this + 6) = v20;
        if (*((_DWORD *)a2 + 15) != 3)
          goto LABEL_165;
        goto LABEL_93;
      }
      v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*(google::protobuf::Arena **)v19);
      *((_QWORD *)this + 6) = v20;
      if (*((_DWORD *)a2 + 15) == 3)
        goto LABEL_93;
      goto LABEL_165;
    case 1u:
      if (*((_DWORD *)this + 15) == 4)
        goto LABEL_92;
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 4;
      v21 = *((_QWORD *)this + 1);
      v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
      if ((v21 & 1) != 0)
        v22 = *(google::protobuf::Arena **)v22;
      v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v22);
      *((_QWORD *)this + 6) = v20;
      if (*((_DWORD *)a2 + 15) != 4)
        goto LABEL_165;
      goto LABEL_93;
    case 2u:
      if (*((_DWORD *)this + 15) == 5)
        goto LABEL_92;
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 5;
      v23 = *((_QWORD *)this + 1);
      v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = *(google::protobuf::Arena **)v24;
      v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v24);
      *((_QWORD *)this + 6) = v20;
      if (*((_DWORD *)a2 + 15) != 5)
        goto LABEL_165;
      goto LABEL_93;
    case 4u:
      if (*((_DWORD *)this + 15) == 7)
      {
        v25 = *((_QWORD *)this + 6);
        v26 = (uint64_t *)*((_QWORD *)a2 + 6);
        v27 = v26[1];
        if ((v27 & 1) == 0)
          goto LABEL_189;
        goto LABEL_186;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 7;
      v81 = *((_QWORD *)this + 1);
      v82 = (google::protobuf::Arena **)(v81 & 0xFFFFFFFFFFFFFFFELL);
      if ((v81 & 1) != 0)
      {
        v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v82);
        *((_QWORD *)this + 6) = v25;
        if (*((_DWORD *)a2 + 15) == 7)
        {
LABEL_106:
          v26 = (uint64_t *)*((_QWORD *)a2 + 6);
          v27 = v26[1];
          if ((v27 & 1) == 0)
            goto LABEL_189;
          goto LABEL_186;
        }
      }
      else
      {
        v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v82);
        *((_QWORD *)this + 6) = v25;
        if (*((_DWORD *)a2 + 15) == 7)
          goto LABEL_106;
      }
      v26 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v27 = qword_25408AAF0;
      if ((qword_25408AAF0 & 1) == 0)
        goto LABEL_189;
LABEL_186:
      v121 = (const google::protobuf::UnknownFieldSet *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v122 = *(_QWORD *)(v25 + 8);
      if ((v122 & 1) != 0)
        v123 = (google::protobuf::UnknownFieldSet *)((v122 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v123 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(v25 + 8));
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v123, v121);
LABEL_189:
      v124 = *((_DWORD *)v26 + 4);
      if (v124)
      {
        v125 = *(int *)(v25 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v25 + 16), v125 + v124);
        v126 = *(_QWORD *)(v25 + 24);
        *(_DWORD *)(v25 + 16) += *((_DWORD *)v26 + 4);
        memcpy((void *)(v126 + 4 * v125), (const void *)v26[3], 4 * *((int *)v26 + 4));
      }
      v127 = *((_DWORD *)v26 + 9);
      if (v127)
        *(_DWORD *)(v25 + 36) = v127;
      return;
    case 5u:
      if (*((_DWORD *)this + 15) == 8)
      {
        v28 = *((_QWORD *)this + 6);
        v29 = (uint64_t *)*((_QWORD *)a2 + 6);
        v30 = v29[1];
        if ((v30 & 1) == 0)
          goto LABEL_198;
        goto LABEL_195;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 8;
      v83 = *((_QWORD *)this + 1);
      v84 = (google::protobuf::Arena **)(v83 & 0xFFFFFFFFFFFFFFFELL);
      if ((v83 & 1) != 0)
      {
        v28 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v84);
        *((_QWORD *)this + 6) = v28;
        if (*((_DWORD *)a2 + 15) == 8)
        {
LABEL_110:
          v29 = (uint64_t *)*((_QWORD *)a2 + 6);
          v30 = v29[1];
          if ((v30 & 1) == 0)
            goto LABEL_198;
          goto LABEL_195;
        }
      }
      else
      {
        v28 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v84);
        *((_QWORD *)this + 6) = v28;
        if (*((_DWORD *)a2 + 15) == 8)
          goto LABEL_110;
      }
      v29 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v30 = qword_25408AAF0;
      if ((qword_25408AAF0 & 1) == 0)
        goto LABEL_198;
LABEL_195:
      v128 = (const google::protobuf::UnknownFieldSet *)((v30 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v129 = *(_QWORD *)(v28 + 8);
      if ((v129 & 1) != 0)
        v130 = (google::protobuf::UnknownFieldSet *)((v129 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v130 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(v28 + 8));
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v130, v128);
LABEL_198:
      v131 = *((_DWORD *)v29 + 4);
      if (v131)
      {
        v132 = *(int *)(v28 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v28 + 16), v132 + v131);
        v133 = *(_QWORD *)(v28 + 24);
        *(_DWORD *)(v28 + 16) += *((_DWORD *)v29 + 4);
        memcpy((void *)(v133 + 4 * v132), (const void *)v29[3], 4 * *((int *)v29 + 4));
      }
      v134 = *((_DWORD *)v29 + 9);
      if (v134)
        *(_DWORD *)(v28 + 36) = v134;
      return;
    case 6u:
      if (*((_DWORD *)this + 15) == 9)
      {
        v31 = *((_QWORD *)this + 6);
        v32 = (uint64_t *)*((_QWORD *)a2 + 6);
        v33 = v32[1];
        if ((v33 & 1) == 0)
          goto LABEL_207;
        goto LABEL_204;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 9;
      v85 = *((_QWORD *)this + 1);
      v86 = (google::protobuf::Arena **)(v85 & 0xFFFFFFFFFFFFFFFELL);
      if ((v85 & 1) != 0)
      {
        v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v86);
        *((_QWORD *)this + 6) = v31;
        if (*((_DWORD *)a2 + 15) == 9)
        {
LABEL_114:
          v32 = (uint64_t *)*((_QWORD *)a2 + 6);
          v33 = v32[1];
          if ((v33 & 1) == 0)
            goto LABEL_207;
          goto LABEL_204;
        }
      }
      else
      {
        v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v86);
        *((_QWORD *)this + 6) = v31;
        if (*((_DWORD *)a2 + 15) == 9)
          goto LABEL_114;
      }
      v32 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v33 = qword_25408AAF0;
      if ((qword_25408AAF0 & 1) == 0)
        goto LABEL_207;
LABEL_204:
      v135 = (const google::protobuf::UnknownFieldSet *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v136 = *(_QWORD *)(v31 + 8);
      if ((v136 & 1) != 0)
        v137 = (google::protobuf::UnknownFieldSet *)((v136 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v137 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(v31 + 8));
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v137, v135);
LABEL_207:
      v138 = *((_DWORD *)v32 + 4);
      if (v138)
      {
        v139 = *(int *)(v31 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v31 + 16), v139 + v138);
        v140 = *(_QWORD *)(v31 + 24);
        *(_DWORD *)(v31 + 16) += *((_DWORD *)v32 + 4);
        memcpy((void *)(v140 + 4 * v139), (const void *)v32[3], 4 * *((int *)v32 + 4));
      }
      v141 = *((_DWORD *)v32 + 9);
      if (v141)
        *(_DWORD *)(v31 + 36) = v141;
      return;
    case 7u:
      if (*((_DWORD *)this + 15) == 10)
      {
        v34 = *((_QWORD *)this + 6);
        v35 = (uint64_t *)*((_QWORD *)a2 + 6);
        v36 = v35[1];
        if ((v36 & 1) == 0)
          goto LABEL_216;
        goto LABEL_213;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 10;
      v87 = *((_QWORD *)this + 1);
      v88 = (google::protobuf::Arena **)(v87 & 0xFFFFFFFFFFFFFFFELL);
      if ((v87 & 1) != 0)
      {
        v34 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v88);
        *((_QWORD *)this + 6) = v34;
        if (*((_DWORD *)a2 + 15) == 10)
        {
LABEL_118:
          v35 = (uint64_t *)*((_QWORD *)a2 + 6);
          v36 = v35[1];
          if ((v36 & 1) == 0)
            goto LABEL_216;
          goto LABEL_213;
        }
      }
      else
      {
        v34 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v88);
        *((_QWORD *)this + 6) = v34;
        if (*((_DWORD *)a2 + 15) == 10)
          goto LABEL_118;
      }
      v35 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v36 = qword_25408AAF0;
      if ((qword_25408AAF0 & 1) == 0)
        goto LABEL_216;
LABEL_213:
      v142 = (const google::protobuf::UnknownFieldSet *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v143 = *(_QWORD *)(v34 + 8);
      if ((v143 & 1) != 0)
        v144 = (google::protobuf::UnknownFieldSet *)((v143 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v144 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(v34 + 8));
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v144, v142);
LABEL_216:
      v145 = *((_DWORD *)v35 + 4);
      if (v145)
      {
        v146 = *(int *)(v34 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v34 + 16), v146 + v145);
        v147 = *(_QWORD *)(v34 + 24);
        *(_DWORD *)(v34 + 16) += *((_DWORD *)v35 + 4);
        memcpy((void *)(v147 + 4 * v146), (const void *)v35[3], 4 * *((int *)v35 + 4));
      }
      v148 = *((_DWORD *)v35 + 9);
      if (v148)
        *(_DWORD *)(v34 + 36) = v148;
      return;
    case 8u:
      if (*((_DWORD *)this + 15) == 11)
      {
        v37 = *((_QWORD *)this + 6);
        v38 = (uint64_t *)*((_QWORD *)a2 + 6);
        v39 = v38[1];
        if ((v39 & 1) == 0)
          goto LABEL_225;
        goto LABEL_222;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 11;
      v89 = *((_QWORD *)this + 1);
      v90 = (google::protobuf::Arena **)(v89 & 0xFFFFFFFFFFFFFFFELL);
      if ((v89 & 1) != 0)
      {
        v37 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v90);
        *((_QWORD *)this + 6) = v37;
        if (*((_DWORD *)a2 + 15) == 11)
        {
LABEL_122:
          v38 = (uint64_t *)*((_QWORD *)a2 + 6);
          v39 = v38[1];
          if ((v39 & 1) == 0)
            goto LABEL_225;
          goto LABEL_222;
        }
      }
      else
      {
        v37 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v90);
        *((_QWORD *)this + 6) = v37;
        if (*((_DWORD *)a2 + 15) == 11)
          goto LABEL_122;
      }
      v38 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v39 = qword_25408AAF0;
      if ((qword_25408AAF0 & 1) == 0)
        goto LABEL_225;
LABEL_222:
      v149 = (const google::protobuf::UnknownFieldSet *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v150 = *(_QWORD *)(v37 + 8);
      if ((v150 & 1) != 0)
        v151 = (google::protobuf::UnknownFieldSet *)((v150 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v151 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(v37 + 8));
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v151, v149);
LABEL_225:
      v152 = *((_DWORD *)v38 + 4);
      if (v152)
      {
        v153 = *(int *)(v37 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v37 + 16), v153 + v152);
        v154 = *(_QWORD *)(v37 + 24);
        *(_DWORD *)(v37 + 16) += *((_DWORD *)v38 + 4);
        memcpy((void *)(v154 + 4 * v153), (const void *)v38[3], 4 * *((int *)v38 + 4));
      }
      v155 = *((_DWORD *)v38 + 9);
      if (v155)
        *(_DWORD *)(v37 + 36) = v155;
      return;
    case 9u:
      if (*((_DWORD *)this + 15) == 12)
      {
        v40 = (operations_research::sat::LinearConstraintProto *)*((_QWORD *)this + 6);
        v41 = (const operations_research::sat::LinearConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_47;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 12;
      v91 = *((_QWORD *)this + 1);
      v92 = (google::protobuf::Arena **)(v91 & 0xFFFFFFFFFFFFFFFELL);
      if ((v91 & 1) != 0)
      {
        v40 = (operations_research::sat::LinearConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(*v92);
        *((_QWORD *)this + 6) = v40;
        if (*((_DWORD *)a2 + 15) == 12)
          goto LABEL_126;
      }
      else
      {
        v40 = (operations_research::sat::LinearConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>((google::protobuf::Arena *)v92);
        *((_QWORD *)this + 6) = v40;
        if (*((_DWORD *)a2 + 15) == 12)
        {
LABEL_126:
          v41 = (const operations_research::sat::LinearConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_47;
        }
      }
      v41 = (const operations_research::sat::LinearConstraintProto *)&operations_research::sat::_LinearConstraintProto_default_instance_;
LABEL_47:
      operations_research::sat::LinearConstraintProto::MergeFrom(v40, v41);
      return;
    case 0xAu:
      if (*((_DWORD *)this + 15) == 13)
        goto LABEL_92;
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 13;
      v42 = *((_QWORD *)this + 1);
      v43 = (google::protobuf::Arena **)(v42 & 0xFFFFFFFFFFFFFFFELL);
      if ((v42 & 1) != 0)
      {
        v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(*v43);
        *((_QWORD *)this + 6) = v20;
        if (*((_DWORD *)a2 + 15) == 13)
          goto LABEL_93;
      }
      else
      {
        v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>((google::protobuf::Arena *)v43);
        *((_QWORD *)this + 6) = v20;
        if (*((_DWORD *)a2 + 15) == 13)
          goto LABEL_93;
      }
      v44 = &operations_research::sat::_AllDifferentConstraintProto_default_instance_;
      v45 = qword_25408B0B8;
      if ((qword_25408B0B8 & 1) == 0)
        goto LABEL_97;
      goto LABEL_94;
    case 0xBu:
      if (*((_DWORD *)this + 15) == 14)
      {
        v46 = *((_QWORD *)this + 6);
        v47 = (uint64_t *)*((_QWORD *)a2 + 6);
        v48 = v47[1];
        if ((v48 & 1) == 0)
          goto LABEL_236;
        goto LABEL_233;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 14;
      v93 = *((_QWORD *)this + 1);
      v94 = (google::protobuf::Arena **)(v93 & 0xFFFFFFFFFFFFFFFELL);
      if ((v93 & 1) != 0)
      {
        v46 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(*v94);
        *((_QWORD *)this + 6) = v46;
        if (*((_DWORD *)a2 + 15) == 14)
        {
LABEL_129:
          v47 = (uint64_t *)*((_QWORD *)a2 + 6);
          v48 = v47[1];
          if ((v48 & 1) == 0)
            goto LABEL_236;
          goto LABEL_233;
        }
      }
      else
      {
        v46 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>((google::protobuf::Arena *)v94);
        *((_QWORD *)this + 6) = v46;
        if (*((_DWORD *)a2 + 15) == 14)
          goto LABEL_129;
      }
      v47 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      v48 = qword_25408ADD8;
      if ((qword_25408ADD8 & 1) == 0)
        goto LABEL_236;
LABEL_233:
      v156 = (const google::protobuf::UnknownFieldSet *)((v48 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v157 = *(_QWORD *)(v46 + 8);
      if ((v157 & 1) != 0)
        v158 = (google::protobuf::UnknownFieldSet *)((v157 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v158 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(v46 + 8));
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v158, v156);
LABEL_236:
      v159 = *((_DWORD *)v47 + 4);
      if (v159)
      {
        v160 = *(int *)(v46 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v46 + 16), v160 + v159);
        v161 = *(_QWORD *)(v46 + 24);
        *(_DWORD *)(v46 + 16) += *((_DWORD *)v47 + 4);
        memcpy((void *)(v161 + 4 * v160), (const void *)v47[3], 4 * *((int *)v47 + 4));
      }
      v162 = *((_DWORD *)v47 + 9);
      if (v162)
        *(_DWORD *)(v46 + 36) = v162;
      v163 = *((_DWORD *)v47 + 10);
      if (v163)
        *(_DWORD *)(v46 + 40) = v163;
      return;
    case 0xCu:
      if (*((_DWORD *)this + 15) == 15)
      {
        v49 = (operations_research::sat::CircuitConstraintProto *)*((_QWORD *)this + 6);
        v50 = (const operations_research::sat::CircuitConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_58;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 15;
      v95 = *((_QWORD *)this + 1);
      v96 = (google::protobuf::Arena **)(v95 & 0xFFFFFFFFFFFFFFFELL);
      if ((v95 & 1) != 0)
      {
        v49 = (operations_research::sat::CircuitConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(*v96);
        *((_QWORD *)this + 6) = v49;
        if (*((_DWORD *)a2 + 15) == 15)
          goto LABEL_133;
      }
      else
      {
        v49 = (operations_research::sat::CircuitConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>((google::protobuf::Arena *)v96);
        *((_QWORD *)this + 6) = v49;
        if (*((_DWORD *)a2 + 15) == 15)
        {
LABEL_133:
          v50 = (const operations_research::sat::CircuitConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_58;
        }
      }
      v50 = (const operations_research::sat::CircuitConstraintProto *)&operations_research::sat::_CircuitConstraintProto_default_instance_;
LABEL_58:
      operations_research::sat::CircuitConstraintProto::MergeFrom(v49, v50);
      return;
    case 0xDu:
      if (*((_DWORD *)this + 15) == 16)
      {
        v51 = (operations_research::sat::TableConstraintProto *)*((_QWORD *)this + 6);
        v52 = (const operations_research::sat::TableConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_61;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 16;
      v97 = *((_QWORD *)this + 1);
      v98 = (google::protobuf::Arena **)(v97 & 0xFFFFFFFFFFFFFFFELL);
      if ((v97 & 1) != 0)
      {
        v51 = (operations_research::sat::TableConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(*v98);
        *((_QWORD *)this + 6) = v51;
        if (*((_DWORD *)a2 + 15) == 16)
          goto LABEL_136;
      }
      else
      {
        v51 = (operations_research::sat::TableConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>((google::protobuf::Arena *)v98);
        *((_QWORD *)this + 6) = v51;
        if (*((_DWORD *)a2 + 15) == 16)
        {
LABEL_136:
          v52 = (const operations_research::sat::TableConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_61;
        }
      }
      v52 = (const operations_research::sat::TableConstraintProto *)&operations_research::sat::_TableConstraintProto_default_instance_;
LABEL_61:
      operations_research::sat::TableConstraintProto::MergeFrom(v51, v52);
      return;
    case 0xEu:
      if (*((_DWORD *)this + 15) == 17)
      {
        v53 = (operations_research::sat::AutomatonConstraintProto *)*((_QWORD *)this + 6);
        v54 = (const operations_research::sat::AutomatonConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_64;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 17;
      v99 = *((_QWORD *)this + 1);
      v100 = (google::protobuf::Arena **)(v99 & 0xFFFFFFFFFFFFFFFELL);
      if ((v99 & 1) != 0)
      {
        v53 = (operations_research::sat::AutomatonConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(*v100);
        *((_QWORD *)this + 6) = v53;
        if (*((_DWORD *)a2 + 15) == 17)
          goto LABEL_139;
      }
      else
      {
        v53 = (operations_research::sat::AutomatonConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>((google::protobuf::Arena *)v100);
        *((_QWORD *)this + 6) = v53;
        if (*((_DWORD *)a2 + 15) == 17)
        {
LABEL_139:
          v54 = (const operations_research::sat::AutomatonConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_64;
        }
      }
      v54 = (const operations_research::sat::AutomatonConstraintProto *)&operations_research::sat::_AutomatonConstraintProto_default_instance_;
LABEL_64:
      operations_research::sat::AutomatonConstraintProto::MergeFrom(v53, v54);
      return;
    case 0xFu:
      if (*((_DWORD *)this + 15) == 18)
      {
        v55 = (operations_research::sat::InverseConstraintProto *)*((_QWORD *)this + 6);
        v56 = (const operations_research::sat::InverseConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_67;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 18;
      v101 = *((_QWORD *)this + 1);
      v102 = (google::protobuf::Arena **)(v101 & 0xFFFFFFFFFFFFFFFELL);
      if ((v101 & 1) != 0)
      {
        v55 = (operations_research::sat::InverseConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(*v102);
        *((_QWORD *)this + 6) = v55;
        if (*((_DWORD *)a2 + 15) == 18)
          goto LABEL_142;
      }
      else
      {
        v55 = (operations_research::sat::InverseConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>((google::protobuf::Arena *)v102);
        *((_QWORD *)this + 6) = v55;
        if (*((_DWORD *)a2 + 15) == 18)
        {
LABEL_142:
          v56 = (const operations_research::sat::InverseConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_67;
        }
      }
      v56 = (const operations_research::sat::InverseConstraintProto *)&operations_research::sat::_InverseConstraintProto_default_instance_;
LABEL_67:
      operations_research::sat::InverseConstraintProto::MergeFrom(v55, v56);
      return;
    case 0x10u:
      if (*((_DWORD *)this + 15) == 19)
      {
        v57 = (_QWORD *)*((_QWORD *)this + 6);
        v58 = (uint64_t *)*((_QWORD *)a2 + 6);
        v59 = v58[1];
        if ((v59 & 1) == 0)
          goto LABEL_255;
        goto LABEL_252;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 19;
      v103 = *((_QWORD *)this + 1);
      v104 = (google::protobuf::Arena **)(v103 & 0xFFFFFFFFFFFFFFFELL);
      if ((v103 & 1) != 0)
      {
        v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(*v104);
        *((_QWORD *)this + 6) = v57;
        if (*((_DWORD *)a2 + 15) == 19)
        {
LABEL_145:
          v58 = (uint64_t *)*((_QWORD *)a2 + 6);
          v59 = v58[1];
          if ((v59 & 1) == 0)
            goto LABEL_255;
          goto LABEL_252;
        }
      }
      else
      {
        v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>((google::protobuf::Arena *)v104);
        *((_QWORD *)this + 6) = v57;
        if (*((_DWORD *)a2 + 15) == 19)
          goto LABEL_145;
      }
      v58 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      v59 = qword_25408AE48;
      if ((qword_25408AE48 & 1) == 0)
        goto LABEL_255;
LABEL_252:
      v164 = (const google::protobuf::UnknownFieldSet *)((v59 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v165 = v57[1];
      if ((v165 & 1) != 0)
        v166 = (google::protobuf::UnknownFieldSet *)((v165 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v166 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v57 + 1);
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v166, v164);
LABEL_255:
      v167 = *((_DWORD *)v58 + 4);
      if (v167)
        *((_DWORD *)v57 + 4) = v167;
      v168 = *((_DWORD *)v58 + 5);
      if (v168)
        *((_DWORD *)v57 + 5) = v168;
      v169 = *((_DWORD *)v58 + 6);
      if (v169)
        *((_DWORD *)v57 + 6) = v169;
      return;
    case 0x11u:
      if (*((_DWORD *)this + 15) == 20)
        goto LABEL_92;
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 20;
      v60 = *((_QWORD *)this + 1);
      v61 = (google::protobuf::Arena **)(v60 & 0xFFFFFFFFFFFFFFFELL);
      if ((v60 & 1) != 0)
      {
        v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*v61);
        *((_QWORD *)this + 6) = v20;
        if (*((_DWORD *)a2 + 15) == 20)
          goto LABEL_93;
      }
      else
      {
        v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>((google::protobuf::Arena *)v61);
        *((_QWORD *)this + 6) = v20;
        if (*((_DWORD *)a2 + 15) == 20)
          goto LABEL_93;
      }
      v44 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
      v45 = qword_25408AF50;
      if ((qword_25408AF50 & 1) == 0)
        goto LABEL_97;
      goto LABEL_94;
    case 0x12u:
      if (*((_DWORD *)this + 15) == 21)
      {
        v62 = (operations_research::sat::NoOverlap2DConstraintProto *)*((_QWORD *)this + 6);
        v63 = (const operations_research::sat::NoOverlap2DConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_78;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 21;
      v105 = *((_QWORD *)this + 1);
      v106 = (google::protobuf::Arena **)(v105 & 0xFFFFFFFFFFFFFFFELL);
      if ((v105 & 1) != 0)
      {
        v62 = (operations_research::sat::NoOverlap2DConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(*v106);
        *((_QWORD *)this + 6) = v62;
        if (*((_DWORD *)a2 + 15) == 21)
          goto LABEL_149;
      }
      else
      {
        v62 = (operations_research::sat::NoOverlap2DConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>((google::protobuf::Arena *)v106);
        *((_QWORD *)this + 6) = v62;
        if (*((_DWORD *)a2 + 15) == 21)
        {
LABEL_149:
          v63 = (const operations_research::sat::NoOverlap2DConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_78;
        }
      }
      v63 = (const operations_research::sat::NoOverlap2DConstraintProto *)&operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
LABEL_78:
      operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(v62, v63);
      return;
    case 0x13u:
      if (*((_DWORD *)this + 15) == 22)
      {
        v64 = (operations_research::sat::CumulativeConstraintProto *)*((_QWORD *)this + 6);
        v65 = (const operations_research::sat::CumulativeConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_81;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 22;
      v107 = *((_QWORD *)this + 1);
      v108 = (google::protobuf::Arena **)(v107 & 0xFFFFFFFFFFFFFFFELL);
      if ((v107 & 1) != 0)
      {
        v64 = (operations_research::sat::CumulativeConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(*v108);
        *((_QWORD *)this + 6) = v64;
        if (*((_DWORD *)a2 + 15) == 22)
          goto LABEL_152;
      }
      else
      {
        v64 = (operations_research::sat::CumulativeConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>((google::protobuf::Arena *)v108);
        *((_QWORD *)this + 6) = v64;
        if (*((_DWORD *)a2 + 15) == 22)
        {
LABEL_152:
          v65 = (const operations_research::sat::CumulativeConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_81;
        }
      }
      v65 = (const operations_research::sat::CumulativeConstraintProto *)&operations_research::sat::_CumulativeConstraintProto_default_instance_;
LABEL_81:
      operations_research::sat::CumulativeConstraintProto::MergeFrom(v64, v65);
      return;
    case 0x14u:
      if (*((_DWORD *)this + 15) == 23)
      {
        v66 = (operations_research::sat::RoutesConstraintProto *)*((_QWORD *)this + 6);
        v67 = (const operations_research::sat::RoutesConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_84;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 23;
      v109 = *((_QWORD *)this + 1);
      v110 = (google::protobuf::Arena **)(v109 & 0xFFFFFFFFFFFFFFFELL);
      if ((v109 & 1) != 0)
      {
        v66 = (operations_research::sat::RoutesConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(*v110);
        *((_QWORD *)this + 6) = v66;
        if (*((_DWORD *)a2 + 15) == 23)
          goto LABEL_155;
      }
      else
      {
        v66 = (operations_research::sat::RoutesConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>((google::protobuf::Arena *)v110);
        *((_QWORD *)this + 6) = v66;
        if (*((_DWORD *)a2 + 15) == 23)
        {
LABEL_155:
          v67 = (const operations_research::sat::RoutesConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_84;
        }
      }
      v67 = (const operations_research::sat::RoutesConstraintProto *)&operations_research::sat::_RoutesConstraintProto_default_instance_;
LABEL_84:
      operations_research::sat::RoutesConstraintProto::MergeFrom(v66, v67);
      return;
    case 0x15u:
      if (*((_DWORD *)this + 15) == 24)
      {
        v68 = (operations_research::sat::ReservoirConstraintProto *)*((_QWORD *)this + 6);
        v69 = (const operations_research::sat::ReservoirConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_87;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 24;
      v111 = *((_QWORD *)this + 1);
      v112 = (google::protobuf::Arena **)(v111 & 0xFFFFFFFFFFFFFFFELL);
      if ((v111 & 1) != 0)
      {
        v68 = (operations_research::sat::ReservoirConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(*v112);
        *((_QWORD *)this + 6) = v68;
        if (*((_DWORD *)a2 + 15) == 24)
          goto LABEL_158;
      }
      else
      {
        v68 = (operations_research::sat::ReservoirConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>((google::protobuf::Arena *)v112);
        *((_QWORD *)this + 6) = v68;
        if (*((_DWORD *)a2 + 15) == 24)
        {
LABEL_158:
          v69 = (const operations_research::sat::ReservoirConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_87;
        }
      }
      v69 = (const operations_research::sat::ReservoirConstraintProto *)&operations_research::sat::_ReservoirConstraintProto_default_instance_;
LABEL_87:
      operations_research::sat::ReservoirConstraintProto::MergeFrom(v68, v69);
      return;
    case 0x16u:
      if (*((_DWORD *)this + 15) == 25)
      {
        v70 = (operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)this + 6);
        v71 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)a2 + 6);
        goto LABEL_90;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 25;
      v113 = *((_QWORD *)this + 1);
      v114 = (google::protobuf::Arena **)(v113 & 0xFFFFFFFFFFFFFFFELL);
      if ((v113 & 1) != 0)
      {
        v70 = (operations_research::sat::CircuitCoveringConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(*v114);
        *((_QWORD *)this + 6) = v70;
        if (*((_DWORD *)a2 + 15) == 25)
          goto LABEL_161;
      }
      else
      {
        v70 = (operations_research::sat::CircuitCoveringConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>((google::protobuf::Arena *)v114);
        *((_QWORD *)this + 6) = v70;
        if (*((_DWORD *)a2 + 15) == 25)
        {
LABEL_161:
          v71 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)a2 + 6);
          goto LABEL_90;
        }
      }
      v71 = (const operations_research::sat::CircuitCoveringConstraintProto *)&operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
LABEL_90:
      operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(v70, v71);
      return;
    case 0x17u:
      if (*((_DWORD *)this + 15) == 26)
      {
LABEL_92:
        v20 = *((_QWORD *)this + 6);
        goto LABEL_93;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 26;
      v115 = *((_QWORD *)this + 1);
      v116 = (google::protobuf::Arena *)(v115 & 0xFFFFFFFFFFFFFFFELL);
      if ((v115 & 1) != 0)
        v116 = *(google::protobuf::Arena **)v116;
      v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v116);
      *((_QWORD *)this + 6) = v20;
      if (*((_DWORD *)a2 + 15) == 26)
      {
LABEL_93:
        v44 = (uint64_t *)*((_QWORD *)a2 + 6);
        v45 = v44[1];
        if ((v45 & 1) == 0)
          goto LABEL_97;
        goto LABEL_94;
      }
LABEL_165:
      v44 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      v45 = qword_25408AA68;
      if ((qword_25408AA68 & 1) == 0)
        goto LABEL_97;
LABEL_94:
      v72 = (const google::protobuf::UnknownFieldSet *)((v45 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v73 = *(_QWORD *)(v20 + 8);
      if ((v73 & 1) != 0)
        v74 = (google::protobuf::UnknownFieldSet *)((v73 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v74 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(v20 + 8));
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v74, v72);
LABEL_97:
      v75 = *((_DWORD *)v44 + 4);
      if (v75)
      {
        v77 = *(int *)(v20 + 16);
        v76 = v20 + 16;
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v76, v77 + v75);
        v78 = *(_QWORD *)(v76 + 8);
        *(_DWORD *)v76 += *((_DWORD *)v44 + 4);
        memcpy((void *)(v78 + 4 * v77), (const void *)v44[3], 4 * *((int *)v44 + 4));
      }
      return;
    case 0x18u:
      if (*((_DWORD *)this + 15) == 27)
      {
        v79 = (operations_research::sat::LinearArgumentProto *)*((_QWORD *)this + 6);
        v80 = (const operations_research::sat::LinearArgumentProto *)*((_QWORD *)a2 + 6);
        goto LABEL_101;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 27;
      v117 = *((_QWORD *)this + 1);
      v118 = (google::protobuf::Arena *)(v117 & 0xFFFFFFFFFFFFFFFELL);
      if ((v117 & 1) == 0)
      {
        v79 = (operations_research::sat::LinearArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v118);
        *((_QWORD *)this + 6) = v79;
        if (*((_DWORD *)a2 + 15) != 27)
          goto LABEL_275;
        goto LABEL_169;
      }
      v79 = (operations_research::sat::LinearArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(*(google::protobuf::Arena **)v118);
      *((_QWORD *)this + 6) = v79;
      if (*((_DWORD *)a2 + 15) == 27)
      {
LABEL_169:
        v80 = (const operations_research::sat::LinearArgumentProto *)*((_QWORD *)a2 + 6);
        goto LABEL_101;
      }
      goto LABEL_275;
    case 0x19u:
      if (*((_DWORD *)this + 15) == 28)
      {
        operations_research::sat::LinearArgumentProto::MergeFrom(*((operations_research::sat::LinearArgumentProto **)this + 6), *((const operations_research::sat::LinearArgumentProto **)a2 + 6));
        return;
      }
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 28;
      v119 = *((_QWORD *)this + 1);
      v120 = (google::protobuf::Arena *)(v119 & 0xFFFFFFFFFFFFFFFELL);
      if ((v119 & 1) == 0)
      {
        v79 = (operations_research::sat::LinearArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v120);
        *((_QWORD *)this + 6) = v79;
        if (*((_DWORD *)a2 + 15) != 28)
          goto LABEL_275;
        goto LABEL_172;
      }
      v79 = (operations_research::sat::LinearArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(*(google::protobuf::Arena **)v120);
      *((_QWORD *)this + 6) = v79;
      if (*((_DWORD *)a2 + 15) == 28)
      {
LABEL_172:
        v80 = (const operations_research::sat::LinearArgumentProto *)*((_QWORD *)a2 + 6);
        goto LABEL_101;
      }
LABEL_275:
      v80 = (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
LABEL_101:
      operations_research::sat::LinearArgumentProto::MergeFrom(v79, v80);
      break;
    default:
      return;
  }
}

void operations_research::sat::ConstraintProto::CopyFrom(operations_research::sat::ConstraintProto *this, const google::protobuf::Message *a2)
{
  uint64_t v4;
  google::protobuf::Message *v5;
  uint64_t v6;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v4 = *((_QWORD *)this + 5);
    if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        v6 = *((_QWORD *)this + 1);
        if ((v6 & 1) == 0)
          goto LABEL_11;
        goto LABEL_9;
      }
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
    v6 = *((_QWORD *)this + 1);
    if ((v6 & 1) == 0)
    {
LABEL_11:
      if (*(void (***)(operations_research::sat::ConstraintProto *__hidden))a2 == &off_24F982058)
        operations_research::sat::ConstraintProto::MergeFrom(this, a2);
      else
        google::protobuf::internal::ReflectionOps::Merge(a2, this, v5);
      return;
    }
LABEL_9:
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    goto LABEL_11;
  }
}

void operations_research::sat::ConstraintProto::CopyFrom(operations_research::sat::ConstraintProto *this, const operations_research::sat::ConstraintProto *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v4 = *((_QWORD *)this + 5);
    if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        v5 = *((_QWORD *)this + 1);
        if ((v5 & 1) == 0)
          goto LABEL_6;
        goto LABEL_10;
      }
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) == 0)
    {
LABEL_6:
      operations_research::sat::ConstraintProto::MergeFrom(this, a2);
      return;
    }
LABEL_10:
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
    {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
      operations_research::sat::ConstraintProto::MergeFrom(this, a2);
      return;
    }
    goto LABEL_6;
  }
}

uint64_t operations_research::sat::ConstraintProto::IsInitialized(operations_research::sat::ConstraintProto *this)
{
  return 1;
}

__n128 operations_research::sat::ConstraintProto::InternalSwap(__n128 *this, __n128 *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 result;
  unint64_t v15;
  unint64_t v16;

  v5 = &this->n128_i64[1];
  v4 = this->n128_i64[1];
  v6 = a2->n128_u64[1];
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v7 = (uint64_t *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(&a2->n128_i64[1]);
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      v8 = (uint64_t *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  v9 = *v8;
  *v8 = *v7;
  *v7 = v9;
  v10 = v8[1];
  v8[1] = v7[1];
  v7[1] = v10;
  v11 = v8[2];
  v8[2] = v7[2];
  v7[2] = v11;
LABEL_8:
  v12 = this[1].n128_u64[0];
  v13 = this[1].n128_u64[1];
  result = a2[1];
  this[1] = result;
  a2[1].n128_u64[0] = v12;
  a2[1].n128_u64[1] = v13;
  v15 = this[2].n128_u64[1];
  this[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v15;
  v16 = this[3].n128_u64[0];
  this[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = v16;
  LODWORD(v16) = this[3].n128_u32[3];
  this[3].n128_u32[3] = a2[3].n128_u32[3];
  a2[3].n128_u32[3] = v16;
  return result;
}

uint64_t operations_research::sat::ConstraintProto::GetMetadata(operations_research::sat::ConstraintProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[38];
}

operations_research::sat::CpObjectiveProto *operations_research::sat::CpObjectiveProto::CpObjectiveProto(operations_research::sat::CpObjectiveProto *this, const operations_research::sat::CpObjectiveProto *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  google::protobuf::UnknownFieldSet *v12;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F982108;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    v8 = (void *)*((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v9 = *((_DWORD *)a2 + 16);
  if (v9)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v9);
    v10 = (void *)*((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy(v10, *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  *((_DWORD *)this + 26) = 0;
  v11 = *((_QWORD *)a2 + 1);
  if ((v11 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v12 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v12 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v12, (const google::protobuf::UnknownFieldSet *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  return this;
}

void sub_22DA6E714(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v3);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void sub_22DA6E740(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpObjectiveProto::~CpObjectiveProto(operations_research::sat::CpObjectiveProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::CpObjectiveProto::~CpObjectiveProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::CpObjectiveProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 104) = a2;
  return this;
}

void operations_research::sat::CpObjectiveProto::Clear(operations_research::sat::CpObjectiveProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::CpObjectiveProto::_InternalParse(operations_research::sat::CpObjectiveProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  google::protobuf::internal *v11;
  google::protobuf::internal *v12;
  google::protobuf::internal *v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::internal *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  google::protobuf::internal *TagFallback;
  BOOL v21;
  google::protobuf::UnknownFieldSet *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  google::protobuf::internal *v28;

  v6 = a2;
  v28 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 64);
  v10 = (unsigned int *)((char *)this + 40);
  v11 = (operations_research::sat::CpObjectiveProto *)((char *)this + 16);
  if ((unint64_t)a2 < *(_QWORD *)a3)
  {
    while (1)
    {
LABEL_15:
      v16 = (google::protobuf::internal *)((char *)v6 + 1);
      v17 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0)
        goto LABEL_18;
      v18 = v17 + (*(unsigned __int8 *)v16 << 7);
      v17 = v18 - 128;
      if ((*(char *)v16 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v18 - 128));
      v28 = TagFallback;
      if (!TagFallback)
        return 0;
      v16 = TagFallback;
      v17 = a2;
      v19 = (a2 >> 3) - 1;
      if (v19 > 4)
      {
LABEL_32:
        if (v17)
          v21 = (v17 & 7) == 4;
        else
          v21 = 1;
        if (v21)
        {
          a3[10].i32[0] = v17 - 1;
          return v16;
        }
        if ((*v8 & 1) != 0)
        {
          v22 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v16 = v28;
        }
        v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v17, v22, v16, a3, a5);
        goto LABEL_6;
      }
LABEL_19:
      switch(v19)
      {
        case 0u:
          if (v17 == 10)
          {
            v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, (unsigned __int8 *)v16, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
            goto LABEL_6;
          }
          if (v17 != 8)
            goto LABEL_32;
          v23 = google::protobuf::internal::ReadVarint64(&v28, (const char **)a2);
          v24 = *((unsigned int *)this + 4);
          if ((_DWORD)v24 == *((_DWORD *)this + 5))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v11, v24 + 1);
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v24) = v23;
          *((_DWORD *)this + 4) = v24 + 1;
          break;
        case 1u:
          if (v17 != 17)
            goto LABEL_32;
          *((_QWORD *)this + 11) = *(_QWORD *)v16;
          v28 = (google::protobuf::internal *)((char *)v16 + 8);
          v6 = (google::protobuf::internal *)((char *)v16 + 8);
          if ((unint64_t)v16 + 8 >= *(_QWORD *)a3)
            goto LABEL_13;
          continue;
        case 2u:
          if (v17 != 25)
            goto LABEL_32;
          *((_QWORD *)this + 12) = *(_QWORD *)v16;
          v28 = (google::protobuf::internal *)((char *)v16 + 8);
          v6 = (google::protobuf::internal *)((char *)v16 + 8);
          if ((unint64_t)v16 + 8 >= *(_QWORD *)a3)
            goto LABEL_13;
          continue;
        case 3u:
          if (v17 == 34)
          {
            v12 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v17 != 32)
            goto LABEL_32;
          v14 = google::protobuf::internal::ReadVarint64(&v28, (const char **)a2);
          v15 = *((unsigned int *)this + 10);
          if ((_DWORD)v15 == *((_DWORD *)this + 11))
            google::protobuf::RepeatedField<long long>::Reserve(v10, v15 + 1);
          *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v15) = v14;
          *((_DWORD *)this + 10) = v15 + 1;
          break;
        case 4u:
          if (v17 == 42)
          {
            v12 = (google::protobuf::internal *)v9;
LABEL_5:
            v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v12, (unsigned __int8 *)v16, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
LABEL_6:
            v6 = v13;
            v28 = v13;
            if (!v13)
              return v6;
            goto LABEL_7;
          }
          if (v17 != 40)
            goto LABEL_32;
          v25 = google::protobuf::internal::ReadVarint64(&v28, (const char **)a2);
          v26 = *((unsigned int *)this + 16);
          if ((_DWORD)v26 == *((_DWORD *)this + 17))
            google::protobuf::RepeatedField<long long>::Reserve(v9, v26 + 1);
          *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v26) = v25;
          *((_DWORD *)this + 16) = v26 + 1;
          break;
        default:
          goto LABEL_32;
      }
      v6 = v28;
      if (!v28)
        return v6;
LABEL_7:
      if ((unint64_t)v6 >= *(_QWORD *)a3)
        goto LABEL_13;
    }
    v16 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_18:
    v28 = v16;
    v19 = (v17 >> 3) - 1;
    goto LABEL_19;
  }
LABEL_13:
  if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) != (google::protobuf::internal *)a3[3].i32[1])
  {
    v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
    v28 = v6;
    if ((a2 & 1) == 0)
      goto LABEL_15;
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CpObjectiveProto::_InternalSerialize(operations_research::sat::CpObjectiveProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v40 = v6 >> 14;
      v6 >>= 7;
    }
    while (v40);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  if (*((double *)this + 11) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v16 = *((_QWORD *)this + 11);
    *a2 = 17;
    *(_QWORD *)(a2 + 1) = v16;
    a2 += 9;
  }
  if (*((double *)this + 12) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v17 = *((_QWORD *)this + 12);
    *a2 = 25;
    *(_QWORD *)(a2 + 1) = v17;
    a2 += 9;
  }
  v18 = *((_DWORD *)this + 14);
  if ((int)v18 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      v19 = (unsigned __int8 *)(a2 + 1);
      if (v18 < 0x80)
        goto LABEL_27;
    }
    else
    {
      *a2 = 34;
      v19 = (unsigned __int8 *)(a2 + 1);
      if (v18 < 0x80)
      {
LABEL_27:
        a2 += 2;
        *v19 = v18;
        v20 = (unint64_t *)*((_QWORD *)this + 6);
        v21 = &v20[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v27 = *v20++;
            v22 = v27;
            if (v27 > 0x7F)
            {
LABEL_32:
              *a2 = v22 | 0x80;
              v24 = v22 >> 7;
              if (v22 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v24 | 0x80;
                  v25 = v24 >> 7;
                  ++a2;
                  v26 = v24 >> 14;
                  v24 >>= 7;
                }
                while (v26);
                *(a2 - 1) = v25;
              }
              else
              {
                a2[1] = v24;
                a2 += 2;
              }
              goto LABEL_29;
            }
          }
          else
          {
            v23 = *v20++;
            v22 = v23;
            if (v23 > 0x7F)
              goto LABEL_32;
          }
          *a2++ = v22;
LABEL_29:
          if (v20 >= v21)
            goto LABEL_39;
        }
      }
    }
    do
    {
      *v19++ = v18 | 0x80;
      v41 = v18 >> 14;
      v18 >>= 7;
    }
    while (v41);
    a2 = (char *)(v19 - 1);
    goto LABEL_27;
  }
LABEL_39:
  v28 = *((_DWORD *)this + 20);
  if ((int)v28 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 42;
      v29 = (unsigned __int8 *)(a2 + 1);
      if (v28 < 0x80)
        goto LABEL_42;
    }
    else
    {
      *a2 = 42;
      v29 = (unsigned __int8 *)(a2 + 1);
      if (v28 < 0x80)
      {
LABEL_42:
        a2 += 2;
        *v29 = v28;
        v30 = (unint64_t *)*((_QWORD *)this + 9);
        v31 = &v30[*((int *)this + 16)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v37 = *v30++;
            v32 = v37;
            if (v37 > 0x7F)
            {
LABEL_47:
              *a2 = v32 | 0x80;
              v34 = v32 >> 7;
              if (v32 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v34 | 0x80;
                  v35 = v34 >> 7;
                  ++a2;
                  v36 = v34 >> 14;
                  v34 >>= 7;
                }
                while (v36);
                *(a2 - 1) = v35;
              }
              else
              {
                a2[1] = v34;
                a2 += 2;
              }
              goto LABEL_44;
            }
          }
          else
          {
            v33 = *v30++;
            v32 = v33;
            if (v33 > 0x7F)
              goto LABEL_47;
          }
          *a2++ = v32;
LABEL_44:
          if (v30 >= v31)
            goto LABEL_54;
        }
      }
    }
    do
    {
      *v29++ = v28 | 0x80;
      v42 = v28 >> 14;
      v28 >>= 7;
    }
    while (v42);
    a2 = (char *)(v29 - 1);
    goto LABEL_42;
  }
LABEL_54:
  v38 = *((_QWORD *)this + 1);
  if ((v38 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::CpObjectiveProto::ByteSizeLong(operations_research::sat::CpObjectiveProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const google::protobuf::UnknownFieldSet *v17;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0)
    v3 = v4;
  if (v2)
    v5 = v2;
  else
    v5 = 0;
  if (!v2)
    v3 = 0;
  *((_DWORD *)this + 8) = v5;
  v6 = v3 + v2;
  v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (v7)
  {
    v8 = v7;
    if ((v7 & 0x80000000) != 0)
      v9 = 11;
    else
      v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v6 += v9;
  }
  else
  {
    v8 = 0;
  }
  *((_DWORD *)this + 14) = v8;
  v10 = v6 + v7;
  v11 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
  v12 = 11;
  v13 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v11 >= 0)
    v12 = v13;
  v14 = v12 + v10;
  if (v11)
    v15 = v11;
  else
    v15 = 0;
  if (!v11)
    v14 = v10;
  *((_DWORD *)this + 20) = v15;
  v16 = v14 + v11;
  if (*((double *)this + 11) != 0.0)
    v16 += 9;
  if (*((double *)this + 12) == 0.0)
    v17 = (const google::protobuf::UnknownFieldSet *)v16;
  else
    v17 = (const google::protobuf::UnknownFieldSet *)(v16 + 9);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CpObjectiveProto *)((char *)this + 8), v17, (_DWORD *)this + 26);
  *((_DWORD *)this + 26) = (_DWORD)v17;
  return (char *)v17;
}

void operations_research::sat::CpObjectiveProto::MergeFrom(operations_research::sat::CpObjectiveProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::CpObjectiveProto *__hidden))a2 == &off_24F982108)
    operations_research::sat::CpObjectiveProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::CpObjectiveProto::MergeFrom(operations_research::sat::CpObjectiveProto *this, const operations_research::sat::CpObjectiveProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    v16 = *((int *)this + 16);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v16 + v15);
    v17 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy((void *)(v17 + 8 * v16), *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  v18 = *((double *)a2 + 11);
  if (v18 != 0.0)
    *((double *)this + 11) = v18;
  v19 = *((double *)a2 + 12);
  if (v19 != 0.0)
    *((double *)this + 12) = v19;
}

void operations_research::sat::CpObjectiveProto::CopyFrom(operations_research::sat::CpObjectiveProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_DWORD *)this + 16) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::CpObjectiveProto *__hidden))a2 == &off_24F982108)
      operations_research::sat::CpObjectiveProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::CpObjectiveProto::IsInitialized(operations_research::sat::CpObjectiveProto *this)
{
  return 1;
}

uint64_t operations_research::sat::CpObjectiveProto::GetMetadata(operations_research::sat::CpObjectiveProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[40];
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::~DecisionStrategyProto_AffineTransformation(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    v3 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x22E31DF78](v2, 0x20C40DC1BFBCFLL);
    }
  }
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    v3 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x22E31DF78](v2, 0x20C40DC1BFBCFLL);
    }
  }
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::DecisionStrategyProto_AffineTransformation::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::Clear(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  uint64_t v1;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::DecisionStrategyProto_AffineTransformation::_InternalParse(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, uint64_t a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t *v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t TagFallback;
  unsigned int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  google::protobuf::UnknownFieldSet *v26;
  google::protobuf::internal::ParseContext *v27;

  v8 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1])
        return a2;
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]);
      if ((v25 & 1) != 0)
        return a2;
    }
    v9 = (char *)a2 + 1;
    v10 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
      goto LABEL_8;
    v11 = v10 + (*v9 << 7);
    v10 = v11 - 128;
    if (*v9 < 0)
      break;
    v9 = (char *)a2 + 2;
LABEL_8:
    v12 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
LABEL_30:
      if (v10 != 24)
        goto LABEL_14;
      a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
      v20 = *v9;
      if (*v9 < 0)
      {
        v21 = *(char *)a2;
        v20 = v20 + (v21 << 7) - 128;
        if ((v21 & 0x80000000) == 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
          goto LABEL_3;
        }
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v20);
        *((_QWORD *)this + 3) = v22;
        if (!a2)
          return a2;
      }
      else
      {
LABEL_3:
        *((_QWORD *)this + 3) = v20;
      }
    }
    else
    {
LABEL_9:
      if (v12 == 2)
      {
        if (v10 != 16)
          goto LABEL_14;
        a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
        v14 = *v9;
        if (*v9 < 0)
        {
          v15 = *(char *)a2;
          v14 = v14 + (v15 << 7) - 128;
          if ((v15 & 0x80000000) == 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
            goto LABEL_23;
          }
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v14);
          *((_QWORD *)this + 2) = v23;
          if (!a2)
            return a2;
        }
        else
        {
LABEL_23:
          *((_QWORD *)this + 2) = v14;
        }
      }
      else if (v12 == 1 && v10 == 8)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
        LODWORD(v16) = *v9;
        if ((v16 & 0x80) == 0)
          goto LABEL_27;
        v17 = *(char *)a2;
        v16 = (const char *)(v16 + (v17 << 7) - 128);
        if (v17 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v16);
          *((_DWORD *)this + 8) = v24;
          if (!a2)
            return a2;
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_27:
          *((_DWORD *)this + 8) = (_DWORD)v16;
        }
      }
      else
      {
LABEL_14:
        if (!v10 || (v10 & 7) == 4)
        {
          a3[10].i32[0] = v10 - 1;
          return (google::protobuf::UnknownFieldSet *)v9;
        }
        if ((*v8 & 1) != 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL)+ 8), (google::protobuf::UnknownFieldSet *)v9, a3, a5);
          if (!a2)
            return a2;
        }
        else
        {
          v26 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v26, (google::protobuf::UnknownFieldSet *)v9, a3, v27);
          if (!a2)
            return a2;
        }
      }
    }
  }
  TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v11 - 128));
  if (TagFallback)
  {
    v9 = (char *)TagFallback;
    v10 = v19;
    v12 = v19 >> 3;
    if (v19 >> 3 != 3)
      goto LABEL_9;
    goto LABEL_30;
  }
  return 0;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::DecisionStrategyProto_AffineTransformation::_InternalSerialize(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = *((_DWORD *)this + 8);
  if (!v6)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 2);
    if (!v7)
      goto LABEL_21;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = *((_DWORD *)this + 8);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      v7 = *((_QWORD *)this + 2);
      if (!v7)
        goto LABEL_21;
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F)
      goto LABEL_4;
  }
  a2[1] = v6 | 0x80;
  v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    v10 = v8 >> 7;
    ++a2;
    v11 = v8 >> 14;
    v8 >>= 7;
  }
  while (v11);
  *(a2 - 1) = v10;
  v7 = *((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_21;
LABEL_10:
  if (*(_QWORD *)a3 > (unint64_t)a2)
  {
    *a2 = 16;
    if (v7 <= 0x7F)
      goto LABEL_12;
    goto LABEL_19;
  }
  a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v7 = *((_QWORD *)this + 2);
  *a2 = 16;
  if (v7 > 0x7F)
  {
LABEL_19:
    a2[1] = v7 | 0x80;
    v12 = v7 >> 7;
    if (v7 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++a2;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(a2 - 1) = v13;
      v9 = *((_QWORD *)this + 3);
      if (!v9)
        goto LABEL_35;
      goto LABEL_22;
    }
    a2[2] = v12;
    a2 += 3;
LABEL_21:
    v9 = *((_QWORD *)this + 3);
    if (!v9)
      goto LABEL_35;
LABEL_22:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v9 = *((_QWORD *)this + 3);
      *a2 = 24;
      if (v9 <= 0x7F)
        goto LABEL_24;
    }
    else
    {
      *a2 = 24;
      if (v9 <= 0x7F)
      {
LABEL_24:
        a2[1] = v9;
        a2 += 2;
        goto LABEL_35;
      }
    }
    a2[1] = v9 | 0x80;
    v15 = v9 >> 7;
    if (v9 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        v16 = v15 >> 7;
        ++a2;
        v17 = v15 >> 14;
        v15 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
    }
    goto LABEL_35;
  }
LABEL_12:
  a2[1] = v7;
  a2 += 2;
  v9 = *((_QWORD *)this + 3);
  if (v9)
    goto LABEL_22;
LABEL_35:
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::DecisionStrategyProto_AffineTransformation::ByteSizeLong(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;
  char *v5;
  const google::protobuf::UnknownFieldSet *v6;
  int v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1)
    v4 = (const google::protobuf::UnknownFieldSet *)(v3 + 1);
  else
    v4 = 0;
  v5 = (char *)v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2)
    v6 = (const google::protobuf::UnknownFieldSet *)(v5 + 1);
  else
    v6 = v4;
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    if (v7 < 0)
      v8 = 11;
    else
      v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v8);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::DecisionStrategyProto_AffineTransformation *)((char *)this + 8), v6, (_DWORD *)this + 9);
  *((_DWORD *)this + 9) = (_DWORD)v6;
  return (char *)v6;
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::MergeFrom(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const google::protobuf::UnknownFieldSet *v13;

  if (*(void (***)(operations_research::sat::DecisionStrategyProto_AffineTransformation *__hidden))a2 == off_24F9821B8)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((char *)this + 8);
      v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v8 = *((_QWORD *)this + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v13 = v7;
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
        v7 = v13;
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    }
    v10 = *((_QWORD *)a2 + 2);
    if (v10)
      *((_QWORD *)this + 2) = v10;
    v11 = *((_QWORD *)a2 + 3);
    if (v11)
      *((_QWORD *)this + 3) = v11;
    v12 = *((_DWORD *)a2 + 8);
    if (v12)
      *((_DWORD *)this + 8) = v12;
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::CopyFrom(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  const google::protobuf::UnknownFieldSet *v9;
  google::protobuf::UnknownFieldSet *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  unint64_t v15;

  if (a2 != this)
  {
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    v5 = (_QWORD *)((char *)this + 16);
    *((_DWORD *)this + 8) = 0;
    v7 = (uint64_t *)((char *)this + 8);
    v6 = *((_QWORD *)this + 1);
    if ((v6 & 1) != 0 && *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::DecisionStrategyProto_AffineTransformation *__hidden))a2 == off_24F9821B8)
    {
      v8 = *((_QWORD *)a2 + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (const google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        if ((*v7 & 1) != 0)
        {
          v10 = (google::protobuf::UnknownFieldSet *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v14 = v7;
          v15 = (v8 & 0xFFFFFFFFFFFFFFFELL) + 8;
          v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v14);
          v9 = (const google::protobuf::UnknownFieldSet *)v15;
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom(v10, v9);
      }
      v11 = *((_QWORD *)a2 + 2);
      if (v11)
        *v5 = v11;
      v12 = *((_QWORD *)a2 + 3);
      if (v12)
        *((_QWORD *)this + 3) = v12;
      v13 = *((_DWORD *)a2 + 8);
      if (v13)
        *((_DWORD *)this + 8) = v13;
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
    }
  }
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::CopyFrom(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, const operations_research::sat::DecisionStrategyProto_AffineTransformation *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  const google::protobuf::UnknownFieldSet *v8;
  google::protobuf::UnknownFieldSet *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a2 != this)
  {
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    v4 = (_QWORD *)((char *)this + 16);
    *((_DWORD *)this + 8) = 0;
    v6 = (uint64_t *)((char *)this + 8);
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    v7 = *((_QWORD *)a2 + 1);
    if ((v7 & 1) != 0)
    {
      v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      if ((*v6 & 1) != 0)
        v9 = (google::protobuf::UnknownFieldSet *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v8);
    }
    v10 = *((_QWORD *)a2 + 2);
    if (v10)
      *v4 = v10;
    v11 = *((_QWORD *)a2 + 3);
    if (v11)
      *((_QWORD *)this + 3) = v11;
    v12 = *((_DWORD *)a2 + 8);
    if (v12)
      *((_DWORD *)this + 8) = v12;
  }
}

uint64_t operations_research::sat::DecisionStrategyProto_AffineTransformation::IsInitialized(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  return 1;
}

uint64_t operations_research::sat::DecisionStrategyProto_AffineTransformation::GetMetadata(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[42];
}

operations_research::sat::DecisionStrategyProto *operations_research::sat::DecisionStrategyProto::DecisionStrategyProto(operations_research::sat::DecisionStrategyProto *this, const operations_research::sat::DecisionStrategyProto *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  google::protobuf::Arena *v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int *v22;
  uint64_t v23;
  google::protobuf::UnknownFieldSet *v24;
  uint64_t *v26;
  unsigned int *v27;
  uint64_t v28;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F982268;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v7 = *((_DWORD *)a2 + 12);
  if (v7)
  {
    v28 = *((_QWORD *)a2 + 7);
    v27 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::DecisionStrategyProto *)((char *)this + 40), v7);
    v26 = v4;
    v8 = **((_DWORD **)this + 7);
    v9 = *((_DWORD *)this + 12);
    v10 = v8 - v9;
    if (v8 - v9 >= v7)
      v11 = v7;
    else
      v11 = v10;
    if ((int)v11 >= 1)
    {
      v12 = (uint64_t *)v27;
      v13 = (uint64_t *)(v28 + 8);
      do
      {
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(*v13++, *v12++);
        --v11;
      }
      while (v11);
    }
    if (v10 < v7)
    {
      v14 = (google::protobuf::Arena *)*((_QWORD *)this + 5);
      v15 = v9 + v7 - v8;
      v16 = 2 * v10;
      v17 = &v27[v16];
      v18 = (uint64_t *)(v16 * 4 + v28 + 8);
      do
      {
        v19 = *v18;
        v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(v14);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(v19, (uint64_t)v20);
        *(_QWORD *)v17 = v20;
        v17 += 2;
        ++v18;
        --v15;
      }
      while (v15);
    }
    v21 = *((_DWORD *)this + 12) + v7;
    *((_DWORD *)this + 12) = v21;
    v22 = (int *)*((_QWORD *)this + 7);
    v4 = v26;
    if (*v22 < v21)
      *v22 = v21;
  }
  *((_DWORD *)this + 18) = 0;
  v23 = *((_QWORD *)a2 + 1);
  if ((v23 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v24 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v24 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v24, (const google::protobuf::UnknownFieldSet *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  return this;
}

void sub_22DA6FD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(v9);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto(operations_research::sat::DecisionStrategyProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>((_QWORD *)this + 5);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::DecisionStrategyProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void operations_research::sat::DecisionStrategyProto::Clear(operations_research::sat::DecisionStrategyProto *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_DWORD *)this + 4) = 0;
  v2 = *((unsigned int *)this + 12);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v4 = *v3;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
      v5 = *(_QWORD *)(v4 + 8);
      if ((v5 & 1) != 0
        && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
      ++v3;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 12) = 0;
  }
  *((_QWORD *)this + 8) = 0;
  v6 = *((_QWORD *)this + 1);
  if ((v6 & 1) != 0 && *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

char *operations_research::sat::DecisionStrategyProto::_InternalParse(operations_research::sat::DecisionStrategyProto *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  char *SizeFallback;
  uint64_t *v8;
  unsigned int *v9;
  google::protobuf::internal *v10;
  google::protobuf::UnknownFieldSet *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  google::protobuf::UnknownFieldSet *TagFallback;
  int v16;
  int v17;
  google::protobuf::internal *v18;
  int *v19;
  uint64_t v20;
  int v21;
  operations_research::sat::DecisionStrategyProto_AffineTransformation *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  int v27;
  __int32 v28;
  BOOL v29;
  google::protobuf::UnknownFieldSet *v30;
  int v31;
  int32x2_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  google::protobuf::UnknownFieldSet *v36;
  google::protobuf::internal::ParseContext *v37;
  google::protobuf::UnknownFieldSet *v39;

  SizeFallback = (char *)a2;
  v39 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 40);
  v10 = (operations_research::sat::DecisionStrategyProto *)((char *)this + 16);
  while (1)
  {
LABEL_4:
    if ((unint64_t)SizeFallback >= *(_QWORD *)a3)
    {
      if (&SizeFallback[-*(_QWORD *)&a3[1]] == (char *)a3[3].i32[1])
        return SizeFallback;
      SizeFallback = (char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, SizeFallback, a3[11].i32[1]);
      v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if ((a2 & 1) != 0)
        return SizeFallback;
    }
    v11 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 1);
    v12 = *SizeFallback;
    if ((*SizeFallback & 0x80000000) == 0)
    {
      v39 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 1);
      v13 = (v12 >> 3) - 1;
      if (v13 <= 3)
        goto LABEL_13;
      goto LABEL_55;
    }
    v14 = v12 + (*(unsigned __int8 *)v11 << 7);
    v12 = v14 - 128;
    if (*(char *)v11 < 0)
      break;
    v11 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 2);
    v39 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 2);
    v13 = (v12 >> 3) - 1;
    if (v13 <= 3)
      goto LABEL_13;
LABEL_55:
    if (v12)
      v35 = (v12 & 7) == 4;
    else
      v35 = 1;
    if (v35)
    {
      a3[10].i32[0] = v12 - 1;
      return (char *)v11;
    }
    if ((*v8 & 1) != 0)
    {
      SizeFallback = (char *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), v11, a3, a5);
      v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (!SizeFallback)
        return SizeFallback;
    }
    else
    {
      v36 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      SizeFallback = (char *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v36, v39, a3, v37);
      v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (!SizeFallback)
        return SizeFallback;
    }
  }
  TagFallback = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)SizeFallback, (const char *)(v14 - 128));
  v39 = TagFallback;
  if (TagFallback)
  {
    v11 = TagFallback;
    v12 = a2;
    v13 = (a2 >> 3) - 1;
LABEL_13:
    switch(v13)
    {
      case 0u:
        if (v12 == 10)
        {
          SizeFallback = google::protobuf::internal::PackedInt32Parser(v10, (unsigned __int8 *)v11, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
          v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback)
            return SizeFallback;
        }
        else
        {
          if (v12 != 8)
            goto LABEL_55;
          v33 = google::protobuf::internal::ReadVarint64(&v39, (const char **)a2);
          v34 = *((unsigned int *)this + 4);
          if ((_DWORD)v34 == *((_DWORD *)this + 5))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v34 + 1);
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v34) = v33;
          *((_DWORD *)this + 4) = v34 + 1;
          SizeFallback = (char *)v39;
          if (!v39)
            return SizeFallback;
        }
        goto LABEL_4;
      case 1u:
        if (v12 != 16)
          goto LABEL_55;
        SizeFallback = (char *)v11 + 1;
        a2 = (google::protobuf::UnknownFieldSet *)*(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_3;
        v16 = *SizeFallback;
        a2 = (google::protobuf::UnknownFieldSet *)(a2 + (v16 << 7) - 128);
        if (v16 < 0)
        {
          SizeFallback = (char *)google::protobuf::internal::VarintParseSlow64(v11, (const char *)a2);
          v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback)
            return SizeFallback;
          *((_DWORD *)this + 16) = (_DWORD)a2;
        }
        else
        {
          SizeFallback = (char *)v11 + 2;
LABEL_3:
          v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_DWORD *)this + 16) = (_DWORD)a2;
        }
        goto LABEL_4;
      case 2u:
        if (v12 != 24)
          goto LABEL_55;
        SizeFallback = (char *)v11 + 1;
        a2 = (google::protobuf::UnknownFieldSet *)*(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_26;
        v17 = *SizeFallback;
        a2 = (google::protobuf::UnknownFieldSet *)(a2 + (v17 << 7) - 128);
        if (v17 < 0)
        {
          SizeFallback = (char *)google::protobuf::internal::VarintParseSlow64(v11, (const char *)a2);
          v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback)
            return SizeFallback;
          *((_DWORD *)this + 17) = (_DWORD)a2;
        }
        else
        {
          SizeFallback = (char *)v11 + 2;
LABEL_26:
          v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_DWORD *)this + 17) = (_DWORD)a2;
        }
        goto LABEL_4;
      case 3u:
        if (v12 != 34)
          goto LABEL_55;
        SizeFallback = (char *)v11 - 1;
        break;
      default:
        goto LABEL_55;
    }
    while (2)
    {
      v18 = (google::protobuf::internal *)(SizeFallback + 1);
      v39 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 1);
      v19 = (int *)*((_QWORD *)this + 7);
      if (v19)
      {
        v20 = *((int *)this + 12);
        v21 = *v19;
        if ((int)v20 < *v19)
        {
          *((_DWORD *)this + 12) = v20 + 1;
          v22 = *(operations_research::sat::DecisionStrategyProto_AffineTransformation **)&v19[2 * v20 + 2];
          v23 = (const char *)*(unsigned __int8 *)v18;
          if (*(char *)v18 < 0)
          {
LABEL_32:
            SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(v18, v23);
            if (!SizeFallback)
              return SizeFallback;
LABEL_39:
            v26 = a3[1];
            v27 = (_DWORD)v23 + (_DWORD)SizeFallback - v26.i32[0];
            *a3 = (int32x2_t)(*(_QWORD *)&v26 + (v27 & (v27 >> 31)));
            v28 = a3[3].i32[1];
            a3[3].i32[1] = v27;
            v26.i32[0] = a3[11].i32[0];
            v29 = __OFSUB__(v26.i32[0]--, 1);
            a3[11].i32[0] = v26.i32[0];
            if (v26.i32[0] < 0 != v29)
              return 0;
            v30 = operations_research::sat::DecisionStrategyProto_AffineTransformation::_InternalParse(v22, (google::protobuf::UnknownFieldSet *)SizeFallback, a3, (uint64_t)a4, a5);
            SizeFallback = (char *)v30;
            if (!v30)
              return SizeFallback;
            ++a3[11].i32[0];
            if (a3[10].i32[0])
              return 0;
            v31 = a3[3].i32[1] + v28 - v27;
            a3[3].i32[1] = v31;
            v32 = (int32x2_t)(*(_QWORD *)&a3[1] + (v31 & (v31 >> 31)));
            *a3 = v32;
            v39 = v30;
            if (*(_QWORD *)&v32 <= (unint64_t)v30 || *(_BYTE *)v30 != 34)
              goto LABEL_4;
            continue;
          }
LABEL_38:
          SizeFallback = (char *)v18 + 1;
          goto LABEL_39;
        }
        if (v21 == *((_DWORD *)this + 13))
        {
LABEL_36:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v21 + 1);
          v19 = (int *)*((_QWORD *)this + 7);
          v21 = *v19;
        }
        *v19 = v21 + 1;
        v22 = (operations_research::sat::DecisionStrategyProto_AffineTransformation *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(*((google::protobuf::Arena **)this + 5));
        v24 = *((_QWORD *)this + 7);
        v25 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25 + 8) = v22;
        v18 = v39;
        v23 = (const char *)*(unsigned __int8 *)v39;
        if (*(char *)v39 < 0)
          goto LABEL_32;
        goto LABEL_38;
      }
      break;
    }
    v21 = *((_DWORD *)this + 13);
    goto LABEL_36;
  }
  return 0;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::DecisionStrategyProto::_InternalSerialize(operations_research::sat::DecisionStrategyProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int i;
  unsigned __int8 *v25;
  operations_research::sat::DecisionStrategyProto_AffineTransformation *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v18 = v6 >> 14;
      v6 >>= 7;
    }
    while (v18);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 16);
  if (!v16)
  {
LABEL_27:
    v17 = *((_DWORD *)this + 17);
    if (!v17)
      goto LABEL_39;
    goto LABEL_28;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v16 = *((_DWORD *)this + 16);
    *a2 = 16;
    if (v16 <= 0x7F)
    {
LABEL_19:
      a2[1] = v16;
      a2 += 2;
      v17 = *((_DWORD *)this + 17);
      if (!v17)
        goto LABEL_39;
      goto LABEL_28;
    }
  }
  else
  {
    *a2 = 16;
    if (v16 <= 0x7F)
      goto LABEL_19;
  }
  a2[1] = v16 | 0x80;
  v19 = (unint64_t)(int)v16 >> 7;
  if (!(v16 >> 14))
  {
    a2[2] = v19;
    a2 += 3;
    goto LABEL_27;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v19 | 0x80;
    v21 = v19 >> 7;
    ++a2;
    v22 = v19 >> 14;
    v19 >>= 7;
  }
  while (v22);
  *(a2 - 1) = v21;
  v17 = *((_DWORD *)this + 17);
  if (!v17)
  {
LABEL_39:
    v20 = *((_DWORD *)this + 12);
    if (!v20)
      goto LABEL_54;
    goto LABEL_40;
  }
LABEL_28:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v17 = *((_DWORD *)this + 17);
    *a2 = 24;
    if (v17 <= 0x7F)
    {
LABEL_30:
      a2[1] = v17;
      a2 += 2;
      v20 = *((_DWORD *)this + 12);
      if (!v20)
        goto LABEL_54;
      goto LABEL_40;
    }
  }
  else
  {
    *a2 = 24;
    if (v17 <= 0x7F)
      goto LABEL_30;
  }
  a2[1] = v17 | 0x80;
  v23 = (unint64_t)(int)v17 >> 7;
  if (!(v17 >> 14))
  {
    a2[2] = v23;
    a2 += 3;
    goto LABEL_39;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v23 | 0x80;
    v31 = v23 >> 7;
    ++a2;
    v32 = v23 >> 14;
    v23 >>= 7;
  }
  while (v32);
  *(a2 - 1) = v31;
  v20 = *((_DWORD *)this + 12);
  if (!v20)
    goto LABEL_54;
LABEL_40:
  for (i = 0; i != v20; ++i)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v26 = *(operations_research::sat::DecisionStrategyProto_AffineTransformation **)(*((_QWORD *)this + 7) + 8 * i + 8);
    *a2 = 34;
    v27 = *((_DWORD *)v26 + 9);
    if (v27 <= 0x7F)
    {
      a2[1] = v27;
      v25 = (unsigned __int8 *)(a2 + 2);
    }
    else
    {
      a2[1] = v27 | 0x80;
      v28 = v27 >> 7;
      if (v27 >> 14)
      {
        v25 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v25 - 1) = v28 | 0x80;
          v29 = v28 >> 7;
          ++v25;
          v30 = v28 >> 14;
          v28 >>= 7;
        }
        while (v30);
        *(v25 - 1) = v29;
      }
      else
      {
        a2[2] = v28;
        v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    a2 = (char *)operations_research::sat::DecisionStrategyProto_AffineTransformation::_InternalSerialize(v26, (char *)v25, a3, a4);
  }
LABEL_54:
  v33 = *((_QWORD *)this + 1);
  if ((v33 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::DecisionStrategyProto::ByteSizeLong(operations_research::sat::DecisionStrategyProto *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    v3 = v2;
    if ((v2 & 0x80000000) != 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  *((_DWORD *)this + 8) = v3;
  v5 = *((int *)this + 12);
  v6 = (const google::protobuf::UnknownFieldSet *)(v4 + v2 + v5);
  v7 = *((_QWORD *)this + 7);
  if (v7)
    v8 = (uint64_t *)(v7 + 8);
  else
    v8 = 0;
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = *v8;
      v11 = *(_QWORD *)(*v8 + 16);
      if (!v11)
        break;
      v12 = (char *)(((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6) + 1);
      v13 = *(_QWORD *)(v10 + 24);
      if (v13)
        goto LABEL_13;
LABEL_14:
      v14 = *(_DWORD *)(v10 + 32);
      if (v14)
      {
        if (v14 < 0)
          v15 = 11;
        else
          v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
        v12 += v15;
      }
      if ((*(_BYTE *)(v10 + 8) & 1) != 0)
        v12 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v10 + 8), (const google::protobuf::UnknownFieldSet *)v12, (_DWORD *)(v10 + 36));
      else
        *(_DWORD *)(v10 + 36) = (_DWORD)v12;
      v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6
                                                     + (_QWORD)v12
                                                     + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6));
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_26;
    }
    v12 = 0;
    v13 = *(_QWORD *)(v10 + 24);
    if (!v13)
      goto LABEL_14;
LABEL_13:
    v12 += ((9 * (__clz(v13 | 1) ^ 0x3F) + 73) >> 6) + 1;
    goto LABEL_14;
  }
LABEL_26:
  v16 = *((_DWORD *)this + 16);
  if (v16)
  {
    if (v16 < 0)
      v17 = 11;
    else
      v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v17);
  }
  v18 = *((_DWORD *)this + 17);
  if (v18)
  {
    if (v18 < 0)
      v19 = 11;
    else
      v19 = ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v19);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::DecisionStrategyProto *)((char *)this + 8), v6, (_DWORD *)this + 18);
  *((_DWORD *)this + 18) = (_DWORD)v6;
  return (char *)v6;
}

void operations_research::sat::DecisionStrategyProto::MergeFrom(operations_research::sat::DecisionStrategyProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::DecisionStrategyProto *__hidden))a2 == &off_24F982268)
    operations_research::sat::DecisionStrategyProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::DecisionStrategyProto::MergeFrom(operations_research::sat::DecisionStrategyProto *this, const operations_research::sat::DecisionStrategyProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::Arena *v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  int *v30;
  int v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 12);
  if (v12)
  {
    v34 = *((_QWORD *)a2 + 7);
    v33 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::DecisionStrategyProto *)((char *)this + 40), v12);
    v13 = **((_DWORD **)this + 7);
    v14 = *((_DWORD *)this + 12);
    v15 = v13 - v14;
    if (v13 - v14 >= v12)
      v16 = v12;
    else
      v16 = v15;
    if ((int)v16 >= 1)
    {
      v17 = (uint64_t *)v33;
      v18 = (uint64_t *)(v34 + 8);
      do
      {
        v20 = *v18++;
        v19 = v20;
        v21 = *v17++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(v19, v21);
        --v16;
      }
      while (v16);
    }
    if (v15 < v12)
    {
      v22 = (google::protobuf::Arena *)*((_QWORD *)this + 5);
      v23 = v14 + v12 - v13;
      v24 = 2 * v15;
      v25 = &v33[v24];
      v26 = (uint64_t *)(v24 * 4 + v34 + 8);
      do
      {
        v27 = *v26++;
        v28 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(v22);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(v27, (uint64_t)v28);
        *(_QWORD *)v25 = v28;
        v25 += 2;
        --v23;
      }
      while (v23);
    }
    v29 = *((_DWORD *)this + 12) + v12;
    *((_DWORD *)this + 12) = v29;
    v30 = (int *)*((_QWORD *)this + 7);
    if (*v30 < v29)
      *v30 = v29;
  }
  v31 = *((_DWORD *)a2 + 16);
  if (v31)
    *((_DWORD *)this + 16) = v31;
  v32 = *((_DWORD *)a2 + 17);
  if (v32)
    *((_DWORD *)this + 17) = v32;
}

void operations_research::sat::DecisionStrategyProto::CopyFrom(operations_research::sat::DecisionStrategyProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v5 = *((unsigned int *)this + 12);
    if ((int)v5 >= 1)
    {
      v6 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
      do
      {
        v7 = *v6;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_DWORD *)(v7 + 32) = 0;
        v8 = *(_QWORD *)(v7 + 8);
        if ((v8 & 1) != 0
          && *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16))
        {
          google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL)
                                                                                               + 8));
        }
        ++v6;
        --v5;
      }
      while (v5);
      *((_DWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 8) = 0;
    v9 = *((_QWORD *)this + 1);
    if ((v9 & 1) != 0 && *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v9 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::DecisionStrategyProto *__hidden))a2 == &off_24F982268)
      operations_research::sat::DecisionStrategyProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::DecisionStrategyProto::CopyFrom(operations_research::sat::DecisionStrategyProto *this, const operations_research::sat::DecisionStrategyProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v4 = *((unsigned int *)this + 12);
    if ((int)v4 >= 1)
    {
      v5 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
      do
      {
        v6 = *v5;
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 24) = 0;
        *(_DWORD *)(v6 + 32) = 0;
        v7 = *(_QWORD *)(v6 + 8);
        if ((v7 & 1) != 0
          && *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
        {
          google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL)
                                                                                               + 8));
        }
        ++v5;
        --v4;
      }
      while (v4);
      *((_DWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 8) = 0;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0 && *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    operations_research::sat::DecisionStrategyProto::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::DecisionStrategyProto::IsInitialized(operations_research::sat::DecisionStrategyProto *this)
{
  return 1;
}

uint64_t operations_research::sat::DecisionStrategyProto::GetMetadata(operations_research::sat::DecisionStrategyProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[44];
}

operations_research::sat::PartialVariableAssignment *operations_research::sat::PartialVariableAssignment::PartialVariableAssignment(operations_research::sat::PartialVariableAssignment *this, const operations_research::sat::PartialVariableAssignment *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  google::protobuf::UnknownFieldSet *v10;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F982318;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    v8 = (void *)*((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((_DWORD *)this + 15) = 0;
  v9 = *((_QWORD *)a2 + 1);
  if ((v9 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v10 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v10, (const google::protobuf::UnknownFieldSet *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  return this;
}

void sub_22DA70D84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void sub_22DA70DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(operations_research::sat::PartialVariableAssignment *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::PartialVariableAssignment::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void operations_research::sat::PartialVariableAssignment::Clear(operations_research::sat::PartialVariableAssignment *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::PartialVariableAssignment::_InternalParse(operations_research::sat::PartialVariableAssignment *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::internal *v10;
  google::protobuf::UnknownFieldSet *v11;
  google::protobuf::internal *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  google::protobuf::internal *TagFallback;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal *v23;

  v6 = a2;
  v23 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::PartialVariableAssignment *)((char *)this + 40);
  v10 = (operations_research::sat::PartialVariableAssignment *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v23 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v13 = (unsigned __int8 *)v6 + 1;
    v14 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_9;
    v15 = v14 + (*v13 << 7);
    v14 = v15 - 128;
    if ((char)*v13 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v15 - 128));
      v23 = TagFallback;
      if (!TagFallback)
        return 0;
      v13 = (unsigned __int8 *)TagFallback;
      v14 = a2;
      v16 = a2 >> 3;
      if (a2 >> 3 != 2)
        goto LABEL_10;
LABEL_15:
      if (v14 == 18)
      {
        v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v9, v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        goto LABEL_4;
      }
      if (v14 == 16)
      {
        v20 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
        v21 = *((unsigned int *)this + 10);
        if ((_DWORD)v21 == *((_DWORD *)this + 11))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v9, v21 + 1);
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v21) = v20;
        *((_DWORD *)this + 10) = v21 + 1;
        goto LABEL_28;
      }
LABEL_30:
      if (!v14 || (v14 & 7) == 4)
      {
        a3[10].i32[0] = v14 - 1;
        return (google::protobuf::internal *)v13;
      }
      if ((*v8 & 1) != 0)
      {
        v11 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v11 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        v13 = (unsigned __int8 *)v23;
      }
      v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v11, (google::protobuf::UnknownFieldSet *)v13, a3, a5);
LABEL_4:
      v6 = v12;
      v23 = v12;
      if (!v12)
        return v6;
    }
    else
    {
      v13 = (unsigned __int8 *)v6 + 2;
LABEL_9:
      v23 = (google::protobuf::internal *)v13;
      v16 = v14 >> 3;
      if (v14 >> 3 == 2)
        goto LABEL_15;
LABEL_10:
      if (v16 != 1)
        goto LABEL_30;
      if (v14 == 10)
      {
        v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v10, v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        goto LABEL_4;
      }
      if (v14 != 8)
        goto LABEL_30;
      v18 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
      v19 = *((unsigned int *)this + 4);
      if ((_DWORD)v19 == *((_DWORD *)this + 5))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v19 + 1);
      *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v19) = v18;
      *((_DWORD *)this + 4) = v19 + 1;
LABEL_28:
      v6 = v23;
      if (!v23)
        return v6;
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::PartialVariableAssignment::_InternalSerialize(operations_research::sat::PartialVariableAssignment *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v28 = v6 >> 14;
      v6 >>= 7;
    }
    while (v28);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
        goto LABEL_19;
    }
    else
    {
      *a2 = 18;
      v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *v17 = v16;
        v18 = (unint64_t *)*((_QWORD *)this + 6);
        v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v25 = *v18++;
            v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  v23 = v22 >> 7;
                  ++a2;
                  v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 > 0x7F)
              goto LABEL_24;
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19)
            goto LABEL_31;
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      v29 = v16 >> 14;
      v16 >>= 7;
    }
    while (v29);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::PartialVariableAssignment::ByteSizeLong(operations_research::sat::PartialVariableAssignment *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const google::protobuf::UnknownFieldSet *v7;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    goto LABEL_12;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4)
      goto LABEL_6;
    goto LABEL_9;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (!v4)
    goto LABEL_9;
LABEL_6:
  v5 = v4;
  if ((v4 & 0x80000000) != 0)
    v6 = 11;
  else
    v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v3 += v6;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::PartialVariableAssignment *)((char *)this + 8), v7, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v7;
  return (char *)(v3 + v4);
}

void operations_research::sat::PartialVariableAssignment::MergeFrom(operations_research::sat::PartialVariableAssignment *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::PartialVariableAssignment *__hidden))a2 == &off_24F982318)
    operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::PartialVariableAssignment::CopyFrom(operations_research::sat::PartialVariableAssignment *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::PartialVariableAssignment *__hidden))a2 == &off_24F982318)
      operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::PartialVariableAssignment::IsInitialized(operations_research::sat::PartialVariableAssignment *this)
{
  return 1;
}

uint64_t operations_research::sat::PartialVariableAssignment::GetMetadata(operations_research::sat::PartialVariableAssignment *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[46];
}

_QWORD *google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto>::~RepeatedPtrField(_QWORD *a1)
{
  operations_research::sat::DecisionStrategyProto **v2;
  operations_research::sat::DecisionStrategyProto **v4;
  uint64_t v5;

  v2 = (operations_research::sat::DecisionStrategyProto **)a1[2];
  if (v2 && !*a1)
  {
    v4 = v2 + 1;
    v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto(*v4);
          MEMORY[0x22E31DF78]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      v2 = (operations_research::sat::DecisionStrategyProto **)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

_QWORD *google::protobuf::RepeatedPtrField<operations_research::sat::ConstraintProto>::~RepeatedPtrField(_QWORD *a1)
{
  operations_research::sat::ConstraintProto **v2;
  operations_research::sat::ConstraintProto **v4;
  uint64_t v5;

  v2 = (operations_research::sat::ConstraintProto **)a1[2];
  if (v2 && !*a1)
  {
    v4 = v2 + 1;
    v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::ConstraintProto::~ConstraintProto(*v4);
          MEMORY[0x22E31DF78]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      v2 = (operations_research::sat::ConstraintProto **)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

_QWORD *google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(_QWORD *a1)
{
  operations_research::sat::IntegerVariableProto **v2;
  operations_research::sat::IntegerVariableProto **v4;
  uint64_t v5;

  v2 = (operations_research::sat::IntegerVariableProto **)a1[2];
  if (v2 && !*a1)
  {
    v4 = v2 + 1;
    v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::IntegerVariableProto::~IntegerVariableProto(*v4);
          MEMORY[0x22E31DF78]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      v2 = (operations_research::sat::IntegerVariableProto **)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

operations_research::sat::CpModelProto *operations_research::sat::CpModelProto::CpModelProto(operations_research::sat::CpModelProto *this, google::protobuf::Arena *a2)
{
  *(_QWORD *)this = &off_24F9823C8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a2;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = a2;
  *((_DWORD *)this + 34) = 0;
  if (atomic_load(scc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22DA7177C(_Unwind_Exception *a1)
{
  uint64_t v1;
  operations_research::sat::DecisionStrategyProto **v3;
  operations_research::sat::ConstraintProto **v4;
  operations_research::sat::ConstraintProto **v5;
  uint64_t v6;
  operations_research::sat::ConstraintProto **v7;
  operations_research::sat::IntegerVariableProto **v8;
  operations_research::sat::IntegerVariableProto **v9;
  uint64_t v10;
  operations_research::sat::IntegerVariableProto **v11;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 88);
  v3 = *(operations_research::sat::DecisionStrategyProto ***)(v1 + 80);
  if (v3)
    operations_research::sat::CpModelProto::CpModelProto((_QWORD *)(v1 + 64), v3, (operations_research::sat::DecisionStrategyProto ***)(v1 + 80));
  *(_QWORD *)(v1 + 80) = 0;
  v4 = *(operations_research::sat::ConstraintProto ***)(v1 + 56);
  if (v4 && !*(_QWORD *)(v1 + 40))
  {
    v5 = v4 + 1;
    v6 = *(unsigned int *)v4;
    if ((int)v6 >= 1)
    {
      do
      {
        v7 = v5;
        if (*v5)
        {
          operations_research::sat::ConstraintProto::~ConstraintProto(*v5);
          MEMORY[0x22E31DF78]();
        }
        v5 = v7 + 1;
        --v6;
      }
      while (v6);
      v4 = *(operations_research::sat::ConstraintProto ***)(v1 + 56);
    }
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 56) = 0;
  v8 = *(operations_research::sat::IntegerVariableProto ***)(v1 + 32);
  if (v8 && !*(_QWORD *)(v1 + 16))
  {
    v9 = v8 + 1;
    v10 = *(unsigned int *)v8;
    if ((int)v10 >= 1)
    {
      do
      {
        v11 = v9;
        if (*v9)
        {
          operations_research::sat::IntegerVariableProto::~IntegerVariableProto(*v9);
          MEMORY[0x22E31DF78]();
        }
        v9 = v11 + 1;
        --v10;
      }
      while (v10);
      v8 = *(operations_research::sat::IntegerVariableProto ***)(v1 + 32);
    }
    operator delete(v8);
  }
  *(_QWORD *)(v1 + 32) = 0;
  _Unwind_Resume(a1);
}

operations_research::sat::CpModelProto *operations_research::sat::CpModelProto::CpModelProto(operations_research::sat::CpModelProto *this, const operations_research::sat::CpModelProto *a2)
{
  int v4;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  operations_research::sat::IntegerVariableProto **v11;
  operations_research::sat::IntegerVariableProto **v12;
  operations_research::sat::IntegerVariableProto *v13;
  operations_research::sat::IntegerVariableProto *v14;
  operations_research::sat::IntegerVariableProto *v15;
  google::protobuf::Arena *v16;
  int v17;
  uint64_t v18;
  operations_research::sat::IntegerVariableProto **v19;
  operations_research::sat::IntegerVariableProto **v20;
  operations_research::sat::IntegerVariableProto *v21;
  operations_research::sat::IntegerVariableProto *v22;
  int v23;
  int *v24;
  int v25;
  unsigned int *v26;
  unsigned int *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  operations_research::sat::ConstraintProto **v32;
  operations_research::sat::ConstraintProto **v33;
  google::protobuf::Arena *v34;
  int v35;
  uint64_t v36;
  operations_research::sat::ConstraintProto **v37;
  operations_research::sat::ConstraintProto **v38;
  operations_research::sat::ConstraintProto *v39;
  operations_research::sat::ConstraintProto *v40;
  int v41;
  int *v42;
  int v43;
  unsigned int *v44;
  unsigned int *v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  operations_research::sat::DecisionStrategyProto **v50;
  operations_research::sat::DecisionStrategyProto **v51;
  google::protobuf::Arena *v52;
  int v53;
  uint64_t v54;
  operations_research::sat::DecisionStrategyProto **v55;
  operations_research::sat::DecisionStrategyProto **v56;
  operations_research::sat::DecisionStrategyProto *v57;
  operations_research::sat::DecisionStrategyProto *v58;
  int v59;
  int *v60;
  int v61;
  void *v62;
  uint64_t v63;
  google::protobuf::UnknownFieldSet *v64;
  uint64_t v65;
  google::protobuf::Arena *v66;
  operations_research::sat::CpObjectiveProto *v67;
  operations_research::sat::PartialVariableAssignment *v68;
  uint64_t v70;
  uint64_t v71;
  google::protobuf::internal::RepeatedPtrFieldBase *v72;
  google::protobuf::internal::RepeatedPtrFieldBase *v73;
  google::protobuf::internal::RepeatedPtrFieldBase *v74;
  uint64_t *v75;

  *((_QWORD *)this + 1) = 0;
  v75 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v74 = (operations_research::sat::CpModelProto *)((char *)this + 16);
  *(_QWORD *)this = &off_24F9823C8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v4 = *((_DWORD *)a2 + 6);
  if (v4)
  {
    v72 = (google::protobuf::internal::RepeatedPtrFieldBase *)*((_QWORD *)a2 + 4);
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v74, v4);
    v6 = v5;
    v7 = **((_DWORD **)this + 4);
    v8 = *((_DWORD *)this + 6);
    v9 = v7 - v8;
    if (v7 - v8 >= v4)
      v10 = v4;
    else
      v10 = v9;
    if ((int)v10 >= 1)
    {
      v11 = (operations_research::sat::IntegerVariableProto **)((char *)v72 + 8);
      v12 = (operations_research::sat::IntegerVariableProto **)v5;
      do
      {
        v14 = *v11++;
        v13 = v14;
        v15 = *v12++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v4)
    {
      v16 = *(google::protobuf::Arena **)v74;
      v17 = v8 + v4 - v7;
      v18 = 2 * v9;
      v19 = (operations_research::sat::IntegerVariableProto **)&v6[v18];
      v20 = (operations_research::sat::IntegerVariableProto **)((char *)v72 + v18 * 4 + 8);
      do
      {
        v21 = *v20++;
        v22 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v16);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v21, v22);
        *v19++ = v22;
        --v17;
      }
      while (v17);
    }
    v23 = *((_DWORD *)this + 6) + v4;
    *((_DWORD *)this + 6) = v23;
    v24 = (int *)*((_QWORD *)this + 4);
    if (*v24 < v23)
      *v24 = v23;
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v73 = (operations_research::sat::CpModelProto *)((char *)this + 40);
  *((_QWORD *)this + 7) = 0;
  v25 = *((_DWORD *)a2 + 12);
  if (v25)
  {
    v71 = *((_QWORD *)a2 + 7);
    v26 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v73, v25);
    v27 = v26;
    v28 = **((_DWORD **)this + 7);
    v29 = *((_DWORD *)this + 12);
    v30 = v28 - v29;
    if (v28 - v29 >= v25)
      v31 = v25;
    else
      v31 = v30;
    if ((int)v31 >= 1)
    {
      v32 = (operations_research::sat::ConstraintProto **)(v71 + 8);
      v33 = (operations_research::sat::ConstraintProto **)v26;
      do
      {
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(*v32++, *v33++);
        --v31;
      }
      while (v31);
    }
    if (v30 < v25)
    {
      v34 = *(google::protobuf::Arena **)v73;
      v35 = v29 + v25 - v28;
      v36 = 2 * v30;
      v37 = (operations_research::sat::ConstraintProto **)&v27[v36];
      v38 = (operations_research::sat::ConstraintProto **)(v36 * 4 + v71 + 8);
      do
      {
        v39 = *v38;
        v40 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(v34);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(v39, v40);
        *v37++ = v40;
        ++v38;
        --v35;
      }
      while (v35);
    }
    v41 = *((_DWORD *)this + 12) + v25;
    *((_DWORD *)this + 12) = v41;
    v42 = (int *)*((_QWORD *)this + 7);
    if (*v42 < v41)
      *v42 = v41;
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v43 = *((_DWORD *)a2 + 18);
  if (v43)
  {
    v70 = *((_QWORD *)a2 + 10);
    v44 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpModelProto *)((char *)this + 64), v43);
    v45 = v44;
    v46 = **((_DWORD **)this + 10);
    v47 = *((_DWORD *)this + 18);
    v48 = v46 - v47;
    if (v46 - v47 >= v43)
      v49 = v43;
    else
      v49 = v48;
    if ((int)v49 >= 1)
    {
      v50 = (operations_research::sat::DecisionStrategyProto **)(v70 + 8);
      v51 = (operations_research::sat::DecisionStrategyProto **)v44;
      do
      {
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(*v50++, *v51++);
        --v49;
      }
      while (v49);
    }
    if (v48 < v43)
    {
      v52 = (google::protobuf::Arena *)*((_QWORD *)this + 8);
      v53 = v47 + v43 - v46;
      v54 = 2 * v48;
      v55 = (operations_research::sat::DecisionStrategyProto **)&v45[v54];
      v56 = (operations_research::sat::DecisionStrategyProto **)(v54 * 4 + v70 + 8);
      do
      {
        v57 = *v56;
        v58 = (operations_research::sat::DecisionStrategyProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(v52);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(v57, v58);
        *v55++ = v58;
        ++v56;
        --v53;
      }
      while (v53);
    }
    v59 = *((_DWORD *)this + 18) + v43;
    *((_DWORD *)this + 18) = v59;
    v60 = (int *)*((_QWORD *)this + 10);
    if (*v60 < v59)
      *v60 = v59;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v61 = *((_DWORD *)a2 + 22);
  if (v61)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 22, v61);
    v62 = (void *)*((_QWORD *)this + 12);
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
    memcpy(v62, *((const void **)a2 + 12), 4 * *((int *)a2 + 22));
  }
  *((_DWORD *)this + 34) = 0;
  v63 = *((_QWORD *)a2 + 1);
  if ((v63 & 1) != 0)
  {
    if ((*v75 & 1) != 0)
      v64 = (google::protobuf::UnknownFieldSet *)((*v75 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v64 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v75);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v64, (const google::protobuf::UnknownFieldSet *)((v63 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  v65 = *((_QWORD *)a2 + 14);
  if (*(char *)(v65 + 23) < 0)
  {
    if (!*(_QWORD *)(v65 + 8))
      goto LABEL_50;
  }
  else if (!*(_BYTE *)(v65 + 23))
  {
    goto LABEL_50;
  }
  v66 = (google::protobuf::Arena *)(*v75 & 0xFFFFFFFFFFFFFFFELL);
  if ((*v75 & 1) != 0)
    v66 = *(google::protobuf::Arena **)v66;
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 14, v66, (__int128 *)v65);
LABEL_50:
  if (a2 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    v68 = 0;
    *((_QWORD *)this + 15) = 0;
    goto LABEL_57;
  }
  if (!*((_QWORD *)a2 + 15))
  {
    *((_QWORD *)this + 15) = 0;
    if (*((_QWORD *)a2 + 16))
      goto LABEL_53;
LABEL_56:
    v68 = 0;
    goto LABEL_57;
  }
  v67 = (operations_research::sat::CpObjectiveProto *)operator new();
  operations_research::sat::CpObjectiveProto::CpObjectiveProto(v67, *((const operations_research::sat::CpObjectiveProto **)a2 + 15));
  *((_QWORD *)this + 15) = v67;
  if (!*((_QWORD *)a2 + 16))
    goto LABEL_56;
LABEL_53:
  v68 = (operations_research::sat::PartialVariableAssignment *)operator new();
  operations_research::sat::PartialVariableAssignment::PartialVariableAssignment(v68, *((const operations_research::sat::PartialVariableAssignment **)a2 + 16));
LABEL_57:
  *((_QWORD *)this + 16) = v68;
  return this;
}

void sub_22DA71CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  MEMORY[0x22E31DF78](v13, 0x1081C40D3396336);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v14);
  google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto>::~RepeatedPtrField(v15);
  google::protobuf::RepeatedPtrField<operations_research::sat::ConstraintProto>::~RepeatedPtrField(a12);
  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(a13);
  _Unwind_Resume(a1);
}

void sub_22DA71D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(a13);
  _Unwind_Resume(a1);
}

void sub_22DA71D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13)
{
  google::protobuf::RepeatedPtrField<operations_research::sat::ConstraintProto>::~RepeatedPtrField(a12);
  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(a13);
  _Unwind_Resume(a1);
}

void sub_22DA71DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(a13);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpModelProto::~CpModelProto(operations_research::sat::CpModelProto *this)
{
  uint64_t v2;
  operations_research::sat::CpObjectiveProto *v4;
  operations_research::sat::PartialVariableAssignment *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  operations_research::sat::DecisionStrategyProto **v11;
  operations_research::sat::DecisionStrategyProto **v12;
  uint64_t v13;
  operations_research::sat::ConstraintProto **v14;
  operations_research::sat::ConstraintProto **v15;
  uint64_t v16;
  operations_research::sat::IntegerVariableProto **v17;
  operations_research::sat::IntegerVariableProto **v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 14);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E31DF78](v2, 0x1012C40EC159624);
  }
  if (this != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    v4 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
    if (v4)
    {
      operations_research::sat::CpObjectiveProto::~CpObjectiveProto(v4);
      MEMORY[0x22E31DF78]();
    }
    v5 = (operations_research::sat::PartialVariableAssignment *)*((_QWORD *)this + 16);
    if (v5)
    {
      operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v5);
      MEMORY[0x22E31DF78]();
    }
  }
  v6 = *((_QWORD *)this + 1);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL);
    if (v7 && v8 == 0)
    {
      v10 = *(void **)(v7 + 8);
      if (v10 != *(void **)(v7 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v7 + 8));
        v10 = *(void **)(v7 + 8);
      }
      if (v10)
      {
        *(_QWORD *)(v7 + 16) = v10;
        operator delete(v10);
      }
      MEMORY[0x22E31DF78](v7, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 88);
  v11 = (operations_research::sat::DecisionStrategyProto **)*((_QWORD *)this + 10);
  if (v11 && !*((_QWORD *)this + 8))
  {
    v12 = v11 + 1;
    v13 = *(unsigned int *)v11;
    if ((int)v13 >= 1)
    {
      do
      {
        if (*v12)
        {
          operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto(*v12);
          MEMORY[0x22E31DF78]();
        }
        ++v12;
        --v13;
      }
      while (v13);
      v11 = (operations_research::sat::DecisionStrategyProto **)*((_QWORD *)this + 10);
    }
    operator delete(v11);
  }
  *((_QWORD *)this + 10) = 0;
  v14 = (operations_research::sat::ConstraintProto **)*((_QWORD *)this + 7);
  if (v14 && !*((_QWORD *)this + 5))
  {
    v15 = v14 + 1;
    v16 = *(unsigned int *)v14;
    if ((int)v16 >= 1)
    {
      do
      {
        if (*v15)
        {
          operations_research::sat::ConstraintProto::~ConstraintProto(*v15);
          MEMORY[0x22E31DF78]();
        }
        ++v15;
        --v16;
      }
      while (v16);
      v14 = (operations_research::sat::ConstraintProto **)*((_QWORD *)this + 7);
    }
    operator delete(v14);
  }
  *((_QWORD *)this + 7) = 0;
  v17 = (operations_research::sat::IntegerVariableProto **)*((_QWORD *)this + 4);
  if (v17 && !*((_QWORD *)this + 2))
  {
    v18 = v17 + 1;
    v19 = *(unsigned int *)v17;
    if ((int)v19 >= 1)
    {
      do
      {
        if (*v18)
        {
          operations_research::sat::IntegerVariableProto::~IntegerVariableProto(*v18);
          MEMORY[0x22E31DF78]();
        }
        ++v18;
        --v19;
      }
      while (v19);
      v17 = (operations_research::sat::IntegerVariableProto **)*((_QWORD *)this + 4);
    }
    operator delete(v17);
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

{
  operations_research::sat::CpModelProto::~CpModelProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::CpModelProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 136) = a2;
  return this;
}

void operations_research::sat::CpModelProto::Clear(operations_research::sat::CpModelProto *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  operations_research::sat::CpObjectiveProto *v26;
  operations_research::sat::PartialVariableAssignment *v27;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    while (1)
    {
      v4 = *v3;
      *(_DWORD *)(v4 + 16) = 0;
      v5 = *(_QWORD *)(v4 + 40);
      if ((uint64_t *)v5 == &google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_7;
      if ((*(char *)(v5 + 23) & 0x80000000) == 0)
        break;
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      v6 = *(_QWORD *)(v4 + 8);
      if ((v6 & 1) != 0)
      {
LABEL_8:
        if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
          google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                               + 8));
      }
LABEL_3:
      ++v3;
      if (!--v2)
      {
        *((_DWORD *)this + 6) = 0;
        goto LABEL_13;
      }
    }
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
LABEL_7:
    v6 = *(_QWORD *)(v4 + 8);
    if ((v6 & 1) != 0)
      goto LABEL_8;
    goto LABEL_3;
  }
LABEL_13:
  v7 = *((unsigned int *)this + 12);
  if ((int)v7 < 1)
    goto LABEL_25;
  v8 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
  do
  {
    v9 = *v8;
    *(_DWORD *)(v9 + 16) = 0;
    v10 = *(_QWORD *)(v9 + 40);
    if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        **(_BYTE **)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        operations_research::sat::ConstraintProto::clear_constraint(v9);
        v11 = *(_QWORD *)(v9 + 8);
        if ((v11 & 1) == 0)
          goto LABEL_15;
        goto LABEL_20;
      }
      *(_BYTE *)v10 = 0;
      *(_BYTE *)(v10 + 23) = 0;
    }
    operations_research::sat::ConstraintProto::clear_constraint(v9);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v11 & 1) == 0)
      goto LABEL_15;
LABEL_20:
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v11 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
LABEL_15:
    ++v8;
    --v7;
  }
  while (v7);
  *((_DWORD *)this + 12) = 0;
LABEL_25:
  v12 = *((unsigned int *)this + 18);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = *((_QWORD *)this + 10) + 8;
    do
    {
      v15 = *(_QWORD *)(v14 + 8 * v13);
      *(_DWORD *)(v15 + 16) = 0;
      v16 = *(unsigned int *)(v15 + 48);
      if ((int)v16 >= 1)
      {
        v17 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 8);
        do
        {
          v18 = *v17;
          *(_QWORD *)(v18 + 16) = 0;
          *(_QWORD *)(v18 + 24) = 0;
          *(_DWORD *)(v18 + 32) = 0;
          v19 = *(_QWORD *)(v18 + 8);
          if ((v19 & 1) != 0
            && *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 16))
          {
            google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                                                                                                 + 8));
          }
          ++v17;
          --v16;
        }
        while (v16);
        *(_DWORD *)(v15 + 48) = 0;
      }
      *(_QWORD *)(v15 + 64) = 0;
      v20 = *(_QWORD *)(v15 + 8);
      if ((v20 & 1) != 0
        && *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v20 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
      ++v13;
    }
    while (v13 != v12);
    *((_DWORD *)this + 18) = 0;
  }
  *((_DWORD *)this + 22) = 0;
  v21 = *((_QWORD *)this + 14);
  if ((uint64_t *)v21 == &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_42:
    v22 = *((_QWORD *)this + 1);
    v23 = v22 & 1;
    v24 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
    v25 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if ((v22 & 1) != 0)
      goto LABEL_55;
  }
  else
  {
    if ((*(char *)(v21 + 23) & 0x80000000) == 0)
    {
      *(_BYTE *)v21 = 0;
      *(_BYTE *)(v21 + 23) = 0;
      goto LABEL_42;
    }
    **(_BYTE **)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    v22 = *((_QWORD *)this + 1);
    v23 = v22 & 1;
    v24 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
    v25 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if ((v22 & 1) != 0)
    {
LABEL_55:
      if (!*v24)
        goto LABEL_44;
      goto LABEL_46;
    }
  }
  if (!v25)
  {
LABEL_44:
    v26 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
    if (v26)
    {
      operations_research::sat::CpObjectiveProto::~CpObjectiveProto(v26);
      MEMORY[0x22E31DF78]();
      v22 = *((_QWORD *)this + 1);
      v23 = v22 & 1;
      v24 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
LABEL_46:
  *((_QWORD *)this + 15) = 0;
  if (v23)
  {
    if (!*v24)
      goto LABEL_48;
  }
  else if (!v24)
  {
LABEL_48:
    v27 = (operations_research::sat::PartialVariableAssignment *)*((_QWORD *)this + 16);
    if (v27)
    {
      operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v27);
      MEMORY[0x22E31DF78]();
      v22 = *((_QWORD *)this + 1);
      v23 = v22 & 1;
    }
  }
  *((_QWORD *)this + 16) = 0;
  if (v23)
  {
    if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v22 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
  }
}

std::string::value_type *operations_research::sat::CpModelProto::_InternalParse(operations_research::sat::CpModelProto *this, std::string::value_type *__s, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  char *SizeFallback;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  std::string::value_type *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  google::protobuf::Arena *v16;
  std::string *v17;
  const char *v18;
  size_t size;
  uint64_t TagFallback;
  BOOL v21;
  google::protobuf::UnknownFieldSet *v22;
  char *v23;
  google::protobuf::internal *v24;
  int *v25;
  uint64_t v26;
  int v27;
  operations_research::sat::IntegerVariableProto *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x2_t v32;
  int v33;
  __int32 v34;
  BOOL v35;
  std::string::value_type *v36;
  int v37;
  int32x2_t v38;
  google::protobuf::internal *v39;
  int *v40;
  uint64_t v41;
  int v42;
  operations_research::sat::ConstraintProto *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x2_t v47;
  int v48;
  __int32 v49;
  std::string::value_type *v50;
  int v51;
  int32x2_t v52;
  operations_research::sat::CpObjectiveProto *v53;
  unint64_t v54;
  google::protobuf::internal *v55;
  int *v56;
  uint64_t v57;
  int v58;
  operations_research::sat::DecisionStrategyProto *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int32x2_t v63;
  int v64;
  __int32 v65;
  char *v66;
  int v67;
  int32x2_t v68;
  operations_research::sat::PartialVariableAssignment *v69;
  unint64_t v70;
  std::string *v71;
  BOOL v72;
  int v73;
  google::protobuf::Arena *v74;
  int32x2_t v75;
  int v76;
  __int32 v77;
  google::protobuf::internal *v78;
  google::protobuf::Arena *v79;
  int32x2_t v80;
  int v81;
  int Varint64;
  uint64_t v83;
  google::protobuf::internal *v85;
  std::string **v86;
  unsigned int v87[2];

  SizeFallback = __s;
  v8 = (uint64_t *)((char *)this + 8);
  v85 = (operations_research::sat::CpModelProto *)((char *)this + 88);
  v9 = (unsigned int *)((char *)this + 64);
  v10 = (unsigned int *)((char *)this + 40);
  v11 = (unsigned int *)((char *)this + 16);
  v86 = (std::string **)((char *)this + 112);
  *(_QWORD *)v87 = __s;
  while (1)
  {
LABEL_2:
    if ((unint64_t)SizeFallback >= *(_QWORD *)a3)
    {
      if (&SizeFallback[-*(_QWORD *)&a3[1]] == (char *)a3[3].i32[1])
        return SizeFallback;
      SizeFallback = (char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, SizeFallback, a3[11].i32[1]);
      *(_QWORD *)v87 = SizeFallback;
      if ((__s & 1) != 0)
        return SizeFallback;
    }
    v12 = SizeFallback + 1;
    v13 = *SizeFallback;
    if ((*SizeFallback & 0x80000000) == 0)
      goto LABEL_6;
    v14 = v13 + (*v12 << 7);
    v13 = v14 - 128;
    if (*v12 < 0)
      break;
    v12 = SizeFallback + 2;
LABEL_6:
    *(_QWORD *)v87 = v12;
    v15 = (v13 >> 3) - 1;
LABEL_7:
    switch(v15)
    {
      case 0u:
        if (v13 != 10)
          goto LABEL_16;
        v16 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v8 & 1) == 0)
        {
          v17 = *v86;
          if (*v86 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_12;
LABEL_11:
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v86, v16, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v86;
          v12 = *(std::string::value_type **)v87;
          goto LABEL_12;
        }
        v16 = *(google::protobuf::Arena **)v16;
        v17 = *v86;
        if (*v86 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_11;
LABEL_12:
        *(_QWORD *)v87 = google::protobuf::internal::InlineGreedyStringParser(v17, v12, (uint64_t)a3);
        if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
        {
          v71 = (std::string *)v17->__r_.__value_.__r.__words[0];
          size = v17->__r_.__value_.__l.__size_;
          if ((size & 0x8000000000000000) != 0)
            google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v17->__r_.__value_.__l.__size_, "size_t to int conversion", v18);
          v17 = v71;
        }
        else
        {
          size = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        }
        v72 = google::protobuf::internal::VerifyUTF8(v17, size, (google::protobuf::internal *)"operations_research.sat.CpModelProto.name");
        SizeFallback = *(char **)v87;
        if (*(_QWORD *)v87)
          v73 = 2;
        else
          v73 = 4;
        if (v72 && v73 == 2)
          continue;
        return 0;
      case 1u:
        if (v13 != 18)
          goto LABEL_16;
        SizeFallback = v12 - 1;
        while (1)
        {
          v24 = (google::protobuf::internal *)(SizeFallback + 1);
          *(_QWORD *)v87 = SizeFallback + 1;
          v25 = (int *)*((_QWORD *)this + 4);
          if (!v25)
            break;
          v26 = *((int *)this + 6);
          v27 = *v25;
          if ((int)v26 < *v25)
          {
            *((_DWORD *)this + 6) = v26 + 1;
            v28 = *(operations_research::sat::IntegerVariableProto **)&v25[2 * v26 + 2];
            v29 = *(unsigned __int8 *)v24;
            if (*(char *)v24 < 0)
              goto LABEL_28;
            goto LABEL_34;
          }
          if (v27 == *((_DWORD *)this + 7))
            goto LABEL_32;
LABEL_33:
          *v25 = v27 + 1;
          v28 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
          v30 = *((_QWORD *)this + 4);
          v31 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v31 + 1;
          *(_QWORD *)(v30 + 8 * v31 + 8) = v28;
          v24 = *(google::protobuf::internal **)v87;
          v29 = **(_BYTE **)v87;
          if ((char)**(_BYTE **)v87 < 0)
          {
LABEL_28:
            SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(v24, (const char *)v29);
            if (!SizeFallback)
              return SizeFallback;
            goto LABEL_35;
          }
LABEL_34:
          SizeFallback = (char *)v24 + 1;
LABEL_35:
          v32 = a3[1];
          v33 = v29 + (_DWORD)SizeFallback - v32.i32[0];
          *a3 = (int32x2_t)(*(_QWORD *)&v32 + (v33 & (v33 >> 31)));
          v34 = a3[3].i32[1];
          a3[3].i32[1] = v33;
          v32.i32[0] = a3[11].i32[0];
          v35 = __OFSUB__(v32.i32[0]--, 1);
          a3[11].i32[0] = v32.i32[0];
          if (v32.i32[0] < 0 != v35)
            return 0;
          v36 = operations_research::sat::IntegerVariableProto::_InternalParse(v28, SizeFallback, a3, a4, a5);
          SizeFallback = v36;
          if (!v36)
            return SizeFallback;
          ++a3[11].i32[0];
          if (a3[10].i32[0])
            return 0;
          v37 = a3[3].i32[1] + v34 - v33;
          a3[3].i32[1] = v37;
          v38 = (int32x2_t)(*(_QWORD *)&a3[1] + (v37 & (v37 >> 31)));
          *a3 = v38;
          *(_QWORD *)v87 = v36;
          if (*(_QWORD *)&v38 <= (unint64_t)v36 || *v36 != 18)
            goto LABEL_2;
        }
        v27 = *((_DWORD *)this + 7);
LABEL_32:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v11, v27 + 1);
        v25 = (int *)*((_QWORD *)this + 4);
        v27 = *v25;
        goto LABEL_33;
      case 2u:
        if (v13 != 26)
          goto LABEL_16;
        SizeFallback = v12 - 1;
        while (1)
        {
          v39 = (google::protobuf::internal *)(SizeFallback + 1);
          *(_QWORD *)v87 = SizeFallback + 1;
          v40 = (int *)*((_QWORD *)this + 7);
          if (!v40)
            break;
          v41 = *((int *)this + 12);
          v42 = *v40;
          if ((int)v41 < *v40)
          {
            *((_DWORD *)this + 12) = v41 + 1;
            v43 = *(operations_research::sat::ConstraintProto **)&v40[2 * v41 + 2];
            v44 = *(unsigned __int8 *)v39;
            if (*(char *)v39 < 0)
              goto LABEL_46;
            goto LABEL_52;
          }
          if (v42 == *((_DWORD *)this + 13))
            goto LABEL_50;
LABEL_51:
          *v40 = v42 + 1;
          v43 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)this + 5));
          v45 = *((_QWORD *)this + 7);
          v46 = *((int *)this + 12);
          *((_DWORD *)this + 12) = v46 + 1;
          *(_QWORD *)(v45 + 8 * v46 + 8) = v43;
          v39 = *(google::protobuf::internal **)v87;
          v44 = **(_BYTE **)v87;
          if ((char)**(_BYTE **)v87 < 0)
          {
LABEL_46:
            SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(v39, (const char *)v44);
            if (!SizeFallback)
              return SizeFallback;
            goto LABEL_53;
          }
LABEL_52:
          SizeFallback = (char *)v39 + 1;
LABEL_53:
          v47 = a3[1];
          v48 = v44 + (_DWORD)SizeFallback - v47.i32[0];
          *a3 = (int32x2_t)(*(_QWORD *)&v47 + (v48 & (v48 >> 31)));
          v49 = a3[3].i32[1];
          a3[3].i32[1] = v48;
          v47.i32[0] = a3[11].i32[0];
          v35 = __OFSUB__(v47.i32[0]--, 1);
          a3[11].i32[0] = v47.i32[0];
          if (v47.i32[0] < 0 != v35)
            return 0;
          v50 = operations_research::sat::ConstraintProto::_InternalParse(v43, SizeFallback, a3, a4, a5);
          SizeFallback = v50;
          if (!v50)
            return SizeFallback;
          ++a3[11].i32[0];
          if (a3[10].i32[0])
            return 0;
          v51 = a3[3].i32[1] + v49 - v48;
          a3[3].i32[1] = v51;
          v52 = (int32x2_t)(*(_QWORD *)&a3[1] + (v51 & (v51 >> 31)));
          *a3 = v52;
          *(_QWORD *)v87 = v50;
          if (*(_QWORD *)&v52 <= (unint64_t)v50 || *v50 != 26)
            goto LABEL_2;
        }
        v42 = *((_DWORD *)this + 13);
LABEL_50:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v10, v42 + 1);
        v40 = (int *)*((_QWORD *)this + 7);
        v42 = *v40;
        goto LABEL_51;
      case 3u:
        if (v13 != 34)
          goto LABEL_16;
        v53 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
        if (v53)
        {
          v54 = *v12;
          if ((*v12 & 0x80000000) == 0)
            goto LABEL_62;
        }
        else
        {
          v74 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v8 & 1) != 0)
            v74 = *(google::protobuf::Arena **)v74;
          v53 = (operations_research::sat::CpObjectiveProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v74);
          *((_QWORD *)this + 15) = v53;
          v12 = *(std::string::value_type **)v87;
          v54 = **(_BYTE **)v87;
          if (((char)**(_BYTE **)v87 & 0x80000000) == 0)
          {
LABEL_62:
            SizeFallback = v12 + 1;
            goto LABEL_102;
          }
        }
        SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v12, (const char *)v54);
        if (!SizeFallback)
          return SizeFallback;
LABEL_102:
        v75 = a3[1];
        v76 = v54 + (_DWORD)SizeFallback - v75.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v75 + (v76 & (v76 >> 31)));
        v77 = a3[3].i32[1];
        a3[3].i32[1] = v76;
        v75.i32[0] = a3[11].i32[0];
        v35 = __OFSUB__(v75.i32[0]--, 1);
        a3[11].i32[0] = v75.i32[0];
        if (v75.i32[0] < 0 != v35)
          return 0;
        v78 = operations_research::sat::CpObjectiveProto::_InternalParse(v53, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        goto LABEL_110;
      case 4u:
        if (v13 != 42)
          goto LABEL_16;
        SizeFallback = v12 - 1;
        while (1)
        {
          v55 = (google::protobuf::internal *)(SizeFallback + 1);
          *(_QWORD *)v87 = SizeFallback + 1;
          v56 = (int *)*((_QWORD *)this + 10);
          if (!v56)
            break;
          v57 = *((int *)this + 18);
          v58 = *v56;
          if ((int)v57 < *v56)
          {
            *((_DWORD *)this + 18) = v57 + 1;
            v59 = *(operations_research::sat::DecisionStrategyProto **)&v56[2 * v57 + 2];
            v60 = *(unsigned __int8 *)v55;
            if (*(char *)v55 < 0)
              goto LABEL_68;
            goto LABEL_74;
          }
          if (v58 == *((_DWORD *)this + 19))
            goto LABEL_72;
LABEL_73:
          *v56 = v58 + 1;
          v59 = (operations_research::sat::DecisionStrategyProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(*((google::protobuf::Arena **)this + 8));
          v61 = *((_QWORD *)this + 10);
          v62 = *((int *)this + 18);
          *((_DWORD *)this + 18) = v62 + 1;
          *(_QWORD *)(v61 + 8 * v62 + 8) = v59;
          v55 = *(google::protobuf::internal **)v87;
          v60 = **(_BYTE **)v87;
          if ((char)**(_BYTE **)v87 < 0)
          {
LABEL_68:
            SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(v55, (const char *)v60);
            if (!SizeFallback)
              return SizeFallback;
            goto LABEL_75;
          }
LABEL_74:
          SizeFallback = (char *)v55 + 1;
LABEL_75:
          v63 = a3[1];
          v64 = v60 + (_DWORD)SizeFallback - v63.i32[0];
          *a3 = (int32x2_t)(*(_QWORD *)&v63 + (v64 & (v64 >> 31)));
          v65 = a3[3].i32[1];
          a3[3].i32[1] = v64;
          v63.i32[0] = a3[11].i32[0];
          v35 = __OFSUB__(v63.i32[0]--, 1);
          a3[11].i32[0] = v63.i32[0];
          if (v63.i32[0] < 0 != v35)
            return 0;
          v66 = operations_research::sat::DecisionStrategyProto::_InternalParse(v59, (google::protobuf::UnknownFieldSet *)SizeFallback, a3, a4, a5);
          SizeFallback = v66;
          if (!v66)
            return SizeFallback;
          ++a3[11].i32[0];
          if (a3[10].i32[0])
            return 0;
          v67 = a3[3].i32[1] + v65 - v64;
          a3[3].i32[1] = v67;
          v68 = (int32x2_t)(*(_QWORD *)&a3[1] + (v67 & (v67 >> 31)));
          *a3 = v68;
          *(_QWORD *)v87 = v66;
          if (*(_QWORD *)&v68 <= (unint64_t)v66 || *v66 != 42)
            goto LABEL_2;
        }
        v58 = *((_DWORD *)this + 19);
LABEL_72:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v58 + 1);
        v56 = (int *)*((_QWORD *)this + 10);
        v58 = *v56;
        goto LABEL_73;
      case 5u:
        if (v13 != 50)
          goto LABEL_16;
        v69 = (operations_research::sat::PartialVariableAssignment *)*((_QWORD *)this + 16);
        if (v69)
        {
          v70 = *v12;
          if ((*v12 & 0x80000000) == 0)
            goto LABEL_84;
        }
        else
        {
          v79 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v8 & 1) != 0)
            v79 = *(google::protobuf::Arena **)v79;
          v69 = (operations_research::sat::PartialVariableAssignment *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v79);
          *((_QWORD *)this + 16) = v69;
          v12 = *(std::string::value_type **)v87;
          v70 = **(_BYTE **)v87;
          if (((char)**(_BYTE **)v87 & 0x80000000) == 0)
          {
LABEL_84:
            SizeFallback = v12 + 1;
            goto LABEL_108;
          }
        }
        SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v12, (const char *)v70);
        if (!SizeFallback)
          return SizeFallback;
LABEL_108:
        v80 = a3[1];
        v76 = v70 + (_DWORD)SizeFallback - v80.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v80 + (v76 & (v76 >> 31)));
        v77 = a3[3].i32[1];
        a3[3].i32[1] = v76;
        v80.i32[0] = a3[11].i32[0];
        v35 = __OFSUB__(v80.i32[0]--, 1);
        a3[11].i32[0] = v80.i32[0];
        if (v80.i32[0] < 0 != v35)
          return 0;
        v78 = operations_research::sat::PartialVariableAssignment::_InternalParse(v69, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
LABEL_110:
        SizeFallback = (char *)v78;
        if (!v78)
          return SizeFallback;
        ++a3[11].i32[0];
        if (a3[10].i32[0])
          return 0;
        v81 = a3[3].i32[1] + v77 - v76;
        a3[3].i32[1] = v81;
        *a3 = (int32x2_t)(*(_QWORD *)&a3[1] + (v81 & (v81 >> 31)));
        *(_QWORD *)v87 = v78;
        continue;
      case 6u:
        if (v13 == 58)
        {
          v23 = google::protobuf::internal::PackedInt32Parser(v85, (unsigned __int8 *)v12, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
LABEL_87:
          SizeFallback = v23;
          *(_QWORD *)v87 = v23;
          if (!v23)
            return SizeFallback;
        }
        else
        {
          if (v13 != 56)
            goto LABEL_16;
          Varint64 = google::protobuf::internal::ReadVarint64((google::protobuf::internal **)v87, (const char **)__s);
          v83 = *((unsigned int *)this + 22);
          if ((_DWORD)v83 == *((_DWORD *)this + 23))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v85, v83 + 1);
          *(_DWORD *)(*((_QWORD *)this + 12) + 4 * v83) = Varint64;
          *((_DWORD *)this + 22) = v83 + 1;
          SizeFallback = *(char **)v87;
          if (!*(_QWORD *)v87)
            return SizeFallback;
        }
        break;
      default:
        goto LABEL_16;
    }
  }
  TagFallback = google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)SizeFallback, (const char *)(v14 - 128));
  *(_QWORD *)v87 = TagFallback;
  if (!TagFallback)
    return 0;
  v12 = (std::string::value_type *)TagFallback;
  v13 = __s;
  v15 = (__s >> 3) - 1;
  if (v15 <= 6)
    goto LABEL_7;
LABEL_16:
  if (v13)
    v21 = (v13 & 7) == 4;
  else
    v21 = 1;
  if (!v21)
  {
    if ((*v8 & 1) != 0)
    {
      v22 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else
    {
      v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v12 = *(std::string::value_type **)v87;
    }
    v23 = (char *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v13, v22, (google::protobuf::UnknownFieldSet *)v12, a3, a5);
    goto LABEL_87;
  }
  a3[10].i32[0] = v13 - 1;
  return v12;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CpModelProto::_InternalSerialize(operations_research::sat::CpModelProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t *v7;
  const char *v8;
  uint64_t v9;
  int64_t v10;
  const void *v11;
  int v12;
  int i;
  google::protobuf::UnknownFieldSet *v14;
  operations_research::sat::IntegerVariableProto *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int j;
  google::protobuf::UnknownFieldSet *v22;
  operations_research::sat::ConstraintProto *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  operations_research::sat::CpObjectiveProto *v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int k;
  char *v36;
  operations_research::sat::DecisionStrategyProto *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  operations_research::sat::PartialVariableAssignment *v42;
  unsigned int v43;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE *v49;
  int *v50;
  int *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v60;

  v7 = (uint64_t *)*((_QWORD *)this + 14);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)v7[1];
    if (!v8)
      goto LABEL_14;
    v7 = (uint64_t *)*v7;
  }
  else
  {
    v8 = (const char *)*((unsigned __int8 *)v7 + 23);
    if (!*((_BYTE *)v7 + 23))
      goto LABEL_14;
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v7, v8, 1, (google::protobuf::internal *)"operations_research.sat.CpModelProto.name");
  v9 = *((_QWORD *)this + 14);
  if (*(char *)(v9 + 23) < 0)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10 > 127)
      goto LABEL_26;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 + 14 < v10)
  {
LABEL_26:
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v9, (char *)a2);
    v12 = *((_DWORD *)this + 6);
    if (!v12)
      goto LABEL_27;
    goto LABEL_15;
  }
  *(_BYTE *)a2 = 10;
  *((_BYTE *)a2 + 1) = v10;
  if (*(char *)(v9 + 23) >= 0)
    v11 = (const void *)v9;
  else
    v11 = *(const void **)v9;
  memcpy((char *)a2 + 2, v11, v10);
  a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v10 + 2);
LABEL_14:
  v12 = *((_DWORD *)this + 6);
  if (!v12)
    goto LABEL_27;
LABEL_15:
  for (i = 0; i != v12; ++i)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v15 = *(operations_research::sat::IntegerVariableProto **)(*((_QWORD *)this + 4) + 8 * i + 8);
    *(_BYTE *)a2 = 18;
    v16 = *((_DWORD *)v15 + 12);
    if (v16 <= 0x7F)
    {
      *((_BYTE *)a2 + 1) = v16;
      v14 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    else
    {
      *((_BYTE *)a2 + 1) = v16 | 0x80;
      v17 = v16 >> 7;
      if (v16 >> 14)
      {
        v14 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        do
        {
          *((_BYTE *)v14 - 1) = v17 | 0x80;
          v18 = v17 >> 7;
          v14 = (google::protobuf::UnknownFieldSet *)((char *)v14 + 1);
          v19 = v17 >> 14;
          v17 >>= 7;
        }
        while (v19);
        *((_BYTE *)v14 - 1) = v18;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v17;
        v14 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    a2 = operations_research::sat::IntegerVariableProto::_InternalSerialize(v15, v14, a3, a4);
  }
LABEL_27:
  v20 = *((_DWORD *)this + 12);
  if (v20)
  {
    for (j = 0; j != v20; ++j)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v23 = *(operations_research::sat::ConstraintProto **)(*((_QWORD *)this + 7) + 8 * j + 8);
      *(_BYTE *)a2 = 26;
      v24 = *((_DWORD *)v23 + 14);
      if (v24 <= 0x7F)
      {
        *((_BYTE *)a2 + 1) = v24;
        v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      else
      {
        *((_BYTE *)a2 + 1) = v24 | 0x80;
        v25 = v24 >> 7;
        if (v24 >> 14)
        {
          v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
          do
          {
            *((_BYTE *)v22 - 1) = v25 | 0x80;
            v26 = v25 >> 7;
            v22 = (google::protobuf::UnknownFieldSet *)((char *)v22 + 1);
            v27 = v25 >> 14;
            v25 >>= 7;
          }
          while (v27);
          *((_BYTE *)v22 - 1) = v26;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v25;
          v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      a2 = operations_research::sat::ConstraintProto::_InternalSerialize(v23, v22, a3, a4);
    }
  }
  if (this != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    v28 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
    if (v28)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v28 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
        *(_BYTE *)a2 = 34;
        v29 = *((_DWORD *)v28 + 26);
        if (v29 <= 0x7F)
          goto LABEL_43;
      }
      else
      {
        *(_BYTE *)a2 = 34;
        v29 = *((_DWORD *)v28 + 26);
        if (v29 <= 0x7F)
        {
LABEL_43:
          *((_BYTE *)a2 + 1) = v29;
          v30 = (char *)a2 + 2;
LABEL_50:
          a2 = operations_research::sat::CpObjectiveProto::_InternalSerialize(v28, v30, a3, a4);
          goto LABEL_51;
        }
      }
      *((_BYTE *)a2 + 1) = v29 | 0x80;
      v31 = v29 >> 7;
      if (v29 >> 14)
      {
        v30 = (char *)a2 + 3;
        do
        {
          *(v30 - 1) = v31 | 0x80;
          v32 = v31 >> 7;
          ++v30;
          v33 = v31 >> 14;
          v31 >>= 7;
        }
        while (v33);
        *(v30 - 1) = v32;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v31;
        v30 = (char *)a2 + 3;
      }
      goto LABEL_50;
    }
  }
LABEL_51:
  v34 = *((_DWORD *)this + 18);
  if (v34)
  {
    for (k = 0; k != v34; ++k)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v37 = *(operations_research::sat::DecisionStrategyProto **)(*((_QWORD *)this + 10) + 8 * k + 8);
      *(_BYTE *)a2 = 42;
      v38 = *((_DWORD *)v37 + 18);
      if (v38 <= 0x7F)
      {
        *((_BYTE *)a2 + 1) = v38;
        v36 = (char *)a2 + 2;
      }
      else
      {
        *((_BYTE *)a2 + 1) = v38 | 0x80;
        v39 = v38 >> 7;
        if (v38 >> 14)
        {
          v36 = (char *)a2 + 3;
          do
          {
            *(v36 - 1) = v39 | 0x80;
            v40 = v39 >> 7;
            ++v36;
            v41 = v39 >> 14;
            v39 >>= 7;
          }
          while (v41);
          *(v36 - 1) = v40;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v39;
          v36 = (char *)a2 + 3;
        }
      }
      a2 = operations_research::sat::DecisionStrategyProto::_InternalSerialize(v37, v36, a3, a4);
    }
  }
  if (this != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    v42 = (operations_research::sat::PartialVariableAssignment *)*((_QWORD *)this + 16);
    if (v42)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v42 = (operations_research::sat::PartialVariableAssignment *)*((_QWORD *)this + 16);
        *(_BYTE *)a2 = 50;
        v43 = *((_DWORD *)v42 + 15);
        if (v43 <= 0x7F)
          goto LABEL_67;
      }
      else
      {
        *(_BYTE *)a2 = 50;
        v43 = *((_DWORD *)v42 + 15);
        if (v43 <= 0x7F)
        {
LABEL_67:
          *((_BYTE *)a2 + 1) = v43;
          v44 = (char *)a2 + 2;
LABEL_74:
          a2 = operations_research::sat::PartialVariableAssignment::_InternalSerialize(v42, v44, a3, a4);
          goto LABEL_75;
        }
      }
      *((_BYTE *)a2 + 1) = v43 | 0x80;
      v45 = v43 >> 7;
      if (v43 >> 14)
      {
        v44 = (char *)a2 + 3;
        do
        {
          *(v44 - 1) = v45 | 0x80;
          v46 = v45 >> 7;
          ++v44;
          v47 = v45 >> 14;
          v45 >>= 7;
        }
        while (v47);
        *(v44 - 1) = v46;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v45;
        v44 = (char *)a2 + 3;
      }
      goto LABEL_74;
    }
  }
LABEL_75:
  v48 = *((_DWORD *)this + 26);
  if ((int)v48 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      *(_BYTE *)a2 = 58;
      v49 = (char *)a2 + 1;
      if (v48 < 0x80)
        goto LABEL_78;
    }
    else
    {
      *(_BYTE *)a2 = 58;
      v49 = (char *)a2 + 1;
      if (v48 < 0x80)
      {
LABEL_78:
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        *v49 = v48;
        v50 = (int *)*((_QWORD *)this + 12);
        v51 = &v50[*((int *)this + 22)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
            v57 = *v50++;
            v52 = v57;
            if (v57 > 0x7F)
            {
LABEL_83:
              *(_BYTE *)a2 = v52 | 0x80;
              v54 = v52 >> 7;
              if (v52 >> 14)
              {
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
                do
                {
                  *((_BYTE *)a2 - 1) = v54 | 0x80;
                  v55 = v54 >> 7;
                  a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
                  v56 = v54 >> 14;
                  v54 >>= 7;
                }
                while (v56);
                *((_BYTE *)a2 - 1) = v55;
              }
              else
              {
                *((_BYTE *)a2 + 1) = v54;
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
              }
              goto LABEL_80;
            }
          }
          else
          {
            v53 = *v50++;
            v52 = v53;
            if (v53 > 0x7F)
              goto LABEL_83;
          }
          *(_BYTE *)a2 = v52;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
LABEL_80:
          if (v50 >= v51)
            goto LABEL_90;
        }
      }
    }
    do
    {
      *v49++ = v48 | 0x80;
      v60 = v48 >> 14;
      v48 >>= 7;
    }
    while (v60);
    a2 = (google::protobuf::UnknownFieldSet *)(v49 - 1);
    goto LABEL_78;
  }
LABEL_90:
  v58 = *((_QWORD *)this + 1);
  if ((v58 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v58 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
  else
    return a2;
}

char *operations_research::sat::CpModelProto::ByteSizeLong(operations_research::sat::CpModelProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  operations_research::sat::ConstraintProto **v17;
  uint64_t v18;
  operations_research::sat::ConstraintProto *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  operations_research::sat::DecisionStrategyProto **v24;
  uint64_t v25;
  operations_research::sat::DecisionStrategyProto *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const google::protobuf::UnknownFieldSet *v35;
  uint64_t v36;
  operations_research::sat::CpObjectiveProto *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    while (1)
    {
      v6 = *v4;
      v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)(*v4 + 16));
      if (v7)
      {
        if ((v7 & 0x80000000) != 0)
        {
          v8 = 11;
          *(_DWORD *)(v6 + 32) = v7;
          v9 = *(_QWORD *)(v6 + 40);
          v10 = *(unsigned __int8 *)(v9 + 23);
          if ((*(char *)(v9 + 23) & 0x80000000) == 0)
          {
LABEL_11:
            v11 = (char *)(v8 + v7);
            if (v10)
              goto LABEL_12;
            goto LABEL_16;
          }
        }
        else
        {
          v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
          *(_DWORD *)(v6 + 32) = v7;
          v9 = *(_QWORD *)(v6 + 40);
          v10 = *(unsigned __int8 *)(v9 + 23);
          if ((*(char *)(v9 + 23) & 0x80000000) == 0)
            goto LABEL_11;
        }
      }
      else
      {
        v8 = 0;
        *(_DWORD *)(v6 + 32) = 0;
        v9 = *(_QWORD *)(v6 + 40);
        v10 = *(unsigned __int8 *)(v9 + 23);
        if ((*(char *)(v9 + 23) & 0x80000000) == 0)
          goto LABEL_11;
      }
      v11 = (char *)(v8 + v7);
      if (*(_QWORD *)(v9 + 8))
      {
LABEL_12:
        v12 = *(_QWORD *)(v9 + 8);
        if ((v10 & 0x80u) == 0)
          v13 = v10;
        else
          v13 = v12;
        v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
LABEL_16:
      if ((*(_BYTE *)(v6 + 8) & 1) != 0)
        v11 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v6 + 8), (const google::protobuf::UnknownFieldSet *)v11, (_DWORD *)(v6 + 48));
      else
        *(_DWORD *)(v6 + 48) = (_DWORD)v11;
      v2 += (uint64_t)&v11[(9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6];
      ++v4;
      v5 -= 8;
      if (!v5)
        goto LABEL_25;
    }
  }
  v2 = 0;
LABEL_25:
  v14 = *((int *)this + 12);
  v15 = v2 + v14;
  v16 = *((_QWORD *)this + 7);
  if (v16)
    v17 = (operations_research::sat::ConstraintProto **)(v16 + 8);
  else
    v17 = 0;
  if ((_DWORD)v14)
  {
    v18 = 8 * v14;
    do
    {
      v19 = *v17++;
      v20 = operations_research::sat::ConstraintProto::ByteSizeLong(v19);
      v15 += (uint64_t)&v20[(9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6];
      v18 -= 8;
    }
    while (v18);
  }
  v21 = *((int *)this + 18);
  v22 = v15 + v21;
  v23 = *((_QWORD *)this + 10);
  if (v23)
    v24 = (operations_research::sat::DecisionStrategyProto **)(v23 + 8);
  else
    v24 = 0;
  if ((_DWORD)v21)
  {
    v25 = 8 * v21;
    do
    {
      v26 = *v24++;
      v27 = operations_research::sat::DecisionStrategyProto::ByteSizeLong(v26);
      v22 += (uint64_t)&v27[(9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6];
      v25 -= 8;
    }
    while (v25);
  }
  v28 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 22);
  v29 = 11;
  v30 = ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v28 >= 0)
    v29 = v30;
  v31 = v29 + v22;
  if (v28)
    v32 = v28;
  else
    v32 = 0;
  if (!v28)
    v31 = v22;
  *((_DWORD *)this + 26) = v32;
  v33 = *((_QWORD *)this + 14);
  v34 = *(unsigned __int8 *)(v33 + 23);
  if (*(char *)(v33 + 23) < 0)
  {
    v35 = (const google::protobuf::UnknownFieldSet *)(v31 + v28);
    if (!*(_QWORD *)(v33 + 8))
      goto LABEL_49;
  }
  else
  {
    v35 = (const google::protobuf::UnknownFieldSet *)(v31 + v28);
    if (!*(_BYTE *)(v33 + 23))
      goto LABEL_49;
  }
  v36 = *(_QWORD *)(v33 + 8);
  if ((v34 & 0x80u) == 0)
    v36 = v34;
  v35 = (const google::protobuf::UnknownFieldSet *)((char *)v35 + v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_49:
  if (this != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    v37 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
    if (v37)
    {
      v38 = operations_research::sat::CpObjectiveProto::ByteSizeLong(v37);
      v35 = (const google::protobuf::UnknownFieldSet *)&v38[((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6)
                                                          + 1
                                                          + (_QWORD)v35];
    }
    v39 = (int *)*((_QWORD *)this + 16);
    if (v39)
    {
      v40 = google::protobuf::internal::WireFormatLite::Int32Size(v39 + 4);
      if (v40)
      {
        if ((v40 & 0x80000000) == 0)
        {
          v39[8] = v40;
          v41 = ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6) + 1 + v40;
          v42 = google::protobuf::internal::WireFormatLite::Int64Size(v39 + 10);
          if (!v42)
            goto LABEL_63;
LABEL_60:
          v43 = v42;
          if ((v42 & 0x80000000) != 0)
            v44 = 11;
          else
            v44 = ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
          v41 += v44;
          goto LABEL_66;
        }
        v39[8] = v40;
        v41 = v40 + 11;
        v42 = google::protobuf::internal::WireFormatLite::Int64Size(v39 + 10);
        if (v42)
          goto LABEL_60;
      }
      else
      {
        v39[8] = 0;
        v41 = 0;
        v42 = google::protobuf::internal::WireFormatLite::Int64Size(v39 + 10);
        if (v42)
          goto LABEL_60;
      }
LABEL_63:
      v43 = 0;
LABEL_66:
      v39[14] = v43;
      v45 = (char *)(v41 + v42);
      if ((v39[2] & 1) != 0)
        v45 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v39 + 2), (const google::protobuf::UnknownFieldSet *)v45, v39 + 15);
      else
        v39[15] = (int)v45;
      v35 = (const google::protobuf::UnknownFieldSet *)&v45[(_QWORD)v35
                                                          + 1
                                                          + ((9 * (__clz(v45 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CpModelProto *)((char *)this + 8), v35, (_DWORD *)this + 34);
  *((_DWORD *)this + 34) = (_DWORD)v35;
  return (char *)v35;
}

void operations_research::sat::CpModelProto::MergeFrom(operations_research::sat::CpModelProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::CpModelProto *__hidden))a2 == &off_24F9823C8)
    operations_research::sat::CpModelProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::CpModelProto::MergeFrom(operations_research::sat::CpModelProto *this, const operations_research::sat::CpModelProto *a2)
{
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  google::protobuf::UnknownFieldSet *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  operations_research::sat::IntegerVariableProto **v12;
  operations_research::sat::IntegerVariableProto **v13;
  operations_research::sat::IntegerVariableProto *v14;
  operations_research::sat::IntegerVariableProto *v15;
  operations_research::sat::IntegerVariableProto *v16;
  google::protobuf::Arena *v17;
  int v18;
  uint64_t v19;
  operations_research::sat::IntegerVariableProto **v20;
  operations_research::sat::IntegerVariableProto **v21;
  operations_research::sat::IntegerVariableProto *v22;
  operations_research::sat::IntegerVariableProto *v23;
  int v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  operations_research::sat::ConstraintProto **v31;
  operations_research::sat::ConstraintProto **v32;
  operations_research::sat::ConstraintProto *v33;
  operations_research::sat::ConstraintProto *v34;
  operations_research::sat::ConstraintProto *v35;
  google::protobuf::Arena *v36;
  int v37;
  uint64_t v38;
  operations_research::sat::ConstraintProto **v39;
  operations_research::sat::ConstraintProto **v40;
  operations_research::sat::ConstraintProto *v41;
  operations_research::sat::ConstraintProto *v42;
  int v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  operations_research::sat::DecisionStrategyProto **v50;
  operations_research::sat::DecisionStrategyProto **v51;
  operations_research::sat::DecisionStrategyProto *v52;
  operations_research::sat::DecisionStrategyProto *v53;
  operations_research::sat::DecisionStrategyProto *v54;
  google::protobuf::Arena *v55;
  int v56;
  uint64_t v57;
  operations_research::sat::DecisionStrategyProto **v58;
  operations_research::sat::DecisionStrategyProto **v59;
  operations_research::sat::DecisionStrategyProto *v60;
  operations_research::sat::DecisionStrategyProto *v61;
  int v62;
  int *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string **v68;
  uint64_t v69;
  google::protobuf::Arena *v70;
  std::string *v71;
  const operations_research::sat::CpObjectiveProto *v72;
  operations_research::sat::CpObjectiveProto *v73;
  google::protobuf::Arena *v74;
  const operations_research::sat::CpObjectiveProto *v75;
  const operations_research::sat::CircuitCoveringConstraintProto *v76;
  operations_research::sat::CircuitCoveringConstraintProto *v77;
  google::protobuf::Arena *v78;
  const operations_research::sat::CircuitCoveringConstraintProto *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;

  v86 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((*v86 & 1) != 0)
      v6 = (google::protobuf::UnknownFieldSet *)((*v86 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v6 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v86);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v6, v5);
  }
  v7 = *((_DWORD *)a2 + 6);
  if (v7)
  {
    v83 = *((_QWORD *)a2 + 4);
    v80 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpModelProto *)((char *)this + 16), v7);
    v8 = **((_DWORD **)this + 4);
    v9 = *((_DWORD *)this + 6);
    v10 = v8 - v9;
    if (v8 - v9 >= v7)
      v11 = v7;
    else
      v11 = v10;
    if ((int)v11 >= 1)
    {
      v12 = (operations_research::sat::IntegerVariableProto **)v80;
      v13 = (operations_research::sat::IntegerVariableProto **)(v83 + 8);
      do
      {
        v15 = *v13++;
        v14 = v15;
        v16 = *v12++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v14, v16);
        --v11;
      }
      while (v11);
    }
    if (v10 < v7)
    {
      v17 = (google::protobuf::Arena *)*((_QWORD *)this + 2);
      v18 = v9 + v7 - v8;
      v19 = 2 * v10;
      v20 = (operations_research::sat::IntegerVariableProto **)&v80[v19];
      v21 = (operations_research::sat::IntegerVariableProto **)(v19 * 4 + v83 + 8);
      do
      {
        v22 = *v21++;
        v23 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v17);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v22, v23);
        *v20++ = v23;
        --v18;
      }
      while (v18);
    }
    v24 = *((_DWORD *)this + 6) + v7;
    *((_DWORD *)this + 6) = v24;
    v25 = (int *)*((_QWORD *)this + 4);
    if (*v25 < v24)
      *v25 = v24;
  }
  v26 = *((_DWORD *)a2 + 12);
  if (v26)
  {
    v84 = *((_QWORD *)a2 + 7);
    v81 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpModelProto *)((char *)this + 40), v26);
    v27 = **((_DWORD **)this + 7);
    v28 = *((_DWORD *)this + 12);
    v29 = v27 - v28;
    if (v27 - v28 >= v26)
      v30 = v26;
    else
      v30 = v29;
    if ((int)v30 >= 1)
    {
      v31 = (operations_research::sat::ConstraintProto **)v81;
      v32 = (operations_research::sat::ConstraintProto **)(v84 + 8);
      do
      {
        v34 = *v32++;
        v33 = v34;
        v35 = *v31++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(v33, v35);
        --v30;
      }
      while (v30);
    }
    if (v29 < v26)
    {
      v36 = (google::protobuf::Arena *)*((_QWORD *)this + 5);
      v37 = v28 + v26 - v27;
      v38 = 2 * v29;
      v39 = (operations_research::sat::ConstraintProto **)&v81[v38];
      v40 = (operations_research::sat::ConstraintProto **)(v38 * 4 + v84 + 8);
      do
      {
        v41 = *v40++;
        v42 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(v36);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(v41, v42);
        *v39++ = v42;
        --v37;
      }
      while (v37);
    }
    v43 = *((_DWORD *)this + 12) + v26;
    *((_DWORD *)this + 12) = v43;
    v44 = (int *)*((_QWORD *)this + 7);
    if (*v44 < v43)
      *v44 = v43;
  }
  v45 = *((_DWORD *)a2 + 18);
  if (v45)
  {
    v85 = *((_QWORD *)a2 + 10);
    v82 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpModelProto *)((char *)this + 64), v45);
    v46 = **((_DWORD **)this + 10);
    v47 = *((_DWORD *)this + 18);
    v48 = v46 - v47;
    if (v46 - v47 >= v45)
      v49 = v45;
    else
      v49 = v48;
    if ((int)v49 >= 1)
    {
      v50 = (operations_research::sat::DecisionStrategyProto **)v82;
      v51 = (operations_research::sat::DecisionStrategyProto **)(v85 + 8);
      do
      {
        v53 = *v51++;
        v52 = v53;
        v54 = *v50++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(v52, v54);
        --v49;
      }
      while (v49);
    }
    if (v48 < v45)
    {
      v55 = (google::protobuf::Arena *)*((_QWORD *)this + 8);
      v56 = v47 + v45 - v46;
      v57 = 2 * v48;
      v58 = (operations_research::sat::DecisionStrategyProto **)&v82[v57];
      v59 = (operations_research::sat::DecisionStrategyProto **)(v57 * 4 + v85 + 8);
      do
      {
        v60 = *v59++;
        v61 = (operations_research::sat::DecisionStrategyProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(v55);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(v60, v61);
        *v58++ = v61;
        --v56;
      }
      while (v56);
    }
    v62 = *((_DWORD *)this + 18) + v45;
    *((_DWORD *)this + 18) = v62;
    v63 = (int *)*((_QWORD *)this + 10);
    if (*v63 < v62)
      *v63 = v62;
  }
  v64 = *((_DWORD *)a2 + 22);
  if (v64)
  {
    v65 = *((int *)this + 22);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 22, v65 + v64);
    v66 = *((_QWORD *)this + 12);
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
    memcpy((void *)(v66 + 4 * v65), *((const void **)a2 + 12), 4 * *((int *)a2 + 22));
  }
  v67 = *((_QWORD *)a2 + 14);
  if (*(char *)(v67 + 23) < 0)
  {
    if (!*(_QWORD *)(v67 + 8))
      goto LABEL_50;
LABEL_47:
    v68 = (std::string **)((char *)this + 112);
    v69 = *((_QWORD *)this + 1);
    v70 = (google::protobuf::Arena *)(v69 & 0xFFFFFFFFFFFFFFFELL);
    if ((v69 & 1) != 0)
    {
      v70 = *(google::protobuf::Arena **)v70;
      v71 = *v68;
      if (*v68 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_49;
    }
    else
    {
      v71 = *v68;
      if (*v68 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_49:
        std::string::operator=(v71, *((const std::string **)a2 + 14));
        goto LABEL_50;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v68, v70, (__int128 *)v67);
    if (a2 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
      return;
    goto LABEL_51;
  }
  if (*(_BYTE *)(v67 + 23))
    goto LABEL_47;
LABEL_50:
  if (a2 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
    return;
LABEL_51:
  v72 = (const operations_research::sat::CpObjectiveProto *)*((_QWORD *)a2 + 15);
  if (v72)
  {
    v73 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
    if (!v73)
    {
      v74 = (google::protobuf::Arena *)(*v86 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v86 & 1) != 0)
        v74 = *(google::protobuf::Arena **)v74;
      v73 = (operations_research::sat::CpObjectiveProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v74);
      *((_QWORD *)this + 15) = v73;
      v72 = (const operations_research::sat::CpObjectiveProto *)*((_QWORD *)a2 + 15);
    }
    if (v72)
      v75 = v72;
    else
      v75 = (const operations_research::sat::CpObjectiveProto *)&operations_research::sat::_CpObjectiveProto_default_instance_;
    operations_research::sat::CpObjectiveProto::MergeFrom(v73, v75);
  }
  v76 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)a2 + 16);
  if (v76)
  {
    v77 = (operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)this + 16);
    if (!v77)
    {
      v78 = (google::protobuf::Arena *)(*v86 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v86 & 1) != 0)
        v78 = *(google::protobuf::Arena **)v78;
      v77 = (operations_research::sat::CircuitCoveringConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v78);
      *((_QWORD *)this + 16) = v77;
      v76 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((_QWORD *)a2 + 16);
    }
    if (v76)
      v79 = v76;
    else
      v79 = (const operations_research::sat::CircuitCoveringConstraintProto *)&operations_research::sat::_PartialVariableAssignment_default_instance_;
    operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(v77, v79);
  }
}

void operations_research::sat::CpModelProto::CopyFrom(operations_research::sat::CpModelProto *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    operations_research::sat::CpModelProto::Clear(this);
    if (*(void (***)(operations_research::sat::CpModelProto *__hidden))a2 == &off_24F9823C8)
      operations_research::sat::CpModelProto::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v4);
  }
}

void operations_research::sat::CpModelProto::CopyFrom(operations_research::sat::CpModelProto *this, const operations_research::sat::CpModelProto *a2)
{
  if (a2 != this)
  {
    operations_research::sat::CpModelProto::Clear(this);
    operations_research::sat::CpModelProto::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::CpModelProto::IsInitialized(operations_research::sat::CpModelProto *this)
{
  return 1;
}

__n128 operations_research::sat::CpModelProto::InternalSwap(operations_research::sat::CpModelProto *this, operations_research::sat::CpModelProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 result;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v7 = (uint64_t *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)a2 + 1);
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      v8 = (uint64_t *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  v9 = *v8;
  *v8 = *v7;
  *v7 = v9;
  v10 = v8[1];
  v8[1] = v7[1];
  v7[1] = v10;
  v11 = v8[2];
  v8[2] = v7[2];
  v7[2] = v11;
LABEL_8:
  v12 = *((_QWORD *)this + 3);
  v13 = *((_QWORD *)this + 4);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = v12;
  *((_QWORD *)a2 + 4) = v13;
  v14 = *((_QWORD *)this + 6);
  v15 = *((_QWORD *)this + 7);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)a2 + 6) = v14;
  *((_QWORD *)a2 + 7) = v15;
  v16 = *((_QWORD *)this + 9);
  v17 = *((_QWORD *)this + 10);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *((_QWORD *)a2 + 9) = v16;
  *((_QWORD *)a2 + 10) = v17;
  v18 = *((_QWORD *)this + 11);
  v19 = *((_QWORD *)this + 12);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *((_QWORD *)a2 + 11) = v18;
  *((_QWORD *)a2 + 12) = v19;
  v20 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v20;
  v21 = *((_QWORD *)this + 15);
  v22 = *((_QWORD *)this + 16);
  result = *(__n128 *)((char *)a2 + 120);
  *(__n128 *)((char *)this + 120) = result;
  *((_QWORD *)a2 + 15) = v21;
  *((_QWORD *)a2 + 16) = v22;
  return result;
}

uint64_t operations_research::sat::CpModelProto::GetMetadata(operations_research::sat::CpModelProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[48];
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::CpSolverResponse(operations_research::sat::CpSolverResponse *this, google::protobuf::Arena *a2)
{
  *(_QWORD *)this = &off_24F982478;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 11) = a2;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = a2;
  *((_DWORD *)this + 60) = 0;
  if (atomic_load(scc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto);
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  return this;
}

void sub_22DA73D18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2 + 112);
  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v4);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v3);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::CpSolverResponse(operations_research::sat::CpSolverResponse *this, const operations_research::sat::CpSolverResponse *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  operations_research::sat::IntegerVariableProto **v16;
  operations_research::sat::IntegerVariableProto **v17;
  google::protobuf::Arena *v18;
  int v19;
  uint64_t v20;
  operations_research::sat::IntegerVariableProto **v21;
  operations_research::sat::IntegerVariableProto **v22;
  operations_research::sat::IntegerVariableProto *v23;
  operations_research::sat::IntegerVariableProto *v24;
  int v25;
  int *v26;
  int v27;
  void *v28;
  uint64_t v29;
  google::protobuf::UnknownFieldSet *v30;
  uint64_t v31;
  google::protobuf::Arena *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t *v38;
  unsigned int *v39;
  uint64_t v40;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F982478;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    v8 = (void *)*((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v9 = *((_DWORD *)a2 + 16);
  if (v9)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v9);
    v10 = (void *)*((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy(v10, *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v11 = *((_DWORD *)a2 + 24);
  if (v11)
  {
    v40 = *((_QWORD *)a2 + 13);
    v39 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpSolverResponse *)((char *)this + 88), v11);
    v38 = v4;
    v12 = **((_DWORD **)this + 13);
    v13 = *((_DWORD *)this + 24);
    v14 = v12 - v13;
    if (v12 - v13 >= v11)
      v15 = v11;
    else
      v15 = v14;
    if ((int)v15 >= 1)
    {
      v16 = (operations_research::sat::IntegerVariableProto **)v39;
      v17 = (operations_research::sat::IntegerVariableProto **)(v40 + 8);
      do
      {
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(*v17++, *v16++);
        --v15;
      }
      while (v15);
    }
    if (v14 < v11)
    {
      v18 = (google::protobuf::Arena *)*((_QWORD *)this + 11);
      v19 = v13 + v11 - v12;
      v20 = 2 * v14;
      v21 = (operations_research::sat::IntegerVariableProto **)&v39[v20];
      v22 = (operations_research::sat::IntegerVariableProto **)(v20 * 4 + v40 + 8);
      do
      {
        v23 = *v22;
        v24 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v18);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v23, v24);
        *v21++ = v24;
        ++v22;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 24) + v11;
    *((_DWORD *)this + 24) = v25;
    v26 = (int *)*((_QWORD *)this + 13);
    v4 = v38;
    if (*v26 < v25)
      *v26 = v25;
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v27 = *((_DWORD *)a2 + 28);
  if (v27)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 28, v27);
    v28 = (void *)*((_QWORD *)this + 15);
    *((_DWORD *)this + 28) += *((_DWORD *)a2 + 28);
    memcpy(v28, *((const void **)a2 + 15), 4 * *((int *)a2 + 28));
  }
  *((_DWORD *)this + 60) = 0;
  v29 = *((_QWORD *)a2 + 1);
  if ((v29 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v30 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v30 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v30, (const google::protobuf::UnknownFieldSet *)((v29 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  v31 = *((_QWORD *)a2 + 17);
  if (*(char *)(v31 + 23) < 0)
  {
    if (!*(_QWORD *)(v31 + 8))
      goto LABEL_32;
  }
  else if (!*(_BYTE *)(v31 + 23))
  {
    goto LABEL_32;
  }
  v32 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((*v4 & 1) != 0)
    v32 = *(google::protobuf::Arena **)v32;
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, v32, (__int128 *)v31);
LABEL_32:
  v33 = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = v33;
  v34 = *((_OWORD *)a2 + 11);
  v35 = *((_OWORD *)a2 + 12);
  v36 = *((_OWORD *)a2 + 14);
  *((_OWORD *)this + 13) = *((_OWORD *)a2 + 13);
  *((_OWORD *)this + 14) = v36;
  *((_OWORD *)this + 11) = v34;
  *((_OWORD *)this + 12) = v35;
  return this;
}

void sub_22DA74034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;

  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(v11);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(a9);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(a10);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(a11);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpSolverResponse::~CpSolverResponse(operations_research::sat::CpSolverResponse *this)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v8;
  operations_research::sat::IntegerVariableProto **v9;
  operations_research::sat::IntegerVariableProto **v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 17);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E31DF78](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(_QWORD *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x22E31DF78](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 112);
  v9 = (operations_research::sat::IntegerVariableProto **)*((_QWORD *)this + 13);
  if (v9 && !*((_QWORD *)this + 11))
  {
    v10 = v9 + 1;
    v11 = *(unsigned int *)v9;
    if ((int)v11 >= 1)
    {
      do
      {
        if (*v10)
        {
          operations_research::sat::IntegerVariableProto::~IntegerVariableProto(*v10);
          MEMORY[0x22E31DF78]();
        }
        ++v10;
        --v11;
      }
      while (v11);
      v9 = (operations_research::sat::IntegerVariableProto **)*((_QWORD *)this + 13);
    }
    operator delete(v9);
  }
  *((_QWORD *)this + 13) = 0;
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::CpSolverResponse::~CpSolverResponse(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::CpSolverResponse::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 240) = a2;
  return this;
}

void operations_research::sat::CpSolverResponse::Clear(operations_research::sat::CpSolverResponse *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  v2 = *((unsigned int *)this + 24);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 13) + 8);
    while (1)
    {
      v4 = *v3;
      *(_DWORD *)(v4 + 16) = 0;
      v5 = *(_QWORD *)(v4 + 40);
      if ((uint64_t *)v5 == &google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_7;
      if ((*(char *)(v5 + 23) & 0x80000000) == 0)
        break;
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      v6 = *(_QWORD *)(v4 + 8);
      if ((v6 & 1) != 0)
      {
LABEL_8:
        if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
          google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                               + 8));
      }
LABEL_3:
      ++v3;
      if (!--v2)
      {
        *((_DWORD *)this + 24) = 0;
        goto LABEL_13;
      }
    }
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
LABEL_7:
    v6 = *(_QWORD *)(v4 + 8);
    if ((v6 & 1) != 0)
      goto LABEL_8;
    goto LABEL_3;
  }
LABEL_13:
  *((_DWORD *)this + 28) = 0;
  v7 = *((_QWORD *)this + 17);
  if ((uint64_t *)v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_16:
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) == 0)
      return;
    goto LABEL_19;
  }
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
    goto LABEL_16;
  }
  **(_BYTE **)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) == 0)
    return;
LABEL_19:
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

std::string::value_type *operations_research::sat::CpSolverResponse::_InternalParse(operations_research::sat::CpSolverResponse *this, std::string::value_type *__s, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  std::string::value_type *SizeFallback;
  uint64_t *v8;
  unsigned int *v9;
  std::string **v10;
  google::protobuf::internal *v11;
  int v12;
  google::protobuf::internal *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  google::protobuf::UnknownFieldSet *TagFallback;
  int v18;
  google::protobuf::UnknownFieldSet *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  google::protobuf::Arena *v31;
  std::string *v32;
  const char *v33;
  size_t size;
  google::protobuf::internal *v35;
  int *v36;
  uint64_t v37;
  int v38;
  operations_research::sat::IntegerVariableProto *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  int32x2_t v43;
  int v44;
  __int32 v45;
  BOOL v46;
  std::string::value_type *v47;
  int v48;
  int32x2_t v49;
  uint64_t v50;
  std::string *v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  google::protobuf::UnknownFieldSet *v62;
  google::protobuf::internal::ParseContext *v63;
  google::protobuf::internal *v65;
  google::protobuf::internal *v66;
  google::protobuf::internal *v67;
  google::protobuf::UnknownFieldSet *v68;

  SizeFallback = __s;
  v8 = (uint64_t *)((char *)this + 8);
  v67 = (operations_research::sat::CpSolverResponse *)((char *)this + 112);
  v68 = (google::protobuf::UnknownFieldSet *)__s;
  v9 = (unsigned int *)((char *)this + 88);
  v10 = (std::string **)((char *)this + 136);
  v65 = (operations_research::sat::CpSolverResponse *)((char *)this + 40);
  v66 = (operations_research::sat::CpSolverResponse *)((char *)this + 64);
  v11 = (operations_research::sat::CpSolverResponse *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)SizeFallback >= *(_QWORD *)a3)
    {
      if (&SizeFallback[-*(_QWORD *)&a3[1]] == (std::string::value_type *)a3[3].i32[1])
        return SizeFallback;
      SizeFallback = (std::string::value_type *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, SizeFallback, a3[11].i32[1]);
      v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if ((__s & 1) != 0)
        return SizeFallback;
    }
    v13 = (google::protobuf::internal *)(SizeFallback + 1);
    v14 = *SizeFallback;
    if (*SizeFallback < 0)
      break;
    v68 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 1);
    v15 = (v14 >> 3) - 1;
    if (v15 > 0x16)
      goto LABEL_145;
LABEL_14:
    switch(v15)
    {
      case 0u:
        if (v14 != 8)
          goto LABEL_145;
        SizeFallback = (char *)v13 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v13;
        if ((*(char *)v13 & 0x80000000) == 0)
          goto LABEL_19;
        v18 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v18 << 7) - 128);
        if (v18 < 0)
        {
          SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v13, __s);
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback)
            return SizeFallback;
        }
        else
        {
          SizeFallback = (char *)v13 + 2;
LABEL_19:
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        }
        *((_DWORD *)this + 38) = (_DWORD)__s;
        v12 = 2;
        goto LABEL_4;
      case 1u:
        if (v14 == 18)
        {
          SizeFallback = google::protobuf::internal::PackedInt64Parser(v11, (unsigned __int8 *)v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback)
            return SizeFallback;
          break;
        }
        if (v14 != 16)
          goto LABEL_145;
        v53 = google::protobuf::internal::ReadVarint64(&v68, (const char **)__s);
        v54 = *((unsigned int *)this + 4);
        if ((_DWORD)v54 == *((_DWORD *)this + 5))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v11, v54 + 1);
        *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v54) = v53;
        *((_DWORD *)this + 4) = v54 + 1;
        SizeFallback = (std::string::value_type *)v68;
        if (!v68)
          return SizeFallback;
        break;
      case 2u:
        if (v14 != 25)
          goto LABEL_145;
        v20 = *(_QWORD *)v13;
        v19 = (google::protobuf::internal *)((char *)v13 + 8);
        *((_QWORD *)this + 18) = v20;
        goto LABEL_96;
      case 3u:
        if (v14 != 33)
          goto LABEL_145;
        v21 = *(_QWORD *)v13;
        v19 = (google::protobuf::internal *)((char *)v13 + 8);
        *((_QWORD *)this + 20) = v21;
        goto LABEL_96;
      case 4u:
        if (v14 != 40)
          goto LABEL_145;
        SizeFallback = (char *)v13 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v13;
        if ((*(char *)v13 & 0x80000000) == 0)
          goto LABEL_32;
        v22 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v22 << 7) - 128);
        if ((v22 & 0x80000000) == 0)
        {
          SizeFallback = (char *)v13 + 2;
LABEL_32:
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_BYTE *)this + 156) = __s != 0;
          v12 = 2;
          goto LABEL_4;
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v13, __s);
        v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((_BYTE *)this + 156) = __s != 0;
        if (!SizeFallback)
          return SizeFallback;
        break;
      case 9u:
        if (v14 != 80)
          goto LABEL_145;
        SizeFallback = (char *)v13 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v13;
        if ((*(char *)v13 & 0x80000000) == 0)
          goto LABEL_37;
        v23 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v23 << 7) - 128);
        if ((v23 & 0x80000000) == 0)
        {
          SizeFallback = (char *)v13 + 2;
LABEL_37:
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_QWORD *)this + 21) = __s;
          v12 = 2;
          goto LABEL_4;
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v13, __s);
        v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((_QWORD *)this + 21) = __s;
        if (!SizeFallback)
          return SizeFallback;
        break;
      case 0xAu:
        if (v14 != 88)
          goto LABEL_145;
        SizeFallback = (char *)v13 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v13;
        if ((*(char *)v13 & 0x80000000) == 0)
          goto LABEL_42;
        v24 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v24 << 7) - 128);
        if ((v24 & 0x80000000) == 0)
        {
          SizeFallback = (char *)v13 + 2;
LABEL_42:
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_QWORD *)this + 22) = __s;
          v12 = 2;
          goto LABEL_4;
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v13, __s);
        v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((_QWORD *)this + 22) = __s;
        if (!SizeFallback)
          return SizeFallback;
        break;
      case 0xBu:
        if (v14 != 96)
          goto LABEL_145;
        SizeFallback = (char *)v13 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v13;
        if ((*(char *)v13 & 0x80000000) == 0)
          goto LABEL_47;
        v25 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v25 << 7) - 128);
        if ((v25 & 0x80000000) == 0)
        {
          SizeFallback = (char *)v13 + 2;
LABEL_47:
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_QWORD *)this + 23) = __s;
          v12 = 2;
          goto LABEL_4;
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v13, __s);
        v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((_QWORD *)this + 23) = __s;
        if (!SizeFallback)
          return SizeFallback;
        break;
      case 0xCu:
        if (v14 != 104)
          goto LABEL_145;
        SizeFallback = (char *)v13 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v13;
        if ((*(char *)v13 & 0x80000000) == 0)
          goto LABEL_52;
        v26 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v26 << 7) - 128);
        if ((v26 & 0x80000000) == 0)
        {
          SizeFallback = (char *)v13 + 2;
LABEL_52:
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_QWORD *)this + 24) = __s;
          v12 = 2;
          goto LABEL_4;
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v13, __s);
        v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((_QWORD *)this + 24) = __s;
        if (!SizeFallback)
          return SizeFallback;
        break;
      case 0xDu:
        if (v14 != 112)
          goto LABEL_145;
        SizeFallback = (char *)v13 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v13;
        if ((*(char *)v13 & 0x80000000) == 0)
          goto LABEL_57;
        v27 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v27 << 7) - 128);
        if ((v27 & 0x80000000) == 0)
        {
          SizeFallback = (char *)v13 + 2;
LABEL_57:
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_QWORD *)this + 25) = __s;
          v12 = 2;
          goto LABEL_4;
        }
        SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v13, __s);
        v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((_QWORD *)this + 25) = __s;
        if (!SizeFallback)
          return SizeFallback;
        break;
      case 0xEu:
        if (v14 != 121)
          goto LABEL_145;
        v28 = *(_QWORD *)v13;
        v19 = (google::protobuf::internal *)((char *)v13 + 8);
        *((_QWORD *)this + 26) = v28;
        goto LABEL_96;
      case 0xFu:
        if (v14 != 129)
          goto LABEL_145;
        v29 = *(_QWORD *)v13;
        v19 = (google::protobuf::internal *)((char *)v13 + 8);
        *((_QWORD *)this + 27) = v29;
        goto LABEL_96;
      case 0x10u:
        if (v14 != 137)
          goto LABEL_145;
        v30 = *(_QWORD *)v13;
        v19 = (google::protobuf::internal *)((char *)v13 + 8);
        *((_QWORD *)this + 28) = v30;
        goto LABEL_96;
      case 0x11u:
        if (v14 == 146)
        {
          SizeFallback = google::protobuf::internal::PackedInt64Parser(v65, (unsigned __int8 *)v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback)
            return SizeFallback;
          break;
        }
        if (v14 != 144)
          goto LABEL_145;
        v55 = google::protobuf::internal::ReadVarint64(&v68, (const char **)__s);
        v56 = *((unsigned int *)this + 10);
        if ((_DWORD)v56 == *((_DWORD *)this + 11))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v65, v56 + 1);
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v56) = v55;
        *((_DWORD *)this + 10) = v56 + 1;
        SizeFallback = (std::string::value_type *)v68;
        if (!v68)
          return SizeFallback;
        break;
      case 0x12u:
        if (v14 == 154)
        {
          SizeFallback = google::protobuf::internal::PackedInt64Parser(v66, (unsigned __int8 *)v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback)
            return SizeFallback;
          break;
        }
        if (v14 != 152)
          goto LABEL_145;
        v57 = google::protobuf::internal::ReadVarint64(&v68, (const char **)__s);
        v58 = *((unsigned int *)this + 16);
        if ((_DWORD)v58 == *((_DWORD *)this + 17))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v66, v58 + 1);
        *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v58) = v57;
        *((_DWORD *)this + 16) = v58 + 1;
        SizeFallback = (std::string::value_type *)v68;
        if (!v68)
          return SizeFallback;
        break;
      case 0x13u:
        if (v14 != 162)
          goto LABEL_145;
        v31 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v8 & 1) == 0)
        {
          v32 = *v10;
          if (*v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_74;
LABEL_73:
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v10, v31, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
          v32 = *v10;
          v13 = v68;
          goto LABEL_74;
        }
        v31 = *(google::protobuf::Arena **)v31;
        v32 = *v10;
        if (*v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_73;
LABEL_74:
        v68 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(v32, (std::string::value_type *)v13, (uint64_t)a3);
        if (SHIBYTE(v32->__r_.__value_.__r.__words[2]) < 0)
        {
          v51 = (std::string *)v32->__r_.__value_.__r.__words[0];
          size = v32->__r_.__value_.__l.__size_;
          if ((size & 0x8000000000000000) != 0)
            google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v32->__r_.__value_.__l.__size_, "size_t to int conversion", v33);
          v32 = v51;
        }
        else
        {
          size = HIBYTE(v32->__r_.__value_.__r.__words[2]);
        }
        v52 = google::protobuf::internal::VerifyUTF8(v32, size, (google::protobuf::internal *)"operations_research.sat.CpSolverResponse.solution_info");
        SizeFallback = (std::string::value_type *)v68;
        if (v68)
          v12 = 2;
        else
          v12 = 4;
        if (v52)
          goto LABEL_4;
        return 0;
      case 0x14u:
        if (v14 != 170)
          goto LABEL_145;
        SizeFallback = (char *)v13 - 2;
        while (2)
        {
          v35 = (google::protobuf::internal *)(SizeFallback + 2);
          v68 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 2);
          v36 = (int *)*((_QWORD *)this + 13);
          if (!v36)
          {
            v38 = *((_DWORD *)this + 25);
LABEL_85:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v38 + 1);
            v36 = (int *)*((_QWORD *)this + 13);
            v38 = *v36;
            goto LABEL_86;
          }
          v37 = *((int *)this + 24);
          v38 = *v36;
          if ((int)v37 < *v36)
          {
            *((_DWORD *)this + 24) = v37 + 1;
            v39 = *(operations_research::sat::IntegerVariableProto **)&v36[2 * v37 + 2];
            v40 = (const char *)*(unsigned __int8 *)v35;
            if ((*(char *)v35 & 0x80000000) == 0)
              goto LABEL_87;
            goto LABEL_81;
          }
          if (v38 == *((_DWORD *)this + 25))
            goto LABEL_85;
LABEL_86:
          *v36 = v38 + 1;
          v39 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 11));
          v41 = *((_QWORD *)this + 13);
          v42 = *((int *)this + 24);
          *((_DWORD *)this + 24) = v42 + 1;
          *(_QWORD *)(v41 + 8 * v42 + 8) = v39;
          v35 = v68;
          v40 = (const char *)*(unsigned __int8 *)v68;
          if ((*(char *)v68 & 0x80000000) == 0)
          {
LABEL_87:
            SizeFallback = (char *)v35 + 1;
            goto LABEL_88;
          }
LABEL_81:
          SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback(v35, v40);
          if (!SizeFallback)
            return SizeFallback;
LABEL_88:
          v43 = a3[1];
          v44 = (_DWORD)v40 + (_DWORD)SizeFallback - v43.i32[0];
          *a3 = (int32x2_t)(*(_QWORD *)&v43 + (v44 & (v44 >> 31)));
          v45 = a3[3].i32[1];
          a3[3].i32[1] = v44;
          v43.i32[0] = a3[11].i32[0];
          v46 = __OFSUB__(v43.i32[0]--, 1);
          a3[11].i32[0] = v43.i32[0];
          if (v43.i32[0] < 0 != v46)
            return 0;
          v47 = operations_research::sat::IntegerVariableProto::_InternalParse(v39, SizeFallback, a3, a4, a5);
          SizeFallback = v47;
          if (!v47)
            return SizeFallback;
          ++a3[11].i32[0];
          if (a3[10].i32[0])
            return 0;
          v48 = a3[3].i32[1] + v45 - v44;
          a3[3].i32[1] = v48;
          v49 = (int32x2_t)(*(_QWORD *)&a3[1] + (v48 & (v48 >> 31)));
          *a3 = v49;
          v68 = (google::protobuf::UnknownFieldSet *)v47;
          if (*(_QWORD *)&v49 > (unint64_t)v47)
          {
            v12 = 2;
            if (*(_WORD *)v47 != 426)
              goto LABEL_4;
            continue;
          }
          goto LABEL_3;
        }
      case 0x15u:
        if (v14 != 177)
          goto LABEL_145;
        v50 = *(_QWORD *)v13;
        v19 = (google::protobuf::internal *)((char *)v13 + 8);
        *((_QWORD *)this + 29) = v50;
LABEL_96:
        v68 = v19;
        v12 = 2;
        SizeFallback = (std::string::value_type *)v19;
        goto LABEL_4;
      case 0x16u:
        if (v14 == 186)
        {
          SizeFallback = google::protobuf::internal::PackedInt32Parser(v67, (unsigned __int8 *)v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
          v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback)
            return SizeFallback;
          break;
        }
        if (v14 != 184)
          goto LABEL_145;
        v59 = google::protobuf::internal::ReadVarint64(&v68, (const char **)__s);
        v60 = *((unsigned int *)this + 28);
        if ((_DWORD)v60 == *((_DWORD *)this + 29))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v67, v60 + 1);
        *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v60) = v59;
        *((_DWORD *)this + 28) = v60 + 1;
        SizeFallback = (std::string::value_type *)v68;
        if (!v68)
          return SizeFallback;
        break;
      default:
        goto LABEL_145;
    }
LABEL_3:
    v12 = 2;
LABEL_4:
    if (v12 != 2)
      return 0;
  }
  v16 = v14 + (*(unsigned __int8 *)v13 << 7);
  v14 = v16 - 128;
  if (*(char *)v13 < 0)
  {
    TagFallback = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)SizeFallback, (const char *)(v16 - 128));
    v68 = TagFallback;
    if (!TagFallback)
      return 0;
    v13 = TagFallback;
    v14 = __s;
    v15 = (__s >> 3) - 1;
    goto LABEL_14;
  }
  v13 = (google::protobuf::internal *)(SizeFallback + 2);
  v68 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 2);
  v15 = (v14 >> 3) - 1;
  if (v15 <= 0x16)
    goto LABEL_14;
LABEL_145:
  if (v14)
    v61 = (v14 & 7) == 4;
  else
    v61 = 1;
  if (!v61)
  {
    if ((*v8 & 1) != 0)
    {
      SizeFallback = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), v13, a3, a5);
      v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (!SizeFallback)
        return SizeFallback;
    }
    else
    {
      v62 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      SizeFallback = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v62, v68, a3, v63);
      v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (!SizeFallback)
        return SizeFallback;
    }
    goto LABEL_3;
  }
  a3[10].i32[0] = v14 - 1;
  return (std::string::value_type *)v13;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CpSolverResponse::_InternalSerialize(operations_research::sat::CpSolverResponse *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  unsigned int v7;
  int v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  _BYTE *v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  const char *v70;
  uint64_t v71;
  int64_t v72;
  const void *v73;
  int v74;
  int i;
  google::protobuf::UnknownFieldSet *v76;
  operations_research::sat::IntegerVariableProto *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  _BYTE *v86;
  unsigned int v87;
  int *v88;
  int *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v98;
  unsigned int v99;
  char *v100;
  unsigned int v101;
  char *v102;
  unsigned int v103;

  v5 = a2;
  v7 = *((_DWORD *)this + 38);
  if (!v7)
  {
LABEL_9:
    v8 = *((_DWORD *)this + 8);
    if (v8 < 1)
      goto LABEL_27;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_DWORD *)this + 38);
    *v5 = 8;
    if (v7 <= 0x7F)
    {
LABEL_4:
      v5[1] = v7;
      v5 += 2;
      v8 = *((_DWORD *)this + 8);
      if (v8 < 1)
        goto LABEL_27;
LABEL_10:
      if (*(_QWORD *)a3 <= (unint64_t)v5)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        *v5 = 18;
        v10 = v5 + 1;
        if (v8 < 0x80)
          goto LABEL_12;
      }
      else
      {
        *v5 = 18;
        v10 = v5 + 1;
        if (v8 < 0x80)
        {
LABEL_12:
          v5 += 2;
          *v10 = v8;
          v11 = (unint64_t *)*((_QWORD *)this + 3);
          v12 = &v11[*((int *)this + 4)];
          while (1)
          {
            if (*(_QWORD *)a3 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
              v18 = *v11++;
              v13 = v18;
              if (v18 > 0x7F)
              {
LABEL_17:
                *v5 = v13 | 0x80;
                v15 = v13 >> 7;
                if (v13 >> 14)
                {
                  v5 += 2;
                  do
                  {
                    *(v5 - 1) = v15 | 0x80;
                    v16 = v15 >> 7;
                    ++v5;
                    v17 = v15 >> 14;
                    v15 >>= 7;
                  }
                  while (v17);
                  *(v5 - 1) = v16;
                }
                else
                {
                  v5[1] = v15;
                  v5 += 2;
                }
                goto LABEL_14;
              }
            }
            else
            {
              v14 = *v11++;
              v13 = v14;
              if (v14 > 0x7F)
                goto LABEL_17;
            }
            *v5++ = v13;
LABEL_14:
            if (v11 >= v12)
              goto LABEL_27;
          }
        }
      }
      do
      {
        *v10++ = v8 | 0x80;
        v26 = v8 >> 14;
        v8 = v8 >> 7;
      }
      while (v26);
      v5 = v10 - 1;
      goto LABEL_12;
    }
  }
  else
  {
    *a2 = 8;
    if (v7 <= 0x7F)
      goto LABEL_4;
  }
  v5[1] = v7 | 0x80;
  v9 = (unint64_t)(int)v7 >> 7;
  if (!(v7 >> 14))
  {
    v5[2] = v9;
    v5 += 3;
    goto LABEL_9;
  }
  v5 += 3;
  do
  {
    *(v5 - 1) = v9 | 0x80;
    v19 = v9 >> 7;
    ++v5;
    v20 = v9 >> 14;
    v9 >>= 7;
  }
  while (v20);
  *(v5 - 1) = v19;
  v8 = *((_DWORD *)this + 8);
  if (v8 >= 1)
    goto LABEL_10;
LABEL_27:
  if (*((double *)this + 18) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v21 = *((_QWORD *)this + 18);
    *v5 = 25;
    *(_QWORD *)(v5 + 1) = v21;
    v5 += 9;
  }
  if (*((double *)this + 20) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v22 = *((_QWORD *)this + 20);
    *v5 = 33;
    *(_QWORD *)(v5 + 1) = v22;
    v5 += 9;
  }
  if (*((_BYTE *)this + 156))
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v23 = *((_BYTE *)this + 156);
    }
    else
    {
      v23 = 1;
    }
    *v5 = 40;
    v5[1] = v23;
    v5 += 2;
  }
  v24 = *((_QWORD *)this + 21);
  if (!v24)
  {
LABEL_51:
    v25 = *((_QWORD *)this + 22);
    if (!v25)
      goto LABEL_63;
    goto LABEL_52;
  }
  if (*(_QWORD *)a3 <= (unint64_t)v5)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v24 = *((_QWORD *)this + 21);
    *v5 = 80;
    if (v24 <= 0x7F)
    {
LABEL_42:
      v5[1] = v24;
      v5 += 2;
      v25 = *((_QWORD *)this + 22);
      if (!v25)
        goto LABEL_63;
LABEL_52:
      if (*(_QWORD *)a3 <= (unint64_t)v5)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v25 = *((_QWORD *)this + 22);
        *v5 = 88;
        if (v25 <= 0x7F)
        {
LABEL_54:
          v5[1] = v25;
          v5 += 2;
          v28 = *((_QWORD *)this + 23);
          if (v28)
            goto LABEL_64;
          goto LABEL_75;
        }
      }
      else
      {
        *v5 = 88;
        if (v25 <= 0x7F)
          goto LABEL_54;
      }
      v5[1] = v25 | 0x80;
      v31 = v25 >> 7;
      if (!(v25 >> 14))
      {
        v5[2] = v31;
        v5 += 3;
        goto LABEL_63;
      }
      v5 += 3;
      do
      {
        *(v5 - 1) = v31 | 0x80;
        v33 = v31 >> 7;
        ++v5;
        v34 = v31 >> 14;
        v31 >>= 7;
      }
      while (v34);
      *(v5 - 1) = v33;
      v28 = *((_QWORD *)this + 23);
      if (v28)
        goto LABEL_64;
LABEL_75:
      v32 = *((_QWORD *)this + 24);
      if (!v32)
        goto LABEL_87;
      goto LABEL_76;
    }
  }
  else
  {
    *v5 = 80;
    if (v24 <= 0x7F)
      goto LABEL_42;
  }
  v5[1] = v24 | 0x80;
  v27 = v24 >> 7;
  if (!(v24 >> 14))
  {
    v5[2] = v27;
    v5 += 3;
    goto LABEL_51;
  }
  v5 += 3;
  do
  {
    *(v5 - 1) = v27 | 0x80;
    v29 = v27 >> 7;
    ++v5;
    v30 = v27 >> 14;
    v27 >>= 7;
  }
  while (v30);
  *(v5 - 1) = v29;
  v25 = *((_QWORD *)this + 22);
  if (v25)
    goto LABEL_52;
LABEL_63:
  v28 = *((_QWORD *)this + 23);
  if (!v28)
    goto LABEL_75;
LABEL_64:
  if (*(_QWORD *)a3 <= (unint64_t)v5)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v28 = *((_QWORD *)this + 23);
    *v5 = 96;
    if (v28 <= 0x7F)
    {
LABEL_66:
      v5[1] = v28;
      v5 += 2;
      v32 = *((_QWORD *)this + 24);
      if (!v32)
        goto LABEL_87;
LABEL_76:
      if (*(_QWORD *)a3 <= (unint64_t)v5)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v32 = *((_QWORD *)this + 24);
        *v5 = 104;
        if (v32 <= 0x7F)
        {
LABEL_78:
          v5[1] = v32;
          v5 += 2;
          v36 = *((_QWORD *)this + 25);
          if (!v36)
            goto LABEL_99;
          goto LABEL_88;
        }
      }
      else
      {
        *v5 = 104;
        if (v32 <= 0x7F)
          goto LABEL_78;
      }
      v5[1] = v32 | 0x80;
      v39 = v32 >> 7;
      if (v32 >> 14)
      {
        v5 += 3;
        do
        {
          *(v5 - 1) = v39 | 0x80;
          v41 = v39 >> 7;
          ++v5;
          v42 = v39 >> 14;
          v39 >>= 7;
        }
        while (v42);
        *(v5 - 1) = v41;
        v36 = *((_QWORD *)this + 25);
        if (!v36)
          goto LABEL_99;
        goto LABEL_88;
      }
      v5[2] = v39;
      v5 += 3;
      goto LABEL_87;
    }
  }
  else
  {
    *v5 = 96;
    if (v28 <= 0x7F)
      goto LABEL_66;
  }
  v5[1] = v28 | 0x80;
  v35 = v28 >> 7;
  if (!(v28 >> 14))
  {
    v5[2] = v35;
    v5 += 3;
    goto LABEL_75;
  }
  v5 += 3;
  do
  {
    *(v5 - 1) = v35 | 0x80;
    v37 = v35 >> 7;
    ++v5;
    v38 = v35 >> 14;
    v35 >>= 7;
  }
  while (v38);
  *(v5 - 1) = v37;
  v32 = *((_QWORD *)this + 24);
  if (v32)
    goto LABEL_76;
LABEL_87:
  v36 = *((_QWORD *)this + 25);
  if (!v36)
    goto LABEL_99;
LABEL_88:
  if (*(_QWORD *)a3 <= (unint64_t)v5)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v36 = *((_QWORD *)this + 25);
    *v5 = 112;
    if (v36 <= 0x7F)
    {
LABEL_90:
      v5[1] = v36;
      v5 += 2;
      v40 = *((double *)this + 26);
      if (v40 == 0.0)
        goto LABEL_103;
      goto LABEL_100;
    }
  }
  else
  {
    *v5 = 112;
    if (v36 <= 0x7F)
      goto LABEL_90;
  }
  v5[1] = v36 | 0x80;
  v43 = v36 >> 7;
  if (v36 >> 14)
  {
    v5 += 3;
    do
    {
      *(v5 - 1) = v43 | 0x80;
      v82 = v43 >> 7;
      ++v5;
      v83 = v43 >> 14;
      v43 >>= 7;
    }
    while (v83);
    *(v5 - 1) = v82;
    v40 = *((double *)this + 26);
    if (v40 == 0.0)
      goto LABEL_103;
    goto LABEL_100;
  }
  v5[2] = v43;
  v5 += 3;
LABEL_99:
  v40 = *((double *)this + 26);
  if (v40 == 0.0)
    goto LABEL_103;
LABEL_100:
  if (*(_QWORD *)a3 <= (unint64_t)v5)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v44 = *((double *)this + 26);
  }
  else
  {
    v44 = v40;
  }
  *v5 = 121;
  *(double *)(v5 + 1) = v44;
  v5 += 9;
LABEL_103:
  if (*((double *)this + 27) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v45 = *((_QWORD *)this + 27);
    *(_WORD *)v5 = 385;
    *(_QWORD *)(v5 + 2) = v45;
    v5 += 10;
  }
  if (*((double *)this + 28) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v46 = *((_QWORD *)this + 28);
    *(_WORD *)v5 = 393;
    *(_QWORD *)(v5 + 2) = v46;
    v5 += 10;
  }
  v47 = *((_DWORD *)this + 14);
  if ((int)v47 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
    {
      v98 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      *(_WORD *)v98 = 402;
      v48 = v98 + 2;
      if (v47 < 0x80)
        goto LABEL_114;
    }
    else
    {
      *(_WORD *)v5 = 402;
      v48 = v5 + 2;
      if (v47 < 0x80)
      {
LABEL_114:
        LOBYTE(v49) = v47;
LABEL_115:
        *v48 = v49;
        v5 = v48 + 1;
        v50 = (unint64_t *)*((_QWORD *)this + 6);
        v51 = &v50[*((int *)this + 10)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)v5)
          {
            v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
            v57 = *v50++;
            v52 = v57;
            if (v57 > 0x7F)
            {
LABEL_120:
              *v5 = v52 | 0x80;
              v54 = v52 >> 7;
              if (v52 >> 14)
              {
                v5 += 2;
                do
                {
                  *(v5 - 1) = v54 | 0x80;
                  v55 = v54 >> 7;
                  ++v5;
                  v56 = v54 >> 14;
                  v54 >>= 7;
                }
                while (v56);
                *(v5 - 1) = v55;
              }
              else
              {
                v5[1] = v54;
                v5 += 2;
              }
              goto LABEL_117;
            }
          }
          else
          {
            v53 = *v50++;
            v52 = v53;
            if (v53 > 0x7F)
              goto LABEL_120;
          }
          *v5++ = v52;
LABEL_117:
          if (v50 >= v51)
            goto LABEL_127;
        }
      }
    }
    do
    {
      *v48++ = v47 | 0x80;
      v49 = v47 >> 7;
      v99 = v47 >> 14;
      v47 >>= 7;
    }
    while (v99);
    goto LABEL_115;
  }
LABEL_127:
  v58 = *((_DWORD *)this + 20);
  if ((int)v58 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
    {
      v100 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      *(_WORD *)v100 = 410;
      v59 = v100 + 2;
      if (v58 < 0x80)
        goto LABEL_130;
    }
    else
    {
      *(_WORD *)v5 = 410;
      v59 = v5 + 2;
      if (v58 < 0x80)
      {
LABEL_130:
        LOBYTE(v60) = v58;
LABEL_131:
        *v59 = v60;
        v5 = v59 + 1;
        v61 = (unint64_t *)*((_QWORD *)this + 9);
        v62 = &v61[*((int *)this + 16)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)v5)
          {
            v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
            v68 = *v61++;
            v63 = v68;
            if (v68 > 0x7F)
            {
LABEL_136:
              *v5 = v63 | 0x80;
              v65 = v63 >> 7;
              if (v63 >> 14)
              {
                v5 += 2;
                do
                {
                  *(v5 - 1) = v65 | 0x80;
                  v66 = v65 >> 7;
                  ++v5;
                  v67 = v65 >> 14;
                  v65 >>= 7;
                }
                while (v67);
                *(v5 - 1) = v66;
              }
              else
              {
                v5[1] = v65;
                v5 += 2;
              }
              goto LABEL_133;
            }
          }
          else
          {
            v64 = *v61++;
            v63 = v64;
            if (v64 > 0x7F)
              goto LABEL_136;
          }
          *v5++ = v63;
LABEL_133:
          if (v61 >= v62)
            goto LABEL_143;
        }
      }
    }
    do
    {
      *v59++ = v58 | 0x80;
      v60 = v58 >> 7;
      v101 = v58 >> 14;
      v58 >>= 7;
    }
    while (v101);
    goto LABEL_131;
  }
LABEL_143:
  v69 = (uint64_t *)*((_QWORD *)this + 17);
  if (*((char *)v69 + 23) < 0)
  {
    v70 = (const char *)v69[1];
    if (!v70)
      goto LABEL_156;
    v69 = (uint64_t *)*v69;
  }
  else
  {
    v70 = (const char *)*((unsigned __int8 *)v69 + 23);
    if (!*((_BYTE *)v69 + 23))
      goto LABEL_156;
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v69, v70, 1, (google::protobuf::internal *)"operations_research.sat.CpSolverResponse.solution_info");
  v71 = *((_QWORD *)this + 17);
  if (*(char *)(v71 + 23) < 0)
  {
    v72 = *(_QWORD *)(v71 + 8);
    if (v72 > 127)
      goto LABEL_172;
  }
  else
  {
    v72 = *(unsigned __int8 *)(v71 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)v5 + 13 < v72)
  {
LABEL_172:
    v5 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 20, v71, v5);
    v74 = *((_DWORD *)this + 24);
    if (!v74)
      goto LABEL_173;
    goto LABEL_157;
  }
  *(_WORD *)v5 = 418;
  v5[2] = v72;
  if (*(char *)(v71 + 23) >= 0)
    v73 = (const void *)v71;
  else
    v73 = *(const void **)v71;
  memcpy(v5 + 3, v73, v72);
  v5 += v72 + 3;
LABEL_156:
  v74 = *((_DWORD *)this + 24);
  if (!v74)
    goto LABEL_173;
LABEL_157:
  for (i = 0; i != v74; ++i)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v77 = *(operations_research::sat::IntegerVariableProto **)(*((_QWORD *)this + 13) + 8 * i + 8);
    *(_WORD *)v5 = 426;
    v78 = *((_DWORD *)v77 + 12);
    if (v78 <= 0x7F)
    {
      v5[2] = v78;
      v76 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    else
    {
      v5[2] = v78 | 0x80;
      v79 = v78 >> 7;
      if (v78 >> 14)
      {
        v76 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
        do
        {
          *((_BYTE *)v76 - 1) = v79 | 0x80;
          v80 = v79 >> 7;
          v76 = (google::protobuf::UnknownFieldSet *)((char *)v76 + 1);
          v81 = v79 >> 14;
          v79 >>= 7;
        }
        while (v81);
        *((_BYTE *)v76 - 1) = v80;
      }
      else
      {
        v5[3] = v79;
        v76 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    v5 = (char *)operations_research::sat::IntegerVariableProto::_InternalSerialize(v77, v76, a3, a4);
  }
LABEL_173:
  if (*((double *)this + 29) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v84 = *((_QWORD *)this + 29);
    *(_WORD *)v5 = 433;
    *(_QWORD *)(v5 + 2) = v84;
    v5 += 10;
  }
  v85 = *((_DWORD *)this + 32);
  if ((int)v85 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v5)
    {
      v102 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      *(_WORD *)v102 = 442;
      v86 = v102 + 2;
      if (v85 < 0x80)
        goto LABEL_180;
    }
    else
    {
      *(_WORD *)v5 = 442;
      v86 = v5 + 2;
      if (v85 < 0x80)
      {
LABEL_180:
        LOBYTE(v87) = v85;
LABEL_181:
        *v86 = v87;
        v5 = v86 + 1;
        v88 = (int *)*((_QWORD *)this + 15);
        v89 = &v88[*((int *)this + 28)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)v5)
          {
            v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
            v95 = *v88++;
            v90 = v95;
            if (v95 > 0x7F)
            {
LABEL_186:
              *v5 = v90 | 0x80;
              v92 = v90 >> 7;
              if (v90 >> 14)
              {
                v5 += 2;
                do
                {
                  *(v5 - 1) = v92 | 0x80;
                  v93 = v92 >> 7;
                  ++v5;
                  v94 = v92 >> 14;
                  v92 >>= 7;
                }
                while (v94);
                *(v5 - 1) = v93;
              }
              else
              {
                v5[1] = v92;
                v5 += 2;
              }
              goto LABEL_183;
            }
          }
          else
          {
            v91 = *v88++;
            v90 = v91;
            if (v91 > 0x7F)
              goto LABEL_186;
          }
          *v5++ = v90;
LABEL_183:
          if (v88 >= v89)
            goto LABEL_193;
        }
      }
    }
    do
    {
      *v86++ = v85 | 0x80;
      v87 = v85 >> 7;
      v103 = v85 >> 14;
      v85 >>= 7;
    }
    while (v103);
    goto LABEL_181;
  }
LABEL_193:
  v96 = *((_QWORD *)this + 1);
  if ((v96 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v96 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

char *operations_research::sat::CpSolverResponse::ByteSizeLong(operations_research::sat::CpSolverResponse *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const google::protobuf::UnknownFieldSet *v56;

  v2 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 4);
  v3 = 10;
  v4 = (9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v2 >= 0)
    v3 = v4;
  if (v2)
    v5 = v2;
  else
    v5 = 0;
  if (v2)
    v6 = v3 + 1;
  else
    v6 = 0;
  *((_DWORD *)this + 8) = v5;
  v7 = v6 + v2;
  v8 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  v9 = 10;
  v10 = (9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v8 >= 0)
    v9 = v10;
  v11 = v7 + v9 + 2;
  if (v8)
    v12 = v8;
  else
    v12 = 0;
  if (!v8)
    v11 = v7;
  *((_DWORD *)this + 14) = v12;
  v13 = v11 + v8;
  v14 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
  v15 = 10;
  v16 = (9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v14 >= 0)
    v15 = v16;
  v17 = v13 + v15 + 2;
  if (v14)
    v18 = v14;
  else
    v18 = 0;
  if (!v14)
    v17 = v13;
  *((_DWORD *)this + 20) = v18;
  v19 = v17 + v14;
  v20 = *((int *)this + 24);
  v21 = v19 + 2 * v20;
  v22 = *((_QWORD *)this + 13);
  if (v22)
    v23 = (uint64_t *)(v22 + 8);
  else
    v23 = 0;
  if ((_DWORD)v20)
  {
    for (i = 8 * v20; i; i -= 8)
    {
      v25 = *v23;
      v26 = google::protobuf::internal::WireFormatLite::Int64Size((int *)(*v23 + 16));
      if (v26)
      {
        if ((v26 & 0x80000000) != 0)
        {
          v27 = 11;
          *(_DWORD *)(v25 + 32) = v26;
          v28 = *(_QWORD *)(v25 + 40);
          v29 = *(unsigned __int8 *)(v28 + 23);
          if ((*(char *)(v28 + 23) & 0x80000000) == 0)
          {
LABEL_33:
            v30 = (char *)(v27 + v26);
            if (v29)
              goto LABEL_34;
            goto LABEL_38;
          }
        }
        else
        {
          v27 = ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1;
          *(_DWORD *)(v25 + 32) = v26;
          v28 = *(_QWORD *)(v25 + 40);
          v29 = *(unsigned __int8 *)(v28 + 23);
          if ((*(char *)(v28 + 23) & 0x80000000) == 0)
            goto LABEL_33;
        }
      }
      else
      {
        v27 = 0;
        *(_DWORD *)(v25 + 32) = 0;
        v28 = *(_QWORD *)(v25 + 40);
        v29 = *(unsigned __int8 *)(v28 + 23);
        if ((*(char *)(v28 + 23) & 0x80000000) == 0)
          goto LABEL_33;
      }
      v30 = (char *)(v27 + v26);
      if (*(_QWORD *)(v28 + 8))
      {
LABEL_34:
        v31 = *(_QWORD *)(v28 + 8);
        if ((v29 & 0x80u) == 0)
          v32 = v29;
        else
          v32 = v31;
        v30 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
LABEL_38:
      if ((*(_BYTE *)(v25 + 8) & 1) != 0)
        v30 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v25 + 8), (const google::protobuf::UnknownFieldSet *)v30, (_DWORD *)(v25 + 48));
      else
        *(_DWORD *)(v25 + 48) = (_DWORD)v30;
      v21 += (uint64_t)&v30[(9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6];
      ++v23;
    }
  }
  v33 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 28);
  v34 = 12;
  v35 = ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((int)v33 >= 0)
    v34 = v35;
  v36 = v34 + v21;
  if (v33)
    v37 = v33;
  else
    v37 = 0;
  if (!v33)
    v36 = v21;
  *((_DWORD *)this + 32) = v37;
  v38 = *((_QWORD *)this + 17);
  v39 = *(unsigned __int8 *)(v38 + 23);
  if (*(char *)(v38 + 23) < 0)
  {
    v40 = v36 + v33;
    if (!*(_QWORD *)(v38 + 8))
      goto LABEL_58;
  }
  else
  {
    v40 = v36 + v33;
    if (!*(_BYTE *)(v38 + 23))
      goto LABEL_58;
  }
  v41 = *(_QWORD *)(v38 + 8);
  if ((v39 & 0x80u) == 0)
    v41 = v39;
  v40 += v41 + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_58:
  if (*((double *)this + 18) != 0.0)
    v40 += 9;
  v42 = *((_DWORD *)this + 38);
  v43 = 11;
  v44 = ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v42 >= 0)
    v43 = v44;
  v45 = v43 + v40;
  if (v42)
    v40 = v45;
  if (*((_BYTE *)this + 156))
    v40 += 2;
  if (*((double *)this + 20) != 0.0)
    v40 += 9;
  v46 = *((_QWORD *)this + 21);
  v47 = *((_QWORD *)this + 22);
  v48 = v40 + ((9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6);
  if (v46)
    v40 = v48 + 1;
  v49 = v40 + ((9 * (__clz(v47 | 1) ^ 0x3F) + 73) >> 6);
  if (v47)
    v40 = v49 + 1;
  v50 = *((_QWORD *)this + 23);
  v51 = *((_QWORD *)this + 24);
  v52 = v40 + ((9 * (__clz(v50 | 1) ^ 0x3F) + 73) >> 6);
  if (v50)
    v40 = v52 + 1;
  v53 = v40 + ((9 * (__clz(v51 | 1) ^ 0x3F) + 73) >> 6);
  if (v51)
    v40 = v53 + 1;
  v54 = *((_QWORD *)this + 25);
  v55 = v40 + ((9 * (__clz(v54 | 1) ^ 0x3F) + 73) >> 6);
  if (v54)
    v40 = v55 + 1;
  if (*((double *)this + 26) != 0.0)
    v40 += 9;
  if (*((double *)this + 27) != 0.0)
    v40 += 10;
  if (*((double *)this + 28) != 0.0)
    v40 += 10;
  if (*((double *)this + 29) == 0.0)
    v56 = (const google::protobuf::UnknownFieldSet *)v40;
  else
    v56 = (const google::protobuf::UnknownFieldSet *)(v40 + 10);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CpSolverResponse *)((char *)this + 8), v56, (_DWORD *)this + 60);
  *((_DWORD *)this + 60) = (_DWORD)v56;
  return (char *)v56;
}

void operations_research::sat::CpSolverResponse::MergeFrom(operations_research::sat::CpSolverResponse *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::CpSolverResponse *__hidden))a2 == &off_24F982478)
    operations_research::sat::CpSolverResponse::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::CpSolverResponse::MergeFrom(operations_research::sat::CpSolverResponse *this, const operations_research::sat::CpSolverResponse *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  operations_research::sat::IntegerVariableProto **v23;
  operations_research::sat::IntegerVariableProto **v24;
  operations_research::sat::IntegerVariableProto *v25;
  operations_research::sat::IntegerVariableProto *v26;
  operations_research::sat::IntegerVariableProto *v27;
  google::protobuf::Arena *v28;
  int v29;
  uint64_t v30;
  operations_research::sat::IntegerVariableProto **v31;
  operations_research::sat::IntegerVariableProto **v32;
  operations_research::sat::IntegerVariableProto *v33;
  operations_research::sat::IntegerVariableProto *v34;
  int v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string **v41;
  uint64_t v42;
  google::protobuf::Arena *v43;
  std::string *v44;
  double v45;
  int v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  unsigned int *v57;
  uint64_t v58;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 8 * v10), *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    v16 = *((int *)this + 16);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v16 + v15);
    v17 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy((void *)(v17 + 8 * v16), *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  v18 = *((_DWORD *)a2 + 24);
  if (v18)
  {
    v58 = *((_QWORD *)a2 + 13);
    v57 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpSolverResponse *)((char *)this + 88), v18);
    v19 = **((_DWORD **)this + 13);
    v20 = *((_DWORD *)this + 24);
    v21 = v19 - v20;
    if (v19 - v20 >= v18)
      v22 = v18;
    else
      v22 = v21;
    if ((int)v22 >= 1)
    {
      v23 = (operations_research::sat::IntegerVariableProto **)v57;
      v24 = (operations_research::sat::IntegerVariableProto **)(v58 + 8);
      do
      {
        v26 = *v24++;
        v25 = v26;
        v27 = *v23++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v25, v27);
        --v22;
      }
      while (v22);
    }
    if (v21 < v18)
    {
      v28 = (google::protobuf::Arena *)*((_QWORD *)this + 11);
      v29 = v20 + v18 - v19;
      v30 = 2 * v21;
      v31 = (operations_research::sat::IntegerVariableProto **)&v57[v30];
      v32 = (operations_research::sat::IntegerVariableProto **)(v30 * 4 + v58 + 8);
      do
      {
        v33 = *v32++;
        v34 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v28);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v33, v34);
        *v31++ = v34;
        --v29;
      }
      while (v29);
    }
    v35 = *((_DWORD *)this + 24) + v18;
    *((_DWORD *)this + 24) = v35;
    v36 = (int *)*((_QWORD *)this + 13);
    if (*v36 < v35)
      *v36 = v35;
  }
  v37 = *((_DWORD *)a2 + 28);
  if (v37)
  {
    v38 = *((int *)this + 28);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 28, v38 + v37);
    v39 = *((_QWORD *)this + 15);
    *((_DWORD *)this + 28) += *((_DWORD *)a2 + 28);
    memcpy((void *)(v39 + 4 * v38), *((const void **)a2 + 15), 4 * *((int *)a2 + 28));
  }
  v40 = *((_QWORD *)a2 + 17);
  if (*(char *)(v40 + 23) < 0)
  {
    if (!*(_QWORD *)(v40 + 8))
      goto LABEL_32;
  }
  else if (!*(_BYTE *)(v40 + 23))
  {
LABEL_32:
    v45 = *((double *)a2 + 18);
    if (v45 == 0.0)
      goto LABEL_34;
    goto LABEL_33;
  }
  v41 = (std::string **)((char *)this + 136);
  v42 = *((_QWORD *)this + 1);
  v43 = (google::protobuf::Arena *)(v42 & 0xFFFFFFFFFFFFFFFELL);
  if ((v42 & 1) != 0)
  {
    v43 = *(google::protobuf::Arena **)v43;
    v44 = *v41;
    if (*v41 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_31;
  }
  else
  {
    v44 = *v41;
    if (*v41 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_31:
      std::string::operator=(v44, *((const std::string **)a2 + 17));
      goto LABEL_32;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v41, v43, (__int128 *)v40);
  v45 = *((double *)a2 + 18);
  if (v45 != 0.0)
LABEL_33:
    *((double *)this + 18) = v45;
LABEL_34:
  v46 = *((_DWORD *)a2 + 38);
  if (v46)
    *((_DWORD *)this + 38) = v46;
  if (*((_BYTE *)a2 + 156))
    *((_BYTE *)this + 156) = 1;
  v47 = *((double *)a2 + 20);
  if (v47 != 0.0)
    *((double *)this + 20) = v47;
  v48 = *((_QWORD *)a2 + 21);
  if (v48)
    *((_QWORD *)this + 21) = v48;
  v49 = *((_QWORD *)a2 + 22);
  if (v49)
    *((_QWORD *)this + 22) = v49;
  v50 = *((_QWORD *)a2 + 23);
  if (v50)
    *((_QWORD *)this + 23) = v50;
  v51 = *((_QWORD *)a2 + 24);
  if (v51)
    *((_QWORD *)this + 24) = v51;
  v52 = *((_QWORD *)a2 + 25);
  if (v52)
    *((_QWORD *)this + 25) = v52;
  v53 = *((double *)a2 + 26);
  if (v53 != 0.0)
    *((double *)this + 26) = v53;
  v54 = *((double *)a2 + 27);
  if (v54 != 0.0)
    *((double *)this + 27) = v54;
  v55 = *((double *)a2 + 28);
  if (v55 != 0.0)
    *((double *)this + 28) = v55;
  v56 = *((double *)a2 + 29);
  if (v56 != 0.0)
    *((double *)this + 29) = v56;
}

void operations_research::sat::CpSolverResponse::CopyFrom(operations_research::sat::CpSolverResponse *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    operations_research::sat::CpSolverResponse::Clear(this);
    if (*(void (***)(operations_research::sat::CpSolverResponse *__hidden))a2 == &off_24F982478)
      operations_research::sat::CpSolverResponse::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v4);
  }
}

void operations_research::sat::CpSolverResponse::CopyFrom(operations_research::sat::CpSolverResponse *this, const operations_research::sat::CpSolverResponse *a2)
{
  if (a2 != this)
  {
    operations_research::sat::CpSolverResponse::Clear(this);
    operations_research::sat::CpSolverResponse::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::CpSolverResponse::IsInitialized(operations_research::sat::CpSolverResponse *this)
{
  return 1;
}

__n128 operations_research::sat::CpSolverResponse::InternalSwap(operations_research::sat::CpSolverResponse *this, operations_research::sat::CpSolverResponse *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 result;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v7 = (uint64_t *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)a2 + 1);
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      v8 = (uint64_t *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  v9 = *v8;
  *v8 = *v7;
  *v7 = v9;
  v10 = v8[1];
  v8[1] = v7[1];
  v7[1] = v10;
  v11 = v8[2];
  v8[2] = v7[2];
  v7[2] = v11;
LABEL_8:
  v12 = *((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_QWORD *)a2 + 2) = v12;
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 5);
  v15 = *((_QWORD *)this + 6);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *((_QWORD *)a2 + 5) = v14;
  *((_QWORD *)a2 + 6) = v15;
  v16 = *((_QWORD *)this + 8);
  v17 = *((_QWORD *)this + 9);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_QWORD *)a2 + 8) = v16;
  *((_QWORD *)a2 + 9) = v17;
  v18 = *((_QWORD *)this + 12);
  v19 = *((_QWORD *)this + 13);
  *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 12) = v18;
  *((_QWORD *)a2 + 13) = v19;
  v20 = *((_QWORD *)this + 14);
  v21 = *((_QWORD *)this + 15);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_QWORD *)a2 + 14) = v20;
  *((_QWORD *)a2 + 15) = v21;
  v22 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v22;
  v23 = *((_QWORD *)this + 18);
  v24 = *((_QWORD *)this + 19);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_QWORD *)a2 + 18) = v23;
  *((_QWORD *)a2 + 19) = v24;
  v25 = *((_QWORD *)this + 20);
  v26 = *((_QWORD *)this + 21);
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  *((_QWORD *)a2 + 20) = v25;
  *((_QWORD *)a2 + 21) = v26;
  v27 = *((_QWORD *)this + 22);
  v28 = *((_QWORD *)this + 23);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_QWORD *)a2 + 22) = v27;
  *((_QWORD *)a2 + 23) = v28;
  v29 = *((_QWORD *)this + 24);
  v30 = *((_QWORD *)this + 25);
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  *((_QWORD *)a2 + 24) = v29;
  *((_QWORD *)a2 + 25) = v30;
  v31 = *((_QWORD *)this + 26);
  v32 = *((_QWORD *)this + 27);
  *((_OWORD *)this + 13) = *((_OWORD *)a2 + 13);
  *((_QWORD *)a2 + 26) = v31;
  *((_QWORD *)a2 + 27) = v32;
  v33 = *((_QWORD *)this + 28);
  v34 = *((_QWORD *)this + 29);
  result = *((__n128 *)a2 + 14);
  *((__n128 *)this + 14) = result;
  *((_QWORD *)a2 + 28) = v33;
  *((_QWORD *)a2 + 29) = v34;
  return result;
}

uint64_t operations_research::sat::CpSolverResponse::GetMetadata(operations_research::sat::CpSolverResponse *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[50];
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(google::protobuf::Arena *this)
{
  unint64_t AlignedNoHook;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x38uLL);
    *(_QWORD *)AlignedNoHook = &off_24F981348;
    *(_QWORD *)(AlignedNoHook + 8) = this;
    *(_DWORD *)(AlignedNoHook + 16) = 0;
    *(_DWORD *)(AlignedNoHook + 20) = 0;
    *(_QWORD *)(AlignedNoHook + 24) = this;
    *(_DWORD *)(AlignedNoHook + 48) = 0;
    if (atomic_load(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto))
      goto LABEL_7;
  }
  else
  {
    AlignedNoHook = operator new();
    *(_QWORD *)(AlignedNoHook + 16) = 0;
    *(_QWORD *)AlignedNoHook = &off_24F981348;
    *(_QWORD *)(AlignedNoHook + 8) = 0;
    *(_DWORD *)(AlignedNoHook + 48) = 0;
    *(_QWORD *)(AlignedNoHook + 24) = 0;
    if (atomic_load(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *(_QWORD *)(AlignedNoHook + 40) = &google::protobuf::internal::fixed_address_empty_string;
  return AlignedNoHook;
}

void sub_22DA763B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  MEMORY[0x22E31DF78](v1, 0x10A1C407499B434);
  _Unwind_Resume(a1);
}

void sub_22DA763E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x28uLL);
    *(_QWORD *)result = off_24F9813F8;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_DWORD *)(result + 36) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = off_24F9813F8;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 36) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x30uLL);
    *(_QWORD *)result = off_24F9814A8;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 36) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = off_24F9814A8;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 36) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x50uLL);
    *(_QWORD *)result = &off_24F981558;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 64) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981558;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  return result;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(google::protobuf::Arena *this)
{
  unint64_t AlignedNoHook;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x38uLL);
    *(_QWORD *)AlignedNoHook = &off_24F981608;
    *(_QWORD *)(AlignedNoHook + 8) = this;
    *(_QWORD *)(AlignedNoHook + 24) = 0;
    *(_QWORD *)(AlignedNoHook + 32) = 0;
    *(_QWORD *)(AlignedNoHook + 16) = this;
    *(_DWORD *)(AlignedNoHook + 48) = 0;
    if (atomic_load(scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto))
      goto LABEL_7;
  }
  else
  {
    AlignedNoHook = operator new();
    *(_QWORD *)(AlignedNoHook + 16) = 0;
    *(_QWORD *)AlignedNoHook = &off_24F981608;
    *(_QWORD *)(AlignedNoHook + 8) = 0;
    *(_DWORD *)(AlignedNoHook + 48) = 0;
    *(_QWORD *)(AlignedNoHook + 24) = 0;
    *(_QWORD *)(AlignedNoHook + 32) = 0;
    if (atomic_load(scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *(_QWORD *)(AlignedNoHook + 40) = 0;
  return AlignedNoHook;
}

void sub_22DA766D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  operations_research::sat::LinearExpressionProto **v4;
  operations_research::sat::LinearExpressionProto **v5;
  uint64_t v6;

  v4 = *(operations_research::sat::LinearExpressionProto ***)(v1 + 32);
  if (v4 && !*v2)
  {
    v5 = v4 + 1;
    v6 = *(unsigned int *)v4;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v5)
        {
          operations_research::sat::LinearExpressionProto::~LinearExpressionProto(*v5);
          MEMORY[0x22E31DF78]();
        }
        ++v5;
        --v6;
      }
      while (v6);
    }
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 32) = 0;
  MEMORY[0x22E31DF78](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

void sub_22DA76758(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  operations_research::sat::LinearExpressionProto **v3;
  operations_research::sat::LinearExpressionProto **v4;
  uint64_t v5;

  v3 = *(operations_research::sat::LinearExpressionProto ***)(v1 + 32);
  if (v3 && !*(_QWORD *)(v1 + 16))
  {
    v4 = v3 + 1;
    v5 = *(unsigned int *)v3;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::LinearExpressionProto::~LinearExpressionProto(*v4);
          MEMORY[0x22E31DF78]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      v3 = *(operations_research::sat::LinearExpressionProto ***)(v1 + 32);
    }
    operator delete(v3);
  }
  *(_QWORD *)(v1 + 32) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x28uLL);
    *(_QWORD *)result = off_24F9816B8;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_DWORD *)(result + 36) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = off_24F9816B8;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 36) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x58uLL);
    *(_QWORD *)result = &off_24F981768;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = this;
    *(_DWORD *)(result + 84) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981768;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 84) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x30uLL);
    *(_QWORD *)result = off_24F981818;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_DWORD *)(result + 44) = 0;
    *(_QWORD *)(result + 36) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = off_24F981818;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 44) = 0;
    *(_QWORD *)(result + 36) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(google::protobuf::Arena *this)
{
  _QWORD *result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook(this, 0x20uLL);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = off_24F9818C8;
  result[1] = this;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x28uLL);
    *(_QWORD *)result = off_24F981978;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_DWORD *)(result + 36) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = off_24F981978;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 36) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x48uLL);
    *(_QWORD *)result = &off_24F981A28;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_DWORD *)(result + 64) = 0;
    *(_BYTE *)(result + 60) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981A28;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_BYTE *)(result + 60) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x48uLL);
    *(_QWORD *)result = &off_24F981AD8;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_QWORD *)(result + 60) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981AD8;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 60) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x70uLL);
    *(_QWORD *)result = &off_24F981B88;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = this;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_DWORD *)(result + 104) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981B88;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x58uLL);
    *(_QWORD *)result = &off_24F981C38;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = this;
    *(_DWORD *)(result + 84) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981C38;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 84) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x80uLL);
    *(_QWORD *)result = &off_24F981CE8;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = this;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = this;
    *(_DWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 112) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981CE8;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x40uLL);
    *(_QWORD *)result = &off_24F981D98;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_DWORD *)(result + 60) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981D98;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 60) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x48uLL);
    *(_QWORD *)result = &off_24F981E48;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_DWORD *)(result + 64) = 0;
    *(_BYTE *)(result + 60) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981E48;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_BYTE *)(result + 60) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x40uLL);
    *(_QWORD *)result = &off_24F981EF8;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_DWORD *)(result + 60) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981EF8;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 60) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x98uLL);
    *(_QWORD *)result = &off_24F981FA8;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = this;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = this;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = this;
    *(_DWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 136) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F981FA8;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 136) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = 0;
  }
  return result;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(google::protobuf::Arena *this)
{
  unint64_t AlignedNoHook;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x40uLL);
    *(_QWORD *)AlignedNoHook = &off_24F982058;
    *(_QWORD *)(AlignedNoHook + 8) = this;
    *(_DWORD *)(AlignedNoHook + 16) = 0;
    *(_DWORD *)(AlignedNoHook + 20) = 0;
    *(_QWORD *)(AlignedNoHook + 24) = this;
    *(_DWORD *)(AlignedNoHook + 56) = 0;
    if (atomic_load(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto))
      goto LABEL_7;
  }
  else
  {
    AlignedNoHook = operator new();
    *(_QWORD *)(AlignedNoHook + 16) = 0;
    *(_QWORD *)AlignedNoHook = &off_24F982058;
    *(_QWORD *)(AlignedNoHook + 8) = 0;
    *(_DWORD *)(AlignedNoHook + 56) = 0;
    *(_QWORD *)(AlignedNoHook + 24) = 0;
    if (atomic_load(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *(_QWORD *)(AlignedNoHook + 40) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(AlignedNoHook + 60) = 0;
  return AlignedNoHook;
}

void sub_22DA77250(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  MEMORY[0x22E31DF78](v1, 0x10A1C409813F0CCLL);
  _Unwind_Resume(a1);
}

void sub_22DA7727C(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x70uLL);
    *(_QWORD *)result = &off_24F982108;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = this;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_DWORD *)(result + 104) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F982108;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
  }
  return result;
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(google::protobuf::Arena *this)
{
  _QWORD *result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook(this, 0x28uLL);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = off_24F9821B8;
  result[1] = this;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(google::protobuf::Arena *this)
{
  unint64_t AlignedNoHook;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x50uLL);
    *(_DWORD *)(AlignedNoHook + 16) = 0;
    *(_QWORD *)AlignedNoHook = &off_24F982268;
    *(_QWORD *)(AlignedNoHook + 8) = this;
    *(_DWORD *)(AlignedNoHook + 20) = 0;
    *(_QWORD *)(AlignedNoHook + 24) = this;
    *(_QWORD *)(AlignedNoHook + 40) = this;
    *(_QWORD *)(AlignedNoHook + 48) = 0;
    *(_QWORD *)(AlignedNoHook + 56) = 0;
    *(_DWORD *)(AlignedNoHook + 72) = 0;
    if (atomic_load(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto))
      goto LABEL_7;
  }
  else
  {
    AlignedNoHook = operator new();
    *(_QWORD *)AlignedNoHook = &off_24F982268;
    *(_QWORD *)(AlignedNoHook + 8) = 0;
    *(_QWORD *)(AlignedNoHook + 16) = 0;
    *(_QWORD *)(AlignedNoHook + 40) = 0;
    *(_DWORD *)(AlignedNoHook + 72) = 0;
    *(_QWORD *)(AlignedNoHook + 24) = 0;
    *(_QWORD *)(AlignedNoHook + 48) = 0;
    *(_QWORD *)(AlignedNoHook + 56) = 0;
    if (atomic_load(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *(_QWORD *)(AlignedNoHook + 64) = 0;
  return AlignedNoHook;
}

void sub_22DA774DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(v3);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  MEMORY[0x22E31DF78](v1, 0x10A1C40E4523975);
  _Unwind_Resume(a1);
}

void sub_22DA77514(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x40uLL);
    *(_QWORD *)result = &off_24F982318;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = this;
    *(_DWORD *)(result + 60) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24F982318;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 60) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  return result;
}

operations_research::sat::CpModelProto *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpModelProto>(google::protobuf::Arena *this)
{
  operations_research::sat::CpModelProto *AlignedNoHook;
  operations_research::sat::CpModelProto *v4;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = (operations_research::sat::CpModelProto *)google::protobuf::Arena::AllocateAlignedNoHook(this, 0x90uLL);
    return operations_research::sat::CpModelProto::CpModelProto(AlignedNoHook, this);
  }
  else
  {
    v4 = (operations_research::sat::CpModelProto *)operator new();
    operations_research::sat::CpModelProto::CpModelProto(v4, 0);
    return v4;
  }
}

void sub_22DA77668(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C402A9E5E58);
  _Unwind_Resume(a1);
}

operations_research::sat::CpSolverResponse *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpSolverResponse>(google::protobuf::Arena *this)
{
  operations_research::sat::CpSolverResponse *AlignedNoHook;
  operations_research::sat::CpSolverResponse *v4;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = (operations_research::sat::CpSolverResponse *)google::protobuf::Arena::AllocateAlignedNoHook(this, 0xF8uLL);
    return operations_research::sat::CpSolverResponse::CpSolverResponse(AlignedNoHook, this);
  }
  else
  {
    v4 = (operations_research::sat::CpSolverResponse *)operator new();
    operations_research::sat::CpSolverResponse::CpSolverResponse(v4, 0);
    return v4;
  }
}

void sub_22DA77714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C40DD2F4064);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::IntegerVariableProto::New(operations_research::sat::IntegerVariableProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(0);
}

unint64_t operations_research::sat::IntegerVariableProto::New(operations_research::sat::IntegerVariableProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(a2);
}

uint64_t operations_research::sat::IntegerVariableProto::GetCachedSize(operations_research::sat::IntegerVariableProto *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t operations_research::sat::BoolArgumentProto::New(operations_research::sat::BoolArgumentProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(0);
}

uint64_t operations_research::sat::BoolArgumentProto::New(operations_research::sat::BoolArgumentProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(a2);
}

uint64_t operations_research::sat::BoolArgumentProto::GetCachedSize(operations_research::sat::BoolArgumentProto *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t operations_research::sat::IntegerArgumentProto::New(operations_research::sat::IntegerArgumentProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(0);
}

uint64_t operations_research::sat::IntegerArgumentProto::New(operations_research::sat::IntegerArgumentProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(a2);
}

uint64_t operations_research::sat::IntegerArgumentProto::GetCachedSize(operations_research::sat::IntegerArgumentProto *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t operations_research::sat::LinearExpressionProto::New(operations_research::sat::LinearExpressionProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(0);
}

uint64_t operations_research::sat::LinearExpressionProto::New(operations_research::sat::LinearExpressionProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(a2);
}

uint64_t operations_research::sat::LinearExpressionProto::GetCachedSize(operations_research::sat::LinearExpressionProto *this)
{
  return *((unsigned int *)this + 18);
}

unint64_t operations_research::sat::LinearArgumentProto::New(operations_research::sat::LinearArgumentProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(0);
}

unint64_t operations_research::sat::LinearArgumentProto::New(operations_research::sat::LinearArgumentProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(a2);
}

uint64_t operations_research::sat::LinearArgumentProto::GetCachedSize(operations_research::sat::LinearArgumentProto *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t operations_research::sat::AllDifferentConstraintProto::New(operations_research::sat::AllDifferentConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(0);
}

uint64_t operations_research::sat::AllDifferentConstraintProto::New(operations_research::sat::AllDifferentConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(a2);
}

uint64_t operations_research::sat::AllDifferentConstraintProto::GetCachedSize(operations_research::sat::AllDifferentConstraintProto *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t operations_research::sat::LinearConstraintProto::New(operations_research::sat::LinearConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(0);
}

uint64_t operations_research::sat::LinearConstraintProto::New(operations_research::sat::LinearConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(a2);
}

uint64_t operations_research::sat::LinearConstraintProto::GetCachedSize(operations_research::sat::LinearConstraintProto *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t operations_research::sat::ElementConstraintProto::New(operations_research::sat::ElementConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(0);
}

uint64_t operations_research::sat::ElementConstraintProto::New(operations_research::sat::ElementConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(a2);
}

uint64_t operations_research::sat::ElementConstraintProto::GetCachedSize(operations_research::sat::ElementConstraintProto *this)
{
  return *((unsigned int *)this + 11);
}

_QWORD *operations_research::sat::IntervalConstraintProto::New(operations_research::sat::IntervalConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(0);
}

_QWORD *operations_research::sat::IntervalConstraintProto::New(operations_research::sat::IntervalConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(a2);
}

uint64_t operations_research::sat::IntervalConstraintProto::GetCachedSize(operations_research::sat::IntervalConstraintProto *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t operations_research::sat::NoOverlapConstraintProto::New(operations_research::sat::NoOverlapConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(0);
}

uint64_t operations_research::sat::NoOverlapConstraintProto::New(operations_research::sat::NoOverlapConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(a2);
}

uint64_t operations_research::sat::NoOverlapConstraintProto::GetCachedSize(operations_research::sat::NoOverlapConstraintProto *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::New(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(0);
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::New(operations_research::sat::NoOverlap2DConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(a2);
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::GetCachedSize(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t operations_research::sat::CumulativeConstraintProto::New(operations_research::sat::CumulativeConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(0);
}

uint64_t operations_research::sat::CumulativeConstraintProto::New(operations_research::sat::CumulativeConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(a2);
}

uint64_t operations_research::sat::CumulativeConstraintProto::GetCachedSize(operations_research::sat::CumulativeConstraintProto *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t operations_research::sat::ReservoirConstraintProto::New(operations_research::sat::ReservoirConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(0);
}

uint64_t operations_research::sat::ReservoirConstraintProto::New(operations_research::sat::ReservoirConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(a2);
}

uint64_t operations_research::sat::ReservoirConstraintProto::GetCachedSize(operations_research::sat::ReservoirConstraintProto *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t operations_research::sat::CircuitConstraintProto::New(operations_research::sat::CircuitConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(0);
}

uint64_t operations_research::sat::CircuitConstraintProto::New(operations_research::sat::CircuitConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(a2);
}

uint64_t operations_research::sat::CircuitConstraintProto::GetCachedSize(operations_research::sat::CircuitConstraintProto *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t operations_research::sat::RoutesConstraintProto::New(operations_research::sat::RoutesConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(0);
}

uint64_t operations_research::sat::RoutesConstraintProto::New(operations_research::sat::RoutesConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(a2);
}

uint64_t operations_research::sat::RoutesConstraintProto::GetCachedSize(operations_research::sat::RoutesConstraintProto *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::New(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(0);
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::New(operations_research::sat::CircuitCoveringConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(a2);
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::GetCachedSize(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t operations_research::sat::TableConstraintProto::New(operations_research::sat::TableConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(0);
}

uint64_t operations_research::sat::TableConstraintProto::New(operations_research::sat::TableConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(a2);
}

uint64_t operations_research::sat::TableConstraintProto::GetCachedSize(operations_research::sat::TableConstraintProto *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t operations_research::sat::InverseConstraintProto::New(operations_research::sat::InverseConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(0);
}

uint64_t operations_research::sat::InverseConstraintProto::New(operations_research::sat::InverseConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(a2);
}

uint64_t operations_research::sat::InverseConstraintProto::GetCachedSize(operations_research::sat::InverseConstraintProto *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t operations_research::sat::AutomatonConstraintProto::New(operations_research::sat::AutomatonConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(0);
}

uint64_t operations_research::sat::AutomatonConstraintProto::New(operations_research::sat::AutomatonConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(a2);
}

uint64_t operations_research::sat::AutomatonConstraintProto::GetCachedSize(operations_research::sat::AutomatonConstraintProto *this)
{
  return *((unsigned int *)this + 36);
}

unint64_t operations_research::sat::ConstraintProto::New(operations_research::sat::ConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(0);
}

unint64_t operations_research::sat::ConstraintProto::New(operations_research::sat::ConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(a2);
}

uint64_t operations_research::sat::ConstraintProto::GetCachedSize(operations_research::sat::ConstraintProto *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t operations_research::sat::CpObjectiveProto::New(operations_research::sat::CpObjectiveProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(0);
}

uint64_t operations_research::sat::CpObjectiveProto::New(operations_research::sat::CpObjectiveProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(a2);
}

uint64_t operations_research::sat::CpObjectiveProto::GetCachedSize(operations_research::sat::CpObjectiveProto *this)
{
  return *((unsigned int *)this + 26);
}

_QWORD *operations_research::sat::DecisionStrategyProto_AffineTransformation::New(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(0);
}

_QWORD *operations_research::sat::DecisionStrategyProto_AffineTransformation::New(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(a2);
}

uint64_t operations_research::sat::DecisionStrategyProto_AffineTransformation::GetCachedSize(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  return *((unsigned int *)this + 9);
}

unint64_t operations_research::sat::DecisionStrategyProto::New(operations_research::sat::DecisionStrategyProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(0);
}

unint64_t operations_research::sat::DecisionStrategyProto::New(operations_research::sat::DecisionStrategyProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(a2);
}

uint64_t operations_research::sat::DecisionStrategyProto::GetCachedSize(operations_research::sat::DecisionStrategyProto *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t operations_research::sat::PartialVariableAssignment::New(operations_research::sat::PartialVariableAssignment *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(0);
}

uint64_t operations_research::sat::PartialVariableAssignment::New(operations_research::sat::PartialVariableAssignment *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(a2);
}

uint64_t operations_research::sat::PartialVariableAssignment::GetCachedSize(operations_research::sat::PartialVariableAssignment *this)
{
  return *((unsigned int *)this + 15);
}

operations_research::sat::CpModelProto *operations_research::sat::CpModelProto::New(operations_research::sat::CpModelProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpModelProto>(0);
}

operations_research::sat::CpModelProto *operations_research::sat::CpModelProto::New(operations_research::sat::CpModelProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpModelProto>(a2);
}

uint64_t operations_research::sat::CpModelProto::GetCachedSize(operations_research::sat::CpModelProto *this)
{
  return *((unsigned int *)this + 34);
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::New(operations_research::sat::CpSolverResponse *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpSolverResponse>(0);
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::New(operations_research::sat::CpSolverResponse *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpSolverResponse>(a2);
}

uint64_t operations_research::sat::CpSolverResponse::GetCachedSize(operations_research::sat::CpSolverResponse *this)
{
  return *((unsigned int *)this + 60);
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(operations_research::sat::LinearExpressionProto *a1, operations_research::sat::LinearExpressionProto *this)
{
  operations_research::sat::LinearExpressionProto::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if ((v6 & 1) != 0)
          {
            v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
            v8 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL);
            if (v7 && v8 == 0)
            {
              v10 = *(void **)(v7 + 8);
              if (v10 != *(void **)(v7 + 16))
              {
                google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v7 + 8));
                v10 = *(void **)(v7 + 8);
              }
              if (v10)
              {
                *(_QWORD *)(v7 + 16) = v10;
                operator delete(v10);
              }
              MEMORY[0x22E31DF78](v7, 0x20C40DC1BFBCFLL);
            }
          }
          MEMORY[0x22E31DF78](v5, 0x1081C40825B58B5);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
  }
  else
  {
    a1[2] = 0;
  }
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v6 = *(_QWORD *)(a2 + 8);
    if ((v6 & 1) != 0)
      v7 = (google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v7 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a2 + 8));
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v7, v5);
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    *(_QWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
    *(_QWORD *)(a2 + 24) = v9;
  v10 = *(_DWORD *)(a1 + 32);
  if (v10)
    *(_DWORD *)(a2 + 32) = v10;
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(operations_research::sat::IntegerVariableProto *a1, operations_research::sat::IntegerVariableProto *this)
{
  operations_research::sat::IntegerVariableProto::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(operations_research::sat::ConstraintProto *a1, operations_research::sat::ConstraintProto *this)
{
  operations_research::sat::ConstraintProto::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(operations_research::sat::DecisionStrategyProto *a1, operations_research::sat::DecisionStrategyProto *this)
{
  operations_research::sat::DecisionStrategyProto::MergeFrom(this, a1);
}

void OUTLINED_FUNCTION_1_4()
{
  JUMPOUT(0x22E31DF78);
}

void _GLOBAL__sub_I_cp_model_pb_cc()
{
  google::protobuf::internal::AddDescriptors((std::string::size_type)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto);
}

void operations_research::sat::ValidateCpModel(operations_research::sat *this@<X0>, int64_t a2@<X2>, std::string *a3@<X8>)
{
  operations_research::sat *v4;
  std::string *v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  std::string::value_type *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  std::string::value_type *v23;
  _BYTE *v24;
  unint64_t v25;
  void *p_p;
  _BYTE *v27;
  BOOL v28;
  int64_t *v29;
  int64_t v30;
  int64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  int *v53;
  int v54;
  uint64_t v55;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  __n128 v60;
  unsigned int *v61;
  uint64_t v62;
  _BYTE *v63;
  char *v64;
  _BYTE *v65;
  unsigned int *v66;
  void *v67;
  _BYTE *v68;
  char *v69;
  _BYTE *v70;
  _BYTE *v71;
  char *v72;
  _BYTE *v73;
  void *v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  uint64_t v78;
  __int128 *v79;
  const operations_research::sat::LinearExpressionProto *v80;
  uint64_t v81;
  uint64_t v82;
  google::protobuf::Message *v83;
  unsigned int *v84;
  void *v85;
  unint64_t v86;
  void *v87;
  char *v88;
  _DWORD *v89;
  int v90;
  uint64_t v91;
  int v92;
  std::string::value_type *v93;
  uint64_t v94;
  char *v95;
  std::string::value_type *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  std::string::value_type *v106;
  const operations_research::sat::LinearExpressionProto *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  char *v118;
  _BYTE *v119;
  unint64_t v120;
  void *v121;
  _BYTE *v122;
  char *v123;
  _BYTE *v124;
  uint64_t v125;
  unsigned int *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  int *v131;
  uint64_t j;
  uint64_t *v133;
  int *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  _BYTE *v140;
  char *v141;
  _BYTE *v142;
  BOOL v143;
  int v144;
  uint64_t *v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  BOOL v168;
  unint64_t v169;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  BOOL v177;
  unint64_t v178;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  std::string *v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  int v192;
  std::string::value_type *v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  char *v200;
  std::string *v201;
  unint64_t v202;
  void **v203;
  void *v204;
  uint64_t v205;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t *v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int *v215;
  uint64_t v216;
  uint64_t v218;
  google::protobuf::Message **v219;
  uint64_t v220;
  uint64_t v221;
  google::protobuf::Message *v222;
  int v223;
  int v225;
  char *v226;
  uint64_t v227;
  char *v228;
  std::string::value_type *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  std::string::value_type *v239;
  uint64_t v240;
  __int128 *v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v249;
  int *v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  int v255;
  uint64_t v256;
  _QWORD *v257;
  _BYTE *v258;
  BOOL v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  unsigned int *v263;
  uint64_t v264;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  BOOL v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  BOOL v286;
  unint64_t v287;
  uint64_t *v289;
  uint64_t v290;
  unint64_t v291;
  int v292;
  int v293;
  BOOL v294;
  unint64_t v295;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  std::string *v304;
  __int128 v305;
  std::string::value_type *v306;
  uint64_t v307;
  __int128 *v308;
  char *v309;
  _BYTE *v310;
  _BYTE *v311;
  unint64_t v312;
  void *v313;
  _BYTE *v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  __int128 *v318;
  _BYTE *v319;
  unint64_t v320;
  void *v321;
  _BYTE *v322;
  uint64_t *v323;
  uint64_t v324;
  operations_research::sat *v327;
  operations_research::sat *v328;
  void *v329;
  unint64_t v330;
  unsigned __int8 v331;
  void *__p;
  unsigned int *v333;
  unsigned __int8 v334;
  std::string::value_type *__s[2];
  __int128 v336;
  const char *v337;
  uint64_t v338;
  __int128 v339;
  const char *v340;
  uint64_t v341;
  void *v342;
  unsigned int *v343;
  void *v344[2];
  _BYTE v345[7];
  unsigned __int8 v346;
  __int128 v347;
  uint64_t v348;
  __int128 v349;
  char v350[8];
  int *v351;
  int *v352;
  uint64_t v353;

  v4 = this;
  v5 = a3;
  v353 = *MEMORY[0x24BDAC8D0];
  if (*((int *)this + 6) >= 1)
  {
    for (i = 0; i < *((int *)v4 + 6); ++i)
    {
      v8 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * i + 8);
      v9 = *(_DWORD *)(v8 + 16);
      if (v9)
      {
        if ((v9 & 1) != 0)
        {
          __s[0] = "var #";
          __s[1] = (std::string::value_type *)5;
          v27 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(i, v350, (char *)a2);
          *(_QWORD *)&v349 = v350;
          *((_QWORD *)&v349 + 1) = v27 - v350;
          *(_QWORD *)&v347 = " has an odd domain() size: ";
          *((_QWORD *)&v347 + 1) = 27;
          google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v8, (uint64_t)&__p);
          v25 = v334;
          if ((v334 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v334 & 0x80u) != 0)
            v25 = (unint64_t)v333;
        }
        else
        {
          __s[0] = 0;
          __s[1] = 0;
          *(_QWORD *)&v336 = 0;
          if (v9 >= 1)
          {
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            while (1)
            {
              while (1)
              {
                v14 = *(_QWORD *)(v8 + 24);
                v15 = *(_QWORD *)(v14 + 8 * v11);
                v16 = *(_QWORD *)(v14 + ((8 * v11) | 8));
                if (v15 > v16)
                {
                  v28 = 0;
                  v5 = a3;
                  if (v13)
                    goto LABEL_48;
                  goto LABEL_49;
                }
                if (v10 >= v12)
                  break;
                *(_QWORD *)v10 = v15;
                *((_QWORD *)v10 + 1) = v16;
                v10 += 16;
                v11 += 2;
                if (*(_DWORD *)(v8 + 16) <= (int)v11)
                  goto LABEL_46;
              }
              v17 = (v10 - v13) >> 4;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 60)
              {
                __s[1] = v10;
                *(_QWORD *)&v336 = v12;
                __s[0] = v13;
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              if ((v12 - v13) >> 3 > v18)
                v18 = (v12 - v13) >> 3;
              if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFF0)
                v19 = 0xFFFFFFFFFFFFFFFLL;
              else
                v19 = v18;
              if (v19)
              {
                if (v19 >> 60)
                {
                  *(_QWORD *)&v336 = v12;
                  __s[0] = v13;
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v20 = (char *)operator new(16 * v19);
                v21 = &v20[16 * v17];
                *(_QWORD *)v21 = v15;
                *((_QWORD *)v21 + 1) = v16;
                if (v10 == v13)
                {
LABEL_29:
                  v23 = v21;
                  v12 = &v20[16 * v19];
                  v10 = v21 + 16;
                  if (!v13)
                    goto LABEL_26;
                  goto LABEL_25;
                }
              }
              else
              {
                v20 = 0;
                v21 = (char *)(16 * v17);
                *(_QWORD *)v21 = v15;
                *((_QWORD *)v21 + 1) = v16;
                if (v10 == v13)
                  goto LABEL_29;
              }
              v22 = v21;
              do
              {
                v23 = v22 - 16;
                *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
                v10 -= 16;
                v22 -= 16;
              }
              while (v10 != v13);
              v12 = &v20[16 * v19];
              v10 = v21 + 16;
              if (!v13)
                goto LABEL_26;
LABEL_25:
              operator delete(v13);
LABEL_26:
              v13 = v23;
              v11 += 2;
              if (*(_DWORD *)(v8 + 16) <= (int)v11)
              {
LABEL_46:
                __s[1] = v10;
                *(_QWORD *)&v336 = v12;
                v5 = a3;
                goto LABEL_47;
              }
            }
          }
          v10 = 0;
          v13 = 0;
LABEL_47:
          __s[0] = v13;
          v28 = operations_research::IntervalsAreSortedAndNonAdjacent((uint64_t *)v13, (v10 - v13) >> 4);
          if (v13)
LABEL_48:
            operator delete(v13);
LABEL_49:
          if (v28)
          {
            v29 = *(int64_t **)(v8 + 24);
            v30 = *v29;
            v31 = v29[*(int *)(v8 + 16) - 1];
            if (v30 < (uint64_t)0x8000000000000002 || v31 == 0x7FFFFFFFFFFFFFFFLL)
            {
              __s[0] = "var #";
              __s[1] = (std::string::value_type *)5;
              v33 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(i, v350, (char *)a2);
              v4 = this;
              *(_QWORD *)&v349 = v350;
              *((_QWORD *)&v349 + 1) = v33 - v350;
              *(_QWORD *)&v347 = " domain do not fall in [kint64min + 2, kint64max - 1]. ";
              *((_QWORD *)&v347 + 1) = 55;
              google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v8, (uint64_t)&__p);
              v25 = v334;
              if ((v334 & 0x80u) == 0)
                p_p = &__p;
              else
                p_p = __p;
              if ((v334 & 0x80u) != 0)
                v25 = (unint64_t)v333;
            }
            else
            {
              v4 = this;
              if ((v30 & 0x8000000000000000) == 0 || v30 + 0x7FFFFFFFFFFFFFFFLL >= v31)
              {
                *((_BYTE *)&v5->__r_.__value_.__s + 23) = 0;
                v5->__r_.__value_.__s.__data_[0] = 0;
                continue;
              }
              __s[0] = "var #";
              __s[1] = (std::string::value_type *)5;
              v35 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(i, v350, (char *)a2);
              *(_QWORD *)&v349 = v350;
              *((_QWORD *)&v349 + 1) = v35 - v350;
              *(_QWORD *)&v347 = " has a domain that is too large, i.e. |UB - LB| overflow an int64: ";
              *((_QWORD *)&v347 + 1) = 67;
              google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v8, (uint64_t)&__p);
              v25 = v334;
              if ((v334 & 0x80u) == 0)
                p_p = &__p;
              else
                p_p = __p;
              if ((v334 & 0x80u) != 0)
                v25 = (unint64_t)v333;
            }
          }
          else
          {
            __s[0] = "var #";
            __s[1] = (std::string::value_type *)5;
            v34 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(i, v350, (char *)a2);
            v4 = this;
            *(_QWORD *)&v349 = v350;
            *((_QWORD *)&v349 + 1) = v34 - v350;
            *(_QWORD *)&v347 = " has and invalid domain() format: ";
            *((_QWORD *)&v347 + 1) = 34;
            google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v8, (uint64_t)&__p);
            v25 = v334;
            if ((v334 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = __p;
            if ((v334 & 0x80u) != 0)
              v25 = (unint64_t)v333;
          }
        }
      }
      else
      {
        __s[0] = "var #";
        __s[1] = (std::string::value_type *)5;
        v24 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(i, v350, (char *)a2);
        *(_QWORD *)&v349 = v350;
        *((_QWORD *)&v349 + 1) = v24 - v350;
        *(_QWORD *)&v347 = " has no domain(): ";
        *((_QWORD *)&v347 + 1) = 18;
        google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v8, (uint64_t)&__p);
        v25 = v334;
        if ((v334 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v334 & 0x80u) != 0)
          v25 = (unint64_t)v333;
      }
      v344[0] = p_p;
      v344[1] = (void *)v25;
      absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, (uint64_t)&v347, (uint64_t)v344, v5);
      if ((char)v334 < 0)
      {
        operator delete(__p);
        v7 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
        if (v7 < 0)
          goto LABEL_68;
      }
      else
      {
        v7 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
        if (v7 < 0)
        {
LABEL_68:
          if (v5->__r_.__value_.__l.__size_)
            return;
          operator delete(v5->__r_.__value_.__l.__data_);
          continue;
        }
      }
      if (v7)
        return;
    }
  }
  if (*((int *)v4 + 12) < 1)
  {
LABEL_433:
    v205 = *((_QWORD *)v4 + 15);
    if (v4 == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_ || v205 == 0)
      goto LABEL_438;
    v225 = *(_DWORD *)(v205 + 64);
    if ((v225 & 1) != 0)
      goto LABEL_624;
    __s[0] = 0;
    __s[1] = 0;
    *(_QWORD *)&v336 = 0;
    if (v225 >= 1)
    {
      v328 = v4;
      v226 = 0;
      v227 = 0;
      v228 = 0;
      v229 = 0;
      while (1)
      {
        while (1)
        {
          v230 = *(_QWORD *)(v205 + 72);
          v231 = *(_QWORD *)(v230 + 8 * v227);
          v232 = *(_QWORD *)(v230 + ((8 * v227) | 8));
          if (v231 > v232)
          {
            v259 = 0;
            v5 = a3;
            v4 = v328;
            goto LABEL_540;
          }
          if (v226 >= v228)
            break;
          *(_QWORD *)v226 = v231;
          *((_QWORD *)v226 + 1) = v232;
          v226 += 16;
          v227 += 2;
          if (*(_DWORD *)(v205 + 64) <= (int)v227)
            goto LABEL_538;
        }
        v233 = (v226 - v229) >> 4;
        v234 = v233 + 1;
        if ((unint64_t)(v233 + 1) >> 60)
        {
          __s[1] = v226;
          *(_QWORD *)&v336 = v228;
          __s[0] = v229;
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v228 - v229) >> 3 > v234)
          v234 = (v228 - v229) >> 3;
        if ((unint64_t)(v228 - v229) >= 0x7FFFFFFFFFFFFFF0)
          v235 = 0xFFFFFFFFFFFFFFFLL;
        else
          v235 = v234;
        if (v235)
        {
          if (v235 >> 60)
          {
            *(_QWORD *)&v336 = v228;
            __s[0] = v229;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v236 = (char *)operator new(16 * v235);
          v237 = &v236[16 * v233];
          *(_QWORD *)v237 = v231;
          *((_QWORD *)v237 + 1) = v232;
          if (v226 == v229)
          {
LABEL_485:
            v239 = v237;
            v228 = &v236[16 * v235];
            v226 = v237 + 16;
            if (!v229)
              goto LABEL_482;
            goto LABEL_481;
          }
        }
        else
        {
          v236 = 0;
          v237 = (char *)(16 * v233);
          *(_QWORD *)v237 = v231;
          *((_QWORD *)v237 + 1) = v232;
          if (v226 == v229)
            goto LABEL_485;
        }
        v238 = v237;
        do
        {
          v239 = v238 - 16;
          *((_OWORD *)v238 - 1) = *((_OWORD *)v226 - 1);
          v226 -= 16;
          v238 -= 16;
        }
        while (v226 != v229);
        v228 = &v236[16 * v235];
        v226 = v237 + 16;
        if (!v229)
          goto LABEL_482;
LABEL_481:
        operator delete(v229);
LABEL_482:
        v229 = v239;
        v227 += 2;
        if (*(_DWORD *)(v205 + 64) <= (int)v227)
        {
LABEL_538:
          __s[1] = v226;
          *(_QWORD *)&v336 = v228;
          v5 = a3;
          v4 = v328;
          goto LABEL_539;
        }
      }
    }
    v226 = 0;
    v229 = 0;
LABEL_539:
    __s[0] = v229;
    v259 = operations_research::IntervalsAreSortedAndNonAdjacent((uint64_t *)v229, (v226 - v229) >> 4);
LABEL_540:
    if (v229)
      operator delete(v229);
    if (!v259)
    {
LABEL_624:
      __s[0] = "The objective has and invalid domain() format: ";
      __s[1] = (std::string::value_type *)47;
      google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v205, (uint64_t)&v347);
      v307 = HIBYTE(v348);
      if (v348 >= 0)
        v308 = &v347;
      else
        v308 = (__int128 *)v347;
      if (v348 < 0)
        v307 = *((_QWORD *)&v347 + 1);
    }
    else
    {
      v260 = *(int *)(v205 + 16);
      if ((_DWORD)v260 == *(_DWORD *)(v205 + 40))
      {
        if (!(_DWORD)v260)
        {
LABEL_646:
          *((_BYTE *)&v5->__r_.__value_.__s + 23) = 0;
          v5->__r_.__value_.__s.__data_[0] = 0;
LABEL_632:
          if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
          {
            if (v5->__r_.__value_.__l.__size_)
              return;
            operator delete(v5->__r_.__value_.__l.__data_);
          }
          else if (*((_BYTE *)&v5->__r_.__value_.__s + 23))
          {
            return;
          }
LABEL_438:
          v207 = *((_QWORD *)v4 + 10);
          if (v207)
            v208 = (uint64_t *)(v207 + 8);
          else
            v208 = 0;
          v209 = *((int *)v4 + 18);
          if ((_DWORD)v209)
          {
            v210 = &v208[v209];
            v211 = *((_DWORD *)v4 + 6);
            v212 = -v211;
            while (1)
            {
              v213 = *v208;
              v214 = *(int *)(*v208 + 16);
              if ((_DWORD)v214)
                break;
LABEL_450:
              v218 = *(_QWORD *)(v213 + 56);
              if (v218)
                v219 = (google::protobuf::Message **)(v218 + 8);
              else
                v219 = 0;
              v220 = *(int *)(v213 + 48);
              if ((_DWORD)v220)
              {
                v221 = 8 * v220;
                while (1)
                {
                  v222 = *v219;
                  if (*((uint64_t *)*v219 + 3) <= 0)
                    break;
                  v223 = *((_DWORD *)v222 + 8);
                  if (v211 <= v223 || v223 < v212)
                  {
                    __s[0] = "Invalid variable reference in affine transformation: ";
                    __s[1] = (std::string::value_type *)53;
                    google::protobuf::Message::ShortDebugString(v222, (uint64_t)&v347);
                    v240 = HIBYTE(v348);
                    if (v348 >= 0)
                      v241 = &v347;
                    else
                      v241 = (__int128 *)v347;
                    if (v348 < 0)
                      v240 = *((_QWORD *)&v347 + 1);
                    goto LABEL_504;
                  }
                  ++v219;
                  v221 -= 8;
                  if (!v221)
                    goto LABEL_461;
                }
                __s[0] = "Affine transformation coeff should be positive: ";
                __s[1] = (std::string::value_type *)48;
                google::protobuf::Message::ShortDebugString(v222, (uint64_t)&v347);
                v240 = HIBYTE(v348);
                if (v348 >= 0)
                  v241 = &v347;
                else
                  v241 = (__int128 *)v347;
                if (v348 < 0)
                  v240 = *((_QWORD *)&v347 + 1);
                goto LABEL_504;
              }
LABEL_461:
              if (++v208 == v210)
                goto LABEL_462;
            }
            v215 = *(int **)(v213 + 24);
            v216 = 4 * v214;
            while (v211 > *v215 && *v215 >= v212)
            {
              ++v215;
              v216 -= 4;
              if (!v216)
                goto LABEL_450;
            }
            __s[0] = "Invalid variable reference in strategy: ";
            __s[1] = (std::string::value_type *)40;
            google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v213, (uint64_t)&v347);
            v240 = HIBYTE(v348);
            if (v348 >= 0)
              v241 = &v347;
            else
              v241 = (__int128 *)v347;
            if (v348 < 0)
              v240 = *((_QWORD *)&v347 + 1);
LABEL_504:
            *(_QWORD *)&v349 = v241;
            *((_QWORD *)&v349 + 1) = v240;
            absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, v5);
            if (SHIBYTE(v348) < 0)
              operator delete((void *)v347);
          }
          else
          {
LABEL_462:
            *((_BYTE *)&v5->__r_.__value_.__s + 23) = 0;
            v5->__r_.__value_.__s.__data_[0] = 0;
          }
          if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
          {
            if (v5->__r_.__value_.__l.__size_)
              return;
            operator delete(v5->__r_.__value_.__l.__data_);
            if (v4 == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_)
              goto LABEL_521;
          }
          else
          {
            if (*((_BYTE *)&v5->__r_.__value_.__s + 23))
              return;
            if (v4 == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_)
              goto LABEL_521;
          }
          v242 = *((_QWORD *)v4 + 16);
          if (v242)
          {
            v243 = *(int *)(v242 + 16);
            if ((_DWORD)v243 != *(_DWORD *)(v242 + 40))
            {
              v309 = (char *)operator new(0x48uLL);
              v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v309;
              *(_OWORD *)&v5->__r_.__value_.__r.__words[1] = xmmword_22DCEAFC0;
              strcpy(v309, "Invalid solution hint: vars and values do not have the same size.");
LABEL_638:
              if (v5->__r_.__value_.__l.__size_)
                return;
              operator delete(v5->__r_.__value_.__l.__data_);
              goto LABEL_522;
            }
            if ((_DWORD)v243)
            {
              v244 = *(unsigned int **)(v242 + 24);
              v245 = *((_DWORD *)v4 + 6);
              v246 = 4 * v243;
              while (1)
              {
                v247 = *v244;
                if (v245 <= (int)v247 || (int)v247 < -v245)
                  break;
                ++v244;
                v246 -= 4;
                if (!v246)
                  goto LABEL_521;
              }
              __s[0] = "Invalid variable reference in solution hint: ";
              __s[1] = (std::string::value_type *)45;
              v310 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v247, v350, (char *)a2);
              *(_QWORD *)&v349 = v350;
              *((_QWORD *)&v349 + 1) = v310 - v350;
              absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, v5);
              if ((SHIBYTE(v5->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((_BYTE *)&v5->__r_.__value_.__s + 23))
                  return;
                goto LABEL_522;
              }
              goto LABEL_638;
            }
          }
LABEL_521:
          *((_BYTE *)&v5->__r_.__value_.__s + 23) = 0;
          v5->__r_.__value_.__s.__data_[0] = 0;
LABEL_522:
          v249 = *((int *)v4 + 22);
          if ((_DWORD)v249)
          {
            v250 = (int *)*((_QWORD *)v4 + 12);
            v251 = *((_DWORD *)v4 + 6);
            v252 = 4 * v249;
            while (1)
            {
              v253 = *v250;
              if (v251 <= (int)v253 || (int)v253 < -v251)
                break;
              v255 = ~(_DWORD)v253 <= (int)v253 ? *v250 : ~(_DWORD)v253;
              v256 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * v255 + 8);
              v257 = *(_QWORD **)(v256 + 24);
              if ((*v257 & 0x8000000000000000) != 0 || (uint64_t)v257[*(int *)(v256 + 16) - 1] >= 2)
                break;
              ++v250;
              v252 -= 4;
              if (!v252)
                goto LABEL_534;
            }
            __s[0] = "Invalid literal reference ";
            __s[1] = (std::string::value_type *)26;
            v258 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v253, v350, (char *)a2);
            *(_QWORD *)&v349 = v350;
            *((_QWORD *)&v349 + 1) = v258 - v350;
            *(_QWORD *)&v347 = " in the 'assumptions' field.";
            *((_QWORD *)&v347 + 1) = 28;
            absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, (uint64_t)&v347, v5);
          }
          else
          {
LABEL_534:
            *((_BYTE *)&v5->__r_.__value_.__s + 23) = 0;
            v5->__r_.__value_.__s.__data_[0] = 0;
          }
          return;
        }
        v261 = *((_DWORD *)v4 + 6);
        v262 = 4 * v260;
        v263 = *(unsigned int **)(v205 + 24);
        do
        {
          v264 = *v263;
          if (v261 <= (int)v264 || (int)v264 < -v261)
          {
            __s[0] = "Out of bound integer variable ";
            __s[1] = (std::string::value_type *)30;
            v311 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v264, v350, (char *)a2);
            *(_QWORD *)&v349 = v350;
            *((_QWORD *)&v349 + 1) = v311 - v350;
            *(_QWORD *)&v347 = " in objective: ";
            *((_QWORD *)&v347 + 1) = 15;
            google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v205, (uint64_t)&__p);
            v312 = v334;
            if ((v334 & 0x80u) == 0)
              v313 = &__p;
            else
              v313 = __p;
            if ((v334 & 0x80u) != 0)
              v312 = (unint64_t)v333;
            v344[0] = v313;
            v344[1] = (void *)v312;
            absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, (uint64_t)&v347, (uint64_t)v344, v5);
            if ((char)v334 < 0)
            {
              v306 = (std::string::value_type *)__p;
              goto LABEL_631;
            }
            goto LABEL_632;
          }
          ++v263;
          v262 -= 4;
        }
        while (v262);
        if ((int)v260 < 1)
          goto LABEL_646;
        v266 = 0;
        v267 = 0;
        v268 = 0;
        v270 = *(unsigned int *)(v205 + 16);
        v271 = 1;
        do
        {
          v272 = *(_DWORD *)(*(_QWORD *)(v205 + 24) + 4 * v266);
          if (~v272 <= v272)
            v273 = *(_DWORD *)(*(_QWORD *)(v205 + 24) + 4 * v266);
          else
            v273 = ~v272;
          v274 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * v273 + 8);
          v275 = *(uint64_t **)(v274 + 24);
          v276 = *v275;
          if (*v275 >= 0)
            v277 = *v275;
          else
            v277 = -v276;
          v278 = 63 - __clz(v277);
          v269 = *(_QWORD *)(v205 + 48);
          v279 = *(_QWORD *)(v269 + 8 * v266);
          if (v276)
            v280 = v278;
          else
            v280 = 0;
          if (v272 >= 0)
            v281 = *(_QWORD *)(v269 + 8 * v266);
          else
            v281 = -v279;
          if (v279 >= 0)
            v282 = *(_QWORD *)(v269 + 8 * v266);
          else
            v282 = -v279;
          v283 = 63 - __clz(v282);
          if (!v281)
            v283 = 0;
          v284 = v283 + v280;
          if (v284 > 61)
          {
            if (v276)
              v286 = v281 == 0;
            else
              v286 = 1;
            if (v286)
            {
              v285 = 0;
            }
            else
            {
              v285 = ((v281 ^ (unint64_t)v276) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              v287 = v282 * v277;
              if (v284 <= 0x3E && v287 < v285)
              {
                if (v285 >= 0)
                  v285 = v287;
                else
                  v285 = -(uint64_t)v287;
              }
            }
          }
          else
          {
            v285 = v281 * v276;
          }
          v289 = &v275[*(int *)(v274 + 16)];
          v290 = *(v289 - 1);
          if (v290 >= 0)
            v291 = *(v289 - 1);
          else
            v291 = -v290;
          v292 = 63 - __clz(v291);
          if (!v290)
            v292 = 0;
          v293 = v283 + v292;
          if (v293 > 61)
          {
            if (v290)
              v294 = v281 == 0;
            else
              v294 = 1;
            if (v294)
            {
              a2 = 0;
            }
            else
            {
              a2 = ((v281 ^ (unint64_t)v290) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              v295 = v282 * v291;
              if (v293 <= 0x3E && v295 < a2)
              {
                if (a2 >= 0)
                  a2 = v295;
                else
                  a2 = -(uint64_t)v295;
              }
            }
          }
          else
          {
            a2 = v281 * v290;
          }
          if (a2 >= v285)
            v297 = v285;
          else
            v297 = a2;
          v298 = v297 & (v297 >> 63);
          v299 = v298 + v267;
          v300 = (v298 + v267) ^ v267;
          v301 = (v298 + v267) ^ v298;
          v267 = (v267 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if (((v300 & v301 & 0x8000000000000000) != 0) == __OFSUB__(a2, v285))
            v267 = v299;
          if (v285 <= a2)
            v302 = a2;
          else
            v302 = v285;
          v303 = (v302 & ~(v302 >> 63)) + v268;
          if (((v303 & ~v268 & 0x8000000000000000) != 0) != __OFSUB__(v285, a2))
            v268 = (v268 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          else
            v268 = v303;
          if ((unint64_t)(v285 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
            break;
          if ((unint64_t)(a2 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
            break;
          if (v267 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL)
            break;
          if (v268 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL)
            break;
          v271 = ++v266 < v270;
        }
        while (v270 != v266);
        if (!v271)
          goto LABEL_646;
        google::protobuf::Message::DebugString((google::protobuf::Message *)v205, __s);
        v304 = std::string::insert((std::string *)__s, 0, "Possible integer overflow in objective: ");
        v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
        v5->__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v305;
        v304->__r_.__value_.__l.__size_ = 0;
        v304->__r_.__value_.__r.__words[2] = 0;
        v304->__r_.__value_.__r.__words[0] = 0;
        if ((SBYTE7(v336) & 0x80000000) == 0)
          goto LABEL_632;
        v306 = __s[0];
LABEL_631:
        operator delete(v306);
        goto LABEL_632;
      }
      __s[0] = "vars and coeffs size do not match in objective: ";
      __s[1] = (std::string::value_type *)48;
      google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v205, (uint64_t)&v347);
      v307 = HIBYTE(v348);
      if (v348 >= 0)
        v308 = &v347;
      else
        v308 = (__int128 *)v347;
      if (v348 < 0)
        v307 = *((_QWORD *)&v347 + 1);
    }
    *(_QWORD *)&v349 = v308;
    *((_QWORD *)&v349 + 1) = v307;
    absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, v5);
    if ((SHIBYTE(v348) & 0x80000000) == 0)
      goto LABEL_632;
    v306 = (std::string::value_type *)v347;
    goto LABEL_631;
  }
  v36 = 0;
  v37 = &v348;
  while (2)
  {
    v38 = *(_QWORD *)(*((_QWORD *)v4 + 7) + 8 * v36 + 8);
    operations_research::sat::GetReferencesUsedByConstraint((operations_research::sat *)v38, (uint64_t)&v349);
    v40 = (unsigned int *)v349;
    if ((_QWORD)v349 != *((_QWORD *)&v349 + 1))
    {
      v41 = *((_DWORD *)v4 + 6);
      while (1)
      {
        v42 = *v40;
        if (v41 <= (int)v42 || (int)v42 < -v41)
          break;
        if (++v40 == *((unsigned int **)&v349 + 1))
          goto LABEL_90;
      }
      v63 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v42, v37, v39);
      *(_QWORD *)&v347 = v37;
      *((_QWORD *)&v347 + 1) = v63 - (_BYTE *)v37;
      v65 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v36, v345, v64);
      v344[0] = v345;
      v344[1] = (void *)(v65 - v345);
      google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v38, (uint64_t)&__p);
      __s[0] = "Out of bound integer variable ";
      __s[1] = (std::string::value_type *)30;
      v336 = v347;
      v337 = " in constraint #";
      v338 = 16;
      v339 = *(_OWORD *)v344;
      v340 = " : ";
      v341 = 3;
      v66 = (unsigned int *)v334;
      v67 = &__p;
      if ((v334 & 0x80u) != 0)
      {
        v67 = __p;
        v66 = v333;
      }
      goto LABEL_131;
    }
LABEL_90:
    v44 = *(int *)(v38 + 16);
    if ((_DWORD)v44)
    {
      v45 = *(int **)(v38 + 24);
      v46 = *((_DWORD *)v4 + 6);
      v47 = 4 * v44;
      while (1)
      {
        v48 = *v45;
        if (v46 <= (int)v48 || (int)v48 < -v46)
          break;
        v50 = ~(_DWORD)v48 <= (int)v48 ? *v45 : ~(_DWORD)v48;
        v51 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * v50 + 8);
        v52 = *(_QWORD **)(v51 + 24);
        if ((*v52 & 0x8000000000000000) != 0 || (uint64_t)v52[*(int *)(v51 + 16) - 1] >= 2)
          break;
        ++v45;
        v47 -= 4;
        if (!v47)
          goto LABEL_102;
      }
      v68 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v48, v37, v39);
      *(_QWORD *)&v347 = v37;
      *((_QWORD *)&v347 + 1) = v68 - (_BYTE *)v37;
      v70 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v36, v345, v69);
      v344[0] = v345;
      v344[1] = (void *)(v70 - v345);
      google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v38, (uint64_t)&__p);
      __s[0] = "Invalid enforcement literal ";
      __s[1] = (std::string::value_type *)28;
      v336 = v347;
      v337 = " in constraint #";
      v338 = 16;
      v339 = *(_OWORD *)v344;
      v340 = " : ";
      v341 = 3;
      v66 = (unsigned int *)v334;
      v67 = &__p;
      if ((v334 & 0x80u) != 0)
      {
        v67 = __p;
        v66 = v333;
      }
      goto LABEL_131;
    }
LABEL_102:
    v53 = v351;
    if (v351 != v352)
    {
      v54 = *((_DWORD *)v4 + 6);
      while (1)
      {
        v55 = *v53;
        if (v54 <= (int)v55 || (int)v55 < -v54)
          break;
        v57 = ~(_DWORD)v55 <= (int)v55 ? *v53 : ~(_DWORD)v55;
        v58 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * v57 + 8);
        v59 = *(_QWORD **)(v58 + 24);
        if ((*v59 & 0x8000000000000000) != 0 || (uint64_t)v59[*(int *)(v58 + 16) - 1] >= 2)
          break;
        if (++v53 == v352)
          goto LABEL_114;
      }
      v71 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v55, v37, v39);
      *(_QWORD *)&v347 = v37;
      *((_QWORD *)&v347 + 1) = v71 - (_BYTE *)v37;
      v73 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v36, v345, v72);
      v344[0] = v345;
      v344[1] = (void *)(v73 - v345);
      google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v38, (uint64_t)&__p);
      __s[0] = "Invalid literal ";
      __s[1] = (std::string::value_type *)16;
      v336 = v347;
      v337 = " in constraint #";
      v338 = 16;
      v339 = *(_OWORD *)v344;
      v340 = " : ";
      v341 = 3;
      v66 = (unsigned int *)v334;
      v67 = &__p;
      if ((v334 & 0x80u) != 0)
      {
        v67 = __p;
        v66 = v333;
      }
LABEL_131:
      v342 = v67;
      v343 = v66;
      absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)__s, 6, (char *)v5);
      if (((char)v334 & 0x80000000) == 0)
        goto LABEL_134;
      v74 = __p;
      goto LABEL_133;
    }
LABEL_114:
    operations_research::sat::UsedIntervals((operations_research::sat *)v38, (unint64_t *)&__p);
    if (__p != v333)
    {
      v61 = (unsigned int *)__p;
      while (1)
      {
        v62 = *v61;
        if ((v62 & 0x80000000) != 0 || (int)v62 >= *((_DWORD *)v4 + 12))
          break;
        if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 7) + 8 * v62 + 8) + 60) != 19)
        {
          v122 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*v61, v37, (char *)a2);
          *(_QWORD *)&v347 = v37;
          *((_QWORD *)&v347 + 1) = v122 - (_BYTE *)v37;
          v124 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v36, v345, v123);
          v344[0] = v345;
          v344[1] = (void *)(v124 - v345);
          google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v38, (uint64_t)&v329);
          __s[0] = "Interval ";
          __s[1] = (std::string::value_type *)9;
          v336 = v347;
          v337 = " does not refer to an interval constraint. Problematic constraint #";
          v338 = 67;
          v339 = *(_OWORD *)v344;
          v340 = " : ";
          v341 = 3;
          v120 = v331;
          v121 = &v329;
          if ((v331 & 0x80u) != 0)
          {
            v121 = v329;
            v120 = v330;
          }
          goto LABEL_227;
        }
        if (++v61 == v333)
          goto LABEL_120;
      }
      v117 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*v61, v37, (char *)a2);
      *(_QWORD *)&v347 = v37;
      *((_QWORD *)&v347 + 1) = v117 - (_BYTE *)v37;
      v119 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v36, v345, v118);
      v344[0] = v345;
      v344[1] = (void *)(v119 - v345);
      google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v38, (uint64_t)&v329);
      __s[0] = "Out of bound interval ";
      __s[1] = (std::string::value_type *)22;
      v336 = v347;
      v337 = " in constraint #";
      v338 = 16;
      v339 = *(_OWORD *)v344;
      v340 = " : ";
      v341 = 3;
      v120 = v331;
      v121 = &v329;
      if ((v331 & 0x80u) != 0)
      {
        v121 = v329;
        v120 = v330;
      }
LABEL_227:
      v342 = v121;
      v343 = (unsigned int *)v120;
      absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)__s, 6, (char *)v5);
      if ((char)v331 < 0)
        operator delete(v329);
      v74 = __p;
      if (!__p)
        goto LABEL_134;
      v333 = (unsigned int *)__p;
LABEL_133:
      operator delete(v74);
      goto LABEL_134;
    }
LABEL_120:
    if (__p)
    {
      v333 = (unsigned int *)__p;
      operator delete(__p);
    }
    *((_BYTE *)&v5->__r_.__value_.__s + 23) = 0;
    v5->__r_.__value_.__s.__data_[0] = 0;
LABEL_134:
    if (v351)
    {
      v352 = v351;
      operator delete(v351);
    }
    if ((_QWORD)v349)
    {
      *((_QWORD *)&v349 + 1) = v349;
      operator delete((void *)v349);
    }
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v5->__r_.__value_.__l.__size_)
        return;
      operator delete(v5->__r_.__value_.__l.__data_);
    }
    else if (*((_BYTE *)&v5->__r_.__value_.__s + 23))
    {
      return;
    }
    v75 = *(_QWORD *)(*((_QWORD *)v4 + 7) + 8 * v36 + 8);
    switch(*(_DWORD *)(v75 + 60))
    {
      case 3:
      case 4:
        goto LABEL_82;
      case 7:
        if (*(_DWORD *)(*(_QWORD *)(v75 + 48) + 16) == 2)
          goto LABEL_264;
        __s[0] = "An int_div constraint should have exactly 2 terms: ";
        __s[1] = (std::string::value_type *)51;
        google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&v347);
        v317 = HIBYTE(v348);
        if (v348 >= 0)
          v318 = &v347;
        else
          v318 = (__int128 *)v347;
        if (v348 < 0)
          v317 = *((_QWORD *)&v347 + 1);
        goto LABEL_680;
      case 8:
        v115 = *(_QWORD *)(v75 + 48);
        if (*(_DWORD *)(v115 + 16) == 2)
        {
          if (**(uint64_t **)(*(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * *(int *)(*(_QWORD *)(v115 + 24) + 4) + 8) + 24) > 0)
            goto LABEL_220;
          __s[0] = "An int_mod must have a strictly positive modulo argument: ";
          __s[1] = (std::string::value_type *)58;
          google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&v347);
          v78 = HIBYTE(v348);
          if (v348 >= 0)
            v79 = &v347;
          else
            v79 = (__int128 *)v347;
          if (v348 < 0)
            v78 = *((_QWORD *)&v347 + 1);
        }
        else
        {
          __s[0] = "An int_mod constraint should have exactly 2 terms: ";
          __s[1] = (std::string::value_type *)51;
          google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&v347);
          v78 = HIBYTE(v348);
          if (v348 >= 0)
            v79 = &v347;
          else
            v79 = (__int128 *)v347;
          if (v348 < 0)
            v78 = *((_QWORD *)&v347 + 1);
        }
        goto LABEL_401;
      case 0xC:
        v91 = *(_QWORD *)(v75 + 48);
        v92 = *(_DWORD *)(v91 + 64);
        if ((v92 & 1) != 0)
          goto LABEL_657;
        __s[0] = 0;
        __s[1] = 0;
        *(_QWORD *)&v336 = 0;
        if (v92 < 1)
        {
          v93 = 0;
          v96 = 0;
          goto LABEL_288;
        }
        v323 = v37;
        v324 = v36;
        v327 = v4;
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v96 = 0;
        do
        {
          while (1)
          {
            v97 = *(_QWORD *)(v91 + 72);
            v98 = *(_QWORD *)(v97 + 8 * v94);
            v99 = *(_QWORD *)(v97 + ((8 * v94) | 8));
            if (v98 > v99)
            {
              v143 = 0;
              __s[1] = v93;
              v4 = v327;
              v37 = v323;
              v36 = v324;
              goto LABEL_289;
            }
            if (v93 >= v95)
              break;
            *(_QWORD *)v93 = v98;
            *((_QWORD *)v93 + 1) = v99;
            v93 += 16;
            v94 += 2;
            if (*(_DWORD *)(v91 + 64) <= (int)v94)
              goto LABEL_287;
          }
          v100 = (v93 - v96) >> 4;
          v101 = v100 + 1;
          if ((unint64_t)(v100 + 1) >> 60)
          {
            __s[1] = v93;
            *(_QWORD *)&v336 = v95;
            __s[0] = v96;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v95 - v96) >> 3 > v101)
            v101 = (v95 - v96) >> 3;
          if ((unint64_t)(v95 - v96) >= 0x7FFFFFFFFFFFFFF0)
            v102 = 0xFFFFFFFFFFFFFFFLL;
          else
            v102 = v101;
          if (v102)
          {
            if (v102 >> 60)
            {
              *(_QWORD *)&v336 = v95;
              __s[0] = v96;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v103 = (char *)operator new(16 * v102);
            v104 = &v103[16 * v100];
            *(_QWORD *)v104 = v98;
            *((_QWORD *)v104 + 1) = v99;
            if (v93 == v96)
            {
LABEL_203:
              v106 = v104;
              v95 = &v103[16 * v102];
              v93 = v104 + 16;
              if (v96)
                goto LABEL_199;
              goto LABEL_200;
            }
          }
          else
          {
            v103 = 0;
            v104 = (char *)(16 * v100);
            *(_QWORD *)v104 = v98;
            *((_QWORD *)v104 + 1) = v99;
            if (v93 == v96)
              goto LABEL_203;
          }
          v105 = v104;
          do
          {
            v106 = v105 - 16;
            *((_OWORD *)v105 - 1) = *((_OWORD *)v93 - 1);
            v93 -= 16;
            v105 -= 16;
          }
          while (v93 != v96);
          v95 = &v103[16 * v102];
          v93 = v104 + 16;
          if (v96)
LABEL_199:
            operator delete(v96);
LABEL_200:
          v96 = v106;
          v94 += 2;
        }
        while (*(_DWORD *)(v91 + 64) > (int)v94);
LABEL_287:
        __s[1] = v93;
        *(_QWORD *)&v336 = v95;
        v4 = v327;
        v37 = v323;
        v36 = v324;
LABEL_288:
        __s[0] = v96;
        v143 = operations_research::IntervalsAreSortedAndNonAdjacent((uint64_t *)v96, (v93 - v96) >> 4);
LABEL_289:
        if (v96)
          operator delete(v96);
        if (!v143)
        {
LABEL_657:
          __s[0] = "Invalid domain in constraint #";
          __s[1] = (std::string::value_type *)30;
          v314 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v36, v350, (char *)a2);
          *(_QWORD *)&v349 = v350;
          *((_QWORD *)&v349 + 1) = v314 - v350;
          *(_QWORD *)&v347 = " : ";
          *((_QWORD *)&v347 + 1) = 3;
          google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&__p);
          v315 = v334;
          if ((v334 & 0x80u) == 0)
            v316 = &__p;
          else
            v316 = __p;
          if ((v334 & 0x80u) != 0)
            v315 = (unint64_t)v333;
          v344[0] = v316;
          v344[1] = (void *)v315;
          absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, (uint64_t)&v347, (uint64_t)v344, a3);
LABEL_688:
          if (((char)v334 & 0x80000000) == 0)
            return;
          v204 = __p;
          goto LABEL_432;
        }
        v144 = *(_DWORD *)(v75 + 60);
        v145 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        if (v144 == 12)
          v145 = *(uint64_t **)(v75 + 48);
        v5 = a3;
        if (*((_DWORD *)v145 + 10) != *((_DWORD *)v145 + 4))
        {
          __s[0] = "coeffs_size() != vars_size() in constraint #";
          __s[1] = (std::string::value_type *)44;
          v322 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v36, v350, (char *)a2);
          *(_QWORD *)&v349 = v350;
          *((_QWORD *)&v349 + 1) = v322 - v350;
          *(_QWORD *)&v347 = " : ";
          *((_QWORD *)&v347 + 1) = 3;
          google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&__p);
          v320 = v334;
          if ((v334 & 0x80u) == 0)
            v321 = &__p;
          else
            v321 = __p;
          if ((v334 & 0x80u) != 0)
            v320 = (unint64_t)v333;
LABEL_687:
          v344[0] = v321;
          v344[1] = (void *)v320;
          absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, (uint64_t)&v347, (uint64_t)v344, v5);
          goto LABEL_688;
        }
        if (v144 == 12)
          v146 = *(uint64_t **)(v75 + 48);
        else
          v146 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        v147 = *((unsigned int *)v146 + 4);
        if ((int)v147 < 1)
          goto LABEL_81;
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v151 = v146[3];
        v152 = 1;
        v153 = v146[6];
        do
        {
          v154 = *(_DWORD *)(v151 + 4 * v148);
          if (~v154 <= v154)
            v155 = *(_DWORD *)(v151 + 4 * v148);
          else
            v155 = ~v154;
          v156 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * v155 + 8);
          v157 = *(uint64_t **)(v156 + 24);
          v158 = *v157;
          if (*v157 >= 0)
            v159 = *v157;
          else
            v159 = -v158;
          v160 = 63 - __clz(v159);
          v161 = *(_QWORD *)(v153 + 8 * v148);
          if (v158)
            v162 = v160;
          else
            v162 = 0;
          if (v154 >= 0)
            v163 = *(_QWORD *)(v153 + 8 * v148);
          else
            v163 = -v161;
          if (v161 >= 0)
            v164 = *(_QWORD *)(v153 + 8 * v148);
          else
            v164 = -v161;
          v165 = 63 - __clz(v164);
          if (!v163)
            v165 = 0;
          v166 = v165 + v162;
          if (v166 > 61)
          {
            if (v158)
              v168 = v163 == 0;
            else
              v168 = 1;
            if (v168)
            {
              v167 = 0;
            }
            else
            {
              v167 = ((v163 ^ (unint64_t)v158) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              v169 = v164 * v159;
              if (v166 <= 0x3E && v169 < v167)
              {
                if (v167 >= 0)
                  v167 = v169;
                else
                  v167 = -(uint64_t)v169;
              }
            }
          }
          else
          {
            v167 = v163 * v158;
          }
          v171 = &v157[*(int *)(v156 + 16)];
          v172 = *(v171 - 1);
          if (v172 >= 0)
            v173 = *(v171 - 1);
          else
            v173 = -v172;
          v174 = 63 - __clz(v173);
          if (!v172)
            v174 = 0;
          v175 = v165 + v174;
          if (v175 > 61)
          {
            if (v172)
              v177 = v163 == 0;
            else
              v177 = 1;
            if (v177)
            {
              v176 = 0;
            }
            else
            {
              v176 = ((v163 ^ (unint64_t)v172) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              v178 = v164 * v173;
              if (v175 <= 0x3E && v178 < v176)
              {
                if (v176 >= 0)
                  v176 = v178;
                else
                  v176 = -(uint64_t)v178;
              }
            }
          }
          else
          {
            v176 = v163 * v172;
          }
          if (v176 >= v167)
            v180 = v167;
          else
            v180 = v176;
          v181 = v180 & (v180 >> 63);
          v182 = v181 + v149;
          a2 = (v181 + v149) ^ v149;
          v183 = (v181 + v149) ^ v181;
          v149 = (v149 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if (((a2 & v183 & 0x8000000000000000) != 0) == __OFSUB__(v176, v167))
            v149 = v182;
          if (v167 <= v176)
            v184 = v176;
          else
            v184 = v167;
          v185 = (v184 & ~(v184 >> 63)) + v150;
          if (((v185 & ~v150 & 0x8000000000000000) != 0) != __OFSUB__(v167, v176))
            v150 = (v150 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          else
            v150 = v185;
          if ((unint64_t)(v167 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
            break;
          if ((unint64_t)(v176 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
            break;
          if (v149 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL)
            break;
          if (v150 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL)
            break;
          v152 = ++v148 < v147;
        }
        while (v147 != v148);
        if (!v152)
        {
LABEL_81:
          *((_BYTE *)&v5->__r_.__value_.__s + 23) = 0;
          v5->__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_82;
        }
        google::protobuf::Message::DebugString((google::protobuf::Message *)v75, __s);
        v186 = std::string::insert((std::string *)__s, 0, "Possible integer overflow in constraint: ");
        v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
        a3->__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v187;
        v186->__r_.__value_.__l.__size_ = 0;
        v186->__r_.__value_.__r.__words[2] = 0;
        v186->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v336) < 0)
          operator delete(__s[0]);
LABEL_390:
        v192 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
        if ((v192 & 0x80000000) == 0)
          goto LABEL_391;
LABEL_394:
        if (!v5->__r_.__value_.__l.__size_)
        {
          operator delete(v5->__r_.__value_.__l.__data_);
          goto LABEL_82;
        }
        return;
      case 0xF:
        v89 = *(_DWORD **)(v75 + 48);
        v90 = v89[4];
        if (v89[10] == v90 && v89[16] == v90)
          goto LABEL_220;
        __s[0] = "Wrong field sizes in circuit: ";
        __s[1] = (std::string::value_type *)30;
        google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&v347);
        v78 = HIBYTE(v348);
        if (v348 >= 0)
          v79 = &v347;
        else
          v79 = (__int128 *)v347;
        if (v348 < 0)
          v78 = *((_QWORD *)&v347 + 1);
        goto LABEL_401;
      case 0x12:
        if (*(_DWORD *)(*(_QWORD *)(v75 + 48) + 16) == *(_DWORD *)(*(_QWORD *)(v75 + 48) + 40))
          goto LABEL_264;
        __s[0] = "Non-matching fields size in inverse: ";
        __s[1] = (std::string::value_type *)37;
        google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&v347);
        v317 = HIBYTE(v348);
        if (v348 >= 0)
          v318 = &v347;
        else
          v318 = (__int128 *)v347;
        if (v348 < 0)
          v317 = *((_QWORD *)&v347 + 1);
LABEL_680:
        *(_QWORD *)&v349 = v318;
        *((_QWORD *)&v349 + 1) = v317;
        absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, v5);
        if ((SHIBYTE(v348) & 0x80000000) == 0)
          return;
        v204 = (void *)v347;
        goto LABEL_432;
      case 0x13:
        v81 = *((_QWORD *)v4 + 4);
        v82 = *(unsigned int *)(*(_QWORD *)(v75 + 48) + 24);
        if ((v82 & 0x80000000) != 0)
        {
          v125 = *(_QWORD *)(v81 + 8 * ~(_DWORD)v82 + 8);
          if (*(uint64_t *)(*(_QWORD *)(v125 + 24) + 8 * *(int *)(v125 + 16) - 8) < 1)
            goto LABEL_81;
          __s[0] = "Negative value in interval size domain: ";
          __s[1] = (std::string::value_type *)40;
          google::protobuf::Message::DebugString((google::protobuf::Message *)v75, &__p);
          v126 = (unsigned int *)v334;
          v127 = &__p;
          if ((v334 & 0x80u) != 0)
          {
            v127 = __p;
            v126 = v333;
          }
          *(_QWORD *)&v349 = v127;
          *((_QWORD *)&v349 + 1) = v126;
          *(_QWORD *)&v347 = "negation of size var: ";
          *((_QWORD *)&v347 + 1) = 22;
          google::protobuf::Message::DebugString((google::protobuf::Message *)v125, &v329);
          v86 = v331;
          v87 = &v329;
          if ((v331 & 0x80u) != 0)
          {
            v87 = v329;
            v86 = v330;
          }
        }
        else
        {
          v83 = *(google::protobuf::Message **)(v81 + 8 * v82 + 8);
          if ((**((_QWORD **)v83 + 3) & 0x8000000000000000) == 0)
            goto LABEL_81;
          __s[0] = "Negative value in interval size domain: ";
          __s[1] = (std::string::value_type *)40;
          google::protobuf::Message::DebugString((google::protobuf::Message *)v75, &__p);
          v84 = (unsigned int *)v334;
          v85 = &__p;
          if ((v334 & 0x80u) != 0)
          {
            v85 = __p;
            v84 = v333;
          }
          *(_QWORD *)&v349 = v85;
          *((_QWORD *)&v349 + 1) = v84;
          *(_QWORD *)&v347 = "size var: ";
          *((_QWORD *)&v347 + 1) = 10;
          google::protobuf::Message::DebugString(v83, &v329);
          v86 = v331;
          v87 = &v329;
          if ((v331 & 0x80u) != 0)
          {
            v87 = v329;
            v86 = v330;
          }
        }
        v344[0] = v87;
        v344[1] = (void *)v86;
        absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, (uint64_t)&v347, (uint64_t)v344, v5);
        if ((char)v331 < 0)
        {
          operator delete(v329);
          if (((char)v334 & 0x80000000) == 0)
            goto LABEL_390;
        }
        else if (((char)v334 & 0x80000000) == 0)
        {
          goto LABEL_390;
        }
        operator delete(__p);
        v192 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
        if (v192 < 0)
          goto LABEL_394;
LABEL_391:
        if (v192)
          return;
        goto LABEL_82;
      case 0x16:
        if (*(_DWORD *)(*(_QWORD *)(v75 + 48) + 16) == *(_DWORD *)(*(_QWORD *)(v75 + 48) + 40))
          goto LABEL_264;
        __s[0] = "intervals_size() != demands_size() in constraint #";
        __s[1] = (std::string::value_type *)50;
        v319 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v36, v350, (char *)a2);
        *(_QWORD *)&v349 = v350;
        *((_QWORD *)&v349 + 1) = v319 - v350;
        *(_QWORD *)&v347 = " : ";
        *((_QWORD *)&v347 + 1) = 3;
        google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&__p);
        v320 = v334;
        if ((v334 & 0x80u) == 0)
          v321 = &__p;
        else
          v321 = __p;
        if ((v334 & 0x80u) != 0)
          v320 = (unint64_t)v333;
        goto LABEL_687;
      case 0x17:
        v76 = *(_DWORD **)(v75 + 48);
        v77 = v76[4];
        if (v76[10] == v77 && v76[16] == v77)
          goto LABEL_220;
        __s[0] = "Wrong field sizes in routes: ";
        __s[1] = (std::string::value_type *)29;
        google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&v347);
        v78 = HIBYTE(v348);
        if (v348 >= 0)
          v79 = &v347;
        else
          v79 = (__int128 *)v347;
        if (v348 < 0)
          v78 = *((_QWORD *)&v347 + 1);
        goto LABEL_401;
      case 0x18:
        if (*(int *)(v75 + 16) < 1)
        {
          v128 = *(_QWORD *)(v75 + 48);
          v129 = *(int *)(v128 + 16);
          if ((_DWORD)v129 == *(_DWORD *)(v128 + 40))
          {
            if ((_DWORD)v129)
            {
              v130 = *(int **)(v128 + 24);
              v131 = &v130[v129];
              do
              {
                v188 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * *v130 + 8);
                v189 = *(int *)(v188 + 16);
                if ((_DWORD)v189)
                {
                  v190 = *(_QWORD **)(v188 + 24);
                  v191 = 8 * v189;
                  while ((*v190 & 0x8000000000000000) == 0)
                  {
                    ++v190;
                    v191 -= 8;
                    if (!v191)
                      goto LABEL_371;
                  }
                  __s[0] = "Time variables must be >= 0 in constraint ";
                  __s[1] = (std::string::value_type *)42;
                  google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&v347);
                  v78 = HIBYTE(v348);
                  if (v348 >= 0)
                    v79 = &v347;
                  else
                    v79 = (__int128 *)v347;
                  if (v348 < 0)
                    v78 = *((_QWORD *)&v347 + 1);
                  goto LABEL_401;
                }
LABEL_371:
                ++v130;
              }
              while (v130 != v131);
              v194 = 0;
              v195 = *(uint64_t **)(v128 + 48);
              v196 = 8 * v129;
              while (1)
              {
                v197 = *v195;
                if (*v195 < 0)
                  v197 = -v197;
                v198 = v197 + v194;
                v194 = (v198 & ~v194 & 0x8000000000000000) == 0 ? v198 : (v194 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                if (v194 == 0x7FFFFFFFFFFFFFFFLL)
                  break;
                ++v195;
                v196 -= 8;
                if (!v196)
                  goto LABEL_418;
              }
              google::protobuf::Message::DebugString(*(google::protobuf::Message **)(*((_QWORD *)v4 + 7) + 8 * v36 + 8), __s);
              v201 = std::string::insert((std::string *)__s, 0, "Possible integer overflow in constraint: ");
              v60 = *(__n128 *)&v201->__r_.__value_.__l.__data_;
              v5->__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
              *(__n128 *)&v5->__r_.__value_.__l.__data_ = v60;
              v201->__r_.__value_.__l.__size_ = 0;
              v201->__r_.__value_.__r.__words[2] = 0;
              v201->__r_.__value_.__r.__words[0] = 0;
              if (SBYTE7(v336) < 0)
              {
                v193 = __s[0];
                goto LABEL_403;
              }
            }
            else
            {
LABEL_418:
              v199 = *(_DWORD *)(v128 + 64);
              if (v199 < 1 || v199 == (_DWORD)v129)
              {
LABEL_220:
                *((_BYTE *)&v5->__r_.__value_.__s + 23) = 0;
                v5->__r_.__value_.__s.__data_[0] = 0;
                v116 = *(int *)(v75 + 16);
                if ((_DWORD)v116)
                  goto LABEL_265;
                goto LABEL_82;
              }
              v200 = (char *)operator new(0x28uLL);
              v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
              *(_OWORD *)&v5->__r_.__value_.__r.__words[1] = xmmword_22DCEAFB0;
              v60 = *(__n128 *)"Wrong array length of actives variables";
              strcpy(v200, "Wrong array length of actives variables");
            }
          }
          else
          {
            __s[0] = "Times and demands fields must be of the same size: ";
            __s[1] = (std::string::value_type *)51;
            google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)&v347);
            v78 = HIBYTE(v348);
            if (v348 >= 0)
              v79 = &v347;
            else
              v79 = (__int128 *)v347;
            if (v348 < 0)
              v78 = *((_QWORD *)&v347 + 1);
LABEL_401:
            *(_QWORD *)&v349 = v79;
            *((_QWORD *)&v349 + 1) = v78;
            absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, v5);
            if (SHIBYTE(v348) < 0)
            {
              v193 = (std::string::value_type *)v347;
LABEL_403:
              operator delete(v193);
            }
          }
        }
        else
        {
          v88 = (char *)operator new(0x38uLL);
          v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
          *(_OWORD *)&v5->__r_.__value_.__r.__words[1] = xmmword_22DCE5C40;
          strcpy(v88, "Reservoir does not support enforcement literals.");
          v60 = *(__n128 *)"cement literals.";
        }
LABEL_404:
        if ((SHIBYTE(v5->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((_BYTE *)&v5->__r_.__value_.__s + 23))
            return;
LABEL_264:
          v116 = *(int *)(v75 + 16);
          if (!(_DWORD)v116)
            goto LABEL_82;
LABEL_265:
          v134 = *(int **)(v75 + 24);
          v135 = 4 * v116;
          while (1)
          {
            v136 = *v134;
            if (~*v134 > *v134)
              v136 = ~v136;
            v137 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * v136 + 8);
            operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v137 + 24), *(int *)(v137 + 16), (unint64_t *)&v347, v60);
            if (operations_research::Domain::Size((operations_research::Domain *)&v347) != 1)
              break;
            if ((v347 & 1) != 0)
              operator delete(*((void **)&v347 + 1));
            ++v134;
            v135 -= 4;
            if (!v135)
              goto LABEL_82;
          }
          __s[0] = "Enforcement literal not supported in constraint: ";
          __s[1] = (std::string::value_type *)49;
          google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v75, (uint64_t)v344);
          v202 = v346;
          if ((v346 & 0x80u) == 0)
            v203 = v344;
          else
            v203 = (void **)v344[0];
          if ((v346 & 0x80u) != 0)
            v202 = (unint64_t)v344[1];
          *(_QWORD *)&v349 = v203;
          *((_QWORD *)&v349 + 1) = v202;
          absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v349, v5);
          if ((char)v346 < 0)
            operator delete(v344[0]);
          if ((v347 & 1) == 0)
            return;
          v204 = (void *)*((_QWORD *)&v347 + 1);
LABEL_432:
          operator delete(v204);
          return;
        }
        if (v5->__r_.__value_.__l.__size_)
          return;
        operator delete(v5->__r_.__value_.__l.__data_);
        v116 = *(int *)(v75 + 16);
        if ((_DWORD)v116)
          goto LABEL_265;
LABEL_82:
        if (++v36 >= *((int *)v4 + 12))
          goto LABEL_433;
        continue;
      case 0x19:
        v109 = *(_QWORD *)(v75 + 48);
        v110 = *(int *)(v109 + 40);
        if (!(_DWORD)v110)
          goto LABEL_220;
        v111 = *(unsigned int *)(v109 + 16);
        v112 = *(unsigned int **)(v109 + 48);
        v113 = 8 * v110;
        while (1)
        {
          v114 = *v112;
          if ((v114 & 0x80000000) != 0 || (int)v111 <= (int)v114)
            break;
          v112 += 2;
          v113 -= 8;
          if (!v113)
            goto LABEL_220;
        }
        v140 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v114, v350, (char *)a2);
        *(_QWORD *)&v349 = v350;
        *((_QWORD *)&v349 + 1) = v140 - v350;
        v142 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v111, v37, v141);
        *(_QWORD *)&v347 = v37;
        *((_QWORD *)&v347 + 1) = v142 - (_BYTE *)v37;
        __s[0] = "Distinguished node ";
        __s[1] = (std::string::value_type *)19;
        v336 = v349;
        v337 = " not in [0, ";
        v338 = 12;
        *(_QWORD *)&v339 = v37;
        *((_QWORD *)&v339 + 1) = v142 - (_BYTE *)v37;
        v340 = ").";
        v341 = 2;
        absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)__s, 5, (char *)v5);
        goto LABEL_404;
      case 0x1B:
        if (qword_25408AAD8)
          v107 = (const operations_research::sat::LinearExpressionProto *)qword_25408AAD8;
        else
          v107 = (const operations_research::sat::LinearExpressionProto *)&operations_research::sat::_LinearExpressionProto_default_instance_;
        if (SBYTE7(v336) < 0)
        {
          a2 = (int64_t)__s[1];
          if (__s[1])
            goto LABEL_260;
        }
        else if (BYTE7(v336))
        {
          goto LABEL_210;
        }
        v138 = 0;
        while (2)
        {
          if (*(_DWORD *)(v75 + 60) == 27)
          {
            v139 = *(uint64_t **)(v75 + 48);
            if (v138 >= *((int *)v139 + 6))
            {
LABEL_282:
              v108 = 1;
              if ((SBYTE7(v336) & 0x80000000) == 0)
              {
LABEL_263:
                if ((v108 & 1) == 0)
                  return;
                goto LABEL_264;
              }
LABEL_262:
              operator delete(__s[0]);
              goto LABEL_263;
            }
          }
          else
          {
            v139 = &operations_research::sat::_LinearArgumentProto_default_instance_;
            if (v138 >= (int)qword_25408AAC8)
              goto LABEL_282;
          }
          if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v5->__r_.__value_.__l.__size_)
            {
              operator delete(v5->__r_.__value_.__l.__data_);
              goto LABEL_274;
            }
          }
          else if (!*((_BYTE *)&v5->__r_.__value_.__s + 23))
          {
LABEL_274:
            ++v138;
            continue;
          }
          goto LABEL_261;
        }
      case 0x1C:
        if (*(_QWORD *)(*(_QWORD *)(v75 + 48) + 40))
          v80 = *(const operations_research::sat::LinearExpressionProto **)(*(_QWORD *)(v75 + 48) + 40);
        else
          v80 = (const operations_research::sat::LinearExpressionProto *)&operations_research::sat::_LinearExpressionProto_default_instance_;
        if (SBYTE7(v336) < 0)
        {
          a2 = (int64_t)__s[1];
          if (__s[1])
          {
LABEL_260:
            std::string::__init_copy_ctor_external(v5, __s[0], a2);
LABEL_261:
            v108 = 0;
            if ((SBYTE7(v336) & 0x80000000) == 0)
              goto LABEL_263;
            goto LABEL_262;
          }
        }
        else if (BYTE7(v336))
        {
LABEL_210:
          v108 = 0;
          v60 = *(__n128 *)__s;
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)__s;
          v5->__r_.__value_.__r.__words[2] = v336;
          if ((SBYTE7(v336) & 0x80000000) == 0)
            goto LABEL_263;
          goto LABEL_262;
        }
        for (j = 0; ; ++j)
        {
          if (*(_DWORD *)(v75 + 60) == 28)
          {
            v133 = *(uint64_t **)(v75 + 48);
            if (j >= *((int *)v133 + 6))
              goto LABEL_282;
          }
          else
          {
            v133 = &operations_research::sat::_LinearArgumentProto_default_instance_;
            if (j >= (int)qword_25408AAC8)
              goto LABEL_282;
          }
          if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
          {
            if (v5->__r_.__value_.__l.__size_)
              goto LABEL_261;
            operator delete(v5->__r_.__value_.__l.__data_);
          }
          else if (*((_BYTE *)&v5->__r_.__value_.__s + 23))
          {
            goto LABEL_261;
          }
        }
      default:
        goto LABEL_264;
    }
  }
}

void sub_22DA79F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::ValidateLinearExpression(std::string *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::LinearExpressionProto *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *p_p;
  void *__p;
  uint64_t v46;
  unsigned __int8 v47;
  _QWORD v48[6];
  const char *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned int *)a3 + 10);
  if ((_DWORD)v4 == *((_DWORD *)a3 + 4))
  {
    if ((int)v4 < 1)
      goto LABEL_86;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v9 = 1;
    do
    {
      v10 = *(_DWORD *)(*((_QWORD *)a3 + 3) + 4 * v5);
      if (~v10 <= v10)
        v11 = *(_DWORD *)(*((_QWORD *)a3 + 3) + 4 * v5);
      else
        v11 = ~v10;
      v12 = *((_QWORD *)a2 + v11 + 1);
      v13 = *(uint64_t **)(v12 + 24);
      v14 = *v13;
      if (*v13 >= 0)
        v15 = *v13;
      else
        v15 = -v14;
      v16 = 63 - __clz(v15);
      v8 = *((_QWORD *)a3 + 6);
      v17 = *(_QWORD *)(v8 + 8 * v5);
      if (v14)
        v18 = v16;
      else
        v18 = 0;
      if (v10 >= 0)
        v19 = *(_QWORD *)(v8 + 8 * v5);
      else
        v19 = -v17;
      if (v17 >= 0)
        v20 = *(_QWORD *)(v8 + 8 * v5);
      else
        v20 = -v17;
      v21 = 63 - __clz(v20);
      if (!v19)
        v21 = 0;
      v22 = v21 + v18;
      if (v22 > 61)
      {
        if (v14)
          v24 = v19 == 0;
        else
          v24 = 1;
        if (v24)
        {
          v23 = 0;
        }
        else
        {
          v23 = ((v19 ^ (unint64_t)v14) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v25 = v20 * v15;
          if (v22 <= 0x3E && v25 < v23)
          {
            if (v23 >= 0)
              v23 = v25;
            else
              v23 = -(uint64_t)v25;
          }
        }
      }
      else
      {
        v23 = v19 * v14;
      }
      v27 = &v13[*(int *)(v12 + 16)];
      v28 = *(v27 - 1);
      if (v28 >= 0)
        v29 = *(v27 - 1);
      else
        v29 = -v28;
      v30 = 63 - __clz(v29);
      if (!v28)
        v30 = 0;
      v31 = v21 + v30;
      if (v31 > 61)
      {
        if (v28)
          v33 = v19 == 0;
        else
          v33 = 1;
        if (v33)
        {
          v32 = 0;
        }
        else
        {
          v32 = ((v19 ^ (unint64_t)v28) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v34 = v20 * v29;
          if (v31 <= 0x3E && v34 < v32)
          {
            if (v32 >= 0)
              v32 = v34;
            else
              v32 = -(uint64_t)v34;
          }
        }
      }
      else
      {
        v32 = v19 * v28;
      }
      if (v32 >= v23)
        v36 = v23;
      else
        v36 = v32;
      v37 = v36 & (v36 >> 63);
      v38 = v37 + v6;
      v39 = (v37 + v6) ^ v6;
      v40 = (v37 + v6) ^ v37;
      v6 = (v6 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v39 & v40 & 0x8000000000000000) != 0) == __OFSUB__(v32, v23))
        v6 = v38;
      if (v23 <= v32)
        v41 = v32;
      else
        v41 = v23;
      v42 = (v41 & ~(v41 >> 63)) + v7;
      if (((v42 & ~v7 & 0x8000000000000000) != 0) != __OFSUB__(v23, v32))
        v7 = (v7 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      else
        v7 = v42;
      if ((unint64_t)(v23 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
        break;
      if ((unint64_t)(v32 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
        break;
      if (v6 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL)
        break;
      if (v7 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL)
        break;
      v9 = ++v5 < v4;
    }
    while (v4 != v5);
    if (!v9)
    {
LABEL_86:
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
      this->__r_.__value_.__s.__data_[0] = 0;
      return;
    }
    v49 = "Possible overflow in linear expression: ";
    v50 = 40;
    google::protobuf::Message::ShortDebugString(a3, (uint64_t)&__p);
    v43 = v47;
    if ((v47 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v47 & 0x80u) != 0)
      v43 = v46;
  }
  else
  {
    v49 = "coeffs_size() != vars_size() in linear expression: ";
    v50 = 51;
    google::protobuf::Message::ShortDebugString(a3, (uint64_t)&__p);
    v43 = v47;
    if ((v47 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v47 & 0x80u) != 0)
      v43 = v46;
  }
  v48[0] = p_p;
  v48[1] = v43;
  absl::lts_2020_02_25::StrCat((uint64_t)&v49, (uint64_t)v48, this);
  if ((char)v47 < 0)
    operator delete(__p);
}

void sub_22DA7A494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SolutionIsFeasible(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  google::LogMessage *p_p;
  google::LogMessage *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type size;
  uint64_t v27;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t kk;
  unint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  std::string::size_type v110;
  std::string::size_type v111;
  std::string::size_type v112;
  std::string::size_type v113;
  uint64_t v114;
  uint64_t v115;
  std::string::size_type v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  std::string::size_type ii;
  std::string::size_type v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t jj;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int *v138;
  std::string::size_type v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  std::string::size_type i;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  std::string::size_type v149;
  uint64_t v150;
  uint64_t v151;
  std::string::size_type v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  std::string::size_type v176;
  uint64_t *v177;
  int *v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int *v182;
  uint64_t i1;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t *v195;
  uint64_t *v196;
  std::string::size_type v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t *v203;
  uint64_t v204;
  int v205;
  uint64_t *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  std::string::size_type v212;
  std::string::size_type *i8;
  uint64_t **v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  unsigned int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char v233;
  std::string::size_type v234;
  unsigned int *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  BOOL v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t i2;
  std::string::size_type v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int *v266;
  uint64_t i3;
  uint64_t v268;
  uint64_t v269;
  unsigned int *v270;
  uint64_t i4;
  uint64_t v272;
  int v273;
  uint64_t *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t *v285;
  std::string::size_type v286;
  std::string::size_type v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t **v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int *v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int64_t v308;
  uint64_t v309;
  int64_t v310;
  uint64_t v311;
  unsigned int *v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  std::string::size_type v319;
  unint64_t v320;
  size_t v321;
  _QWORD *v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  char v326;
  _QWORD *v327;
  _QWORD *v328;
  int v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  unsigned int *v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int64_t v343;
  uint64_t v344;
  unsigned int *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  BOOL v354;
  uint64_t v355;
  uint64_t v356;
  std::string::size_type v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  std::string::size_type v367;
  uint64_t i5;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  google::LogMessage *v385;
  _QWORD *v386;
  _QWORD *v387;
  int v388;
  uint64_t *v389;
  int *v390;
  void *v391;
  int v392;
  char *v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  BOOL v404;
  uint64_t *v405;
  unsigned int *v406;
  uint64_t i6;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t i7;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  _QWORD *v437;
  uint64_t *v438;
  unint64_t v439;
  uint64_t *v440;
  int v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t j;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t k;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  _DWORD *v459;
  int v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  unint64_t v465;
  int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t n;
  uint64_t v473;
  _DWORD *v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t m;
  unint64_t v480;
  uint64_t v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  BOOL v489;
  uint64_t v490;
  unsigned int *v491;
  int64_t v492;
  int64_t v493;
  uint64_t v494;
  unsigned int v495;
  int64_t v496;
  uint64_t v497;
  unsigned int *v498;
  uint64_t v499;
  unsigned int v500;
  unint64_t v501;
  uint64_t v502;
  void *v503;
  int64_t v504;
  int64_t *v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t mm;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  std::string::size_type nn;
  std::string::size_type v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  BOOL v524;
  unint64_t v525;
  char v526;
  std::string::size_type v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  BOOL v532;
  uint64_t v533;
  uint64_t v534;
  unsigned int *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unsigned int *v541;
  int64_t v542;
  uint64_t v543;
  unsigned int v544;
  int64_t v545;
  unsigned int *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t *v550;
  uint64_t *v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t *v555;
  uint64_t v556;
  char *v557;
  uint64_t *v558;
  _QWORD *v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  std::string *v582;
  std::string *v583;
  google::LogMessage *v584;
  _QWORD *v585;
  _QWORD *v586;
  google::LogMessage *v587;
  _QWORD *v588;
  _QWORD *v590;
  _QWORD *v591;
  _QWORD *v592;
  _QWORD *v593;
  _QWORD *v594;
  _QWORD *v595;
  _QWORD *v596;
  _QWORD *v597;
  _QWORD *v598;
  _QWORD *v599;
  google::LogMessage *v600;
  _QWORD *v601;
  _QWORD *v602;
  google::LogMessage *v603;
  _QWORD *v604;
  _QWORD *v605;
  google::LogMessage *v606;
  _QWORD *v607;
  _QWORD *v608;
  _QWORD *v609;
  std::string *v610;
  std::string::size_type v611;
  unint64_t v612;
  int *v613;
  int *v614;
  std::string::size_type v615;
  unint64_t v616;
  void *v617;
  uint64_t v618;
  int *v619;
  uint64_t v620;
  uint64_t v621;
  _QWORD *v622;
  _QWORD *v623;
  _QWORD *v624;
  _QWORD *v625;
  _QWORD *v626;
  uint64_t v627;
  __n128 v628;
  _QWORD *v629;
  _QWORD *v630;
  uint64_t v631;
  __n128 v632;
  google::LogMessage *v633;
  _QWORD *v634;
  google::LogMessage *v635;
  _QWORD *v636;
  _QWORD *v637;
  unint64_t *v638;
  uint64_t v639;
  unint64_t v640;
  char *v641;
  BOOL v642;
  char *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v648;
  unint64_t v650[3];
  _BYTE v651[16];
  void *v652;
  char *v653;
  char *v654;
  std::string __p;
  __int128 v656;
  uint64_t v657;
  uint64_t *v658;
  int v659;
  std::vector<int>::value_type __x[2];
  __int128 v661;
  __int128 v662;
  uint64_t v663;
  _BYTE v664[24];
  __int128 v665;
  uint64_t v666;

  v5 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v6 = (int64_t)v4 - *(_QWORD *)a2;
  if (v6 >> 3 != *(_DWORD *)(a1 + 24))
  {
    if (*_MergedGlobals_3[0] < 1
      || _MergedGlobals_3[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)_MergedGlobals_3, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1))
    {
      return 0;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 983);
    v18 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Wrong number of variables in the solution vector", 48);
    p_p = (google::LogMessage *)&__p;
    goto LABEL_31;
  }
  v7 = *(unsigned int *)(a1 + 24);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8 + 8);
      v10 = *(_DWORD *)(v9 + 16);
      if (v10 < 1)
        break;
      v11 = 0;
      v12 = v5[v8];
      v13 = *(_QWORD *)(v9 + 24);
      while (*(_QWORD *)(v13 + 8 * v11) > v12 || *(_QWORD *)(v13 + 8 * v11 + 8) < v12)
      {
        v11 += 2;
        if (v10 <= (int)v11)
          goto LABEL_19;
      }
      if (++v8 == v7)
        goto LABEL_10;
    }
LABEL_19:
    if (*off_254079358[0] < 1
      || off_254079358[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_254079358, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1))
    {
      return 0;
    }
    v20 = google::LogMessage::LogMessage((google::LogMessage *)v664, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 990);
    v21 = (_QWORD *)google::LogMessage::stream(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Variable #", 10);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" has value ", 11);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" which do not fall in its domain: ", 34);
    google::protobuf::Message::ShortDebugString(*(google::protobuf::Message **)(*(_QWORD *)(a1 + 32) + 8 * v8 + 8), (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    p_p = (google::LogMessage *)v664;
LABEL_31:
    google::LogMessage::~LogMessage(p_p);
    return 0;
  }
LABEL_10:
  v652 = 0;
  v653 = 0;
  v654 = 0;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v6);
    v15 = &v14[8 * (v6 >> 3)];
    v652 = v14;
    v654 = v15;
    memcpy(v14, v5, v6);
    v653 = v15;
  }
  if (*(int *)(a1 + 48) < 1)
  {
LABEL_865:
    v27 = 1;
    goto LABEL_914;
  }
  v16 = 0;
  v17 = a1;
LABEL_39:
  v648 = v16;
  v31 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v16 + 8);
  v32 = *(int *)(v31 + 16);
  if ((_DWORD)v32)
  {
    v33 = *(unsigned int **)(v31 + 24);
    v34 = 4 * v32;
    do
    {
      v35 = *v33;
      if ((v35 & 0x80000000) != 0)
      {
        if (*((_QWORD *)v652 + ~(_DWORD)v35))
          goto LABEL_38;
      }
      else if (!*((_QWORD *)v652 + v35))
      {
        goto LABEL_38;
      }
      ++v33;
      v34 -= 4;
    }
    while (v34);
  }
  v36 = *(_DWORD *)(v31 + 60);
  switch(v36)
  {
    case 0:
      goto LABEL_38;
    case 3:
      v37 = *(_QWORD *)(v31 + 48);
      v38 = *(int *)(v37 + 16);
      if (!(_DWORD)v38)
        goto LABEL_876;
      v39 = *(unsigned int **)(v37 + 24);
      v40 = 4 * v38;
      while (2)
      {
        v41 = *v39;
        if ((v41 & 0x80000000) != 0)
        {
          if (!*((_QWORD *)v652 + ~(_DWORD)v41))
            goto LABEL_38;
        }
        else if (*((_QWORD *)v652 + v41))
        {
          goto LABEL_38;
        }
        ++v39;
        v40 -= 4;
        if (!v40)
          goto LABEL_876;
        continue;
      }
    case 4:
      v247 = *(_QWORD *)(v31 + 48);
      v248 = *(int *)(v247 + 16);
      if (!(_DWORD)v248)
        goto LABEL_38;
      v249 = *(unsigned int **)(v247 + 24);
      v250 = 4 * v248;
      while (2)
      {
        v251 = *v249;
        if ((v251 & 0x80000000) != 0)
        {
          if (*((_QWORD *)v652 + ~(_DWORD)v251))
            goto LABEL_876;
        }
        else if (!*((_QWORD *)v652 + v251))
        {
          goto LABEL_876;
        }
        ++v249;
        v250 -= 4;
        if (!v250)
          goto LABEL_38;
        continue;
      }
    case 5:
      v218 = *(_QWORD *)(v31 + 48);
      v219 = *(int *)(v218 + 16);
      if (!(_DWORD)v219)
        goto LABEL_876;
      v220 = 0;
      v221 = *(unsigned int **)(v218 + 24);
      v222 = 4 * v219;
      do
      {
        while (1)
        {
          v223 = *v221;
          if ((v223 & 0x80000000) == 0)
            break;
          v220 ^= *((_QWORD *)v652 + ~(_DWORD)v223) == 0;
          ++v221;
          v222 -= 4;
          if (!v222)
            goto LABEL_280;
        }
        v220 ^= *((_QWORD *)v652 + v223) != 0;
        ++v221;
        v222 -= 4;
      }
      while (v222);
LABEL_280:
      if (v220 != 1)
        goto LABEL_876;
      goto LABEL_38;
    case 7:
      v244 = *(_QWORD *)(v31 + 48);
      v245 = *(unsigned int *)(v244 + 36);
      if ((v245 & 0x80000000) != 0)
        v246 = -*((_QWORD *)v652 + ~(_DWORD)v245);
      else
        v246 = *((_QWORD *)v652 + v245);
      v535 = *(unsigned int **)(v244 + 24);
      v536 = *v535;
      if ((v536 & 0x80000000) != 0)
        v537 = -*((_QWORD *)v652 + ~(_DWORD)v536);
      else
        v537 = *((_QWORD *)v652 + v536);
      v538 = v535[1];
      if ((v538 & 0x80000000) != 0)
        v539 = -*((_QWORD *)v652 + ~(_DWORD)v538);
      else
        v539 = *((_QWORD *)v652 + v538);
      if (v246 != v537 / v539)
        goto LABEL_876;
      goto LABEL_38;
    case 8:
      v254 = *(_QWORD *)(v31 + 48);
      v255 = *(unsigned int *)(v254 + 36);
      if ((v255 & 0x80000000) != 0)
        v256 = -*((_QWORD *)v652 + ~(_DWORD)v255);
      else
        v256 = *((_QWORD *)v652 + v255);
      v546 = *(unsigned int **)(v254 + 24);
      v547 = *v546;
      if ((v547 & 0x80000000) != 0)
        v548 = -*((_QWORD *)v652 + ~(_DWORD)v547);
      else
        v548 = *((_QWORD *)v652 + v547);
      v549 = v546[1];
      if ((v549 & 0x80000000) != 0)
      {
        if (v256 == v548 % -*((_QWORD *)v652 + ~(_DWORD)v549))
          goto LABEL_38;
      }
      else if (v256 == v548 % *((_QWORD *)v652 + v549))
      {
        goto LABEL_38;
      }
      goto LABEL_876;
    case 9:
      v158 = *(_QWORD *)(v31 + 48);
      v159 = *(unsigned int *)(v158 + 36);
      if ((v159 & 0x80000000) != 0)
        v160 = -*((_QWORD *)v652 + ~(_DWORD)v159);
      else
        v160 = *((_QWORD *)v652 + v159);
      v490 = *(unsigned int *)(v158 + 16);
      if ((int)v490 < 1)
      {
        v492 = 0x8000000000000000;
        goto LABEL_719;
      }
      v491 = *(unsigned int **)(v158 + 24);
      v492 = 0x8000000000000000;
      do
      {
        while (1)
        {
          v495 = *v491++;
          v494 = v495;
          if ((v495 & 0x80000000) != 0)
            break;
          v496 = *((_QWORD *)v652 + v494);
          if (v492 <= v496)
            v492 = v496;
          if (!--v490)
            goto LABEL_719;
        }
        v493 = -*((_QWORD *)v652 + ~(_DWORD)v494);
        if (v492 <= v493)
          v492 = v493;
        --v490;
      }
      while (v490);
      goto LABEL_719;
    case 10:
      v252 = *(_QWORD *)(v31 + 48);
      v253 = *(unsigned int *)(v252 + 36);
      if ((v253 & 0x80000000) != 0)
        v160 = -*((_QWORD *)v652 + ~(_DWORD)v253);
      else
        v160 = *((_QWORD *)v652 + v253);
      v540 = *(unsigned int *)(v252 + 16);
      if ((int)v540 < 1)
      {
        v492 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_719;
      }
      v541 = *(unsigned int **)(v252 + 24);
      v492 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        while (1)
        {
          v544 = *v541++;
          v543 = v544;
          if ((v544 & 0x80000000) != 0)
            break;
          v545 = *((_QWORD *)v652 + v543);
          if (v545 < v492)
            v492 = v545;
          if (!--v540)
            goto LABEL_719;
        }
        v542 = -*((_QWORD *)v652 + ~(_DWORD)v543);
        if (v542 < v492)
          v492 = v542;
        --v540;
      }
      while (v540);
LABEL_719:
      if (v160 != v492)
        goto LABEL_876;
      goto LABEL_38;
    case 11:
      v161 = *(_QWORD *)(v31 + 48);
      v162 = *(unsigned int *)(v161 + 36);
      if ((v162 & 0x80000000) != 0)
        v160 = -*((_QWORD *)v652 + ~(_DWORD)v162);
      else
        v160 = *((_QWORD *)v652 + v162);
      v497 = *(unsigned int *)(v161 + 16);
      if ((int)v497 < 1)
      {
        v492 = 1;
      }
      else
      {
        v498 = *(unsigned int **)(v161 + 24);
        v492 = 1;
        do
        {
          while (1)
          {
            v500 = *v498++;
            v499 = v500;
            if ((v500 & 0x80000000) == 0)
              break;
            v492 *= -*((_QWORD *)v652 + ~(_DWORD)v499);
            if (!--v497)
              goto LABEL_719;
          }
          v492 *= *((_QWORD *)v652 + v499);
          --v497;
        }
        while (v497);
      }
      goto LABEL_719;
    case 12:
      v82 = *(_QWORD *)(v31 + 48);
      v83 = *(unsigned int *)(v82 + 40);
      if ((int)v83 < 1)
      {
        v84 = 0;
      }
      else
      {
        v84 = 0;
        v85 = *(unsigned int **)(v82 + 24);
        v86 = *(uint64_t **)(v82 + 48);
        do
        {
          while (1)
          {
            v89 = *v85++;
            v88 = v89;
            if ((v89 & 0x80000000) == 0)
              break;
            v87 = *v86++;
            v84 += v87 * -*((_QWORD *)v652 + ~(_DWORD)v88);
            if (!--v83)
              goto LABEL_511;
          }
          v90 = *v86++;
          v84 += v90 * *((_QWORD *)v652 + v88);
          --v83;
        }
        while (v83);
      }
LABEL_511:
      v399 = *(_DWORD *)(v82 + 64);
      if (v399 < 1)
        goto LABEL_876;
      v400 = 0;
      v401 = *(_QWORD *)(v82 + 72);
      while (*(_QWORD *)(v401 + 8 * v400) > v84 || *(_QWORD *)(v401 + 8 * v400 + 8) < v84)
      {
        v400 += 2;
        if (v399 <= (int)v400)
          goto LABEL_876;
      }
      goto LABEL_38;
    case 13:
      v135 = *(_QWORD *)(v31 + 48);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v657 = 0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v656 = 0u;
      v136 = *(int *)(v135 + 16);
      if (!(_DWORD)v136)
      {
        v29 = 1;
        goto LABEL_35;
      }
      v137 = *(unsigned int **)(v135 + 24);
      v138 = &v137[v136];
      while (2)
      {
        v145 = *v137;
        if ((v145 & 0x80000000) != 0)
          v146 = -*((_QWORD *)v652 + ~(_DWORD)v145);
        else
          v146 = *((_QWORD *)v652 + v145);
        v147 = 0;
        v148 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v146)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v146));
        v149 = (__p.__r_.__value_.__r.__words[0] >> 12) ^ (v148 >> 7);
        v150 = v656;
        v151 = 0x101010101010101 * (v148 & 0x7F);
        while (2)
        {
          v152 = v149 & v656;
          v153 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + v152);
          v154 = ((v153 ^ v151) - 0x101010101010101) & ~(v153 ^ v151) & 0x8080808080808080;
          if (v154)
          {
            while (1)
            {
              v155 = (v152 + (__clz(__rbit64(v154)) >> 3)) & v656;
              if (*(_QWORD *)(__p.__r_.__value_.__l.__size_ + 8 * v155) == v146)
                break;
              v154 &= v154 - 1;
              if (!v154)
                goto LABEL_187;
            }
            if (v155 != (_QWORD)v656)
            {
              v29 = 0;
LABEL_805:
              if (v150)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                v657 = 0;
                *(_QWORD *)&v656 = 0;
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
              }
LABEL_35:
              v30 = (_QWORD *)*((_QWORD *)&v656 + 1);
              if (*((_QWORD *)&v656 + 1))
LABEL_36:
                absl::lts_2020_02_25::container_internal::UnsampleSlow(v30);
LABEL_37:
              if (!v29)
                goto LABEL_876;
              goto LABEL_38;
            }
          }
          else
          {
LABEL_187:
            if ((v153 & (~v153 << 6) & 0x8080808080808080) == 0)
            {
              v147 += 8;
              v149 = v147 + v152;
              continue;
            }
          }
          break;
        }
        if ((v145 & 0x80000000) != 0)
          v156 = -*((_QWORD *)v652 + ~(_DWORD)v145);
        else
          v156 = *((_QWORD *)v652 + v145);
        v142 = 0;
        v157 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v156)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v156));
        for (i = (__p.__r_.__value_.__r.__words[0] >> 12) ^ (v157 >> 7); ; i = v142 + v139)
        {
          v139 = i & v656;
          v140 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + v139);
          v141 = ((v140 ^ (0x101010101010101 * (v157 & 0x7F))) - 0x101010101010101) & ~(v140 ^ (0x101010101010101
                                                                                                  * (v157 & 0x7F))) & 0x8080808080808080;
          if (v141)
            break;
LABEL_176:
          if ((v140 & (~v140 << 6) & 0x8080808080808080) != 0)
          {
            v144 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)&__p, v157);
            *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 8 * v144) = v156;
            goto LABEL_179;
          }
          v142 += 8;
        }
        while (*(_QWORD *)(__p.__r_.__value_.__l.__size_ + 8 * ((v139 + (__clz(__rbit64(v141)) >> 3)) & v656)) != v156)
        {
          v141 &= v141 - 1;
          if (!v141)
            goto LABEL_176;
        }
LABEL_179:
        if (++v137 == v138)
        {
          v29 = 1;
          v150 = v656;
          goto LABEL_805;
        }
        continue;
      }
    case 14:
      v48 = *(_QWORD *)(v31 + 48);
      v49 = *(unsigned int *)(v48 + 36);
      if ((v49 & 0x80000000) != 0)
        v50 = -*((_QWORD *)v652 + ~(_DWORD)v49);
      else
        v50 = *((_QWORD *)v652 + v49);
      v395 = *(unsigned int *)(*(_QWORD *)(v48 + 24) + 4 * (int)v50);
      if ((v395 & 0x80000000) != 0)
        v396 = -*((_QWORD *)v652 + ~(_DWORD)v395);
      else
        v396 = *((_QWORD *)v652 + v395);
      v397 = *(unsigned int *)(v48 + 40);
      if ((v397 & 0x80000000) != 0)
        v398 = -*((_QWORD *)v652 + ~(_DWORD)v397);
      else
        v398 = *((_QWORD *)v652 + v397);
      if (v396 != v398)
        goto LABEL_876;
      goto LABEL_38;
    case 15:
      v95 = *(unsigned int *)(*(_QWORD *)(v31 + 48) + 16);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v656 = 0u;
      v657 = 0;
      *(_QWORD *)v664 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)&v664[8] = 0u;
      v665 = 0u;
      v666 = 0;
      if ((int)v95 < 1)
      {
        v390 = 0;
        v389 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
LABEL_571:
        if (*(char *)v389 > -2)
        {
          v438 = v389;
        }
        else
        {
          v438 = v389;
          do
          {
            v439 = (__clz(__rbit64((((unint64_t)*v438 >> 7) & ~*v438 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v438 = (uint64_t *)((char *)v438 + v439);
            v390 += v439;
          }
          while (*(char *)v438 < -1);
        }
        v440 = (uint64_t *)((char *)v389 + v656);
        if (v438 == (uint64_t *)((char *)v389 + v656))
          goto LABEL_788;
        v441 = 0;
        v442 = 0;
        do
        {
          v443 = 0;
          v444 = *v390;
          v445 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v444)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v444));
          v446 = *(_QWORD *)&v664[8];
          v447 = (v445 >> 7) ^ (*(_QWORD *)v664 >> 12);
          v448 = 0x101010101010101 * (v445 & 0x7F);
          for (j = v447; ; j = v443 + v450)
          {
            v450 = j & v665;
            v451 = *(_QWORD *)(*(_QWORD *)v664 + v450);
            v452 = ((v451 ^ v448) - 0x101010101010101) & ~(v451 ^ v448) & 0x8080808080808080;
            if (v452)
              break;
LABEL_582:
            if ((v451 & (~v451 << 6) & 0x8080808080808080) != 0)
              goto LABEL_621;
            v443 += 8;
          }
          while (1)
          {
            v453 = (v450 + (__clz(__rbit64(v452)) >> 3)) & v665;
            if (*(_DWORD *)(*(_QWORD *)&v664[8] + 8 * v453) == (_DWORD)v444)
              break;
            v452 &= v452 - 1;
            if (!v452)
              goto LABEL_582;
          }
          if (v453 == (_QWORD)v665)
          {
LABEL_621:
            v489 = 0;
            goto LABEL_818;
          }
          for (k = 0; ; v447 = k + v455)
          {
            v455 = v447 & v665;
            v456 = *(_QWORD *)(*(_QWORD *)v664 + v455);
            v457 = ((v456 ^ v448) - 0x101010101010101) & ~(v456 ^ v448) & 0x8080808080808080;
            if (v457)
              break;
LABEL_589:
            if ((v456 & (~v456 << 6) & 0x8080808080808080) != 0)
            {
              v458 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert((uint64_t *)v664, v445);
              v446 = *(_QWORD *)&v664[8];
              v459 = (_DWORD *)(*(_QWORD *)&v664[8] + 8 * v458);
              *v459 = v444;
              v459[1] = 0;
              goto LABEL_592;
            }
            k += 8;
          }
          while (1)
          {
            v458 = (v455 + (__clz(__rbit64(v457)) >> 3)) & v665;
            if (*(_DWORD *)(*(_QWORD *)&v664[8] + 8 * v458) == (_DWORD)v444)
              break;
            v457 &= v457 - 1;
            if (!v457)
              goto LABEL_589;
          }
LABEL_592:
          if (*(_DWORD *)(v446 + 8 * v458 + 4) != (_DWORD)v444)
          {
            v442 = v444;
            ++v441;
          }
          v460 = *((char *)v438 + 1);
          v438 = (uint64_t *)((char *)v438 + 1);
          ++v390;
          if (v460 <= -2)
          {
            do
            {
              v461 = (__clz(__rbit64((((unint64_t)*v438 >> 7) & ~*v438 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v438 = (uint64_t *)((char *)v438 + v461);
              v390 += v461;
            }
            while (*(char *)v438 < -1);
          }
        }
        while (v438 != v440);
        if (!v441)
        {
LABEL_788:
          v489 = 1;
        }
        else
        {
          v462 = 0;
          v463 = 0;
          v464 = 0;
          *(_QWORD *)__x = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          v661 = 0u;
          v662 = 0u;
          v663 = 0;
          v465 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          v466 = v442;
LABEL_606:
          v475 = 0;
          v476 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v466)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v466));
          v477 = (v476 >> 7) ^ (v465 >> 12);
          v478 = 0x101010101010101 * (v476 & 0x7F);
          for (m = v477; ; m = v475 + v480)
          {
            v480 = m & v463;
            v481 = *(_QWORD *)(v465 + v480);
            v482 = ((v481 ^ v478) - 0x101010101010101) & ~(v481 ^ v478) & 0x8080808080808080;
            if (v482)
              break;
LABEL_610:
            if ((v481 & (~v481 << 6) & 0x8080808080808080) != 0)
            {
LABEL_613:
              v484 = 0;
              ++v464;
              while (1)
              {
                v485 = v477 & v463;
                v486 = *(_QWORD *)(v465 + v485);
                v487 = ((v486 ^ v478) - 0x101010101010101) & ~(v486 ^ v478) & 0x8080808080808080;
                if (v487)
                  break;
LABEL_617:
                if ((v486 & (~v486 << 6) & 0x8080808080808080) != 0)
                {
                  v488 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)__x, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v466)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v466)));
                  *(_DWORD *)(v661 + 4 * v488) = v466;
                  goto LABEL_620;
                }
                v484 += 8;
                v477 = v484 + v485;
              }
              while (*(_DWORD *)(v462 + 4 * ((v485 + (__clz(__rbit64(v487)) >> 3)) & v463)) != v466)
              {
                v487 &= v487 - 1;
                if (!v487)
                  goto LABEL_617;
              }
LABEL_620:
              v471 = 0;
              v473 = *(_QWORD *)&v664[8];
              for (n = (v476 >> 7) ^ (*(_QWORD *)v664 >> 12); ; n = v471 + v467)
              {
                v467 = n & v665;
                v468 = *(_QWORD *)(*(_QWORD *)v664 + v467);
                v469 = ((v468 ^ v478) - 0x101010101010101) & ~(v468 ^ v478) & 0x8080808080808080;
                if (v469)
                  break;
LABEL_602:
                if ((v468 & (~v468 << 6) & 0x8080808080808080) != 0)
                {
                  v470 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert((uint64_t *)v664, v476);
                  v473 = *(_QWORD *)&v664[8];
                  v474 = (_DWORD *)(*(_QWORD *)&v664[8] + 8 * v470);
                  *v474 = v466;
                  v474[1] = 0;
                  goto LABEL_605;
                }
                v471 += 8;
              }
              while (1)
              {
                v470 = (v467 + (__clz(__rbit64(v469)) >> 3)) & v665;
                if (*(_DWORD *)(*(_QWORD *)&v664[8] + 8 * v470) == v466)
                  break;
                v469 &= v469 - 1;
                if (!v469)
                  goto LABEL_602;
              }
LABEL_605:
              v466 = *(_DWORD *)(v473 + 8 * v470 + 4);
              v463 = v662;
              v465 = *(_QWORD *)__x;
              v462 = v661;
              goto LABEL_606;
            }
            v475 += 8;
          }
          while (1)
          {
            v483 = (v480 + (__clz(__rbit64(v482)) >> 3)) & v463;
            if (*(_DWORD *)(v462 + 4 * v483) == v466)
              break;
            v482 &= v482 - 1;
            if (!v482)
              goto LABEL_610;
          }
          if (v483 == v463)
            goto LABEL_613;
          v489 = v466 == v442 && v464 == v441;
          if (v463)
          {
            operator delete((void *)v465);
            *(_QWORD *)__x = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
            v663 = 0;
            *(_QWORD *)&v662 = 0;
            v661 = 0uLL;
          }
          if (*((_QWORD *)&v662 + 1))
            absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v662 + 1));
        }
LABEL_818:
        if ((_QWORD)v665)
        {
          operator delete(*(void **)v664);
          *(_QWORD *)v664 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          v666 = 0;
          *(_QWORD *)&v664[16] = 0;
          *(_QWORD *)&v665 = 0;
          *(_QWORD *)&v664[8] = 0;
        }
        if (*((_QWORD *)&v665 + 1))
          absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v665 + 1));
        if ((_QWORD)v656)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          v657 = 0;
          *(_QWORD *)&v656 = 0;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        }
        if (*((_QWORD *)&v656 + 1))
          absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v656 + 1));
        goto LABEL_849;
      }
      v96 = 0;
      while (1)
      {
        v105 = 0;
        if (*(_DWORD *)(v31 + 60) == 15)
          v106 = *(uint64_t **)(v31 + 48);
        else
          v106 = &operations_research::sat::_CircuitConstraintProto_default_instance_;
        v107 = *(int *)(v106[3] + 4 * v96);
        v108 = *(_DWORD *)(v106[6] + 4 * v96);
        v109 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v107)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v107));
        v111 = __p.__r_.__value_.__l.__size_;
        v110 = __p.__r_.__value_.__r.__words[0];
        v112 = __p.__r_.__value_.__r.__words[0] >> 12;
        v113 = (v109 >> 7) ^ (__p.__r_.__value_.__r.__words[0] >> 12);
        v114 = 0x101010101010101 * (v109 & 0x7F);
        v115 = v656;
        while (1)
        {
          v116 = v113 & v656;
          v117 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + v116);
          v118 = ((v117 ^ v114) - 0x101010101010101) & ~(v117 ^ v114) & 0x8080808080808080;
          if (v118)
            break;
LABEL_146:
          if ((v117 & (~v117 << 6) & 0x8080808080808080) != 0)
          {
            v119 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&__p, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v107)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v107)));
            *(_DWORD *)(__p.__r_.__value_.__l.__size_ + 4 * v119) = v107;
            v115 = v656;
            v111 = __p.__r_.__value_.__l.__size_;
            v110 = __p.__r_.__value_.__r.__words[0];
            v112 = __p.__r_.__value_.__r.__words[0] >> 12;
            goto LABEL_149;
          }
          v105 += 8;
          v113 = v105 + v116;
        }
        while (*(_DWORD *)(__p.__r_.__value_.__l.__size_ + 4 * ((v116 + (__clz(__rbit64(v118)) >> 3)) & v656)) != (_DWORD)v107)
        {
          v118 &= v118 - 1;
          if (!v118)
            goto LABEL_146;
        }
LABEL_149:
        v120 = 0;
        v121 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v108)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v108));
        for (ii = v112 ^ (v121 >> 7); ; ii = v120 + v123)
        {
          v123 = ii & v115;
          v124 = *(_QWORD *)(v110 + v123);
          v125 = ((v124 ^ (0x101010101010101 * (v121 & 0x7F))) - 0x101010101010101) & ~(v124 ^ (0x101010101010101
                                                                                                  * (v121 & 0x7F))) & 0x8080808080808080;
          if (v125)
            break;
LABEL_153:
          if ((v124 & (~v124 << 6) & 0x8080808080808080) != 0)
          {
            v126 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&__p, v121);
            *(_DWORD *)(__p.__r_.__value_.__l.__size_ + 4 * v126) = v108;
            goto LABEL_156;
          }
          v120 += 8;
        }
        while (*(_DWORD *)(v111 + 4 * ((v123 + (__clz(__rbit64(v125)) >> 3)) & v115)) != v108)
        {
          v125 &= v125 - 1;
          if (!v125)
            goto LABEL_153;
        }
LABEL_156:
        if (*(_DWORD *)(v31 + 60) == 15)
          v127 = *(uint64_t **)(v31 + 48);
        else
          v127 = &operations_research::sat::_CircuitConstraintProto_default_instance_;
        v128 = *(unsigned int *)(v127[9] + 4 * v96);
        if ((v128 & 0x80000000) != 0)
        {
          if (*((_QWORD *)v652 + ~(_DWORD)v128))
            goto LABEL_138;
        }
        else if (!*((_QWORD *)v652 + v128))
        {
          goto LABEL_138;
        }
        v129 = 0;
        v103 = *(_QWORD *)&v664[8];
        v102 = (v109 >> 7) ^ (*(_QWORD *)v664 >> 12);
        for (jj = v102; ; jj = v129 + v131)
        {
          v131 = jj & v665;
          v132 = *(_QWORD *)(*(_QWORD *)v664 + v131);
          v133 = ((v132 ^ v114) - 0x101010101010101) & ~(v132 ^ v114) & 0x8080808080808080;
          if (v133)
            break;
LABEL_167:
          if ((v132 & (~v132 << 6) & 0x8080808080808080) != 0)
            goto LABEL_170;
          v129 += 8;
        }
        while (1)
        {
          v134 = (v131 + (__clz(__rbit64(v133)) >> 3)) & v665;
          if (*(_DWORD *)(*(_QWORD *)&v664[8] + 8 * v134) == (_DWORD)v107)
            break;
          v133 &= v133 - 1;
          if (!v133)
            goto LABEL_167;
        }
        if (v134 != (_QWORD)v665)
        {
          v489 = 0;
          goto LABEL_818;
        }
LABEL_170:
        for (kk = 0; ; v102 = kk + v97)
        {
          v97 = v102 & v665;
          v98 = *(_QWORD *)(*(_QWORD *)v664 + v97);
          v99 = ((v98 ^ v114) - 0x101010101010101) & ~(v98 ^ v114) & 0x8080808080808080;
          if (v99)
            break;
LABEL_134:
          if ((v98 & (~v98 << 6) & 0x8080808080808080) != 0)
          {
            v100 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert((uint64_t *)v664, v109);
            v103 = *(_QWORD *)&v664[8];
            v104 = (_DWORD *)(*(_QWORD *)&v664[8] + 8 * v100);
            *v104 = v107;
            v104[1] = 0;
            goto LABEL_137;
          }
          kk += 8;
        }
        while (1)
        {
          v100 = (v97 + (__clz(__rbit64(v99)) >> 3)) & v665;
          if (*(_DWORD *)(*(_QWORD *)&v664[8] + 8 * v100) == (_DWORD)v107)
            break;
          v99 &= v99 - 1;
          if (!v99)
            goto LABEL_134;
        }
LABEL_137:
        *(_DWORD *)(v103 + 8 * v100 + 4) = v108;
LABEL_138:
        if (++v96 == v95)
        {
          v390 = (int *)__p.__r_.__value_.__l.__size_;
          v389 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_571;
        }
      }
    case 16:
      v163 = *(_QWORD *)(v31 + 48);
      v164 = *(int *)(v163 + 16);
      if (!(_DWORD)v164)
        goto LABEL_38;
      v165 = *(unsigned int *)(v163 + 40);
      if ((int)v165 < 1)
        goto LABEL_207;
      v166 = 0;
      v167 = *(_QWORD **)(v163 + 48);
      while (1)
      {
        v168 = *(unsigned int **)(v163 + 24);
        v169 = v167;
        v170 = *(unsigned int *)(v163 + 16);
        while (1)
        {
          v172 = *v168++;
          v171 = v172;
          if ((v172 & 0x80000000) != 0)
          {
            if (-*((_QWORD *)v652 + ~(_DWORD)v171) != *v169)
              break;
            goto LABEL_203;
          }
          if (*((_QWORD *)v652 + v171) != *v169)
            break;
LABEL_203:
          ++v169;
          if (!--v170)
          {
            if (!*(_BYTE *)(v163 + 60))
              goto LABEL_38;
            goto LABEL_876;
          }
        }
        v166 += v164;
        v167 += v164;
        if (v166 >= v165)
        {
LABEL_207:
          if (!*(_BYTE *)(v163 + 60))
            goto LABEL_876;
LABEL_38:
          v16 = v648 + 1;
          v17 = a1;
          if (v648 + 1 >= *(int *)(a1 + 48))
            goto LABEL_865;
          goto LABEL_39;
        }
      }
    case 17:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v657 = 0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v656 = 0u;
      v224 = *(uint64_t **)(v31 + 48);
      v225 = *((unsigned int *)v224 + 10);
      if ((int)v225 < 1)
      {
        v388 = 17;
      }
      else
      {
        v226 = 0;
        v227 = 8 * v225;
        do
        {
          if (*(_DWORD *)(v31 + 60) == 17)
          {
            v228 = *(uint64_t **)(v31 + 48);
            v229 = *(_QWORD *)(v228[9] + v226);
          }
          else
          {
            v229 = *(_QWORD *)(qword_25408AEF8 + v226);
            v228 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
          }
          v230 = *(_QWORD *)(v228[6] + v226);
          v231 = *(_QWORD *)(v228[12] + v226);
          *(_QWORD *)v664 = v230;
          *(_QWORD *)&v664[8] = v231;
          v232 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::find_or_prepare_insert<std::pair<long long,long long>>((uint64_t *)&__p, (uint64_t *)v664);
          if (v233)
          {
            v234 = __p.__r_.__value_.__l.__size_ + 24 * v232;
            *(_OWORD *)v234 = *(_OWORD *)v664;
            *(_QWORD *)(v234 + 16) = 0;
          }
          *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 24 * v232 + 16) = v229;
          v226 += 8;
        }
        while (v227 != v226);
        v388 = *(_DWORD *)(v31 + 60);
        v224 = *(uint64_t **)(v31 + 48);
      }
      if (v388 == 17)
        v506 = v224;
      else
        v506 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
      v507 = v506[17];
      v508 = *((unsigned int *)v506 + 28);
      if ((int)v508 < 1)
        goto LABEL_679;
      for (mm = 0; mm != v508; ++mm)
      {
        if (*(_DWORD *)(v31 + 60) == 17)
          v510 = *(uint64_t **)(v31 + 48);
        else
          v510 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
        v511 = *(unsigned int *)(v510[15] + 4 * mm);
        if ((v511 & 0x80000000) != 0)
          v512 = -*((_QWORD *)v652 + ~(_DWORD)v511);
        else
          v512 = *((_QWORD *)v652 + v511);
        v513 = 0;
        *(_QWORD *)v664 = v507;
        *(_QWORD *)&v664[8] = v512;
        v514 = v512
             + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v507)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v507)));
        v515 = ((v514 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v514);
        for (nn = (v515 >> 7) ^ (__p.__r_.__value_.__r.__words[0] >> 12); ; nn = v513 + v517)
        {
          v517 = nn & v656;
          v518 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + v517);
          v519 = ((v518 ^ (0x101010101010101 * (v515 & 0x7F))) - 0x101010101010101) & ~(v518 ^ (0x101010101010101
                                                                                                  * (v515 & 0x7F))) & 0x8080808080808080;
          if (v519)
            break;
LABEL_672:
          if ((v518 & (~v518 << 6) & 0x8080808080808080) != 0)
            goto LABEL_689;
          v513 += 8;
        }
        while (1)
        {
          v520 = (v517 + (__clz(__rbit64(v519)) >> 3)) & v656;
          v521 = (uint64_t *)(__p.__r_.__value_.__l.__size_ + 24 * v520);
          v523 = *v521;
          v522 = v521[1];
          v524 = v523 == v507 && v522 == v512;
          if (v524)
            break;
          v519 &= v519 - 1;
          if (!v519)
            goto LABEL_672;
        }
        if (v520 == (_QWORD)v656)
          goto LABEL_689;
        v525 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::find_or_prepare_insert<std::pair<long long,long long>>((uint64_t *)&__p, (uint64_t *)v664);
        if (v526)
        {
          v527 = __p.__r_.__value_.__l.__size_ + 24 * v525;
          *(_OWORD *)v527 = *(_OWORD *)v664;
          *(_QWORD *)(v527 + 16) = 0;
        }
        v507 = *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 24 * v525 + 16);
      }
      v388 = *(_DWORD *)(v31 + 60);
      v224 = *(uint64_t **)(v31 + 48);
LABEL_679:
      if (v388 != 17)
        v224 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
      v528 = *((int *)v224 + 4);
      if ((_DWORD)v528)
      {
        v529 = (uint64_t *)v224[3];
        v530 = 8 * v528 - 8;
        do
        {
          v531 = *v529++;
          v29 = v507 == v531;
          v532 = v507 == v531 || v530 == 0;
          v530 -= 8;
        }
        while (!v532);
      }
      else
      {
LABEL_689:
        v29 = 0;
      }
      if ((_QWORD)v656)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        v657 = 0;
        *(_QWORD *)&v656 = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      }
      v30 = (_QWORD *)*((_QWORD *)&v656 + 1);
      if (*((_QWORD *)&v656 + 1))
        goto LABEL_36;
      goto LABEL_37;
    case 18:
      v238 = *(_QWORD *)(v31 + 48);
      v239 = *(unsigned int *)(v238 + 16);
      if ((_DWORD)v239 != *(_DWORD *)(v238 + 40))
        goto LABEL_876;
      if ((int)v239 < 1)
        goto LABEL_38;
      v240 = 0;
      v241 = 0;
      while (2)
      {
        v242 = *(unsigned int *)(*(_QWORD *)(v238 + 24) + 4 * v240);
        if ((v242 & 0x80000000) != 0)
        {
          v242 = -*((_QWORD *)v652 + ~(_DWORD)v242);
          if ((v242 & 0x80000000) != 0)
            goto LABEL_304;
        }
        else
        {
          LODWORD(v242) = *((_DWORD *)v652 + 2 * v242);
          if ((v242 & 0x80000000) != 0)
          {
LABEL_304:
            if (v241)
              goto LABEL_38;
            goto LABEL_876;
          }
        }
        if ((int)v239 <= (int)v242)
          goto LABEL_304;
        v243 = *(unsigned int *)(*(_QWORD *)(v238 + 48) + 4 * v242);
        if ((v243 & 0x80000000) != 0)
        {
          if (v240 != -*((_QWORD *)v652 + ~(_DWORD)v243))
            goto LABEL_304;
        }
        else if (v240 != *((_QWORD *)v652 + v243))
        {
          goto LABEL_304;
        }
        v241 = ++v240 >= v239;
        if (v239 == v240)
          goto LABEL_304;
        continue;
      }
    case 19:
      v235 = *(unsigned int **)(v31 + 48);
      v236 = v235[6];
      if ((v236 & 0x80000000) != 0)
        v237 = -*((_QWORD *)v652 + ~(_DWORD)v236);
      else
        v237 = *((_QWORD *)v652 + v236);
      if (v237 < 0)
        goto LABEL_876;
      v533 = v235[4];
      v534 = (v533 & 0x80000000) != 0 ? -*((_QWORD *)v652 + ~(_DWORD)v533) : *((_QWORD *)v652 + v533);
      v578 = v235[5];
      v579 = (v578 & 0x80000000) != 0 ? -*((_QWORD *)v652 + ~(_DWORD)v578) : *((_QWORD *)v652 + v578);
      if (v534 + v237 != v579)
        goto LABEL_876;
      goto LABEL_38;
    case 20:
      v173 = *(_QWORD *)(v31 + 48);
      memset(&__p, 0, sizeof(__p));
      v174 = *(int *)(v173 + 16);
      if (!(_DWORD)v174)
      {
        v175 = 0;
        v177 = 0;
LABEL_643:
        v501 = 126 - 2 * __clz(((char *)v175 - (char *)v177) >> 4);
        if (v175 == v177)
          v502 = 0;
        else
          v502 = v501;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *,false>((uint64_t)v177, v175, (uint64_t)v664, v502, 1);
        v503 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
        {
LABEL_650:
          v489 = 1;
        }
        else
        {
          v504 = 0x8000000000000000;
          v505 = (int64_t *)__p.__r_.__value_.__r.__words[0];
          while (1)
          {
            v489 = *v505 >= v504;
            if (*v505 < v504)
              break;
            v504 = v505[1] + *v505;
            v505 += 2;
            if (v505 == (int64_t *)__p.__r_.__value_.__l.__size_)
              goto LABEL_650;
          }
        }
        if (__p.__r_.__value_.__r.__words[0])
LABEL_848:
          operator delete(v503);
        goto LABEL_849;
      }
      v175 = 0;
      v176 = 0;
      v177 = 0;
      v178 = *(int **)(v173 + 24);
      v179 = &v178[v174];
      while (1)
      {
        v180 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * *v178 + 8);
        v181 = *(int *)(v180 + 16);
        if ((_DWORD)v181)
        {
          v182 = *(unsigned int **)(v180 + 24);
          for (i1 = 4 * v181; i1; i1 -= 4)
          {
            v184 = *v182;
            if ((v184 & 0x80000000) != 0)
            {
              if (*((_QWORD *)v652 + ~(_DWORD)v184))
                goto LABEL_213;
            }
            else if (!*((_QWORD *)v652 + v184))
            {
              goto LABEL_213;
            }
            ++v182;
          }
        }
        if (*(_DWORD *)(v180 + 60) == 19)
        {
          v185 = *(uint64_t **)(v180 + 48);
          v186 = *((unsigned int *)v185 + 4);
          if ((v186 & 0x80000000) != 0)
            goto LABEL_223;
        }
        else
        {
          v185 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          v186 = qword_25408AE50;
          if ((qword_25408AE50 & 0x80000000) != 0)
          {
LABEL_223:
            v187 = v652;
            v188 = -*((_QWORD *)v652 + ~(_DWORD)v186);
            v189 = *((unsigned int *)v185 + 6);
            if ((v189 & 0x80000000) != 0)
              goto LABEL_224;
            goto LABEL_228;
          }
        }
        v187 = v652;
        v188 = *((_QWORD *)v652 + v186);
        v189 = *((unsigned int *)v185 + 6);
        if ((v189 & 0x80000000) != 0)
        {
LABEL_224:
          v190 = -v187[~(_DWORD)v189];
          if ((unint64_t)v175 >= v176)
            goto LABEL_229;
          goto LABEL_211;
        }
LABEL_228:
        v190 = v187[v189];
        if ((unint64_t)v175 >= v176)
        {
LABEL_229:
          v191 = ((char *)v175 - (char *)v177) >> 4;
          v192 = v191 + 1;
          if ((unint64_t)(v191 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v176 - (_QWORD)v177) >> 3 > v192)
            v192 = (uint64_t)(v176 - (_QWORD)v177) >> 3;
          if (v176 - (unint64_t)v177 >= 0x7FFFFFFFFFFFFFF0)
            v193 = 0xFFFFFFFFFFFFFFFLL;
          else
            v193 = v192;
          if (v193)
          {
            if (v193 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v194 = (char *)operator new(16 * v193);
            v195 = (uint64_t *)&v194[16 * v191];
            *v195 = v188;
            v195[1] = v190;
            if (v175 != v177)
            {
LABEL_238:
              v196 = v195;
              do
              {
                v197 = (std::string::size_type)(v196 - 2);
                *((_OWORD *)v196 - 1) = *((_OWORD *)v175 - 1);
                v175 -= 2;
                v196 -= 2;
              }
              while (v175 != v177);
              v176 = (std::string::size_type)&v194[16 * v193];
              v175 = v195 + 2;
              __p.__r_.__value_.__r.__words[0] = v197;
              __p.__r_.__value_.__r.__words[2] = v176;
              if (v177)
LABEL_241:
                operator delete(v177);
LABEL_242:
              v177 = (uint64_t *)v197;
              goto LABEL_212;
            }
          }
          else
          {
            v194 = 0;
            v195 = (uint64_t *)(16 * v191);
            *v195 = v188;
            v195[1] = v190;
            if (v175 != v177)
              goto LABEL_238;
          }
          v197 = (std::string::size_type)v195;
          v176 = (std::string::size_type)&v194[16 * v193];
          v175 = v195 + 2;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v195;
          __p.__r_.__value_.__r.__words[2] = v176;
          if (v177)
            goto LABEL_241;
          goto LABEL_242;
        }
LABEL_211:
        *v175 = v188;
        v175[1] = v190;
        v175 += 2;
LABEL_212:
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v175;
LABEL_213:
        if (++v178 == v179)
          goto LABEL_643;
      }
    case 21:
      v257 = *(_QWORD *)(v31 + 48);
      memset(&__p, 0, sizeof(__p));
      v258 = *(unsigned int *)(v257 + 16);
      *(_DWORD *)v664 = *(_DWORD *)(v257 + 40);
      LODWORD(v650[0]) = v258;
      if (*(_DWORD *)v664 != (_DWORD)v258)
      {
        *(_QWORD *)__x = google::MakeCheckOpString<int,int>((int)v664, (int)v650, "arg.y_intervals_size() == num_intervals");
        if (*(_QWORD *)__x)
        {
          v638 = google::LogMessageFatal::LogMessageFatal((unint64_t *)v664, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 692, (uint64_t **)__x);
          google::LogMessage::stream((google::LogMessage *)v638);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v664);
        }
      }
      if ((int)v258 < 1)
        goto LABEL_38;
      v259 = 0;
      for (i2 = 0; i2 != v258; ++i2)
      {
        v262 = *(_QWORD *)(a1 + 56) + 8;
        v263 = *(_QWORD *)(v262 + 8 * *(int *)(*(_QWORD *)(v257 + 24) + 4 * i2));
        v264 = *(_QWORD *)(v262 + 8 * *(int *)(*(_QWORD *)(v257 + 48) + 4 * i2));
        v265 = *(int *)(v263 + 16);
        if ((_DWORD)v265)
        {
          v266 = *(unsigned int **)(v263 + 24);
          for (i3 = 4 * v265; i3; i3 -= 4)
          {
            v268 = *v266;
            if ((v268 & 0x80000000) != 0)
            {
              if (*((_QWORD *)v652 + ~(_DWORD)v268))
                goto LABEL_324;
            }
            else if (!*((_QWORD *)v652 + v268))
            {
              goto LABEL_324;
            }
            ++v266;
          }
        }
        v269 = *(int *)(v264 + 16);
        if ((_DWORD)v269)
        {
          v270 = *(unsigned int **)(v264 + 24);
          for (i4 = 4 * v269; i4; i4 -= 4)
          {
            v272 = *v270;
            if ((v272 & 0x80000000) != 0)
            {
              if (*((_QWORD *)v652 + ~(_DWORD)v272))
                goto LABEL_324;
            }
            else if (!*((_QWORD *)v652 + v272))
            {
              goto LABEL_324;
            }
            ++v270;
          }
        }
        v273 = *(_DWORD *)(v263 + 60);
        if (!*(_BYTE *)(v257 + 60))
        {
LABEL_356:
          if (v273 == 19)
          {
            v284 = *(uint64_t **)(v263 + 48);
            if (*(_DWORD *)(v264 + 60) != 19)
              goto LABEL_358;
          }
          else
          {
            v284 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v264 + 60) != 19)
            {
LABEL_358:
              v285 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              v286 = __p.__r_.__value_.__r.__words[2];
              if ((unint64_t)v259 >= __p.__r_.__value_.__r.__words[2])
              {
LABEL_362:
                v287 = __p.__r_.__value_.__r.__words[0];
                v288 = (uint64_t)((uint64_t)v259 - __p.__r_.__value_.__r.__words[0]) >> 4;
                v289 = v288 + 1;
                if ((unint64_t)(v288 + 1) >> 60)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v290 = v286 - __p.__r_.__value_.__r.__words[0];
                if (v290 >> 3 > v289)
                  v289 = v290 >> 3;
                if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF0)
                  v291 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v291 = v289;
                if (v291)
                {
                  if (v291 >> 60)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v292 = (char *)operator new(16 * v291);
                  v293 = (uint64_t **)&v292[16 * v288];
                  *v293 = v284;
                  v293[1] = v285;
                  v294 = (uint64_t)v293;
                  if (v259 == (_QWORD *)v287)
                    goto LABEL_375;
                }
                else
                {
                  v292 = 0;
                  v293 = (uint64_t **)(16 * v288);
                  *v293 = v284;
                  v293[1] = v285;
                  v294 = 16 * v288;
                  if (v259 == (_QWORD *)v287)
                    goto LABEL_375;
                }
                do
                {
                  *(_OWORD *)(v294 - 16) = *((_OWORD *)v259 - 1);
                  v294 -= 16;
                  v259 -= 2;
                }
                while (v259 != (_QWORD *)v287);
                v259 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
LABEL_375:
                v261 = (std::string::size_type)(v293 + 2);
                __p.__r_.__value_.__r.__words[0] = v294;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v293 + 2);
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v292[16 * v291];
                if (v259)
                  operator delete(v259);
                goto LABEL_323;
              }
LABEL_322:
              *v259 = v284;
              v259[1] = v285;
              v261 = (std::string::size_type)(v259 + 2);
LABEL_323:
              __p.__r_.__value_.__l.__size_ = v261;
              v259 = (_QWORD *)v261;
              continue;
            }
          }
          v285 = *(uint64_t **)(v264 + 48);
          v286 = __p.__r_.__value_.__r.__words[2];
          if ((unint64_t)v259 >= __p.__r_.__value_.__r.__words[2])
            goto LABEL_362;
          goto LABEL_322;
        }
        if (v273 == 19)
        {
          v274 = *(uint64_t **)(v263 + 48);
          v275 = *((unsigned int *)v274 + 4);
          if ((v275 & 0x80000000) != 0)
            goto LABEL_342;
        }
        else
        {
          v274 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          v275 = qword_25408AE50;
          if ((qword_25408AE50 & 0x80000000) != 0)
          {
LABEL_342:
            v276 = v652;
            v277 = -*((_QWORD *)v652 + ~(_DWORD)v275);
            v278 = *((unsigned int *)v274 + 5);
            if ((v278 & 0x80000000) != 0)
              goto LABEL_343;
            goto LABEL_347;
          }
        }
        v276 = v652;
        v277 = *((_QWORD *)v652 + v275);
        v278 = *((unsigned int *)v274 + 5);
        if ((v278 & 0x80000000) != 0)
        {
LABEL_343:
          if (v277 == -v276[~(_DWORD)v278])
            continue;
          goto LABEL_348;
        }
LABEL_347:
        if (v277 == v276[v278])
          continue;
LABEL_348:
        if (*(_DWORD *)(v264 + 60) == 19)
        {
          v279 = *(uint64_t **)(v264 + 48);
          v280 = *((unsigned int *)v279 + 4);
          if ((v280 & 0x80000000) != 0)
            goto LABEL_350;
        }
        else
        {
          v279 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          v280 = qword_25408AE50;
          if ((qword_25408AE50 & 0x80000000) != 0)
          {
LABEL_350:
            v281 = -v276[~(_DWORD)v280];
            v282 = *((unsigned int *)v279 + 5);
            if ((v282 & 0x80000000) != 0)
              goto LABEL_351;
            goto LABEL_354;
          }
        }
        v281 = v276[v280];
        v282 = *((unsigned int *)v279 + 5);
        if ((v282 & 0x80000000) != 0)
        {
LABEL_351:
          v283 = -v276[~(_DWORD)v282];
          goto LABEL_355;
        }
LABEL_354:
        v283 = v276[v282];
LABEL_355:
        if (v281 != v283)
          goto LABEL_356;
LABEL_324:
        ;
      }
      v351 = (void *)__p.__r_.__value_.__r.__words[0];
      v352 = (uint64_t)v259 - __p.__r_.__value_.__r.__words[0];
      if ((int)(((unint64_t)v259 - __p.__r_.__value_.__r.__words[0]) >> 4) < 1)
      {
        if (__p.__r_.__value_.__r.__words[0])
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_38;
      }
      v353 = 0;
      v354 = 0;
      v355 = (int)(v352 >> 4);
      v356 = ((unint64_t)v352 >> 4);
      v357 = __p.__r_.__value_.__r.__words[0] + 24;
      v358 = 1;
      while (2)
      {
        v359 = v353 + 1;
        if (v353 + 1 < v355)
        {
          v360 = (_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16 * v353);
          v361 = *v360;
          v362 = v360[1];
          v363 = *(unsigned int *)(*v360 + 16);
          v364 = *(unsigned int *)(v361 + 20);
          v365 = ~(_DWORD)v364;
          v366 = ~(_DWORD)v363;
          v367 = v357;
          for (i5 = v358; v356 != i5; ++i5)
          {
            if ((v364 & 0x80000000) != 0)
            {
              v369 = -*((_QWORD *)v652 + v365);
              v370 = *(_QWORD *)(v367 - 8);
              v371 = *(unsigned int *)(v370 + 16);
              if ((v371 & 0x80000000) != 0)
              {
LABEL_441:
                if (v369 <= -*((_QWORD *)v652 + ~(_DWORD)v371))
                  goto LABEL_435;
                goto LABEL_442;
              }
            }
            else
            {
              v369 = *((_QWORD *)v652 + v364);
              v370 = *(_QWORD *)(v367 - 8);
              v371 = *(unsigned int *)(v370 + 16);
              if ((v371 & 0x80000000) != 0)
                goto LABEL_441;
            }
            if (v369 <= *((_QWORD *)v652 + v371))
              goto LABEL_435;
LABEL_442:
            v372 = *(unsigned int *)(v370 + 20);
            if ((v372 & 0x80000000) != 0)
            {
              v373 = -*((_QWORD *)v652 + ~(_DWORD)v372);
              if ((v363 & 0x80000000) != 0)
              {
LABEL_447:
                if (v373 <= -*((_QWORD *)v652 + v366))
                  goto LABEL_435;
                goto LABEL_448;
              }
            }
            else
            {
              v373 = *((_QWORD *)v652 + v372);
              if ((v363 & 0x80000000) != 0)
                goto LABEL_447;
            }
            if (v373 <= *((_QWORD *)v652 + v363))
              goto LABEL_435;
LABEL_448:
            v374 = *(unsigned int *)(v362 + 20);
            if ((v374 & 0x80000000) != 0)
            {
              v375 = -*((_QWORD *)v652 + ~(_DWORD)v374);
              v376 = *(_QWORD *)v367;
              v377 = *(unsigned int *)(*(_QWORD *)v367 + 16);
              if ((v377 & 0x80000000) != 0)
              {
LABEL_453:
                if (v375 <= -*((_QWORD *)v652 + ~(_DWORD)v377))
                  goto LABEL_435;
                goto LABEL_454;
              }
            }
            else
            {
              v375 = *((_QWORD *)v652 + v374);
              v376 = *(_QWORD *)v367;
              v377 = *(unsigned int *)(*(_QWORD *)v367 + 16);
              if ((v377 & 0x80000000) != 0)
                goto LABEL_453;
            }
            if (v375 <= *((_QWORD *)v652 + v377))
              goto LABEL_435;
LABEL_454:
            v378 = *(unsigned int *)(v376 + 20);
            if ((v378 & 0x80000000) != 0)
            {
              v379 = -*((_QWORD *)v652 + ~(_DWORD)v378);
              v380 = *(unsigned int *)(v362 + 16);
              if ((v380 & 0x80000000) != 0)
              {
LABEL_459:
                if (v379 <= -*((_QWORD *)v652 + ~(_DWORD)v380))
                  goto LABEL_435;
                goto LABEL_460;
              }
            }
            else
            {
              v379 = *((_QWORD *)v652 + v378);
              v380 = *(unsigned int *)(v362 + 16);
              if ((v380 & 0x80000000) != 0)
                goto LABEL_459;
            }
            if (v379 <= *((_QWORD *)v652 + v380))
              goto LABEL_435;
LABEL_460:
            if ((v363 & 0x80000000) != 0)
            {
              v381 = -*((_QWORD *)v652 + v366);
              if ((v364 & 0x80000000) != 0)
              {
LABEL_465:
                if (v381 == -*((_QWORD *)v652 + v365))
                  goto LABEL_435;
                goto LABEL_466;
              }
            }
            else
            {
              v381 = *((_QWORD *)v652 + v363);
              if ((v364 & 0x80000000) != 0)
                goto LABEL_465;
            }
            if (v381 == *((_QWORD *)v652 + v364))
              goto LABEL_435;
LABEL_466:
            if ((v371 & 0x80000000) != 0)
            {
              v382 = -*((_QWORD *)v652 + ~(_DWORD)v371);
              if ((v372 & 0x80000000) != 0)
              {
LABEL_471:
                if (v382 == -*((_QWORD *)v652 + ~(_DWORD)v372))
                  goto LABEL_435;
                goto LABEL_472;
              }
            }
            else
            {
              v382 = *((_QWORD *)v652 + v371);
              if ((v372 & 0x80000000) != 0)
                goto LABEL_471;
            }
            if (v382 == *((_QWORD *)v652 + v372))
              goto LABEL_435;
LABEL_472:
            if ((v380 & 0x80000000) != 0)
            {
              v383 = -*((_QWORD *)v652 + ~(_DWORD)v380);
              if ((v374 & 0x80000000) == 0)
              {
LABEL_474:
                if (v383 == *((_QWORD *)v652 + v374))
                  goto LABEL_435;
                goto LABEL_478;
              }
            }
            else
            {
              v383 = *((_QWORD *)v652 + v380);
              if ((v374 & 0x80000000) == 0)
                goto LABEL_474;
            }
            if (v383 == -*((_QWORD *)v652 + ~(_DWORD)v374))
              goto LABEL_435;
LABEL_478:
            if ((v377 & 0x80000000) != 0)
              v384 = -*((_QWORD *)v652 + ~(_DWORD)v377);
            else
              v384 = *((_QWORD *)v652 + v377);
            if ((v378 & 0x80000000) != 0)
            {
              if (v384 != -*((_QWORD *)v652 + ~(_DWORD)v378))
                goto LABEL_483;
            }
            else if (v384 != *((_QWORD *)v652 + v378))
            {
LABEL_483:
              if (*off_254079370[0] >= 1
                && (off_254079370[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_254079370, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
              {
                v385 = google::LogMessage::LogMessage((google::LogMessage *)v664, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 714);
                v386 = (_QWORD *)google::LogMessage::stream(v385);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)"Interval ", 9);
                v387 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v387, (uint64_t)"(x=[", 4);
                v590 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v590, (uint64_t)", ", 2);
                v591 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v591, (uint64_t)"], y=[", 6);
                v592 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v592, (uint64_t)", ", 2);
                v593 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v593, (uint64_t)"]) and ", 7);
                v594 = (_QWORD *)std::ostream::operator<<();
                v595 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v594, (uint64_t)"(", 1);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v595, (uint64_t)"(x=[", 4);
                v596 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v596, (uint64_t)", ", 2);
                v597 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v597, (uint64_t)"], y=[", 6);
                v598 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v598, (uint64_t)", ", 2);
                v599 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v599, (uint64_t)"]) are not disjoint.", 20);
                google::LogMessage::~LogMessage((google::LogMessage *)v664);
                operator delete(v351);
                if (!v354)
                  goto LABEL_876;
                goto LABEL_38;
              }
LABEL_786:
              operator delete(v351);
              if (v354)
                goto LABEL_38;
              goto LABEL_876;
            }
LABEL_435:
            v367 += 16;
          }
        }
        v354 = v359 >= v355;
        ++v358;
        v357 += 16;
        ++v353;
        if (v359 != v356)
          continue;
        break;
      }
      if (__p.__r_.__value_.__r.__words[0])
        goto LABEL_786;
      if (v359 >= v355)
        goto LABEL_38;
LABEL_876:
      if (*off_254079360[0] >= 1
        && (off_254079360[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079360, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
      {
        v606 = google::LogMessage::LogMessage((google::LogMessage *)v664, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 1090);
        v607 = (_QWORD *)google::LogMessage::stream(v606);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v607, (uint64_t)"Failing constraint #", 20);
        v608 = (_QWORD *)std::ostream::operator<<();
        v609 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v608, (uint64_t)" : ", 3);
        google::protobuf::Message::ShortDebugString(*(google::protobuf::Message **)(*(_QWORD *)(a1 + 56) + 8 * v648 + 8), (uint64_t)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v610 = &__p;
        else
          v610 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v611 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v611 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v609, (uint64_t)v610, v611);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        google::LogMessage::~LogMessage((google::LogMessage *)v664);
      }
      v27 = 0;
      if (a3 && a4)
      {
        v612 = *(int *)(a3 + 24);
        memset(&__p, 0, sizeof(__p));
        if ((_DWORD)v612)
        {
          if ((v612 & 0x80000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)operator new(8 * (((v612 - 1) >> 6) + 1));
          __p.__r_.__value_.__r.__words[2] = ((v612 - 1) >> 6) + 1;
          std::vector<BOOL>::__construct_at_end[abi:ne180100](&__p, v612, 0);
        }
        v613 = *a4;
        v614 = a4[1];
        if (*a4 != v614)
        {
          v615 = __p.__r_.__value_.__r.__words[0];
          do
          {
            v616 = *v613++;
            *(_QWORD *)(v615 + ((v616 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v616;
          }
          while (v613 != v614);
        }
        operations_research::sat::UsedVariables(*(operations_research::sat **)(*(_QWORD *)(a1 + 56) + 8 * v648 + 8), v664);
        v618 = *(_QWORD *)&v664[8];
        v617 = *(void **)v664;
        if (*(_QWORD *)v664 != *(_QWORD *)&v664[8])
        {
          v619 = off_254079368[0];
          if (*off_254079368[0] >= 1)
          {
            v620 = *(_QWORD *)v664 + 4;
LABEL_900:
            v621 = *(int *)(v620 - 4);
            if (v619 != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_254079368, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v651, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 1096);
              v622 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v651);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v622, (uint64_t)"var: ", 5);
              v623 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v623, (uint64_t)" value: ", 8);
              v624 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v624, (uint64_t)" was_fixed: ", 12);
              v625 = (_QWORD *)std::ostream::operator<<();
              v626 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v625, (uint64_t)" initial_domain: ", 17);
              v627 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v621 + 8);
              operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v627 + 24), *(int *)(v627 + 16), (unint64_t *)__x, v628);
              v629 = operations_research::operator<<(v626, (unint64_t *)__x);
              v630 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v629, (uint64_t)" postsolved_domain: ", 20);
              v631 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8 * v621 + 8);
              operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v631 + 24), *(int *)(v631 + 16), v650, v632);
              operations_research::operator<<(v630, v650);
              if ((v650[0] & 1) != 0)
                operator delete((void *)v650[1]);
              if ((__x[0] & 1) != 0)
                operator delete((void *)v661);
              google::LogMessage::~LogMessage((google::LogMessage *)v651);
            }
            while (v620 != v618)
            {
              v619 = off_254079368[0];
              v620 += 4;
              if (*off_254079368[0] >= 1)
                goto LABEL_900;
            }
            v617 = *(void **)v664;
          }
        }
        if (v617)
        {
          *(_QWORD *)&v664[8] = v617;
          operator delete(v617);
        }
        if (__p.__r_.__value_.__r.__words[0])
          operator delete(__p.__r_.__value_.__l.__data_);
        v27 = 0;
      }
LABEL_914:
      if (v652)
        operator delete(v652);
      return v27;
    case 22:
      v91 = *(_QWORD *)(v31 + 48);
      v92 = *(unsigned int *)(v91 + 60);
      v93 = v652;
      if ((v92 & 0x80000000) != 0)
        v94 = -*((_QWORD *)v652 + ~(_DWORD)v92);
      else
        v94 = *((_QWORD *)v652 + v92);
      v645 = v94;
      v402 = *(unsigned int *)(v91 + 16);
      *(_QWORD *)v664 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)&v664[8] = 0u;
      v665 = 0u;
      v666 = 0;
      if ((int)v402 < 1)
      {
        v29 = 1;
        if (!(_QWORD)v665)
          goto LABEL_566;
        goto LABEL_565;
      }
      v403 = 0;
      v404 = 0;
      v640 = v402;
      while (1)
      {
        if (*(_DWORD *)(v31 + 60) == 22)
          v405 = *(uint64_t **)(v31 + 48);
        else
          v405 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
        operations_research::sat::ConstraintProto::ConstraintProto((operations_research::sat::ConstraintProto *)&__p, *(const operations_research::sat::ConstraintProto **)(*(_QWORD *)(a1 + 56)+ 8 * *(int *)(v405[3] + 4 * v403)+ 8));
        if (LODWORD(__p.__r_.__value_.__r.__words[2]))
        {
          v406 = (unsigned int *)v656;
          for (i6 = 4 * SLODWORD(__p.__r_.__value_.__r.__words[2]); i6; i6 -= 4)
          {
            v408 = *v406;
            if ((v408 & 0x80000000) != 0)
            {
              if (v93[~(_DWORD)v408])
                goto LABEL_521;
            }
            else if (!v93[v408])
            {
              goto LABEL_521;
            }
            ++v406;
          }
        }
        if (v659 == 19)
          v409 = v658;
        else
          v409 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        v410 = *((unsigned int *)v409 + 4);
        if ((v410 & 0x80000000) != 0)
        {
          v411 = -v93[~(_DWORD)v410];
          v412 = *((unsigned int *)v409 + 6);
          if ((v412 & 0x80000000) != 0)
          {
LABEL_539:
            v413 = -v93[~(_DWORD)v412];
            goto LABEL_540;
          }
        }
        else
        {
          v411 = v93[v410];
          v412 = *((unsigned int *)v409 + 6);
          if ((v412 & 0x80000000) != 0)
            goto LABEL_539;
        }
        v413 = v93[v412];
LABEL_540:
        if (*(_DWORD *)(v31 + 60) == 22)
          v414 = *(uint64_t **)(v31 + 48);
        else
          v414 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
        v415 = *(unsigned int *)(v414[6] + 4 * v403);
        v642 = v404;
        if ((v415 & 0x80000000) != 0)
        {
          v416 = -v93[~(_DWORD)v415];
          v417 = v413 + v411;
          if (v413 >= 1)
            goto LABEL_547;
        }
        else
        {
          v416 = v93[v415];
          v417 = v413 + v411;
          if (v413 >= 1)
          {
LABEL_547:
            while (1)
            {
              v418 = 0;
              v419 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v411)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v411));
              v421 = *(_QWORD *)&v664[8];
              v420 = *(_QWORD *)v664;
              v422 = (v419 >> 7) ^ (*(_QWORD *)v664 >> 12);
              v423 = v665;
              v424 = 0x101010101010101 * (v419 & 0x7F);
              for (i7 = v422; ; i7 = v418 + v426)
              {
                v426 = i7 & v665;
                v427 = *(_QWORD *)(*(_QWORD *)v664 + v426);
                v428 = ((v427 ^ v424) - 0x101010101010101) & ~(v427 ^ v424) & 0x8080808080808080;
                if (v428)
                  break;
LABEL_551:
                if ((v427 & (~v427 << 6) & 0x8080808080808080) != 0)
                {
                  v429 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::prepare_insert((uint64_t *)v664, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v411)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v411)));
                  v421 = *(_QWORD *)&v664[8];
                  v430 = (_QWORD *)(*(_QWORD *)&v664[8] + 16 * v429);
                  *v430 = v411;
                  v430[1] = 0;
                  v420 = *(_QWORD *)v664;
                  v423 = v665;
                  v422 = (v419 >> 7) ^ (*(_QWORD *)v664 >> 12);
                  goto LABEL_554;
                }
                v418 += 8;
              }
              while (1)
              {
                v429 = (v426 + (__clz(__rbit64(v428)) >> 3)) & v665;
                if (*(_QWORD *)(*(_QWORD *)&v664[8] + 16 * v429) == v411)
                  break;
                v428 &= v428 - 1;
                if (!v428)
                  goto LABEL_551;
              }
LABEL_554:
              v431 = 0;
              *(_QWORD *)(v421 + 16 * v429 + 8) += v416;
              v432 = *(_QWORD *)&v664[8];
              while (1)
              {
                v433 = v422 & v423;
                v434 = *(_QWORD *)(v420 + v433);
                v435 = ((v434 ^ v424) - 0x101010101010101) & ~(v434 ^ v424) & 0x8080808080808080;
                if (v435)
                  break;
LABEL_558:
                if ((v434 & (~v434 << 6) & 0x8080808080808080) != 0)
                {
                  v436 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::prepare_insert((uint64_t *)v664, v419);
                  v432 = *(_QWORD *)&v664[8];
                  v437 = (_QWORD *)(*(_QWORD *)&v664[8] + 16 * v436);
                  *v437 = v411;
                  v437[1] = 0;
                  goto LABEL_561;
                }
                v431 += 8;
                v422 = v431 + v433;
              }
              while (1)
              {
                v436 = (v433 + (__clz(__rbit64(v435)) >> 3)) & v423;
                if (*(_QWORD *)(*(_QWORD *)&v664[8] + 16 * v436) == v411)
                  break;
                v435 &= v435 - 1;
                if (!v435)
                  goto LABEL_558;
              }
LABEL_561:
              if (*(_QWORD *)(v432 + 16 * v436 + 8) > v645)
                break;
              if (++v411 >= v417)
                goto LABEL_520;
            }
            operations_research::sat::ConstraintProto::~ConstraintProto((operations_research::sat::ConstraintProto *)&__p);
            v29 = v642;
            if (!(_QWORD)v665)
              goto LABEL_566;
            goto LABEL_565;
          }
        }
LABEL_520:
        v402 = v640;
LABEL_521:
        operations_research::sat::ConstraintProto::~ConstraintProto((operations_research::sat::ConstraintProto *)&__p);
        v404 = ++v403 >= v402;
        if (v403 == v402)
        {
          v29 = 1;
          if (!(_QWORD)v665)
          {
LABEL_566:
            v30 = (_QWORD *)*((_QWORD *)&v665 + 1);
            if (*((_QWORD *)&v665 + 1))
              goto LABEL_36;
            goto LABEL_37;
          }
LABEL_565:
          operator delete(*(void **)v664);
          *(_QWORD *)v664 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          v666 = 0;
          *(_QWORD *)&v664[16] = 0;
          *(_QWORD *)&v665 = 0;
          *(_QWORD *)&v664[8] = 0;
          goto LABEL_566;
        }
      }
    case 23:
      v51 = *(unsigned int *)(*(_QWORD *)(v31 + 48) + 16);
      memset(&__p, 0, sizeof(__p));
      memset(v664, 0, sizeof(v664));
      if ((int)v51 <= 0)
        goto LABEL_38;
      v52 = 0;
      v641 = 0;
      v643 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      LODWORD(v56) = 0;
      while (1)
      {
        v57 = *(_DWORD *)(v31 + 60);
        v58 = *(uint64_t **)(v31 + 48);
        if (v57 == 23)
          v59 = *(uint64_t **)(v31 + 48);
        else
          v59 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
        v60 = *(int *)(v59[3] + 4 * v53);
        v61 = *(_DWORD *)(v59[6] + 4 * v53);
        if ((int)v56 <= (int)v60 + 1)
          v62 = v60 + 1;
        else
          v62 = v56;
        if ((int)v62 <= v61 + 1)
          v56 = (v61 + 1);
        else
          v56 = v62;
        __x[0] = -1;
        v63 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v56 <= v63)
        {
          if (v56 < v63)
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0] + 4 * v56;
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)&__p, v56 - v63, __x);
          v57 = *(_DWORD *)(v31 + 60);
          v58 = *(uint64_t **)(v31 + 48);
        }
        if (v57 == 23)
          v64 = v58;
        else
          v64 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
        v65 = *(unsigned int *)(v64[9] + 4 * v53);
        if ((v65 & 0x80000000) != 0)
        {
          if (!*((_QWORD *)v652 + ~(_DWORD)v65))
            goto LABEL_85;
        }
        else if (*((_QWORD *)v652 + v65))
        {
LABEL_85:
          if ((_DWORD)v60 == v61)
          {
            if (!(_DWORD)v60)
              goto LABEL_809;
            v55 = (v55 + 1);
            goto LABEL_66;
          }
          ++v54;
          if ((_DWORD)v60)
          {
            if (*(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4 * v60) != -1)
            {
LABEL_809:
              v489 = 0;
              v391 = *(void **)v664;
              goto LABEL_844;
            }
            *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4 * v60) = v61;
            goto LABEL_66;
          }
          if (v643 < v641)
          {
            *(_DWORD *)v643 = v61;
            v66 = v643 + 4;
LABEL_116:
            *(_QWORD *)&v664[8] = v66;
            v643 = v66;
            goto LABEL_66;
          }
          v639 = v55;
          v67 = (v643 - v52) >> 2;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if ((v641 - v52) >> 1 > v68)
            v68 = (v641 - v52) >> 1;
          if ((unint64_t)(v641 - v52) >= 0x7FFFFFFFFFFFFFFCLL)
            v69 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v69 = v68;
          if (v69)
          {
            if (v69 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v70 = v69;
            v71 = operator new(4 * v69);
            v69 = v70;
          }
          else
          {
            v71 = 0;
          }
          v72 = &v71[4 * v67];
          *(_DWORD *)v72 = v61;
          v66 = v72 + 4;
          if (v643 == v52)
          {
            v55 = v639;
          }
          else
          {
            v73 = v643 - 4 - v52;
            if (v73 < 0xBC)
            {
              v74 = v643;
              goto LABEL_111;
            }
            if (&v71[v643 - v52 - 4 - (v73 & 0xFFFFFFFFFFFFFFFCLL)] <= &v71[v643 - v52 - 4]
              && &v643[-(v73 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v643 - 4
              && (unint64_t)(v52 - v71) >= 0x20)
            {
              v76 = (v73 >> 2) + 1;
              v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
              v74 = &v643[-v77];
              v72 -= v77;
              v78 = &v71[4 * v67 - 16];
              v79 = v643 - 16;
              v80 = v76 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v81 = *(_OWORD *)v79;
                *(v78 - 1) = *((_OWORD *)v79 - 1);
                *v78 = v81;
                v78 -= 2;
                v79 -= 32;
                v80 -= 8;
              }
              while (v80);
              v55 = v639;
              if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_112;
            }
            else
            {
              v74 = v643;
LABEL_111:
              v55 = v639;
              do
              {
LABEL_112:
                v75 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v72 - 1) = v75;
                v72 -= 4;
              }
              while (v74 != v52);
            }
          }
          *(_QWORD *)v664 = v72;
          *(_QWORD *)&v664[8] = v66;
          v641 = &v71[4 * v69];
          *(_QWORD *)&v664[16] = v641;
          if (v52)
            operator delete(v52);
          v52 = v72;
          goto LABEL_116;
        }
LABEL_66:
        if (++v53 == v51)
        {
          v391 = *(void **)v664;
          if (!(_DWORD)v56)
            goto LABEL_831;
          if (*(char **)v664 == v643)
          {
            v392 = 0;
          }
          else
          {
            v392 = 0;
            v393 = *(char **)v664;
            do
            {
              v394 = *(_DWORD *)v393;
              ++v392;
              while (v394)
              {
                v394 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4 * v394);
                ++v392;
                if (v394 == -1)
                  goto LABEL_843;
              }
              v393 += 4;
            }
            while (v393 != v643);
          }
          if (v392 == v54)
          {
            if ((int)v55 + (uint64_t)v54 - ((uint64_t)&v643[-*(_QWORD *)v664] >> 2) + 1 == v56)
            {
LABEL_831:
              v489 = 1;
              goto LABEL_844;
            }
            if (*off_254079380[0] >= 1
              && (off_254079380[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_254079380, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
            {
              v587 = google::LogMessage::LogMessage((google::LogMessage *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 893);
              v588 = (_QWORD *)google::LogMessage::stream(v587);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v588, (uint64_t)"Not all nodes are covered!", 26);
LABEL_842:
              google::LogMessage::~LogMessage((google::LogMessage *)__x);
            }
          }
          else if (*off_254079378[0] >= 1
                 && (off_254079378[0] != &google::kLogSiteUninitialized
                  || google::InitVLOG3__((google *)off_254079378, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
          {
            v584 = google::LogMessage::LogMessage((google::LogMessage *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 884);
            v585 = (_QWORD *)google::LogMessage::stream(v584);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v585, (uint64_t)"count: ", 7);
            v586 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v586, (uint64_t)" != num_used_arcs:", 18);
            std::ostream::operator<<();
            goto LABEL_842;
          }
LABEL_843:
          v489 = 0;
LABEL_844:
          if (v391)
            operator delete(v391);
          v503 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            goto LABEL_848;
          }
LABEL_849:
          if (v489)
            goto LABEL_38;
          goto LABEL_876;
        }
      }
    case 24:
      v198 = *(_QWORD *)(v31 + 48);
      v199 = *(unsigned int *)(v198 + 16);
      v201 = *(_QWORD *)(v198 + 88);
      v200 = *(_QWORD *)(v198 + 96);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      v202 = operator new(0x30uLL);
      *(_QWORD *)v202 = 0;
      *((_QWORD *)v202 + 1) = 0;
      *((_QWORD *)v202 + 2) = &__p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v202;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v202;
      *((_BYTE *)v202 + 24) = 1;
      __p.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v202 + 4) = 0;
      *((_QWORD *)v202 + 5) = 0;
      if (*(_DWORD *)(v31 + 60) == 24)
        v203 = *(uint64_t **)(v31 + 48);
      else
        v203 = &operations_research::sat::_ReservoirConstraintProto_default_instance_;
      if ((int)v199 < 1)
        goto LABEL_790;
      v644 = v201;
      v204 = 0;
      v205 = *((_DWORD *)v203 + 16);
      break;
    case 25:
      v318 = *(_QWORD *)(v31 + 48);
      v319 = *(int *)(v318 + 16);
      memset(&__p, 0, sizeof(__p));
      if ((_DWORD)v319)
      {
        if ((v319 & 0x80000000) != 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v320 = (v319 - 1) >> 6;
        v321 = 8 * (v320 + 1);
        v322 = operator new(v321);
        v323 = v322;
        __p.__r_.__value_.__l.__size_ = v319;
        __p.__r_.__value_.__r.__words[2] = v320 + 1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
        if (v319 >= 0x41)
          v324 = (v319 - 1) >> 6;
        else
          v324 = 0;
        v322[v324] = 0;
        v325 = v319 >> 6;
        if (v319 >= 0x40)
          bzero(v322, 8 * (v319 >> 6));
        v326 = v319 & 0x3F;
        if ((v319 & 0x3F) != 0)
          v323[v325] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v326);
        v327 = operator new(v321);
        v328 = v327;
        v327[v324] = 0;
        if (v319 >= 0x40)
          bzero(v327, 8 * (v319 >> 6));
        if ((v319 & 0x3F) != 0)
          v328[v325] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v326);
        v329 = *(_DWORD *)(v31 + 60);
        v318 = *(_QWORD *)(v31 + 48);
      }
      else
      {
        v328 = 0;
        v323 = 0;
        v329 = 25;
      }
      if (v329 == 25)
        v550 = (uint64_t *)v318;
      else
        v550 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
      v551 = (uint64_t *)v550[6];
      v552 = *((_DWORD *)v550 + 10);
      v553 = v552;
      if (v552)
      {
        v554 = 8 * v552;
        v555 = (uint64_t *)v550[6];
        do
        {
          v556 = *v555++;
          *(_QWORD *)((char *)v323 + (((unint64_t)(int)v556 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v556;
          v554 -= 8;
        }
        while (v554);
      }
      memset(v664, 0, sizeof(v664));
      if ((_DWORD)v319)
      {
        if ((v319 & 0x80000000) != 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v557 = (char *)operator new(4 * v319);
        *(_QWORD *)v664 = v557;
        *(_QWORD *)&v664[8] = v557;
        *(_QWORD *)&v664[16] = &v557[4 * v319];
        memset(v557, 255, 4 * v319);
        v551 = (uint64_t *)v550[6];
        v552 = *((_DWORD *)v550 + 10);
        v553 = v552;
      }
      else
      {
        v557 = 0;
      }
      if (!v552)
        goto LABEL_769;
      v558 = &v551[v553];
      v559 = v652;
      while (1)
      {
        v560 = *v551;
        v561 = ((unint64_t)(int)*v551 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(_QWORD *)((char *)v328 + v561) |= 1 << *v551;
        v562 = *(uint64_t **)(v31 + 48);
        if (v329 != 25)
          v562 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
        v563 = *(unsigned int *)(v562[3] + 4 * (int)v560);
        if ((v563 & 0x80000000) != 0)
        {
          v564 = -v559[~(_DWORD)v563];
          if ((_DWORD)v564 != (_DWORD)v560)
          {
LABEL_754:
            if (*(_DWORD *)(v31 + 60) == 25)
            {
              while (1)
              {
                v565 = (int)v564;
                v566 = (unint64_t)(int)v564 >> 6;
                v567 = 1 << v564;
                if ((v567 & v323[v566]) != 0)
                  break;
                v568 = v328[v566];
                if ((v568 & v567) != 0)
                  goto LABEL_916;
                v328[v566] = v568 | v567;
                v569 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v31 + 48) + 24) + 4 * v565);
                if ((v569 & 0x80000000) != 0)
                {
                  v564 = -v559[~(_DWORD)v569];
                  if ((_DWORD)v564 == (_DWORD)v560)
                    goto LABEL_747;
                }
                else
                {
                  v564 = v559[v569];
                  if ((_DWORD)v564 == (_DWORD)v560)
                    goto LABEL_747;
                }
              }
            }
            else
            {
              while (1)
              {
                v570 = (int)v564;
                v571 = (unint64_t)(int)v564 >> 6;
                v572 = 1 << v564;
                if ((v572 & v323[v571]) != 0)
                  break;
                v573 = v328[v571];
                if ((v573 & v572) != 0)
                {
LABEL_916:
                  v633 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 917);
                  v634 = (_QWORD *)google::LogMessage::stream(v633);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v634, (uint64_t)"Check failed: !visited[node] ", 29);
                  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__x);
                }
                v328[v571] = v573 | v572;
                v574 = *(unsigned int *)(qword_25408B0F0 + 4 * v570);
                if ((v574 & 0x80000000) != 0)
                {
                  v564 = -v559[~(_DWORD)v574];
                  if ((_DWORD)v564 == (_DWORD)v560)
                    goto LABEL_747;
                }
                else
                {
                  v564 = v559[v574];
                  if ((_DWORD)v564 == (_DWORD)v560)
                    goto LABEL_747;
                }
              }
            }
            v29 = 0;
LABEL_811:
            if (v557)
              operator delete(v557);
            if (v328)
              operator delete(v328);
            if (v323)
              operator delete(v323);
            goto LABEL_37;
          }
        }
        else
        {
          v564 = v559[v563];
          if ((_DWORD)v564 != (_DWORD)v560)
            goto LABEL_754;
        }
LABEL_747:
        if (++v551 == v558)
        {
LABEL_769:
          if ((int)v319 >= 1)
          {
            v575 = 0;
            v29 = 0;
            if (*(_DWORD *)(v31 + 60) == 25)
              v576 = *(uint64_t **)(v31 + 48);
            else
              v576 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
            while (1)
            {
              if (((*(_QWORD *)((char *)v328 + ((v575 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v575) & 1) == 0)
              {
                v577 = *(unsigned int *)(v576[3] + 4 * v575);
                if ((v577 & 0x80000000) != 0)
                {
                  if (v575 != -*((_QWORD *)v652 + ~(_DWORD)v577))
                    goto LABEL_811;
                }
                else if (v575 != *((_QWORD *)v652 + v577))
                {
                  goto LABEL_811;
                }
              }
              v29 = (uint64_t)++v575 >= (uint64_t)v319;
              if (v319 == v575)
                goto LABEL_811;
            }
          }
          v29 = 1;
          goto LABEL_811;
        }
      }
    case 26:
      v42 = *(_QWORD *)(v31 + 48);
      v43 = *(int *)(v42 + 16);
      if (!(_DWORD)v43)
        goto LABEL_38;
      v44 = 0;
      v45 = *(unsigned int **)(v42 + 24);
      v46 = 4 * v43;
      while (1)
      {
        v47 = *v45;
        if ((v47 & 0x80000000) != 0)
        {
          v44 += *((_QWORD *)v652 + ~(_DWORD)v47) == 0;
          ++v45;
          v46 -= 4;
          if (!v46)
            goto LABEL_59;
        }
        else
        {
          v44 += *((_QWORD *)v652 + v47) != 0;
          ++v45;
          v46 -= 4;
          if (!v46)
          {
LABEL_59:
            if (v44 >= 2)
              goto LABEL_876;
            goto LABEL_38;
          }
        }
      }
    case 27:
      v295 = *(_QWORD *)(v31 + 48);
      if (*(_QWORD *)(v295 + 40))
        v296 = *(uint64_t **)(v295 + 40);
      else
        v296 = &operations_research::sat::_LinearExpressionProto_default_instance_;
      v297 = v296[8];
      v298 = *((unsigned int *)v296 + 4);
      if ((int)v298 < 1)
        goto LABEL_385;
      v299 = (unsigned int *)v296[3];
      v300 = (uint64_t *)v296[6];
      do
      {
        while (1)
        {
          v303 = *v299++;
          v302 = v303;
          if ((v303 & 0x80000000) == 0)
            break;
          v301 = *v300++;
          v297 += v301 * -*((_QWORD *)v652 + ~(_DWORD)v302);
          if (!--v298)
            goto LABEL_385;
        }
        v304 = *v300++;
        v297 += v304 * *((_QWORD *)v652 + v302);
        --v298;
      }
      while (v298);
LABEL_385:
      v305 = *(unsigned int *)(v295 + 24);
      if ((int)v305 < 1)
      {
        v308 = 0x8000000000000000;
      }
      else
      {
        v306 = 0;
        v307 = *(_QWORD *)(v295 + 32);
        v308 = 0x8000000000000000;
        do
        {
          v309 = *(_QWORD *)(v307 + 8 * v306 + 8);
          v310 = *(_QWORD *)(v309 + 64);
          v311 = *(unsigned int *)(v309 + 16);
          if ((int)v311 >= 1)
          {
            v312 = *(unsigned int **)(v309 + 24);
            v313 = *(uint64_t **)(v309 + 48);
            do
            {
              while (1)
              {
                v316 = *v312++;
                v315 = v316;
                if ((v316 & 0x80000000) == 0)
                  break;
                v314 = *v313++;
                v310 += v314 * -*((_QWORD *)v652 + ~(_DWORD)v315);
                if (!--v311)
                  goto LABEL_387;
              }
              v317 = *v313++;
              v310 += v317 * *((_QWORD *)v652 + v315);
              --v311;
            }
            while (v311);
          }
LABEL_387:
          if (v308 <= v310)
            v308 = v310;
          ++v306;
        }
        while (v306 != v305);
      }
      goto LABEL_742;
    case 28:
      v330 = *(_QWORD *)(v31 + 48);
      if (*(_QWORD *)(v330 + 40))
        v331 = *(uint64_t **)(v330 + 40);
      else
        v331 = &operations_research::sat::_LinearExpressionProto_default_instance_;
      v297 = v331[8];
      v332 = *((unsigned int *)v331 + 4);
      if ((int)v332 < 1)
        goto LABEL_418;
      v333 = (unsigned int *)v331[3];
      v334 = (uint64_t *)v331[6];
      while (1)
      {
        v337 = *v333++;
        v336 = v337;
        if ((v337 & 0x80000000) != 0)
        {
          v335 = *v334++;
          v297 += v335 * -*((_QWORD *)v652 + ~(_DWORD)v336);
          if (!--v332)
            goto LABEL_418;
        }
        else
        {
          v338 = *v334++;
          v297 += v338 * *((_QWORD *)v652 + v336);
          if (!--v332)
          {
LABEL_418:
            v339 = *(unsigned int *)(v330 + 24);
            if ((int)v339 < 1)
            {
              v308 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v340 = 0;
              v341 = *(_QWORD *)(v330 + 32);
              v308 = 0x7FFFFFFFFFFFFFFFLL;
              do
              {
                v342 = *(_QWORD *)(v341 + 8 * v340 + 8);
                v343 = *(_QWORD *)(v342 + 64);
                v344 = *(unsigned int *)(v342 + 16);
                if ((int)v344 >= 1)
                {
                  v345 = *(unsigned int **)(v342 + 24);
                  v346 = *(uint64_t **)(v342 + 48);
                  do
                  {
                    while (1)
                    {
                      v349 = *v345++;
                      v348 = v349;
                      if ((v349 & 0x80000000) == 0)
                        break;
                      v347 = *v346++;
                      v343 += v347 * -*((_QWORD *)v652 + ~(_DWORD)v348);
                      if (!--v344)
                        goto LABEL_420;
                    }
                    v350 = *v346++;
                    v343 += v350 * *((_QWORD *)v652 + v348);
                    --v344;
                  }
                  while (v344);
                }
LABEL_420:
                if (v343 < v308)
                  v308 = v343;
                ++v340;
              }
              while (v340 != v339);
            }
LABEL_742:
            if (v297 == v308)
              goto LABEL_38;
            goto LABEL_876;
          }
        }
      }
    default:
      v635 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v664, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 1087);
      v636 = (_QWORD *)google::LogMessage::stream(v635);
      v637 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v636, (uint64_t)"Unuspported constraint: ", 24);
      operations_research::sat::ConstraintCaseName(v36);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v637, (uint64_t)&__p);
      std::string::~string(&__p);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v664);
  }
LABEL_254:
  v206 = &operations_research::sat::_ReservoirConstraintProto_default_instance_;
  if (*(_DWORD *)(v31 + 60) == 24)
    v206 = *(uint64_t **)(v31 + 48);
  v207 = *(unsigned int *)(v206[3] + 4 * v204);
  if ((v207 & 0x80000000) != 0)
  {
    v208 = v652;
    v209 = -*((_QWORD *)v652 + ~(_DWORD)v207);
    if (v209 < 0)
    {
LABEL_866:
      if (*off_254079388[0] >= 1
        && (off_254079388[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079388, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
      {
        v600 = google::LogMessage::LogMessage((google::LogMessage *)v664, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 953);
        v601 = (_QWORD *)google::LogMessage::stream(v600);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v601, (uint64_t)"reservoir times(", 16);
        v602 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v602, (uint64_t)") is negative.", 14);
        goto LABEL_874;
      }
LABEL_875:
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&__p, (_QWORD *)__p.__r_.__value_.__l.__size_);
      goto LABEL_876;
    }
  }
  else
  {
    v208 = v652;
    v209 = *((_QWORD *)v652 + v207);
    if (v209 < 0)
      goto LABEL_866;
  }
  if (v205 >= 1)
  {
    v210 = *(unsigned int *)(v206[9] + 4 * v204);
    if ((v210 & 0x80000000) != 0)
    {
      if (-v208[~(_DWORD)v210] != 1)
        goto LABEL_253;
    }
    else if (v208[v210] != 1)
    {
      goto LABEL_253;
    }
  }
  v211 = *(_QWORD *)(v206[6] + 8 * v204);
  v212 = __p.__r_.__value_.__l.__size_;
  for (i8 = &__p.__r_.__value_.__l.__size_; ; v212 = *i8)
  {
    v214 = (uint64_t **)i8;
    if (!v212)
      goto LABEL_272;
    while (1)
    {
      i8 = (std::string::size_type *)v212;
      v215 = *(_QWORD *)(v212 + 32);
      if (v209 < v215)
        break;
      if (v215 >= v209)
      {
        v216 = (uint64_t *)i8;
        goto LABEL_252;
      }
      v212 = i8[1];
      if (!v212)
      {
        v214 = (uint64_t **)(i8 + 1);
LABEL_272:
        v216 = (uint64_t *)operator new(0x30uLL);
        v216[4] = v209;
        v216[5] = 0;
        *v216 = 0;
        v216[1] = 0;
        v216[2] = (uint64_t)i8;
        *v214 = v216;
        v217 = v216;
        if (*(_QWORD *)__p.__r_.__value_.__l.__data_)
        {
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v217 = *v214;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)__p.__r_.__value_.__l.__size_, v217);
        ++__p.__r_.__value_.__r.__words[2];
LABEL_252:
        v216[5] += v211;
LABEL_253:
        if (++v204 == v199)
        {
          v202 = (void *)__p.__r_.__value_.__r.__words[0];
          v201 = v644;
          if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ == &__p.__r_.__value_.__r.__words[1])
          {
LABEL_803:
            std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&__p, (_QWORD *)__p.__r_.__value_.__l.__size_);
            goto LABEL_38;
          }
LABEL_790:
          v580 = 0;
          while (1)
          {
            v580 += *((_QWORD *)v202 + 5);
            if (v580 < v201 || v580 > v200)
              break;
            v582 = (std::string *)*((_QWORD *)v202 + 1);
            if (v582)
            {
              do
              {
                v583 = v582;
                v582 = (std::string *)v582->__r_.__value_.__r.__words[0];
              }
              while (v582);
            }
            else
            {
              do
              {
                v583 = (std::string *)*((_QWORD *)v202 + 2);
                v524 = v583->__r_.__value_.__r.__words[0] == (_QWORD)v202;
                v202 = v583;
              }
              while (!v524);
            }
            v202 = v583;
            if (v583 == (std::string *)&__p.__r_.__value_.__r.__words[1])
              goto LABEL_803;
          }
          if (*off_254079390[0] >= 1
            && (off_254079390[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_254079390, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
          {
            v603 = google::LogMessage::LogMessage((google::LogMessage *)v664, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 964);
            v604 = (_QWORD *)google::LogMessage::stream(v603);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v604, (uint64_t)"Reservoir level ", 16);
            v605 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v605, (uint64_t)" is out of bounds at time", 25);
            std::ostream::operator<<();
LABEL_874:
            google::LogMessage::~LogMessage((google::LogMessage *)v664);
          }
          goto LABEL_875;
        }
        goto LABEL_254;
      }
    }
  }
}

void sub_22DA7DCBC()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 136));
}

void sub_22DA7DCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set(v30 - 184);
  absl::lts_2020_02_25::flat_hash_map<int,int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::~flat_hash_map(v30 - 136);
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set((uint64_t)&a30);
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DCFC()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 136));
}

void sub_22DA7DD0C()
{
  uint64_t v0;

  google::LogMessage::~LogMessage((google::LogMessage *)(v0 - 136));
  JUMPOUT(0x22DA7DF88);
}

void sub_22DA7DD20()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v3 = *(void **)(v2 - 136);
  if (v3)
  {
    *(_QWORD *)(v2 - 128) = v3;
    operator delete(v3);
  }
  if (v1)
    operator delete(v1);
  if (v0)
    JUMPOUT(0x22DA7DF84);
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DD34()
{
  JUMPOUT(0x22DA7DF74);
}

void sub_22DA7DD40()
{
  JUMPOUT(0x22DA7DF88);
}

void sub_22DA7DD4C()
{
  uint64_t v0;

  google::LogMessage::~LogMessage((google::LogMessage *)(v0 - 136));
  JUMPOUT(0x22DA7DE24);
}

void sub_22DA7DD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30)
{
  if (a30)
    operator delete(a30);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(a1);
}

void sub_22DA7DD7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  google::LogMessage::~LogMessage((google::LogMessage *)(v35 - 136));
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DD9C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22DA7DF88);
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DDA4()
{
  uint64_t v0;

  absl::lts_2020_02_25::flat_hash_map<long long,long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::~flat_hash_map(v0 - 136);
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DDAC()
{
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DDB8()
{
  JUMPOUT(0x22DA7DDC0);
}

void sub_22DA7DDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  void *v31;

  v31 = *(void **)(v30 - 136);
  if (v31)
  {
    *(_QWORD *)(v30 - 128) = v31;
    operator delete(v31);
  }
  if (!a30)
    JUMPOUT(0x22DA7DF8CLL);
  JUMPOUT(0x22DA7DF88);
}

void sub_22DA7DDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~flat_hash_set((uint64_t)&a30);
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)(v35 - 136));
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)(v35 - 136));
  _Unwind_Resume(a1);
}

void sub_22DA7DE0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::LogMessage::~LogMessage((google::LogMessage *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_22DA7DE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a30, a31);
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  v33 = *(void **)(v31 - 136);
  if (v33)
  {
    *(_QWORD *)(v31 - 128) = v33;
    operator delete(v33);
  }
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void sub_22DA7DE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27)
    JUMPOUT(0x22DA7DF94);
  JUMPOUT(0x22DA7DF98);
}

void sub_22DA7DE90()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 136);
  if (v1)
  {
    *(_QWORD *)(v0 - 128) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x22DA7DF50);
}

void sub_22DA7DE98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *__p)
{
  if ((a22 & 1) != 0)
    operator delete(__p);
  JUMPOUT(0x22DA7DEF8);
}

void sub_22DA7DEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  operations_research::sat::ConstraintProto::~ConstraintProto((operations_research::sat::ConstraintProto *)&a30);
  JUMPOUT(0x22DA7DED4);
}

void sub_22DA7DEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a30);
  _Unwind_Resume(a1);
}

void sub_22DA7DEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  if ((*(_BYTE *)(v16 - 184) & 1) != 0)
    operator delete(*(void **)(v16 - 176));
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  JUMPOUT(0x22DA7DF40);
}

void sub_22DA7DF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  absl::lts_2020_02_25::flat_hash_map<std::pair<long long,long long>,long long,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::~flat_hash_map((uint64_t)&a30);
  JUMPOUT(0x22DA7DF8CLL);
}

void sub_22DA7DF5C()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 184));
}

void sub_22DA7DF64()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22DA7DF6CLL);
  JUMPOUT(0x22DA7DF78);
}

_QWORD *std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~flat_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v23 = a1[4];
    if (!v23)
      return;
LABEL_21:
    *((_QWORD *)v23 + 4) = v14 >> 3;
    *((_QWORD *)v23 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
             + *(_QWORD *)&v5[8 * (_QWORD)v13])
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)&v5[8 * (_QWORD)v13]));
      v19 = *a1;
      v20 = a1[3];
      v21 = ((v18 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v20;
      v22 = *(_QWORD *)&(*a1)[v21] & (~*(_QWORD *)&(*a1)[v21] << 7) & 0x8080808080808080;
      if (v22)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v21 = (v15 + v21) & (unint64_t)v20;
          v22 = *(_QWORD *)&v19[v21] & (~*(_QWORD *)&v19[v21] << 7) & 0x8080808080808080;
        }
        while (!v22);
      }
      v16 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v20;
      v14 += v15;
      v17 = v18 & 0x7F;
      v19[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_QWORD *)&a1[1][8 * v16] = *(_QWORD *)&v5[8 * (_QWORD)v13];
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v23 = a1[4];
  if (v23)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_QWORD *)(v25 + 8 * v18) = *(_QWORD *)(v25 + 8 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_QWORD *)(v25 + 8 * v14);
          *(_QWORD *)(v25 + 8 * v14) = *(_QWORD *)(v25 + 8 * v18);
          *(_QWORD *)(v25 + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *i;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *j;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 2;
  v63 = a2 - 6;
  v64 = a2 - 4;
  v10 = v8;
  v65 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = v12 >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(a2 - 2);
        v26 = *v8;
        if (v25 < *v8 || v26 >= v25 && *(a2 - 1) < v8[1])
        {
          *v8 = v25;
          *(a2 - 2) = v26;
          v27 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v27;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v8, v8 + 2, v9);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v8, v8 + 2, v8 + 4);
        v28 = *(a2 - 2);
        v29 = v8[4];
        if (v28 >= v29 && (v29 < v28 || *(a2 - 1) >= v8[5]))
          return result;
        v8[4] = v28;
        *(a2 - 2) = v29;
        v30 = v8[5];
        v8[5] = *(a2 - 1);
        *(a2 - 1) = v30;
        v31 = v8[4];
        v32 = v8[2];
        if (v31 >= v32)
        {
          if (v32 < v31)
            return result;
          v34 = v8[5];
          v33 = v8[3];
          if (v34 >= v33)
            return result;
        }
        else
        {
          v33 = v8[3];
          v34 = v8[5];
        }
        v8[2] = v31;
        v8[3] = v34;
        v8[4] = v32;
        v8[5] = v33;
        v35 = *v8;
        if (v31 < *v8)
        {
          v36 = v8[1];
LABEL_88:
          *v8 = v31;
          v8[1] = v34;
          v8[2] = v35;
          v8[3] = v36;
          return result;
        }
        if (v35 >= v31)
        {
          v36 = v8[1];
          if (v34 < v36)
            goto LABEL_88;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v8, v8 + 2, v8 + 4, v8 + 6, v9);
      default:
        if (v12 > 383)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if (v8 != a2)
            {
              v51 = (v13 - 2) >> 1;
              v52 = v51 + 1;
              v53 = &v8[2 * v51];
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>((uint64_t)v8, a3, v12 >> 4, v53);
                v53 -= 2;
                --v52;
              }
              while (v52);
              v54 = (unint64_t)v12 >> 4;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<long long,long long> *>(v8, (uint64_t)a2, a3, v54);
                a2 -= 2;
              }
              while (v54-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = &v8[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v8, v16, v9);
            v17 = a5;
            v18 = v9;
            v19 = &v8[2 * v15];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v8 + 2, v19 - 2, v64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v8 + 4, &v8[2 * v15 + 2], v63);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v19 - 2, v16, &v8[2 * v15 + 2]);
            v20 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v19;
            *(_OWORD *)v19 = v20;
            v9 = v18;
            a5 = v17;
            a2 = v65;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *(v8 - 2);
          if (v21 >= *v8 && (*v8 < v21 || *(v8 - 1) >= v8[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,long long> *,std::__less<void,void> &>(v8, a2);
            v10 = (uint64_t *)result;
            goto LABEL_19;
          }
LABEL_14:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,long long> *,std::__less<void,void> &>(v8, a2);
          if ((v23 & 1) == 0)
            goto LABEL_17;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v8, v22);
          v10 = v22 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v22 + 2, a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v24)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *,false>(v8, v22, a3, -v14, a5 & 1);
            v10 = v22 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v22;
          if (v24)
            return result;
          goto LABEL_2;
        }
        v37 = v8 + 2;
        v39 = v8 == a2 || v37 == a2;
        if ((a5 & 1) != 0)
        {
          if (v39)
            return result;
          v40 = 0;
          v41 = v8;
LABEL_44:
          v43 = v41;
          v41 = v37;
          v44 = v43[2];
          v45 = *v43;
          if (v44 >= *v43)
          {
            if (v45 < v44)
              goto LABEL_43;
            v46 = v43[3];
            if (v46 >= v43[1])
              goto LABEL_43;
          }
          else
          {
            v46 = v43[3];
          }
          v43[2] = v45;
          v41[1] = v43[1];
          v42 = v8;
          if (v43 == v8)
            goto LABEL_42;
          v47 = v40;
          while (1)
          {
            v50 = *(uint64_t *)((char *)v8 + v47 - 16);
            if (v44 < v50)
            {
              v48 = *(uint64_t *)((char *)v8 + v47 - 8);
            }
            else
            {
              if (v50 < v44)
              {
                v42 = (uint64_t *)((char *)v8 + v47);
LABEL_42:
                *v42 = v44;
                v42[1] = v46;
LABEL_43:
                v37 = v41 + 2;
                v40 += 16;
                if (v41 + 2 == a2)
                  return result;
                goto LABEL_44;
              }
              v48 = *(uint64_t *)((char *)v8 + v47 - 8);
              if (v46 >= v48)
              {
                v42 = v43;
                goto LABEL_42;
              }
            }
            v43 -= 2;
            v49 = (uint64_t *)((char *)v8 + v47);
            *v49 = v50;
            v49[1] = v48;
            v47 -= 16;
            if (!v47)
            {
              v42 = v8;
              goto LABEL_42;
            }
          }
        }
        if (!v39)
        {
          for (i = v8 + 1; ; i += 2)
          {
            v57 = v8;
            v8 = v37;
            v58 = v57[2];
            v59 = *v57;
            if (v58 < *v57)
              break;
            if (v59 >= v58)
            {
              v60 = v57[3];
              if (v60 < v57[1])
                goto LABEL_77;
            }
LABEL_72:
            v37 = v8 + 2;
            if (v8 + 2 == a2)
              return result;
          }
          v60 = v57[3];
LABEL_77:
          for (j = i; ; j -= 2)
          {
            v62 = *j;
            j[1] = v59;
            j[2] = v62;
            v59 = *(j - 3);
            if (v58 >= v59 && (v59 < v58 || v60 >= *(j - 2)))
              break;
          }
          *(j - 1) = v58;
          *j = v60;
          goto LABEL_72;
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 < v3)
      goto LABEL_7;
    if (v3 < v9)
      return 0;
    if (a3[1] < a2[1])
    {
LABEL_7:
      *a2 = v9;
      *a3 = v3;
      v11 = a2 + 1;
      v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      v12 = *a2;
      v13 = *a1;
      if (*a2 < *a1)
        goto LABEL_8;
      if (v13 < v12)
        return 1;
      if (*v11 < a1[1])
      {
LABEL_8:
        *a1 = v12;
        v14 = a1 + 1;
        *a2 = v13;
        v15 = *v14;
        *v14 = *v11;
        *v11 = v15;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = a1 + 1;
      *a3 = v4;
      v7 = a3 + 1;
      v8 = 1;
LABEL_13:
      v20 = *v6;
      *v6 = *v7;
      *v7 = v20;
      return v8;
    }
    *a1 = v3;
    *a2 = v4;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    v18 = *a3;
    v19 = *a2;
    if (*a3 < *a2)
    {
LABEL_12:
      *a2 = v18;
      *a3 = v19;
      v7 = a3 + 1;
      v8 = 2;
      v6 = a2 + 1;
      goto LABEL_13;
    }
    if (v19 >= v18)
    {
      if (a3[1] < v17)
        goto LABEL_12;
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,long long> *,std::__less<void,void> &>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (_QWORD *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (_QWORD *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        v17 = *(v14 - 2);
        v14 -= 2;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = *(a2 - 2);
      v19 = *a1;
      if (v18 < *a1 || v19 >= v18 && *(a2 - 1) < a1[1])
      {
        *a1 = v18;
        *(a2 - 2) = v19;
        v20 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v20;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a1 + 2, a1 + 4);
      v21 = *(a2 - 2);
      v22 = a1[4];
      if (v21 >= v22 && (v22 < v21 || *(a2 - 1) >= a1[5]))
        return 1;
      a1[4] = v21;
      *(a2 - 2) = v22;
      v23 = a1[5];
      a1[5] = *(a2 - 1);
      *(a2 - 1) = v23;
      v24 = a1[4];
      v25 = a1[2];
      if (v24 >= v25)
      {
        if (v25 < v24)
          return 1;
        v27 = a1[5];
        v26 = a1[3];
        if (v27 >= v26)
          return 1;
      }
      else
      {
        v26 = a1[3];
        v27 = a1[5];
      }
      a1[2] = v24;
      a1[3] = v27;
      a1[4] = v25;
      a1[5] = v26;
      v28 = *a1;
      if (v24 < *a1)
      {
        v29 = a1[1];
LABEL_44:
        *a1 = v24;
        a1[1] = v27;
        result = 1;
        a1[2] = v28;
        a1[3] = v29;
        return result;
      }
      if (v28 >= v24)
      {
        v29 = a1[1];
        if (v27 < v29)
          goto LABEL_44;
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v6 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a1 + 2, a1 + 4);
      v7 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *v7;
        v12 = *v6;
        if (*v7 >= *v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = v7[1];
          if (v13 >= v6[1])
            goto LABEL_7;
        }
        else
        {
          v13 = v7[1];
        }
        *v7 = v12;
        v7[1] = v6[1];
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v14 = v8;
        while (2)
        {
          v16 = (char *)a1 + v14;
          v17 = *(uint64_t *)((char *)a1 + v14 + 16);
          if (v11 < v17)
          {
            v15 = *((_QWORD *)v16 + 3);
LABEL_13:
            v6 -= 2;
            *((_QWORD *)v16 + 4) = v17;
            *(uint64_t *)((char *)a1 + v14 + 40) = v15;
            v14 -= 16;
            if (v14 == -32)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v17 >= v11)
        {
          v15 = *(uint64_t *)((char *)a1 + v14 + 24);
          if (v13 >= v15)
          {
            v10 = (uint64_t *)((char *)a1 + v14 + 32);
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *v10 = v11;
        v10[1] = v13;
        if (++v9 == 8)
          return v7 + 2 == a2;
LABEL_7:
        v6 = v7;
        v8 += 16;
        v7 += 2;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  if (*a4 < *a3 || v12 >= v11 && a4[1] < a3[1])
  {
    *a3 = v11;
    *a4 = v12;
    v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    v14 = *a3;
    v15 = *a2;
    if (*a3 < *a2 || v15 >= v14 && a3[1] < a2[1])
    {
      *a2 = v14;
      *a3 = v15;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *a2;
      v18 = *a1;
      if (*a2 < *a1 || v18 >= v17 && a2[1] < a1[1])
      {
        *a1 = v17;
        *a2 = v18;
        v19 = a1[1];
        a1[1] = a2[1];
        a2[1] = v19;
      }
    }
  }
  v20 = *a5;
  v21 = *a4;
  if (*a5 < *a4 || v21 >= v20 && a5[1] < a4[1])
  {
    *a4 = v20;
    *a5 = v21;
    v22 = a4[1];
    a4[1] = a5[1];
    a5[1] = v22;
    v23 = *a4;
    v24 = *a3;
    if (*a4 < *a3 || v24 >= v23 && a4[1] < a3[1])
    {
      *a3 = v23;
      *a4 = v24;
      v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      v26 = *a3;
      v27 = *a2;
      if (*a3 < *a2 || v27 >= v26 && a3[1] < a2[1])
      {
        *a2 = v26;
        *a3 = v27;
        v28 = a2[1];
        a2[1] = a3[1];
        a3[1] = v28;
        v29 = *a2;
        v30 = *a1;
        if (*a2 < *a1 || v30 >= v29 && a2[1] < a1[1])
        {
          *a1 = v29;
          *a2 = v30;
          v31 = a1[1];
          a1[1] = a2[1];
          a2[1] = v31;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (uint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_QWORD *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v13 = a4[1];
          if (v8[1] < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (uint64_t *)(result + 16 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_QWORD *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v14 = v8;
LABEL_14:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<long long,long long> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = result[1];
    v7 = result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && v8[2 * v9 + 1] < v7[3])
        {
          v7 += 2;
          v4 = v11;
        }
      }
      *v8 = *v7;
      v8[1] = v7[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (uint64_t *)(a2 - 16))
    {
      *v7 = v5;
      v7[1] = v6;
      return result;
    }
    *v7 = *(_QWORD *)(a2 - 16);
    v7[1] = *(_QWORD *)(a2 - 8);
    *(_QWORD *)(a2 - 16) = v5;
    *(_QWORD *)(a2 - 8) = v6;
    v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      v14 = ((unint64_t)v13 >> 4) - 2;
      v15 = v14 >> 1;
      v16 = &result[2 * (v14 >> 1)];
      v17 = *v16;
      v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17)
          return result;
        v19 = v7[1];
        if (result[2 * v15 + 1] >= v19)
          return result;
      }
      else
      {
        v19 = v7[1];
      }
      *v7 = v17;
      v7[1] = result[2 * v15 + 1];
      if (v14 >= 2)
      {
        while (1)
        {
          v22 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v20 = &result[2 * v15];
          v23 = *v20;
          if (*v20 < v18)
          {
            v21 = v20[1];
          }
          else
          {
            if (v18 < v23)
              break;
            v21 = result[2 * v15 + 1];
            if (v21 >= v19)
              break;
          }
          *v16 = v23;
          v16[1] = v21;
          v16 = &result[2 * v15];
          if (v22 <= 1)
            goto LABEL_19;
        }
      }
      v20 = v16;
LABEL_19:
      *v20 = v18;
      v20[1] = v19;
    }
  }
  return result;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<std::pair<long long,long long>,long long,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::find_or_prepare_insert<std::pair<long long,long long>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4
     + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2)));
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  while (1)
  {
    v9 = v7 & v8;
    v10 = *(_QWORD *)(*a1 + (v7 & v8));
    v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11)
      break;
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::prepare_insert(a1, v6);
    v2 += 8;
    v7 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    v13 = (uint64_t *)(a1[1] + 24 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v15 == v3 && v14 == v4)
      return v12;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_8;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 24 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v27 = a1[4];
    if (!v27)
      return;
LABEL_21:
    *((_QWORD *)v27 + 4) = v14 >> 3;
    *((_QWORD *)v27 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v20 = &v5[24 * (_QWORD)v13];
      v21 = *((_QWORD *)v20 + 1)
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(_QWORD *)v20)));
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = *a1;
      v24 = a1[3];
      v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      v26 = *(_QWORD *)&(*a1)[v25] & (~*(_QWORD *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v25 = (v15 + v25) & (unint64_t)v24;
          v26 = *(_QWORD *)&v23[v25] & (~*(_QWORD *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = *(_OWORD *)v20;
      v19 = (uint64_t)&a1[1][24 * v16];
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v27 = a1[4];
  if (v27)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v38 = *(_QWORD *)(result + 32);
    if (!v38)
      return result;
LABEL_26:
    *(_QWORD *)(v38 + 32) = v15 >> 3;
    *(_QWORD *)(v38 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24 * v14 + 8)
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(_QWORD *)(*(_QWORD *)(result + 8) + 24 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(_QWORD *)(*(_QWORD *)(result + 8) + 24 * v14))));
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          v26 = v25 + 24 * v18;
          v27 = (__int128 *)(v25 + 24 * v14);
          v28 = *v27;
          *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v26 = v28;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v29 = (__int128 *)(v25 + 24 * v14);
          v30 = *v29;
          v31 = *((_QWORD *)v29 + 2);
          v32 = (__int128 *)(v25 + 24 * v18);
          v33 = *((_QWORD *)v32 + 2);
          *v29 = *v32;
          *((_QWORD *)v29 + 2) = v33;
          v34 = *(_QWORD *)(result + 8) + 24 * v18;
          *(_OWORD *)v34 = v30;
          *(_QWORD *)(v34 + 16) = v31;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v35 = v14 - (v14 >> 3);
  v36 = v14 == 7;
  v37 = 6;
  if (!v36)
    v37 = v35;
  *(_QWORD *)(result + 40) = v37 - *(_QWORD *)(result + 16);
  v38 = *(_QWORD *)(result + 32);
  if (v38)
    goto LABEL_26;
  return result;
}

uint64_t absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<int,int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 4 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)&v5[4 * (_QWORD)v13];
      v19 = ((v18 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v18);
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_DWORD *)&a1[1][4 * v16] = *(_DWORD *)&v5[4 * (_QWORD)v13];
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(result + 8) + 4 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_DWORD *)(v25 + 4 * v18) = *(_DWORD *)(v25 + 4 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_DWORD *)(v25 + 4 * v14);
          *(_DWORD *)(v25 + 4 * v14) = *(_DWORD *)(v25 + 4 * v18);
          *(_DWORD *)(v25 + 4 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

void operations_research::sat::ExpandCpModel(_BYTE *a1, operations_research::sat::PresolveContext *a2, __n128 a3)
{
  uint64_t v3;
  operations_research::sat::PresolveContext *v4;
  operations_research::sat::PresolveContext *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  google::protobuf::Arena *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  const char *v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int *v43;
  char *v44;
  char *v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  operations_research::sat::PresolveContext *v49;
  _BOOL4 inited;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  operations_research::sat::ConstraintProto *v55;
  _DWORD *v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t *size;
  char *v62;
  BOOL v63;
  const void *v64;
  uint64_t v65;
  char *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  operations_research::sat::PresolveContext *v72;
  unint64_t *v73;
  std::string::size_type v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  unint64_t *v83;
  std::string::size_type v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  unint64_t *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  const void *v96;
  void *v97;
  uint64_t v98;
  operations_research::sat::PresolveContext *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64x2_t *v109;
  unint64_t v110;
  int v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t *v119;
  operations_research::sat *v120;
  operations_research::sat *v121;
  unint64_t v122;
  const operations_research::sat::LinearExpressionProto *v123;
  uint64_t v124;
  google::protobuf::Arena *v125;
  uint64_t v126;
  google::protobuf::Arena *v127;
  operations_research::sat::LinearExpressionProto *v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  int *v132;
  uint64_t v133;
  int v134;
  const operations_research::sat::LinearExpressionProto *v135;
  uint64_t *v136;
  uint64_t v137;
  google::protobuf::Arena *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  int v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  google::protobuf::Arena *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  google::protobuf::Arena *v168;
  uint64_t v169;
  void *v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t *v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _BYTE *v185;
  _QWORD *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  _OWORD *v192;
  char *v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  int64x2_t *v205;
  int32x4_t v206;
  uint64_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int8x16_t v215;
  int32x4_t v216;
  int32x4_t v217;
  uint64_t *v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  BOOL v222;
  uint64_t v223;
  int *v224;
  uint64_t v225;
  int v226;
  unint64_t v227;
  uint64_t v228;
  google::protobuf::Arena *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  int *v247;
  int v248;
  int v249;
  int v251;
  uint64_t v252;
  char *v253;
  _BYTE *v254;
  char *v255;
  _BYTE *v256;
  uint64_t v257;
  google::protobuf::Arena *v258;
  std::string **v259;
  std::string *v260;
  unint64_t v261;
  char v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  char *v266;
  _BYTE *v267;
  char *v268;
  _BYTE *v269;
  uint64_t v270;
  google::protobuf::Arena *v271;
  std::string **v272;
  std::string *v273;
  unint64_t v274;
  char v275;
  unint64_t v276;
  uint64_t v277;
  int *v278;
  uint64_t v279;
  int v280;
  unint64_t v281;
  uint64_t v282;
  google::protobuf::Arena *v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  char *v293;
  uint64_t v294;
  _BOOL4 IsEmpty;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t k;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  _BYTE *v313;
  _QWORD *v314;
  int v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  _OWORD *v320;
  char *v321;
  uint64_t v322;
  __int128 v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  _BYTE *v332;
  uint64_t *v333;
  unint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _OWORD *v339;
  char *v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  unsigned int *v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  unsigned int v355;
  uint64_t v356;
  operations_research::sat::ConstraintProto *v357;
  int v358;
  uint64_t v359;
  unsigned int *v360;
  uint64_t v361;
  unsigned int v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  int v374;
  int *v375;
  uint64_t v376;
  int v377;
  unint64_t v378;
  uint64_t v379;
  google::protobuf::Arena *v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int *v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  unsigned int v393;
  uint64_t v394;
  unsigned int v395;
  void *v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int *v400;
  uint64_t v401;
  int v402;
  unint64_t v403;
  unsigned int *v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  void *v409;
  uint64_t v410;
  void *v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  google::protobuf::Arena *v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  google::protobuf::Arena *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  BOOL v426;
  uint64_t v427;
  uint64_t v428;
  google::protobuf::Arena *v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  BOOL v438;
  uint64_t v439;
  uint64_t v440;
  google::protobuf::Arena *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  const void *v449;
  int64_t v450;
  char *v451;
  char v452;
  _BYTE *v453;
  _QWORD *v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  void *v458;
  unint64_t v459;
  void *v460;
  void *v461;
  int *v462;
  uint64_t v463;
  operations_research::sat::PresolveContext *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int v468;
  int *v469;
  char *v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  _BYTE *v475;
  unsigned int *v476;
  unint64_t v477;
  int *v478;
  unsigned int v479;
  uint64_t v480;
  uint64_t v481;
  _OWORD *v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  int *v486;
  uint64_t v487;
  int *v488;
  uint64_t v489;
  int v490;
  unint64_t v491;
  uint64_t v492;
  google::protobuf::Arena *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int v497;
  int v498;
  _BOOL4 v499;
  uint64_t jj;
  uint64_t *v501;
  const char *v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t *v508;
  int v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  void *kk;
  unsigned int v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  uint64_t v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int *v525;
  uint64_t v526;
  int v527;
  unint64_t v528;
  uint64_t v529;
  google::protobuf::Arena *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  int v536;
  uint64_t v537;
  int *v538;
  uint64_t v539;
  int v540;
  unint64_t v541;
  unsigned int *v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int *v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  google::protobuf::Arena *v552;
  uint64_t v553;
  unsigned int *v554;
  uint64_t v555;
  int v556;
  uint64_t v557;
  google::protobuf::Arena *v558;
  uint64_t v559;
  unsigned int *v560;
  uint64_t v561;
  int v562;
  uint64_t v563;
  google::protobuf::Arena *v564;
  uint64_t v565;
  unsigned int *v566;
  uint64_t v567;
  int v568;
  uint64_t v569;
  google::protobuf::Arena *v570;
  uint64_t v571;
  int *v572;
  uint64_t v573;
  int v574;
  unint64_t v575;
  uint64_t v576;
  unsigned int *v577;
  unsigned int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  unsigned int *v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  google::protobuf::Arena *v587;
  uint64_t v588;
  unsigned int *v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  google::protobuf::Arena *v593;
  uint64_t v594;
  unsigned int *v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  google::protobuf::Arena *v599;
  uint64_t v600;
  unsigned int *v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  google::protobuf::Arena *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  uint64_t v611;
  unsigned int v612;
  uint64_t v613;
  uint64_t v614;
  _QWORD *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  unint64_t v623;
  uint64_t v624;
  unint64_t v625;
  unint64_t v626;
  uint64_t v627;
  unint64_t v628;
  unint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  _QWORD *v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _QWORD *v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  _QWORD *v648;
  google::LogMessage *v649;
  _QWORD *v650;
  __int128 *v651;
  uint64_t v652;
  int *v653;
  uint64_t v654;
  int v655;
  unint64_t v656;
  uint64_t v657;
  google::protobuf::Arena *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t *p_size;
  uint64_t v663;
  unint64_t v664;
  _QWORD *v665;
  unint64_t v666;
  uint64_t v667;
  int v668;
  int v669;
  BOOL v670;
  int v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  const char *v675;
  unsigned int VarValueEncoding;
  uint64_t v677;
  const char *v678;
  const char *v679;
  uint64_t v680;
  operations_research::sat::PresolveContext **v681;
  void *v682;
  uint64_t v683;
  unint64_t v684;
  unint64_t v685;
  unint64_t i;
  unint64_t v687;
  uint64_t v688;
  unint64_t v689;
  unint64_t v690;
  uint64_t v691;
  int *v692;
  uint64_t v693;
  int v694;
  unint64_t v695;
  unsigned int *v696;
  uint64_t v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unsigned int *v702;
  uint64_t v703;
  int v704;
  uint64_t v705;
  google::protobuf::Arena *v706;
  uint64_t v707;
  unsigned int *v708;
  uint64_t v709;
  int v710;
  uint64_t v711;
  google::protobuf::Arena *v712;
  uint64_t v713;
  unsigned int *v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  google::protobuf::Arena *v718;
  uint64_t v719;
  unsigned int *v720;
  uint64_t v721;
  int v722;
  uint64_t v723;
  google::protobuf::Arena *v724;
  uint64_t v725;
  unsigned int *v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  google::protobuf::Arena *v730;
  uint64_t v731;
  unsigned int *v732;
  uint64_t v733;
  int v734;
  uint64_t v735;
  google::protobuf::Arena *v736;
  unint64_t v737;
  int v738;
  uint64_t v739;
  uint64_t v740;
  unsigned int *v741;
  uint64_t v742;
  unsigned int v743;
  int v744;
  uint64_t v746;
  _QWORD *v747;
  _QWORD *v748;
  _QWORD *v749;
  _QWORD *v750;
  _QWORD *v751;
  uint64_t v752;
  int *v753;
  uint64_t v754;
  int v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  google::protobuf::Arena *v761;
  uint64_t v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t *v766;
  int v767;
  uint64_t v768;
  unsigned int v769;
  uint64_t v770;
  void *v771;
  uint64_t v772;
  uint64_t v773;
  const char *v774;
  unsigned int v775;
  const char *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  __int128 *v783;
  uint64_t v784;
  operations_research::sat::PresolveContext **v785;
  unsigned int v786;
  uint64_t v787;
  int *v788;
  uint64_t v789;
  int v790;
  unint64_t v791;
  uint64_t v792;
  google::protobuf::Arena *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  std::string::size_type v798;
  std::string::size_type j;
  std::string::size_type v800;
  uint64_t v801;
  unint64_t v802;
  unint64_t v803;
  std::string::size_type v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t *v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  unint64_t v812;
  unint64_t v813;
  uint64_t v814;
  unint64_t v815;
  uint64_t v816;
  _QWORD *v817;
  unint64_t v818;
  unint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  unint64_t v825;
  uint64_t v826;
  std::string::size_type m;
  std::string::size_type v828;
  uint64_t v829;
  unint64_t v830;
  unint64_t v831;
  uint64_t v832;
  uint64_t v833;
  _QWORD *v834;
  unint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t *v838;
  uint64_t **v839;
  std::string::size_type v840;
  std::string::size_type v841;
  std::string::size_type v842;
  uint64_t *v843;
  uint64_t *v844;
  uint64_t *v845;
  __n128 v846;
  uint64_t v847;
  operations_research::sat::PresolveContext **v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  unint64_t v853;
  unint64_t v854;
  uint64_t v855;
  unint64_t v856;
  uint64_t v857;
  _QWORD *v858;
  unint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unint64_t v865;
  unint64_t v866;
  operations_research::sat::PresolveContext **v867;
  operations_research::sat::PresolveContext *v868;
  uint64_t v869;
  uint64_t v870;
  _QWORD *v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t v874;
  char *v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  unint64_t v879;
  unint64_t v880;
  _BYTE *v881;
  operations_research::sat::PresolveContext **v882;
  unint64_t v883;
  operations_research::sat::PresolveContext **v884;
  operations_research::sat::PresolveContext *v885;
  operations_research::sat::PresolveContext **v886;
  char *v887;
  int64_t v888;
  uint64_t v889;
  unint64_t v890;
  unint64_t v891;
  unint64_t v892;
  char *v893;
  char *v894;
  char *v895;
  unint64_t v896;
  char *v897;
  uint64_t v898;
  uint64_t v899;
  __n128 *v900;
  __n128 *v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  char *v905;
  uint64_t v906;
  char *v907;
  int64_t v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t v911;
  unint64_t v912;
  unint64_t v913;
  char *v914;
  char *v915;
  unint64_t v916;
  uint64_t v917;
  uint64_t v918;
  char *v919;
  __n128 *v920;
  __n128 *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  __n128 *v926;
  __n128 *v927;
  uint64_t v928;
  char *v929;
  char *v930;
  size_t v931;
  uint64_t v932;
  int v933;
  int v934;
  int *v935;
  char *v936;
  uint64_t v937;
  int *v938;
  int ConstantVar;
  int v940;
  char *v941;
  void *v942;
  uint64_t v943;
  int *v944;
  uint64_t v945;
  int v946;
  unint64_t v947;
  uint64_t v948;
  google::protobuf::Arena *v949;
  uint64_t v950;
  int v951;
  uint64_t v952;
  unsigned int *v953;
  unsigned int v954;
  char *v955;
  int64_t v956;
  int64_t v957;
  unint64_t v958;
  uint64_t v959;
  unint64_t v960;
  unint64_t v961;
  _BYTE *v962;
  int *v963;
  char *v964;
  int64_t v965;
  int64_t v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  _BYTE *v970;
  _DWORD *v971;
  unint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  unint64_t v976;
  unint64_t v977;
  int v978;
  int v979;
  char *v980;
  void *v981;
  char *v982;
  int64_t v983;
  int64_t v984;
  unint64_t v985;
  uint64_t v986;
  unint64_t v987;
  _BYTE *v988;
  _DWORD *v989;
  unint64_t v990;
  uint64_t v991;
  uint64_t v992;
  char *v993;
  _OWORD *v994;
  char *v995;
  uint64_t v996;
  __int128 v997;
  int v998;
  uint64_t v999;
  uint64_t v1000;
  char *v1001;
  char *v1002;
  unint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  char *v1006;
  _OWORD *v1007;
  char *v1008;
  uint64_t v1009;
  __int128 v1010;
  int v1011;
  int v1012;
  void *v1013;
  int *v1014;
  int64_t v1015;
  uint64_t v1016;
  unint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  _BYTE *v1021;
  int *v1022;
  unint64_t v1023;
  int *v1024;
  int v1025;
  char *v1026;
  uint64_t v1027;
  uint64_t v1028;
  char *v1029;
  uint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  unint64_t *v1033;
  std::string::size_type v1034;
  const char *v1035;
  int64_t v1036;
  char *v1037;
  char *v1038;
  int v1039;
  unint64_t v1040;
  uint64_t *v1041;
  uint64_t *v1042;
  uint64_t v1043;
  std::string::size_type v1044;
  uint64_t v1045;
  unint64_t v1046;
  unint64_t v1047;
  uint64_t v1048;
  std::string::size_type n;
  std::string::size_type v1050;
  std::string::size_type v1051;
  unsigned int v1052;
  unint64_t v1053;
  uint64_t *v1054;
  void *v1055;
  int64_t v1056;
  char *v1057;
  char *v1058;
  char *v1059;
  uint64_t v1060;
  uint64_t v1061;
  char *v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  unint64_t *v1066;
  unint64_t v1067;
  int v1068;
  uint64_t v1069;
  unint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  unint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  unint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  uint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  char *v1094;
  _OWORD *v1095;
  char *v1096;
  uint64_t v1097;
  __int128 v1098;
  int v1099;
  const char *v1100;
  char v1101;
  unint64_t v1102;
  int v1103;
  void *v1104;
  uint64_t v1105;
  unint64_t *v1106;
  uint64_t v1107;
  uint64_t v1108;
  _OWORD *v1109;
  int *v1110;
  uint64_t v1111;
  __int128 v1112;
  char *v1113;
  uint64_t v1114;
  uint64_t v1115;
  unint64_t v1116;
  unint64_t v1117;
  uint64_t v1118;
  unint64_t ii;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  int v1123;
  unint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  uint64_t v1129;
  operations_research::sat::PresolveContext *v1130;
  operations_research::sat::PresolveContext *v1131;
  operations_research::sat::PresolveContext *v1132;
  _QWORD *v1133;
  const char *v1134;
  uint64_t v1135;
  unsigned int *v1136;
  uint64_t v1137;
  unint64_t *v1138;
  unint64_t *v1139;
  unsigned int v1140;
  unint64_t v1141;
  int v1142;
  unsigned int v1143;
  uint64_t v1144;
  unint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1150;
  int v1151;
  int v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t *v1156;
  uint64_t *v1157;
  int v1158[2];
  unsigned int v1159;
  int v1160[2];
  int v1161[2];
  int v1162[2];
  int v1163[2];
  int v1164;
  char v1165;
  int v1166[2];
  unsigned int v1167;
  int v1168;
  unsigned int *v1169;
  operations_research::sat::PresolveContext **v1170;
  int v1171;
  int v1172;
  int v1173[2];
  int v1174[2];
  int v1175;
  unsigned int *v1176;
  int v1177[2];
  int v1178[2];
  int v1179[2];
  unsigned int v1180;
  unsigned int v1181;
  void *v1182;
  void *v1183;
  operations_research::sat::PresolveContext **v1184;
  unsigned int v1185;
  int v1186[2];
  int v1187[2];
  int v1188[2];
  unsigned int v1189;
  int v1190[2];
  int v1191[2];
  operations_research::sat::PresolveContext *v1192;
  operations_research::sat::ConstraintProto *v1193;
  void *v1194;
  void *v1195;
  char *v1196;
  unint64_t v1197;
  void *v1198;
  char v1199;
  void *v1200;
  void *v1201;
  char *v1202;
  int v1203;
  BOOL v1204;
  void *v1205;
  void *v1206;
  unint64_t v1207;
  void *v1208;
  char *v1209;
  char *v1210;
  void *v1211;
  _BYTE *v1212;
  char *v1213;
  operations_research::sat::PresolveContext **v1214[4];
  BOOL v1215;
  operations_research::sat::PresolveContext *v1216;
  __int128 v1217;
  unint64_t v1218[3];
  __int128 v1219;
  uint64_t v1220;
  std::string __str;
  int v1222[6];
  unsigned __int128 v1223;
  uint64_t v1224;
  _BYTE v1225[24];
  unsigned __int128 v1226;
  uint64_t v1227;
  std::string v1228;
  __int128 v1229;
  std::string::size_type v1230;
  uint64_t v1231;

  v1231 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 504))
    return;
  v3 = (uint64_t)a2;
  operations_research::sat::PresolveContext::InitializeNewDomains(a2, a3);
  v1153 = *(unsigned int *)(*(_QWORD *)(v3 + 48) + 48);
  if ((int)v1153 >= 1)
  {
    v7 = 0;
    v6 = (__n128)xmmword_22DCE6590;
    v1192 = (operations_research::sat::PresolveContext *)v3;
    while (2)
    {
      v8 = *(_QWORD *)(v3 + 48);
      v9 = *(int **)(v8 + 56);
      *(_QWORD *)v1163 = v7;
      v1193 = *(operations_research::sat::ConstraintProto **)&v9[2 * v7 + 2];
      switch(*((_DWORD *)v1193 + 15))
      {
        case 8:
          v10 = *((_QWORD *)v1193 + 6);
          v11 = *(unsigned int **)(v10 + 24);
          v1185 = *v11;
          *(_QWORD *)v1158 = v10;
          v1164 = *(_DWORD *)(v10 + 36);
          v1180 = v11[1];
          v12 = operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v3, (const char *)v1180);
          v1218[0] = v12;
          *(_DWORD *)v1225 = 1;
          if (v12 < 1)
          {
            v1228.__r_.__value_.__r.__words[0] = google::MakeCheckOpString<long long,int>((int)v1218, (int)v1225, "mod_lb >= 1");
            if (v1228.__r_.__value_.__r.__words[0])
            {
              google::LogMessageFatal::LogMessageFatal(v1218, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 232, (uint64_t **)&v1228);
              google::LogMessage::stream((google::LogMessage *)v1218);
              goto LABEL_1567;
            }
          }
          v13 = operations_research::sat::PresolveContext::MaxOf((operations_research::sat::PresolveContext *)v3, (const char *)v1180);
          v14 = operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v3, (const char *)v1185);
          v15 = operations_research::sat::PresolveContext::MaxOf((operations_research::sat::PresolveContext *)v3, (const char *)v1185);
          operations_research::Domain::Domain(v1218, v14 / v13, v15 / v12);
          v1171 = operations_research::sat::PresolveContext::NewIntVar((operations_research::sat::PresolveContext *)v3, (const operations_research::Domain *)v1218);
          if ((v1218[0] & 1) != 0)
            operator delete((void *)v1218[1]);
          v16 = *(_QWORD *)(v3 + 48);
          v17 = *(int **)(v16 + 56);
          if (v17)
          {
            v18 = *(int *)(v16 + 48);
            v19 = *v17;
            if ((int)v18 < *v17)
            {
              *(_DWORD *)(v16 + 48) = v18 + 1;
              v20 = *(_QWORD *)&v17[2 * v18 + 2];
              if (*(_DWORD *)(v20 + 60) != 7)
              {
LABEL_12:
                operations_research::sat::ConstraintProto::clear_constraint(v20);
                *(_DWORD *)(v20 + 60) = 7;
                v21 = *(_QWORD *)(v20 + 8);
                v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
                if ((v21 & 1) != 0)
                  v22 = *(google::protobuf::Arena **)v22;
                v23 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v22);
                *(_QWORD *)(v20 + 48) = v23;
LABEL_184:
                v145 = *(unsigned int *)(v23 + 16);
                *(_DWORD *)(v23 + 36) = v1171;
                v146 = v145 + 1;
                if ((_DWORD)v145 == *(_DWORD *)(v23 + 20))
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v23 + 16), v145 + 1);
                v147 = *(_QWORD *)(v23 + 24);
                *(_DWORD *)(v147 + 4 * v145) = v1185;
                *(_DWORD *)(v23 + 16) = v146;
                if (v146 == *(_DWORD *)(v23 + 20))
                {
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v23 + 16), v145 + 2);
                  v147 = *(_QWORD *)(v23 + 24);
                }
                *(_DWORD *)(v147 + 4 * v146) = v1180;
                *(_DWORD *)(v23 + 16) = v145 + 2;
                if (*((_DWORD *)v1193 + 4))
                {
                  v148 = **((_DWORD **)v1193 + 3);
                  v149 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 56)
                                   + 8 * *(int *)(*(_QWORD *)(v3 + 48) + 48));
                  v151 = *(_DWORD *)(v149 + 16);
                  v150 = v151;
                  v152 = v151 + 1;
                  if (v151 == *(_DWORD *)(v149 + 20))
                    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v149 + 16), v152);
                  *(_DWORD *)(*(_QWORD *)(v149 + 24) + 4 * v150) = v148;
                  *(_DWORD *)(v149 + 16) = v152;
                }
                if (v12 == v13)
                {
                  v153 = *(_QWORD *)(v3 + 48);
                  v154 = *(int **)(v153 + 56);
                  if (v154)
                  {
                    v155 = *(int *)(v153 + 48);
                    v156 = *v154;
                    if ((int)v155 < *v154)
                    {
                      *(_DWORD *)(v153 + 48) = v155 + 1;
                      v157 = *(_QWORD *)&v154[2 * v155 + 2];
                      if (*(_DWORD *)(v157 + 60) != 12)
                      {
LABEL_196:
                        operations_research::sat::ConstraintProto::clear_constraint(v157);
                        *(_DWORD *)(v157 + 60) = 12;
                        v158 = *(_QWORD *)(v157 + 8);
                        v159 = (google::protobuf::Arena *)(v158 & 0xFFFFFFFFFFFFFFFELL);
                        if ((v158 & 1) != 0)
                          v159 = *(google::protobuf::Arena **)v159;
                        v160 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v159);
                        *(_QWORD *)(v157 + 48) = v160;
LABEL_417:
                        v345 = **(_DWORD **)(*(_QWORD *)v1158 + 24);
                        v347 = *(unsigned int *)(v160 + 16);
                        v346 = (unsigned int *)(v160 + 16);
                        v348 = v347 + 1;
                        if ((_DWORD)v347 == *(_DWORD *)(v160 + 20))
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v160 + 16), v347 + 1);
                        *(_DWORD *)(*(_QWORD *)(v160 + 24) + 4 * v347) = v345;
                        v349 = *(unsigned int *)(v160 + 40);
                        *(_DWORD *)(v160 + 16) = v348;
                        if ((_DWORD)v349 == *(_DWORD *)(v160 + 44))
                        {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v160 + 40), v349 + 1);
                          v348 = *v346;
                        }
                        *(_QWORD *)(*(_QWORD *)(v160 + 48) + 8 * v349) = 1;
                        *(_DWORD *)(v160 + 40) = v349 + 1;
                        v350 = v348 + 1;
                        if (v348 == *(_DWORD *)(v160 + 20))
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v160 + 16), v348 + 1);
                        *(_DWORD *)(*(_QWORD *)(v160 + 24) + 4 * v348) = v1171;
                        *(_DWORD *)(v160 + 16) = v350;
                        v351 = *(unsigned int *)(v160 + 40);
                        if ((_DWORD)v351 == *(_DWORD *)(v160 + 44))
                        {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v160 + 40), v351 + 1);
                          v350 = *v346;
                        }
                        *(_QWORD *)(*(_QWORD *)(v160 + 48) + 8 * v351) = -v12;
                        *(_DWORD *)(v160 + 40) = v351 + 1;
                        if (v350 == *(_DWORD *)(v160 + 20))
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v160 + 16), v350 + 1);
                        *(_DWORD *)(*(_QWORD *)(v160 + 24) + 4 * v350) = v1164;
                        *(_DWORD *)(v160 + 16) = v350 + 1;
                        v352 = *(unsigned int *)(v160 + 40);
                        if ((_DWORD)v352 == *(_DWORD *)(v160 + 44))
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v160 + 40), v352 + 1);
                        v353 = *(unsigned int *)(v160 + 64);
                        *(_QWORD *)(*(_QWORD *)(v160 + 48) + 8 * v352) = -1;
                        *(_DWORD *)(v160 + 40) = v352 + 1;
                        v354 = *(_DWORD *)(v160 + 68);
                        v355 = v353 + 1;
                        if ((_DWORD)v353 == v354)
                        {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v160 + 64), v353 + 1);
                          v354 = *(_DWORD *)(v160 + 68);
                        }
                        v356 = *(_QWORD *)(v160 + 72);
                        *(_QWORD *)(v356 + 8 * v353) = 0;
                        *(_DWORD *)(v160 + 64) = v355;
                        if (v355 == v354)
                        {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v160 + 64), v353 + 2);
                          v356 = *(_QWORD *)(v160 + 72);
                        }
                        *(_QWORD *)(v356 + 8 * v355) = 0;
                        *(_DWORD *)(v160 + 64) = v353 + 2;
                        v357 = v1193;
                        if (!*((_DWORD *)v1193 + 4))
                          goto LABEL_479;
                        v358 = **((_DWORD **)v1193 + 3);
                        v359 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 56)
                                         + 8 * *(int *)(*(_QWORD *)(v3 + 48) + 48));
                        v362 = *(_DWORD *)(v359 + 16);
                        v360 = (unsigned int *)(v359 + 16);
                        v361 = v362;
                        v363 = v362 + 1;
                        if (v362 != *(_DWORD *)(v359 + 20))
                        {
LABEL_478:
                          *(_DWORD *)(*(_QWORD *)(v359 + 24) + 4 * v361) = v358;
                          *(_DWORD *)(v359 + 16) = v363;
                          v357 = v1193;
LABEL_479:
                          operations_research::sat::ConstraintProto::Clear(v357);
                          HIBYTE(v1218[2]) = 17;
                          strcpy((char *)v1218, "int_mod: expanded");
                          operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1218);
LABEL_623:
                          if (SHIBYTE(v1218[2]) < 0)
                          {
                            v458 = (void *)v1218[0];
                            goto LABEL_1507;
                          }
                          goto LABEL_1508;
                        }
LABEL_477:
                        google::protobuf::RepeatedField<int>::Reserve(v360, v363);
                        goto LABEL_478;
                      }
LABEL_416:
                      v160 = *(_QWORD *)(v157 + 48);
                      goto LABEL_417;
                    }
                    if (v156 != *(_DWORD *)(v153 + 52))
                    {
LABEL_415:
                      *v154 = v156 + 1;
                      v157 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v153 + 40));
                      v343 = *(_QWORD *)(v153 + 56);
                      v344 = *(int *)(v153 + 48);
                      *(_DWORD *)(v153 + 48) = v344 + 1;
                      *(_QWORD *)(v343 + 8 * v344 + 8) = v157;
                      if (*(_DWORD *)(v157 + 60) != 12)
                        goto LABEL_196;
                      goto LABEL_416;
                    }
                  }
                  else
                  {
                    v156 = *(_DWORD *)(v153 + 52);
                  }
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v153 + 40), v156 + 1);
                  v154 = *(int **)(v153 + 56);
                  v156 = *v154;
                  goto LABEL_415;
                }
                operations_research::Domain::Domain(v1218, v14 * v12 / v13, v15 * v13 / v12);
                v161 = operations_research::sat::PresolveContext::NewIntVar((operations_research::sat::PresolveContext *)v3, (const operations_research::Domain *)v1218);
                if ((v1218[0] & 1) != 0)
                  operator delete((void *)v1218[1]);
                v162 = *(_QWORD *)(v3 + 48);
                v163 = *(int **)(v162 + 56);
                if (v163)
                {
                  v164 = *(int *)(v162 + 48);
                  v165 = *v163;
                  if ((int)v164 < *v163)
                  {
                    *(_DWORD *)(v162 + 48) = v164 + 1;
                    v166 = *(_QWORD *)&v163[2 * v164 + 2];
                    if (*(_DWORD *)(v166 + 60) != 11)
                    {
LABEL_204:
                      operations_research::sat::ConstraintProto::clear_constraint(v166);
                      *(_DWORD *)(v166 + 60) = 11;
                      v167 = *(_QWORD *)(v166 + 8);
                      v168 = (google::protobuf::Arena *)(v167 & 0xFFFFFFFFFFFFFFFELL);
                      if ((v167 & 1) != 0)
                        v168 = *(google::protobuf::Arena **)v168;
                      v169 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v168);
                      *(_QWORD *)(v166 + 48) = v169;
LABEL_440:
                      v366 = *(unsigned int *)(v169 + 16);
                      *(_DWORD *)(v169 + 36) = v161;
                      v367 = v366 + 1;
                      if ((_DWORD)v366 == *(_DWORD *)(v169 + 20))
                        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v169 + 16), v366 + 1);
                      v368 = *(_QWORD *)(v169 + 24);
                      *(_DWORD *)(v368 + 4 * v366) = v1171;
                      *(_DWORD *)(v169 + 16) = v367;
                      if (v367 == *(_DWORD *)(v169 + 20))
                      {
                        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v169 + 16), v366 + 2);
                        v368 = *(_QWORD *)(v169 + 24);
                      }
                      *(_DWORD *)(v368 + 4 * v367) = v1180;
                      *(_DWORD *)(v169 + 16) = v366 + 2;
                      v369 = *(_QWORD *)(v3 + 48);
                      if (*((_DWORD *)v1193 + 4))
                      {
                        v370 = **((_DWORD **)v1193 + 3);
                        v371 = *(_QWORD *)(*(_QWORD *)(v369 + 56) + 8 * *(int *)(v369 + 48));
                        v373 = *(_DWORD *)(v371 + 16);
                        v372 = v373;
                        v374 = v373 + 1;
                        if (v373 == *(_DWORD *)(v371 + 20))
                        {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v371 + 16), v374);
                          v369 = *(_QWORD *)(v3 + 48);
                        }
                        *(_DWORD *)(*(_QWORD *)(v371 + 24) + 4 * v372) = v370;
                        *(_DWORD *)(v371 + 16) = v374;
                      }
                      v375 = *(int **)(v369 + 56);
                      if (v375)
                      {
                        v376 = *(int *)(v369 + 48);
                        v377 = *v375;
                        if ((int)v376 < *v375)
                        {
                          *(_DWORD *)(v369 + 48) = v376 + 1;
                          v378 = *(_QWORD *)&v375[2 * v376 + 2];
                          if (*(_DWORD *)(v378 + 60) != 12)
                            goto LABEL_451;
                          goto LABEL_459;
                        }
                        if (v377 != *(_DWORD *)(v369 + 52))
                        {
LABEL_458:
                          *v375 = v377 + 1;
                          v378 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v369 + 40));
                          v385 = *(_QWORD *)(v369 + 56);
                          v386 = *(int *)(v369 + 48);
                          *(_DWORD *)(v369 + 48) = v386 + 1;
                          *(_QWORD *)(v385 + 8 * v386 + 8) = v378;
                          if (*(_DWORD *)(v378 + 60) != 12)
                          {
LABEL_451:
                            operations_research::sat::ConstraintProto::clear_constraint(v378);
                            *(_DWORD *)(v378 + 60) = 12;
                            v379 = *(_QWORD *)(v378 + 8);
                            v380 = (google::protobuf::Arena *)(v379 & 0xFFFFFFFFFFFFFFFELL);
                            if ((v379 & 1) != 0)
                              v380 = *(google::protobuf::Arena **)v380;
                            v381 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v380);
                            *(_QWORD *)(v378 + 48) = v381;
                            v382 = *(unsigned int *)(v381 + 16);
                            v383 = (unsigned int *)(v381 + 16);
                            v384 = v382 + 1;
                            if ((_DWORD)v382 != *(_DWORD *)(v381 + 20))
                            {
LABEL_461:
                              *(_DWORD *)(*(_QWORD *)(v381 + 24) + 4 * v382) = v1185;
                              v387 = *(unsigned int *)(v381 + 40);
                              *(_DWORD *)(v381 + 16) = v384;
                              if ((_DWORD)v387 == *(_DWORD *)(v381 + 44))
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v381 + 40), v387 + 1);
                                v384 = *v383;
                              }
                              *(_QWORD *)(*(_QWORD *)(v381 + 48) + 8 * v387) = 1;
                              *(_DWORD *)(v381 + 40) = v387 + 1;
                              v388 = v384 + 1;
                              if (v384 == *(_DWORD *)(v381 + 20))
                                google::protobuf::RepeatedField<int>::Reserve(v383, v384 + 1);
                              *(_DWORD *)(*(_QWORD *)(v381 + 24) + 4 * v384) = v161;
                              *(_DWORD *)(v381 + 16) = v388;
                              v389 = *(unsigned int *)(v381 + 40);
                              if ((_DWORD)v389 == *(_DWORD *)(v381 + 44))
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v381 + 40), v389 + 1);
                                v388 = *v383;
                              }
                              *(_QWORD *)(*(_QWORD *)(v381 + 48) + 8 * v389) = -1;
                              *(_DWORD *)(v381 + 40) = v389 + 1;
                              if (v388 == *(_DWORD *)(v381 + 20))
                                google::protobuf::RepeatedField<int>::Reserve(v383, v388 + 1);
                              *(_DWORD *)(*(_QWORD *)(v381 + 24) + 4 * v388) = v1164;
                              *(_DWORD *)(v381 + 16) = v388 + 1;
                              v390 = *(unsigned int *)(v381 + 40);
                              if ((_DWORD)v390 == *(_DWORD *)(v381 + 44))
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v381 + 40), v390 + 1);
                              v391 = *(unsigned int *)(v381 + 64);
                              *(_QWORD *)(*(_QWORD *)(v381 + 48) + 8 * v390) = -1;
                              *(_DWORD *)(v381 + 40) = v390 + 1;
                              v392 = *(_DWORD *)(v381 + 68);
                              v393 = v391 + 1;
                              if ((_DWORD)v391 == v392)
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v381 + 64), v391 + 1);
                                v392 = *(_DWORD *)(v381 + 68);
                              }
                              v394 = *(_QWORD *)(v381 + 72);
                              *(_QWORD *)(v394 + 8 * v391) = 0;
                              *(_DWORD *)(v381 + 64) = v393;
                              if (v393 == v392)
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v381 + 64), v391 + 2);
                                v394 = *(_QWORD *)(v381 + 72);
                              }
                              *(_QWORD *)(v394 + 8 * v393) = 0;
                              *(_DWORD *)(v381 + 64) = v391 + 2;
                              v357 = v1193;
                              if (!*((_DWORD *)v1193 + 4))
                                goto LABEL_479;
                              v358 = **((_DWORD **)v1193 + 3);
                              v359 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 56)
                                               + 8 * *(int *)(*(_QWORD *)(v3 + 48) + 48));
                              v395 = *(_DWORD *)(v359 + 16);
                              v360 = (unsigned int *)(v359 + 16);
                              v361 = v395;
                              v363 = v395 + 1;
                              if (v395 != *(_DWORD *)(v359 + 20))
                                goto LABEL_478;
                              goto LABEL_477;
                            }
LABEL_460:
                            google::protobuf::RepeatedField<int>::Reserve(v383, v384);
                            goto LABEL_461;
                          }
LABEL_459:
                          v381 = *(_QWORD *)(v378 + 48);
                          v382 = *(unsigned int *)(v381 + 16);
                          v383 = (unsigned int *)(v381 + 16);
                          v384 = v382 + 1;
                          if ((_DWORD)v382 != *(_DWORD *)(v381 + 20))
                            goto LABEL_461;
                          goto LABEL_460;
                        }
                      }
                      else
                      {
                        v377 = *(_DWORD *)(v369 + 52);
                      }
                      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v369 + 40), v377 + 1);
                      v375 = *(int **)(v369 + 56);
                      v377 = *v375;
                      goto LABEL_458;
                    }
LABEL_439:
                    v169 = *(_QWORD *)(v166 + 48);
                    goto LABEL_440;
                  }
                  if (v165 != *(_DWORD *)(v162 + 52))
                  {
LABEL_438:
                    *v163 = v165 + 1;
                    v166 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v162 + 40));
                    v364 = *(_QWORD *)(v162 + 56);
                    v365 = *(int *)(v162 + 48);
                    *(_DWORD *)(v162 + 48) = v365 + 1;
                    *(_QWORD *)(v364 + 8 * v365 + 8) = v166;
                    if (*(_DWORD *)(v166 + 60) != 11)
                      goto LABEL_204;
                    goto LABEL_439;
                  }
                }
                else
                {
                  v165 = *(_DWORD *)(v162 + 52);
                }
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v162 + 40), v165 + 1);
                v163 = *(int **)(v162 + 56);
                v165 = *v163;
                goto LABEL_438;
              }
LABEL_183:
              v23 = *(_QWORD *)(v20 + 48);
              goto LABEL_184;
            }
            if (v19 != *(_DWORD *)(v16 + 52))
            {
LABEL_182:
              *v17 = v19 + 1;
              v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v16 + 40));
              v143 = *(_QWORD *)(v16 + 56);
              v144 = *(int *)(v16 + 48);
              *(_DWORD *)(v16 + 48) = v144 + 1;
              *(_QWORD *)(v143 + 8 * v144 + 8) = v20;
              if (*(_DWORD *)(v20 + 60) != 7)
                goto LABEL_12;
              goto LABEL_183;
            }
          }
          else
          {
            v19 = *(_DWORD *)(v16 + 52);
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v16 + 40), v19 + 1);
          v17 = *(int **)(v16 + 56);
          v19 = *v17;
          goto LABEL_182;
        case 0xB:
          v42 = *((_QWORD *)v1193 + 6);
          if (*(_DWORD *)(v42 + 16) != 2)
            goto LABEL_1508;
          v43 = *(unsigned int **)(v42 + 24);
          v44 = (char *)*v43;
          v45 = (char *)v43[1];
          v46 = *(_DWORD *)(v42 + 36);
          if ((v44 & 0x80000000) != 0
            || operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v3, (const char *)*v43))
          {
            v47 = 0;
            if ((v45 & 0x80000000) != 0)
              goto LABEL_616;
          }
          else
          {
            v47 = operations_research::sat::PresolveContext::MaxOf((operations_research::sat::PresolveContext *)v3, v44) == 1;
            if ((v45 & 0x80000000) != 0)
              goto LABEL_616;
          }
          if (!operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v3, v45))
          {
            v499 = operations_research::sat::PresolveContext::MaxOf((operations_research::sat::PresolveContext *)v3, v45) == 1;
            if (!v47)
              goto LABEL_621;
LABEL_619:
            if (!v499)
            {
              operations_research::sat::ConstraintProto::Clear(v1193);
              v1218[0] = (unint64_t)operator new(0x30uLL);
              *(_OWORD *)&v1218[1] = xmmword_22DCE6580;
              strcpy((char *)v1218[0], "int_prod: expanded product with Boolean var");
              operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1218);
              goto LABEL_623;
            }
LABEL_621:
            if (!v499 || v47)
              goto LABEL_1508;
            operations_research::sat::ConstraintProto::Clear(v1193);
            v1218[0] = (unint64_t)operator new(0x30uLL);
            *(_OWORD *)&v1218[1] = xmmword_22DCE6580;
            strcpy((char *)v1218[0], "int_prod: expanded product with Boolean var");
            operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1218);
            goto LABEL_623;
          }
LABEL_616:
          v499 = 0;
          if (!v47)
            goto LABEL_621;
          goto LABEL_619;
        case 0xE:
          if (!a1[460])
            goto LABEL_1508;
          v56 = (_DWORD *)*((_QWORD *)v1193 + 6);
          v57 = v56[9];
          v1159 = v56[10];
          *(_QWORD *)v1186 = v56;
          v58 = (int)v56[4];
          operations_research::Domain::Domain(v1218, 0, v58 - 1);
          v59 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, (const char *)v57, (const operations_research::Domain *)v1218, 0);
          if ((v1218[0] & 1) != 0)
            operator delete((void *)v1218[1]);
          if ((v59 & 1) == 0)
          {
            if (*off_2540793A0[0] >= 1
              && (off_2540793A0[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_2540793A0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v1218, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 440);
              v142 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v1218);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"Empty domain for the index variable in ExpandElement()", 54);
              google::LogMessage::~LogMessage((google::LogMessage *)v1218);
            }
            goto LABEL_237;
          }
          v1218[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_OWORD *)&v1218[1] = 0u;
          v1219 = 0u;
          v1220 = 0;
          memset(v1225, 0, sizeof(v1225));
          memset(v1222, 0, sizeof(v1222));
          operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)v57, (unint64_t *)&__str);
          v1151 = v58;
          operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)v1159, (unint64_t *)&v1216);
          if ((__str.__r_.__value_.__s.__data_[0] & 1) != 0)
            size = (uint64_t *)__str.__r_.__value_.__l.__size_;
          else
            size = (uint64_t *)&__str.__r_.__value_.__l.__size_;
          v1181 = v57;
          if (__str.__r_.__value_.__r.__words[0] <= 1)
          {
            v62 = 0;
            v63 = v1159 == (_DWORD)v57;
            v1165 = 1;
            goto LABEL_57;
          }
          v293 = 0;
          *(_QWORD *)v1174 = 0;
          v62 = 0;
          v1156 = &size[2 * (__str.__r_.__value_.__r.__words[0] >> 1)];
          v1165 = 1;
          while (1)
          {
            v294 = *size;
            if (*size <= size[1])
              break;
LABEL_336:
            size += 2;
            if (size == v1156)
            {
              v63 = v1159 == (_DWORD)v57;
              if (v1159 == (_DWORD)v57)
                goto LABEL_57;
              v449 = *(const void **)v1222;
              if (*(_QWORD *)v1222 == *(_QWORD *)&v1222[2])
                goto LABEL_57;
              v1212 = 0;
              v1213 = 0;
              v1211 = 0;
              v450 = *(_QWORD *)&v1222[2] - *(_QWORD *)v1222;
              if ((uint64_t)(*(_QWORD *)&v1222[2] - *(_QWORD *)v1222) < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v1211 = operator new(*(_QWORD *)&v1222[2] - *(_QWORD *)v1222);
              v1212 = v1211;
              v451 = (char *)v1211 + 8 * (v450 >> 3);
              v1213 = v451;
              memcpy(v1211, v449, v450);
              v1212 = v451;
              operations_research::Domain::FromValues((int64_t **)&v1211, (unint64_t *)v1214);
              operations_research::Domain::Complement((operations_research::Domain *)v1214, (unint64_t *)&v1228);
              v452 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, (const char *)v57, (const operations_research::Domain *)&v1228, 0);
              if ((v1228.__r_.__value_.__s.__data_[0] & 1) != 0)
              {
                operator delete((void *)v1228.__r_.__value_.__l.__size_);
                if (((uint64_t)v1214[0] & 1) == 0)
                {
LABEL_542:
                  v453 = v1211;
                  if (!v1211)
                    goto LABEL_544;
                  goto LABEL_543;
                }
              }
              else if (((uint64_t)v1214[0] & 1) == 0)
              {
                goto LABEL_542;
              }
              operator delete(v1214[1]);
              v453 = v1211;
              if (!v1211)
              {
LABEL_544:
                if ((v452 & 1) != 0)
                {
                  operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)v57, (unint64_t *)&v1228);
                  if ((__str.__r_.__value_.__s.__data_[0] & 1) != 0)
                    operator delete((void *)__str.__r_.__value_.__l.__size_);
                  v63 = 0;
                  __str = v1228;
LABEL_57:
                  v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  *(_OWORD *)&v1228.__r_.__value_.__r.__words[1] = 0u;
                  v1229 = 0u;
                  v1230 = 0;
                  if (v63 || (v1165 & 1) == 0)
                    goto LABEL_838;
                  v1209 = 0;
                  v1210 = 0;
                  v1208 = 0;
                  v64 = *(const void **)v1225;
                  v65 = (uint64_t)&v62[-*(_QWORD *)v1225];
                  if (v62 != *(char **)v1225)
                  {
                    if (v65 < 0)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v1208 = operator new((size_t)&v62[-*(_QWORD *)v1225]);
                    v1209 = (char *)v1208;
                    v66 = (char *)v1208 + 8 * (v65 >> 3);
                    v1210 = v66;
                    memcpy(v1208, v64, v62 - (_BYTE *)v64);
                    v1209 = v66;
                  }
                  operations_research::Domain::FromValues((int64_t **)&v1208, (unint64_t *)v1214);
                  v67 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, (const char *)v1159, (const operations_research::Domain *)v1214, 0);
                  if (((uint64_t)v1214[0] & 1) != 0)
                    operator delete(v1214[1]);
                  if (v1208)
                  {
                    v1209 = (char *)v1208;
                    operator delete(v1208);
                  }
                  if ((v67 & 1) == 0)
                  {
                    if (*off_2540793B0[0] >= 1
                      && (off_2540793B0[0] != &google::kLogSiteUninitialized
                       || google::InitVLOG3__((google *)off_2540793B0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1)))
                    {
                      google::LogMessage::LogMessage((google::LogMessage *)v1214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 490);
                      v648 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v1214);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v648, (uint64_t)"Empty domain for the target variable in ExpandElement()", 55);
                      google::LogMessage::~LogMessage((google::LogMessage *)v1214);
                    }
                    goto LABEL_1002;
                  }
                  operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)v1159, (unint64_t *)v1214);
                  if ((v1216 & 1) != 0)
                    operator delete((void *)v1217);
                  v1216 = (operations_research::sat::PresolveContext *)v1214[0];
                  v1217 = *(_OWORD *)&v1214[1];
                  if (operations_research::Domain::Size((operations_research::Domain *)&v1216) == 1)
                  {
                    v1214[0] = (operations_research::sat::PresolveContext **)operator new(0x20uLL);
                    *(_OWORD *)&v1214[1] = xmmword_22DCE6650;
                    strcpy((char *)v1214[0], "element: one value array");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1214);
                    if (SHIBYTE(v1214[2]) < 0)
                      operator delete(v1214[0]);
LABEL_1001:
                    operations_research::sat::ConstraintProto::Clear(v1193);
LABEL_1002:
                    if ((_QWORD)v1229)
                    {
                      operator delete(v1228.__r_.__value_.__l.__data_);
                      v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                      v1230 = 0;
                      *(_QWORD *)&v1229 = 0;
                      *(_OWORD *)&v1228.__r_.__value_.__r.__words[1] = 0uLL;
                    }
                    if (*((_QWORD *)&v1229 + 1))
                      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v1229 + 1));
                    goto LABEL_1006;
                  }
                  v651 = (v1216 & 1) != 0 ? (__int128 *)v1217 : &v1217;
                  if ((unint64_t)v1216 < 2)
                  {
LABEL_838:
                    v652 = *(_QWORD *)(v3 + 48);
                    v653 = *(int **)(v652 + 56);
                    if (v653)
                    {
                      v654 = *(int *)(v652 + 48);
                      v655 = *v653;
                      if ((int)v654 < *v653)
                      {
                        *(_DWORD *)(v652 + 48) = v654 + 1;
                        v656 = *(_QWORD *)&v653[2 * v654 + 2];
                        if (*(_DWORD *)(v656 + 60) != 3)
                        {
LABEL_841:
                          operations_research::sat::ConstraintProto::clear_constraint(v656);
                          *(_DWORD *)(v656 + 60) = 3;
                          v657 = *(_QWORD *)(v656 + 8);
                          v658 = (google::protobuf::Arena *)(v657 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v657 & 1) != 0)
                            v658 = *(google::protobuf::Arena **)v658;
                          v659 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v658);
                          *(_QWORD *)(v656 + 48) = v659;
                          goto LABEL_849;
                        }
LABEL_848:
                        v659 = *(_QWORD *)(v656 + 48);
LABEL_849:
                        if ((__str.__r_.__value_.__s.__data_[0] & 1) != 0)
                          p_size = (uint64_t *)__str.__r_.__value_.__l.__size_;
                        else
                          p_size = (uint64_t *)&__str.__r_.__value_.__l.__size_;
                        if (__str.__r_.__value_.__r.__words[0] < 2)
                          goto LABEL_853;
                        v1157 = &p_size[2 * (__str.__r_.__value_.__r.__words[0] >> 1)];
                        v1176 = (unsigned int *)(v659 + 16);
                        if (v63)
                        {
                          do
                          {
                            v673 = *p_size;
                            if (*p_size <= p_size[1])
                            {
                              v674 = v673 << 32;
                              do
                              {
                                v675 = (const char *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)v1186 + 24)
                                                                     + (v674 >> 30));
                                VarValueEncoding = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, v57, v673);
                                operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, v675, (unint64_t *)v1214);
                                v57 = *(unsigned int *)(v659 + 16);
                                if ((_DWORD)v57 == *(_DWORD *)(v659 + 20))
                                  google::protobuf::RepeatedField<int>::Reserve(v1176, v57 + 1);
                                *(_DWORD *)(*(_QWORD *)(v659 + 24) + 4 * v57) = VarValueEncoding;
                                *(_DWORD *)(v659 + 16) = v57 + 1;
                                operations_research::Domain::Domain(&v1205, v673);
                                operations_research::sat::PresolveContext::AddImplyInDomain((operations_research::sat::PresolveContext *)v3, VarValueEncoding, v675, (const operations_research::Domain *)&v1205);
                                LODWORD(v57) = v1181;
                                if ((v1205 & 1) != 0)
                                  operator delete(v1206);
                                if (((uint64_t)v1214[0] & 1) != 0)
                                  operator delete(v1214[1]);
                                v674 += 0x100000000;
                                v71 = v673++ < p_size[1];
                              }
                              while (v71);
                            }
                            p_size += 2;
                          }
                          while (p_size != v1157);
LABEL_853:
                          if ((v1165 & 1) == 0)
                          {
                            HIBYTE(v1214[2]) = 17;
                            strcpy((char *)v1214, "element: expanded");
                            operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1214);
LABEL_999:
                            if (SHIBYTE(v1214[2]) < 0)
                              operator delete(v1214[0]);
                            goto LABEL_1001;
                          }
                          v663 = operations_research::Domain::Min((operations_research::Domain *)&v1216, (const char *)v60);
                          v664 = v1218[1];
                          v665 = (_QWORD *)v1218[0];
                          if (*(char *)v1218[0] <= -2)
                          {
                            do
                            {
                              v666 = (__clz(__rbit64(((*v665 >> 7) & ~*v665 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                              v665 = (_QWORD *)((char *)v665 + v666);
                              v664 += 16 * v666;
                            }
                            while (*(char *)v665 < -1);
                          }
                          if (v665 == (_QWORD *)(v1218[0] + v1219))
                          {
                            v668 = -1;
                            v667 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else
                          {
                            v667 = 0x7FFFFFFFFFFFFFFFLL;
                            v668 = -1;
                            do
                            {
                              v669 = *(_DWORD *)(v664 + 8);
                              if (v669 > v668 || (v669 == v668 ? (v670 = *(_QWORD *)v664 < v667) : (v670 = 0), v670))
                              {
                                v667 = *(_QWORD *)v664;
                                v668 = *(_DWORD *)(v664 + 8);
                              }
                              v671 = *((char *)v665 + 1);
                              v665 = (_QWORD *)((char *)v665 + 1);
                              v664 += 16;
                              if (v671 <= -2)
                              {
                                do
                                {
                                  v672 = (__clz(__rbit64(((*v665 >> 7) & ~*v665 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                                  v665 = (_QWORD *)((char *)v665 + v672);
                                  v664 += 16 * v672;
                                }
                                while (*(char *)v665 < -1);
                              }
                            }
                            while (v665 != (_QWORD *)(v1218[0] + v1219));
                          }
                          if (v668 <= v1151 / 10 || v668 <= 2)
                            v746 = v663;
                          else
                            v746 = v667;
                          *(_QWORD *)v1177 = v746;
                          if (v746 != v663
                            && *off_2540793B8[0] >= 3
                            && (off_2540793B8[0] != &google::kLogSiteUninitialized
                             || google::InitVLOG3__((google *)off_2540793B8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)3)))
                          {
                            google::LogMessage::LogMessage((google::LogMessage *)v1214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 589);
                            v747 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v1214);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v747, (uint64_t)"expand element: choose ", 23);
                            v748 = (_QWORD *)std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v748, (uint64_t)" with usage ", 12);
                            v749 = (_QWORD *)std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v749, (uint64_t)" over ", 6);
                            v750 = (_QWORD *)std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v750, (uint64_t)" among ", 7);
                            v751 = (_QWORD *)std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v751, (uint64_t)" values.", 8);
                            google::LogMessage::~LogMessage((google::LogMessage *)v1214);
                          }
                          v752 = *(_QWORD *)(v3 + 48);
                          v753 = *(int **)(v752 + 56);
                          if (v753)
                          {
                            v754 = *(int *)(v752 + 48);
                            v755 = *v753;
                            if ((int)v754 < *v753)
                            {
                              *(_DWORD *)(v752 + 48) = v754 + 1;
                              v756 = *(_QWORD *)&v753[2 * v754 + 2];
LABEL_981:
                              if (*(_DWORD *)(v756 + 60) == 12)
                              {
                                v759 = *(_QWORD *)(v756 + 48);
                              }
                              else
                              {
                                operations_research::sat::ConstraintProto::clear_constraint(v756);
                                *(_DWORD *)(v756 + 60) = 12;
                                v760 = *(_QWORD *)(v756 + 8);
                                v761 = (google::protobuf::Arena *)(v760 & 0xFFFFFFFFFFFFFFFELL);
                                if ((v760 & 1) != 0)
                                  v761 = *(google::protobuf::Arena **)v761;
                                v759 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v761);
                                *(_QWORD *)(v756 + 48) = v759;
                              }
                              v762 = *(unsigned int *)(v759 + 16);
                              v1169 = (unsigned int *)(v759 + 16);
                              v763 = v762 + 1;
                              if ((_DWORD)v762 == *(_DWORD *)(v759 + 20))
                                google::protobuf::RepeatedField<int>::Reserve(v1169, v762 + 1);
                              *(_DWORD *)(*(_QWORD *)(v759 + 24) + 4 * v762) = v1159;
                              v764 = *(unsigned int *)(v759 + 40);
                              *(_DWORD *)(v759 + 16) = v763;
                              if ((_DWORD)v764 == *(_DWORD *)(v759 + 44))
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v759 + 40), v764 + 1);
                              v765 = -*(_QWORD *)v1177;
                              *(_QWORD *)(*(_QWORD *)(v759 + 48) + 8 * v764) = -1;
                              *(_DWORD *)(v759 + 40) = v764 + 1;
                              if ((__str.__r_.__value_.__s.__data_[0] & 1) != 0)
                                v766 = (uint64_t *)__str.__r_.__value_.__l.__size_;
                              else
                                v766 = (uint64_t *)&__str.__r_.__value_.__l.__size_;
                              if (__str.__r_.__value_.__r.__words[0] >= 2)
                              {
                                *(_QWORD *)v1162 = &v766[2 * (__str.__r_.__value_.__r.__words[0] >> 1)];
                                do
                                {
                                  v772 = *v766;
                                  if (*v766 <= v766[1])
                                  {
                                    v773 = v772 << 32;
                                    do
                                    {
                                      v774 = (const char *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)v1186 + 24)
                                                                           + (v773 >> 30));
                                      v775 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v1192, v1181, v772);
                                      operations_research::sat::PresolveContext::DomainOf(v1192, v774, (unint64_t *)v1214);
                                      v777 = operations_research::Domain::Min((operations_research::Domain *)v1214, v776);
                                      if (((uint64_t)v1214[0] & 1) != 0)
                                        operator delete(v1214[1]);
                                      v778 = v777 - *(_QWORD *)v1177;
                                      if ((v775 & 0x80000000) != 0)
                                      {
                                        v781 = *(unsigned int *)(v759 + 16);
                                        if ((_DWORD)v781 == *(_DWORD *)(v759 + 20))
                                          google::protobuf::RepeatedField<int>::Reserve(v1169, v781 + 1);
                                        *(_DWORD *)(*(_QWORD *)(v759 + 24) + 4 * v781) = ~v775;
                                        *(_DWORD *)(v759 + 16) = v781 + 1;
                                        v782 = *(unsigned int *)(v759 + 40);
                                        if ((_DWORD)v782 == *(_DWORD *)(v759 + 44))
                                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v759 + 40), v782 + 1);
                                        *(_QWORD *)(*(_QWORD *)(v759 + 48) + 8 * v782) = -v778;
                                        *(_DWORD *)(v759 + 40) = v782 + 1;
                                        v765 -= v778;
                                      }
                                      else
                                      {
                                        v779 = *(unsigned int *)(v759 + 16);
                                        if ((_DWORD)v779 == *(_DWORD *)(v759 + 20))
                                          google::protobuf::RepeatedField<int>::Reserve(v1169, v779 + 1);
                                        *(_DWORD *)(*(_QWORD *)(v759 + 24) + 4 * v779) = v775;
                                        *(_DWORD *)(v759 + 16) = v779 + 1;
                                        v780 = *(unsigned int *)(v759 + 40);
                                        if ((_DWORD)v780 == *(_DWORD *)(v759 + 44))
                                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v759 + 40), v780 + 1);
                                        *(_QWORD *)(*(_QWORD *)(v759 + 48) + 8 * v780) = v778;
                                        *(_DWORD *)(v759 + 40) = v780 + 1;
                                      }
                                      v773 += 0x100000000;
                                      v71 = v772++ < v766[1];
                                    }
                                    while (v71);
                                  }
                                  v766 += 2;
                                }
                                while (v766 != *(uint64_t **)v1162);
                              }
                              v768 = *(unsigned int *)(v759 + 64);
                              v767 = *(_DWORD *)(v759 + 68);
                              v769 = v768 + 1;
                              v3 = (uint64_t)v1192;
                              if ((_DWORD)v768 == v767)
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v759 + 64), v768 + 1);
                                v767 = *(_DWORD *)(v759 + 68);
                              }
                              v770 = *(_QWORD *)(v759 + 72);
                              *(_QWORD *)(v770 + 8 * v768) = v765;
                              *(_DWORD *)(v759 + 64) = v769;
                              if (v769 == v767)
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v759 + 64), v768 + 2);
                                v770 = *(_QWORD *)(v759 + 72);
                              }
                              *(_QWORD *)(v770 + 8 * v769) = v765;
                              *(_DWORD *)(v759 + 64) = v768 + 2;
                              v1214[0] = (operations_research::sat::PresolveContext **)operator new(0x20uLL);
                              *(_OWORD *)&v1214[1] = xmmword_22DCE6550;
                              strcpy((char *)v1214[0], "element: expanded value element");
                              operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v1192, (uint64_t)v1214);
                              goto LABEL_999;
                            }
                            if (v755 != *(_DWORD *)(v752 + 52))
                            {
LABEL_980:
                              *v753 = v755 + 1;
                              v756 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v752 + 40));
                              v757 = *(_QWORD *)(v752 + 56);
                              v758 = *(int *)(v752 + 48);
                              *(_DWORD *)(v752 + 48) = v758 + 1;
                              *(_QWORD *)(v757 + 8 * v758 + 8) = v756;
                              goto LABEL_981;
                            }
                          }
                          else
                          {
                            v755 = *(_DWORD *)(v752 + 52);
                          }
                          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v752 + 40), v755 + 1);
                          v753 = *(int **)(v752 + 56);
                          v755 = *v753;
                          goto LABEL_980;
                        }
                        while (1)
                        {
                          v677 = *p_size;
                          if (*p_size <= p_size[1])
                            break;
LABEL_882:
                          p_size += 2;
                          if (p_size == v1157)
                            goto LABEL_853;
                        }
                        while (1)
                        {
                          v678 = (const char *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)v1186 + 24) + 4 * (int)v677);
                          v679 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, v57, v677);
                          operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, v678, (unint64_t *)v1214);
                          v680 = *(unsigned int *)(v659 + 16);
                          if ((_DWORD)v680 == *(_DWORD *)(v659 + 20))
                            google::protobuf::RepeatedField<int>::Reserve(v1176, v680 + 1);
                          *(_DWORD *)(*(_QWORD *)(v659 + 24) + 4 * v680) = (_DWORD)v679;
                          *(_DWORD *)(v659 + 16) = v680 + 1;
                          if (operations_research::Domain::Size((operations_research::Domain *)&v1216) == 1)
                          {
                            v681 = &v1216;
                          }
                          else
                          {
                            if (operations_research::Domain::Size((operations_research::Domain *)v1214) != 1)
                            {
                              v691 = *(_QWORD *)(v3 + 48);
                              v692 = *(int **)(v691 + 56);
                              if (v692)
                              {
                                v693 = *(int *)(v691 + 48);
                                v694 = *v692;
                                if ((int)v693 < *v692)
                                {
                                  *(_DWORD *)(v691 + 48) = v693 + 1;
                                  v695 = *(_QWORD *)&v692[2 * v693 + 2];
                                  v697 = *(unsigned int *)(v695 + 16);
                                  v696 = (unsigned int *)(v695 + 16);
                                  v698 = v697 + 1;
                                  if ((_DWORD)v697 != *(_DWORD *)(v695 + 20))
                                  {
LABEL_910:
                                    *(_DWORD *)(*(_QWORD *)(v695 + 24) + 4 * v697) = (_DWORD)v679;
                                    *(_DWORD *)(v695 + 16) = v698;
                                    if (*(_DWORD *)(v695 + 60) == 12)
                                    {
                                      v701 = *(_QWORD *)(v695 + 48);
                                      v703 = *(unsigned int *)(v701 + 16);
                                      v702 = (unsigned int *)(v701 + 16);
                                      v704 = v703 + 1;
                                      if ((_DWORD)v703 != *(_DWORD *)(v701 + 20))
                                        goto LABEL_917;
LABEL_916:
                                      google::protobuf::RepeatedField<int>::Reserve(v702, v704);
                                      goto LABEL_917;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v695);
                                    *(_DWORD *)(v695 + 60) = 12;
                                    v705 = *(_QWORD *)(v695 + 8);
                                    v706 = (google::protobuf::Arena *)(v705 & 0xFFFFFFFFFFFFFFFELL);
                                    if ((v705 & 1) != 0)
                                      v706 = *(google::protobuf::Arena **)v706;
                                    v701 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v706);
                                    *(_QWORD *)(v695 + 48) = v701;
                                    v703 = *(unsigned int *)(v701 + 16);
                                    v702 = (unsigned int *)(v701 + 16);
                                    v704 = v703 + 1;
                                    if ((_DWORD)v703 == *(_DWORD *)(v701 + 20))
                                      goto LABEL_916;
LABEL_917:
                                    *(_DWORD *)(*(_QWORD *)(v701 + 24) + 4 * v703) = (_DWORD)v678;
                                    *(_DWORD *)(v701 + 16) = v704;
                                    if (*(_DWORD *)(v695 + 60) == 12)
                                    {
                                      v707 = *(_QWORD *)(v695 + 48);
                                      v709 = *(unsigned int *)(v707 + 40);
                                      v708 = (unsigned int *)(v707 + 40);
                                      v710 = v709 + 1;
                                      if ((_DWORD)v709 != *(_DWORD *)(v707 + 44))
                                        goto LABEL_924;
LABEL_923:
                                      google::protobuf::RepeatedField<long long>::Reserve(v708, v710);
                                      goto LABEL_924;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v695);
                                    *(_DWORD *)(v695 + 60) = 12;
                                    v711 = *(_QWORD *)(v695 + 8);
                                    v712 = (google::protobuf::Arena *)(v711 & 0xFFFFFFFFFFFFFFFELL);
                                    if ((v711 & 1) != 0)
                                      v712 = *(google::protobuf::Arena **)v712;
                                    v707 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v712);
                                    *(_QWORD *)(v695 + 48) = v707;
                                    v709 = *(unsigned int *)(v707 + 40);
                                    v708 = (unsigned int *)(v707 + 40);
                                    v710 = v709 + 1;
                                    if ((_DWORD)v709 == *(_DWORD *)(v707 + 44))
                                      goto LABEL_923;
LABEL_924:
                                    *(_QWORD *)(*(_QWORD *)(v707 + 48) + 8 * v709) = 1;
                                    *(_DWORD *)(v707 + 40) = v710;
                                    if (*(_DWORD *)(v695 + 60) == 12)
                                    {
                                      v713 = *(_QWORD *)(v695 + 48);
                                      v715 = *(unsigned int *)(v713 + 16);
                                      v714 = (unsigned int *)(v713 + 16);
                                      v716 = v715 + 1;
                                      if ((_DWORD)v715 != *(_DWORD *)(v713 + 20))
                                        goto LABEL_931;
LABEL_930:
                                      google::protobuf::RepeatedField<int>::Reserve(v714, v716);
                                      goto LABEL_931;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v695);
                                    *(_DWORD *)(v695 + 60) = 12;
                                    v717 = *(_QWORD *)(v695 + 8);
                                    v718 = (google::protobuf::Arena *)(v717 & 0xFFFFFFFFFFFFFFFELL);
                                    if ((v717 & 1) != 0)
                                      v718 = *(google::protobuf::Arena **)v718;
                                    v713 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v718);
                                    *(_QWORD *)(v695 + 48) = v713;
                                    v715 = *(unsigned int *)(v713 + 16);
                                    v714 = (unsigned int *)(v713 + 16);
                                    v716 = v715 + 1;
                                    if ((_DWORD)v715 == *(_DWORD *)(v713 + 20))
                                      goto LABEL_930;
LABEL_931:
                                    *(_DWORD *)(*(_QWORD *)(v713 + 24) + 4 * v715) = v1159;
                                    *(_DWORD *)(v713 + 16) = v716;
                                    if (*(_DWORD *)(v695 + 60) == 12)
                                    {
                                      v719 = *(_QWORD *)(v695 + 48);
                                      v721 = *(unsigned int *)(v719 + 40);
                                      v720 = (unsigned int *)(v719 + 40);
                                      v722 = v721 + 1;
                                      if ((_DWORD)v721 != *(_DWORD *)(v719 + 44))
                                        goto LABEL_938;
LABEL_937:
                                      google::protobuf::RepeatedField<long long>::Reserve(v720, v722);
                                      goto LABEL_938;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v695);
                                    *(_DWORD *)(v695 + 60) = 12;
                                    v723 = *(_QWORD *)(v695 + 8);
                                    v724 = (google::protobuf::Arena *)(v723 & 0xFFFFFFFFFFFFFFFELL);
                                    if ((v723 & 1) != 0)
                                      v724 = *(google::protobuf::Arena **)v724;
                                    v719 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v724);
                                    *(_QWORD *)(v695 + 48) = v719;
                                    v721 = *(unsigned int *)(v719 + 40);
                                    v720 = (unsigned int *)(v719 + 40);
                                    v722 = v721 + 1;
                                    if ((_DWORD)v721 == *(_DWORD *)(v719 + 44))
                                      goto LABEL_937;
LABEL_938:
                                    *(_QWORD *)(*(_QWORD *)(v719 + 48) + 8 * v721) = -1;
                                    *(_DWORD *)(v719 + 40) = v722;
                                    if (*(_DWORD *)(v695 + 60) == 12)
                                    {
                                      v725 = *(_QWORD *)(v695 + 48);
                                      v727 = *(unsigned int *)(v725 + 64);
                                      v726 = (unsigned int *)(v725 + 64);
                                      v728 = v727 + 1;
                                      if ((_DWORD)v727 != *(_DWORD *)(v725 + 68))
                                        goto LABEL_945;
LABEL_944:
                                      google::protobuf::RepeatedField<long long>::Reserve(v726, v728);
                                      goto LABEL_945;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v695);
                                    *(_DWORD *)(v695 + 60) = 12;
                                    v729 = *(_QWORD *)(v695 + 8);
                                    v730 = (google::protobuf::Arena *)(v729 & 0xFFFFFFFFFFFFFFFELL);
                                    if ((v729 & 1) != 0)
                                      v730 = *(google::protobuf::Arena **)v730;
                                    v725 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v730);
                                    *(_QWORD *)(v695 + 48) = v725;
                                    v727 = *(unsigned int *)(v725 + 64);
                                    v726 = (unsigned int *)(v725 + 64);
                                    v728 = v727 + 1;
                                    if ((_DWORD)v727 == *(_DWORD *)(v725 + 68))
                                      goto LABEL_944;
LABEL_945:
                                    *(_QWORD *)(*(_QWORD *)(v725 + 72) + 8 * v727) = 0;
                                    *(_DWORD *)(v725 + 64) = v728;
                                    if (*(_DWORD *)(v695 + 60) == 12)
                                    {
                                      v731 = *(_QWORD *)(v695 + 48);
                                      v733 = *(unsigned int *)(v731 + 64);
                                      v732 = (unsigned int *)(v731 + 64);
                                      v734 = v733 + 1;
                                      if ((_DWORD)v733 != *(_DWORD *)(v731 + 68))
                                        goto LABEL_952;
                                    }
                                    else
                                    {
                                      operations_research::sat::ConstraintProto::clear_constraint(v695);
                                      *(_DWORD *)(v695 + 60) = 12;
                                      v735 = *(_QWORD *)(v695 + 8);
                                      v736 = (google::protobuf::Arena *)(v735 & 0xFFFFFFFFFFFFFFFELL);
                                      if ((v735 & 1) != 0)
                                        v736 = *(google::protobuf::Arena **)v736;
                                      v731 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v736);
                                      *(_QWORD *)(v695 + 48) = v731;
                                      v733 = *(unsigned int *)(v731 + 64);
                                      v732 = (unsigned int *)(v731 + 64);
                                      v734 = v733 + 1;
                                      if ((_DWORD)v733 != *(_DWORD *)(v731 + 68))
                                        goto LABEL_952;
                                    }
                                    google::protobuf::RepeatedField<long long>::Reserve(v732, v734);
LABEL_952:
                                    *(_QWORD *)(*(_QWORD *)(v731 + 72) + 8 * v733) = 0;
                                    *(_DWORD *)(v731 + 64) = v734;
                                    goto LABEL_959;
                                  }
LABEL_909:
                                  google::protobuf::RepeatedField<int>::Reserve(v696, v698);
                                  goto LABEL_910;
                                }
                                if (v694 == *(_DWORD *)(v691 + 52))
                                {
LABEL_907:
                                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v691 + 40), v694 + 1);
                                  v692 = *(int **)(v691 + 56);
                                  v694 = *v692;
                                }
                                *v692 = v694 + 1;
                                v695 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v691 + 40));
                                v699 = *(_QWORD *)(v691 + 56);
                                v700 = *(int *)(v691 + 48);
                                *(_DWORD *)(v691 + 48) = v700 + 1;
                                *(_QWORD *)(v699 + 8 * v700 + 8) = v695;
                                v697 = *(unsigned int *)(v695 + 16);
                                v696 = (unsigned int *)(v695 + 16);
                                v698 = v697 + 1;
                                if ((_DWORD)v697 != *(_DWORD *)(v695 + 20))
                                  goto LABEL_910;
                                goto LABEL_909;
                              }
                              v694 = *(_DWORD *)(v691 + 52);
                              goto LABEL_907;
                            }
                            if ((v1165 & 1) != 0)
                            {
                              v1205 = 0;
                              v682 = (void *)operations_research::Domain::Min((operations_research::Domain *)v1214, (const char *)v60);
                              v683 = 0;
                              v1205 = v682;
                              v684 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                      + (unint64_t)v682)
                                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                        * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                         + (_QWORD)v682));
                              v685 = v1218[1];
                              for (i = (v1218[0] >> 12) ^ (v684 >> 7); ; i = v683 + v687)
                              {
                                v687 = i & v1219;
                                v688 = *(_QWORD *)(v1218[0] + v687);
                                v689 = ((v688 ^ (0x101010101010101 * (v684 & 0x7F))) - 0x101010101010101) & ~(v688 ^ (0x101010101010101 * (v684 & 0x7F))) & 0x8080808080808080;
                                if (v689)
                                  break;
LABEL_898:
                                if ((v688 & (~v688 << 6) & 0x8080808080808080) != 0)
                                {
                                  v690 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1218, v684);
                                  v685 = v1218[1];
                                  v737 = v1218[1] + 16 * v690;
                                  *(_QWORD *)v737 = v1205;
                                  *(_DWORD *)(v737 + 8) = 0;
                                  v682 = v1205;
                                  goto LABEL_954;
                                }
                                v683 += 8;
                              }
                              while (1)
                              {
                                v690 = (v687 + (__clz(__rbit64(v689)) >> 3)) & v1219;
                                if (*(void **)(v1218[1] + 16 * v690) == v682)
                                  break;
                                v689 &= v689 - 1;
                                if (!v689)
                                  goto LABEL_898;
                              }
LABEL_954:
                              if (*(int *)(v685 + 16 * v690 + 8) < 2)
                              {
                                operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)v3, v679, v1159, (uint64_t)v682);
                              }
                              else
                              {
                                v738 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, v1159, (uint64_t)v682);
                                operations_research::sat::PresolveContext::AddImplication((operations_research::sat::PresolveContext *)v3, (int)v679, v738);
                                v739 = gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::BoolArgumentProto *,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>>((uint64_t *)&v1228, &v1205);
                                v740 = *(_QWORD *)v739;
                                v743 = *(_DWORD *)(*(_QWORD *)v739 + 16);
                                v741 = (unsigned int *)(*(_QWORD *)v739 + 16);
                                v742 = v743;
                                v744 = v743 + 1;
                                if (v743 == *(_DWORD *)(v740 + 20))
                                  google::protobuf::RepeatedField<int>::Reserve(v741, v744);
                                *(_DWORD *)(*(_QWORD *)(v740 + 24) + 4 * v742) = (_DWORD)v679;
                                *(_DWORD *)(v740 + 16) = v744;
                              }
                              goto LABEL_959;
                            }
                            v681 = (operations_research::sat::PresolveContext **)v1214;
                            LODWORD(v678) = v1159;
                          }
                          operations_research::sat::PresolveContext::AddImplyInDomain((operations_research::sat::PresolveContext *)v3, v679, v678, (const operations_research::Domain *)v681);
LABEL_959:
                          if (((uint64_t)v1214[0] & 1) != 0)
                            operator delete(v1214[1]);
                          v71 = v677++ < p_size[1];
                          if (!v71)
                            goto LABEL_882;
                        }
                      }
                      if (v655 != *(_DWORD *)(v652 + 52))
                      {
LABEL_847:
                        *v653 = v655 + 1;
                        v656 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v652 + 40));
                        v660 = *(_QWORD *)(v652 + 56);
                        v661 = *(int *)(v652 + 48);
                        *(_DWORD *)(v652 + 48) = v661 + 1;
                        *(_QWORD *)(v660 + 8 * v661 + 8) = v656;
                        if (*(_DWORD *)(v656 + 60) != 3)
                          goto LABEL_841;
                        goto LABEL_848;
                      }
                    }
                    else
                    {
                      v655 = *(_DWORD *)(v652 + 52);
                    }
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v652 + 40), v655 + 1);
                    v653 = *(int **)(v652 + 56);
                    v655 = *v653;
                    goto LABEL_847;
                  }
                  v783 = &v651[(unint64_t)v1216 >> 1];
                  while (1)
                  {
                    v1214[0] = 0;
                    v784 = *((_QWORD *)v651 + 1);
                    v1214[0] = *(operations_research::sat::PresolveContext ***)v651;
                    if ((uint64_t)v1214[0] <= v784)
                      break;
LABEL_1039:
                    if (++v651 == v783)
                      goto LABEL_838;
                  }
                  while (*(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>>((uint64_t *)v1218, v1214) < 2)
                  {
LABEL_1043:
                    v785 = v1214[0]++;
                    if ((uint64_t)v785 >= *((_QWORD *)v651 + 1))
                      goto LABEL_1039;
                  }
                  v786 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, v1159, (uint64_t)v1214[0]);
                  v787 = *(_QWORD *)(v3 + 48);
                  v788 = *(int **)(v787 + 56);
                  if (v788)
                  {
                    v789 = *(int *)(v787 + 48);
                    v790 = *v788;
                    if ((int)v789 < *v788)
                    {
                      *(_DWORD *)(v787 + 48) = v789 + 1;
                      v791 = *(_QWORD *)&v788[2 * v789 + 2];
                      if (*(_DWORD *)(v791 + 60) != 3)
                      {
LABEL_1048:
                        operations_research::sat::ConstraintProto::clear_constraint(v791);
                        *(_DWORD *)(v791 + 60) = 3;
                        v792 = *(_QWORD *)(v791 + 8);
                        v793 = (google::protobuf::Arena *)(v792 & 0xFFFFFFFFFFFFFFFELL);
                        if ((v792 & 1) != 0)
                          v793 = *(google::protobuf::Arena **)v793;
                        v794 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v793);
                        *(_QWORD *)(v791 + 48) = v794;
LABEL_1056:
                        v797 = 0;
                        v60 = ((((unint64_t)v1214[0]
                               + (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed)
                              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                 * ((_QWORD)v1214[0]
                                                                                  + (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed));
                        v798 = v1228.__r_.__value_.__l.__size_;
                        for (j = (v60 >> 7) ^ (v1228.__r_.__value_.__r.__words[0] >> 12); ; j = v797 + v800)
                        {
                          v800 = j & v1229;
                          v801 = *(_QWORD *)(v1228.__r_.__value_.__r.__words[0] + v800);
                          v802 = ((v801 ^ (0x101010101010101 * (v60 & 0x7F))) - 0x101010101010101) & ~(v801 ^ (0x101010101010101 * (v60 & 0x7F))) & 0x8080808080808080;
                          if (v802)
                            break;
LABEL_1060:
                          if ((v801 & (~v801 << 6) & 0x8080808080808080) != 0)
                          {
                            v803 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::prepare_insert((uint64_t *)&v1228, v60);
                            v798 = v1228.__r_.__value_.__l.__size_;
                            v804 = v1228.__r_.__value_.__l.__size_ + 16 * v803;
                            *(operations_research::sat::PresolveContext ***)v804 = v1214[0];
                            *(_QWORD *)(v804 + 8) = 0;
                            goto LABEL_1063;
                          }
                          v797 += 8;
                        }
                        while (1)
                        {
                          v803 = (v800 + (__clz(__rbit64(v802)) >> 3)) & v1229;
                          if (*(operations_research::sat::PresolveContext ***)(v1228.__r_.__value_.__l.__size_
                                                                              + 16 * v803) == v1214[0])
                            break;
                          v802 &= v802 - 1;
                          if (!v802)
                            goto LABEL_1060;
                        }
LABEL_1063:
                        *(_QWORD *)(v798 + 16 * v803 + 8) = v794;
                        v805 = *(unsigned int *)(v794 + 16);
                        if ((_DWORD)v805 == *(_DWORD *)(v794 + 20))
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v794 + 16), v805 + 1);
                        *(_DWORD *)(*(_QWORD *)(v794 + 24) + 4 * v805) = ~v786;
                        *(_DWORD *)(v794 + 16) = v805 + 1;
                        goto LABEL_1043;
                      }
LABEL_1055:
                      v794 = *(_QWORD *)(v791 + 48);
                      goto LABEL_1056;
                    }
                    if (v790 != *(_DWORD *)(v787 + 52))
                    {
LABEL_1054:
                      *v788 = v790 + 1;
                      v791 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v787 + 40));
                      v795 = *(_QWORD *)(v787 + 56);
                      v796 = *(int *)(v787 + 48);
                      *(_DWORD *)(v787 + 48) = v796 + 1;
                      *(_QWORD *)(v795 + 8 * v796 + 8) = v791;
                      if (*(_DWORD *)(v791 + 60) != 3)
                        goto LABEL_1048;
                      goto LABEL_1055;
                    }
                  }
                  else
                  {
                    v790 = *(_DWORD *)(v787 + 52);
                  }
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v787 + 40), v790 + 1);
                  v788 = *(int **)(v787 + 56);
                  v790 = *v788;
                  goto LABEL_1054;
                }
                if (*off_2540793A8[0] >= 1
                  && (off_2540793A8[0] != &google::kLogSiteUninitialized
                   || google::InitVLOG3__((google *)off_2540793A8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1)))
                {
                  v649 = google::LogMessage::LogMessage((google::LogMessage *)&v1228, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 473);
                  v650 = (_QWORD *)google::LogMessage::stream(v649);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v650, (uint64_t)"No compatible variable domains in ExpandElement()", 49);
                  google::LogMessage::~LogMessage((google::LogMessage *)&v1228);
                }
                *((_BYTE *)&v1228.__r_.__value_.__s + 23) = 0;
                v1228.__r_.__value_.__s.__data_[0] = 0;
                operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v3, (uint64_t)&v1228);
                if (SHIBYTE(v1228.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v1228.__r_.__value_.__l.__data_);
LABEL_1006:
                if ((v1216 & 1) != 0)
                {
                  operator delete((void *)v1217);
                  if ((__str.__r_.__value_.__s.__data_[0] & 1) == 0)
                  {
LABEL_1008:
                    v771 = *(void **)v1222;
                    if (!*(_QWORD *)v1222)
                      goto LABEL_1010;
                    goto LABEL_1009;
                  }
                }
                else if ((__str.__r_.__value_.__s.__data_[0] & 1) == 0)
                {
                  goto LABEL_1008;
                }
                operator delete((void *)__str.__r_.__value_.__l.__size_);
                v771 = *(void **)v1222;
                if (!*(_QWORD *)v1222)
                {
LABEL_1010:
                  if (*(_QWORD *)v1225)
                    operator delete(*(void **)v1225);
                  if ((_QWORD)v1219)
                  {
                    operator delete((void *)v1218[0]);
                    v1218[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                    v1220 = 0;
                    v1218[2] = 0;
                    *(_QWORD *)&v1219 = 0;
                    v1218[1] = 0;
                  }
                  v615 = (_QWORD *)*((_QWORD *)&v1219 + 1);
                  if (!*((_QWORD *)&v1219 + 1))
                    goto LABEL_1508;
                  goto LABEL_784;
                }
LABEL_1009:
                operator delete(v771);
                goto LABEL_1010;
              }
LABEL_543:
              v1212 = v453;
              operator delete(v453);
              goto LABEL_544;
            }
          }
          while (1)
          {
            operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)v1186 + 24) + 4 * (int)v294), (unint64_t *)&v1228);
            operations_research::Domain::IntersectionWith(&v1228, (const operations_research::Domain *)&v1216, (unint64_t *)v1214);
            IsEmpty = operations_research::Domain::IsEmpty((operations_research::Domain *)v1214);
            if (((uint64_t)v1214[0] & 1) != 0)
              operator delete(v1214[1]);
            if (IsEmpty)
              break;
            v298 = operations_research::Domain::Min((operations_research::Domain *)&v1228, (const char *)v60);
            if (v298 != operations_research::Domain::Max((operations_research::Domain *)&v1228, v299))
            {
              v1165 = 0;
              v315 = 4;
              goto LABEL_397;
            }
            v57 = v1181;
            v300 = operations_research::Domain::Min((operations_research::Domain *)&v1228, (const char *)v60);
            v301 = 0;
            v60 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v300)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v300));
            v302 = v1218[1];
            for (k = (v1218[0] >> 12) ^ (v60 >> 7); ; k = v301 + v304)
            {
              v304 = k & v1219;
              v305 = *(_QWORD *)(v1218[0] + v304);
              v306 = ((v305 ^ (0x101010101010101 * (v60 & 0x7F))) - 0x101010101010101) & ~(v305 ^ (0x101010101010101 * (v60 & 0x7F))) & 0x8080808080808080;
              if (v306)
                break;
LABEL_351:
              if ((v305 & (~v305 << 6) & 0x8080808080808080) != 0)
              {
                v307 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1218, v60);
                v302 = v1218[1];
                v325 = v1218[1] + 16 * v307;
                *(_QWORD *)v325 = v300;
                *(_DWORD *)(v325 + 8) = 0;
                goto LABEL_375;
              }
              v301 += 8;
            }
            while (1)
            {
              v307 = (v304 + (__clz(__rbit64(v306)) >> 3)) & v1219;
              if (*(_QWORD *)(v1218[1] + 16 * v307) == v300)
                break;
              v306 &= v306 - 1;
              if (!v306)
                goto LABEL_351;
            }
LABEL_375:
            v326 = v302 + 16 * v307;
            v327 = *(_DWORD *)(v326 + 8);
            *(_DWORD *)(v326 + 8) = v327 + 1;
            if (!v327)
            {
              if ((unint64_t)v62 < *(_QWORD *)v1174)
              {
                *(_QWORD *)v62 = v300;
                v328 = (uint64_t)(v62 + 8);
                goto LABEL_396;
              }
              v329 = (v62 - v293) >> 3;
              v330 = v329 + 1;
              if ((unint64_t)(v329 + 1) >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(*(_QWORD *)v1174 - (_QWORD)v293) >> 2 > v330)
                v330 = (uint64_t)(*(_QWORD *)v1174 - (_QWORD)v293) >> 2;
              if (*(_QWORD *)v1174 - (_QWORD)v293 >= 0x7FFFFFFFFFFFFFF8uLL)
                v331 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v331 = v330;
              if (v331)
              {
                if (v331 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v332 = operator new(8 * v331);
                v333 = (uint64_t *)&v332[8 * v329];
                *v333 = v300;
                v328 = (uint64_t)(v333 + 1);
                if (v62 == v293)
                  goto LABEL_393;
LABEL_390:
                v334 = v62 - 8 - v293;
                if (v334 < 0x168)
                {
                  v335 = v62;
                  goto LABEL_392;
                }
                if (&v332[v62 - v293 - 8 - (v334 & 0xFFFFFFFFFFFFFFF8)] > &v332[v62 - v293 - 8])
                {
                  v335 = v62;
                  goto LABEL_392;
                }
                if (&v62[-(v334 & 0xFFFFFFFFFFFFFFF8) - 8] > v62 - 8)
                {
                  v335 = v62;
                  goto LABEL_392;
                }
                if ((unint64_t)(v293 - v332) < 0x20)
                {
                  v335 = v62;
                  goto LABEL_392;
                }
                v337 = (v334 >> 3) + 1;
                v338 = 8 * (v337 & 0x3FFFFFFFFFFFFFFCLL);
                v335 = &v62[-v338];
                v333 = (uint64_t *)((char *)v333 - v338);
                v339 = &v332[8 * v329 - 16];
                v340 = v62 - 16;
                v341 = v337 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v342 = *(_OWORD *)v340;
                  *(v339 - 1) = *((_OWORD *)v340 - 1);
                  *v339 = v342;
                  v339 -= 2;
                  v340 -= 32;
                  v341 -= 4;
                }
                while (v341);
                if (v337 != (v337 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_392:
                    v336 = *((_QWORD *)v335 - 1);
                    v335 -= 8;
                    *--v333 = v336;
                  }
                  while (v335 != v293);
                }
              }
              else
              {
                v332 = 0;
                v333 = (uint64_t *)(8 * v329);
                *(_QWORD *)(8 * v329) = v300;
                v328 = 8 * v329 + 8;
                if (v62 != v293)
                  goto LABEL_390;
              }
LABEL_393:
              *(_QWORD *)v1225 = v333;
              *(_QWORD *)&v1225[8] = v328;
              *(_QWORD *)v1174 = &v332[8 * v331];
              *(_QWORD *)&v1225[16] = *(_QWORD *)v1174;
              if (v293)
                operator delete(v293);
              v293 = (char *)v333;
              v3 = (uint64_t)v1192;
LABEL_396:
              v315 = 0;
              *(_QWORD *)&v1225[8] = v328;
              v62 = (char *)v328;
LABEL_397:
              v57 = v1181;
              goto LABEL_398;
            }
            v315 = 0;
LABEL_398:
            if ((v1228.__r_.__value_.__s.__data_[0] & 1) != 0)
              operator delete((void *)v1228.__r_.__value_.__l.__size_);
            if (v315 == 6 || !v315)
            {
              v71 = v294++ < size[1];
              if (v71)
                continue;
            }
            goto LABEL_336;
          }
          v296 = *(char **)&v1222[2];
          if (*(_QWORD *)&v1222[2] < *(_QWORD *)&v1222[4])
          {
            **(_QWORD **)&v1222[2] = v294;
            v297 = (uint64_t)(v296 + 8);
LABEL_373:
            v57 = v1181;
            *(_QWORD *)&v1222[2] = v297;
            v315 = 6;
            v3 = (uint64_t)v1192;
            goto LABEL_398;
          }
          v308 = *(char **)v1222;
          v309 = (uint64_t)(*(_QWORD *)&v1222[2] - *(_QWORD *)v1222) >> 3;
          v310 = v309 + 1;
          if ((unint64_t)(v309 + 1) >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v311 = *(_QWORD *)&v1222[4] - *(_QWORD *)v1222;
          if ((uint64_t)(*(_QWORD *)&v1222[4] - *(_QWORD *)v1222) >> 2 > v310)
            v310 = v311 >> 2;
          if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF8)
            v312 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v312 = v310;
          if (v312)
          {
            if (v312 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v313 = operator new(8 * v312);
            v314 = &v313[8 * v309];
            *v314 = v294;
            v297 = (uint64_t)(v314 + 1);
            if (v296 == v308)
              goto LABEL_371;
          }
          else
          {
            v313 = 0;
            v314 = (_QWORD *)(8 * v309);
            *(_QWORD *)(8 * v309) = v294;
            v297 = 8 * v309 + 8;
            if (v296 == v308)
            {
LABEL_371:
              *(_QWORD *)v1222 = v314;
              *(_QWORD *)&v1222[4] = &v313[8 * v312];
              if (v308)
                operator delete(v308);
              goto LABEL_373;
            }
          }
          v316 = v296 - 8 - v308;
          if (v316 < 0x58)
            goto LABEL_1570;
          if ((unint64_t)(v308 - v313) < 0x20)
            goto LABEL_1570;
          v317 = (v316 >> 3) + 1;
          v318 = 8 * (v317 & 0x3FFFFFFFFFFFFFFCLL);
          v319 = &v296[-v318];
          v314 = (_QWORD *)((char *)v314 - v318);
          v320 = &v313[8 * v309 - 16];
          v321 = v296 - 16;
          v322 = v317 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v323 = *(_OWORD *)v321;
            *(v320 - 1) = *((_OWORD *)v321 - 1);
            *v320 = v323;
            v320 -= 2;
            v321 -= 32;
            v322 -= 4;
          }
          while (v322);
          v296 = v319;
          if (v317 != (v317 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1570:
            do
            {
              v324 = *((_QWORD *)v296 - 1);
              v296 -= 8;
              *--v314 = v324;
            }
            while (v296 != v308);
          }
          goto LABEL_371;
        case 0x10:
          v68 = *((_QWORD *)v1193 + 6);
          if (!*(_BYTE *)(v68 + 60))
          {
            if (a1[462])
            goto LABEL_1508;
          }
          v69 = *(unsigned int *)(v68 + 16);
          v70 = (*(_DWORD *)(v68 + 40) / (int)v69);
          std::vector<std::vector<long long>>::vector(v1218, (int)v70);
          v71 = (int)v70 < 1 || (int)v69 < 1;
          *(_QWORD *)v1187 = v68;
          *(_QWORD *)v1166 = v69;
          if (v71)
            goto LABEL_79;
          v170 = 0;
          v171 = 0;
          *(_QWORD *)v1160 = v70;
          while (2)
          {
            v172 = v171;
            v171 += v69;
            v1172 = v171;
            v1183 = v170;
            do
            {
              while (1)
              {
                v173 = v1218[0] + 24 * (_QWORD)v170;
                v174 = *(_QWORD *)(*(_QWORD *)(v68 + 48) + 8 * v172);
                v176 = (uint64_t *)(v173 + 8);
                v175 = *(char **)(v173 + 8);
                v177 = *(_QWORD *)(v173 + 16);
                if ((unint64_t)v175 >= v177)
                  break;
                *(_QWORD *)v175 = v174;
                ++v172;
                *v176 = (uint64_t)(v175 + 8);
                if (v171 == (_DWORD)v172)
                  goto LABEL_207;
              }
              v178 = *(char **)v173;
              v179 = (uint64_t)&v175[-*(_QWORD *)v173];
              v180 = v179 >> 3;
              v181 = (v179 >> 3) + 1;
              if (v181 >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v182 = v177 - (_QWORD)v178;
              if (v182 >> 2 > v181)
                v181 = v182 >> 2;
              if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
                v183 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v183 = v181;
              if (!v183)
              {
                v185 = 0;
                v186 = (_QWORD *)(8 * v180);
                *(_QWORD *)(8 * v180) = v174;
                v187 = 8 * v180 + 8;
                if (v175 == v178)
                  goto LABEL_228;
LABEL_222:
                v188 = v175 - 8 - v178;
                if (v188 < 0x58)
                  goto LABEL_1571;
                if ((unint64_t)(v175 - &v185[v179]) < 0x20)
                  goto LABEL_1571;
                v189 = (v188 >> 3) + 1;
                v190 = 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
                v191 = &v175[-v190];
                v186 = (_QWORD *)((char *)v186 - v190);
                v192 = &v185[8 * v180 - 16];
                v193 = v175 - 16;
                v194 = v189 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v195 = *(_OWORD *)v193;
                  *(v192 - 1) = *((_OWORD *)v193 - 1);
                  *v192 = v195;
                  v192 -= 2;
                  v193 -= 32;
                  v194 -= 4;
                }
                while (v194);
                v175 = v191;
                if (v189 != (v189 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1571:
                  do
                  {
                    v196 = *((_QWORD *)v175 - 1);
                    v175 -= 8;
                    *--v186 = v196;
                  }
                  while (v175 != v178);
                }
                goto LABEL_228;
              }
              if (v183 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v184 = v183;
              v185 = operator new(8 * v183);
              v183 = v184;
              v186 = &v185[8 * v180];
              *v186 = v174;
              v187 = (uint64_t)(v186 + 1);
              if (v175 != v178)
                goto LABEL_222;
LABEL_228:
              *(_QWORD *)v173 = v186;
              *v176 = v187;
              *(_QWORD *)(v173 + 16) = &v185[8 * v183];
              if (v178)
                operator delete(v178);
              v170 = v1183;
              v68 = *(_QWORD *)v1187;
              v171 = v1172;
              ++v172;
              *v176 = v187;
            }
            while (v1172 != (_DWORD)v172);
LABEL_207:
            v170 = (char *)v170 + 1;
            v69 = *(_QWORD *)v1166;
            if (v170 != *(void **)v1160)
              continue;
            break;
          }
LABEL_79:
          if (v1218[0] == v1218[1])
          {
            v3 = (uint64_t)v1192;
            v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
            *(_OWORD *)&v1228.__r_.__value_.__r.__words[1] = xmmword_22DCE6550;
            strcpy(v1228.__r_.__value_.__l.__data_, "table: empty negated constraint");
            operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v1192, (uint64_t)&v1228);
            if (SHIBYTE(v1228.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1228.__r_.__value_.__l.__data_);
            operations_research::sat::ConstraintProto::Clear(v1193);
            goto LABEL_557;
          }
          memset(&v1228, 0, sizeof(v1228));
          v72 = v1192;
          if ((int)v69 >= 1)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            v76 = 0;
            while (1)
            {
              operations_research::sat::PresolveContext::DomainOf(v72, (const char *)*(unsigned int *)(*(_QWORD *)(v68 + 24) + 4 * v76), (unint64_t *)v1225);
              v77 = operations_research::Domain::Size((operations_research::Domain *)v1225);
              v78 = v77;
              if ((unint64_t)v75 < v74)
              {
                *v75++ = v77;
                v68 = *(_QWORD *)v1187;
                v1228.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
                if ((v1225[0] & 1) == 0)
                  goto LABEL_83;
                goto LABEL_82;
              }
              v79 = v75 - v73;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v74 - (_QWORD)v73) >> 2 > v80)
                v80 = (uint64_t)(v74 - (_QWORD)v73) >> 2;
              if (v74 - (unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
                v81 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v81 = v80;
              if (v81)
              {
                if (v81 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v82 = operator new(8 * v81);
                v83 = (unint64_t *)&v82[8 * v79];
                *v83 = v78;
                v84 = (std::string::size_type)(v83 + 1);
                if (v75 == v73)
                  goto LABEL_101;
              }
              else
              {
                v82 = 0;
                v83 = (unint64_t *)(8 * v79);
                *(_QWORD *)(8 * v79) = v78;
                v84 = 8 * v79 + 8;
                if (v75 == v73)
                  goto LABEL_101;
              }
              v85 = (char *)(v75 - 1) - (char *)v73;
              if (v85 < 0x168)
              {
                v86 = v75;
                goto LABEL_100;
              }
              if (&v82[(char *)v75 - (char *)v73 - 8 - (v85 & 0xFFFFFFFFFFFFFFF8)] > &v82[(char *)v75
                                                                                           - (char *)v73
                                                                                           - 8])
              {
                v86 = v75;
                do
                {
LABEL_100:
                  v87 = *--v86;
                  *--v83 = v87;
                }
                while (v86 != v73);
                goto LABEL_101;
              }
              if ((unint64_t *)((char *)v75 - (v85 & 0xFFFFFFFFFFFFFFF8) - 8) > v75 - 1)
              {
                v86 = v75;
                goto LABEL_100;
              }
              if ((unint64_t)((char *)v73 - v82) < 0x20)
              {
                v86 = v75;
                goto LABEL_100;
              }
              v88 = (v85 >> 3) + 1;
              v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
              v86 = &v75[v89 / 0xFFFFFFFFFFFFFFF8];
              v83 = (unint64_t *)((char *)v83 - v89);
              v90 = &v82[8 * v79 - 16];
              v91 = v75 - 2;
              v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v93 = *(_OWORD *)v91;
                *(v90 - 1) = *((_OWORD *)v91 - 1);
                *v90 = v93;
                v90 -= 2;
                v91 -= 4;
                v92 -= 4;
              }
              while (v92);
              if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_100;
LABEL_101:
              v74 = (std::string::size_type)&v82[8 * v81];
              v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
              v1228.__r_.__value_.__l.__size_ = v84;
              v1228.__r_.__value_.__r.__words[2] = v74;
              if (v73)
                operator delete(v73);
              v73 = v83;
              v75 = (unint64_t *)v84;
              v68 = *(_QWORD *)v1187;
              v72 = v1192;
              v69 = *(_QWORD *)v1166;
              v1228.__r_.__value_.__l.__size_ = v84;
              if ((v1225[0] & 1) == 0)
                goto LABEL_83;
LABEL_82:
              operator delete(*(void **)&v1225[8]);
LABEL_83:
              if (++v76 == v69)
              {
                v197 = v1228.__r_.__value_.__r.__words[0];
                goto LABEL_550;
              }
            }
          }
          v75 = 0;
          v197 = 0;
LABEL_550:
          operations_research::sat::CompressTuples(v197, ((uint64_t)v75 - v197) >> 3, 0x8000000000000000, (uint64_t)v1218);
          memset(v1225, 0, sizeof(v1225));
          v454 = (_QWORD *)v1218[0];
          v455 = v1218[1];
          if (v1218[0] == v1218[1])
            goto LABEL_551;
          while (2)
          {
            v462 = *(int **)v1225;
            *(_QWORD *)&v1225[8] = *(_QWORD *)v1225;
            if ((int)v69 < 1)
              goto LABEL_563;
            v463 = 0;
            v464 = v1192;
            v465 = *(_QWORD *)v1166;
            while (2)
            {
              v467 = *(_QWORD *)(*v454 + 8 * v463);
              if (v467 != 0x8000000000000000)
              {
                v468 = ~operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v464, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v1187 + 24) + 4 * v463), v467);
                if ((unint64_t)v462 < *(_QWORD *)&v1225[16])
                {
                  *v462 = v468;
                  v466 = (uint64_t)(v462 + 1);
                  goto LABEL_567;
                }
                v469 = *(int **)v1225;
                v470 = (char *)v462 - *(_QWORD *)v1225;
                v471 = ((uint64_t)v462 - *(_QWORD *)v1225) >> 2;
                v472 = v471 + 1;
                if ((unint64_t)(v471 + 1) >> 62)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v473 = *(_QWORD *)&v1225[16] - *(_QWORD *)v1225;
                if ((uint64_t)(*(_QWORD *)&v1225[16] - *(_QWORD *)v1225) >> 1 > v472)
                  v472 = v473 >> 1;
                if ((unint64_t)v473 >= 0x7FFFFFFFFFFFFFFCLL)
                  v474 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v474 = v472;
                if (v474)
                {
                  if (v474 >> 62)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v475 = operator new(4 * v474);
                  v476 = (unsigned int *)&v475[4 * v471];
                  *v476 = v468;
                  v466 = (uint64_t)(v476 + 1);
                  if (v462 != v469)
                  {
LABEL_580:
                    v477 = (char *)(v462 - 1) - (char *)v469;
                    if (v477 < 0xBC
                      || &v470[(_QWORD)v475 - 4 - (v477 & 0xFFFFFFFFFFFFFFFCLL)] > &v470[(_QWORD)v475 - 4]
                      || (int *)((char *)v462 - (v477 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v462 - 1
                      || (unint64_t)((char *)v469 - v475) < 0x20)
                    {
                      v478 = v462;
                    }
                    else
                    {
                      v480 = (v477 >> 2) + 1;
                      v481 = 4 * (v480 & 0x7FFFFFFFFFFFFFF8);
                      v478 = &v462[v481 / 0xFFFFFFFFFFFFFFFCLL];
                      v476 = (unsigned int *)((char *)v476 - v481);
                      v482 = &v475[4 * v471 - 16];
                      v483 = (__int128 *)(v462 - 4);
                      v484 = v480 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v485 = *v483;
                        *(v482 - 1) = *(v483 - 1);
                        *v482 = v485;
                        v482 -= 2;
                        v483 -= 2;
                        v484 -= 8;
                      }
                      while (v484);
                      if (v480 == (v480 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_583:
                        *(_QWORD *)v1225 = v476;
                        *(_QWORD *)&v1225[16] = &v475[4 * v474];
                        if (!v469)
                        {
LABEL_567:
                          *(_QWORD *)&v1225[8] = v466;
                          v462 = (int *)v466;
                          v464 = v1192;
                          v465 = *(_QWORD *)v1166;
                          goto LABEL_568;
                        }
LABEL_587:
                        operator delete(v469);
                        goto LABEL_567;
                      }
                    }
                    do
                    {
                      v479 = *--v478;
                      *--v476 = v479;
                    }
                    while (v478 != v469);
                    goto LABEL_583;
                  }
                }
                else
                {
                  v475 = 0;
                  v476 = (unsigned int *)(4 * v471);
                  *(_DWORD *)(4 * v471) = v468;
                  v466 = 4 * v471 + 4;
                  if (v462 != v469)
                    goto LABEL_580;
                }
                *(_QWORD *)v1225 = v476;
                *(_QWORD *)&v1225[16] = &v475[4 * v474];
                if (!v469)
                  goto LABEL_567;
                goto LABEL_587;
              }
LABEL_568:
              if (++v463 != v465)
                continue;
              break;
            }
            v486 = *(int **)v1225;
            if (*(int **)v1225 != v462)
            {
              v487 = *((_QWORD *)v1192 + 6);
              v488 = *(int **)(v487 + 56);
              if (!v488)
              {
                v490 = *(_DWORD *)(v487 + 52);
                goto LABEL_604;
              }
              v489 = *(int *)(v487 + 48);
              v490 = *v488;
              if ((int)v489 < *v488)
              {
                *(_DWORD *)(v487 + 48) = v489 + 1;
                v491 = *(_QWORD *)&v488[2 * v489 + 2];
                if (*(_DWORD *)(v491 + 60) != 3)
                  goto LABEL_599;
LABEL_606:
                v494 = *(_QWORD *)(v491 + 48);
                goto LABEL_607;
              }
              if (v490 == *(_DWORD *)(v487 + 52))
              {
LABEL_604:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v487 + 40), v490 + 1);
                v488 = *(int **)(v487 + 56);
                v490 = *v488;
              }
              *v488 = v490 + 1;
              v491 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v487 + 40));
              v495 = *(_QWORD *)(v487 + 56);
              v496 = *(int *)(v487 + 48);
              *(_DWORD *)(v487 + 48) = v496 + 1;
              *(_QWORD *)(v495 + 8 * v496 + 8) = v491;
              if (*(_DWORD *)(v491 + 60) == 3)
                goto LABEL_606;
LABEL_599:
              operations_research::sat::ConstraintProto::clear_constraint(v491);
              *(_DWORD *)(v491 + 60) = 3;
              v492 = *(_QWORD *)(v491 + 8);
              v493 = (google::protobuf::Arena *)(v492 & 0xFFFFFFFFFFFFFFFELL);
              if ((v492 & 1) != 0)
                v493 = *(google::protobuf::Arena **)v493;
              v494 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v493);
              *(_QWORD *)(v491 + 48) = v494;
LABEL_607:
              v497 = *(_DWORD *)(v494 + 16);
              do
              {
                v498 = *v486;
                if (v497 == *(_DWORD *)(v494 + 20))
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v494 + 16), v497 + 1);
                *(_DWORD *)(*(_QWORD *)(v494 + 24) + 4 * v497) = v498;
                *(_DWORD *)(v494 + 16) = v497 + 1;
                ++v486;
                ++v497;
              }
              while (v486 != v462);
            }
LABEL_563:
            v454 += 3;
            LODWORD(v69) = v1166[0];
            if (v454 != (_QWORD *)v455)
              continue;
            break;
          }
LABEL_551:
          *(_QWORD *)v1222 = operator new(0x28uLL);
          *(_OWORD *)&v1222[2] = xmmword_22DCEB050;
          strcpy(*(char **)v1222, "table: expanded negated constraint");
          v3 = (uint64_t)v1192;
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v1192, (uint64_t)v1222);
          if (SHIBYTE(v1222[5]) < 0)
            operator delete(*(void **)v1222);
          operations_research::sat::ConstraintProto::Clear(v1193);
          if (*(_QWORD *)v1225)
            operator delete(*(void **)v1225);
          if (v1228.__r_.__value_.__r.__words[0])
            operator delete(v1228.__r_.__value_.__l.__data_);
LABEL_557:
          v456 = v1218[0];
          if (!v1218[0])
            goto LABEL_1508;
          v457 = v1218[1];
          v458 = (void *)v1218[0];
          if (v1218[1] != v1218[0])
          {
            v459 = v1218[1];
            do
            {
              v461 = *(void **)(v459 - 24);
              v459 -= 24;
              v460 = v461;
              if (v461)
              {
                *(_QWORD *)(v457 - 16) = v460;
                operator delete(v460);
              }
              v457 = v459;
            }
            while (v459 != v456);
            v458 = (void *)v1218[0];
          }
          v1218[1] = v456;
LABEL_1507:
          operator delete(v458);
LABEL_1508:
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v3);
          if (!*((_DWORD *)v1193 + 15))
            operations_research::sat::PresolveContext::UpdateConstraintVariableUsage((char **)v3, v1163[0]);
          if (*(_BYTE *)(v3 + 504))
            return;
LABEL_1511:
          v7 = *(_QWORD *)v1163 + 1;
          if (*(_QWORD *)v1163 + 1 == v1153)
            break;
          continue;
        case 0x11:
          if (!a1[461])
            goto LABEL_1508;
          v94 = *((_QWORD *)v1193 + 6);
          v95 = *(int *)(v94 + 112);
          if ((_DWORD)v95)
          {
            if (*(_DWORD *)(v94 + 88))
            {
              v96 = *(const void **)(v94 + 120);
              memset(&__str, 0, sizeof(__str));
              v1154 = v95;
              if ((v95 & 0x80000000) != 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v97 = operator new(4 * v95);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
              __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v97 + 4 * v95;
              memcpy(v97, v96, 4 * v95);
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)v97 + 4 * v95;
              absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::raw_hash_set<long long const*>((uint64_t)v1218, *(_QWORD **)(v94 + 24), (_QWORD *)(*(_QWORD *)(v94 + 24) + 8 * *(int *)(v94 + 16)), 0);
              std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v1216, v95 + 1);
              v98 = 0;
              v99 = v1216;
              v100 = *(_QWORD *)(v94 + 136);
              v101 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v100)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v100));
              v102 = (v101 >> 7) ^ (*(_QWORD *)v1216 >> 12);
              v103 = *((_QWORD *)v1216 + 3);
              *(_QWORD *)v1188 = v97;
              while (1)
              {
                v104 = v102 & v103;
                v105 = *(_QWORD *)(*(_QWORD *)v1216 + v104);
                v106 = ((v105 ^ (0x101010101010101 * (v101 & 0x7F))) - 0x101010101010101) & ~(v105 ^ (0x101010101010101 * (v101 & 0x7F))) & 0x8080808080808080;
                if (v106)
                  break;
LABEL_123:
                if ((v105 & (~v105 << 6) & 0x8080808080808080) != 0)
                {
                  *(_QWORD *)(*((_QWORD *)v99 + 1)
                            + 8
                            * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v1216, v101)) = v100;
                  goto LABEL_786;
                }
                v98 += 8;
                v102 = v98 + v104;
              }
              while (*(_QWORD *)(*((_QWORD *)v1216 + 1) + 8 * ((v104 + (__clz(__rbit64(v106)) >> 3)) & v103)) != v100)
              {
                v106 &= v106 - 1;
                if (!v106)
                  goto LABEL_123;
              }
LABEL_786:
              if ((int)v95 >= 1)
              {
                LODWORD(v616) = *(_DWORD *)(v94 + 40);
                if ((int)v616 > 0)
                {
                  v617 = 0;
                  do
                  {
                    if ((int)v616 <= 0)
                    {
                      v618 = v617 + 1;
                    }
                    else
                    {
                      v619 = 0;
                      v618 = v617 + 1;
                      do
                      {
                        v624 = 0;
                        v642 = *(_QWORD *)(*(_QWORD *)(v94 + 48) + 8 * v619);
                        v643 = *(_QWORD *)(*(_QWORD *)(v94 + 72) + 8 * v619);
                        v644 = (_QWORD *)((char *)v1216 + 48 * v617);
                        v645 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v642)
                               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                   + v642));
                        v625 = (*v644 >> 12) ^ (v645 >> 7);
                        v646 = v644[3];
                        v647 = 0x101010101010101 * (v645 & 0x7F);
                        while (1)
                        {
                          v620 = v625 & v646;
                          v621 = *(_QWORD *)(*v644 + v620);
                          v622 = ((v621 ^ v647) - 0x101010101010101) & ~(v621 ^ v647) & 0x8080808080808080;
                          if (v622)
                            break;
LABEL_796:
                          if ((v621 & (~v621 << 6) & 0x8080808080808080) != 0)
                            goto LABEL_816;
                          v624 += 8;
                          v625 = v624 + v620;
                        }
                        while (1)
                        {
                          v623 = (v620 + (__clz(__rbit64(v622)) >> 3)) & v646;
                          if (*(_QWORD *)(v644[1] + 8 * v623) == v642)
                            break;
                          v622 &= v622 - 1;
                          if (!v622)
                            goto LABEL_796;
                        }
                        if (v623 != v646
                          && operations_research::sat::PresolveContext::DomainContains((operations_research::sat::PresolveContext *)v3, *((_DWORD *)v97 + v617), *(_QWORD *)(*(_QWORD *)(v94 + 96) + 8 * v619)))
                        {
                          v626 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v643)
                                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                    * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                     + v643));
                          if (v617 == (_DWORD)v95 - 1)
                          {
                            v627 = 0;
                            v628 = v626 >> 7;
                            v629 = (v626 >> 7) ^ (v1218[0] >> 12);
                            v630 = 0x101010101010101 * (v626 & 0x7F);
                            while (1)
                            {
                              v631 = v629 & v1219;
                              v632 = *(_QWORD *)(v1218[0] + v631);
                              v633 = ((v632 ^ v630) - 0x101010101010101) & ~(v632 ^ v630) & 0x8080808080808080;
                              if (v633)
                                break;
LABEL_805:
                              if ((v632 & (~v632 << 6) & 0x8080808080808080) != 0)
                                goto LABEL_816;
                              v627 += 8;
                              v629 = v627 + v631;
                            }
                            while (1)
                            {
                              v634 = (v631 + (__clz(__rbit64(v633)) >> 3)) & v1219;
                              if (*(_QWORD *)(v1218[1] + 8 * v634) == v643)
                                break;
                              v633 &= v633 - 1;
                              if (!v633)
                                goto LABEL_805;
                            }
                            if (v634 == (_QWORD)v1219)
                              goto LABEL_816;
                          }
                          else
                          {
                            v628 = v626 >> 7;
                            v630 = 0x101010101010101 * (v626 & 0x7F);
                          }
                          v635 = 0;
                          v636 = (_QWORD *)((char *)v1216 + 48 * v618);
                          v637 = v628 ^ (*v636 >> 12);
                          v638 = v636[3];
                          while (1)
                          {
                            v639 = v637 & v638;
                            v640 = *(_QWORD *)(*v636 + v639);
                            v641 = ((v640 ^ v630) - 0x101010101010101) & ~(v640 ^ v630) & 0x8080808080808080;
                            if (v641)
                              break;
LABEL_813:
                            if ((v640 & (~v640 << 6) & 0x8080808080808080) != 0)
                            {
                              *(_QWORD *)(v636[1]
                                        + 8
                                        * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v1216 + 6 * v618, v626)) = v643;
                              goto LABEL_816;
                            }
                            v635 += 8;
                            v637 = v635 + v639;
                          }
                          while (*(_QWORD *)(v636[1] + 8 * ((v639 + (__clz(__rbit64(v641)) >> 3)) & v638)) != v643)
                          {
                            v641 &= v641 - 1;
                            if (!v641)
                              goto LABEL_813;
                          }
                        }
LABEL_816:
                        ++v619;
                        v616 = *(int *)(v94 + 40);
                      }
                      while (v619 < v616);
                    }
                    v617 = v618;
                  }
                  while (v618 != v95);
                }
                do
                {
                  v806 = v95;
                  v807 = v95 - 1;
                  v808 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  v1230 = 0;
                  *(_OWORD *)&v1228.__r_.__value_.__r.__words[1] = 0u;
                  v1229 = 0u;
                  if (*(int *)(v94 + 40) < 1)
                  {
                    v838 = 0;
                  }
                  else
                  {
                    v809 = 0;
                    do
                    {
                      v814 = 0;
                      v832 = *(_QWORD *)(*(_QWORD *)(v94 + 48) + 8 * v809);
                      v833 = *(_QWORD *)(*(_QWORD *)(v94 + 72) + 8 * v809);
                      v834 = (_QWORD *)((char *)v1216 + 48 * v807);
                      v835 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v832)
                             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                 + v832));
                      v815 = (v835 >> 7) ^ (*v834 >> 12);
                      v836 = v834[3];
                      v837 = 0x101010101010101 * (v835 & 0x7F);
                      while (1)
                      {
                        v810 = v815 & v836;
                        v811 = *(_QWORD *)(*v834 + v810);
                        v812 = ((v811 ^ v837) - 0x101010101010101) & ~(v811 ^ v837) & 0x8080808080808080;
                        if (v812)
                          break;
LABEL_1070:
                        if ((v811 & (~v811 << 6) & 0x8080808080808080) != 0)
                          goto LABEL_1088;
                        v814 += 8;
                        v815 = v814 + v810;
                      }
                      while (1)
                      {
                        v813 = (v810 + (__clz(__rbit64(v812)) >> 3)) & v836;
                        if (*(_QWORD *)(v834[1] + 8 * v813) == v832)
                          break;
                        v812 &= v812 - 1;
                        if (!v812)
                          goto LABEL_1070;
                      }
                      if (v813 != v836
                        && operations_research::sat::PresolveContext::DomainContains(v1192, *(_DWORD *)(*(_QWORD *)v1188 + 4 * v807), *(_QWORD *)(*(_QWORD *)(v94 + 96) + 8 * v809)))
                      {
                        v816 = 0;
                        v817 = (_QWORD *)((char *)v1216 + 48 * v806);
                        v818 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v833)
                               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                   + v833));
                        v819 = (*v817 >> 12) ^ (v818 >> 7);
                        v820 = v817[3];
                        v821 = 0x101010101010101 * (v818 & 0x7F);
                        while (1)
                        {
                          v822 = v819 & v820;
                          v823 = *(_QWORD *)(*v817 + v822);
                          v824 = ((v823 ^ v821) - 0x101010101010101) & ~(v823 ^ v821) & 0x8080808080808080;
                          if (v824)
                            break;
LABEL_1078:
                          if ((v823 & (~v823 << 6) & 0x8080808080808080) != 0)
                            goto LABEL_1088;
                          v816 += 8;
                          v819 = v816 + v822;
                        }
                        while (1)
                        {
                          v825 = (v822 + (__clz(__rbit64(v824)) >> 3)) & v820;
                          if (*(_QWORD *)(v817[1] + 8 * v825) == v833)
                            break;
                          v824 &= v824 - 1;
                          if (!v824)
                            goto LABEL_1078;
                        }
                        if (v825 == v820)
                          goto LABEL_1088;
                        v826 = 0;
                        for (m = (v835 >> 7) ^ (v1228.__r_.__value_.__r.__words[0] >> 12); ; m = v826 + v828)
                        {
                          v828 = m & v1229;
                          v829 = *(_QWORD *)(v1228.__r_.__value_.__r.__words[0] + v828);
                          v830 = ((v829 ^ v837) - 0x101010101010101) & ~(v829 ^ v837) & 0x8080808080808080;
                          if (v830)
                            break;
LABEL_1085:
                          if ((v829 & (~v829 << 6) & 0x8080808080808080) != 0)
                          {
                            v831 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)&v1228, v835);
                            *(_QWORD *)(v1228.__r_.__value_.__l.__size_ + 8 * v831) = v832;
                            goto LABEL_1088;
                          }
                          v826 += 8;
                        }
                        while (*(_QWORD *)(v1228.__r_.__value_.__l.__size_
                                          + 8 * ((v828 + (__clz(__rbit64(v830)) >> 3)) & v1229)) != v832)
                        {
                          v830 &= v830 - 1;
                          if (!v830)
                            goto LABEL_1085;
                        }
                      }
LABEL_1088:
                      ++v809;
                    }
                    while (v809 < *(int *)(v94 + 40));
                    v808 = (uint64_t *)v1228.__r_.__value_.__r.__words[0];
                    v838 = (uint64_t *)v1228.__r_.__value_.__r.__words[2];
                    v3 = (uint64_t)v1192;
                  }
                  v839 = (uint64_t **)((char *)v1216 + 48 * v807);
                  v840 = (std::string::size_type)*v839;
                  *v839 = v808;
                  v1228.__r_.__value_.__r.__words[0] = v840;
                  v841 = (std::string::size_type)v839[1];
                  v839[1] = (uint64_t *)v1228.__r_.__value_.__l.__size_;
                  v1228.__r_.__value_.__l.__size_ = v841;
                  v842 = (std::string::size_type)v839[2];
                  v839[2] = v838;
                  v1228.__r_.__value_.__r.__words[2] = v842;
                  v843 = v839[3];
                  v839[3] = (uint64_t *)v1229;
                  *(_QWORD *)&v1229 = v843;
                  v844 = v839[5];
                  v839[5] = (uint64_t *)v1230;
                  v1230 = (std::string::size_type)v844;
                  v845 = v839[4];
                  v839[4] = (uint64_t *)*((_QWORD *)&v1229 + 1);
                  *((_QWORD *)&v1229 + 1) = v845;
                  if ((_QWORD)v1229)
                  {
                    operator delete(v1228.__r_.__value_.__l.__data_);
                    v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                    v1230 = 0;
                    *(_QWORD *)&v1229 = 0;
                    *(_OWORD *)&v1228.__r_.__value_.__r.__words[1] = 0uLL;
                    v845 = (uint64_t *)*((_QWORD *)&v1229 + 1);
                  }
                  if (v845)
                    absl::lts_2020_02_25::container_internal::UnsampleSlow(v845);
                  v95 = v807;
                }
                while (v806 > 1);
              }
              v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              v846 = 0uLL;
              *(_OWORD *)&v1228.__r_.__value_.__r.__words[1] = 0u;
              v1229 = 0u;
              v1230 = 0;
              *(_QWORD *)v1225 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              *(_OWORD *)&v1225[8] = 0u;
              v1226 = 0u;
              v1227 = 0;
              *(_QWORD *)v1222 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              *(_OWORD *)&v1222[2] = 0u;
              v1223 = 0u;
              v1224 = 0;
              v1215 = 0;
              if ((int)v1154 < 1)
              {
LABEL_1478:
                HIBYTE(v1214[2]) = 19;
                strcpy((char *)v1214, "automaton: expanded");
                operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1214);
                if (SHIBYTE(v1214[2]) < 0)
                  operator delete(v1214[0]);
                operations_research::sat::ConstraintProto::Clear(v1193);
LABEL_1481:
                if ((_QWORD)v1223)
                {
                  operator delete(*(void **)v1222);
                  *(_QWORD *)v1222 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  v1224 = 0;
                  *(_QWORD *)&v1222[4] = 0;
                  *(_QWORD *)&v1223 = 0;
                  *(_QWORD *)&v1222[2] = 0;
                }
                if (*((_QWORD *)&v1223 + 1))
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v1223 + 1));
                if ((_QWORD)v1226)
                {
                  operator delete(*(void **)v1225);
                  *(_QWORD *)v1225 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  v1227 = 0;
                  *(_QWORD *)&v1225[16] = 0;
                  *(_QWORD *)&v1226 = 0;
                  *(_QWORD *)&v1225[8] = 0;
                }
                if (*((_QWORD *)&v1226 + 1))
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v1226 + 1));
                if ((_QWORD)v1229)
                {
                  operator delete(v1228.__r_.__value_.__l.__data_);
                  v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  v1230 = 0;
                  *(_QWORD *)&v1229 = 0;
                  *(_OWORD *)&v1228.__r_.__value_.__r.__words[1] = 0uLL;
                }
                if (*((_QWORD *)&v1229 + 1))
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v1229 + 1));
                v1130 = v1216;
                if (v1216)
                {
                  v1131 = (operations_research::sat::PresolveContext *)v1217;
                  v1132 = v1216;
                  if ((operations_research::sat::PresolveContext *)v1217 != v1216)
                  {
                    do
                    {
                      if (*((_QWORD *)v1131 - 3))
                      {
                        operator delete(*((void **)v1131 - 6));
                        *((_QWORD *)v1131 - 1) = 0;
                        *((_QWORD *)v1131 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                        *((_QWORD *)v1131 - 5) = 0;
                        *((_QWORD *)v1131 - 4) = 0;
                        *((_QWORD *)v1131 - 3) = 0;
                      }
                      v1133 = (_QWORD *)*((_QWORD *)v1131 - 2);
                      if (v1133)
                        absl::lts_2020_02_25::container_internal::UnsampleSlow(v1133);
                      v1131 = (operations_research::sat::PresolveContext *)((char *)v1131 - 48);
                    }
                    while (v1131 != v1130);
                    v1132 = v1216;
                  }
                  *(_QWORD *)&v1217 = v1130;
                  operator delete(v1132);
                }
                if ((_QWORD)v1219)
                {
                  operator delete((void *)v1218[0]);
                  v1218[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  v1220 = 0;
                  v1218[2] = 0;
                  *(_QWORD *)&v1219 = 0;
                  v1218[1] = 0;
                }
                if (*((_QWORD *)&v1219 + 1))
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v1219 + 1));
                v458 = (void *)__str.__r_.__value_.__r.__words[0];
                if (__str.__r_.__value_.__r.__words[0])
                  goto LABEL_1507;
                goto LABEL_1508;
              }
              v847 = 0;
              while (1)
              {
                memset(v1214, 0, 24);
                v1211 = 0;
                v1212 = 0;
                v1213 = 0;
                v1208 = 0;
                v1209 = 0;
                v1210 = 0;
                if (*(int *)(v94 + 88) >= 1)
                {
                  *(_QWORD *)v1178 = 0;
                  v1184 = 0;
                  *(_QWORD *)v1190 = 0;
                  v1170 = 0;
                  v848 = 0;
                  v849 = 0;
                  v850 = v847 + 1;
                  while (1)
                  {
                    v855 = 0;
                    v868 = *(operations_research::sat::PresolveContext **)(*(_QWORD *)(v94 + 48) + 8 * v849);
                    v869 = *(_QWORD *)(*(_QWORD *)(v94 + 96) + 8 * v849);
                    v870 = *(_QWORD *)(*(_QWORD *)(v94 + 72) + 8 * v849);
                    v871 = (_QWORD *)((char *)v1216 + 48 * v847);
                    v872 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                            + (unint64_t)v868)
                           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                              * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                               + (_QWORD)v868));
                    v856 = (*v871 >> 12) ^ (v872 >> 7);
                    v873 = v871[3];
                    v874 = 0x101010101010101 * (v872 & 0x7F);
                    while (1)
                    {
                      v851 = v856 & v873;
                      v852 = *(_QWORD *)(*v871 + v851);
                      v853 = ((v852 ^ v874) - 0x101010101010101) & ~(v852 ^ v874) & 0x8080808080808080;
                      if (v853)
                        break;
LABEL_1105:
                      if ((v852 & (~v852 << 6) & 0x8080808080808080) != 0)
                        goto LABEL_1115;
                      v855 += 8;
                      v856 = v855 + v851;
                    }
                    while (1)
                    {
                      v854 = (v851 + (__clz(__rbit64(v853)) >> 3)) & v873;
                      if (*(operations_research::sat::PresolveContext **)(v871[1] + 8 * v854) == v868)
                        break;
                      v853 &= v853 - 1;
                      if (!v853)
                        goto LABEL_1105;
                    }
                    if (v854 == v873)
                      goto LABEL_1115;
                    v857 = 0;
                    v858 = (_QWORD *)((char *)v1216 + 48 * v850);
                    v859 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v870)
                           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                              * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                               + v870));
                    v860 = (*v858 >> 12) ^ (v859 >> 7);
                    v861 = v858[3];
                    v862 = 0x101010101010101 * (v859 & 0x7F);
                    while (1)
                    {
                      v863 = v860 & v861;
                      v864 = *(_QWORD *)(*v858 + v863);
                      v865 = ((v864 ^ v862) - 0x101010101010101) & ~(v864 ^ v862) & 0x8080808080808080;
                      if (v865)
                        break;
LABEL_1112:
                      if ((v864 & (~v864 << 6) & 0x8080808080808080) != 0)
                        goto LABEL_1115;
                      v857 += 8;
                      v860 = v857 + v863;
                    }
                    while (1)
                    {
                      v866 = (v863 + (__clz(__rbit64(v865)) >> 3)) & v861;
                      if (*(_QWORD *)(v858[1] + 8 * v866) == v870)
                        break;
                      v865 &= v865 - 1;
                      if (!v865)
                        goto LABEL_1112;
                    }
                    if (v866 == v861)
                    {
LABEL_1115:
                      v867 = v848;
                      v3 = (uint64_t)v1192;
                    }
                    else
                    {
                      if (operations_research::sat::PresolveContext::DomainContains(v1192, *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v847), *(_QWORD *)(*(_QWORD *)(v94 + 96) + 8 * v849)))
                      {
                        if (v848 < v1170)
                        {
                          *v848 = v868;
                          v867 = v848 + 1;
                          v875 = *(char **)v1190;
                          v1214[1] = v848 + 1;
                          if (*(_QWORD *)v1190 < *(_QWORD *)v1178)
                            goto LABEL_1121;
LABEL_1140:
                          v887 = (char *)v1211;
                          v888 = v875 - (_BYTE *)v1211;
                          v889 = (v875 - (_BYTE *)v1211) >> 3;
                          v890 = v889 + 1;
                          if ((unint64_t)(v889 + 1) >> 61)
LABEL_1551:
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          if ((uint64_t)(*(_QWORD *)v1178 - (_QWORD)v1211) >> 2 > v890)
                            v890 = (uint64_t)(*(_QWORD *)v1178 - (_QWORD)v1211) >> 2;
                          if (*(_QWORD *)v1178 - (_QWORD)v1211 >= 0x7FFFFFFFFFFFFFF8uLL)
                            v891 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v891 = v890;
                          if (v891)
                          {
                            if (v891 >> 61)
LABEL_1548:
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            v892 = v891;
                            v893 = (char *)operator new(8 * v891);
                            v891 = v892;
                            v894 = &v893[8 * v889];
                            *(_QWORD *)v894 = v869;
                            v876 = (uint64_t)(v894 + 8);
                            v895 = *(char **)v1190;
                            if (*(char **)v1190 != v887)
                            {
LABEL_1149:
                              v896 = v895 - 8 - v887;
                              if (v896 < 0x168)
                              {
                                v897 = v895;
                                goto LABEL_1166;
                              }
                              if (&v893[v888 - 8 - (v896 & 0xFFFFFFFFFFFFFFF8)] > &v893[v888 - 8]
                                || &v895[-(v896 & 0xFFFFFFFFFFFFFFF8) - 8] > v895 - 8
                                || (unint64_t)(v895 - v893 - v888) < 0x20)
                              {
                                v897 = *(char **)v1190;
                                goto LABEL_1166;
                              }
                              v924 = (v896 >> 3) + 1;
                              v925 = 8 * (v924 & 0x3FFFFFFFFFFFFFFCLL);
                              v897 = (char *)(*(_QWORD *)v1190 - v925);
                              v894 -= v925;
                              v926 = (__n128 *)&v893[8 * v889 - 16];
                              v927 = (__n128 *)(*(_QWORD *)v1190 - 16);
                              v928 = v924 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v846 = *v927;
                                v926[-1] = v927[-1];
                                *v926 = v846;
                                v926 -= 2;
                                v927 -= 2;
                                v928 -= 4;
                              }
                              while (v928);
                              if (v924 != (v924 & 0x3FFFFFFFFFFFFFFCLL))
                              {
                                do
                                {
LABEL_1166:
                                  v903 = *((_QWORD *)v897 - 1);
                                  v897 -= 8;
                                  *((_QWORD *)v894 - 1) = v903;
                                  v894 -= 8;
                                }
                                while (v897 != v887);
                              }
                            }
                          }
                          else
                          {
                            v893 = 0;
                            v894 = (char *)(8 * v889);
                            *(_QWORD *)(8 * v889) = v869;
                            v876 = 8 * v889 + 8;
                            v895 = *(char **)v1190;
                            if (*(char **)v1190 != v887)
                              goto LABEL_1149;
                          }
                          v1211 = v894;
                          *(_QWORD *)v1178 = &v893[8 * v891];
                          v1213 = *(char **)v1178;
                          if (v887)
                            operator delete(v887);
LABEL_1169:
                          *(_QWORD *)v1190 = v876;
                          v1212 = (_BYTE *)v876;
                          if (v847 + 1 == v1154)
                            v904 = 0;
                          else
                            v904 = v870;
                          v905 = v1209;
                          if (v1209 < v1210)
                          {
                            *(_QWORD *)v1209 = v904;
                            v906 = (uint64_t)(v905 + 8);
                            v3 = (uint64_t)v1192;
LABEL_1194:
                            v850 = v847 + 1;
                            v1209 = (char *)v906;
                            goto LABEL_1116;
                          }
                          v907 = (char *)v1208;
                          v908 = v1209 - (_BYTE *)v1208;
                          v909 = (v1209 - (_BYTE *)v1208) >> 3;
                          v910 = v909 + 1;
                          if ((unint64_t)(v909 + 1) >> 61)
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          v911 = v1210 - (_BYTE *)v1208;
                          if ((v1210 - (_BYTE *)v1208) >> 2 > v910)
                            v910 = v911 >> 2;
                          if ((unint64_t)v911 >= 0x7FFFFFFFFFFFFFF8)
                            v912 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v912 = v910;
                          if (v912)
                          {
                            if (v912 >> 61)
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            v913 = v912;
                            v914 = (char *)operator new(8 * v912);
                            v912 = v913;
                            v915 = &v914[8 * v909];
                            *(_QWORD *)v915 = v904;
                            v906 = (uint64_t)(v915 + 8);
                            if (v905 != v907)
                            {
LABEL_1183:
                              v916 = v905 - 8 - v907;
                              v3 = (uint64_t)v1192;
                              if (v916 < 0x58)
                                goto LABEL_1572;
                              if ((unint64_t)(v905 - &v914[v908]) < 0x20)
                                goto LABEL_1572;
                              v917 = (v916 >> 3) + 1;
                              v918 = 8 * (v917 & 0x3FFFFFFFFFFFFFFCLL);
                              v919 = &v905[-v918];
                              v915 -= v918;
                              v920 = (__n128 *)&v914[8 * v909 - 16];
                              v921 = (__n128 *)(v905 - 16);
                              v922 = v917 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v846 = *v921;
                                v920[-1] = v921[-1];
                                *v920 = v846;
                                v920 -= 2;
                                v921 -= 2;
                                v922 -= 4;
                              }
                              while (v922);
                              v905 = v919;
                              if (v917 != (v917 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1572:
                                do
                                {
                                  v923 = *((_QWORD *)v905 - 1);
                                  v905 -= 8;
                                  *((_QWORD *)v915 - 1) = v923;
                                  v915 -= 8;
                                }
                                while (v905 != v907);
                              }
                              goto LABEL_1192;
                            }
                          }
                          else
                          {
                            v914 = 0;
                            v915 = (char *)(8 * v909);
                            *(_QWORD *)(8 * v909) = v904;
                            v906 = 8 * v909 + 8;
                            if (v905 != v907)
                              goto LABEL_1183;
                          }
                          v3 = (uint64_t)v1192;
LABEL_1192:
                          v1208 = v915;
                          v1210 = &v914[8 * v912];
                          if (v907)
                            operator delete(v907);
                          goto LABEL_1194;
                        }
                        v877 = v848 - v1184;
                        v878 = v877 + 1;
                        if ((unint64_t)(v877 + 1) >> 61)
                          goto LABEL_1551;
                        if (((char *)v1170 - (char *)v1184) >> 2 > v878)
                          v878 = ((char *)v1170 - (char *)v1184) >> 2;
                        if ((unint64_t)((char *)v1170 - (char *)v1184) >= 0x7FFFFFFFFFFFFFF8)
                          v879 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v879 = v878;
                        if (v879)
                        {
                          if (v879 >> 61)
                            goto LABEL_1548;
                          v880 = v879;
                          v881 = operator new(8 * v879);
                          v879 = v880;
                        }
                        else
                        {
                          v881 = 0;
                        }
                        v882 = (operations_research::sat::PresolveContext **)&v881[8 * v877];
                        *v882 = v868;
                        v867 = v882 + 1;
                        if (v848 != v1184)
                        {
                          v883 = (char *)(v848 - 1) - (char *)v1184;
                          if (v883 < 0x168
                            || &v881[(char *)v848 - (char *)v1184 - 8 - (v883 & 0xFFFFFFFFFFFFFFF8)] > &v881[(char *)v848 - (char *)v1184 - 8]
                            || (operations_research::sat::PresolveContext **)((char *)v848
                                                                            - (v883 & 0xFFFFFFFFFFFFFFF8)
                                                                            - 8) > v848 - 1
                            || (unint64_t)((char *)v1184 - v881) < 0x20)
                          {
                            v884 = v848;
                          }
                          else
                          {
                            v898 = (v883 >> 3) + 1;
                            v899 = 8 * (v898 & 0x3FFFFFFFFFFFFFFCLL);
                            v884 = &v848[v899 / 0xFFFFFFFFFFFFFFF8];
                            v882 = (operations_research::sat::PresolveContext **)((char *)v882 - v899);
                            v900 = (__n128 *)&v881[8 * (v848 - v1184) - 16];
                            v901 = (__n128 *)(v848 - 2);
                            v902 = v898 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v846 = *v901;
                              v900[-1] = v901[-1];
                              *v900 = v846;
                              v900 -= 2;
                              v901 -= 2;
                              v902 -= 4;
                            }
                            while (v902);
                            if (v898 == (v898 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_1137:
                              v1214[0] = v882;
                              v1214[1] = v867;
                              v1170 = (operations_research::sat::PresolveContext **)&v881[8 * v879];
                              v1214[2] = v1170;
                              if (v1184)
                                goto LABEL_1138;
                              goto LABEL_1139;
                            }
                          }
                          do
                          {
                            v885 = *--v884;
                            *--v882 = v885;
                          }
                          while (v884 != v1184);
                          goto LABEL_1137;
                        }
                        v1214[0] = v882;
                        v1214[1] = v882 + 1;
                        v1170 = (operations_research::sat::PresolveContext **)&v881[8 * v879];
                        v1214[2] = v1170;
                        if (v1184)
                        {
LABEL_1138:
                          operator delete(v1184);
                          *(_QWORD *)v1190 = v1212;
                          *(_QWORD *)v1178 = v1213;
                        }
LABEL_1139:
                        v886 = v882;
                        v1214[1] = v867;
                        v875 = *(char **)v1190;
                        v1184 = v886;
                        if (*(_QWORD *)v1190 >= *(_QWORD *)v1178)
                          goto LABEL_1140;
LABEL_1121:
                        *(_QWORD *)v875 = v869;
                        v876 = (uint64_t)(v875 + 8);
                        goto LABEL_1169;
                      }
                      v867 = v848;
                      v3 = (uint64_t)v1192;
                    }
LABEL_1116:
                    ++v849;
                    v848 = v867;
                    if (v849 >= *(int *)(v94 + 88))
                    {
                      v929 = (char *)v1211;
                      v930 = *(char **)v1190;
                      goto LABEL_1201;
                    }
                  }
                }
                v929 = 0;
                v930 = 0;
LABEL_1201:
                v1205 = 0;
                v1206 = 0;
                v1207 = 0;
                *(_QWORD *)v1191 = v930;
                v931 = v930 - v929;
                v932 = (v930 - v929) >> 3;
                if (v932 != 1)
                {
                  if (v932 == 2)
                  {
                    v933 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v3);
                    v934 = v933;
                    v936 = (char *)v1206;
                    v935 = (int *)v1207;
                    if ((unint64_t)v1206 < v1207)
                    {
                      v937 = v847;
                      *(_DWORD *)v1206 = v933;
                      v938 = (int *)(v936 + 4);
                      goto LABEL_1283;
                    }
                    v955 = (char *)v1205;
                    v956 = (_BYTE *)v1206 - (_BYTE *)v1205;
                    v957 = ((_BYTE *)v1206 - (_BYTE *)v1205) >> 2;
                    v958 = v957 + 1;
                    if ((unint64_t)(v957 + 1) >> 62)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v959 = v1207 - (_QWORD)v1205;
                    if ((uint64_t)(v1207 - (_QWORD)v1205) >> 1 > v958)
                      v958 = v959 >> 1;
                    if ((unint64_t)v959 >= 0x7FFFFFFFFFFFFFFCLL)
                      v960 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v960 = v958;
                    if (v960)
                    {
                      if (v960 >> 62)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v961 = v960;
                      v962 = operator new(4 * v960);
                      v960 = v961;
                      v963 = (int *)&v962[4 * v957];
                      *v963 = v934;
                      v938 = v963 + 1;
                      if (v936 == v955)
                        goto LABEL_1281;
LABEL_1275:
                      v1003 = v936 - 4 - v955;
                      if (v1003 < 0x2C)
                        goto LABEL_1573;
                      if ((unint64_t)(v936 - &v962[v956]) < 0x20)
                        goto LABEL_1573;
                      v1004 = (v1003 >> 2) + 1;
                      v1005 = 4 * (v1004 & 0x7FFFFFFFFFFFFFF8);
                      v1006 = &v936[-v1005];
                      v963 = (int *)((char *)v963 - v1005);
                      v1007 = &v962[4 * v957 - 16];
                      v1008 = v936 - 16;
                      v1009 = v1004 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v1010 = *(_OWORD *)v1008;
                        *(v1007 - 1) = *((_OWORD *)v1008 - 1);
                        *v1007 = v1010;
                        v1007 -= 2;
                        v1008 -= 32;
                        v1009 -= 8;
                      }
                      while (v1009);
                      v936 = v1006;
                      if (v1004 != (v1004 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1573:
                        do
                        {
                          v1011 = *((_DWORD *)v936 - 1);
                          v936 -= 4;
                          *--v963 = v1011;
                        }
                        while (v936 != v955);
                      }
                    }
                    else
                    {
                      v962 = 0;
                      v963 = (int *)(4 * v957);
                      *(_DWORD *)(4 * v957) = v934;
                      v938 = (int *)(4 * v957 + 4);
                      if (v936 != v955)
                        goto LABEL_1275;
                    }
LABEL_1281:
                    v937 = v847;
                    v935 = (int *)&v962[4 * v960];
                    v1205 = v963;
                    v1206 = v938;
                    v1207 = (unint64_t)v935;
                    if (v955)
                    {
                      operator delete(v955);
                      v935 = (int *)v1207;
                    }
LABEL_1283:
                    v1206 = v938;
                    v1012 = ~v934;
                    if (v938 < v935)
                    {
                      *v938 = v1012;
                      v1013 = v938 + 1;
                      v3 = (uint64_t)v1192;
                      v847 = v937;
LABEL_1300:
                      v1206 = v1013;
                      v977 = 2;
                      v1200 = 0;
                      v1201 = 0;
                      v1202 = 0;
                      if (*(char **)v1191 != v929)
                        goto LABEL_1301;
LABEL_1272:
                      v1001 = 0;
                      v1002 = 0;
                      goto LABEL_1303;
                    }
                    v1014 = (int *)v1205;
                    v1015 = (char *)v938 - (_BYTE *)v1205;
                    v1016 = ((char *)v938 - (_BYTE *)v1205) >> 2;
                    v1017 = v1016 + 1;
                    if ((unint64_t)(v1016 + 1) >> 62)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v1018 = (char *)v935 - (_BYTE *)v1205;
                    if (v1018 >> 1 > v1017)
                      v1017 = v1018 >> 1;
                    if ((unint64_t)v1018 >= 0x7FFFFFFFFFFFFFFCLL)
                      v1019 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v1019 = v1017;
                    if (v1019)
                    {
                      if (v1019 >> 62)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v1020 = v1019;
                      v1021 = operator new(4 * v1019);
                      v1019 = v1020;
                      v1022 = (int *)&v1021[4 * v1016];
                      *v1022 = v1012;
                      v1013 = v1022 + 1;
                      if (v938 != v1014)
                      {
LABEL_1294:
                        v1023 = (char *)(v938 - 1) - (char *)v1014;
                        v847 = v937;
                        if (v1023 < 0x2C || (unint64_t)((char *)v938 - v1021 - v1015) < 0x20)
                        {
                          v1024 = v938;
                          v3 = (uint64_t)v1192;
                          goto LABEL_1297;
                        }
                        v1107 = (v1023 >> 2) + 1;
                        v1108 = 4 * (v1107 & 0x7FFFFFFFFFFFFFF8);
                        v1024 = &v938[v1108 / 0xFFFFFFFFFFFFFFFCLL];
                        v1022 = (int *)((char *)v1022 - v1108);
                        v1109 = &v1021[4 * v1016 - 16];
                        v1110 = v938 - 4;
                        v1111 = v1107 & 0x7FFFFFFFFFFFFFF8;
                        v3 = (uint64_t)v1192;
                        do
                        {
                          v1112 = *(_OWORD *)v1110;
                          *(v1109 - 1) = *((_OWORD *)v1110 - 1);
                          *v1109 = v1112;
                          v1109 -= 2;
                          v1110 -= 8;
                          v1111 -= 8;
                        }
                        while (v1111);
                        if (v1107 != (v1107 & 0x7FFFFFFFFFFFFFF8))
                        {
                          do
                          {
LABEL_1297:
                            v1025 = *--v1024;
                            *--v1022 = v1025;
                          }
                          while (v1024 != v1014);
                        }
                        v1205 = v1022;
                        v1206 = v1013;
                        v1207 = (unint64_t)&v1021[4 * v1019];
                        if (!v1014)
                          goto LABEL_1300;
LABEL_1299:
                        operator delete(v1014);
                        goto LABEL_1300;
                      }
                    }
                    else
                    {
                      v1021 = 0;
                      v1022 = (int *)(4 * v1016);
                      *(_DWORD *)(4 * v1016) = v1012;
                      v1013 = (void *)(4 * v1016 + 4);
                      if (v938 != v1014)
                        goto LABEL_1294;
                    }
                    v3 = (uint64_t)v1192;
                    v847 = v937;
                    v1205 = v1022;
                    v1206 = v1013;
                    v1207 = (unint64_t)&v1021[4 * v1019];
                    if (!v1014)
                      goto LABEL_1300;
                    goto LABEL_1299;
                  }
                  v943 = *(_QWORD *)(v3 + 48);
                  v944 = *(int **)(v943 + 56);
                  if (!v944)
                  {
                    v946 = *(_DWORD *)(v943 + 52);
                    goto LABEL_1237;
                  }
                  v945 = *(int *)(v943 + 48);
                  v946 = *v944;
                  if ((int)v945 < *v944)
                  {
                    *(_DWORD *)(v943 + 48) = v945 + 1;
                    v947 = *(_QWORD *)&v944[2 * v945 + 2];
                    if (*(_DWORD *)(v947 + 60) != 12)
                      goto LABEL_1210;
LABEL_1239:
                    v950 = *(_QWORD *)(v947 + 48);
                    v952 = *(unsigned int *)(v950 + 64);
                    v951 = *(_DWORD *)(v950 + 68);
                    v953 = (unsigned int *)(v950 + 64);
                    v954 = v952 + 1;
                    if ((_DWORD)v952 == v951)
                      goto LABEL_1240;
                    goto LABEL_1241;
                  }
                  if (v946 == *(_DWORD *)(v943 + 52))
                  {
LABEL_1237:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v943 + 40), v946 + 1);
                    v944 = *(int **)(v943 + 56);
                    v946 = *v944;
                  }
                  *v944 = v946 + 1;
                  v947 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v943 + 40));
                  v973 = *(_QWORD *)(v943 + 56);
                  v974 = *(int *)(v943 + 48);
                  *(_DWORD *)(v943 + 48) = v974 + 1;
                  *(_QWORD *)(v973 + 8 * v974 + 8) = v947;
                  if (*(_DWORD *)(v947 + 60) == 12)
                    goto LABEL_1239;
LABEL_1210:
                  operations_research::sat::ConstraintProto::clear_constraint(v947);
                  *(_DWORD *)(v947 + 60) = 12;
                  v948 = *(_QWORD *)(v947 + 8);
                  v949 = (google::protobuf::Arena *)(v948 & 0xFFFFFFFFFFFFFFFELL);
                  if ((v948 & 1) != 0)
                    v949 = *(google::protobuf::Arena **)v949;
                  v950 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v949);
                  *(_QWORD *)(v947 + 48) = v950;
                  v952 = *(unsigned int *)(v950 + 64);
                  v951 = *(_DWORD *)(v950 + 68);
                  v953 = (unsigned int *)(v950 + 64);
                  v954 = v952 + 1;
                  if ((_DWORD)v952 == v951)
                  {
LABEL_1240:
                    google::protobuf::RepeatedField<long long>::Reserve(v953, v954);
                    v951 = *(_DWORD *)(v950 + 68);
                  }
LABEL_1241:
                  v975 = *(_QWORD *)(v950 + 72);
                  *(_QWORD *)(v975 + 8 * v952) = 1;
                  *(_DWORD *)(v950 + 64) = v954;
                  if (v954 == v951)
                  {
                    google::protobuf::RepeatedField<long long>::Reserve(v953, v952 + 2);
                    v975 = *(_QWORD *)(v950 + 72);
                  }
                  *(_QWORD *)(v975 + 8 * v954) = 1;
                  *v953 = v952 + 2;
                  if (v1212 == v1211)
                  {
                    v1001 = 0;
                    v1002 = 0;
                    v1200 = 0;
                    v1201 = 0;
                    v1202 = 0;
                    goto LABEL_1303;
                  }
                  v976 = 0;
                  *(_QWORD *)v1179 = v847;
                  while (2)
                  {
                    v978 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v3);
                    v979 = v978;
                    v980 = (char *)v1206;
                    if ((unint64_t)v1206 < v1207)
                    {
                      *(_DWORD *)v1206 = v978;
                      v981 = v980 + 4;
                      goto LABEL_1267;
                    }
                    v982 = (char *)v1205;
                    v983 = (_BYTE *)v1206 - (_BYTE *)v1205;
                    v984 = ((_BYTE *)v1206 - (_BYTE *)v1205) >> 2;
                    v985 = v984 + 1;
                    if ((unint64_t)(v984 + 1) >> 62)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v986 = v1207 - (_QWORD)v1205;
                    if ((uint64_t)(v1207 - (_QWORD)v1205) >> 1 > v985)
                      v985 = v986 >> 1;
                    if ((unint64_t)v986 >= 0x7FFFFFFFFFFFFFFCLL)
                      v987 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v987 = v985;
                    if (v987)
                    {
                      if (v987 >> 62)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v988 = operator new(4 * v987);
                      v989 = &v988[4 * v984];
                      *v989 = v979;
                      v981 = v989 + 1;
                      if (v980 == v982)
                        goto LABEL_1265;
LABEL_1259:
                      v990 = v980 - 4 - v982;
                      if (v990 < 0x2C)
                        goto LABEL_1574;
                      if ((unint64_t)(v980 - &v988[v983]) < 0x20)
                        goto LABEL_1574;
                      v991 = (v990 >> 2) + 1;
                      v992 = 4 * (v991 & 0x7FFFFFFFFFFFFFF8);
                      v993 = &v980[-v992];
                      v989 = (_DWORD *)((char *)v989 - v992);
                      v994 = &v988[4 * v984 - 16];
                      v995 = v980 - 16;
                      v996 = v991 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v997 = *(_OWORD *)v995;
                        *(v994 - 1) = *((_OWORD *)v995 - 1);
                        *v994 = v997;
                        v994 -= 2;
                        v995 -= 32;
                        v996 -= 8;
                      }
                      while (v996);
                      v980 = v993;
                      if (v991 != (v991 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1574:
                        do
                        {
                          v998 = *((_DWORD *)v980 - 1);
                          v980 -= 4;
                          *--v989 = v998;
                        }
                        while (v980 != v982);
                      }
                    }
                    else
                    {
                      v988 = 0;
                      v989 = (_DWORD *)(4 * v984);
                      *(_DWORD *)(4 * v984) = v979;
                      v981 = (void *)(4 * v984 + 4);
                      if (v980 != v982)
                        goto LABEL_1259;
                    }
LABEL_1265:
                    v1205 = v989;
                    v1206 = v981;
                    v1207 = (unint64_t)&v988[4 * v987];
                    if (v982)
                      operator delete(v982);
LABEL_1267:
                    v1206 = v981;
                    v999 = *(unsigned int *)(v950 + 16);
                    v3 = (uint64_t)v1192;
                    if ((_DWORD)v999 == *(_DWORD *)(v950 + 20))
                      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v950 + 16), v999 + 1);
                    *(_DWORD *)(*(_QWORD *)(v950 + 24) + 4 * v999) = v979;
                    *(_DWORD *)(v950 + 16) = v999 + 1;
                    v1000 = *(unsigned int *)(v950 + 40);
                    if ((_DWORD)v1000 == *(_DWORD *)(v950 + 44))
                      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v950 + 40), v1000 + 1);
                    *(_QWORD *)(*(_QWORD *)(v950 + 48) + 8 * v1000) = 1;
                    *(_DWORD *)(v950 + 40) = v1000 + 1;
                    ++v976;
                    v929 = (char *)v1211;
                    v931 = v1212 - (_BYTE *)v1211;
                    v977 = (v1212 - (_BYTE *)v1211) >> 3;
                    if (v977 <= v976)
                    {
                      v847 = *(_QWORD *)v1179;
                      v1200 = 0;
                      v1201 = 0;
                      v1202 = 0;
                      if (v1212 == v1211)
                        goto LABEL_1272;
LABEL_1301:
                      if ((v931 & 0x8000000000000000) != 0)
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      v1002 = (char *)operator new(v931);
                      v1200 = v1002;
                      v1201 = v1002;
                      v1001 = &v1002[8 * v977];
                      v1202 = v1001;
                      memcpy(v1002, v929, v931);
LABEL_1303:
                      std::__sort<std::__less<long long,long long> &,long long *>();
                      if (v1002 == v1001)
                        goto LABEL_1319;
                      v1026 = v1002 + 8;
                      do
                      {
                        if (v1026 == v1001)
                          goto LABEL_1319;
                        v1027 = *((_QWORD *)v1026 - 1);
                        v1028 = *(_QWORD *)v1026;
                        v1026 += 8;
                      }
                      while (v1027 != v1028);
                      v1029 = v1026 - 16;
                      while (v1026 != v1001)
                      {
                        v1030 = v1027;
                        v1027 = *(_QWORD *)v1026;
                        if (v1030 != *(_QWORD *)v1026)
                        {
                          *((_QWORD *)v1029 + 1) = v1027;
                          v1029 += 8;
                        }
                        v1026 += 8;
                      }
                      if (v1001 == v1029 + 8)
                      {
LABEL_1319:
                        v1031 = v1229;
                        if ((unint64_t)v1229 >= 0x80)
                        {
LABEL_1320:
                          operator delete(v1228.__r_.__value_.__l.__data_);
                          v1031 = 0;
                          v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                          v1230 = 0;
                          *(_QWORD *)&v1229 = 0;
                          *(_OWORD *)&v1228.__r_.__value_.__r.__words[1] = 0uLL;
                          goto LABEL_1321;
                        }
                      }
                      else
                      {
                        v1001 = v1029 + 8;
                        v1201 = v1029 + 8;
                        v1031 = v1229;
                        if ((unint64_t)v1229 >= 0x80)
                          goto LABEL_1320;
                      }
                      if (v1031)
                      {
                        v1228.__r_.__value_.__r.__words[2] = 0;
                        memset(v1228.__r_.__value_.__l.__data_, 128, v1031 + 8);
                        *(_BYTE *)(v1228.__r_.__value_.__r.__words[0] + v1229) = -1;
                        v1031 = v1229;
                        v1032 = v1031 - (v1031 >> 3);
                        if ((_QWORD)v1229 == 7)
                          v1032 = 6;
                        v1230 = v1032 - v1228.__r_.__value_.__r.__words[2];
                      }
LABEL_1321:
                      v1033 = (unint64_t *)*((_QWORD *)&v1229 + 1);
                      if (*((_QWORD *)&v1229 + 1))
                      {
                        *(_QWORD *)(*((_QWORD *)&v1229 + 1) + 8) = 0;
                        *v1033 = v1031;
                        v1033[4] = 0;
                        v1033[2] = 0;
                        v1034 = __str.__r_.__value_.__r.__words[0];
                        v1035 = (const char *)*(unsigned int *)(__str.__r_.__value_.__r.__words[0] + 4 * v847);
                        v1195 = 0;
                        v1196 = 0;
                        v1194 = 0;
                        v1036 = v1001 - v1002;
                        if (v1036)
                        {
LABEL_1323:
                          if (v1036 < 0)
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          v1037 = (char *)operator new(v1036);
                          v1038 = &v1037[8 * (v1036 >> 3)];
                          v1194 = v1037;
                          v1196 = v1038;
                          memcpy(v1037, v1002, v1036);
                          v1195 = v1038;
                        }
                      }
                      else
                      {
                        v1034 = __str.__r_.__value_.__r.__words[0];
                        v1035 = (const char *)*(unsigned int *)(__str.__r_.__value_.__r.__words[0] + 4 * v847);
                        v1195 = 0;
                        v1196 = 0;
                        v1194 = 0;
                        v1036 = v1001 - v1002;
                        if (v1036)
                          goto LABEL_1323;
                      }
                      operations_research::Domain::FromValues((int64_t **)&v1194, &v1197);
                      v1039 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, v1035, (const operations_research::Domain *)&v1197, &v1215);
                      if ((v1197 & 1) != 0)
                        operator delete(v1198);
                      if (v1194)
                      {
                        v1195 = v1194;
                        operator delete(v1194);
                      }
                      if ((v1039 & 1) != 0)
                      {
                        operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)*(unsigned int *)(v1034 + 4 * v847), &v1197);
                        v1040 = v1197 & 1;
                        if ((v1197 & 1) != 0)
                          v1041 = (uint64_t *)v1198;
                        else
                          v1041 = (uint64_t *)&v1198;
                        if (v1197 >= 2)
                        {
                          v1042 = &v1041[2 * (v1197 >> 1)];
                          do
                          {
                            v1043 = *v1041;
                            if (*v1041 <= v1041[1])
                            {
                              do
                              {
                                v1052 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v1192, *(_DWORD *)(v1034 + 4 * v847), v1043);
                                v1048 = 0;
                                v1053 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                         + v1043)
                                        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                            + v1043));
                                v1050 = v1228.__r_.__value_.__l.__size_;
                                for (n = (v1228.__r_.__value_.__r.__words[0] >> 12) ^ (v1053 >> 7); ; n = v1048 + v1044)
                                {
                                  v1044 = n & v1229;
                                  v1045 = *(_QWORD *)(v1228.__r_.__value_.__r.__words[0] + v1044);
                                  v1046 = ((v1045 ^ (0x101010101010101 * (v1053 & 0x7F))) - 0x101010101010101) & ~(v1045 ^ (0x101010101010101 * (v1053 & 0x7F))) & 0x8080808080808080;
                                  if (v1046)
                                    break;
LABEL_1341:
                                  if ((v1045 & (~v1045 << 6) & 0x8080808080808080) != 0)
                                  {
                                    v1047 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)&v1228, v1053);
                                    v1050 = v1228.__r_.__value_.__l.__size_;
                                    v1051 = v1228.__r_.__value_.__l.__size_ + 16 * v1047;
                                    *(_QWORD *)v1051 = v1043;
                                    *(_DWORD *)(v1051 + 8) = 0;
                                    goto LABEL_1344;
                                  }
                                  v1048 += 8;
                                }
                                while (1)
                                {
                                  v1047 = (v1044 + (__clz(__rbit64(v1046)) >> 3)) & v1229;
                                  if (*(_QWORD *)(v1228.__r_.__value_.__l.__size_ + 16 * v1047) == v1043)
                                    break;
                                  v1046 &= v1046 - 1;
                                  if (!v1046)
                                    goto LABEL_1341;
                                }
LABEL_1344:
                                *(_DWORD *)(v1050 + 16 * v1047 + 8) = v1052;
                                v71 = v1043++ < v1041[1];
                              }
                              while (v71);
                            }
                            v1041 += 2;
                          }
                          while (v1041 != v1042);
                          v1040 = v1197 & 1;
                          v3 = (uint64_t)v1192;
                        }
                        if (v1040)
                        {
                          v1054 = (uint64_t *)v1198;
LABEL_1352:
                          operator delete(v1054);
                        }
                      }
                      else
                      {
                        v1199 = 0;
                        LOBYTE(v1197) = 0;
                        operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v3, (uint64_t)&v1197);
                        if (v1199 < 0)
                        {
                          v1054 = (uint64_t *)v1197;
                          goto LABEL_1352;
                        }
                      }
                      if (v1002)
                        operator delete(v1002);
                      if (v1039)
                      {
                        v1200 = 0;
                        v1201 = 0;
                        v1202 = 0;
                        v1055 = v1208;
                        v1056 = v1209 - (_BYTE *)v1208;
                        if (v1209 == v1208)
                        {
                          v1058 = 0;
                          v1057 = 0;
                        }
                        else
                        {
                          if (v1056 < 0)
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          v1057 = (char *)operator new(v1209 - (_BYTE *)v1208);
                          v1058 = &v1057[8 * (v1056 >> 3)];
                          v1200 = v1057;
                          v1202 = v1058;
                          memcpy(v1057, v1055, v1056);
                        }
                        std::__sort<std::__less<long long,long long> &,long long *>();
                        if (v1057 == v1058)
                          goto LABEL_1376;
                        v1059 = v1057 + 8;
                        do
                        {
                          if (v1059 == v1058)
                            goto LABEL_1376;
                          v1060 = *((_QWORD *)v1059 - 1);
                          v1061 = *(_QWORD *)v1059;
                          v1059 += 8;
                        }
                        while (v1060 != v1061);
                        v1062 = v1059 - 16;
                        while (v1059 != v1058)
                        {
                          v1063 = v1060;
                          v1060 = *(_QWORD *)v1059;
                          if (v1063 != *(_QWORD *)v1059)
                          {
                            *((_QWORD *)v1062 + 1) = v1060;
                            v1062 += 8;
                          }
                          v1059 += 8;
                        }
                        if (v1058 == v1062 + 8)
                        {
LABEL_1376:
                          v1064 = v1223;
                          if ((unint64_t)v1223 >= 0x80)
                          {
LABEL_1377:
                            operator delete(*(void **)v1222);
                            v1064 = 0;
                            *(_QWORD *)v1222 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                            v1224 = 0;
                            *(_QWORD *)&v1222[4] = 0;
                            *(_QWORD *)&v1223 = 0;
                            *(_QWORD *)&v1222[2] = 0;
                            goto LABEL_1378;
                          }
                        }
                        else
                        {
                          v1058 = v1062 + 8;
                          v1201 = v1062 + 8;
                          v1064 = v1223;
                          if ((unint64_t)v1223 >= 0x80)
                            goto LABEL_1377;
                        }
                        if (v1064)
                        {
                          *(_QWORD *)&v1222[4] = 0;
                          memset(*(void **)v1222, 128, v1064 + 8);
                          *(_BYTE *)(*(_QWORD *)v1222 + v1223) = -1;
                          v1064 = v1223;
                          v1065 = v1064 - (v1064 >> 3);
                          if ((_QWORD)v1223 == 7)
                            v1065 = 6;
                          v1224 = v1065 - *(_QWORD *)&v1222[4];
                        }
LABEL_1378:
                        v1066 = (unint64_t *)*((_QWORD *)&v1223 + 1);
                        if (*((_QWORD *)&v1223 + 1))
                        {
                          *(_QWORD *)(*((_QWORD *)&v1223 + 1) + 8) = 0;
                          *v1066 = v1064;
                          v1066[4] = 0;
                          v1066[2] = 0;
                          v1067 = v1058 - v1057;
                          if (v1058 - v1057 == 16)
                            goto LABEL_1380;
                        }
                        else
                        {
                          v1067 = v1058 - v1057;
                          if (v1058 - v1057 == 16)
                          {
LABEL_1380:
                            v1068 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v3);
                            v1069 = 0;
                            v1070 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                     + *(_QWORD *)v1057)
                                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                       * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                        + *(_QWORD *)v1057));
                            v1071 = *(_QWORD *)v1222;
                            v1072 = *(_QWORD *)&v1222[2];
                            v1073 = *(_QWORD *)v1222 >> 12;
                            v1074 = (*(_QWORD *)v1222 >> 12) ^ (v1070 >> 7);
                            v1075 = v1223;
                            while (1)
                            {
                              v1076 = v1074 & v1223;
                              v1077 = *(_QWORD *)(*(_QWORD *)v1222 + v1076);
                              v1078 = ((v1077 ^ (0x101010101010101 * (v1070 & 0x7F))) - 0x101010101010101) & ~(v1077 ^ (0x101010101010101 * (v1070 & 0x7F))) & 0x8080808080808080;
                              if (v1078)
                                break;
LABEL_1384:
                              if ((v1077 & (~v1077 << 6) & 0x8080808080808080) != 0)
                              {
                                v1079 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1222, v1070);
                                v1072 = *(_QWORD *)&v1222[2];
                                v1080 = *(_QWORD *)&v1222[2] + 16 * v1079;
                                *(_QWORD *)v1080 = *(_QWORD *)v1057;
                                *(_DWORD *)(v1080 + 8) = 0;
                                v1071 = *(_QWORD *)v1222;
                                v1075 = v1223;
                                v1073 = *(_QWORD *)v1222 >> 12;
                                goto LABEL_1392;
                              }
                              v1069 += 8;
                              v1074 = v1069 + v1076;
                            }
                            while (1)
                            {
                              v1079 = (v1076 + (__clz(__rbit64(v1078)) >> 3)) & v1223;
                              if (*(_QWORD *)(*(_QWORD *)&v1222[2] + 16 * v1079) == *(_QWORD *)v1057)
                                break;
                              v1078 &= v1078 - 1;
                              if (!v1078)
                                goto LABEL_1384;
                            }
LABEL_1392:
                            v1081 = 0;
                            *(_DWORD *)(v1072 + 16 * v1079 + 8) = v1068;
                            v1082 = *((_QWORD *)v1058 - 1);
                            v1083 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                     + v1082)
                                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                       * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                        + v1082));
                            v1084 = v1073 ^ (v1083 >> 7);
                            v1085 = *(_QWORD *)&v1222[2];
                            while (1)
                            {
                              v1086 = v1084 & v1075;
                              v1087 = *(_QWORD *)(v1071 + v1086);
                              v1088 = ((v1087 ^ (0x101010101010101 * (v1083 & 0x7F))) - 0x101010101010101) & ~(v1087 ^ (0x101010101010101 * (v1083 & 0x7F))) & 0x8080808080808080;
                              if (v1088)
                                break;
LABEL_1396:
                              if ((v1087 & (~v1087 << 6) & 0x8080808080808080) != 0)
                              {
                                v1089 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1222, v1083);
                                v1085 = *(_QWORD *)&v1222[2];
                                v1090 = *(_QWORD *)&v1222[2] + 16 * v1089;
                                *(_QWORD *)v1090 = *((_QWORD *)v1058 - 1);
                                *(_DWORD *)(v1090 + 8) = 0;
                                goto LABEL_1399;
                              }
                              v1081 += 8;
                              v1084 = v1081 + v1086;
                            }
                            while (1)
                            {
                              v1089 = (v1086 + (__clz(__rbit64(v1088)) >> 3)) & v1075;
                              if (*(_QWORD *)(*(_QWORD *)&v1222[2] + 16 * v1089) == v1082)
                                break;
                              v1088 &= v1088 - 1;
                              if (!v1088)
                                goto LABEL_1396;
                            }
LABEL_1399:
                            *(_DWORD *)(v1085 + 16 * v1089 + 8) = ~v1068;
                            goto LABEL_1444;
                          }
                        }
                        if (v1057 != v1058 && v1067 >= 0x11)
                        {
                          v1113 = v1057;
                          do
                          {
                            v1122 = *(_QWORD *)v1113;
                            v1123 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v3);
                            v1118 = 0;
                            v1124 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                     + v1122)
                                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                       * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                        + v1122));
                            v1120 = *(_QWORD *)&v1222[2];
                            for (ii = (*(_QWORD *)v1222 >> 12) ^ (v1124 >> 7); ; ii = v1118 + v1114)
                            {
                              v1114 = ii & v1223;
                              v1115 = *(_QWORD *)(*(_QWORD *)v1222 + v1114);
                              v1116 = ((v1115 ^ (0x101010101010101 * (v1124 & 0x7F))) - 0x101010101010101) & ~(v1115 ^ (0x101010101010101 * (v1124 & 0x7F))) & 0x8080808080808080;
                              if (v1116)
                                break;
LABEL_1439:
                              if ((v1115 & (~v1115 << 6) & 0x8080808080808080) != 0)
                              {
                                v1117 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1222, v1124);
                                v1120 = *(_QWORD *)&v1222[2];
                                v1121 = *(_QWORD *)&v1222[2] + 16 * v1117;
                                *(_QWORD *)v1121 = v1122;
                                *(_DWORD *)(v1121 + 8) = 0;
                                goto LABEL_1442;
                              }
                              v1118 += 8;
                            }
                            while (1)
                            {
                              v1117 = (v1114 + (__clz(__rbit64(v1116)) >> 3)) & v1223;
                              if (*(_QWORD *)(*(_QWORD *)&v1222[2] + 16 * v1117) == v1122)
                                break;
                              v1116 &= v1116 - 1;
                              if (!v1116)
                                goto LABEL_1439;
                            }
LABEL_1442:
                            *(_DWORD *)(v1120 + 16 * v1117 + 8) = v1123;
                            v1113 += 8;
                          }
                          while (v1113 != v1058);
                        }
LABEL_1444:
                        if (v1057)
                          operator delete(v1057);
                        if (*(_QWORD *)&v1225[16])
                        if (v1228.__r_.__value_.__r.__words[2])
                        v1125 = *(_QWORD *)&v1222[4];
                        if (*(_QWORD *)&v1222[4])
                        {
                          v1125 = *(_QWORD *)&v1222[4];
                        }
                        v846 = *(__n128 *)v1225;
                        *(_OWORD *)v1225 = *(_OWORD *)v1222;
                        *(__n128 *)v1222 = v846;
                        v1106 = (unint64_t *)*((_QWORD *)&v1226 + 1);
                        v1126 = v1226;
                        v1127 = v1227;
                        v1226 = v1223;
                        *(_QWORD *)&v1222[4] = *(_QWORD *)&v1225[16];
                        v1223 = __PAIR128__((unint64_t)v1106, v1126);
                        *(_QWORD *)&v1225[16] = v1125;
                        v1227 = v1224;
                        v1224 = v1127;
                        if (v1126 < 0x80)
                        {
                          if (v1126)
                          {
                            *(_QWORD *)&v1222[4] = 0;
                            memset((void *)v846.n128_u64[0], 128, v1126 + 8);
                            *(_BYTE *)(*(_QWORD *)v1222 + v1223) = -1;
                            v1128 = v1223;
                            v1129 = v1128 - (v1128 >> 3);
                            if ((_QWORD)v1223 == 7)
                              v1129 = 6;
                            v1224 = v1129 - *(_QWORD *)&v1222[4];
                            v1106 = (unint64_t *)*((_QWORD *)&v1223 + 1);
                            v1103 = 0;
                            if (*((_QWORD *)&v1223 + 1))
                              goto LABEL_1469;
                          }
                          else
                          {
                            v1128 = 0;
                            v1103 = 0;
                            if (v1106)
                              goto LABEL_1469;
                          }
LABEL_1454:
                          v1104 = v1205;
                          if (!v1205)
                            goto LABEL_1456;
                        }
                        else
                        {
                          operator delete((void *)v846.n128_u64[0]);
                          v1128 = 0;
                          *(_QWORD *)v1222 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                          v1224 = 0;
                          *(_QWORD *)&v1222[4] = 0;
                          *(_QWORD *)&v1223 = 0;
                          *(_QWORD *)&v1222[2] = 0;
                          v1106 = (unint64_t *)*((_QWORD *)&v1223 + 1);
                          v1103 = 0;
                          if (!*((_QWORD *)&v1223 + 1))
                            goto LABEL_1454;
LABEL_1469:
                          v1106[1] = 0;
                          *v1106 = v1128;
                          v1106[4] = 0;
LABEL_1473:
                          v1106[2] = 0;
                          v1104 = v1205;
                          if (!v1205)
                            goto LABEL_1456;
                        }
LABEL_1455:
                        v1206 = v1104;
                        operator delete(v1104);
                        goto LABEL_1456;
                      }
LABEL_1415:
                      v1103 = 1;
                      v1104 = v1205;
                      if (!v1205)
                        goto LABEL_1456;
                      goto LABEL_1455;
                    }
                    continue;
                  }
                }
                v1204 = 0;
                ConstantVar = operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)v3, 1, v846);
                v940 = ConstantVar;
                v941 = (char *)v1206;
                if ((unint64_t)v1206 >= v1207)
                  break;
                *(_DWORD *)v1206 = ConstantVar;
                v942 = v941 + 4;
                v3 = (uint64_t)v1192;
LABEL_1407:
                v1206 = v942;
                v1200 = (void *)*((_QWORD *)v1216 + 6 * v847 + 8);
                v1203 = 1;
                if (v1200 != (void *)1)
                {
                  v1197 = google::MakeCheckOpString<unsigned long,int>((int)&v1200, (int)&v1203, "reachable_states[time + 1].size() == 1");
                  if (v1197)
                  {
                    google::LogMessageFatal::LogMessageFatal((unint64_t *)&v1200, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 773, (uint64_t **)&v1197);
                    google::LogMessage::stream((google::LogMessage *)&v1200);
                    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v1200);
                  }
                }
                v1100 = (const char *)*(unsigned int *)(__str.__r_.__value_.__r.__words[0] + 4 * v847);
                operations_research::Domain::Domain(&v1200, *(_QWORD *)v929);
                v1101 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, v1100, (const operations_research::Domain *)&v1200, &v1204);
                if ((v1200 & 1) != 0)
                  operator delete(v1201);
                if ((v1101 & 1) == 0)
                {
                  HIBYTE(v1202) = 0;
                  LOBYTE(v1200) = 0;
                  operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v3, (uint64_t)&v1200);
                  if (SHIBYTE(v1202) < 0)
                    operator delete(v1200);
                  goto LABEL_1415;
                }
                v1102 = v1226;
                if ((unint64_t)v1226 < 0x80)
                {
                  if ((_QWORD)v1226)
                  {
                    *(_QWORD *)&v1225[16] = 0;
                    memset(*(void **)v1225, 128, v1226 + 8);
                    *(_BYTE *)(*(_QWORD *)v1225 + v1226) = -1;
                    v1102 = v1226;
                    v1105 = v1102 - (v1102 >> 3);
                    if ((_QWORD)v1226 == 7)
                      v1105 = 6;
                    v1227 = v1105 - *(_QWORD *)&v1225[16];
                  }
                }
                else
                {
                  operator delete(*(void **)v1225);
                  v1102 = 0;
                  *(_QWORD *)v1225 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  v1227 = 0;
                  *(_QWORD *)&v1225[16] = 0;
                  *(_QWORD *)&v1226 = 0;
                  *(_QWORD *)&v1225[8] = 0;
                }
                v1106 = (unint64_t *)*((_QWORD *)&v1226 + 1);
                if (*((_QWORD *)&v1226 + 1))
                {
                  *(_QWORD *)(*((_QWORD *)&v1226 + 1) + 8) = 0;
                  *v1106 = v1102;
                  v1106[4] = 0;
                  v1103 = 18;
                  goto LABEL_1473;
                }
                v1103 = 18;
                v1104 = v1205;
                if (v1205)
                  goto LABEL_1455;
LABEL_1456:
                if (v1208)
                  operator delete(v1208);
                if (v1211)
                  operator delete(v1211);
                if (v1214[0])
                  operator delete(v1214[0]);
                if (v1103 != 18 && v1103)
                  goto LABEL_1481;
                if (++v847 == v1154)
                {
                  if (v1215)
                  {
                    v1214[0] = (operations_research::sat::PresolveContext **)operator new(0x28uLL);
                    *(_OWORD *)&v1214[1] = xmmword_22DCE6590;
                    strcpy((char *)v1214[0], "automaton: reduced variable domains");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1214);
                    if (SHIBYTE(v1214[2]) < 0)
                      operator delete(v1214[0]);
                  }
                  goto LABEL_1478;
                }
              }
              v964 = (char *)v1205;
              v965 = (_BYTE *)v1206 - (_BYTE *)v1205;
              v966 = ((_BYTE *)v1206 - (_BYTE *)v1205) >> 2;
              v967 = v966 + 1;
              if ((unint64_t)(v966 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v968 = v1207 - (_QWORD)v1205;
              if ((uint64_t)(v1207 - (_QWORD)v1205) >> 1 > v967)
                v967 = v968 >> 1;
              if ((unint64_t)v968 >= 0x7FFFFFFFFFFFFFFCLL)
                v969 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v969 = v967;
              if (v969)
              {
                if (v969 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v970 = operator new(4 * v969);
                v971 = &v970[4 * v966];
                *v971 = v940;
                v942 = v971 + 1;
                if (v941 != v964)
                {
LABEL_1233:
                  v972 = v941 - 4 - v964;
                  if (v972 >= 0x2C)
                  {
                    v1091 = v941 - &v970[v965];
                    v3 = (uint64_t)v1192;
                    if (v1091 >= 0x20)
                    {
                      v1092 = (v972 >> 2) + 1;
                      v1093 = 4 * (v1092 & 0x7FFFFFFFFFFFFFF8);
                      v1094 = &v941[-v1093];
                      v971 = (_DWORD *)((char *)v971 - v1093);
                      v1095 = &v970[4 * v966 - 16];
                      v1096 = v941 - 16;
                      v1097 = v1092 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v1098 = *(_OWORD *)v1096;
                        *(v1095 - 1) = *((_OWORD *)v1096 - 1);
                        *v1095 = v1098;
                        v1095 -= 2;
                        v1096 -= 32;
                        v1097 -= 8;
                      }
                      while (v1097);
                      v941 = v1094;
                      if (v1092 == (v1092 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1405:
                        v1205 = v971;
                        v1206 = v942;
                        v1207 = (unint64_t)&v970[4 * v969];
                        if (v964)
                          operator delete(v964);
                        goto LABEL_1407;
                      }
                    }
                  }
                  else
                  {
                    v3 = (uint64_t)v1192;
                  }
                  do
                  {
                    v1099 = *((_DWORD *)v941 - 1);
                    v941 -= 4;
                    *--v971 = v1099;
                  }
                  while (v941 != v964);
                  goto LABEL_1405;
                }
              }
              else
              {
                v970 = 0;
                v971 = (_DWORD *)(4 * v966);
                *(_DWORD *)(4 * v966) = v940;
                v942 = (void *)(4 * v966 + 4);
                if (v941 != v964)
                  goto LABEL_1233;
              }
              v3 = (uint64_t)v1192;
              goto LABEL_1405;
            }
          }
          else
          {
            v198 = *(int *)(v94 + 16);
            if ((_DWORD)v198)
            {
              v199 = *(_QWORD **)(v94 + 24);
              v200 = 8 * v198;
              while (*(_QWORD *)(v94 + 136) != *v199)
              {
                ++v199;
                v200 -= 8;
                if (!v200)
                  goto LABEL_237;
              }
              v1218[0] = (unint64_t)operator new(0x20uLL);
              *(_OWORD *)&v1218[1] = xmmword_22DCE6520;
              strcpy((char *)v1218[0], "automaton: empty constraint");
              operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1218);
              if (SHIBYTE(v1218[2]) < 0)
                operator delete((void *)v1218[0]);
LABEL_820:
              operations_research::sat::ConstraintProto::Clear(v1193);
              goto LABEL_1508;
            }
          }
LABEL_237:
          HIBYTE(v1218[2]) = 0;
          LOBYTE(v1218[0]) = 0;
          operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v3, (uint64_t)v1218);
          goto LABEL_623;
        case 0x12:
          v24 = (uint64_t *)*((_QWORD *)v1193 + 6);
          v26 = *((_DWORD *)v24 + 10);
          LODWORD(v1218[0]) = *((_DWORD *)v24 + 4);
          v25 = LODWORD(v1218[0]);
          *(_DWORD *)v1225 = v26;
          if (LODWORD(v1218[0]) == v26)
          {
            v27 = 18;
            v28 = SLODWORD(v1218[0]);
            v29 = *((int *)v24 + 4);
            if (!(_DWORD)v29)
              goto LABEL_23;
LABEL_17:
            v30 = (unsigned int *)v24[3];
            v31 = 4 * v29;
            while (1)
            {
              v32 = (const char *)*v30;
              operations_research::Domain::Domain(v1218, 0, v28 - 1);
              v33 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, v32, (const operations_research::Domain *)v1218, 0);
              if ((v1218[0] & 1) != 0)
                operator delete((void *)v1218[1]);
              if ((v33 & 1) == 0)
                break;
              ++v30;
              v31 -= 4;
              if (!v31)
              {
                v27 = *((_DWORD *)v1193 + 15);
                goto LABEL_23;
              }
            }
            if (*off_2540793C0[0] < 1
              || off_2540793C0[0] == &google::kLogSiteUninitialized
              && !google::InitVLOG3__((google *)off_2540793C0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1))
            {
              goto LABEL_1508;
            }
            google::LogMessage::LogMessage((google::LogMessage *)v1218, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 354);
            v141 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v1218);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"Empty domain for a variable in ExpandInverse()", 46);
LABEL_249:
            google::LogMessage::~LogMessage((google::LogMessage *)v1218);
            goto LABEL_1508;
          }
          v1228.__r_.__value_.__r.__words[0] = google::MakeCheckOpString<int,int>((int)v1218, (int)v1225, "size == ct->inverse().f_inverse().size()");
          if (v1228.__r_.__value_.__r.__words[0])
          {
            google::LogMessageFatal::LogMessageFatal(v1218, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 346, (uint64_t **)&v1228);
            google::LogMessage::stream((google::LogMessage *)v1218);
LABEL_1567:
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v1218);
          }
          v27 = *((_DWORD *)v1193 + 15);
          if (v27 == 18)
          {
            v24 = (uint64_t *)*((_QWORD *)v1193 + 6);
            v27 = 18;
            v28 = (int)v25;
            v29 = *((int *)v24 + 4);
            if ((_DWORD)v29)
              goto LABEL_17;
          }
          else
          {
            v24 = &operations_research::sat::_InverseConstraintProto_default_instance_;
            v28 = (int)v25;
            v29 = (int)qword_25408AE10;
            if ((_DWORD)qword_25408AE10)
              goto LABEL_17;
          }
LABEL_23:
          v34 = &operations_research::sat::_InverseConstraintProto_default_instance_;
          if (v27 == 18)
            v34 = (uint64_t *)*((_QWORD *)v1193 + 6);
          v35 = *((int *)v34 + 10);
          if (!(_DWORD)v35)
          {
LABEL_32:
            memset(v1218, 0, sizeof(v1218));
            v1228.__r_.__value_.__r.__words[0] = v3;
            LODWORD(v1228.__r_.__value_.__r.__words[1]) = v25;
            v1228.__r_.__value_.__r.__words[2] = (std::string::size_type)v1218;
            if (v27 == 18)
              v41 = (uint64_t *)*((_QWORD *)v1193 + 6);
            else
              v41 = &operations_research::sat::_InverseConstraintProto_default_instance_;
            {
              v201 = *((_DWORD *)v1193 + 15) == 18
                   ? (uint64_t *)*((_QWORD *)v1193 + 6)
                   : &operations_research::sat::_InverseConstraintProto_default_instance_;
              {
                if ((int)v25 >= 1)
                {
                  for (jj = 0; jj != v25; ++jj)
                  {
                    v501 = &operations_research::sat::_InverseConstraintProto_default_instance_;
                    if (*((_DWORD *)v1193 + 15) == 18)
                      v501 = (uint64_t *)*((_QWORD *)v1193 + 6);
                    v502 = (const char *)*(unsigned int *)(v501[3] + 4 * jj);
                    operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, v502, (unint64_t *)v1225);
                    v503 = v1225[0] & 1;
                    if ((v1225[0] & 1) != 0)
                      v504 = *(uint64_t **)&v1225[8];
                    else
                      v504 = (uint64_t *)&v1225[8];
                    if (*(_QWORD *)v1225 >= 2uLL)
                    {
                      v505 = &v504[2 * (*(_QWORD *)v1225 >> 1)];
                      do
                      {
                        v506 = *v504;
                        if (*v504 <= v504[1])
                        {
                          v507 = v506 << 32;
                          do
                          {
                            v508 = &operations_research::sat::_InverseConstraintProto_default_instance_;
                            if (*((_DWORD *)v1193 + 15) == 18)
                              v508 = (uint64_t *)*((_QWORD *)v1193 + 6);
                            v509 = *(_DWORD *)(v508[6] + (v507 >> 30));
                            v1222[0] = 0;
                            if (operations_research::sat::PresolveContext::HasVarValueEncoding((operations_research::sat::PresolveContext *)v3, v509, jj, v1222))
                            {
                              operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)v3, (const char *)v1222[0], (int)v502, v506);
                            }
                            else
                            {
                              v510 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, (int)v502, v506);
                              operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)v3, v510, v509, jj);
                            }
                            v507 += 0x100000000;
                            v71 = v506++ < v504[1];
                          }
                          while (v71);
                        }
                        v504 += 2;
                      }
                      while (v504 != v505);
                      v503 = v1225[0] & 1;
                    }
                    if (v503)
                      operator delete(*(void **)&v1225[8]);
                  }
                }
                operations_research::sat::ConstraintProto::Clear(v1193);
                v1225[23] = 17;
                strcpy(v1225, "inverse: expanded");
                operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1225);
                if ((v1225[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1225);
              }
            }
            v458 = (void *)v1218[0];
            if (v1218[0])
            {
              v1218[1] = v1218[0];
              goto LABEL_1507;
            }
            goto LABEL_1508;
          }
          v36 = (unsigned int *)v34[6];
          v37 = v28 - 1;
          v38 = 4 * v35;
          while (1)
          {
            v39 = (const char *)*v36;
            operations_research::Domain::Domain(v1218, 0, v37);
            v40 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, v39, (const operations_research::Domain *)v1218, 0);
            if ((v1218[0] & 1) != 0)
              operator delete((void *)v1218[1]);
            if ((v40 & 1) == 0)
              break;
            ++v36;
            v38 -= 4;
            if (!v38)
            {
              v27 = *((_DWORD *)v1193 + 15);
              goto LABEL_32;
            }
          }
          if (*off_2540793C8[0] < 1
            || off_2540793C8[0] == &google::kLogSiteUninitialized
            && !google::InitVLOG3__((google *)off_2540793C8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1))
          {
            goto LABEL_1508;
          }
          google::LogMessage::LogMessage((google::LogMessage *)v1218, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 360);
          v202 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v1218);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)"Empty domain for a variable in ExpandInverse()", 46);
          goto LABEL_249;
        case 0x18:
          v1216 = (operations_research::sat::PresolveContext *)v3;
          v48 = *((_QWORD *)v1193 + 6);
          if (*(_QWORD *)(v48 + 88) > *(_QWORD *)(v48 + 96))
          {
            v49 = (operations_research::sat::PresolveContext *)v3;
            if (*_MergedGlobals_4[0] >= 1)
            {
              if (_MergedGlobals_4[0] != &google::kLogSiteUninitialized
                || (inited = google::InitVLOG3__((google *)_MergedGlobals_4, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1), v49 = (operations_research::sat::PresolveContext *)v3, inited))
              {
                google::LogMessage::LogMessage((google::LogMessage *)v1218, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 35);
                v51 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v1218);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Empty level domain in reservoir constraint.", 43);
                google::LogMessage::~LogMessage((google::LogMessage *)v1218);
                v49 = v1216;
              }
            }
            HIBYTE(v1218[2]) = 0;
            LOBYTE(v1218[0]) = 0;
            operations_research::sat::PresolveContext::NotifyThatModelIsUnsat((uint64_t)v49, (uint64_t)v1218);
            goto LABEL_623;
          }
          v1218[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_OWORD *)&v1218[1] = 0u;
          v1219 = 0u;
          v1220 = 0;
          v107 = *(unsigned int *)(v48 + 16);
          v1189 = operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)v3, 1, (__n128)0);
          v1214[0] = &v1216;
          v108 = *(int *)(v48 + 40);
          v1182 = (void *)v107;
          if (!(_DWORD)v108)
            goto LABEL_265;
          v109 = *(int64x2_t **)(v48 + 48);
          v110 = (v108 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v110 >= 7)
          {
            v203 = v110 + 1;
            v204 = (v110 + 1) & 0x3FFFFFFFFFFFFFF8;
            v113 = &v109->i64[v204];
            v205 = v109 + 2;
            v206 = 0uLL;
            v207 = v204;
            v208 = 0uLL;
            v209 = 0uLL;
            v210 = 0uLL;
            do
            {
              v211 = v205[-2];
              v212 = v205[-1];
              v213 = *v205;
              v214 = v205[1];
              v205 += 4;
              v215 = (int8x16_t)vuzp1q_s32((int32x4_t)vshrq_n_u64((uint64x2_t)v211, 0x3FuLL), (int32x4_t)vshrq_n_u64((uint64x2_t)v212, 0x3FuLL));
              v216 = vuzp1q_s32((int32x4_t)vcgtzq_s64(v211), (int32x4_t)vcgtzq_s64(v212));
              v217 = vuzp1q_s32((int32x4_t)vcgtzq_s64(v213), (int32x4_t)vcgtzq_s64(v214));
              v209 = vsubq_s32(v209, v216);
              v210 = vsubq_s32(v210, v217);
              v206 = vaddq_s32((int32x4_t)vbicq_s8(v215, (int8x16_t)v216), v206);
              v208 = vaddq_s32((int32x4_t)vbicq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshrq_n_u64((uint64x2_t)v213, 0x3FuLL), (int32x4_t)vshrq_n_u64((uint64x2_t)v214, 0x3FuLL)), (int8x16_t)v217), v208);
              v207 -= 8;
            }
            while (v207);
            v112 = vaddvq_s32(vaddq_s32(v210, v209));
            v111 = vaddvq_s32(vaddq_s32(v208, v206));
            if (v203 == v204)
              goto LABEL_260;
          }
          else
          {
            v111 = 0;
            v112 = 0;
            v113 = *(uint64_t **)(v48 + 48);
          }
          v218 = &v109->i64[v108];
          do
          {
            v219 = *v113++;
            v220 = (unint64_t)v219 >> 63;
            if (v219 <= 0)
            {
              v221 = v220;
            }
            else
            {
              ++v112;
              v221 = 0;
            }
            v111 += v221;
          }
          while (v113 != v218);
LABEL_260:
          if (v112)
            v222 = v111 == 0;
          else
            v222 = 1;
          if (!v222)
          {
            if ((int)v107 > 1)
            {
              v231 = 0;
              v232 = (v107 - 1);
              v233 = 1;
              v1146 = v232;
              while (1)
              {
                v235 = v1189;
                if (*(_DWORD *)(v48 + 64))
                  v235 = *(unsigned int *)(*(_QWORD *)(v48 + 72) + 4 * v231);
                if (operations_research::sat::PresolveContext::LiteralIsFalse(v1216, (const char *)v235))
                {
                  v234 = v231 + 1;
                  goto LABEL_275;
                }
                v234 = v231 + 1;
                if (v231 + 1 < v107)
                  break;
LABEL_275:
                ++v233;
                v231 = v234;
                if (v234 == v232)
                  goto LABEL_480;
              }
              v1147 = v231 + 1;
              v1148 = v233;
              v236 = *(unsigned int *)(*(_QWORD *)(v48 + 24) + 4 * v231);
              *(_QWORD *)v1161 = v236 << 32;
              v1167 = v235;
              v1152 = ~(_DWORD)v235;
              *(_QWORD *)v1173 = v236;
              v1155 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v236)
                      * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                         * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                          + v236));
              v1150 = v231;
              while (1)
              {
                v237 = v1189;
                if (*(_DWORD *)(v48 + 64))
                  v237 = *(unsigned int *)(*(_QWORD *)(v48 + 72) + 4 * v233);
                if (operations_research::sat::PresolveContext::LiteralIsFalse(v1216, (const char *)v237))
                  goto LABEL_283;
                v238 = 0;
                v239 = *(unsigned int *)(*(_QWORD *)(v48 + 24) + 4 * v233);
                v1211 = (void *)(*(_QWORD *)v1173 | (v239 << 32));
                v1208 = (void *)(*(_QWORD *)v1161 | v239);
                v240 = (((unint64_t)(v239 + v1155) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v239 + v1155));
                v241 = (v240 >> 7) ^ (v1218[0] >> 12);
                v242 = 0x101010101010101 * (v240 & 0x7F);
                while (1)
                {
                  v243 = v241 & v1219;
                  v244 = *(_QWORD *)(v1218[0] + v243);
                  v245 = ((v244 ^ v242) - 0x101010101010101) & ~(v244 ^ v242) & 0x8080808080808080;
                  if (v245)
                    break;
LABEL_294:
                  if ((v244 & (~v244 << 6) & 0x8080808080808080) != 0)
                    goto LABEL_297;
                  v238 += 8;
                  v241 = v238 + v243;
                }
                while (1)
                {
                  v246 = (v243 + (__clz(__rbit64(v245)) >> 3)) & v1219;
                  v247 = (int *)(v1218[1] + 12 * v246);
                  v248 = *v247;
                  v249 = v247[1];
                  if (v248 == v1173[0] && v249 == (_DWORD)v239)
                    break;
                  v245 &= v245 - 1;
                  if (!v245)
                    goto LABEL_294;
                }
                if (v246 == (_QWORD)v1219)
                  break;
LABEL_282:
                v107 = (uint64_t)v1182;
LABEL_283:
                if (++v233 == v107)
                {
                  v232 = v1146;
                  v234 = v1147;
                  v233 = v1148;
                  goto LABEL_275;
                }
              }
LABEL_297:
              v251 = operations_research::sat::PresolveContext::NewBoolVar(v1216);
              v252 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1216 + 6) + 32) + 8 * v251 + 8);
              v254 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v231, &v1228.__r_.__value_.__s.__data_[16], v253);
              v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1228.__r_.__value_.__r.__words[2];
              v1228.__r_.__value_.__l.__size_ = v254 - (_BYTE *)&v1228.__r_.__value_.__r.__words[2];
              *(_QWORD *)v1225 = " before ";
              *(_QWORD *)&v1225[8] = 8;
              v256 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v233, &v1222[4], v255);
              *(_QWORD *)v1222 = &v1222[4];
              *(_QWORD *)&v1222[2] = v256 - (_BYTE *)&v1222[4];
              absl::lts_2020_02_25::StrCat((uint64_t)&v1228, (uint64_t)v1225, (uint64_t)v1222, &__str);
              v257 = *(_QWORD *)(v252 + 8);
              v258 = (google::protobuf::Arena *)(v257 & 0xFFFFFFFFFFFFFFFELL);
              if ((v257 & 1) != 0)
              {
                v258 = *(google::protobuf::Arena **)v258;
                v259 = (std::string **)(v252 + 40);
                v260 = *(std::string **)(v252 + 40);
                if (v260 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                  goto LABEL_299;
              }
              else
              {
                v259 = (std::string **)(v252 + 40);
                v260 = *(std::string **)(v252 + 40);
                if (v260 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                {
LABEL_299:
                  std::string::operator=(v260, &__str);
                  goto LABEL_302;
                }
              }
              google::protobuf::internal::ArenaStringPtr::CreateInstance(v259, v258, (__int128 *)&__str);
LABEL_302:
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v261 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::find_or_prepare_insert<std::pair<int,int>>((uint64_t *)v1218, (unsigned int *)&v1211);
              if (v262)
              {
                v263 = v1218[1] + 12 * v261;
                *(_QWORD *)v263 = v1211;
                *(_DWORD *)(v263 + 8) = 0;
              }
              *(_DWORD *)(v1218[1] + 12 * v261 + 8) = v251;
              v264 = operations_research::sat::PresolveContext::NewBoolVar(v1216);
              v265 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1216 + 6) + 32) + 8 * v264 + 8);
              v267 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v233, &v1228.__r_.__value_.__s.__data_[16], v266);
              v1228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1228.__r_.__value_.__r.__words[2];
              v1228.__r_.__value_.__l.__size_ = v267 - (_BYTE *)&v1228.__r_.__value_.__r.__words[2];
              *(_QWORD *)v1225 = " before ";
              *(_QWORD *)&v1225[8] = 8;
              v269 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v231, &v1222[4], v268);
              *(_QWORD *)v1222 = &v1222[4];
              *(_QWORD *)&v1222[2] = v269 - (_BYTE *)&v1222[4];
              absl::lts_2020_02_25::StrCat((uint64_t)&v1228, (uint64_t)v1225, (uint64_t)v1222, &__str);
              v270 = *(_QWORD *)(v265 + 8);
              v271 = (google::protobuf::Arena *)(v270 & 0xFFFFFFFFFFFFFFFELL);
              if ((v270 & 1) != 0)
              {
                v271 = *(google::protobuf::Arena **)v271;
                v272 = (std::string **)(v265 + 40);
                v273 = *(std::string **)(v265 + 40);
                if (v273 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                  goto LABEL_308;
              }
              else
              {
                v272 = (std::string **)(v265 + 40);
                v273 = *(std::string **)(v265 + 40);
                if (v273 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                {
LABEL_308:
                  std::string::operator=(v273, &__str);
                  goto LABEL_311;
                }
              }
              google::protobuf::internal::ArenaStringPtr::CreateInstance(v272, v271, (__int128 *)&__str);
LABEL_311:
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v274 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::find_or_prepare_insert<std::pair<int,int>>((uint64_t *)v1218, (unsigned int *)&v1208);
              if (v275)
              {
                v276 = v1218[1] + 12 * v274;
                *(_QWORD *)v276 = v1208;
                *(_DWORD *)(v276 + 8) = 0;
              }
              *(_DWORD *)(v1218[1] + 12 * v274 + 8) = v264;
              v277 = *((_QWORD *)v1216 + 6);
              v278 = *(int **)(v277 + 56);
              if (v278)
              {
                v279 = *(int *)(v277 + 48);
                v280 = *v278;
                if ((int)v279 < *v278)
                {
                  *(_DWORD *)(v277 + 48) = v279 + 1;
                  v281 = *(_QWORD *)&v278[2 * v279 + 2];
                  if (*(_DWORD *)(v281 + 60) != 3)
                    goto LABEL_318;
                  goto LABEL_326;
                }
                if (v280 != *(_DWORD *)(v277 + 52))
                {
LABEL_325:
                  *v278 = v280 + 1;
                  v281 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v277 + 40));
                  v288 = *(_QWORD *)(v277 + 56);
                  v289 = *(int *)(v277 + 48);
                  *(_DWORD *)(v277 + 48) = v289 + 1;
                  *(_QWORD *)(v288 + 8 * v289 + 8) = v281;
                  if (*(_DWORD *)(v281 + 60) != 3)
                  {
LABEL_318:
                    operations_research::sat::ConstraintProto::clear_constraint(v281);
                    *(_DWORD *)(v281 + 60) = 3;
                    v282 = *(_QWORD *)(v281 + 8);
                    v283 = (google::protobuf::Arena *)(v282 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v282 & 1) != 0)
                      v283 = *(google::protobuf::Arena **)v283;
                    v284 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v283);
                    *(_QWORD *)(v281 + 48) = v284;
                    v285 = *(unsigned int *)(v284 + 16);
                    v286 = (unsigned int *)(v284 + 16);
                    v287 = v285 + 1;
                    if ((_DWORD)v285 != *(_DWORD *)(v284 + 20))
                      goto LABEL_328;
                    goto LABEL_327;
                  }
LABEL_326:
                  v284 = *(_QWORD *)(v281 + 48);
                  v285 = *(unsigned int *)(v284 + 16);
                  v286 = (unsigned int *)(v284 + 16);
                  v287 = v285 + 1;
                  if ((_DWORD)v285 != *(_DWORD *)(v284 + 20))
                  {
LABEL_328:
                    v290 = *(_QWORD *)(v284 + 24);
                    *(_DWORD *)(v290 + 4 * v285) = v251;
                    *(_DWORD *)(v284 + 16) = v287;
                    v291 = v285 + 2;
                    if (v287 == *(_DWORD *)(v284 + 20))
                    {
                      google::protobuf::RepeatedField<int>::Reserve(v286, v285 + 2);
                      v290 = *(_QWORD *)(v284 + 24);
                    }
                    *(_DWORD *)(v290 + 4 * v287) = v264;
                    *(_DWORD *)(v284 + 16) = v291;
                    v292 = v285 + 3;
                    if (v291 == *(_DWORD *)(v284 + 20))
                    {
                      google::protobuf::RepeatedField<int>::Reserve(v286, v285 + 3);
                      v290 = *(_QWORD *)(v284 + 24);
                    }
                    *(_DWORD *)(v290 + 4 * v291) = v1152;
                    *(_DWORD *)(v284 + 16) = v292;
                    if (v292 == *(_DWORD *)(v284 + 20))
                    {
                      google::protobuf::RepeatedField<int>::Reserve(v286, v285 + 4);
                      v290 = *(_QWORD *)(v284 + 24);
                    }
                    *(_DWORD *)(v290 + 4 * v292) = ~(_DWORD)v237;
                    *v286 = v285 + 4;
                    v231 = v1150;
                    goto LABEL_282;
                  }
LABEL_327:
                  google::protobuf::RepeatedField<int>::Reserve(v286, v287);
                  goto LABEL_328;
                }
              }
              else
              {
                v280 = *(_DWORD *)(v277 + 52);
              }
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v277 + 40), v280 + 1);
              v278 = *(int **)(v277 + 56);
              v280 = *v278;
              goto LABEL_325;
            }
LABEL_480:
            if ((int)v107 < 1)
              goto LABEL_671;
            v396 = 0;
            while (1)
            {
              v397 = v1189;
              if (*(_DWORD *)(v48 + 64))
                v397 = *(unsigned int *)(*(_QWORD *)(v48 + 72) + 4 * (_QWORD)v396);
              if (operations_research::sat::PresolveContext::LiteralIsFalse(v1216, (const char *)v397))
                goto LABEL_483;
              v398 = *(unsigned int *)(*(_QWORD *)(v48 + 24) + 4 * (_QWORD)v396);
              v399 = *((_QWORD *)v1216 + 6);
              v400 = *(int **)(v399 + 56);
              if (!v400)
                break;
              v401 = *(int *)(v399 + 48);
              v402 = *v400;
              if ((int)v401 >= *v400)
              {
                if (v402 == *(_DWORD *)(v399 + 52))
                {
LABEL_493:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v399 + 40), v402 + 1);
                  v400 = *(int **)(v399 + 56);
                  v402 = *v400;
                }
                *v400 = v402 + 1;
                v403 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v399 + 40));
                v407 = *(_QWORD *)(v399 + 56);
                v408 = *(int *)(v399 + 48);
                *(_DWORD *)(v399 + 48) = v408 + 1;
                *(_QWORD *)(v407 + 8 * v408 + 8) = v403;
                v405 = *(unsigned int *)(v403 + 16);
                v404 = (unsigned int *)(v403 + 16);
                v406 = v405 + 1;
                if ((_DWORD)v405 != *(_DWORD *)(v403 + 20))
                  goto LABEL_496;
LABEL_495:
                google::protobuf::RepeatedField<int>::Reserve(v404, v406);
                goto LABEL_496;
              }
              *(_DWORD *)(v399 + 48) = v401 + 1;
              v403 = *(_QWORD *)&v400[2 * v401 + 2];
              v405 = *(unsigned int *)(v403 + 16);
              v404 = (unsigned int *)(v403 + 16);
              v406 = v405 + 1;
              if ((_DWORD)v405 == *(_DWORD *)(v403 + 20))
                goto LABEL_495;
LABEL_496:
              v409 = 0;
              *(_DWORD *)(*(_QWORD *)(v403 + 24) + 4 * v405) = v397;
              *(_DWORD *)(v403 + 16) = v406;
              v410 = v398 << 32;
              v411 = v1182;
              do
              {
                if (v396 != v409)
                {
                  v412 = v1189;
                  if (*(_DWORD *)(v48 + 64))
                    v412 = *(unsigned int *)(*(_QWORD *)(v48 + 72) + 4 * (_QWORD)v409);
                  if (!operations_research::sat::PresolveContext::LiteralIsFalse(v1216, (const char *)v412))
                  {
                    v413 = *(unsigned int *)(*(_QWORD *)(v48 + 24) + 4 * (_QWORD)v409);
                    if (*(_DWORD *)(v403 + 60) == 12)
                    {
                      v414 = *(_QWORD *)(v403 + 48);
                    }
                    else
                    {
                      operations_research::sat::ConstraintProto::clear_constraint(v403);
                      *(_DWORD *)(v403 + 60) = 12;
                      v415 = *(_QWORD *)(v403 + 8);
                      v416 = (google::protobuf::Arena *)(v415 & 0xFFFFFFFFFFFFFFFELL);
                      if ((v415 & 1) != 0)
                        v416 = *(google::protobuf::Arena **)v416;
                      v414 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v416);
                      *(_QWORD *)(v403 + 48) = v414;
                    }
                    v1228.__r_.__value_.__r.__words[0] = v410 | v413;
                    v417 = *gtl::FindOrDieNoPrint<absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,int,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>>((uint64_t *)v1218, (unsigned int *)&v1228);
                    v418 = *(unsigned int *)(v414 + 16);
                    if ((_DWORD)v418 == *(_DWORD *)(v414 + 20))
                      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v414 + 16), v418 + 1);
                    *(_DWORD *)(*(_QWORD *)(v414 + 24) + 4 * v418) = v417;
                    *(_DWORD *)(v414 + 16) = v418 + 1;
                    if (*(_DWORD *)(v403 + 60) == 12)
                    {
                      v419 = *(_QWORD *)(v403 + 48);
                    }
                    else
                    {
                      operations_research::sat::ConstraintProto::clear_constraint(v403);
                      *(_DWORD *)(v403 + 60) = 12;
                      v420 = *(_QWORD *)(v403 + 8);
                      v421 = (google::protobuf::Arena *)(v420 & 0xFFFFFFFFFFFFFFFELL);
                      if ((v420 & 1) != 0)
                        v421 = *(google::protobuf::Arena **)v421;
                      v419 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v421);
                      *(_QWORD *)(v403 + 48) = v419;
                    }
                    v422 = *(_QWORD *)(*(_QWORD *)(v48 + 48) + 8 * (_QWORD)v409);
                    v423 = *(unsigned int *)(v419 + 40);
                    if ((_DWORD)v423 == *(_DWORD *)(v419 + 44))
                      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v419 + 40), v423 + 1);
                    *(_QWORD *)(*(_QWORD *)(v419 + 48) + 8 * v423) = v422;
                    *(_DWORD *)(v419 + 40) = v423 + 1;
                    v411 = v1182;
                  }
                }
                v409 = (char *)v409 + 1;
              }
              while (v411 != v409);
              v424 = *(_QWORD *)(*(_QWORD *)(v48 + 48) + 8 * (_QWORD)v396);
              v425 = *(_DWORD *)(v403 + 60);
              v426 = __OFSUB__(v425, 12);
              if (v425 == 12)
              {
                v427 = *(_QWORD *)(v403 + 48);
              }
              else
              {
                operations_research::sat::ConstraintProto::clear_constraint(v403);
                *(_DWORD *)(v403 + 60) = 12;
                v428 = *(_QWORD *)(v403 + 8);
                v429 = (google::protobuf::Arena *)(v428 & 0xFFFFFFFFFFFFFFFELL);
                if ((v428 & 1) != 0)
                  v429 = *(google::protobuf::Arena **)v429;
                v427 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v429);
                *(_QWORD *)(v403 + 48) = v427;
              }
              v430 = *(_QWORD *)(v48 + 88);
              v431 = v430 - v424;
              v432 = (v430 - v424) ^ v430;
              v433 = v430 ^ v424;
              v434 = (v430 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              if ((v432 & v433) < 0 != v426)
                v435 = v434;
              else
                v435 = v431;
              v436 = *(unsigned int *)(v427 + 64);
              if ((_DWORD)v436 == *(_DWORD *)(v427 + 68))
                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v427 + 64), v436 + 1);
              *(_QWORD *)(*(_QWORD *)(v427 + 72) + 8 * v436) = v435;
              *(_DWORD *)(v427 + 64) = v436 + 1;
              v437 = *(_DWORD *)(v403 + 60);
              v438 = __OFSUB__(v437, 12);
              if (v437 == 12)
              {
                v439 = *(_QWORD *)(v403 + 48);
              }
              else
              {
                operations_research::sat::ConstraintProto::clear_constraint(v403);
                *(_DWORD *)(v403 + 60) = 12;
                v440 = *(_QWORD *)(v403 + 8);
                v441 = (google::protobuf::Arena *)(v440 & 0xFFFFFFFFFFFFFFFELL);
                if ((v440 & 1) != 0)
                  v441 = *(google::protobuf::Arena **)v441;
                v439 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v441);
                *(_QWORD *)(v403 + 48) = v439;
              }
              v442 = *(_QWORD *)(v48 + 96);
              v443 = v442 - v424;
              v444 = (v442 - v424) ^ v442;
              v445 = v442 ^ v424;
              v446 = (v442 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              if ((v444 & v445) < 0 != v438)
                v447 = v446;
              else
                v447 = v443;
              v448 = *(unsigned int *)(v439 + 64);
              if ((_DWORD)v448 == *(_DWORD *)(v439 + 68))
                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v439 + 64), v448 + 1);
              *(_QWORD *)(*(_QWORD *)(v439 + 72) + 8 * v448) = v447;
              *(_DWORD *)(v439 + 64) = v448 + 1;
LABEL_483:
              v396 = (char *)v396 + 1;
              v107 = (uint64_t)v1182;
              if (v396 == v1182)
                goto LABEL_671;
            }
            v402 = *(_DWORD *)(v399 + 52);
            goto LABEL_493;
          }
LABEL_265:
          v223 = *((_QWORD *)v1216 + 6);
          v224 = *(int **)(v223 + 56);
          if (v224)
          {
            v225 = *(int *)(v223 + 48);
            v226 = *v224;
            if ((int)v225 < *v224)
            {
              *(_DWORD *)(v223 + 48) = v225 + 1;
              v227 = *(_QWORD *)&v224[2 * v225 + 2];
              if (*(_DWORD *)(v227 + 60) != 12)
                goto LABEL_268;
              goto LABEL_657;
            }
            if (v226 != *(_DWORD *)(v223 + 52))
            {
LABEL_656:
              *v224 = v226 + 1;
              v227 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v223 + 40));
              v511 = *(_QWORD *)(v223 + 56);
              v512 = *(int *)(v223 + 48);
              *(_DWORD *)(v223 + 48) = v512 + 1;
              *(_QWORD *)(v511 + 8 * v512 + 8) = v227;
              if (*(_DWORD *)(v227 + 60) != 12)
              {
LABEL_268:
                operations_research::sat::ConstraintProto::clear_constraint(v227);
                *(_DWORD *)(v227 + 60) = 12;
                v228 = *(_QWORD *)(v227 + 8);
                v229 = (google::protobuf::Arena *)(v228 & 0xFFFFFFFFFFFFFFFELL);
                if ((v228 & 1) != 0)
                  v229 = *(google::protobuf::Arena **)v229;
                v230 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v229);
                *(_QWORD *)(v227 + 48) = v230;
                if ((int)v1182 < 1)
                  goto LABEL_666;
                goto LABEL_658;
              }
LABEL_657:
              v230 = *(_QWORD *)(v227 + 48);
              if ((int)v1182 < 1)
              {
LABEL_666:
                v518 = *(_QWORD *)(v48 + 88);
                v520 = *(unsigned int *)(v230 + 64);
                v519 = *(_DWORD *)(v230 + 68);
                v521 = v520 + 1;
                if ((_DWORD)v520 == v519)
                {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v230 + 64), v520 + 1);
                  v519 = *(_DWORD *)(v230 + 68);
                }
                v522 = *(_QWORD *)(v230 + 72);
                *(_QWORD *)(v522 + 8 * v520) = v518;
                *(_DWORD *)(v230 + 64) = v521;
                v523 = *(_QWORD *)(v48 + 96);
                if (v521 == v519)
                {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v230 + 64), v520 + 2);
                  v522 = *(_QWORD *)(v230 + 72);
                }
                *(_QWORD *)(v522 + 8 * v521) = v523;
                *(_DWORD *)(v230 + 64) = v520 + 2;
                v107 = (uint64_t)v1182;
LABEL_671:
                if (*(uint64_t *)(v48 + 88) <= 0 && (*(_QWORD *)(v48 + 96) & 0x8000000000000000) == 0)
                {
LABEL_779:
                  operations_research::sat::ConstraintProto::Clear(v1193);
                  *((_BYTE *)&v1228.__r_.__value_.__s + 23) = 19;
                  strcpy((char *)&v1228, "reservoir: expanded");
                  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v1216, (uint64_t)&v1228);
                  if (SHIBYTE(v1228.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v1228.__r_.__value_.__l.__data_);
                  if ((_QWORD)v1219)
                  {
                    operator delete((void *)v1218[0]);
                    v1218[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                    v1220 = 0;
                    v1218[2] = 0;
                    *(_QWORD *)&v1219 = 0;
                    v1218[1] = 0;
                  }
                  v615 = (_QWORD *)*((_QWORD *)&v1219 + 1);
                  if (!*((_QWORD *)&v1219 + 1))
                    goto LABEL_1508;
LABEL_784:
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(v615);
                  goto LABEL_1508;
                }
                v524 = *((_QWORD *)v1216 + 6);
                v525 = *(int **)(v524 + 56);
                if (v525)
                {
                  v526 = *(int *)(v524 + 48);
                  v527 = *v525;
                  if ((int)v526 < *v525)
                  {
                    *(_DWORD *)(v524 + 48) = v526 + 1;
                    v528 = *(_QWORD *)&v525[2 * v526 + 2];
                    if (*(_DWORD *)(v528 + 60) != 12)
                      goto LABEL_675;
                    goto LABEL_685;
                  }
                  if (v527 != *(_DWORD *)(v524 + 52))
                  {
LABEL_684:
                    *v525 = v527 + 1;
                    v528 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v524 + 40));
                    v532 = *(_QWORD *)(v524 + 56);
                    v533 = *(int *)(v524 + 48);
                    *(_DWORD *)(v524 + 48) = v533 + 1;
                    *(_QWORD *)(v532 + 8 * v533 + 8) = v528;
                    if (*(_DWORD *)(v528 + 60) != 12)
                    {
LABEL_675:
                      operations_research::sat::ConstraintProto::clear_constraint(v528);
                      *(_DWORD *)(v528 + 60) = 12;
                      v529 = *(_QWORD *)(v528 + 8);
                      v530 = (google::protobuf::Arena *)(v529 & 0xFFFFFFFFFFFFFFFELL);
                      if ((v529 & 1) != 0)
                        v530 = *(google::protobuf::Arena **)v530;
                      v531 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v530);
                      *(_QWORD *)(v528 + 48) = v531;
                      if ((int)v107 < 1)
                        goto LABEL_774;
LABEL_686:
                      v534 = 0;
                      while (1)
                      {
                        v535 = v1189;
                        if (*(_DWORD *)(v48 + 64))
                          v535 = *(unsigned int *)(*(_QWORD *)(v48 + 72) + 4 * v534);
                        if (operations_research::sat::PresolveContext::LiteralIsFalse(v1216, (const char *)v535))
                          goto LABEL_688;
                        v1175 = *(_DWORD *)(*(_QWORD *)(v48 + 24) + 4 * v534);
                        v536 = operations_research::sat::PresolveContext::NewBoolVar(v1216);
                        v537 = *((_QWORD *)v1216 + 6);
                        v538 = *(int **)(v537 + 56);
                        if (!v538)
                          break;
                        v539 = *(int *)(v537 + 48);
                        v540 = *v538;
                        if ((int)v539 >= *v538)
                        {
                          if (v540 == *(_DWORD *)(v537 + 52))
                          {
LABEL_698:
                            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v537 + 40), v540 + 1);
                            v538 = *(int **)(v537 + 56);
                            v540 = *v538;
                          }
                          *v538 = v540 + 1;
                          v541 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v537 + 40));
                          v545 = *(_QWORD *)(v537 + 56);
                          v546 = *(int *)(v537 + 48);
                          *(_DWORD *)(v537 + 48) = v546 + 1;
                          *(_QWORD *)(v545 + 8 * v546 + 8) = v541;
                          v543 = *(unsigned int *)(v541 + 16);
                          v542 = (unsigned int *)(v541 + 16);
                          v544 = v543 + 1;
                          if ((_DWORD)v543 != *(_DWORD *)(v541 + 20))
                            goto LABEL_701;
LABEL_700:
                          google::protobuf::RepeatedField<int>::Reserve(v542, v544);
                          goto LABEL_701;
                        }
                        *(_DWORD *)(v537 + 48) = v539 + 1;
                        v541 = *(_QWORD *)&v538[2 * v539 + 2];
                        v543 = *(unsigned int *)(v541 + 16);
                        v542 = (unsigned int *)(v541 + 16);
                        v544 = v543 + 1;
                        if ((_DWORD)v543 == *(_DWORD *)(v541 + 20))
                          goto LABEL_700;
LABEL_701:
                        *(_DWORD *)(*(_QWORD *)(v541 + 24) + 4 * v543) = v536;
                        *(_DWORD *)(v541 + 16) = v544;
                        if (*(_DWORD *)(v541 + 60) == 12)
                        {
                          v547 = *(_QWORD *)(v541 + 48);
                          v549 = *(unsigned int *)(v547 + 16);
                          v548 = (unsigned int *)(v547 + 16);
                          v550 = v549 + 1;
                          if ((_DWORD)v549 == *(_DWORD *)(v547 + 20))
                            goto LABEL_707;
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v541);
                          *(_DWORD *)(v541 + 60) = 12;
                          v551 = *(_QWORD *)(v541 + 8);
                          v552 = (google::protobuf::Arena *)(v551 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v551 & 1) != 0)
                            v552 = *(google::protobuf::Arena **)v552;
                          v547 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v552);
                          *(_QWORD *)(v541 + 48) = v547;
                          v549 = *(unsigned int *)(v547 + 16);
                          v548 = (unsigned int *)(v547 + 16);
                          v550 = v549 + 1;
                          if ((_DWORD)v549 == *(_DWORD *)(v547 + 20))
LABEL_707:
                            google::protobuf::RepeatedField<int>::Reserve(v548, v550);
                        }
                        *(_DWORD *)(*(_QWORD *)(v547 + 24) + 4 * v549) = v1175;
                        *(_DWORD *)(v547 + 16) = v550;
                        if (*(_DWORD *)(v541 + 60) == 12)
                        {
                          v553 = *(_QWORD *)(v541 + 48);
                          v555 = *(unsigned int *)(v553 + 40);
                          v554 = (unsigned int *)(v553 + 40);
                          v556 = v555 + 1;
                          if ((_DWORD)v555 == *(_DWORD *)(v553 + 44))
                            goto LABEL_714;
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v541);
                          *(_DWORD *)(v541 + 60) = 12;
                          v557 = *(_QWORD *)(v541 + 8);
                          v558 = (google::protobuf::Arena *)(v557 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v557 & 1) != 0)
                            v558 = *(google::protobuf::Arena **)v558;
                          v553 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v558);
                          *(_QWORD *)(v541 + 48) = v553;
                          v555 = *(unsigned int *)(v553 + 40);
                          v554 = (unsigned int *)(v553 + 40);
                          v556 = v555 + 1;
                          if ((_DWORD)v555 == *(_DWORD *)(v553 + 44))
LABEL_714:
                            google::protobuf::RepeatedField<long long>::Reserve(v554, v556);
                        }
                        *(_QWORD *)(*(_QWORD *)(v553 + 48) + 8 * v555) = 1;
                        *(_DWORD *)(v553 + 40) = v556;
                        if (*(_DWORD *)(v541 + 60) == 12)
                        {
                          v559 = *(_QWORD *)(v541 + 48);
                          v561 = *(unsigned int *)(v559 + 64);
                          v560 = (unsigned int *)(v559 + 64);
                          v562 = v561 + 1;
                          if ((_DWORD)v561 == *(_DWORD *)(v559 + 68))
                            goto LABEL_721;
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v541);
                          *(_DWORD *)(v541 + 60) = 12;
                          v563 = *(_QWORD *)(v541 + 8);
                          v564 = (google::protobuf::Arena *)(v563 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v563 & 1) != 0)
                            v564 = *(google::protobuf::Arena **)v564;
                          v559 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v564);
                          *(_QWORD *)(v541 + 48) = v559;
                          v561 = *(unsigned int *)(v559 + 64);
                          v560 = (unsigned int *)(v559 + 64);
                          v562 = v561 + 1;
                          if ((_DWORD)v561 == *(_DWORD *)(v559 + 68))
LABEL_721:
                            google::protobuf::RepeatedField<long long>::Reserve(v560, v562);
                        }
                        *(_QWORD *)(*(_QWORD *)(v559 + 72) + 8 * v561) = 0x8000000000000000;
                        *(_DWORD *)(v559 + 64) = v562;
                        if (*(_DWORD *)(v541 + 60) == 12)
                        {
                          v565 = *(_QWORD *)(v541 + 48);
                          v567 = *(unsigned int *)(v565 + 64);
                          v566 = (unsigned int *)(v565 + 64);
                          v568 = v567 + 1;
                          if ((_DWORD)v567 == *(_DWORD *)(v565 + 68))
                            goto LABEL_728;
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v541);
                          *(_DWORD *)(v541 + 60) = 12;
                          v569 = *(_QWORD *)(v541 + 8);
                          v570 = (google::protobuf::Arena *)(v569 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v569 & 1) != 0)
                            v570 = *(google::protobuf::Arena **)v570;
                          v565 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v570);
                          *(_QWORD *)(v541 + 48) = v565;
                          v567 = *(unsigned int *)(v565 + 64);
                          v566 = (unsigned int *)(v565 + 64);
                          v568 = v567 + 1;
                          if ((_DWORD)v567 == *(_DWORD *)(v565 + 68))
LABEL_728:
                            google::protobuf::RepeatedField<long long>::Reserve(v566, v568);
                        }
                        *(_QWORD *)(*(_QWORD *)(v565 + 72) + 8 * v567) = 0;
                        *(_DWORD *)(v565 + 64) = v568;
                        if (!operations_research::sat::PresolveContext::LiteralIsTrue(v1216, (const char *)v535))
                          operations_research::sat::PresolveContext::AddImplication(v1216, v536, v535);
                        v571 = *((_QWORD *)v1216 + 6);
                        v572 = *(int **)(v571 + 56);
                        v1168 = v536;
                        if (!v572)
                        {
                          v574 = *(_DWORD *)(v571 + 52);
                          goto LABEL_737;
                        }
                        v573 = *(int *)(v571 + 48);
                        v574 = *v572;
                        if ((int)v573 >= *v572)
                        {
                          if (v574 == *(_DWORD *)(v571 + 52))
                          {
LABEL_737:
                            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v571 + 40), v574 + 1);
                            v572 = *(int **)(v571 + 56);
                            v574 = *v572;
                          }
                          *v572 = v574 + 1;
                          v575 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v571 + 40));
                          v579 = *(_QWORD *)(v571 + 56);
                          v580 = *(int *)(v571 + 48);
                          *(_DWORD *)(v571 + 48) = v580 + 1;
                          *(_QWORD *)(v579 + 8 * v580 + 8) = v575;
                          v576 = *(unsigned int *)(v575 + 16);
                          v577 = (unsigned int *)(v575 + 16);
                          v578 = v576 + 1;
                          if ((_DWORD)v576 != *(_DWORD *)(v575 + 20))
                            goto LABEL_740;
LABEL_739:
                          google::protobuf::RepeatedField<int>::Reserve(v577, v578);
                          goto LABEL_740;
                        }
                        *(_DWORD *)(v571 + 48) = v573 + 1;
                        v575 = *(_QWORD *)&v572[2 * v573 + 2];
                        v576 = *(unsigned int *)(v575 + 16);
                        v577 = (unsigned int *)(v575 + 16);
                        v578 = v576 + 1;
                        if ((_DWORD)v576 == *(_DWORD *)(v575 + 20))
                          goto LABEL_739;
LABEL_740:
                        v581 = *(_QWORD *)(v575 + 24);
                        *(_DWORD *)(v581 + 4 * v576) = ~v1168;
                        *(_DWORD *)(v575 + 16) = v578;
                        if (v578 == *(_DWORD *)(v575 + 20))
                        {
                          google::protobuf::RepeatedField<int>::Reserve(v577, v576 + 2);
                          v581 = *(_QWORD *)(v575 + 24);
                        }
                        *(_DWORD *)(v581 + 4 * v578) = v535;
                        *(_DWORD *)(v575 + 16) = v576 + 2;
                        if (*(_DWORD *)(v575 + 60) == 12)
                        {
                          v582 = *(_QWORD *)(v575 + 48);
                          v584 = *(unsigned int *)(v582 + 16);
                          v583 = (unsigned int *)(v582 + 16);
                          v585 = v584 + 1;
                          if ((_DWORD)v584 == *(_DWORD *)(v582 + 20))
                            goto LABEL_748;
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v575);
                          *(_DWORD *)(v575 + 60) = 12;
                          v586 = *(_QWORD *)(v575 + 8);
                          v587 = (google::protobuf::Arena *)(v586 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v586 & 1) != 0)
                            v587 = *(google::protobuf::Arena **)v587;
                          v582 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v587);
                          *(_QWORD *)(v575 + 48) = v582;
                          v584 = *(unsigned int *)(v582 + 16);
                          v583 = (unsigned int *)(v582 + 16);
                          v585 = v584 + 1;
                          if ((_DWORD)v584 == *(_DWORD *)(v582 + 20))
LABEL_748:
                            google::protobuf::RepeatedField<int>::Reserve(v583, v585);
                        }
                        *(_DWORD *)(*(_QWORD *)(v582 + 24) + 4 * v584) = v1175;
                        *(_DWORD *)(v582 + 16) = v585;
                        if (*(_DWORD *)(v575 + 60) == 12)
                        {
                          v588 = *(_QWORD *)(v575 + 48);
                          v590 = *(unsigned int *)(v588 + 40);
                          v589 = (unsigned int *)(v588 + 40);
                          v591 = v590 + 1;
                          if ((_DWORD)v590 == *(_DWORD *)(v588 + 44))
                            goto LABEL_755;
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v575);
                          *(_DWORD *)(v575 + 60) = 12;
                          v592 = *(_QWORD *)(v575 + 8);
                          v593 = (google::protobuf::Arena *)(v592 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v592 & 1) != 0)
                            v593 = *(google::protobuf::Arena **)v593;
                          v588 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v593);
                          *(_QWORD *)(v575 + 48) = v588;
                          v590 = *(unsigned int *)(v588 + 40);
                          v589 = (unsigned int *)(v588 + 40);
                          v591 = v590 + 1;
                          if ((_DWORD)v590 == *(_DWORD *)(v588 + 44))
LABEL_755:
                            google::protobuf::RepeatedField<long long>::Reserve(v589, v591);
                        }
                        *(_QWORD *)(*(_QWORD *)(v588 + 48) + 8 * v590) = 1;
                        *(_DWORD *)(v588 + 40) = v591;
                        if (*(_DWORD *)(v575 + 60) == 12)
                        {
                          v594 = *(_QWORD *)(v575 + 48);
                          v596 = *(unsigned int *)(v594 + 64);
                          v595 = (unsigned int *)(v594 + 64);
                          v597 = v596 + 1;
                          if ((_DWORD)v596 == *(_DWORD *)(v594 + 68))
                            goto LABEL_762;
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v575);
                          *(_DWORD *)(v575 + 60) = 12;
                          v598 = *(_QWORD *)(v575 + 8);
                          v599 = (google::protobuf::Arena *)(v598 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v598 & 1) != 0)
                            v599 = *(google::protobuf::Arena **)v599;
                          v594 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v599);
                          *(_QWORD *)(v575 + 48) = v594;
                          v596 = *(unsigned int *)(v594 + 64);
                          v595 = (unsigned int *)(v594 + 64);
                          v597 = v596 + 1;
                          if ((_DWORD)v596 == *(_DWORD *)(v594 + 68))
LABEL_762:
                            google::protobuf::RepeatedField<long long>::Reserve(v595, v597);
                        }
                        *(_QWORD *)(*(_QWORD *)(v594 + 72) + 8 * v596) = 1;
                        *(_DWORD *)(v594 + 64) = v597;
                        if (*(_DWORD *)(v575 + 60) == 12)
                        {
                          v600 = *(_QWORD *)(v575 + 48);
                          v602 = *(unsigned int *)(v600 + 64);
                          v601 = (unsigned int *)(v600 + 64);
                          v603 = v602 + 1;
                          if ((_DWORD)v602 != *(_DWORD *)(v600 + 68))
                            goto LABEL_770;
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v575);
                          *(_DWORD *)(v575 + 60) = 12;
                          v604 = *(_QWORD *)(v575 + 8);
                          v605 = (google::protobuf::Arena *)(v604 & 0xFFFFFFFFFFFFFFFELL);
                          if ((v604 & 1) != 0)
                            v605 = *(google::protobuf::Arena **)v605;
                          v600 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v605);
                          *(_QWORD *)(v575 + 48) = v600;
                          v602 = *(unsigned int *)(v600 + 64);
                          v601 = (unsigned int *)(v600 + 64);
                          v603 = v602 + 1;
                          if ((_DWORD)v602 != *(_DWORD *)(v600 + 68))
                            goto LABEL_770;
                        }
                        google::protobuf::RepeatedField<long long>::Reserve(v601, v603);
LABEL_770:
                        *(_QWORD *)(*(_QWORD *)(v600 + 72) + 8 * v602) = 0x7FFFFFFFFFFFFFFFLL;
                        *(_DWORD *)(v600 + 64) = v603;
                        v606 = *(unsigned int *)(v531 + 16);
                        if ((_DWORD)v606 == *(_DWORD *)(v531 + 20))
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v531 + 16), v606 + 1);
                        *(_DWORD *)(*(_QWORD *)(v531 + 24) + 4 * v606) = v1168;
                        *(_DWORD *)(v531 + 16) = v606 + 1;
                        v607 = *(_QWORD *)(*(_QWORD *)(v48 + 48) + 8 * v534);
                        v608 = *(unsigned int *)(v531 + 40);
                        if ((_DWORD)v608 == *(_DWORD *)(v531 + 44))
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v531 + 40), v608 + 1);
                        *(_QWORD *)(*(_QWORD *)(v531 + 48) + 8 * v608) = v607;
                        *(_DWORD *)(v531 + 40) = v608 + 1;
                        v107 = (uint64_t)v1182;
LABEL_688:
                        if (v107 == ++v534)
                          goto LABEL_774;
                      }
                      v540 = *(_DWORD *)(v537 + 52);
                      goto LABEL_698;
                    }
LABEL_685:
                    v531 = *(_QWORD *)(v528 + 48);
                    if ((int)v107 < 1)
                    {
LABEL_774:
                      v609 = *(_QWORD *)(v48 + 88);
                      v611 = *(unsigned int *)(v531 + 64);
                      v610 = *(_DWORD *)(v531 + 68);
                      v612 = v611 + 1;
                      if ((_DWORD)v611 == v610)
                      {
                        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v531 + 64), v611 + 1);
                        v610 = *(_DWORD *)(v531 + 68);
                      }
                      v613 = *(_QWORD *)(v531 + 72);
                      *(_QWORD *)(v613 + 8 * v611) = v609;
                      *(_DWORD *)(v531 + 64) = v612;
                      v614 = *(_QWORD *)(v48 + 96);
                      if (v612 == v610)
                      {
                        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v531 + 64), v611 + 2);
                        v613 = *(_QWORD *)(v531 + 72);
                      }
                      *(_QWORD *)(v613 + 8 * v612) = v614;
                      *(_DWORD *)(v531 + 64) = v611 + 2;
                      goto LABEL_779;
                    }
                    goto LABEL_686;
                  }
                }
                else
                {
                  v527 = *(_DWORD *)(v524 + 52);
                }
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v524 + 40), v527 + 1);
                v525 = *(int **)(v524 + 56);
                v527 = *v525;
                goto LABEL_684;
              }
LABEL_658:
              for (kk = 0; kk != v1182; kk = (char *)kk + 1)
              {
                v514 = v1189;
                if (*(_DWORD *)(v48 + 64))
                  v514 = *(_DWORD *)(*(_QWORD *)(v48 + 72) + 4 * (_QWORD)kk);
                v515 = *(unsigned int *)(v230 + 16);
                if ((_DWORD)v515 == *(_DWORD *)(v230 + 20))
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v230 + 16), v515 + 1);
                *(_DWORD *)(*(_QWORD *)(v230 + 24) + 4 * v515) = v514;
                *(_DWORD *)(v230 + 16) = v515 + 1;
                v516 = *(_QWORD *)(*(_QWORD *)(v48 + 48) + 8 * (_QWORD)kk);
                v517 = *(unsigned int *)(v230 + 40);
                if ((_DWORD)v517 == *(_DWORD *)(v230 + 44))
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v230 + 40), v517 + 1);
                *(_QWORD *)(*(_QWORD *)(v230 + 48) + 8 * v517) = v516;
                *(_DWORD *)(v230 + 40) = v517 + 1;
              }
              goto LABEL_666;
            }
          }
          else
          {
            v226 = *(_DWORD *)(v223 + 52);
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v223 + 40), v226 + 1);
          v224 = *(int **)(v223 + 56);
          v226 = *v224;
          goto LABEL_656;
        case 0x1C:
          v52 = *(int *)(v8 + 48);
          v53 = *v9;
          if ((int)v52 < *v9)
          {
            *(_DWORD *)(v8 + 48) = v52 + 1;
            v54 = *(_QWORD *)&v9[2 * v52 + 2];
            v55 = v1193;
            if (*((int *)v1193 + 4) < 1)
              goto LABEL_135;
            goto LABEL_131;
          }
          if (v53 == *(_DWORD *)(v8 + 52))
          {
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v8 + 40), v53 + 1);
            v9 = *(int **)(v8 + 56);
            v53 = *v9;
          }
          *v9 = v53 + 1;
          v54 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v8 + 40));
          v114 = *(_QWORD *)(v8 + 56);
          v115 = *(int *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = v115 + 1;
          *(_QWORD *)(v114 + 8 * v115 + 8) = v54;
          v55 = v1193;
          if (*((int *)v1193 + 4) >= 1)
          {
LABEL_131:
            v116 = 0;
            v117 = *(_DWORD *)(v54 + 16);
            do
            {
              v118 = *(_DWORD *)(*((_QWORD *)v55 + 3) + 4 * v116);
              if (v117 + (_DWORD)v116 == *(_DWORD *)(v54 + 20))
                google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v54 + 16), v117 + v116 + 1);
              *(_DWORD *)(*(_QWORD *)(v54 + 24) + 4 * (v117 + v116)) = v118;
              *(_DWORD *)(v54 + 16) = v117 + v116++ + 1;
              v55 = v1193;
            }
            while (v116 < *((int *)v1193 + 4));
          }
LABEL_135:
          v119 = &operations_research::sat::_LinearArgumentProto_default_instance_;
          if (*((_DWORD *)v55 + 15) == 28)
            v119 = (uint64_t *)*((_QWORD *)v1193 + 6);
          v120 = (operations_research::sat *)v119[5];
          if (v120)
            v121 = v120;
          else
            v121 = (operations_research::sat *)&operations_research::sat::_LinearExpressionProto_default_instance_;
          if (*(_DWORD *)(v54 + 60) == 27)
          {
            v122 = *(_QWORD *)(v54 + 48);
            v123 = *(const operations_research::sat::LinearExpressionProto **)(v122 + 40);
            if (v123)
            {
LABEL_149:
              operations_research::sat::SetToNegatedLinearExpression(v121, v123, v4);
              v129 = 0;
              v130 = &operations_research::sat::_LinearArgumentProto_default_instance_;
              if (*((_DWORD *)v1193 + 15) != 28)
                goto LABEL_151;
LABEL_150:
              v130 = (uint64_t *)*((_QWORD *)v1193 + 6);
              while (1)
              {
LABEL_151:
                if (v129 >= *((int *)v130 + 6))
                  goto LABEL_820;
                if (*(_DWORD *)(v54 + 60) == 27)
                {
                  v131 = *(_QWORD *)(v54 + 48);
                  v132 = *(int **)(v131 + 32);
                  if (!v132)
                    goto LABEL_160;
                }
                else
                {
                  operations_research::sat::ConstraintProto::clear_constraint(v54);
                  *(_DWORD *)(v54 + 60) = 27;
                  v137 = *(_QWORD *)(v54 + 8);
                  v138 = (google::protobuf::Arena *)(v137 & 0xFFFFFFFFFFFFFFFELL);
                  if ((v137 & 1) != 0)
                    v138 = *(google::protobuf::Arena **)v138;
                  v131 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v138);
                  *(_QWORD *)(v54 + 48) = v131;
                  v132 = *(int **)(v131 + 32);
                  if (!v132)
                  {
LABEL_160:
                    v134 = *(_DWORD *)(v131 + 28);
LABEL_162:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v131 + 16), v134 + 1);
                    v132 = *(int **)(v131 + 32);
                    v134 = *v132;
                    goto LABEL_163;
                  }
                }
                v133 = *(int *)(v131 + 24);
                v134 = *v132;
                if ((int)v133 < *v132)
                {
                  *(_DWORD *)(v131 + 24) = v133 + 1;
                  v135 = *(const operations_research::sat::LinearExpressionProto **)&v132[2 * v133 + 2];
                  v136 = &operations_research::sat::_LinearArgumentProto_default_instance_;
                  if (*((_DWORD *)v1193 + 15) != 28)
                    goto LABEL_165;
LABEL_164:
                  v136 = (uint64_t *)*((_QWORD *)v1193 + 6);
                  goto LABEL_165;
                }
                if (v134 == *(_DWORD *)(v131 + 28))
                  goto LABEL_162;
LABEL_163:
                *v132 = v134 + 1;
                v135 = (const operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(*(google::protobuf::Arena **)(v131 + 16));
                v139 = *(_QWORD *)(v131 + 32);
                v140 = *(int *)(v131 + 24);
                *(_DWORD *)(v131 + 24) = v140 + 1;
                *(_QWORD *)(v139 + 8 * v140 + 8) = v135;
                v136 = &operations_research::sat::_LinearArgumentProto_default_instance_;
                if (*((_DWORD *)v1193 + 15) == 28)
                  goto LABEL_164;
LABEL_165:
                operations_research::sat::SetToNegatedLinearExpression(*(operations_research::sat **)(v136[4] + 8 * v129++ + 8), v135, v128);
                v130 = &operations_research::sat::_LinearArgumentProto_default_instance_;
                if (*((_DWORD *)v1193 + 15) == 28)
                  goto LABEL_150;
              }
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v54);
            *(_DWORD *)(v54 + 60) = 27;
            v124 = *(_QWORD *)(v54 + 8);
            v125 = (google::protobuf::Arena *)(v124 & 0xFFFFFFFFFFFFFFFELL);
            if ((v124 & 1) != 0)
              v125 = *(google::protobuf::Arena **)v125;
            v122 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v125);
            *(_QWORD *)(v54 + 48) = v122;
            v123 = *(const operations_research::sat::LinearExpressionProto **)(v122 + 40);
            if (v123)
              goto LABEL_149;
          }
          v126 = *(_QWORD *)(v122 + 8);
          v127 = (google::protobuf::Arena *)(v126 & 0xFFFFFFFFFFFFFFFELL);
          if ((v126 & 1) != 0)
            v127 = *(google::protobuf::Arena **)v127;
          v123 = (const operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v127);
          *(_QWORD *)(v122 + 40) = v123;
          goto LABEL_149;
        default:
          goto LABEL_1511;
      }
      break;
    }
  }
  operations_research::sat::PresolveContext::InitializeNewDomains((operations_research::sat::PresolveContext *)v3, v6);
  if (*(int *)(*(_QWORD *)(v3 + 48) + 24) >= 1)
  {
    v1134 = 0;
    do
    {
      operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, v1134, v1218);
      v1135 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 32) + 8 * (_QWORD)v1134 + 8);
      *(_DWORD *)(v1135 + 16) = 0;
      v1136 = (unsigned int *)(v1135 + 16);
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v1135 + 16), v1218[0] >> 1);
      v1137 = v1218[0] & 1;
      if ((v1218[0] & 1) != 0)
        v1138 = (unint64_t *)v1218[1];
      else
        v1138 = &v1218[1];
      if (v1218[0] >= 2)
      {
        v1139 = &v1138[2 * (v1218[0] >> 1)];
        v1140 = *(_DWORD *)(v1135 + 16);
        do
        {
          v1141 = *v1138;
          v1142 = *(_DWORD *)(v1135 + 20);
          v1143 = v1140 + 1;
          if (v1140 == v1142)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v1136, v1140 + 1);
            v1142 = *(_DWORD *)(v1135 + 20);
          }
          v1144 = *(_QWORD *)(v1135 + 24);
          *(_QWORD *)(v1144 + 8 * v1140) = v1141;
          *(_DWORD *)(v1135 + 16) = v1143;
          v1145 = v1138[1];
          v1140 += 2;
          if (v1143 == v1142)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v1136, v1140);
            v1144 = *(_QWORD *)(v1135 + 24);
          }
          *(_QWORD *)(v1144 + 8 * v1143) = v1145;
          *v1136 = v1140;
          v1138 += 2;
        }
        while (v1138 != v1139);
        v1137 = v1218[0] & 1;
      }
      if (v1137)
        operator delete((void *)v1218[1]);
      ++v1134;
    }
    while ((uint64_t)v1134 < *(int *)(*(_QWORD *)(v3 + 48) + 24));
  }
}

void sub_22DA87E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a56);
}

void sub_22DA87E7C()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&STACK[0x220]);
}

void sub_22DA87E84()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&STACK[0x220]);
}

void sub_22DA87E8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void operations_research::sat::`anonymous namespace'::ExpandPositiveTable(operations_research::sat::_anonymous_namespace_ *this, operations_research::sat::ConstraintProto *a2, operations_research::sat::PresolveContext *a3)
{
  uint64_t *v5;
  const void *v6;
  uint64_t v7;
  absl::lts_2020_02_25::numbers_internal *v8;
  BOOL v9;
  absl::lts_2020_02_25::numbers_internal *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  absl::lts_2020_02_25::numbers_internal *v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  operations_research::sat::ConstraintProto *v56;
  uint64_t v57;
  int64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  char **v62;
  uint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  void *v70;
  void *v71;
  unsigned int *v72;
  unsigned int v73;
  const char *v74;
  BOOL v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  signed int VarValueEncoding;
  signed int v86;
  uint64_t *v87;
  uint64_t **v88;
  uint64_t **v89;
  signed int v90;
  _QWORD *v91;
  uint64_t *v92;
  unint64_t v93;
  signed int *v94;
  uint64_t v95;
  signed int *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  signed int *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  signed int *v106;
  _OWORD *v107;
  signed int *v108;
  uint64_t v109;
  __int128 v110;
  signed int v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  signed int v115;
  _DWORD *v116;
  uint64_t *v117;
  unint64_t v118;
  signed int *v119;
  signed int *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  signed int *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  signed int *v130;
  _OWORD *v131;
  signed int *v132;
  uint64_t v133;
  __int128 v134;
  signed int v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _BYTE *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  char *v153;
  uint64_t v154;
  __int128 v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  int v170;
  int v171;
  unint64_t v172;
  char *v174;
  uint64_t *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  void **v181;
  void **v182;
  void *v183;
  _QWORD *v184;
  char *v185;
  char *v186;
  BOOL v187;
  uint64_t *v188;
  uint64_t **v189;
  char *v190;
  char *v191;
  void *v192;
  char *v193;
  void *v194;
  void *v195;
  _BYTE *v196;
  char *v197;
  _BYTE *v198;
  char *v199;
  _BYTE *v200;
  _BYTE *v201;
  char *v202;
  _BYTE *v203;
  char *v204;
  _BYTE *v205;
  google::LogMessage *v206;
  _QWORD *v207;
  _BYTE *v208;
  google::LogMessage *v209;
  _QWORD *v210;
  std::string *v211;
  std::string::size_type size;
  char *v213;
  uint64_t v214;
  int *v215;
  uint64_t v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  google::protobuf::Arena *v223;
  operations_research::sat::ConstraintProto *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  char *v240;
  int64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _BYTE *v246;
  _DWORD *v247;
  uint64_t v248;
  unint64_t v249;
  char *v250;
  int v251;
  uint64_t v252;
  char *v253;
  int64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  unint64_t v265;
  char *v266;
  int v267;
  char *v268;
  char *v269;
  std::string::size_type v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  char *v276;
  int64_t v277;
  unint64_t v278;
  char *v279;
  _BYTE *v280;
  _QWORD *v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _OWORD *v287;
  __int128 *v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  _OWORD *v299;
  char *v300;
  uint64_t v301;
  __int128 v302;
  _BYTE *v303;
  google::LogMessage *v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  std::string::size_type v311;
  std::string::size_type v312;
  void *v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  _DWORD *v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  int v332;
  unint64_t v333;
  int *v334;
  uint64_t v335;
  uint64_t v336;
  int *v337;
  int *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  _BYTE *v343;
  int *v344;
  uint64_t v345;
  unint64_t v346;
  int *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  _OWORD *v351;
  int *v352;
  uint64_t v353;
  __int128 v354;
  int *v355;
  char v356;
  int v357;
  uint64_t v358;
  int *v359;
  uint64_t v360;
  int v361;
  unint64_t v362;
  uint64_t v363;
  google::protobuf::Arena *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  int *v370;
  int *v371;
  unsigned int v372;
  int v373;
  unsigned int v374;
  unint64_t *v375;
  _QWORD *v376;
  google::LogMessage *v377;
  _QWORD *v378;
  google::LogMessage *v379;
  _QWORD *v380;
  google::LogMessage *v381;
  _QWORD *v382;
  unint64_t *v383;
  char *v384;
  operations_research::sat::_anonymous_namespace_ *v385;
  absl::lts_2020_02_25::numbers_internal *v386;
  uint64_t v387;
  int v388;
  uint64_t *v389;
  int v390;
  unsigned int v391;
  char *v392;
  int v393;
  unsigned int v394;
  uint64_t v395;
  int v396;
  int v397[2];
  int v398[2];
  int v399[2];
  char *v400;
  unsigned int v401;
  _DWORD *v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  operations_research::sat::PresolveContext *v406;
  void *v407;
  int *v408;
  char *v409;
  std::string v410;
  char *v411;
  char *v412;
  char *v413;
  void *__p[3];
  void *v415;
  void **v416;
  void *v417;
  char *v418;
  void *v419;
  char *v420;
  char *v421;
  _QWORD v422[2];
  void *v423;
  uint64_t v424;
  _QWORD v425[4];
  char *v426;
  uint64_t v427;
  char *v428;
  __int128 v429;
  _QWORD v430[4];
  unint64_t v431[3];
  __int128 v432;
  uint64_t v433;
  uint64_t v434;

  v434 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 15) != 16)
  {
    v5 = &operations_research::sat::_TableConstraintProto_default_instance_;
    v6 = (const void *)qword_25408ABD0;
    v7 = (int)qword_25408ABC8;
    v419 = 0;
    v420 = 0;
    v421 = 0;
    if ((_DWORD)qword_25408ABC8)
      goto LABEL_3;
LABEL_6:
    v384 = 0;
    v402 = 0;
    goto LABEL_7;
  }
  v5 = (uint64_t *)*((_QWORD *)this + 6);
  v6 = (const void *)v5[3];
  v7 = *((int *)v5 + 4);
  v419 = 0;
  v420 = 0;
  v421 = 0;
  if (!(_DWORD)v7)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v419 = operator new(4 * v7);
  v421 = (char *)v419 + 4 * v7;
  v402 = v419;
  memcpy(v419, v6, 4 * v7);
  v384 = v421;
  v420 = v421;
  v7 = *((unsigned int *)v5 + 4);
LABEL_7:
  v8 = (absl::lts_2020_02_25::numbers_internal *)(*((_DWORD *)v5 + 10) / (int)v7);
  std::vector<std::vector<long long>>::vector(&v417, (int)v8);
  v386 = v8;
  v387 = v7;
  v9 = (int)v8 < 1 || (int)v7 < 1;
  v385 = this;
  v406 = a2;
  if (!v9)
  {
    v27 = 0;
    v28 = 0;
    v389 = v5;
    do
    {
      v29 = v28;
      v28 += v387;
      v393 = v28;
      *(_QWORD *)v397 = v27;
      do
      {
        while (1)
        {
          v30 = (char *)v417 + 24 * (_QWORD)v27;
          v31 = *(_QWORD *)(v5[6] + 8 * v29);
          v33 = (uint64_t *)(v30 + 8);
          v32 = (char *)*((_QWORD *)v30 + 1);
          v34 = *((_QWORD *)v30 + 2);
          if ((unint64_t)v32 >= v34)
            break;
          *(_QWORD *)v32 = v31;
          ++v29;
          *v33 = (uint64_t)(v32 + 8);
          if (v28 == (_DWORD)v29)
            goto LABEL_29;
        }
        v35 = *(char **)v30;
        v36 = (uint64_t)&v32[-*(_QWORD *)v30];
        v37 = v36 >> 3;
        v38 = (v36 >> 3) + 1;
        if (v38 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v39 = v34 - (_QWORD)v35;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (!v40)
        {
          v42 = 0;
          v43 = (_QWORD *)(8 * v37);
          *(_QWORD *)(8 * v37) = v31;
          v44 = 8 * v37 + 8;
          if (v32 == v35)
            goto LABEL_50;
LABEL_44:
          v45 = v32 - 8 - v35;
          if (v45 < 0x58)
            goto LABEL_584;
          if ((unint64_t)(v32 - &v42[v36]) < 0x20)
            goto LABEL_584;
          v46 = (v45 >> 3) + 1;
          v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          v48 = &v32[-v47];
          v43 = (_QWORD *)((char *)v43 - v47);
          v49 = &v42[8 * v37 - 16];
          v50 = v32 - 16;
          v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 4;
          }
          while (v51);
          v32 = v48;
          if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_584:
            do
            {
              v53 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *--v43 = v53;
            }
            while (v32 != v35);
          }
          goto LABEL_50;
        }
        if (v40 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v41 = v40;
        v42 = operator new(8 * v40);
        v40 = v41;
        v43 = &v42[8 * v37];
        *v43 = v31;
        v44 = (uint64_t)(v43 + 1);
        if (v32 != v35)
          goto LABEL_44;
LABEL_50:
        *(_QWORD *)v30 = v43;
        *v33 = v44;
        *((_QWORD *)v30 + 2) = &v42[8 * v40];
        if (v35)
          operator delete(v35);
        v5 = v389;
        v28 = v393;
        v27 = *(absl::lts_2020_02_25::numbers_internal **)v397;
        ++v29;
        *v33 = v44;
      }
      while (v393 != (_DWORD)v29);
LABEL_29:
      v27 = (absl::lts_2020_02_25::numbers_internal *)((char *)v27 + 1);
    }
    while (v27 != v8);
  }
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v415, (int)v387);
  if ((int)v8 < 1)
  {
    v396 = 0;
  }
  else
  {
    v10 = 0;
    v396 = 0;
    do
    {
      if ((int)v387 < 1)
      {
LABEL_14:
        v11 = (char *)v417 + 24 * (_QWORD)v10;
        v12 = (char *)v417 + 24 * v396;
        v13 = *(_OWORD *)v11;
        *(_OWORD *)v11 = *(_OWORD *)v12;
        *(_OWORD *)v12 = v13;
        v14 = *((_QWORD *)v11 + 2);
        *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
        *((_QWORD *)v12 + 2) = v14;
        ++v396;
      }
      else
      {
        v15 = 0;
        while (operations_research::sat::PresolveContext::DomainContains(v406, v402[v15], *(_QWORD *)(*((_QWORD *)v417 + 3 * (_QWORD)v10) + 8 * v15)))
        {
          if (v387 == ++v15)
          {
            v16 = 0;
            do
            {
              v20 = 0;
              v22 = (char *)v415 + 48 * v16;
              v23 = *((_QWORD *)v417 + 3 * (_QWORD)v10);
              v24 = *(_QWORD *)(v23 + 8 * v16);
              v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v24)
                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                       * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                        + v24));
              v21 = (v25 >> 7) ^ (*v22 >> 12);
              v26 = v22[3];
              while (1)
              {
                v17 = v21 & v26;
                v18 = *(_QWORD *)(*v22 + v17);
                v19 = ((v18 ^ (0x101010101010101 * (v25 & 0x7F))) - 0x101010101010101) & ~(v18 ^ (0x101010101010101 * (v25 & 0x7F))) & 0x8080808080808080;
                if (v19)
                  break;
LABEL_24:
                if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
                {
                  *(_QWORD *)(v22[1]
                            + 8
                            * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v415 + 6 * v16, v25)) = *(_QWORD *)(v23 + 8 * v16);
                  goto LABEL_27;
                }
                v20 += 8;
                v21 = v20 + v17;
              }
              while (*(_QWORD *)(v22[1] + 8 * ((v17 + (__clz(__rbit64(v19)) >> 3)) & v26)) != v24)
              {
                v19 &= v19 - 1;
                if (!v19)
                  goto LABEL_24;
              }
LABEL_27:
              ++v16;
            }
            while (v16 != v387);
            goto LABEL_14;
          }
        }
      }
      v10 = (absl::lts_2020_02_25::numbers_internal *)((char *)v10 + 1);
    }
    while (v10 != v386);
  }
  v54 = v418;
  v55 = 0xAAAAAAAAAAAAAAABLL * ((v418 - (_BYTE *)v417) >> 3);
  if (v396 <= v55)
  {
    v56 = v385;
    v57 = (uint64_t)v406;
    if (v396 >= v55)
    {
      v58 = v418 - (_BYTE *)v417;
      if (v418 == v417)
        goto LABEL_80;
    }
    else
    {
      v68 = (char *)v417 + 24 * v396;
      if (v418 != v68)
      {
        v69 = v418;
        do
        {
          v71 = (void *)*((_QWORD *)v69 - 3);
          v69 -= 24;
          v70 = v71;
          if (v71)
          {
            *((_QWORD *)v54 - 2) = v70;
            operator delete(v70);
          }
          v54 = v69;
        }
        while (v69 != v68);
      }
      v418 = v68;
      v58 = v68 - (_BYTE *)v417;
      if (v68 == v417)
        goto LABEL_80;
    }
LABEL_57:
    *(_QWORD *)v398 = v58;
    v59 = v387 - 1;
    if ((int)v387 < 1)
    {
      v61 = 0;
    }
    else
    {
      v60 = 0;
      v61 = 0;
      do
      {
        v62 = (char **)((char *)v415 + 48 * v60);
        v63 = (uint64_t *)v62[1];
        v64 = *v62;
        if (**v62 <= -2)
        {
          do
          {
            v65 = (__clz(__rbit64(((*v64 >> 7) & ~*v64 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v64 = (_QWORD *)((char *)v64 + v65);
            v63 += v65;
          }
          while (*(char *)v64 < -1);
        }
        v66 = (const char *)v402[v60];
        std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,0>(__p, v64, v63, &v62[3][(_QWORD)*v62]);
        operations_research::Domain::FromValues((int64_t **)__p, v431);
        if ((operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v57, v66, (const operations_research::Domain *)v431, 0) & 1) == 0)
        {
          v206 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v429, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1101);
          v207 = (_QWORD *)google::LogMessage::stream(v206);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)"Check failed: context->IntersectDomainWith( vars[var_index], Domain::FromValues({values_per_var[var_index].begin(), values_per_var[var_index].end()})) ", 151);
          goto LABEL_300;
        }
        if ((v431[0] & 1) != 0)
          operator delete((void *)v431[1]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v57, (const char *)v402[v60], v431);
        v67 = operations_research::Domain::Size((operations_research::Domain *)v431);
        if ((v431[0] & 1) != 0)
          operator delete((void *)v431[1]);
        if (v67 == 1)
          ++v61;
        ++v60;
      }
      while (v60 != v387);
    }
    if (v61 == v59)
    {
      v431[0] = (unint64_t)operator new(0x20uLL);
      *(_OWORD *)&v431[1] = xmmword_22DCE7550;
      strcpy((char *)v431[0], "table: one variable not fixed");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v431);
LABEL_255:
      if (SHIBYTE(v431[2]) < 0)
        operator delete((void *)v431[0]);
      operations_research::sat::ConstraintProto::Clear(v56);
      goto LABEL_258;
    }
    if (v61 == (_DWORD)v387)
    {
      v431[0] = (unint64_t)operator new(0x20uLL);
      *(_OWORD *)&v431[1] = xmmword_22DCE6010;
      strcpy((char *)v431[0], "table: all variables fixed");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v431);
      goto LABEL_255;
    }
    if ((_DWORD)v387 == 2)
    {
      v72 = (unsigned int *)v419;
      v431[0] = (v384 - (_BYTE *)v419) >> 2;
      LODWORD(v426) = 2;
      if (v384 - (_BYTE *)v419 != 8)
      {
        *(_QWORD *)&v429 = google::MakeCheckOpString<unsigned long,int>((int)v431, (int)&v426, "vars.size() == 2");
        if ((_QWORD)v429)
        {
          v383 = google::LogMessageFatal::LogMessageFatal(v431, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 985, (uint64_t **)&v429);
          google::LogMessage::stream((google::LogMessage *)v383);
LABEL_564:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v431);
        }
      }
      v73 = *v72;
      v74 = (const char *)v72[1];
      operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v57, (const char *)*v72, v431);
      if (operations_research::Domain::Size((operations_research::Domain *)v431) == 1)
      {
        v75 = 1;
        if ((v431[0] & 1) != 0)
          goto LABEL_93;
LABEL_104:
        if (v75)
          goto LABEL_254;
LABEL_105:
        *((_QWORD *)&v429 + 1) = 0;
        v430[0] = 0;
        *(_QWORD *)&v429 = (char *)&v429 + 8;
        v427 = 0;
        v428 = 0;
        v426 = (char *)&v427;
        v81 = (uint64_t **)v417;
        *(_QWORD *)v399 = v418;
        if (v417 != v418)
        {
          v391 = v73;
          v388 = (int)v74;
          while (1)
          {
            v83 = **v81;
            v84 = (*v81)[1];
            if (!operations_research::sat::PresolveContext::DomainContains(v406, v73, v83))
            {
              v379 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v431, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1001);
              v380 = (_QWORD *)google::LogMessage::stream(v379);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v380, (uint64_t)"Check failed: context->DomainContains(left_var, left_value) ", 60);
              goto LABEL_564;
            }
            if (!operations_research::sat::PresolveContext::DomainContains(v406, v74, v84))
            {
              v381 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v431, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1002);
              v382 = (_QWORD *)google::LogMessage::stream(v381);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v382, (uint64_t)"Check failed: context->DomainContains(right_var, right_value) ", 62);
              goto LABEL_564;
            }
            VarValueEncoding = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v406, v73, v83);
            v86 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v406, (int)v74, v84);
            v87 = (uint64_t *)*((_QWORD *)&v429 + 1);
            v88 = (uint64_t **)&v429 + 1;
            v89 = (uint64_t **)&v429 + 1;
            if (*((_QWORD *)&v429 + 1))
            {
              while (1)
              {
                while (1)
                {
                  v89 = (uint64_t **)v87;
                  v90 = *((_DWORD *)v87 + 8);
                  if (VarValueEncoding >= v90)
                    break;
                  v87 = *v89;
                  v88 = v89;
                  if (!*v89)
                    goto LABEL_118;
                }
                if (v90 >= VarValueEncoding)
                  break;
                v87 = v89[1];
                if (!v87)
                {
                  v88 = v89 + 1;
                  goto LABEL_118;
                }
              }
              v91 = v89;
              v94 = (signed int *)v89[6];
              v93 = (unint64_t)v89[7];
              if ((unint64_t)v94 >= v93)
              {
LABEL_123:
                v96 = (signed int *)v91[5];
                v97 = v94 - v96;
                v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 62)
                  goto LABEL_577;
                v99 = v93 - (_QWORD)v96;
                if (v99 >> 1 > v98)
                  v98 = v99 >> 1;
                if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
                  v100 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v100 = v98;
                if (v100)
                {
                  if (v100 >> 62)
                    goto LABEL_580;
                  v101 = operator new(4 * v100);
                  v102 = (signed int *)&v101[4 * v97];
                  *v102 = v86;
                  v95 = (uint64_t)(v102 + 1);
                  if (v94 == v96)
                    goto LABEL_140;
LABEL_134:
                  v103 = (char *)(v94 - 1) - (char *)v96;
                  if (v103 < 0x2C)
                    goto LABEL_585;
                  if ((unint64_t)((char *)v96 - v101) < 0x20)
                    goto LABEL_585;
                  v104 = (v103 >> 2) + 1;
                  v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
                  v106 = &v94[v105 / 0xFFFFFFFFFFFFFFFCLL];
                  v102 = (signed int *)((char *)v102 - v105);
                  v107 = &v101[4 * v97 - 16];
                  v108 = v94 - 4;
                  v109 = v104 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v110 = *(_OWORD *)v108;
                    *(v107 - 1) = *((_OWORD *)v108 - 1);
                    *v107 = v110;
                    v107 -= 2;
                    v108 -= 8;
                    v109 -= 8;
                  }
                  while (v109);
                  v94 = v106;
                  if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_585:
                    do
                    {
                      v111 = *--v94;
                      *--v102 = v111;
                    }
                    while (v94 != v96);
                  }
                }
                else
                {
                  v101 = 0;
                  v102 = (signed int *)(4 * v97);
                  *(_DWORD *)(4 * v97) = v86;
                  v95 = 4 * v97 + 4;
                  if (v94 != v96)
                    goto LABEL_134;
                }
LABEL_140:
                v91[5] = v102;
                v91[6] = v95;
                v91[7] = &v101[4 * v100];
                if (v96)
                  operator delete(v96);
                goto LABEL_142;
              }
            }
            else
            {
LABEL_118:
              v91 = operator new(0x40uLL);
              *((_DWORD *)v91 + 8) = VarValueEncoding;
              v91[6] = 0;
              v91[7] = 0;
              v91[5] = 0;
              *v91 = 0;
              v91[1] = 0;
              v91[2] = v89;
              *v88 = v91;
              v92 = v91;
              if (*(_QWORD *)v429)
              {
                *(_QWORD *)&v429 = *(_QWORD *)v429;
                v92 = *v88;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v429 + 1), v92);
              ++v430[0];
              v94 = (signed int *)v91[6];
              v93 = v91[7];
              if ((unint64_t)v94 >= v93)
                goto LABEL_123;
            }
            *v94 = v86;
            v95 = (uint64_t)(v94 + 1);
LABEL_142:
            v91[6] = v95;
            v112 = v427;
            v113 = &v427;
LABEL_144:
            v114 = v113;
            if (!v112)
              goto LABEL_149;
            do
            {
              v113 = (uint64_t *)v112;
              v115 = *(_DWORD *)(v112 + 32);
              if (v86 < v115)
              {
                v112 = *v113;
                goto LABEL_144;
              }
              if (v115 >= v86)
              {
                v116 = v113;
                v119 = (signed int *)v113[6];
                v118 = v113[7];
                if ((unint64_t)v119 >= v118)
                  goto LABEL_154;
LABEL_107:
                *v119 = VarValueEncoding;
                v82 = (uint64_t)(v119 + 1);
                goto LABEL_108;
              }
              v112 = v113[1];
            }
            while (v112);
            v114 = v113 + 1;
LABEL_149:
            v116 = operator new(0x40uLL);
            v116[8] = v86;
            *((_QWORD *)v116 + 6) = 0;
            *((_QWORD *)v116 + 7) = 0;
            *((_QWORD *)v116 + 5) = 0;
            *(_QWORD *)v116 = 0;
            *((_QWORD *)v116 + 1) = 0;
            *((_QWORD *)v116 + 2) = v113;
            *v114 = (uint64_t)v116;
            v117 = (uint64_t *)v116;
            if (*(_QWORD *)v426)
            {
              v426 = *(char **)v426;
              v117 = (uint64_t *)*v114;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v427, v117);
            ++v428;
            v119 = (signed int *)*((_QWORD *)v116 + 6);
            v118 = *((_QWORD *)v116 + 7);
            if ((unint64_t)v119 < v118)
              goto LABEL_107;
LABEL_154:
            v120 = (signed int *)*((_QWORD *)v116 + 5);
            v121 = v119 - v120;
            v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 62)
LABEL_577:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v123 = v118 - (_QWORD)v120;
            if (v123 >> 1 > v122)
              v122 = v123 >> 1;
            if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
              v124 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v124 = v122;
            if (!v124)
            {
              v125 = 0;
              v126 = (signed int *)(4 * v121);
              *(_DWORD *)(4 * v121) = VarValueEncoding;
              v82 = 4 * v121 + 4;
              if (v119 != v120)
                goto LABEL_165;
              goto LABEL_171;
            }
            if (v124 >> 62)
LABEL_580:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v125 = operator new(4 * v124);
            v126 = (signed int *)&v125[4 * v121];
            *v126 = VarValueEncoding;
            v82 = (uint64_t)(v126 + 1);
            if (v119 == v120)
              goto LABEL_171;
LABEL_165:
            v127 = (char *)(v119 - 1) - (char *)v120;
            if (v127 < 0x2C)
              goto LABEL_586;
            if ((unint64_t)((char *)v120 - v125) < 0x20)
              goto LABEL_586;
            v128 = (v127 >> 2) + 1;
            v129 = 4 * (v128 & 0x7FFFFFFFFFFFFFF8);
            v130 = &v119[v129 / 0xFFFFFFFFFFFFFFFCLL];
            v126 = (signed int *)((char *)v126 - v129);
            v131 = &v125[4 * v121 - 16];
            v132 = v119 - 4;
            v133 = v128 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v134 = *(_OWORD *)v132;
              *(v131 - 1) = *((_OWORD *)v132 - 1);
              *v131 = v134;
              v131 -= 2;
              v132 -= 8;
              v133 -= 8;
            }
            while (v133);
            v119 = v130;
            if (v128 != (v128 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_586:
              do
              {
                v135 = *--v119;
                *--v126 = v135;
              }
              while (v119 != v120);
            }
LABEL_171:
            *((_QWORD *)v116 + 5) = v126;
            *((_QWORD *)v116 + 6) = v82;
            *((_QWORD *)v116 + 7) = &v125[4 * v124];
            if (v120)
              operator delete(v120);
LABEL_108:
            v73 = v391;
            LODWORD(v74) = v388;
            *((_QWORD *)v116 + 6) = v82;
            v81 += 3;
            if (v81 == *(uint64_t ***)v399)
            {
              v174 = (char *)v429;
              goto LABEL_247;
            }
          }
        }
        v174 = (char *)&v429 + 8;
LABEL_247:
        LODWORD(v411) = 0;
        LODWORD(v410.__r_.__value_.__l.__data_) = 0;
        LODWORD(v407) = 0;
        v57 = (uint64_t)v406;
        v431[0] = (unint64_t)v406;
        v431[1] = (unint64_t)&v410;
        v431[2] = (unint64_t)&v407;
        *(_QWORD *)&v432 = &v411;
        v56 = v385;
        if (v174 != (char *)&v429 + 8)
        {
          do
          {
            v185 = (char *)*((_QWORD *)v174 + 1);
            if (v185)
            {
              do
              {
                v186 = v185;
                v185 = *(char **)v185;
              }
              while (v185);
            }
            else
            {
              do
              {
                v186 = (char *)*((_QWORD *)v174 + 2);
                v187 = *(_QWORD *)v186 == (_QWORD)v174;
                v174 = v186;
              }
              while (!v187);
            }
            v174 = v186;
          }
          while (v186 != (char *)&v429 + 8);
        }
        v175 = (uint64_t *)v426;
        if (v426 != (char *)&v427)
        {
          do
          {
            v188 = (uint64_t *)v175[1];
            if (v188)
            {
              do
              {
                v189 = (uint64_t **)v188;
                v188 = (uint64_t *)*v188;
              }
              while (v188);
            }
            else
            {
              do
              {
                v189 = (uint64_t **)v175[2];
                v187 = *v189 == v175;
                v175 = (uint64_t *)v189;
              }
              while (!v187);
            }
            v175 = (uint64_t *)v189;
          }
          while (v189 != (uint64_t **)&v427);
        }
        if (*off_2540793E0[0] > 1
          && (off_2540793E0[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_2540793E0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v423, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1043);
          v176 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v423);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"Table: 2 variables, ", 20);
          v177 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)" tuples encoded using ", 22);
          v178 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)" clauses, including ", 20);
          v179 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)" large clauses, ", 16);
          v180 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)" implications", 13);
          google::LogMessage::~LogMessage((google::LogMessage *)&v423);
        }
        std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v426, (_QWORD *)v427);
        std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v429, *((_QWORD **)&v429 + 1));
LABEL_254:
        v431[0] = (unint64_t)operator new(0x38uLL);
        *(_OWORD *)&v431[1] = xmmword_22DCE7850;
        strcpy((char *)v431[0], "table: expanded positive constraint with two variables");
        operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v431);
        goto LABEL_255;
      }
      operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v57, v74, (unint64_t *)&v429);
      v75 = operations_research::Domain::Size((operations_research::Domain *)&v429) == 1;
      if ((v429 & 1) != 0)
      {
        operator delete(*((void **)&v429 + 1));
        if ((v431[0] & 1) == 0)
          goto LABEL_104;
      }
      else if ((v431[0] & 1) == 0)
      {
        goto LABEL_104;
      }
LABEL_93:
      operator delete((void *)v431[1]);
      if (v75)
        goto LABEL_254;
      goto LABEL_105;
    }
    *(_OWORD *)&v431[1] = 0u;
    v432 = 0u;
    v431[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v433 = 0;
    v76 = (char *)v417;
    v77 = v418;
    if (v417 == v418)
    {
      v80 = 0;
      v390 = 0;
    }
    else
    {
      do
      {
        *(_QWORD *)&v429 = *(_QWORD *)v76;
        *((_QWORD *)&v429 + 1) = v59;
        v78 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::find_or_prepare_insert<absl::lts_2020_02_25::Span<long long const>>((uint64_t *)v431, (uint64_t)&v429);
        if (v79)
          *(_OWORD *)(v431[1] + 16 * v78) = v429;
        v76 += 24;
      }
      while (v76 != v77);
      v390 = v431[2];
      v80 = v431[2];
      if ((_QWORD)v432)
      {
        operator delete((void *)v431[0]);
        v431[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        v433 = 0;
        v431[2] = 0;
        *(_QWORD *)&v432 = 0;
        v431[1] = 0;
      }
    }
    if (*((_QWORD *)&v432 + 1))
      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v432 + 1));
    v403 = (v387 - 1);
    v411 = 0;
    v412 = 0;
    v413 = 0;
    if ((int)v387 >= 1)
    {
      v394 = v80;
      v136 = 0;
      v137 = 0;
      v138 = 0;
      v139 = 0;
      while (1)
      {
        while (1)
        {
          v140 = *((_QWORD *)v415 + 6 * v139 + 2);
          if (v138 >= v137)
            break;
          *(_QWORD *)v138 = v140;
          v138 += 8;
          v412 = v138;
          if (++v139 == v387)
            goto LABEL_206;
        }
        v141 = (v138 - v136) >> 3;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v137 - v136) >> 2 > v142)
          v142 = (v137 - v136) >> 2;
        v143 = (unint64_t)(v137 - v136) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v142;
        if (v143)
        {
          if (v143 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v144 = operator new(8 * v143);
          v145 = &v144[8 * v141];
          *(_QWORD *)v145 = v140;
          v146 = (uint64_t)(v145 + 8);
          if (v138 == v136)
          {
LABEL_197:
            v56 = v385;
            v57 = (uint64_t)v406;
            v137 = &v144[8 * v143];
            v411 = v145;
            v412 = (char *)v146;
            v413 = v137;
            if (!v136)
              goto LABEL_194;
LABEL_193:
            operator delete(v136);
            goto LABEL_194;
          }
        }
        else
        {
          v144 = 0;
          v145 = (char *)(8 * v141);
          *(_QWORD *)(8 * v141) = v140;
          v146 = 8 * v141 + 8;
          if (v138 == v136)
            goto LABEL_197;
        }
        v147 = v138 - 8 - v136;
        if (v147 < 0x168
          || &v144[v138 - v136 - 8 - (v147 & 0xFFFFFFFFFFFFFFF8)] > &v144[v138 - v136 - 8]
          || &v138[-(v147 & 0xFFFFFFFFFFFFFFF8) - 8] > v138 - 8
          || (unint64_t)(v136 - v144) < 0x20)
        {
          break;
        }
        v150 = (v147 >> 3) + 1;
        v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
        v148 = &v138[-v151];
        v145 -= v151;
        v152 = &v144[8 * v141 - 16];
        v153 = v138 - 16;
        v154 = v150 & 0x3FFFFFFFFFFFFFFCLL;
        v56 = v385;
        v57 = (uint64_t)v406;
        do
        {
          v155 = *(_OWORD *)v153;
          *(v152 - 1) = *((_OWORD *)v153 - 1);
          *v152 = v155;
          v152 -= 2;
          v153 -= 32;
          v154 -= 4;
        }
        while (v154);
        if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_191;
LABEL_192:
        v137 = &v144[8 * v143];
        v411 = v145;
        v412 = (char *)v146;
        v413 = v137;
        if (v136)
          goto LABEL_193;
LABEL_194:
        v136 = v145;
        v138 = (char *)v146;
        v412 = (char *)v146;
        if (++v139 == v387)
        {
LABEL_206:
          v156 = v411;
          v80 = v394;
          goto LABEL_208;
        }
      }
      v148 = v138;
      v56 = v385;
      v57 = (uint64_t)v406;
      do
      {
LABEL_191:
        v149 = *((_QWORD *)v148 - 1);
        v148 -= 8;
        *((_QWORD *)v145 - 1) = v149;
        v145 -= 8;
      }
      while (v148 != v136);
      goto LABEL_192;
    }
    v138 = 0;
    v156 = 0;
LABEL_208:
    operations_research::sat::CompressTuples((uint64_t)v156, (v138 - v156) >> 3, 0x8000000000000000, (uint64_t)&v417);
    v158 = (v418 - (_BYTE *)v417) >> 3;
    v159 = 0xAAAAAAAAAAAAAAABLL * v158;
    if (-1431655765 * (_DWORD)v158 == 1)
    {
      HIBYTE(v431[2]) = 16;
      strcpy((char *)v431, "table: one tuple");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v431);
      if (SHIBYTE(v431[2]) < 0)
        operator delete((void *)v431[0]);
      operations_research::sat::ConstraintProto::Clear(v56);
LABEL_558:
      if (v156)
      {
        v412 = v156;
        operator delete(v156);
      }
      goto LABEL_258;
    }
    v160 = -1431655765 * (*(_QWORD *)v398 >> 3);
    if ((_DWORD)v80 == (_DWORD)v160)
    {
      std::string::basic_string[abi:ne180100]<0>(v431, "TODO table: last value implied by previous values");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v431);
      if (SHIBYTE(v431[2]) < 0)
        operator delete((void *)v431[0]);
    }
    if (*off_2540793D0[0] >= 2
      && (off_2540793D0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_2540793D0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)2)))
    {
      if ((int)v387 < 2)
      {
        v163 = 1;
      }
      else
      {
        v161 = (uint64_t *)((char *)v415 + 16);
        v162 = 1;
        do
        {
          v165 = *v161;
          v161 += 6;
          v164 = v165;
          if (v165 >= 0)
            v166 = v164;
          else
            v166 = -(uint64_t)v164;
          v167 = 63 - __clz(v166);
          if (v164)
            v168 = v167;
          else
            v168 = 0;
          if (v162 >= 0)
            v169 = v162;
          else
            v169 = -v162;
          v170 = 63 - __clz(v169);
          if (!v162)
            v170 = 0;
          v171 = v168 + v170;
          if (v171 <= 61)
          {
            v163 = v164 * v162;
          }
          else
          {
            v163 = 0;
            if (v162 && v164)
            {
              v163 = ((v164 ^ v162) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              v172 = v166 * v169;
              if (v171 <= 0x3E && v172 < v163)
              {
                if (v163 >= 0)
                  v163 = v166 * v169;
                else
                  v163 = -(uint64_t)v172;
              }
            }
          }
          v162 = v163;
          --v403;
        }
        while (v403);
      }
      v431[0] = (unint64_t)"Table: ";
      v431[1] = 7;
      v196 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v387, v430, v157);
      *(_QWORD *)&v429 = v430;
      *((_QWORD *)&v429 + 1) = v196 - (_BYTE *)v430;
      v426 = " variables, original tuples = ";
      v427 = 30;
      v198 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)v386, v425, v197);
      v423 = v425;
      v424 = v198 - (_BYTE *)v425;
      absl::lts_2020_02_25::StrCat((uint64_t)v431, (uint64_t)&v429, (uint64_t)&v426, (uint64_t)&v423, &v410);
      if ((_DWORD)v386 != (_DWORD)v160)
      {
        v431[0] = (unint64_t)", valid tuples = ";
        v431[1] = 17;
        v200 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v160, v430, v199);
        *(_QWORD *)&v429 = v430;
        *((_QWORD *)&v429 + 1) = v200 - (_BYTE *)v430;
        absl::lts_2020_02_25::StrAppend(&v410, (uint64_t)v431, (uint64_t)&v429);
      }
      if ((_DWORD)v80 == (_DWORD)v160)
      {
        if (v163 <= v390)
        {
          v431[0] = (unint64_t)", full prefix = true";
          v431[1] = 20;
          absl::lts_2020_02_25::StrAppend((uint64_t)&v410, (uint64_t)v431);
        }
        else
        {
          v431[0] = (unint64_t)", partial prefix = ";
          v431[1] = 19;
          v201 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v160, v430, v199);
          *(_QWORD *)&v429 = v430;
          *((_QWORD *)&v429 + 1) = v201 - (_BYTE *)v430;
          v426 = "/";
          v427 = 1;
          v203 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v163, v425, v202);
          v423 = v425;
          v424 = v203 - (_BYTE *)v425;
          absl::lts_2020_02_25::StrAppend(&v410, (uint64_t)v431, (uint64_t)&v429, (uint64_t)&v426, (uint64_t)&v423);
        }
      }
      else
      {
        v431[0] = (unint64_t)", num prefix tuples = ";
        v431[1] = 22;
        v205 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v80, v430, v199);
        *(_QWORD *)&v429 = v430;
        *((_QWORD *)&v429 + 1) = v205 - (_BYTE *)v430;
        absl::lts_2020_02_25::StrAppend(&v410, (uint64_t)v431, (uint64_t)&v429);
      }
      if ((_DWORD)v159 != (_DWORD)v160)
      {
        v431[0] = (unint64_t)", compressed tuples = ";
        v431[1] = 22;
        v208 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v159, v430, v204);
        *(_QWORD *)&v429 = v430;
        *((_QWORD *)&v429 + 1) = v208 - (_BYTE *)v430;
        absl::lts_2020_02_25::StrAppend(&v410, (uint64_t)v431, (uint64_t)&v429);
      }
      if (*off_2540793D8[0] >= 2
        && (off_2540793D8[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_2540793D8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)2)))
      {
        v209 = google::LogMessage::LogMessage((google::LogMessage *)v431, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1195);
        v210 = (_QWORD *)google::LogMessage::stream(v209);
        if ((v410.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v211 = &v410;
        else
          v211 = (std::string *)v410.__r_.__value_.__r.__words[0];
        if ((v410.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v410.__r_.__value_.__r.__words[2]);
        else
          size = v410.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)v211, size);
        google::LogMessage::~LogMessage((google::LogMessage *)v431);
      }
      if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v410.__r_.__value_.__l.__data_);
    }
    if ((_DWORD)v159 == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v431, "TODO table: two tuples");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v431);
      if (SHIBYTE(v431[2]) < 0)
        operator delete((void *)v431[0]);
    }
    v426 = 0;
    v427 = 0;
    v428 = 0;
    if (v159 << 32)
    {
      if (v159 << 32 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v213 = (char *)operator new((4 * v159) & 0x3FFFFFFFFLL);
      v426 = v213;
      v428 = &v213[4 * (int)v159];
      bzero(v213, (4 * v159) & 0x3FFFFFFFFLL);
      v427 = (uint64_t)&v213[(4 * v159) & 0x3FFFFFFFFLL];
    }
    v214 = *(_QWORD *)(v57 + 48);
    v215 = *(int **)(v214 + 56);
    if (v215)
    {
      v216 = *(int *)(v214 + 48);
      v217 = *v215;
      if ((int)v216 < *v215)
      {
        *(_DWORD *)(v214 + 48) = v216 + 1;
        v218 = *(_QWORD *)&v215[2 * v216 + 2];
        goto LABEL_329;
      }
      if (v217 != *(_DWORD *)(v214 + 52))
      {
LABEL_328:
        *v215 = v217 + 1;
        v218 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v214 + 40));
        v219 = *(_QWORD *)(v214 + 56);
        v220 = *(int *)(v214 + 48);
        *(_DWORD *)(v214 + 48) = v220 + 1;
        *(_QWORD *)(v219 + 8 * v220 + 8) = v218;
LABEL_329:
        if (*(_DWORD *)(v218 + 60) == 3)
        {
          v221 = *(_QWORD *)(v218 + 48);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v218);
          *(_DWORD *)(v218 + 60) = 3;
          v222 = *(_QWORD *)(v218 + 8);
          v223 = (google::protobuf::Arena *)(v222 & 0xFFFFFFFFFFFFFFFELL);
          if ((v222 & 1) != 0)
            v223 = *(google::protobuf::Arena **)v223;
          v221 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v223);
          *(_QWORD *)(v218 + 48) = v221;
        }
        if (*(_BYTE *)(v57 + 64))
        {
          v224 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(v57 + 48));
          v225 = operations_research::sat::ConstraintProto::mutable_at_most_one(v224);
          if ((int)v159 < 1)
            goto LABEL_346;
        }
        else
        {
          v225 = 0;
          if ((int)v159 < 1)
            goto LABEL_346;
        }
        v226 = 0;
        v227 = 4 * v159;
        do
        {
          v228 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v57);
          *(_DWORD *)&v426[v226] = v228;
          v229 = *(unsigned int *)(v221 + 16);
          if ((_DWORD)v229 == *(_DWORD *)(v221 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v221 + 16), v229 + 1);
          *(_DWORD *)(*(_QWORD *)(v221 + 24) + 4 * v229) = v228;
          *(_DWORD *)(v221 + 16) = v229 + 1;
          if (v225)
          {
            v230 = *(_DWORD *)&v426[v226];
            v231 = *(unsigned int *)(v225 + 16);
            if ((_DWORD)v231 == *(_DWORD *)(v225 + 20))
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v225 + 16), v231 + 1);
            *(_DWORD *)(*(_QWORD *)(v225 + 24) + 4 * v231) = v230;
            *(_DWORD *)(v225 + 16) = v231 + 1;
          }
          v226 += 4;
        }
        while (v227 != v226);
LABEL_346:
        v423 = 0;
        v424 = 0;
        v425[0] = 0;
        memset(&v410, 0, sizeof(v410));
        v407 = 0;
        v408 = 0;
        v409 = 0;
        if ((int)v387 < 1)
        {
LABEL_547:
          v431[0] = (unint64_t)operator new(0x28uLL);
          *(_OWORD *)&v431[1] = xmmword_22DCE6590;
          strcpy((char *)v431[0], "table: expanded positive constraint");
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v406, (uint64_t)v431);
          if (SHIBYTE(v431[2]) < 0)
            operator delete((void *)v431[0]);
          operations_research::sat::ConstraintProto::Clear(v385);
          if (v407)
            operator delete(v407);
          if (v410.__r_.__value_.__r.__words[0])
            operator delete(v410.__r_.__value_.__l.__data_);
          if (v423)
            operator delete(v423);
          if (v426)
            operator delete(v426);
          v156 = v411;
          goto LABEL_558;
        }
        v232 = 0;
LABEL_349:
        if (*((_QWORD *)v415 + 6 * v232 + 2) == 1)
          goto LABEL_348;
        v233 = (char *)v423;
        v424 = (uint64_t)v423;
        v234 = (char *)v410.__r_.__value_.__r.__words[0];
        v410.__r_.__value_.__l.__size_ = v410.__r_.__value_.__r.__words[0];
        v235 = (char *)v407;
        v408 = (int *)v407;
        v236 = v426;
        if (v427 == (_QWORD)v426)
          goto LABEL_348;
        v237 = 0;
        v400 = v426;
        v404 = (v427 - (uint64_t)v426) >> 2;
        v395 = v232;
        while (1)
        {
          while (1)
          {
            v238 = *(_QWORD *)(*((_QWORD *)v417 + 3 * v237) + 8 * v232);
            v239 = *(_DWORD *)&v236[4 * v237];
            if (v238 != 0x8000000000000000)
              break;
            if (v235 < v409)
            {
              *(_DWORD *)v235 = v239;
              v235 += 4;
              v408 = (int *)v235;
              if (v404 <= ++v237)
                goto LABEL_438;
            }
            else
            {
              v240 = (char *)v407;
              v241 = v235 - (_BYTE *)v407;
              v242 = (v235 - (_BYTE *)v407) >> 2;
              v243 = v242 + 1;
              if ((unint64_t)(v242 + 1) >> 62)
                goto LABEL_572;
              v244 = v409 - (_BYTE *)v407;
              if ((v409 - (_BYTE *)v407) >> 1 > v243)
                v243 = v244 >> 1;
              if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFFCLL)
                v245 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v245 = v243;
              v392 = v234;
              if (v245)
              {
                if (v245 >> 62)
                  goto LABEL_571;
                v246 = operator new(4 * v245);
                v247 = &v246[4 * v242];
                *v247 = v239;
                v248 = (uint64_t)(v247 + 1);
                if (v235 == v240)
                {
LABEL_406:
                  v232 = v395;
                  v407 = v247;
                  v409 = &v246[4 * v245];
                  if (!v240)
                    goto LABEL_369;
LABEL_368:
                  operator delete(v240);
                  goto LABEL_369;
                }
              }
              else
              {
                v246 = 0;
                v247 = (_DWORD *)(4 * v242);
                *(_DWORD *)(4 * v242) = v239;
                v248 = 4 * v242 + 4;
                if (v235 == v240)
                  goto LABEL_406;
              }
              v249 = v235 - 4 - v240;
              if (v249 < 0xBC
                || &v246[v241 - 4 - (v249 & 0xFFFFFFFFFFFFFFFCLL)] > &v246[v241 - 4]
                || &v235[-(v249 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v235 - 4
                || (unint64_t)(v235 - v246 - v241) < 0x20)
              {
                v250 = v235;
                v232 = v395;
                do
                {
LABEL_366:
                  v251 = *((_DWORD *)v250 - 1);
                  v250 -= 4;
                  *--v247 = v251;
                }
                while (v250 != v240);
                goto LABEL_367;
              }
              v285 = (v249 >> 2) + 1;
              v286 = 4 * (v285 & 0x7FFFFFFFFFFFFFF8);
              v250 = &v235[-v286];
              v247 = (_DWORD *)((char *)v247 - v286);
              v287 = &v246[4 * v242 - 16];
              v288 = (__int128 *)(v235 - 16);
              v289 = v285 & 0x7FFFFFFFFFFFFFF8;
              v232 = v395;
              do
              {
                v290 = *v288;
                *(v287 - 1) = *(v288 - 1);
                *v287 = v290;
                v287 -= 2;
                v288 -= 2;
                v289 -= 8;
              }
              while (v289);
              if (v285 != (v285 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_366;
LABEL_367:
              v407 = v247;
              v409 = &v246[4 * v245];
              if (v240)
                goto LABEL_368;
LABEL_369:
              v234 = v392;
              v408 = (int *)v248;
              v235 = (char *)v248;
              if (v404 <= ++v237)
                goto LABEL_438;
            }
          }
          if ((unint64_t)v233 < v425[0])
          {
            *(_DWORD *)v233 = v239;
            v252 = (uint64_t)(v233 + 4);
            goto LABEL_387;
          }
          v253 = (char *)v423;
          v254 = v233 - (_BYTE *)v423;
          v255 = (v233 - (_BYTE *)v423) >> 2;
          v256 = v255 + 1;
          if ((unint64_t)(v255 + 1) >> 62)
LABEL_572:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v257 = v425[0] - (_QWORD)v423;
          if ((uint64_t)(v425[0] - (_QWORD)v423) >> 1 > v256)
            v256 = v257 >> 1;
          if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL)
            v258 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v258 = v256;
          if (v258)
          {
            if (v258 >> 62)
              goto LABEL_571;
            v259 = v234;
            v260 = (char *)operator new(4 * v258);
            v261 = v233;
            v234 = v259;
            v262 = &v260[4 * v255];
            *(_DWORD *)v262 = v239;
            v252 = (uint64_t)(v262 + 4);
            if (v261 != v253)
            {
LABEL_382:
              v263 = v261;
              v264 = v261 - 4;
              v265 = v261 - 4 - v253;
              if (v265 < 0xBC
                || &v260[v254 - 4 - (v265 & 0xFFFFFFFFFFFFFFFCLL)] > &v260[v254 - 4]
                || &v264[-(v265 & 0xFFFFFFFFFFFFFFFCLL)] > v264
                || (unint64_t)(v264 - v260 - v254 + 4) < 0x20)
              {
                v266 = v263;
                v232 = v395;
              }
              else
              {
                v291 = (v265 >> 2) + 1;
                v292 = 4 * (v291 & 0x7FFFFFFFFFFFFFF8);
                v266 = &v263[-v292];
                v262 -= v292;
                v293 = &v260[4 * v255 - 16];
                v294 = v263 - 16;
                v295 = v291 & 0x7FFFFFFFFFFFFFF8;
                v232 = v395;
                do
                {
                  v296 = *(_OWORD *)v294;
                  *((_OWORD *)v293 - 1) = *((_OWORD *)v294 - 1);
                  *(_OWORD *)v293 = v296;
                  v293 -= 32;
                  v294 -= 32;
                  v295 -= 8;
                }
                while (v295);
                if (v291 == (v291 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_385:
                  v423 = v262;
                  v425[0] = &v260[4 * v258];
                  if (!v253)
                    goto LABEL_387;
LABEL_386:
                  v268 = v234;
                  operator delete(v253);
                  v234 = v268;
                  goto LABEL_387;
                }
              }
              do
              {
                v267 = *((_DWORD *)v266 - 1);
                v266 -= 4;
                *((_DWORD *)v262 - 1) = v267;
                v262 -= 4;
              }
              while (v266 != v253);
              goto LABEL_385;
            }
          }
          else
          {
            v261 = v233;
            v260 = 0;
            v262 = (char *)(4 * v255);
            *(_DWORD *)(4 * v255) = v239;
            v252 = 4 * v255 + 4;
            if (v261 != v253)
              goto LABEL_382;
          }
          v232 = v395;
          v423 = v262;
          v425[0] = &v260[4 * v258];
          if (v253)
            goto LABEL_386;
LABEL_387:
          v424 = v252;
          if ((unint64_t)v234 < v410.__r_.__value_.__r.__words[2])
          {
            v269 = (char *)v252;
            *(_QWORD *)v234 = v238;
            v270 = (std::string::size_type)(v234 + 8);
            goto LABEL_403;
          }
          v271 = (char *)v410.__r_.__value_.__r.__words[0];
          v272 = &v234[-v410.__r_.__value_.__r.__words[0]];
          v273 = (uint64_t)&v234[-v410.__r_.__value_.__r.__words[0]] >> 3;
          v274 = v273 + 1;
          if ((unint64_t)(v273 + 1) >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v275 = v232;
          v276 = v235;
          v277 = v410.__r_.__value_.__r.__words[2] - v410.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v410.__r_.__value_.__r.__words[2] - v410.__r_.__value_.__r.__words[0]) >> 2 > v274)
            v274 = v277 >> 2;
          if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
            v278 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v278 = v274;
          if (v278)
          {
            if (v278 >> 61)
LABEL_571:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v279 = v234;
            v280 = operator new(8 * v278);
            v269 = (char *)v252;
            v275 = v395;
            v234 = v279;
            v281 = &v280[8 * v273];
            *v281 = v238;
            v270 = (std::string::size_type)(v281 + 1);
            if (v279 == v271)
            {
LABEL_412:
              v235 = v276;
              v232 = v275;
              v410.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
              v410.__r_.__value_.__r.__words[2] = (std::string::size_type)&v280[8 * v278];
              if (!v271)
                goto LABEL_403;
LABEL_402:
              operator delete(v271);
              goto LABEL_403;
            }
          }
          else
          {
            v269 = (char *)v252;
            v280 = 0;
            v281 = (_QWORD *)(8 * v273);
            *(_QWORD *)(8 * v273) = v238;
            v270 = 8 * v273 + 8;
            if (v234 == v271)
              goto LABEL_412;
          }
          v282 = v234 - 8 - v271;
          v235 = v276;
          if (v282 < 0x168)
          {
            v283 = v234;
            v232 = v275;
            goto LABEL_400;
          }
          v232 = v275;
          if (&v272[(_QWORD)v280 - 8 - (v282 & 0xFFFFFFFFFFFFFFF8)] > &v272[(_QWORD)v280 - 8])
          {
            v283 = v234;
            do
            {
LABEL_400:
              v284 = *((_QWORD *)v283 - 1);
              v283 -= 8;
              *--v281 = v284;
            }
            while (v283 != v271);
            goto LABEL_401;
          }
          if (&v234[-(v282 & 0xFFFFFFFFFFFFFFF8) - 8] > v234 - 8)
          {
            v283 = v234;
            goto LABEL_400;
          }
          if ((unint64_t)(v234 - v280 - (_QWORD)v272) < 0x20)
          {
            v283 = v234;
            goto LABEL_400;
          }
          v297 = (v282 >> 3) + 1;
          v298 = 8 * (v297 & 0x3FFFFFFFFFFFFFFCLL);
          v283 = &v234[-v298];
          v281 = (_QWORD *)((char *)v281 - v298);
          v299 = &v280[8 * v273 - 16];
          v300 = v234 - 16;
          v301 = v297 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v302 = *(_OWORD *)v300;
            *(v299 - 1) = *((_OWORD *)v300 - 1);
            *v299 = v302;
            v299 -= 2;
            v300 -= 32;
            v301 -= 4;
          }
          while (v301);
          if (v297 != (v297 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_400;
LABEL_401:
          v410.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
          v410.__r_.__value_.__r.__words[2] = (std::string::size_type)&v280[8 * v278];
          if (v271)
            goto LABEL_402;
LABEL_403:
          v410.__r_.__value_.__l.__size_ = v270;
          v234 = (char *)v270;
          v233 = v269;
          v236 = v400;
          if (v404 <= ++v237)
          {
LABEL_438:
            v303 = v423;
            if (v423 != v233)
            {
              v401 = *((_DWORD *)v419 + v232);
              if (*off_2540793E8[0] >= 2
                && (off_2540793E8[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_2540793E8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)2)))
              {
                v304 = google::LogMessage::LogMessage((google::LogMessage *)&v429, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 934);
                v305 = (_QWORD *)google::LogMessage::stream(v304);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v305, (uint64_t)"Process var(", 12);
                v306 = (_QWORD *)std::ostream::operator<<();
                v307 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v306, (uint64_t)") with domain ", 14);
                operations_research::sat::PresolveContext::DomainOf(v406, (const char *)v401, v431);
                v308 = operations_research::operator<<(v307, v431);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, (uint64_t)" and ", 5);
                v309 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v309, (uint64_t)" active tuples, and ", 20);
                v310 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v310, (uint64_t)" any tuples", 11);
                if ((v431[0] & 1) != 0)
                  operator delete((void *)v431[1]);
                google::LogMessage::~LogMessage((google::LogMessage *)&v429);
              }
              v431[0] = (v233 - v303) >> 2;
              v311 = v410.__r_.__value_.__l.__size_;
              v312 = v410.__r_.__value_.__r.__words[0];
              v422[0] = (uint64_t)(v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0]) >> 3;
              if (v431[0] != v422[0])
              {
                *(_QWORD *)&v429 = google::MakeCheckOpString<unsigned long,unsigned long>((int)v431, (int)v422, "tuple_literals.size() == values.size()");
                if ((_QWORD)v429)
                {
                  v375 = google::LogMessageFatal::LogMessageFatal(v431, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 937, (uint64_t **)&v429);
                  google::LogMessage::stream((google::LogMessage *)v375);
                  goto LABEL_564;
                }
              }
              memset(v431, 0, sizeof(v431));
              if (v311 != v312)
              {
                v313 = 0;
                v314 = 0;
                v315 = 0;
                v316 = 0;
                while (1)
                {
                  while (1)
                  {
                    v317 = *(_QWORD *)(v312 + 8 * v316);
                    if (!operations_research::sat::PresolveContext::DomainContains(v406, v401, v317))
                    {
                      v377 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v429, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 943);
                      v378 = (_QWORD *)google::LogMessage::stream(v377);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v378, (uint64_t)"Check failed: context->DomainContains(variable, value) ", 55);
LABEL_300:
                      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v429);
                    }
                    v318 = v423;
                    if (v315 >= v314)
                      break;
                    *(_QWORD *)v315 = v317;
                    *(_DWORD *)(v315 + 8) = v318[v316];
                    v315 += 16;
                    v431[1] = v315;
                    ++v316;
                    v312 = v410.__r_.__value_.__r.__words[0];
                    if (v316 >= (uint64_t)(v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0]) >> 3)
                      goto LABEL_467;
                  }
                  v319 = (uint64_t)(v315 - (_QWORD)v313) >> 4;
                  v320 = v319 + 1;
                  if ((unint64_t)(v319 + 1) >> 60)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v314 - (_QWORD)v313) >> 3 > v320)
                    v320 = (uint64_t)(v314 - (_QWORD)v313) >> 3;
                  if (v314 - (unint64_t)v313 >= 0x7FFFFFFFFFFFFFF0)
                    v321 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v321 = v320;
                  if (v321 >> 60)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v322 = (char *)operator new(16 * v321);
                  v323 = &v322[16 * v319];
                  *(_QWORD *)v323 = v317;
                  *((_DWORD *)v323 + 2) = v318[v316];
                  if ((void *)v315 == v313)
                  {
                    v325 = (unint64_t)&v322[16 * v319];
                    v314 = (unint64_t)&v322[16 * v321];
                    v315 = (unint64_t)(v323 + 16);
                    v431[0] = v325;
                    v431[1] = (unint64_t)(v323 + 16);
                    v431[2] = v314;
                    if (!v313)
                      goto LABEL_463;
                  }
                  else
                  {
                    v324 = &v322[16 * v319];
                    do
                    {
                      v325 = (unint64_t)(v324 - 16);
                      *((_OWORD *)v324 - 1) = *(_OWORD *)(v315 - 16);
                      v315 -= 16;
                      v324 -= 16;
                    }
                    while ((void *)v315 != v313);
                    v314 = (unint64_t)&v322[16 * v321];
                    v315 = (unint64_t)(v323 + 16);
                    v431[0] = v325;
                    v431[1] = (unint64_t)(v323 + 16);
                    v431[2] = v314;
                    if (!v313)
                      goto LABEL_463;
                  }
                  operator delete(v313);
LABEL_463:
                  v313 = (void *)v325;
                  v431[1] = v315;
                  ++v316;
                  v312 = v410.__r_.__value_.__r.__words[0];
                  if (v316 >= (uint64_t)(v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0]) >> 3)
                  {
LABEL_467:
                    v326 = v431[0];
                    goto LABEL_469;
                  }
                }
              }
              v315 = 0;
              v326 = 0;
LABEL_469:
              v327 = 126 - 2 * __clz((uint64_t)(v315 - v326) >> 4);
              v429 = 0uLL;
              v430[0] = 0;
              if (v315 == v326)
                v328 = 0;
              else
                v328 = v327;
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>(v326, (uint64_t *)v315, (uint64_t)v422, v328, 1);
              v330 = (_QWORD *)v431[0];
              v329 = v431[1];
              if (v431[1] != v431[0])
              {
                v331 = 0;
                v332 = 0;
LABEL_476:
                v334 = (int *)v429;
                *((_QWORD *)&v429 + 1) = v429;
                v335 = v330[2 * v331];
                v336 = v332;
                v405 = v329;
                v333 = (uint64_t)(v329 - (_QWORD)v330) >> 4;
                if (v333 <= v332)
                {
LABEL_513:
                  v355 = v334;
                  if (v407 == v408)
                  {
                    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v422, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 958);
                    v376 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v422);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v376, (uint64_t)"Check failed: !selected.empty() || !tuples_with_any.empty() ", 60);
                    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v422);
                  }
                  v356 = 1;
LABEL_516:
                  v357 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v406, v401, v335);
                  v358 = *((_QWORD *)v406 + 6);
                  v359 = *(int **)(v358 + 56);
                  if (v359)
                  {
                    v360 = *(int *)(v358 + 48);
                    v361 = *v359;
                    if ((int)v360 < *v359)
                    {
                      *(_DWORD *)(v358 + 48) = v360 + 1;
                      v362 = *(_QWORD *)&v359[2 * v360 + 2];
                      if (*(_DWORD *)(v362 + 60) != 3)
                        goto LABEL_519;
LABEL_527:
                      v365 = *(_QWORD *)(v362 + 48);
                      if ((v356 & 1) == 0)
                        goto LABEL_528;
                      goto LABEL_531;
                    }
                    if (v361 == *(_DWORD *)(v358 + 52))
                    {
LABEL_525:
                      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v358 + 40), v361 + 1);
                      v359 = *(int **)(v358 + 56);
                      v361 = *v359;
                    }
                    *v359 = v361 + 1;
                    v362 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v358 + 40));
                    v366 = *(_QWORD *)(v358 + 56);
                    v367 = *(int *)(v358 + 48);
                    *(_DWORD *)(v358 + 48) = v367 + 1;
                    *(_QWORD *)(v366 + 8 * v367 + 8) = v362;
                    if (*(_DWORD *)(v362 + 60) == 3)
                      goto LABEL_527;
LABEL_519:
                    operations_research::sat::ConstraintProto::clear_constraint(v362);
                    *(_DWORD *)(v362 + 60) = 3;
                    v363 = *(_QWORD *)(v362 + 8);
                    v364 = (google::protobuf::Arena *)(v363 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v363 & 1) != 0)
                      v364 = *(google::protobuf::Arena **)v364;
                    v365 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v364);
                    *(_QWORD *)(v362 + 48) = v365;
                    if ((v356 & 1) == 0)
                    {
                      do
                      {
LABEL_528:
                        v368 = *v355;
                        v369 = *(unsigned int *)(v365 + 16);
                        if ((_DWORD)v369 == *(_DWORD *)(v365 + 20))
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v365 + 16), v369 + 1);
                        *(_DWORD *)(*(_QWORD *)(v365 + 24) + 4 * v369) = v368;
                        *(_DWORD *)(v365 + 16) = v369 + 1;
                        operations_research::sat::PresolveContext::AddImplication(v406, v368, v357);
                        ++v355;
                      }
                      while (v355 != v334);
                    }
LABEL_531:
                    v370 = (int *)v407;
                    v371 = v408;
                    if (v407 == v408)
                    {
                      v374 = *(_DWORD *)(v365 + 16);
                    }
                    else
                    {
                      v372 = *(_DWORD *)(v365 + 16);
                      do
                      {
                        v373 = *v370;
                        v374 = v372 + 1;
                        if (v372 == *(_DWORD *)(v365 + 20))
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v365 + 16), v372 + 1);
                        *(_DWORD *)(*(_QWORD *)(v365 + 24) + 4 * v372) = v373;
                        *(_DWORD *)(v365 + 16) = v374;
                        ++v370;
                        ++v372;
                      }
                      while (v370 != v371);
                    }
                    if (v374 == *(_DWORD *)(v365 + 20))
                      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v365 + 16), v374 + 1);
                    *(_DWORD *)(*(_QWORD *)(v365 + 24) + 4 * v374) = ~v357;
                    *(_DWORD *)(v365 + 16) = v374 + 1;
                    v330 = (_QWORD *)v431[0];
                    v405 = v431[1];
                    v333 = (uint64_t)(v431[1] - v431[0]) >> 4;
                    goto LABEL_475;
                  }
                  v361 = *(_DWORD *)(v358 + 52);
                  goto LABEL_525;
                }
                while (1)
                {
                  while (1)
                  {
                    if (v330[2 * v336] != v335)
                    {
LABEL_510:
                      v332 = v336;
                      v355 = (int *)v429;
                      if ((int *)v429 == v334)
                        goto LABEL_513;
                      v356 = 0;
                      if ((int *)((char *)v334 - v429) != (int *)4 || v407 != v408)
                        goto LABEL_516;
                      operations_research::sat::PresolveContext::InsertVarValueEncoding(v406, (const char *)*(unsigned int *)v429, v401, v335);
LABEL_475:
                      v331 = v332;
                      v329 = v405;
                      if (v333 <= v332)
                        goto LABEL_541;
                      goto LABEL_476;
                    }
                    v337 = (int *)&v330[2 * v336 + 1];
                    if ((unint64_t)v334 >= v430[0])
                      break;
                    *v334++ = *v337;
                    *((_QWORD *)&v429 + 1) = v334;
                    if (++v336 == v333)
                      goto LABEL_509;
                  }
                  v338 = (int *)v429;
                  v339 = (uint64_t)((uint64_t)v334 - v429) >> 2;
                  v340 = v339 + 1;
                  if ((unint64_t)(v339 + 1) >> 62)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v341 = v430[0] - v429;
                  if ((uint64_t)(v430[0] - v429) >> 1 > v340)
                    v340 = v341 >> 1;
                  if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFFCLL)
                    v342 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v342 = v340;
                  if (v342)
                  {
                    if (v342 >> 62)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v343 = operator new(4 * v342);
                    v344 = (int *)&v343[4 * v339];
                    *v344 = *v337;
                    v345 = (uint64_t)(v344 + 1);
                    if (v334 == v338)
                      goto LABEL_495;
                  }
                  else
                  {
                    v343 = 0;
                    v344 = (int *)(4 * v339);
                    *(_DWORD *)(4 * v339) = *v337;
                    v345 = 4 * v339 + 4;
                    if (v334 == v338)
                      goto LABEL_495;
                  }
                  v346 = (char *)(v334 - 1) - (char *)v338;
                  if (v346 >= 0xBC)
                  {
                    if (&v343[(char *)v334 - (char *)v338 - 4 - (v346 & 0xFFFFFFFFFFFFFFFCLL)] > &v343[(char *)v334 - (char *)v338 - 4])
                    {
                      v347 = v334;
                    }
                    else if ((int *)((char *)v334 - (v346 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v334 - 1)
                    {
                      v347 = v334;
                    }
                    else if ((unint64_t)((char *)v338 - v343) >= 0x20)
                    {
                      v349 = (v346 >> 2) + 1;
                      v350 = 4 * (v349 & 0x7FFFFFFFFFFFFFF8);
                      v347 = &v334[v350 / 0xFFFFFFFFFFFFFFFCLL];
                      v344 = (int *)((char *)v344 - v350);
                      v351 = &v343[4 * v339 - 16];
                      v352 = v334 - 4;
                      v353 = v349 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v354 = *(_OWORD *)v352;
                        *(v351 - 1) = *((_OWORD *)v352 - 1);
                        *v351 = v354;
                        v351 -= 2;
                        v352 -= 8;
                        v353 -= 8;
                      }
                      while (v353);
                      if (v349 == (v349 & 0x7FFFFFFFFFFFFFF8))
                        goto LABEL_495;
                    }
                    else
                    {
                      v347 = v334;
                    }
                  }
                  else
                  {
                    v347 = v334;
                  }
                  do
                  {
                    v348 = *--v347;
                    *--v344 = v348;
                  }
                  while (v347 != v338);
LABEL_495:
                  *(_QWORD *)&v429 = v344;
                  v430[0] = &v343[4 * v342];
                  if (v338)
                    operator delete(v338);
                  v334 = (int *)v345;
                  *((_QWORD *)&v429 + 1) = v345;
                  if (++v336 == v333)
                  {
LABEL_509:
                    LODWORD(v336) = v333;
                    goto LABEL_510;
                  }
                }
              }
              v330 = (_QWORD *)v431[1];
LABEL_541:
              if ((_QWORD)v429)
                operator delete((void *)v429);
              v232 = v395;
              if (v330)
              {
                v431[1] = (unint64_t)v330;
                operator delete(v330);
              }
            }
LABEL_348:
            if (++v232 == v387)
              goto LABEL_547;
            goto LABEL_349;
          }
        }
      }
    }
    else
    {
      v217 = *(_DWORD *)(v214 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v214 + 40), v217 + 1);
    v215 = *(int **)(v214 + 56);
    v217 = *v215;
    goto LABEL_328;
  }
  std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)&v417, v396 - v55);
  v56 = v385;
  v57 = (uint64_t)v406;
  v58 = v418 - (_BYTE *)v417;
  if (v418 != v417)
    goto LABEL_57;
LABEL_80:
  HIBYTE(v431[2]) = 12;
  strcpy((char *)v431, "table: empty");
  operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v431);
  if (SHIBYTE(v431[2]) < 0)
    operator delete((void *)v431[0]);
  HIBYTE(v431[2]) = 0;
  LOBYTE(v431[0]) = 0;
  operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v57, (uint64_t)v431);
  if (SHIBYTE(v431[2]) < 0)
    operator delete((void *)v431[0]);
LABEL_258:
  v181 = (void **)v415;
  if (v415)
  {
    v182 = v416;
    v183 = v415;
    if (v416 != v415)
    {
      do
      {
        if (*(v182 - 3))
        {
          operator delete(*(v182 - 6));
          *(v182 - 1) = 0;
          *(v182 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v182 - 5) = 0;
          *(v182 - 4) = 0;
          *(v182 - 3) = 0;
        }
        v184 = *(v182 - 2);
        if (v184)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v184);
        v182 -= 6;
      }
      while (v182 != v181);
      v183 = v415;
    }
    v416 = v181;
    operator delete(v183);
  }
  v190 = (char *)v417;
  if (v417)
  {
    v191 = v418;
    v192 = v417;
    if (v418 != v417)
    {
      v193 = v418;
      do
      {
        v195 = (void *)*((_QWORD *)v193 - 3);
        v193 -= 24;
        v194 = v195;
        if (v195)
        {
          *((_QWORD *)v191 - 2) = v194;
          operator delete(v194);
        }
        v191 = v193;
      }
      while (v193 != v190);
      v192 = v417;
    }
    v418 = v190;
    operator delete(v192);
  }
  if (v419)
    operator delete(v419);
}

void sub_22DA8B0AC()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_22DA8B0B4()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_22DA8B0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v45;
  void *v47;
  void *v48;
  void *v49;

  if (__p)
  {
    operator delete(__p);
    v47 = a21;
    if (!a21)
    {
LABEL_3:
      v48 = a44;
      if (!a44)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v47 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v47);
  v48 = a44;
  if (!a44)
  {
LABEL_4:
    v49 = *(void **)(v45 - 256);
    if (!v49)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_10:
  a45 = (uint64_t)v48;
  operator delete(v48);
  v49 = *(void **)(v45 - 256);
  if (!v49)
  {
LABEL_6:
    if (a27)
      operator delete(a27);
    std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a33);
    std::vector<std::vector<int>>::~vector[abi:ne180100](&a36);
    if (a39)
    {
      a40 = (uint64_t)a39;
      operator delete(a39);
    }
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v49);
  goto LABEL_6;
}

uint64_t operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];

  if (*operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(std::string const&)::vlocal__[0] >= 1
    && (operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(std::string const&)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(std::string const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.h", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.h", 145);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"INFEASIBLE: ", 12);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    google::LogMessage::~LogMessage((google::LogMessage *)v10);
  }
  *(_BYTE *)(a1 + 504) = 1;
  return 0;
}

void sub_22DA8B560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::`anonymous namespace'::ExpandReservoir(operations_research::sat::ConstraintProto *,operations_research::sat::PresolveContext *)::$_1::operator()(operations_research::sat::PresolveContext ***a1, int a2, int a3, int a4, const char *a5, const char *a6)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  google::protobuf::Arena *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  google::protobuf::Arena *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  google::protobuf::Arena *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  google::protobuf::Arena *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  google::protobuf::Arena *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  google::protobuf::Arena *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  google::protobuf::Arena *v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  google::protobuf::Arena *v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  google::protobuf::Arena *v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  google::protobuf::Arena *v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  google::protobuf::Arena *v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  google::protobuf::Arena *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;

  v12 = *((_QWORD *)**a1 + 6);
  v13 = *(int **)(v12 + 56);
  if (!v13)
  {
    v15 = *(_DWORD *)(v12 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v12 + 40), v15 + 1);
    v13 = *(int **)(v12 + 56);
    v15 = *v13;
LABEL_8:
    *v13 = v15 + 1;
    v16 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v12 + 40));
    v20 = *(_QWORD *)(v12 + 56);
    v21 = *(int *)(v12 + 48);
    *(_DWORD *)(v12 + 48) = v21 + 1;
    *(_QWORD *)(v20 + 8 * v21 + 8) = v16;
    v18 = *(unsigned int *)(v16 + 16);
    v17 = (unsigned int *)(v16 + 16);
    v19 = v18 + 1;
    if ((_DWORD)v18 != *(_DWORD *)(v16 + 20))
      goto LABEL_10;
    goto LABEL_9;
  }
  v14 = *(int *)(v12 + 48);
  v15 = *v13;
  if ((int)v14 >= *v13)
  {
    if (v15 != *(_DWORD *)(v12 + 52))
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_DWORD *)(v12 + 48) = v14 + 1;
  v16 = *(_QWORD *)&v13[2 * v14 + 2];
  v18 = *(unsigned int *)(v16 + 16);
  v17 = (unsigned int *)(v16 + 16);
  v19 = v18 + 1;
  if ((_DWORD)v18 == *(_DWORD *)(v16 + 20))
LABEL_9:
    google::protobuf::RepeatedField<int>::Reserve(v17, v19);
LABEL_10:
  *(_DWORD *)(*(_QWORD *)(v16 + 24) + 4 * v18) = a2;
  *(_DWORD *)(v16 + 16) = v19;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v22 = *(_QWORD *)(v16 + 48);
    v24 = *(unsigned int *)(v22 + 16);
    v23 = (unsigned int *)(v22 + 16);
    v25 = v24 + 1;
    if ((_DWORD)v24 != *(_DWORD *)(v22 + 20))
      goto LABEL_17;
LABEL_16:
    google::protobuf::RepeatedField<int>::Reserve(v23, v25);
    goto LABEL_17;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v26 = *(_QWORD *)(v16 + 8);
  v27 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
  if ((v26 & 1) != 0)
    v27 = *(google::protobuf::Arena **)v27;
  v22 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v27);
  *(_QWORD *)(v16 + 48) = v22;
  v24 = *(unsigned int *)(v22 + 16);
  v23 = (unsigned int *)(v22 + 16);
  v25 = v24 + 1;
  if ((_DWORD)v24 == *(_DWORD *)(v22 + 20))
    goto LABEL_16;
LABEL_17:
  *(_DWORD *)(*(_QWORD *)(v22 + 24) + 4 * v24) = a3;
  *(_DWORD *)(v22 + 16) = v25;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v28 = *(_QWORD *)(v16 + 48);
    v30 = *(unsigned int *)(v28 + 16);
    v29 = (unsigned int *)(v28 + 16);
    v31 = v30 + 1;
    if ((_DWORD)v30 != *(_DWORD *)(v28 + 20))
      goto LABEL_24;
LABEL_23:
    google::protobuf::RepeatedField<int>::Reserve(v29, v31);
    goto LABEL_24;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v32 = *(_QWORD *)(v16 + 8);
  v33 = (google::protobuf::Arena *)(v32 & 0xFFFFFFFFFFFFFFFELL);
  if ((v32 & 1) != 0)
    v33 = *(google::protobuf::Arena **)v33;
  v28 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v33);
  *(_QWORD *)(v16 + 48) = v28;
  v30 = *(unsigned int *)(v28 + 16);
  v29 = (unsigned int *)(v28 + 16);
  v31 = v30 + 1;
  if ((_DWORD)v30 == *(_DWORD *)(v28 + 20))
    goto LABEL_23;
LABEL_24:
  *(_DWORD *)(*(_QWORD *)(v28 + 24) + 4 * v30) = a4;
  *(_DWORD *)(v28 + 16) = v31;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v34 = *(_QWORD *)(v16 + 48);
    v36 = *(unsigned int *)(v34 + 40);
    v35 = (unsigned int *)(v34 + 40);
    v37 = v36 + 1;
    if ((_DWORD)v36 != *(_DWORD *)(v34 + 44))
      goto LABEL_31;
LABEL_30:
    google::protobuf::RepeatedField<long long>::Reserve(v35, v37);
    goto LABEL_31;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v38 = *(_QWORD *)(v16 + 8);
  v39 = (google::protobuf::Arena *)(v38 & 0xFFFFFFFFFFFFFFFELL);
  if ((v38 & 1) != 0)
    v39 = *(google::protobuf::Arena **)v39;
  v34 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v39);
  *(_QWORD *)(v16 + 48) = v34;
  v36 = *(unsigned int *)(v34 + 40);
  v35 = (unsigned int *)(v34 + 40);
  v37 = v36 + 1;
  if ((_DWORD)v36 == *(_DWORD *)(v34 + 44))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(*(_QWORD *)(v34 + 48) + 8 * v36) = -1;
  *(_DWORD *)(v34 + 40) = v37;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v40 = *(_QWORD *)(v16 + 48);
    v42 = *(unsigned int *)(v40 + 40);
    v41 = (unsigned int *)(v40 + 40);
    v43 = v42 + 1;
    if ((_DWORD)v42 != *(_DWORD *)(v40 + 44))
      goto LABEL_38;
LABEL_37:
    google::protobuf::RepeatedField<long long>::Reserve(v41, v43);
    goto LABEL_38;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v44 = *(_QWORD *)(v16 + 8);
  v45 = (google::protobuf::Arena *)(v44 & 0xFFFFFFFFFFFFFFFELL);
  if ((v44 & 1) != 0)
    v45 = *(google::protobuf::Arena **)v45;
  v40 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v45);
  *(_QWORD *)(v16 + 48) = v40;
  v42 = *(unsigned int *)(v40 + 40);
  v41 = (unsigned int *)(v40 + 40);
  v43 = v42 + 1;
  if ((_DWORD)v42 == *(_DWORD *)(v40 + 44))
    goto LABEL_37;
LABEL_38:
  *(_QWORD *)(*(_QWORD *)(v40 + 48) + 8 * v42) = 1;
  *(_DWORD *)(v40 + 40) = v43;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v46 = *(_QWORD *)(v16 + 48);
    v48 = *(unsigned int *)(v46 + 64);
    v47 = (unsigned int *)(v46 + 64);
    v49 = v48 + 1;
    if ((_DWORD)v48 != *(_DWORD *)(v46 + 68))
      goto LABEL_45;
LABEL_44:
    google::protobuf::RepeatedField<long long>::Reserve(v47, v49);
    goto LABEL_45;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v50 = *(_QWORD *)(v16 + 8);
  v51 = (google::protobuf::Arena *)(v50 & 0xFFFFFFFFFFFFFFFELL);
  if ((v50 & 1) != 0)
    v51 = *(google::protobuf::Arena **)v51;
  v46 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v51);
  *(_QWORD *)(v16 + 48) = v46;
  v48 = *(unsigned int *)(v46 + 64);
  v47 = (unsigned int *)(v46 + 64);
  v49 = v48 + 1;
  if ((_DWORD)v48 == *(_DWORD *)(v46 + 68))
    goto LABEL_44;
LABEL_45:
  *(_QWORD *)(*(_QWORD *)(v46 + 72) + 8 * v48) = 0;
  *(_DWORD *)(v46 + 64) = v49;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v52 = *(_QWORD *)(v16 + 48);
    v54 = *(unsigned int *)(v52 + 64);
    v53 = (unsigned int *)(v52 + 64);
    v55 = v54 + 1;
    if ((_DWORD)v54 != *(_DWORD *)(v52 + 68))
      goto LABEL_52;
LABEL_51:
    google::protobuf::RepeatedField<long long>::Reserve(v53, v55);
    goto LABEL_52;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v56 = *(_QWORD *)(v16 + 8);
  v57 = (google::protobuf::Arena *)(v56 & 0xFFFFFFFFFFFFFFFELL);
  if ((v56 & 1) != 0)
    v57 = *(google::protobuf::Arena **)v57;
  v52 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v57);
  *(_QWORD *)(v16 + 48) = v52;
  v54 = *(unsigned int *)(v52 + 64);
  v53 = (unsigned int *)(v52 + 64);
  v55 = v54 + 1;
  if ((_DWORD)v54 == *(_DWORD *)(v52 + 68))
    goto LABEL_51;
LABEL_52:
  *(_QWORD *)(*(_QWORD *)(v52 + 72) + 8 * v54) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(v52 + 64) = v55;
  if (operations_research::sat::PresolveContext::LiteralIsTrue(**a1, a5))
  {
    if (operations_research::sat::PresolveContext::LiteralIsTrue(**a1, a6))
      goto LABEL_54;
  }
  else
  {
    operations_research::sat::PresolveContext::AddImplication(**a1, a2, (int)a5);
    if (operations_research::sat::PresolveContext::LiteralIsTrue(**a1, a6))
    {
LABEL_54:
      v58 = *((_QWORD *)**a1 + 6);
      v59 = *(int **)(v58 + 56);
      if (v59)
        goto LABEL_55;
LABEL_63:
      v61 = *(_DWORD *)(v58 + 52);
LABEL_65:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v58 + 40), v61 + 1);
      v59 = *(int **)(v58 + 56);
      v61 = *v59;
      goto LABEL_66;
    }
  }
  operations_research::sat::PresolveContext::AddImplication(**a1, a2, (int)a6);
  v58 = *((_QWORD *)**a1 + 6);
  v59 = *(int **)(v58 + 56);
  if (!v59)
    goto LABEL_63;
LABEL_55:
  v60 = *(int *)(v58 + 48);
  v61 = *v59;
  if ((int)v60 < *v59)
  {
    *(_DWORD *)(v58 + 48) = v60 + 1;
    v62 = *(_QWORD *)&v59[2 * v60 + 2];
    if (*(_DWORD *)(v62 + 60) != 12)
      goto LABEL_57;
LABEL_67:
    v65 = *(_QWORD *)(v62 + 48);
    v67 = *(unsigned int *)(v65 + 16);
    v66 = (unsigned int *)(v65 + 16);
    v68 = v67 + 1;
    if ((_DWORD)v67 != *(_DWORD *)(v65 + 20))
      goto LABEL_69;
    goto LABEL_68;
  }
  if (v61 == *(_DWORD *)(v58 + 52))
    goto LABEL_65;
LABEL_66:
  *v59 = v61 + 1;
  v62 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v58 + 40));
  v69 = *(_QWORD *)(v58 + 56);
  v70 = *(int *)(v58 + 48);
  *(_DWORD *)(v58 + 48) = v70 + 1;
  *(_QWORD *)(v69 + 8 * v70 + 8) = v62;
  if (*(_DWORD *)(v62 + 60) == 12)
    goto LABEL_67;
LABEL_57:
  operations_research::sat::ConstraintProto::clear_constraint(v62);
  *(_DWORD *)(v62 + 60) = 12;
  v63 = *(_QWORD *)(v62 + 8);
  v64 = (google::protobuf::Arena *)(v63 & 0xFFFFFFFFFFFFFFFELL);
  if ((v63 & 1) != 0)
    v64 = *(google::protobuf::Arena **)v64;
  v65 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v64);
  *(_QWORD *)(v62 + 48) = v65;
  v67 = *(unsigned int *)(v65 + 16);
  v66 = (unsigned int *)(v65 + 16);
  v68 = v67 + 1;
  if ((_DWORD)v67 == *(_DWORD *)(v65 + 20))
LABEL_68:
    google::protobuf::RepeatedField<int>::Reserve(v66, v68);
LABEL_69:
  *(_DWORD *)(*(_QWORD *)(v65 + 24) + 4 * v67) = a3;
  *(_DWORD *)(v65 + 16) = v68;
  if (*(_DWORD *)(v62 + 60) == 12)
  {
    v71 = *(_QWORD *)(v62 + 48);
    v73 = *(unsigned int *)(v71 + 16);
    v72 = (unsigned int *)(v71 + 16);
    v74 = v73 + 1;
    if ((_DWORD)v73 != *(_DWORD *)(v71 + 20))
      goto LABEL_76;
LABEL_75:
    google::protobuf::RepeatedField<int>::Reserve(v72, v74);
    goto LABEL_76;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v62);
  *(_DWORD *)(v62 + 60) = 12;
  v75 = *(_QWORD *)(v62 + 8);
  v76 = (google::protobuf::Arena *)(v75 & 0xFFFFFFFFFFFFFFFELL);
  if ((v75 & 1) != 0)
    v76 = *(google::protobuf::Arena **)v76;
  v71 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v76);
  *(_QWORD *)(v62 + 48) = v71;
  v73 = *(unsigned int *)(v71 + 16);
  v72 = (unsigned int *)(v71 + 16);
  v74 = v73 + 1;
  if ((_DWORD)v73 == *(_DWORD *)(v71 + 20))
    goto LABEL_75;
LABEL_76:
  *(_DWORD *)(*(_QWORD *)(v71 + 24) + 4 * v73) = a4;
  *(_DWORD *)(v71 + 16) = v74;
  if (*(_DWORD *)(v62 + 60) == 12)
  {
    v77 = *(_QWORD *)(v62 + 48);
    v79 = *(unsigned int *)(v77 + 40);
    v78 = (unsigned int *)(v77 + 40);
    v80 = v79 + 1;
    if ((_DWORD)v79 != *(_DWORD *)(v77 + 44))
      goto LABEL_83;
LABEL_82:
    google::protobuf::RepeatedField<long long>::Reserve(v78, v80);
    goto LABEL_83;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v62);
  *(_DWORD *)(v62 + 60) = 12;
  v81 = *(_QWORD *)(v62 + 8);
  v82 = (google::protobuf::Arena *)(v81 & 0xFFFFFFFFFFFFFFFELL);
  if ((v81 & 1) != 0)
    v82 = *(google::protobuf::Arena **)v82;
  v77 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v82);
  *(_QWORD *)(v62 + 48) = v77;
  v79 = *(unsigned int *)(v77 + 40);
  v78 = (unsigned int *)(v77 + 40);
  v80 = v79 + 1;
  if ((_DWORD)v79 == *(_DWORD *)(v77 + 44))
    goto LABEL_82;
LABEL_83:
  *(_QWORD *)(*(_QWORD *)(v77 + 48) + 8 * v79) = -1;
  *(_DWORD *)(v77 + 40) = v80;
  if (*(_DWORD *)(v62 + 60) == 12)
  {
    v83 = *(_QWORD *)(v62 + 48);
    v85 = *(unsigned int *)(v83 + 40);
    v84 = (unsigned int *)(v83 + 40);
    v86 = v85 + 1;
    if ((_DWORD)v85 != *(_DWORD *)(v83 + 44))
      goto LABEL_90;
LABEL_89:
    google::protobuf::RepeatedField<long long>::Reserve(v84, v86);
    goto LABEL_90;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v62);
  *(_DWORD *)(v62 + 60) = 12;
  v87 = *(_QWORD *)(v62 + 8);
  v88 = (google::protobuf::Arena *)(v87 & 0xFFFFFFFFFFFFFFFELL);
  if ((v87 & 1) != 0)
    v88 = *(google::protobuf::Arena **)v88;
  v83 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v88);
  *(_QWORD *)(v62 + 48) = v83;
  v85 = *(unsigned int *)(v83 + 40);
  v84 = (unsigned int *)(v83 + 40);
  v86 = v85 + 1;
  if ((_DWORD)v85 == *(_DWORD *)(v83 + 44))
    goto LABEL_89;
LABEL_90:
  *(_QWORD *)(*(_QWORD *)(v83 + 48) + 8 * v85) = 1;
  *(_DWORD *)(v83 + 40) = v86;
  if (*(_DWORD *)(v62 + 60) == 12)
  {
    v89 = *(_QWORD *)(v62 + 48);
    v91 = *(unsigned int *)(v89 + 64);
    v90 = (unsigned int *)(v89 + 64);
    v92 = v91 + 1;
    if ((_DWORD)v91 != *(_DWORD *)(v89 + 68))
      goto LABEL_97;
LABEL_96:
    google::protobuf::RepeatedField<long long>::Reserve(v90, v92);
    goto LABEL_97;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v62);
  *(_DWORD *)(v62 + 60) = 12;
  v93 = *(_QWORD *)(v62 + 8);
  v94 = (google::protobuf::Arena *)(v93 & 0xFFFFFFFFFFFFFFFELL);
  if ((v93 & 1) != 0)
    v94 = *(google::protobuf::Arena **)v94;
  v89 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v94);
  *(_QWORD *)(v62 + 48) = v89;
  v91 = *(unsigned int *)(v89 + 64);
  v90 = (unsigned int *)(v89 + 64);
  v92 = v91 + 1;
  if ((_DWORD)v91 == *(_DWORD *)(v89 + 68))
    goto LABEL_96;
LABEL_97:
  *(_QWORD *)(*(_QWORD *)(v89 + 72) + 8 * v91) = 0x8000000000000000;
  *(_DWORD *)(v89 + 64) = v92;
  if (*(_DWORD *)(v62 + 60) == 12)
  {
    v95 = *(_QWORD *)(v62 + 48);
    v97 = *(unsigned int *)(v95 + 64);
    v96 = (unsigned int *)(v95 + 64);
    v98 = v97 + 1;
    if ((_DWORD)v97 != *(_DWORD *)(v95 + 68))
      goto LABEL_104;
LABEL_103:
    google::protobuf::RepeatedField<long long>::Reserve(v96, v98);
    goto LABEL_104;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v62);
  *(_DWORD *)(v62 + 60) = 12;
  v99 = *(_QWORD *)(v62 + 8);
  v100 = (google::protobuf::Arena *)(v99 & 0xFFFFFFFFFFFFFFFELL);
  if ((v99 & 1) != 0)
    v100 = *(google::protobuf::Arena **)v100;
  v95 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v100);
  *(_QWORD *)(v62 + 48) = v95;
  v97 = *(unsigned int *)(v95 + 64);
  v96 = (unsigned int *)(v95 + 64);
  v98 = v97 + 1;
  if ((_DWORD)v97 == *(_DWORD *)(v95 + 68))
    goto LABEL_103;
LABEL_104:
  *(_QWORD *)(*(_QWORD *)(v95 + 72) + 8 * v97) = -1;
  *(_DWORD *)(v95 + 64) = v98;
  v101 = *(unsigned int *)(v62 + 16);
  v102 = v101 + 1;
  if ((_DWORD)v101 == *(_DWORD *)(v62 + 20))
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v62 + 16), v101 + 1);
  v103 = *(_QWORD *)(v62 + 24);
  *(_DWORD *)(v103 + 4 * v101) = ~a2;
  *(_DWORD *)(v62 + 16) = v102;
  v104 = v101 + 2;
  if (v102 == *(_DWORD *)(v62 + 20))
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v62 + 16), v101 + 2);
    v103 = *(_QWORD *)(v62 + 24);
  }
  *(_DWORD *)(v103 + 4 * v102) = (_DWORD)a5;
  *(_DWORD *)(v62 + 16) = v104;
  if (v104 == *(_DWORD *)(v62 + 20))
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v62 + 16), v101 + 3);
    v103 = *(_QWORD *)(v62 + 24);
  }
  *(_DWORD *)(v103 + 4 * v104) = (_DWORD)a6;
  *(_DWORD *)(v62 + 16) = v101 + 3;
}

unint64_t operations_research::sat::CpModelProto::add_constraints(operations_research::sat::CpModelProto *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = (int *)*((_QWORD *)this + 7);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 13);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 7);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 12);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 12) = v3 + 1;
    return *(_QWORD *)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 13))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)this
                                                                                                  + 5));
  v6 = *((_QWORD *)this + 7);
  v7 = *((int *)this + 12);
  *((_DWORD *)this + 12) = v7 + 1;
  *(_QWORD *)(v6 + 8 * v7 + 8) = result;
  return result;
}

_DWORD *gtl::FindOrDieNoPrint<absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,int,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE v21[16];

  v2 = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v10 = a1[3];
  v11 = 0x101010101010101 * (v6 & 0x7F);
  while (1)
  {
    v12 = v9 & v10;
    v13 = *(_QWORD *)(v7 + v12);
    v14 = ((v13 ^ v11) - 0x101010101010101) & ~(v13 ^ v11) & 0x8080808080808080;
    if (v14)
      break;
LABEL_8:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
      goto LABEL_12;
    v2 += 8;
    v9 = v2 + v12;
  }
  while (1)
  {
    v15 = (v12 + (__clz(__rbit64(v14)) >> 3)) & v10;
    v16 = (_DWORD *)(v8 + 12 * v15);
    if (*v16 == (_DWORD)v3 && v16[1] == (_DWORD)v4)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_8;
  }
  if (v15 == v10)
  {
LABEL_12:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 200);
    v19 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v21);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Map key not found", 17);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v21);
  }
  return v16 + 2;
}

void sub_22DA8BFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,int,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::find_or_prepare_insert<std::pair<int,int>>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;

  v2 = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  while (1)
  {
    v9 = v7 & v8;
    v10 = *(_QWORD *)(*a1 + (v7 & v8));
    v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11)
      break;
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::prepare_insert(a1, v6);
    v2 += 8;
    v7 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    v13 = (int *)(a1[1] + 12 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v15 == (_DWORD)v3 && v14 == (_DWORD)v4)
      return v12;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_8;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 12 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v27 = a1[4];
    if (!v27)
      return;
LABEL_21:
    *((_QWORD *)v27 + 4) = v14 >> 3;
    *((_QWORD *)v27 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v20 = &v5[12 * (_QWORD)v13];
      v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(unsigned int *)v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)v20)))
          + *((unsigned int *)v20 + 1);
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = *a1;
      v24 = a1[3];
      v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      v26 = *(_QWORD *)&(*a1)[v25] & (~*(_QWORD *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v25 = (v15 + v25) & (unint64_t)v24;
          v26 = *(_QWORD *)&v23[v25] & (~*(_QWORD *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = *(_QWORD *)v20;
      v19 = (uint64_t)&a1[1][12 * v16];
      *(_DWORD *)(v19 + 8) = *((_DWORD *)v20 + 2);
      *(_QWORD *)v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v27 = a1[4];
  if (v27)
    goto LABEL_21;
}

void operations_research::sat::`anonymous namespace'::ExpandIntProdWithBoolean(operations_research::sat::_anonymous_namespace_ *this, int a2, int a3, uint64_t a4, operations_research::sat::PresolveContext *a5)
{
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  google::protobuf::Arena *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  google::protobuf::Arena *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  google::protobuf::Arena *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  google::protobuf::Arena *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  google::protobuf::Arena *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  google::protobuf::Arena *v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  unsigned int *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  google::protobuf::Arena *v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  google::protobuf::Arena *v77;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  google::protobuf::Arena *v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  google::protobuf::Arena *v89;

  v8 = (int)this;
  v9 = *(_QWORD *)(a4 + 48);
  v10 = *(int **)(v9 + 56);
  if (!v10)
  {
    v12 = *(_DWORD *)(v9 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v9 + 40), v12 + 1);
    v10 = *(int **)(v9 + 56);
    v12 = *v10;
LABEL_8:
    *v10 = v12 + 1;
    v13 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v9 + 40));
    v17 = *(_QWORD *)(v9 + 56);
    v18 = *(int *)(v9 + 48);
    *(_DWORD *)(v9 + 48) = v18 + 1;
    *(_QWORD *)(v17 + 8 * v18 + 8) = v13;
    v15 = *(unsigned int *)(v13 + 16);
    v14 = (unsigned int *)(v13 + 16);
    v16 = v15 + 1;
    if ((_DWORD)v15 != *(_DWORD *)(v13 + 20))
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = *(int *)(v9 + 48);
  v12 = *v10;
  if ((int)v11 >= *v10)
  {
    if (v12 != *(_DWORD *)(v9 + 52))
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_DWORD *)(v9 + 48) = v11 + 1;
  v13 = *(_QWORD *)&v10[2 * v11 + 2];
  v15 = *(unsigned int *)(v13 + 16);
  v14 = (unsigned int *)(v13 + 16);
  v16 = v15 + 1;
  if ((_DWORD)v15 == *(_DWORD *)(v13 + 20))
LABEL_9:
    google::protobuf::RepeatedField<int>::Reserve(v14, v16);
LABEL_10:
  *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v15) = v8;
  *(_DWORD *)(v13 + 16) = v16;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    v19 = *(_QWORD *)(v13 + 48);
    v21 = *(unsigned int *)(v19 + 16);
    v20 = (unsigned int *)(v19 + 16);
    v22 = v21 + 1;
    if ((_DWORD)v21 != *(_DWORD *)(v19 + 20))
      goto LABEL_17;
LABEL_16:
    google::protobuf::RepeatedField<int>::Reserve(v20, v22);
    goto LABEL_17;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 60) = 12;
  v23 = *(_QWORD *)(v13 + 8);
  v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
  if ((v23 & 1) != 0)
    v24 = *(google::protobuf::Arena **)v24;
  v19 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v24);
  *(_QWORD *)(v13 + 48) = v19;
  v21 = *(unsigned int *)(v19 + 16);
  v20 = (unsigned int *)(v19 + 16);
  v22 = v21 + 1;
  if ((_DWORD)v21 == *(_DWORD *)(v19 + 20))
    goto LABEL_16;
LABEL_17:
  *(_DWORD *)(*(_QWORD *)(v19 + 24) + 4 * v21) = a2;
  *(_DWORD *)(v19 + 16) = v22;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    v25 = *(_QWORD *)(v13 + 48);
    v27 = *(unsigned int *)(v25 + 40);
    v26 = (unsigned int *)(v25 + 40);
    v28 = v27 + 1;
    if ((_DWORD)v27 != *(_DWORD *)(v25 + 44))
      goto LABEL_24;
LABEL_23:
    google::protobuf::RepeatedField<long long>::Reserve(v26, v28);
    goto LABEL_24;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 60) = 12;
  v29 = *(_QWORD *)(v13 + 8);
  v30 = (google::protobuf::Arena *)(v29 & 0xFFFFFFFFFFFFFFFELL);
  if ((v29 & 1) != 0)
    v30 = *(google::protobuf::Arena **)v30;
  v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v30);
  *(_QWORD *)(v13 + 48) = v25;
  v27 = *(unsigned int *)(v25 + 40);
  v26 = (unsigned int *)(v25 + 40);
  v28 = v27 + 1;
  if ((_DWORD)v27 == *(_DWORD *)(v25 + 44))
    goto LABEL_23;
LABEL_24:
  *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v27) = 1;
  *(_DWORD *)(v25 + 40) = v28;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    v31 = *(_QWORD *)(v13 + 48);
    v33 = *(unsigned int *)(v31 + 16);
    v32 = (unsigned int *)(v31 + 16);
    v34 = v33 + 1;
    if ((_DWORD)v33 != *(_DWORD *)(v31 + 20))
      goto LABEL_31;
LABEL_30:
    google::protobuf::RepeatedField<int>::Reserve(v32, v34);
    goto LABEL_31;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 60) = 12;
  v35 = *(_QWORD *)(v13 + 8);
  v36 = (google::protobuf::Arena *)(v35 & 0xFFFFFFFFFFFFFFFELL);
  if ((v35 & 1) != 0)
    v36 = *(google::protobuf::Arena **)v36;
  v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v36);
  *(_QWORD *)(v13 + 48) = v31;
  v33 = *(unsigned int *)(v31 + 16);
  v32 = (unsigned int *)(v31 + 16);
  v34 = v33 + 1;
  if ((_DWORD)v33 == *(_DWORD *)(v31 + 20))
    goto LABEL_30;
LABEL_31:
  *(_DWORD *)(*(_QWORD *)(v31 + 24) + 4 * v33) = a3;
  *(_DWORD *)(v31 + 16) = v34;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    v37 = *(_QWORD *)(v13 + 48);
    v39 = *(unsigned int *)(v37 + 40);
    v38 = (unsigned int *)(v37 + 40);
    v40 = v39 + 1;
    if ((_DWORD)v39 != *(_DWORD *)(v37 + 44))
      goto LABEL_38;
LABEL_37:
    google::protobuf::RepeatedField<long long>::Reserve(v38, v40);
    goto LABEL_38;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 60) = 12;
  v41 = *(_QWORD *)(v13 + 8);
  v42 = (google::protobuf::Arena *)(v41 & 0xFFFFFFFFFFFFFFFELL);
  if ((v41 & 1) != 0)
    v42 = *(google::protobuf::Arena **)v42;
  v37 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v42);
  *(_QWORD *)(v13 + 48) = v37;
  v39 = *(unsigned int *)(v37 + 40);
  v38 = (unsigned int *)(v37 + 40);
  v40 = v39 + 1;
  if ((_DWORD)v39 == *(_DWORD *)(v37 + 44))
    goto LABEL_37;
LABEL_38:
  *(_QWORD *)(*(_QWORD *)(v37 + 48) + 8 * v39) = -1;
  *(_DWORD *)(v37 + 40) = v40;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    v43 = *(_QWORD *)(v13 + 48);
    v45 = *(unsigned int *)(v43 + 64);
    v44 = (unsigned int *)(v43 + 64);
    v46 = v45 + 1;
    if ((_DWORD)v45 != *(_DWORD *)(v43 + 68))
      goto LABEL_45;
LABEL_44:
    google::protobuf::RepeatedField<long long>::Reserve(v44, v46);
    goto LABEL_45;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 60) = 12;
  v47 = *(_QWORD *)(v13 + 8);
  v48 = (google::protobuf::Arena *)(v47 & 0xFFFFFFFFFFFFFFFELL);
  if ((v47 & 1) != 0)
    v48 = *(google::protobuf::Arena **)v48;
  v43 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v48);
  *(_QWORD *)(v13 + 48) = v43;
  v45 = *(unsigned int *)(v43 + 64);
  v44 = (unsigned int *)(v43 + 64);
  v46 = v45 + 1;
  if ((_DWORD)v45 == *(_DWORD *)(v43 + 68))
    goto LABEL_44;
LABEL_45:
  *(_QWORD *)(*(_QWORD *)(v43 + 72) + 8 * v45) = 0;
  *(_DWORD *)(v43 + 64) = v46;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    v49 = *(_QWORD *)(v13 + 48);
    v51 = *(unsigned int *)(v49 + 64);
    v50 = (unsigned int *)(v49 + 64);
    v52 = v51 + 1;
    if ((_DWORD)v51 != *(_DWORD *)(v49 + 68))
      goto LABEL_52;
LABEL_51:
    google::protobuf::RepeatedField<long long>::Reserve(v50, v52);
    goto LABEL_52;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 60) = 12;
  v53 = *(_QWORD *)(v13 + 8);
  v54 = (google::protobuf::Arena *)(v53 & 0xFFFFFFFFFFFFFFFELL);
  if ((v53 & 1) != 0)
    v54 = *(google::protobuf::Arena **)v54;
  v49 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v54);
  *(_QWORD *)(v13 + 48) = v49;
  v51 = *(unsigned int *)(v49 + 64);
  v50 = (unsigned int *)(v49 + 64);
  v52 = v51 + 1;
  if ((_DWORD)v51 == *(_DWORD *)(v49 + 68))
    goto LABEL_51;
LABEL_52:
  *(_QWORD *)(*(_QWORD *)(v49 + 72) + 8 * v51) = 0;
  *(_DWORD *)(v49 + 64) = v52;
  v55 = *(_QWORD *)(a4 + 48);
  v56 = *(int **)(v55 + 56);
  if (!v56)
  {
    v58 = *(_DWORD *)(v55 + 52);
LABEL_58:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v55 + 40), v58 + 1);
    v56 = *(int **)(v55 + 56);
    v58 = *v56;
LABEL_59:
    *v56 = v58 + 1;
    v59 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v55 + 40));
    v64 = *(_QWORD *)(v55 + 56);
    v65 = *(int *)(v55 + 48);
    *(_DWORD *)(v55 + 48) = v65 + 1;
    *(_QWORD *)(v64 + 8 * v65 + 8) = v59;
    v60 = ~v8;
    v62 = *(unsigned int *)(v59 + 16);
    v61 = (unsigned int *)(v59 + 16);
    v63 = v62 + 1;
    if ((_DWORD)v62 != *(_DWORD *)(v59 + 20))
      goto LABEL_61;
    goto LABEL_60;
  }
  v57 = *(int *)(v55 + 48);
  v58 = *v56;
  if ((int)v57 >= *v56)
  {
    if (v58 != *(_DWORD *)(v55 + 52))
      goto LABEL_59;
    goto LABEL_58;
  }
  *(_DWORD *)(v55 + 48) = v57 + 1;
  v59 = *(_QWORD *)&v56[2 * v57 + 2];
  v60 = ~v8;
  v62 = *(unsigned int *)(v59 + 16);
  v61 = (unsigned int *)(v59 + 16);
  v63 = v62 + 1;
  if ((_DWORD)v62 == *(_DWORD *)(v59 + 20))
LABEL_60:
    google::protobuf::RepeatedField<int>::Reserve(v61, v63);
LABEL_61:
  *(_DWORD *)(*(_QWORD *)(v59 + 24) + 4 * v62) = v60;
  *(_DWORD *)(v59 + 16) = v63;
  if (*(_DWORD *)(v59 + 60) == 12)
  {
    v66 = *(_QWORD *)(v59 + 48);
    v68 = *(unsigned int *)(v66 + 16);
    v67 = (unsigned int *)(v66 + 16);
    v69 = v68 + 1;
    if ((_DWORD)v68 != *(_DWORD *)(v66 + 20))
      goto LABEL_68;
LABEL_67:
    google::protobuf::RepeatedField<int>::Reserve(v67, v69);
    goto LABEL_68;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v59);
  *(_DWORD *)(v59 + 60) = 12;
  v70 = *(_QWORD *)(v59 + 8);
  v71 = (google::protobuf::Arena *)(v70 & 0xFFFFFFFFFFFFFFFELL);
  if ((v70 & 1) != 0)
    v71 = *(google::protobuf::Arena **)v71;
  v66 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v71);
  *(_QWORD *)(v59 + 48) = v66;
  v68 = *(unsigned int *)(v66 + 16);
  v67 = (unsigned int *)(v66 + 16);
  v69 = v68 + 1;
  if ((_DWORD)v68 == *(_DWORD *)(v66 + 20))
    goto LABEL_67;
LABEL_68:
  *(_DWORD *)(*(_QWORD *)(v66 + 24) + 4 * v68) = a3;
  *(_DWORD *)(v66 + 16) = v69;
  if (*(_DWORD *)(v59 + 60) == 12)
  {
    v72 = *(_QWORD *)(v59 + 48);
    v74 = *(unsigned int *)(v72 + 40);
    v73 = (unsigned int *)(v72 + 40);
    v75 = v74 + 1;
    if ((_DWORD)v74 != *(_DWORD *)(v72 + 44))
      goto LABEL_75;
LABEL_74:
    google::protobuf::RepeatedField<long long>::Reserve(v73, v75);
    goto LABEL_75;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v59);
  *(_DWORD *)(v59 + 60) = 12;
  v76 = *(_QWORD *)(v59 + 8);
  v77 = (google::protobuf::Arena *)(v76 & 0xFFFFFFFFFFFFFFFELL);
  if ((v76 & 1) != 0)
    v77 = *(google::protobuf::Arena **)v77;
  v72 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v77);
  *(_QWORD *)(v59 + 48) = v72;
  v74 = *(unsigned int *)(v72 + 40);
  v73 = (unsigned int *)(v72 + 40);
  v75 = v74 + 1;
  if ((_DWORD)v74 == *(_DWORD *)(v72 + 44))
    goto LABEL_74;
LABEL_75:
  *(_QWORD *)(*(_QWORD *)(v72 + 48) + 8 * v74) = 1;
  *(_DWORD *)(v72 + 40) = v75;
  if (*(_DWORD *)(v59 + 60) == 12)
  {
    v78 = *(_QWORD *)(v59 + 48);
    v80 = *(unsigned int *)(v78 + 64);
    v79 = (unsigned int *)(v78 + 64);
    v81 = v80 + 1;
    if ((_DWORD)v80 != *(_DWORD *)(v78 + 68))
      goto LABEL_82;
LABEL_81:
    google::protobuf::RepeatedField<long long>::Reserve(v79, v81);
    goto LABEL_82;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v59);
  *(_DWORD *)(v59 + 60) = 12;
  v82 = *(_QWORD *)(v59 + 8);
  v83 = (google::protobuf::Arena *)(v82 & 0xFFFFFFFFFFFFFFFELL);
  if ((v82 & 1) != 0)
    v83 = *(google::protobuf::Arena **)v83;
  v78 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v83);
  *(_QWORD *)(v59 + 48) = v78;
  v80 = *(unsigned int *)(v78 + 64);
  v79 = (unsigned int *)(v78 + 64);
  v81 = v80 + 1;
  if ((_DWORD)v80 == *(_DWORD *)(v78 + 68))
    goto LABEL_81;
LABEL_82:
  *(_QWORD *)(*(_QWORD *)(v78 + 72) + 8 * v80) = 0;
  *(_DWORD *)(v78 + 64) = v81;
  if (*(_DWORD *)(v59 + 60) == 12)
  {
    v84 = *(_QWORD *)(v59 + 48);
    v86 = *(unsigned int *)(v84 + 64);
    v85 = (unsigned int *)(v84 + 64);
    v87 = v86 + 1;
    if ((_DWORD)v86 != *(_DWORD *)(v84 + 68))
      goto LABEL_89;
    goto LABEL_88;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v59);
  *(_DWORD *)(v59 + 60) = 12;
  v88 = *(_QWORD *)(v59 + 8);
  v89 = (google::protobuf::Arena *)(v88 & 0xFFFFFFFFFFFFFFFELL);
  if ((v88 & 1) != 0)
    v89 = *(google::protobuf::Arena **)v89;
  v84 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v89);
  *(_QWORD *)(v59 + 48) = v84;
  v86 = *(unsigned int *)(v84 + 64);
  v85 = (unsigned int *)(v84 + 64);
  v87 = v86 + 1;
  if ((_DWORD)v86 == *(_DWORD *)(v84 + 68))
LABEL_88:
    google::protobuf::RepeatedField<long long>::Reserve(v85, v87);
LABEL_89:
  *(_QWORD *)(*(_QWORD *)(v84 + 72) + 8 * v86) = 0;
  *(_DWORD *)(v84 + 64) = v87;
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  _BYTE v16[16];

  v2 = 0;
  v3 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v4 = *a1;
  v5 = a1[1];
  v6 = (v3 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  v8 = 0x101010101010101 * (v3 & 0x7F);
  while (1)
  {
    v9 = v6 & v7;
    v10 = *(_QWORD *)(v4 + v9);
    v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11)
      break;
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v2 += 8;
    v6 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_QWORD *)(v5 + 16 * v12) == *a2)
      break;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_5;
  }
  if (v12 == v7)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v16, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v16);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v16);
  }
  return v5 + 16 * v12 + 8;
}

void sub_22DA8CCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::BoolArgumentProto *,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  _BYTE v16[16];

  v2 = 0;
  v3 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v4 = *a1;
  v5 = a1[1];
  v6 = (v3 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  v8 = 0x101010101010101 * (v3 & 0x7F);
  while (1)
  {
    v9 = v6 & v7;
    v10 = *(_QWORD *)(v4 + v9);
    v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11)
      break;
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v2 += 8;
    v6 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_QWORD *)(v5 + 16 * v12) == *a2)
      break;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_5;
  }
  if (v12 == v7)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v16, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v16);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v16);
  }
  return v5 + 16 * v12 + 8;
}

void sub_22DA8CE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::BoolArgumentProto *,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t operations_research::sat::`anonymous namespace'::ExpandInverse(operations_research::sat::ConstraintProto *,operations_research::sat::PresolveContext *)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  operations_research::sat::PresolveContext *v36;
  const char *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  int64_t v41;
  char *v42;
  char v43;
  _QWORD *v45;
  _QWORD *v47;
  _QWORD *v49;
  int v50;
  void *v51;
  void *v52;
  char *v53;
  unint64_t v54;
  void *__p;
  unint64_t v56;
  void *v57;

  if (*(int *)(a1 + 8) < 1)
    return 1;
  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = 0;
  while (1)
  {
    *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) = **(_QWORD **)(v5 + 16);
    operations_research::sat::PresolveContext::DomainOf(*(operations_research::sat::PresolveContext **)v5, (const char *)*(unsigned int *)(*(_QWORD *)(v4 + 8) + 4 * v6), &v56);
    v7 = (v56 & 1) != 0 ? v57 : &v57;
    if (v56 >= 2)
      break;
LABEL_51:
    if ((v56 & 1) != 0)
      operator delete(v57);
    if (++v6 >= *(int *)(v5 + 8))
      return 1;
  }
  v8 = 0;
  v47 = &v7[2 * (v56 >> 1)];
  do
  {
    v9 = *v7;
    v49 = v7;
    if (*v7 <= v7[1])
    {
      while (1)
      {
        while (1)
        {
          operations_research::sat::PresolveContext::DomainOf(*(operations_research::sat::PresolveContext **)v5, (const char *)*(unsigned int *)(*(_QWORD *)(v3 + 8) + 4 * (int)v9), &v54);
          v11 = operations_research::Domain::Contains((operations_research::Domain *)&v54, v6);
          if ((v54 & 1) != 0)
            operator delete(__p);
          if (v11)
            break;
          v8 = 1;
          v10 = v9++ < v7[1];
          if (!v10)
            goto LABEL_9;
        }
        v12 = *(_QWORD *)(v5 + 16);
        v14 = *(char **)(v12 + 8);
        v13 = *(_QWORD *)(v12 + 16);
        if ((unint64_t)v14 >= v13)
          break;
        *(_QWORD *)v14 = v9;
        v15 = (uint64_t)(v14 + 8);
LABEL_40:
        *(_QWORD *)(v12 + 8) = v15;
        v10 = v9++ < v7[1];
        if (!v10)
          goto LABEL_9;
      }
      v50 = v8;
      v16 = v5;
      v17 = v6;
      v18 = *(char **)v12;
      v19 = (uint64_t)&v14[-*(_QWORD *)v12];
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v22 = v13 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v24 = operator new(8 * v23);
        v25 = &v24[8 * v20];
        *v25 = v9;
        v15 = (uint64_t)(v25 + 1);
        if (v14 != v18)
          goto LABEL_28;
      }
      else
      {
        v24 = 0;
        v25 = (_QWORD *)(8 * v20);
        *(_QWORD *)(8 * v20) = v9;
        v15 = 8 * v20 + 8;
        if (v14 != v18)
        {
LABEL_28:
          v26 = v14 - 8 - v18;
          if (v26 >= 0x58)
          {
            v27 = v14 - &v24[v19];
            v6 = v17;
            v5 = v16;
            if (v27 >= 0x20)
            {
              v28 = (v26 >> 3) + 1;
              v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
              v30 = &v14[-v29];
              v25 = (_QWORD *)((char *)v25 - v29);
              v31 = &v24[8 * v20 - 16];
              v32 = v14 - 16;
              v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v34 = *(_OWORD *)v32;
                *(v31 - 1) = *((_OWORD *)v32 - 1);
                *v31 = v34;
                v31 -= 2;
                v32 -= 32;
                v33 -= 4;
              }
              while (v33);
              v14 = v30;
              if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_37;
            }
          }
          else
          {
            v6 = v17;
            v5 = v16;
          }
          do
          {
            v35 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v25 = v35;
          }
          while (v14 != v18);
LABEL_37:
          *(_QWORD *)v12 = v25;
          *(_QWORD *)(v12 + 8) = v15;
          *(_QWORD *)(v12 + 16) = &v24[8 * v23];
          if (v18)
            operator delete(v18);
          v3 = a3;
          v7 = v49;
          v8 = v50;
          goto LABEL_40;
        }
      }
      v6 = v17;
      v5 = v16;
      goto LABEL_37;
    }
LABEL_9:
    v7 += 2;
  }
  while (v7 != v47);
  v4 = a2;
  if ((v8 & 1) == 0)
    goto LABEL_51;
  v36 = *(operations_research::sat::PresolveContext **)v5;
  v37 = (const char *)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * v6);
  v38 = *(_QWORD *)(v5 + 16);
  v52 = 0;
  v53 = 0;
  v51 = 0;
  v40 = *(_BYTE **)v38;
  v39 = *(_BYTE **)(v38 + 8);
  v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v51 = operator new(v39 - v40);
    v52 = v51;
    v42 = (char *)v51 + 8 * (v41 >> 3);
    v53 = v42;
    memcpy(v51, v40, v41);
    v52 = v42;
  }
  operations_research::Domain::FromValues((int64_t **)&v51, &v54);
  v43 = operations_research::sat::PresolveContext::IntersectDomainWith(v36, v37, (const operations_research::Domain *)&v54, 0);
  if ((v54 & 1) != 0)
    operator delete(__p);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if ((v43 & 1) != 0)
    goto LABEL_51;
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v54, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 391);
    v45 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Empty domain for a variable in ExpandInverse()", 46);
    google::LogMessage::~LogMessage((google::LogMessage *)&v54);
  }
  if ((v56 & 1) != 0)
    operator delete(v57);
  return 0;
}

void sub_22DA8D66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *__p)
{
  if ((a22 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(48 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[48 * a2];
    a1[2] = v5;
    do
    {
      *(_QWORD *)v4 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *((_QWORD *)v4 + 5) = 0;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_22DA8D79C(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;
  _QWORD *v6;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*(v4 - 3))
        {
          operator delete(*(v4 - 6));
          *(v4 - 1) = 0;
          *(v4 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v4 - 5) = 0;
          *(v4 - 4) = 0;
          *(v4 - 3) = 0;
        }
        v6 = *(v4 - 2);
        if (v6)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
        v4 -= 6;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::LinkLiteralsAndValues(uint64_t *a1, uint64_t *a2, uint64_t *a3, operations_research::sat::PresolveContext *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  int v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t **v46;
  _QWORD *v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t **v52;
  BOOL v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  google::protobuf::Arena *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int *i;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v74[2];
  uint64_t **v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;

  v75 = (uint64_t **)((a1[1] - *a1) >> 2);
  v7 = *a2;
  v6 = a2[1];
  v78 = (v6 - *a2) >> 3;
  if (v75 != (uint64_t **)v78)
  {
    v74[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)&v75, (int)&v78, "value_literals.size() == values.size()");
    if (v74[0])
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v75, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 630, v74);
      google::LogMessage::stream((google::LogMessage *)&v75);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v75);
    }
    v7 = *a2;
    v6 = a2[1];
  }
  v76 = 0;
  v77 = 0;
  v75 = &v76;
  if (v6 == v7)
    goto LABEL_76;
  v8 = 0;
  v71 = a2;
  do
  {
    v9 = 0;
    v78 = 0;
    v10 = *(_QWORD *)(v7 + 8 * v8);
    v78 = v10;
    v11 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v10)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v10));
    v12 = (v11 >> 7) ^ ((unint64_t)*a3 >> 12);
    v13 = a3[3];
    v14 = 0x101010101010101 * (v11 & 0x7F);
    while (1)
    {
      v15 = v12 & v13;
      v16 = *(_QWORD *)(*a3 + v15);
      v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
      if (v17)
        break;
LABEL_8:
      if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
        goto LABEL_45;
      v9 += 8;
      v12 = v9 + v15;
    }
    while (1)
    {
      v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v13;
      if (*(_QWORD *)(a3[1] + 16 * v18) == v10)
        break;
      v17 &= v17 - 1;
      if (!v17)
        goto LABEL_8;
    }
    if (v18 == v13)
    {
LABEL_45:
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v74, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 641);
      v47 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Check failed: target_encoding.contains(v) ", 42);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v74);
    }
    v19 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>>(a3, &v78);
    v20 = v76;
    v21 = &v76;
LABEL_13:
    v22 = v21;
    if (v20)
    {
      while (1)
      {
        v21 = (uint64_t **)v20;
        v23 = *((_DWORD *)v20 + 8);
        if (v19 < v23)
        {
          v20 = *v21;
          goto LABEL_13;
        }
        if (v23 >= v19)
          break;
        v20 = v21[1];
        if (!v20)
        {
          v22 = v21 + 1;
          goto LABEL_18;
        }
      }
      v24 = v21;
      v26 = *a1;
      v28 = (char *)v24[6];
      v27 = v24[7];
      if ((unint64_t)v28 < v27)
      {
LABEL_21:
        *(_DWORD *)v28 = *(_DWORD *)(v26 + 4 * v8);
        v29 = (uint64_t)(v28 + 4);
        goto LABEL_42;
      }
    }
    else
    {
LABEL_18:
      v24 = operator new(0x40uLL);
      *((_DWORD *)v24 + 8) = v19;
      v24[6] = 0;
      v24[7] = 0;
      v24[5] = 0;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = v21;
      *v22 = v24;
      v25 = v24;
      if (*v75)
      {
        v75 = (uint64_t **)*v75;
        v25 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v76, v25);
      ++v77;
      v26 = *a1;
      v28 = (char *)v24[6];
      v27 = v24[7];
      if ((unint64_t)v28 < v27)
        goto LABEL_21;
    }
    v30 = (char *)v24[5];
    v31 = (v28 - v30) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v33 = v27 - (_QWORD)v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v35 = operator new(4 * v34);
      v36 = &v35[4 * v31];
      *v36 = *(_DWORD *)(v26 + 4 * v8);
      v29 = (uint64_t)(v36 + 1);
      if (v28 == v30)
        goto LABEL_40;
LABEL_34:
      v37 = v28 - 4 - v30;
      if (v37 < 0x2C)
        goto LABEL_84;
      if ((unint64_t)(v30 - v35) < 0x20)
        goto LABEL_84;
      v38 = (v37 >> 2) + 1;
      v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      v40 = &v28[-v39];
      v36 = (_DWORD *)((char *)v36 - v39);
      v41 = &v35[4 * v31 - 16];
      v42 = v28 - 16;
      v43 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 8;
      }
      while (v43);
      v28 = v40;
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_84:
        do
        {
          v45 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *--v36 = v45;
        }
        while (v28 != v30);
      }
      goto LABEL_40;
    }
    v35 = 0;
    v36 = (_DWORD *)(4 * v31);
    *(_DWORD *)(4 * v31) = *(_DWORD *)(v26 + 4 * v8);
    v29 = 4 * v31 + 4;
    if (v28 != v30)
      goto LABEL_34;
LABEL_40:
    v24[5] = v36;
    v24[6] = v29;
    v24[7] = &v35[4 * v34];
    if (v30)
      operator delete(v30);
LABEL_42:
    v24[6] = v29;
    ++v8;
    v7 = *v71;
  }
  while (v8 < (v71[1] - *v71) >> 3);
  v46 = v75;
  if (v75 != &v76)
  {
    while (1)
    {
      v48 = *((_DWORD *)v46 + 8);
      v49 = (char *)v46[5];
      v50 = ((char *)v46[6] - v49) >> 2;
      if (v50 != 1)
        break;
      operations_research::sat::PresolveContext::StoreBooleanEqualityRelation((uint64_t)a4, (const char *)*((unsigned int *)v46 + 8), (const char *)*(unsigned int *)v49);
LABEL_52:
      v51 = v46[1];
      if (v51)
      {
        do
        {
          v52 = (uint64_t **)v51;
          v51 = (uint64_t *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (uint64_t **)v46[2];
          v53 = *v52 == (uint64_t *)v46;
          v46 = v52;
        }
        while (!v53);
      }
      v46 = v52;
      if (v52 == &v76)
        goto LABEL_76;
    }
    if (!v50)
    {
      if ((operations_research::sat::PresolveContext::SetLiteralToFalse(a4, *((_DWORD *)v46 + 8)) & 1) == 0)
        goto LABEL_76;
      goto LABEL_52;
    }
    v54 = *((_QWORD *)a4 + 6);
    v55 = *(int **)(v54 + 56);
    if (v55)
    {
      v56 = *(int *)(v54 + 48);
      v57 = *v55;
      if ((int)v56 < *v55)
      {
        *(_DWORD *)(v54 + 48) = v56 + 1;
        v58 = *(_QWORD *)&v55[2 * v56 + 2];
        if (*(_DWORD *)(v58 + 60) != 3)
          goto LABEL_61;
LABEL_69:
        v61 = *(_QWORD *)(v58 + 48);
        v62 = *(unsigned int *)(v61 + 16);
        v63 = (unsigned int *)(v61 + 16);
        v64 = v62 + 1;
        if ((_DWORD)v62 == *(_DWORD *)(v61 + 20))
          goto LABEL_70;
        goto LABEL_71;
      }
      if (v57 == *(_DWORD *)(v54 + 52))
      {
LABEL_67:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v54 + 40), v57 + 1);
        v55 = *(int **)(v54 + 56);
        v57 = *v55;
      }
      *v55 = v57 + 1;
      v58 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v54 + 40));
      v65 = *(_QWORD *)(v54 + 56);
      v66 = *(int *)(v54 + 48);
      *(_DWORD *)(v54 + 48) = v66 + 1;
      *(_QWORD *)(v65 + 8 * v66 + 8) = v58;
      if (*(_DWORD *)(v58 + 60) == 3)
        goto LABEL_69;
LABEL_61:
      operations_research::sat::ConstraintProto::clear_constraint(v58);
      *(_DWORD *)(v58 + 60) = 3;
      v59 = *(_QWORD *)(v58 + 8);
      v60 = (google::protobuf::Arena *)(v59 & 0xFFFFFFFFFFFFFFFELL);
      if ((v59 & 1) != 0)
        v60 = *(google::protobuf::Arena **)v60;
      v61 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v60);
      *(_QWORD *)(v58 + 48) = v61;
      v62 = *(unsigned int *)(v61 + 16);
      v63 = (unsigned int *)(v61 + 16);
      v64 = v62 + 1;
      if ((_DWORD)v62 == *(_DWORD *)(v61 + 20))
LABEL_70:
        google::protobuf::RepeatedField<int>::Reserve(v63, v64);
LABEL_71:
      *(_DWORD *)(*(_QWORD *)(v61 + 24) + 4 * v62) = ~v48;
      *(_DWORD *)(v61 + 16) = v64;
      v67 = (int *)v46[5];
      for (i = (int *)v46[6]; v67 != i; ++v67)
      {
        v69 = *v67;
        v70 = *(unsigned int *)(v61 + 16);
        if ((_DWORD)v70 == *(_DWORD *)(v61 + 20))
          google::protobuf::RepeatedField<int>::Reserve(v63, v70 + 1);
        *(_DWORD *)(*(_QWORD *)(v61 + 24) + 4 * v70) = v69;
        *(_DWORD *)(v61 + 16) = v70 + 1;
        operations_research::sat::PresolveContext::AddImplication(a4, v69, v48);
      }
      goto LABEL_52;
    }
    v57 = *(_DWORD *)(v54 + 52);
    goto LABEL_67;
  }
LABEL_76:
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v75, v76);
}

void sub_22DA8DE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA8DE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_22DA8DE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_22DA8DE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_22DA8DEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_22DA8DEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_22DA8DED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA8DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void **std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _QWORD *v5;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 3))
        {
          operator delete(*(v3 - 6));
          *(v3 - 1) = 0;
          *(v3 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v3 - 5) = 0;
          *(v3 - 4) = 0;
          *(v3 - 3) = 0;
        }
        v5 = *(v3 - 2);
        if (v5)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::raw_hash_set<long long const*>(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v5;
  char **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = a2;
  *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (char **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  if (a4)
  {
    v8 = __clz(a4);
    v9 = 0xFFFFFFFFFFFFFFFFLL >> v8;
    if (v8 == 61)
      v10 = 6;
    else
      v10 = (0xFFFFFFFFFFFFFFFFLL >> v8) - (0x1FFFFFFFFFFFFFFFuLL >> v8);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 24) = v9;
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 16;
    v12 = (char *)operator new(v11 + 8 * v9);
    v13 = &v12[v11];
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = &v12[v11];
    memset(v12, 128, v9 + 8);
    v12[v9] = -1;
    *(_QWORD *)(a1 + 40) = v10;
    if (v5 == a3)
      return a1;
  }
  else
  {
    v13 = 0;
    if (a2 == a3)
      return a1;
  }
  do
  {
    v17 = 0;
    v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v5)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *v5));
    v18 = (v20 >> 7) ^ (*(_QWORD *)a1 >> 12);
    v21 = *(_QWORD *)(a1 + 24);
    while (1)
    {
      v14 = v18 & v21;
      v15 = *(_QWORD *)(*(_QWORD *)a1 + v14);
      v16 = ((v15 ^ (0x101010101010101 * (v20 & 0x7F))) - 0x101010101010101) & ~(v15 ^ (0x101010101010101
                                                                                          * (v20 & 0x7F))) & 0x8080808080808080;
      if (v16)
        break;
LABEL_12:
      if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
      {
        v19 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)a1, v20);
        v13 = *v7;
        *(_QWORD *)&(*v7)[8 * v19] = *v5;
        goto LABEL_15;
      }
      v17 += 8;
      v18 = v17 + v14;
    }
    while (*(_QWORD *)&v13[8 * ((v14 + (__clz(__rbit64(v16)) >> 3)) & v21)] != *v5)
    {
      v16 &= v16 - 1;
      if (!v16)
        goto LABEL_12;
    }
LABEL_15:
    ++v5;
  }
  while (v5 != a3);
  return a1;
}

void sub_22DA8E150(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::HashtablezInfoHandle *v1;

  absl::lts_2020_02_25::container_internal::HashtablezInfoHandle::~HashtablezInfoHandle(v1);
  _Unwind_Resume(a1);
}

void sub_22DA8E164(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~raw_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

_QWORD *std::vector<std::vector<long long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22DA8E278(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<std::vector<int>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<absl::lts_2020_02_25::Span<long long const>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::~flat_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t operations_research::sat::ConstraintProto::mutable_at_most_one(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 26)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 26;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

_QWORD *std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,0>(_QWORD *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a4)
  {
    v7 = a2;
    v8 = 0;
    v9 = a2;
    do
    {
      v10 = v8;
      v11 = *((char *)v9 + 1);
      v9 = (_QWORD *)((char *)v9 + 1);
      if (v11 <= -2)
      {
        do
          v9 = (_QWORD *)((char *)v9 + ((__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3));
        while (*(char *)v9 < -1);
      }
      ++v8;
    }
    while (v9 != a4);
    if (v10 >= 0x1FFFFFFFFFFFFFFFLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = operator new(8 * v8);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v8];
    do
    {
      v13 = *a3++;
      *v12 = v13;
      LODWORD(v13) = *((char *)v7 + 1);
      v7 = (_QWORD *)((char *)v7 + 1);
      if ((int)v13 <= -2)
      {
        do
        {
          v14 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v7 = (_QWORD *)((char *)v7 + v14);
          a3 += v14;
        }
        while (*(char *)v7 < -1);
      }
      ++v12;
    }
    while (v7 != a4);
    a1[1] = v12;
  }
  return a1;
}

void sub_22DA8E4A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::AddSizeTwoTable(std::vector<int> const&,std::vector<std::vector<long long>> const&,std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>> const&,operations_research::sat::PresolveContext *)::$_0::operator()(uint64_t a1, int a2, int **a3, int a4)
{
  uint64_t v5;
  operations_research::sat::PresolveContext *v8;
  _DWORD **v9;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  google::protobuf::Arena *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;

  v5 = (char *)a3[1] - (char *)*a3;
  if (a4 == v5 >> 2)
    return;
  v8 = *(operations_research::sat::PresolveContext **)a1;
  if (v5 == 4)
  {
    operations_research::sat::PresolveContext::AddImplication(v8, a2, **a3);
    v9 = (_DWORD **)(a1 + 24);
LABEL_27:
    ++**v9;
    return;
  }
  v11 = *((_QWORD *)v8 + 6);
  v12 = *(int **)(v11 + 56);
  if (!v12)
  {
    v14 = *(_DWORD *)(v11 + 52);
LABEL_16:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v11 + 40), v14 + 1);
    v12 = *(int **)(v11 + 56);
    v14 = *v12;
    goto LABEL_17;
  }
  v13 = *(int *)(v11 + 48);
  v14 = *v12;
  if ((int)v13 < *v12)
  {
    *(_DWORD *)(v11 + 48) = v13 + 1;
    v15 = *(_QWORD *)&v12[2 * v13 + 2];
    v28 = a2;
    if (*(_DWORD *)(v15 + 60) != 3)
      goto LABEL_7;
    goto LABEL_18;
  }
  if (v14 == *(_DWORD *)(v11 + 52))
    goto LABEL_16;
LABEL_17:
  *v12 = v14 + 1;
  v15 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v11 + 40));
  v25 = *(_QWORD *)(v11 + 56);
  v26 = *(int *)(v11 + 48);
  *(_DWORD *)(v11 + 48) = v26 + 1;
  *(_QWORD *)(v25 + 8 * v26 + 8) = v15;
  v28 = a2;
  if (*(_DWORD *)(v15 + 60) != 3)
  {
LABEL_7:
    operations_research::sat::ConstraintProto::clear_constraint(v15);
    *(_DWORD *)(v15 + 60) = 3;
    v16 = *(_QWORD *)(v15 + 8);
    v17 = (google::protobuf::Arena *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if ((v16 & 1) != 0)
      v17 = *(google::protobuf::Arena **)v17;
    v18 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v17);
    *(_QWORD *)(v15 + 48) = v18;
    v19 = *a3;
    v20 = a3[1];
    v21 = (unsigned int *)(v18 + 16);
    if (*a3 != v20)
      goto LABEL_10;
LABEL_19:
    v24 = *v21;
    goto LABEL_20;
  }
LABEL_18:
  v18 = *(_QWORD *)(v15 + 48);
  v19 = *a3;
  v20 = a3[1];
  v21 = (unsigned int *)(v18 + 16);
  if (*a3 == v20)
    goto LABEL_19;
LABEL_10:
  v22 = *(_DWORD *)(v18 + 16);
  do
  {
    v23 = *v19;
    v24 = v22 + 1;
    if (v22 == *(_DWORD *)(v18 + 20))
      google::protobuf::RepeatedField<int>::Reserve(v21, v22 + 1);
    *(_DWORD *)(*(_QWORD *)(v18 + 24) + 4 * v22) = v23;
    *(_DWORD *)(v18 + 16) = v24;
    ++v19;
    ++v22;
  }
  while (v19 != v20);
LABEL_20:
  if (v24 == *(_DWORD *)(v18 + 20))
    google::protobuf::RepeatedField<int>::Reserve(v21, v24 + 1);
  *(_DWORD *)(*(_QWORD *)(v18 + 24) + 4 * v24) = ~v28;
  *(_DWORD *)(v18 + 16) = v24 + 1;
  ++**(_DWORD **)(a1 + 8);
  if (a4 >= 0)
    v27 = a4;
  else
    v27 = a4 + 1;
  if ((uint64_t)v27 >> 1 < (unint64_t)(a3[1] - *a3))
  {
    v9 = (_DWORD **)(a1 + 16);
    goto LABEL_27;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::find_or_prepare_insert<absl::lts_2020_02_25::Span<long long const>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  absl::lts_2020_02_25::hash_internal::CityHashState *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  absl::lts_2020_02_25::hash_internal *v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)a2, 8 * v4);
  v6 = 0;
  v7 = ((((unint64_t)v5 + v4) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                        * ((_QWORD)v5 + v4));
  v8 = *a1;
  v9 = (v7 >> 7) ^ ((unint64_t)*a1 >> 12);
  v10 = a1[3];
  v11 = 0x101010101010101 * (v7 & 0x7F);
  v12 = *(absl::lts_2020_02_25::hash_internal **)a2;
  v13 = 8 * *(_QWORD *)(a2 + 8);
  while (1)
  {
    v14 = v9 & v10;
    v15 = *(_QWORD *)(v8 + (v9 & v10));
    v16 = ((v15 ^ v11) - 0x101010101010101) & ~(v15 ^ v11) & 0x8080808080808080;
    if (v16)
      break;
LABEL_7:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::prepare_insert(a1, v7);
    v6 += 8;
    v9 = v6 + v14;
  }
  v17 = a1[1];
  v22 = v11;
  v23 = v6;
  v21 = v17;
  while (1)
  {
    v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v10;
    v19 = v17 + 16 * v18;
    if (v13 == 8 * *(_QWORD *)(v19 + 8) && !memcmp(*(const void **)v19, v12, v13))
      return v18;
    v16 &= v16 - 1;
    v11 = v22;
    v6 = v23;
    v17 = v21;
    if (!v16)
      goto LABEL_7;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::drop_deletes_without_resize((absl::lts_2020_02_25::hash_internal::CityHashState *)a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  absl::lts_2020_02_25::hash_internal::CityHashState *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v26 = a1[4];
    if (!v26)
      return;
LABEL_21:
    *((_QWORD *)v26 + 4) = v14 >> 3;
    *((_QWORD *)v26 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = *((_QWORD *)v18 + 1);
      v20 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v18, 8 * v19);
      v21 = ((((unint64_t)v20 + v19) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                               * ((_QWORD)v20 + v19));
      v22 = *a1;
      v23 = a1[3];
      v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      v25 = *(_QWORD *)&(*a1)[v24] & (~*(_QWORD *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v24 = (v15 + v24) & (unint64_t)v23;
          v25 = *(_QWORD *)&v22[v24] & (~*(_QWORD *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v26 = a1[4];
  if (v26)
    goto LABEL_21;
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::drop_deletes_without_resize(absl::lts_2020_02_25::hash_internal::CityHashState *result)
{
  absl::lts_2020_02_25::hash_internal::CityHashState *v1;
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v1 = result;
  v2 = *(int8x16_t **)result;
  v3 = *((_QWORD *)result + 3);
  v4 = *(_QWORD *)result + v3;
  if (v4 + 1 != *(_QWORD *)result)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)result;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  if (!*((_QWORD *)result + 3))
  {
    v15 = 0;
    *((_QWORD *)result + 5) = -*((_QWORD *)result + 2);
    v32 = *((_QWORD *)result + 4);
    if (!v32)
      return result;
LABEL_26:
    *(_QWORD *)(v32 + 32) = v15 >> 3;
    *(_QWORD *)(v32 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)v1 + v14) == 254)
    {
      v20 = *((_QWORD *)v1 + 1) + 16 * v14;
      v21 = *(_QWORD *)(v20 + 8);
      result = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v20, 8 * v21);
      v22 = ((((unint64_t)result + v21) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                                  * ((_QWORD)result + v21));
      v23 = *(_QWORD *)v1;
      v24 = *((_QWORD *)v1 + 3);
      v25 = ((v22 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v24;
      v26 = *(_QWORD *)(*(_QWORD *)v1 + v25) & (~*(_QWORD *)(*(_QWORD *)v1 + v25) << 7) & 0x8080808080808080;
      if (v26)
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v24;
      }
      else
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v24;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v24;
          v26 = *(_QWORD *)(v23 + v17) & (~*(_QWORD *)(v23 + v17) << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      v18 = (v17 + (__clz(__rbit64(v26)) >> 3)) & v24;
      v15 += v16;
      if ((((v18 - v25) ^ (v14 - v25)) & v24) > 7)
      {
        v27 = *(unsigned __int8 *)(v23 + v18);
        v28 = v22 & 0x7F;
        *(_BYTE *)(v23 + v18) = v28;
        *(_BYTE *)((*((_QWORD *)v1 + 3) & (v18 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = v28;
        v29 = *((_QWORD *)v1 + 1);
        if (v27 == 128)
        {
          *(_OWORD *)(v29 + 16 * v18) = *(_OWORD *)(v29 + 16 * v14);
          *(_BYTE *)(*(_QWORD *)v1 + v14) = 0x80;
          *(_BYTE *)((*((_QWORD *)v1 + 3) & (v14 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = 0x80;
        }
        else
        {
          v30 = *(_OWORD *)(v29 + 16 * v14);
          *(_OWORD *)(v29 + 16 * v14) = *(_OWORD *)(v29 + 16 * v18);
          *(_OWORD *)(*((_QWORD *)v1 + 1) + 16 * v18) = v30;
          --v14;
        }
      }
      else
      {
        v19 = v22 & 0x7F;
        *(_BYTE *)(v23 + v14) = v19;
        *(_BYTE *)((*((_QWORD *)v1 + 3) & (v14 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = v19;
      }
    }
    ++v14;
  }
  while (v14 != *((_QWORD *)v1 + 3));
  v31 = v14 - (v14 >> 3);
  if (v14 == 7)
    v31 = 6;
  *((_QWORD *)v1 + 5) = v31 - *((_QWORD *)v1 + 2);
  v32 = *((_QWORD *)v1 + 4);
  if (v32)
    goto LABEL_26;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t j;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;

  v8 = result;
LABEL_2:
  v9 = a2 - 2;
  v65 = a2 - 6;
  v66 = a2 - 4;
  v10 = v8;
  v67 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = (uint64_t)a2 - v10;
    v13 = v12 >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(a2 - 2);
        v26 = *(_QWORD *)v8;
        if (v25 < *(_QWORD *)v8)
        {
          v27 = *(_DWORD *)(v8 + 8);
          v28 = *((_DWORD *)a2 - 2);
LABEL_25:
          *(_QWORD *)v8 = v25;
          *(a2 - 2) = v26;
          *(_DWORD *)(v8 + 8) = v28;
          *((_DWORD *)a2 - 2) = v27;
          return result;
        }
        if (v26 >= v25)
        {
          v28 = *((_DWORD *)a2 - 2);
          v27 = *(_DWORD *)(v8 + 8);
          if (v28 < v27)
            goto LABEL_25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v8, (uint64_t *)(v8 + 16), v9);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v8, (uint64_t *)(v8 + 16), (uint64_t *)(v8 + 32));
        v29 = *(a2 - 2);
        v30 = *(_QWORD *)(v8 + 32);
        if (v29 >= v30)
        {
          if (v30 < v29)
            return result;
          v32 = *((_DWORD *)a2 - 2);
          v31 = *(_DWORD *)(v8 + 40);
          if (v32 >= v31)
            return result;
        }
        else
        {
          v31 = *(_DWORD *)(v8 + 40);
          v32 = *((_DWORD *)a2 - 2);
        }
        *(_QWORD *)(v8 + 32) = v29;
        *(a2 - 2) = v30;
        *(_DWORD *)(v8 + 40) = v32;
        *((_DWORD *)a2 - 2) = v31;
        v33 = *(_QWORD *)(v8 + 32);
        v34 = *(_QWORD *)(v8 + 16);
        if (v33 >= v34)
        {
          if (v34 < v33)
            return result;
          v36 = *(_DWORD *)(v8 + 40);
          v35 = *(_DWORD *)(v8 + 24);
          if (v36 >= v35)
            return result;
        }
        else
        {
          v35 = *(_DWORD *)(v8 + 24);
          v36 = *(_DWORD *)(v8 + 40);
        }
        *(_QWORD *)(v8 + 16) = v33;
        *(_QWORD *)(v8 + 32) = v34;
        *(_DWORD *)(v8 + 24) = v36;
        *(_DWORD *)(v8 + 40) = v35;
        v37 = *(_QWORD *)v8;
        if (v33 < *(_QWORD *)v8)
        {
          v38 = *(_DWORD *)(v8 + 8);
LABEL_90:
          *(_QWORD *)v8 = v33;
          *(_QWORD *)(v8 + 16) = v37;
          *(_DWORD *)(v8 + 8) = v36;
          *(_DWORD *)(v8 + 24) = v38;
          return result;
        }
        if (v37 >= v33)
        {
          v38 = *(_DWORD *)(v8 + 8);
          if (v36 < v38)
            goto LABEL_90;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v8, v8 + 16, v8 + 32, v8 + 48, v9);
      default:
        if (v12 > 383)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if ((uint64_t *)v8 != a2)
            {
              v54 = (v13 - 2) >> 1;
              v55 = v54 + 1;
              v56 = (uint64_t *)(v8 + 16 * v54);
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v8, a3, v12 >> 4, v56);
                v56 -= 2;
                --v55;
              }
              while (v55);
              v57 = (unint64_t)v12 >> 4;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<long long,int> *>((uint64_t *)v8, (uint64_t)a2, a3, v57);
                a2 -= 2;
              }
              while (v57-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = (uint64_t *)(v8 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v16, (uint64_t *)v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v8, v16, v9);
            v17 = a5;
            v18 = v9;
            v19 = v8 + 16 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v8 + 16), (uint64_t *)(v19 - 16), v66);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v8 + 32), (uint64_t *)(v8 + 16 + 16 * v15), v65);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v19 - 16), v16, (uint64_t *)(v8 + 16 + 16 * v15));
            v20 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v16;
            *v16 = v20;
            LODWORD(v20) = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v19 + 8);
            *(_DWORD *)(v19 + 8) = v20;
            v9 = v18;
            a5 = v17;
            a2 = v67;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *(_QWORD *)(v8 - 16);
          if (v21 >= *(_QWORD *)v8 && (*(_QWORD *)v8 < v21 || *(_DWORD *)(v8 - 8) >= *(_DWORD *)(v8 + 8)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,int> *,std::__less<void,void> &>((uint64_t *)v8, a2);
            v10 = result;
            goto LABEL_19;
          }
LABEL_14:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,int> *,std::__less<void,void> &>((uint64_t *)v8, (unint64_t)a2);
          if ((v23 & 1) == 0)
            goto LABEL_17;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v8, v22);
          v10 = v22 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v22 + 16, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v24)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>(v8, v22, a3, -v14, a5 & 1);
            v10 = v22 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = (uint64_t *)v22;
          if (v24)
            return result;
          goto LABEL_2;
        }
        v39 = (uint64_t *)(v8 + 16);
        v41 = (uint64_t *)v8 == a2 || v39 == a2;
        if ((a5 & 1) != 0)
        {
          if (v41)
            return result;
          v42 = 0;
          v43 = v8;
LABEL_46:
          v45 = v43;
          v43 = (uint64_t)v39;
          v46 = *(_QWORD *)(v45 + 16);
          v47 = *(_QWORD *)v45;
          if (v46 >= *(_QWORD *)v45)
          {
            if (v47 < v46)
              goto LABEL_45;
            v48 = *(_DWORD *)(v45 + 24);
            v49 = *(_DWORD *)(v45 + 8);
            if (v48 >= v49)
              goto LABEL_45;
          }
          else
          {
            v48 = *(_DWORD *)(v45 + 24);
            v49 = *(_DWORD *)(v45 + 8);
          }
          *(_QWORD *)(v45 + 16) = v47;
          *(_DWORD *)(v43 + 8) = v49;
          v44 = v8;
          if (v45 == v8)
            goto LABEL_44;
          v50 = v42;
          while (1)
          {
            v53 = *(_QWORD *)(v8 + v50 - 16);
            if (v46 < v53)
            {
              v51 = *(_DWORD *)(v8 + v50 - 8);
            }
            else
            {
              if (v53 < v46)
              {
                v44 = v8 + v50;
LABEL_44:
                *(_QWORD *)v44 = v46;
                *(_DWORD *)(v44 + 8) = v48;
LABEL_45:
                v39 = (uint64_t *)(v43 + 16);
                v42 += 16;
                if ((uint64_t *)(v43 + 16) == a2)
                  return result;
                goto LABEL_46;
              }
              v51 = *(_DWORD *)(v8 + v50 - 8);
              if (v48 >= v51)
              {
                v44 = v45;
                goto LABEL_44;
              }
            }
            v45 -= 16;
            v52 = v8 + v50;
            *(_QWORD *)v52 = v53;
            *(_DWORD *)(v52 + 8) = v51;
            v50 -= 16;
            if (!v50)
            {
              v44 = v8;
              goto LABEL_44;
            }
          }
        }
        if (!v41)
        {
          for (i = v8 + 8; ; i += 16)
          {
            v60 = v8;
            v8 = (uint64_t)v39;
            v61 = *(_QWORD *)(v60 + 16);
            v62 = *(_QWORD *)v60;
            if (v61 < *(_QWORD *)v60)
              break;
            if (v62 >= v61)
            {
              v63 = *(_DWORD *)(v60 + 24);
              if (v63 < *(_DWORD *)(v60 + 8))
                goto LABEL_79;
            }
LABEL_74:
            v39 = (uint64_t *)(v8 + 16);
            if ((uint64_t *)(v8 + 16) == a2)
              return result;
          }
          v63 = *(_DWORD *)(v60 + 24);
LABEL_79:
          for (j = i; ; j -= 16)
          {
            *(_QWORD *)(j + 8) = v62;
            *(_DWORD *)(j + 16) = *(_DWORD *)j;
            v62 = *(_QWORD *)(j - 24);
            if (v61 >= v62 && (v62 < v61 || v63 >= *(_DWORD *)(j - 16)))
              break;
          }
          *(_QWORD *)(j - 8) = v61;
          *(_DWORD *)j = v63;
          goto LABEL_74;
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  v3 = *a2;
  v4 = *a1;
  if (*a2 < *a1 || v4 >= v3 && *((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
  {
    v5 = *a3;
    if (*a3 < v3)
    {
      v6 = *((_DWORD *)a3 + 2);
LABEL_16:
      *a1 = v5;
      *a3 = v4;
      v16 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v6;
      *((_DWORD *)a3 + 2) = v16;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *((_DWORD *)a3 + 2);
      v10 = *((_DWORD *)a2 + 2);
      if (v6 < v10)
        goto LABEL_16;
    }
    else
    {
      v10 = *((_DWORD *)a2 + 2);
    }
    *a1 = v3;
    *a2 = v4;
    v17 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v10;
    *((_DWORD *)a2 + 2) = v17;
    v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *((_DWORD *)a3 + 2);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *((_DWORD *)a3 + 2);
    }
    *a2 = v18;
    *a3 = v4;
    *((_DWORD *)a2 + 2) = v19;
    result = 2;
    *((_DWORD *)a3 + 2) = v17;
    return result;
  }
  v7 = *a3;
  if (*a3 >= v3)
  {
    if (v3 < v7)
      return 0;
    v9 = *((_DWORD *)a3 + 2);
    v8 = *((_DWORD *)a2 + 2);
    if (v9 >= v8)
      return 0;
  }
  else
  {
    v8 = *((_DWORD *)a2 + 2);
    v9 = *((_DWORD *)a3 + 2);
  }
  *a2 = v7;
  *a3 = v3;
  *((_DWORD *)a2 + 2) = v9;
  *((_DWORD *)a3 + 2) = v8;
  v11 = *a2;
  v12 = *a1;
  if (*a2 < *a1)
  {
    v13 = *((_DWORD *)a1 + 2);
    v14 = *((_DWORD *)a2 + 2);
LABEL_14:
    *a1 = v11;
    *a2 = v12;
    *((_DWORD *)a1 + 2) = v14;
    result = 2;
    *((_DWORD *)a2 + 2) = v13;
    return result;
  }
  if (v12 >= v11)
  {
    v14 = *((_DWORD *)a2 + 2);
    v13 = *((_DWORD *)a1 + 2);
    if (v14 < v13)
      goto LABEL_14;
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,int> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_DWORD *)a2 - 2)))
  {
    for (i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= *((_DWORD *)i + 2)); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((_DWORD *)i + 2)));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < *((_DWORD *)a2 + 2); a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[2];
      i += 2;
      v9 = v11;
      v12 = *((_DWORD *)i - 2);
      *((_DWORD *)i - 2) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((_DWORD *)i + 2)))
      {
        v13 = i[2];
        i += 2;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(a2 - 2);
          a2 -= 2;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((_DWORD *)a2 + 2));
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)i - 2);
  }
  *(i - 2) = v2;
  *((_DWORD *)i - 2) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,int> *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || SLODWORD(a1[v2 + 3]) >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(_QWORD *)(a2 - 16);
      a2 -= 16;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v10 = *(_QWORD *)(a2 - 16);
        a2 -= 16;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = v6;
  }
  else
  {
    v12 = *(_QWORD *)a2;
    v13 = v6;
    v14 = a2;
    do
    {
      *(_QWORD *)v13 = v12;
      *(_QWORD *)v14 = v5;
      v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(_QWORD *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        v17 = *(_QWORD *)(v14 - 16);
        v14 -= 16;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if ((uint64_t *)(v13 - 16) != a1)
  {
    *a1 = *(_QWORD *)(v13 - 16);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v13 - 8);
  }
  *(_QWORD *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v19 = *(_QWORD *)(a2 - 16);
      v20 = *(_QWORD *)a1;
      if (v19 < *(_QWORD *)a1)
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a2 - 8);
LABEL_24:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a2 - 16) = v20;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v22 = *(_DWORD *)(a2 - 8);
        v21 = *(_DWORD *)(a1 + 8);
        if (v22 < v21)
          goto LABEL_24;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      v23 = *(_QWORD *)(a2 - 16);
      v24 = *(_QWORD *)(a1 + 32);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v26 = *(_DWORD *)(a2 - 8);
        v25 = *(_DWORD *)(a1 + 40);
        if (v26 >= v25)
          return 1;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 40);
        v26 = *(_DWORD *)(a2 - 8);
      }
      *(_QWORD *)(a1 + 32) = v23;
      *(_QWORD *)(a2 - 16) = v24;
      *(_DWORD *)(a1 + 40) = v26;
      *(_DWORD *)(a2 - 8) = v25;
      v27 = *(_QWORD *)(a1 + 32);
      v28 = *(_QWORD *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v30 = *(_DWORD *)(a1 + 40);
        v29 = *(_DWORD *)(a1 + 24);
        if (v30 >= v29)
          return 1;
      }
      else
      {
        v29 = *(_DWORD *)(a1 + 24);
        v30 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 32) = v28;
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 40) = v29;
      v31 = *(_QWORD *)a1;
      if (v27 < *(_QWORD *)a1)
      {
        v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(_QWORD *)a1 = v27;
        *(_QWORD *)(a1 + 16) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        result = 1;
        *(_DWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        v32 = *(_DWORD *)(a1 + 8);
        if (v30 < v32)
          goto LABEL_46;
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t *)(a2 - 16));
      return 1;
    default:
      v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      v7 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(_QWORD *)v7;
        v12 = *(_QWORD *)v6;
        if (*(_QWORD *)v7 >= *(_QWORD *)v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
          if (v13 >= v14)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
        }
        *(_QWORD *)v7 = v12;
        *(_DWORD *)(v7 + 8) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(_QWORD *)(a1 + v15 + 16);
          if (v11 < v18)
          {
            v16 = *(_DWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(_QWORD *)(v17 + 32) = v18;
            *(_DWORD *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          v16 = *(_DWORD *)(a1 + v15 + 24);
          if (v13 >= v16)
          {
            v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *(_QWORD *)v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8)
          return v7 + 16 == a2;
LABEL_7:
        v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v11 = *(_QWORD *)a4;
  v12 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v12 < v11)
      goto LABEL_16;
    v14 = *(_DWORD *)(a4 + 8);
    v13 = *(_DWORD *)(a3 + 8);
    if (v14 >= v13)
      goto LABEL_16;
  }
  else
  {
    v13 = *(_DWORD *)(a3 + 8);
    v14 = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)a3 = v11;
  *(_QWORD *)a4 = v12;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a4 + 8) = v13;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v16 < v15)
      goto LABEL_16;
    v18 = *(_DWORD *)(a3 + 8);
    v17 = *(_DWORD *)(a2 + 8);
    if (v18 >= v17)
      goto LABEL_16;
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 8);
    v18 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)a2 = v15;
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a2 + 8) = v18;
  *(_DWORD *)(a3 + 8) = v17;
  v19 = *(_QWORD *)a2;
  v20 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    v21 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)(a2 + 8);
LABEL_7:
    *(_QWORD *)a1 = v19;
    *(_QWORD *)a2 = v20;
    *(_DWORD *)(a1 + 8) = v22;
    *(_DWORD *)(a2 + 8) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    v22 = *(_DWORD *)(a2 + 8);
    v21 = *(_DWORD *)(a1 + 8);
    if (v22 < v21)
      goto LABEL_7;
  }
LABEL_16:
  v23 = *a5;
  v24 = *(_QWORD *)a4;
  if (*a5 >= *(_QWORD *)a4)
  {
    if (v24 < v23)
      return result;
    v26 = *((_DWORD *)a5 + 2);
    v25 = *(_DWORD *)(a4 + 8);
    if (v26 >= v25)
      return result;
  }
  else
  {
    v25 = *(_DWORD *)(a4 + 8);
    v26 = *((_DWORD *)a5 + 2);
  }
  *(_QWORD *)a4 = v23;
  *a5 = v24;
  *(_DWORD *)(a4 + 8) = v26;
  *((_DWORD *)a5 + 2) = v25;
  v27 = *(_QWORD *)a4;
  v28 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v28 < v27)
      return result;
    v30 = *(_DWORD *)(a4 + 8);
    v29 = *(_DWORD *)(a3 + 8);
    if (v30 >= v29)
      return result;
  }
  else
  {
    v29 = *(_DWORD *)(a3 + 8);
    v30 = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)a3 = v27;
  *(_QWORD *)a4 = v28;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a4 + 8) = v29;
  v31 = *(_QWORD *)a3;
  v32 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v32 < v31)
      return result;
    v34 = *(_DWORD *)(a3 + 8);
    v33 = *(_DWORD *)(a2 + 8);
    if (v34 >= v33)
      return result;
  }
  else
  {
    v33 = *(_DWORD *)(a2 + 8);
    v34 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)a2 = v31;
  *(_QWORD *)a3 = v32;
  *(_DWORD *)(a2 + 8) = v34;
  *(_DWORD *)(a3 + 8) = v33;
  v35 = *(_QWORD *)a2;
  v36 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    v37 = *(_DWORD *)(a1 + 8);
    v38 = *(_DWORD *)(a2 + 8);
LABEL_24:
    *(_QWORD *)a1 = v35;
    *(_QWORD *)a2 = v36;
    *(_DWORD *)(a1 + 8) = v38;
    *(_DWORD *)(a2 + 8) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    v38 = *(_DWORD *)(a2 + 8);
    v37 = *(_DWORD *)(a1 + 8);
    if (v38 < v37)
      goto LABEL_24;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (uint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 16 * v7 + 8) < *((_DWORD *)v8 + 6))
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v14 = *((_DWORD *)v8 + 2);
          v13 = *((_DWORD *)a4 + 2);
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = *((_DWORD *)a4 + 2);
          v14 = *((_DWORD *)v8 + 2);
        }
        *a4 = v11;
        *((_DWORD *)a4 + 2) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = (uint64_t *)(result + 16 * v7);
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = v15[2];
              if (*v15 < v18 || v18 >= *v15 && *(_DWORD *)(result + 16 * v7 + 8) < *((_DWORD *)v15 + 6))
              {
                v15 += 2;
                v7 = v17;
              }
            }
            v19 = *v15;
            if (*v15 < v12)
              break;
            v20 = *((_DWORD *)v15 + 2);
            if (v12 >= v19 && v20 < v13)
              break;
            *v8 = v19;
            *((_DWORD *)v8 + 2) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *v15 = v12;
        *((_DWORD *)v15 + 2) = v13;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<long long,int> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = *((_DWORD *)result + 2);
    v7 = result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && SLODWORD(v8[2 * v9 + 1]) < *((_DWORD *)v7 + 6))
        {
          v7 += 2;
          v4 = v11;
        }
      }
      *v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (uint64_t *)(a2 - 16))
    {
      *v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    *v7 = *(_QWORD *)(a2 - 16);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 8);
    *(_QWORD *)(a2 - 16) = v5;
    *(_DWORD *)(a2 - 8) = v6;
    v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      v14 = ((unint64_t)v13 >> 4) - 2;
      v15 = v14 >> 1;
      v16 = &result[2 * (v14 >> 1)];
      v17 = *v16;
      v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17)
          return result;
        v20 = result[2 * v15 + 1];
        v19 = *((_DWORD *)v7 + 2);
        if (v20 >= v19)
          return result;
      }
      else
      {
        v19 = *((_DWORD *)v7 + 2);
        v20 = *((_DWORD *)v16 + 2);
      }
      *v7 = v17;
      *((_DWORD *)v7 + 2) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          v23 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v21 = &result[2 * v15];
          v24 = *v21;
          if (*v21 < v18)
          {
            v22 = *((_DWORD *)v21 + 2);
          }
          else
          {
            if (v18 < v24)
              break;
            v22 = result[2 * v15 + 1];
            if (v22 >= v19)
              break;
          }
          *v16 = v24;
          *((_DWORD *)v16 + 2) = v22;
          v16 = &result[2 * v15];
          if (v23 <= 1)
            goto LABEL_19;
        }
      }
      v21 = v16;
LABEL_19:
      *v21 = v18;
      *((_DWORD *)v21 + 2) = v19;
    }
  }
  return result;
}

operations_research::sat::NeighborhoodGeneratorHelper *operations_research::sat::NeighborhoodGeneratorHelper::NeighborhoodGeneratorHelper(operations_research::sat::NeighborhoodGeneratorHelper *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::SatParameters *a3, operations_research::sat::SharedResponseManager *a4, operations_research::SharedTimeLimit *a5, operations_research::sat::SharedBoundsManager *a6)
{
  absl::lts_2020_02_25::Mutex *v7;
  operations_research::sat::SharedBoundsManager *v8;
  operations_research::sat::NeighborhoodGeneratorHelper *v9;
  _QWORD *v11;
  _BYTE v12[16];

  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)((char *)this + 39) = 0;
  *(_QWORD *)((char *)this + 31) = 0;
  *((_BYTE *)this + 47) = 0;
  *(_QWORD *)this = &off_24F982798;
  *((_QWORD *)this + 6) = a3;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 9) = a5;
  *((_QWORD *)this + 10) = a6;
  *((_QWORD *)this + 11) = a4;
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 104), 0);
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  if (!*((_QWORD *)this + 11))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 43);
    v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: shared_response_ != nullptr ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
  }
  v8 = (operations_research::sat::SharedBoundsManager *)*((_QWORD *)this + 10);
  if (v8)
    *((_DWORD *)this + 16) = operations_research::sat::SharedBoundsManager::RegisterNewId(v8, v7);
  v9 = (operations_research::sat::NeighborhoodGeneratorHelper *)*((_QWORD *)this + 7);
  if ((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 104) != v9)
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>((uint64_t)this + 120, (uint64_t)v9 + 16);
  operations_research::sat::NeighborhoodGeneratorHelper::RecomputeHelperData(this);
  (*(void (**)(operations_research::sat::NeighborhoodGeneratorHelper *))(*(_QWORD *)this + 32))(this);
  return this;
}

void sub_22DA901EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)v1 = off_24F982B08;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NeighborhoodGeneratorHelper::RecomputeHelperData(operations_research::sat::NeighborhoodGeneratorHelper *this)
{
  operations_research::sat::NeighborhoodGeneratorHelper *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  int *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  _DWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  int *v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  int *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  _OWORD *v126;
  int *v127;
  uint64_t v128;
  __int128 v129;
  int v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _BYTE *v143;
  _DWORD *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  operations_research::sat::NeighborhoodGeneratorHelper *v158;
  int *v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  void **v164;
  unint64_t v165[2];
  uint64_t *v166;
  void *__p;
  int *v168;
  uint64_t v169;
  int v170;

  v1 = this;
  v2 = *(int *)(*((_QWORD *)this + 7) + 24);
  __p = 0;
  v168 = 0;
  v169 = 0;
  v156 = (_QWORD *)((char *)this + 304);
  std::vector<std::vector<int>>::assign((uint64_t)this + 304, v2, (char **)&__p);
  if (__p)
  {
    v168 = (int *)__p;
    operator delete(__p);
  }
  v3 = *(int *)(*((_QWORD *)v1 + 7) + 48);
  __p = 0;
  v168 = 0;
  v169 = 0;
  v155 = (_QWORD *)((char *)v1 + 280);
  std::vector<std::vector<int>>::assign((uint64_t)v1 + 280, v3, (char **)&__p);
  if (__p)
  {
    v168 = (int *)__p;
    operator delete(__p);
  }
  v4 = *((_QWORD *)v1 + 7);
  v158 = v1;
  if (*(int *)(v4 + 48) < 1)
    goto LABEL_67;
  v5 = 0;
  while (2)
  {
    operations_research::sat::UsedVariables(*(operations_research::sat **)(*(_QWORD *)(v4 + 56) + 8 * v5 + 8), &__p);
    v6 = (int *)__p;
    v159 = v168;
    if (__p == v168)
      goto LABEL_65;
    v162 = v5;
    do
    {
      v7 = *v6;
      v8 = *(_QWORD *)(*((_QWORD *)v1 + 17) + 8 * *v6 + 8);
      if (*(_DWORD *)(v8 + 16) == 2 && **(_QWORD **)(v8 + 24) == *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8))
        goto LABEL_10;
      v9 = *v156 + 24 * v7;
      v11 = (uint64_t *)(v9 + 8);
      v10 = *(char **)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      if ((unint64_t)v10 < v12)
      {
        *(_DWORD *)v10 = v5;
        v13 = (uint64_t)(v10 + 4);
        goto LABEL_35;
      }
      v14 = *(char **)v9;
      v15 = (uint64_t)&v10[-*(_QWORD *)v9];
      v16 = v15 >> 2;
      v17 = (v15 >> 2) + 1;
      if (v17 >> 62)
        goto LABEL_177;
      v18 = v12 - (_QWORD)v14;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          goto LABEL_178;
        v20 = v19;
        v21 = operator new(4 * v19);
        v19 = v20;
        v22 = &v21[4 * v16];
        *v22 = v162;
        v13 = (uint64_t)(v22 + 1);
        if (v10 == v14)
        {
LABEL_27:
          v5 = v162;
          goto LABEL_33;
        }
      }
      else
      {
        v21 = 0;
        v22 = (_DWORD *)(4 * v16);
        *(_DWORD *)(4 * v16) = v162;
        v13 = 4 * v16 + 4;
        if (v10 == v14)
          goto LABEL_27;
      }
      v23 = v10 - 4 - v14;
      if (v23 < 0x2C)
      {
        v5 = v162;
        do
        {
LABEL_32:
          v32 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *--v22 = v32;
        }
        while (v10 != v14);
        goto LABEL_33;
      }
      v24 = v10 - &v21[v15];
      v5 = v162;
      if (v24 < 0x20)
        goto LABEL_32;
      v25 = (v23 >> 2) + 1;
      v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
      v27 = &v10[-v26];
      v22 = (_DWORD *)((char *)v22 - v26);
      v28 = &v21[4 * v16 - 16];
      v29 = v10 - 16;
      v30 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 8;
      }
      while (v30);
      v10 = v27;
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_32;
LABEL_33:
      *(_QWORD *)v9 = v22;
      *v11 = v13;
      *(_QWORD *)(v9 + 16) = &v21[4 * v19];
      if (v14)
        operator delete(v14);
LABEL_35:
      *v11 = v13;
      v33 = *v155 + 24 * v5;
      v35 = (uint64_t *)(v33 + 8);
      v34 = *(char **)(v33 + 8);
      v36 = *(_QWORD *)(v33 + 16);
      if ((unint64_t)v34 < v36)
      {
        *(_DWORD *)v34 = v7;
        v1 = v158;
        *v35 = (uint64_t)(v34 + 4);
        LODWORD(v165[0]) = v7;
        v170 = 0;
        if (v7 < 0)
          goto LABEL_62;
        goto LABEL_59;
      }
      v37 = *(char **)v33;
      v38 = (uint64_t)&v34[-*(_QWORD *)v33];
      v39 = v38 >> 2;
      v40 = (v38 >> 2) + 1;
      if (v40 >> 62)
LABEL_177:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v41 = v36 - (_QWORD)v37;
      if (v41 >> 1 > v40)
        v40 = v41 >> 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
        v42 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 >> 62)
LABEL_178:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v43 = v42;
        v44 = operator new(4 * v42);
        v42 = v43;
        v45 = (int *)&v44[4 * v39];
        *v45 = v7;
        v46 = (uint64_t)(v45 + 1);
        if (v34 == v37)
        {
LABEL_50:
          v5 = v162;
          goto LABEL_56;
        }
      }
      else
      {
        v44 = 0;
        v45 = (int *)(4 * v39);
        *(_DWORD *)(4 * v39) = v7;
        v46 = 4 * v39 + 4;
        if (v34 == v37)
          goto LABEL_50;
      }
      v47 = v34 - 4 - v37;
      if (v47 < 0x2C)
      {
        v5 = v162;
        do
        {
LABEL_55:
          v56 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *--v45 = v56;
        }
        while (v34 != v37);
        goto LABEL_56;
      }
      v48 = v34 - &v44[v38];
      v5 = v162;
      if (v48 < 0x20)
        goto LABEL_55;
      v49 = (v47 >> 2) + 1;
      v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
      v51 = &v34[-v50];
      v45 = (int *)((char *)v45 - v50);
      v52 = &v44[4 * v39 - 16];
      v53 = v34 - 16;
      v54 = v49 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v55 = *(_OWORD *)v53;
        *(v52 - 1) = *((_OWORD *)v53 - 1);
        *v52 = v55;
        v52 -= 2;
        v53 -= 32;
        v54 -= 8;
      }
      while (v54);
      v34 = v51;
      if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_55;
LABEL_56:
      *(_QWORD *)v33 = v45;
      *v35 = v46;
      *(_QWORD *)(v33 + 16) = &v44[4 * v42];
      if (v37)
        operator delete(v37);
      v1 = v158;
      *v35 = v46;
      LODWORD(v165[0]) = v7;
      v170 = 0;
      if (v7 < 0)
      {
LABEL_62:
        v166 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v165, (int)&v170, "var >= 0");
        if (v166)
        {
          google::LogMessageFatal::LogMessageFatal(v165, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 111, &v166);
          google::LogMessage::stream((google::LogMessage *)v165);
LABEL_182:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v165);
        }
      }
LABEL_59:
      v57 = *(_DWORD *)(*((_QWORD *)v1 + 7) + 24);
      LODWORD(v165[0]) = v7;
      v170 = v57;
      if (v7 >= v57)
      {
        v166 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v165, (int)&v170, "var < model_proto_.variables_size()");
        if (v166)
        {
          google::LogMessageFatal::LogMessageFatal(v165, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 112, &v166);
          google::LogMessage::stream((google::LogMessage *)v165);
          goto LABEL_182;
        }
      }
LABEL_10:
      ++v6;
    }
    while (v6 != v159);
    v6 = (int *)__p;
LABEL_65:
    if (v6)
    {
      v168 = v6;
      operator delete(v6);
    }
    ++v5;
    v4 = *((_QWORD *)v1 + 7);
    if (v5 < *(int *)(v4 + 48))
      continue;
    break;
  }
LABEL_67:
  v59 = *((_QWORD *)v1 + 32);
  v58 = *((_QWORD *)v1 + 33);
  if (v58 != v59)
  {
    v60 = *((_QWORD *)v1 + 33);
    do
    {
      v62 = *(void **)(v60 - 24);
      v60 -= 24;
      v61 = v62;
      if (v62)
      {
        *(_QWORD *)(v58 - 16) = v61;
        operator delete(v61);
      }
      v58 = v60;
    }
    while (v60 != v59);
    v4 = *((_QWORD *)v1 + 7);
  }
  *((_QWORD *)v1 + 33) = v59;
  v63 = *(unsigned int *)(v4 + 48);
  if ((int)v63 >= 1)
  {
    v64 = 0;
    v65 = (_QWORD *)((char *)v1 + 256);
    v160 = (_QWORD *)((char *)v1 + 256);
    v163 = *(unsigned int *)(v4 + 48);
    while (1)
    {
      while (1)
      {
        v66 = *(int *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 7) + 56) + 8 * v64 + 8) + 60);
        v68 = *((_QWORD *)v1 + 32);
        v67 = *((_QWORD *)v1 + 33);
        v69 = 0xAAAAAAAAAAAAAAABLL * ((v67 - v68) >> 3);
        if (v69 <= v66)
        {
          v70 = (int)v66 + 1;
          if (v70 <= v69)
          {
            if (v70 < v69)
            {
              v71 = v68 + 24 * (int)v70;
              if (v67 != v71)
              {
                v72 = *((_QWORD *)v1 + 33);
                do
                {
                  v74 = *(void **)(v72 - 24);
                  v72 -= 24;
                  v73 = v74;
                  if (v74)
                  {
                    *(_QWORD *)(v67 - 16) = v73;
                    operator delete(v73);
                  }
                  v67 = v72;
                }
                while (v72 != v71);
              }
              *((_QWORD *)v1 + 33) = v71;
            }
          }
          else
          {
            std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v65, v70 - v69);
          }
        }
        v75 = *v65 + 24 * (int)v66;
        v77 = (uint64_t *)(v75 + 8);
        v76 = *(char **)(v75 + 8);
        v78 = *(_QWORD *)(v75 + 16);
        if ((unint64_t)v76 >= v78)
          break;
        *(_DWORD *)v76 = v64;
        *v77 = (uint64_t)(v76 + 4);
        if (++v64 == v63)
          goto LABEL_107;
      }
      v79 = *(char **)v75;
      v80 = (uint64_t)&v76[-*(_QWORD *)v75];
      v81 = v80 >> 2;
      v82 = (v80 >> 2) + 1;
      if (v82 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v83 = v78 - (_QWORD)v79;
      if (v83 >> 1 > v82)
        v82 = v83 >> 1;
      v84 = (unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v82;
      if (v84)
        break;
      v85 = 0;
      v86 = (_DWORD *)(4 * v81);
      *(_DWORD *)(4 * v81) = v64;
      v87 = 4 * v81 + 4;
      if (v76 != v79)
        goto LABEL_98;
LABEL_104:
      *(_QWORD *)v75 = v86;
      *v77 = v87;
      *(_QWORD *)(v75 + 16) = &v85[4 * v84];
      if (v79)
        operator delete(v79);
      v1 = v158;
      v65 = v160;
      v63 = v163;
      *v77 = v87;
      if (++v64 == v163)
      {
LABEL_107:
        v4 = *((_QWORD *)v1 + 7);
        goto LABEL_108;
      }
    }
    if (v84 >> 62)
LABEL_180:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v85 = operator new(4 * v84);
    v86 = &v85[4 * v81];
    *v86 = v64;
    v87 = (uint64_t)(v86 + 1);
    if (v76 == v79)
      goto LABEL_104;
LABEL_98:
    v88 = v76 - 4 - v79;
    if (v88 < 0x2C)
      goto LABEL_185;
    if ((unint64_t)(v76 - &v85[v80]) < 0x20)
      goto LABEL_185;
    v89 = (v88 >> 2) + 1;
    v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
    v91 = &v76[-v90];
    v86 = (_DWORD *)((char *)v86 - v90);
    v92 = &v85[4 * v81 - 16];
    v93 = v76 - 16;
    v94 = v89 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v95 = *(_OWORD *)v93;
      *(v92 - 1) = *((_OWORD *)v93 - 1);
      *v92 = v95;
      v92 -= 2;
      v93 -= 32;
      v94 -= 8;
    }
    while (v94);
    v76 = v91;
    if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_185:
      do
      {
        v96 = *((_DWORD *)v76 - 1);
        v76 -= 4;
        *--v86 = v96;
      }
      while (v76 != v79);
    }
    goto LABEL_104;
  }
LABEL_108:
  v164 = (void **)((char *)v1 + 352);
  *((_QWORD *)v1 + 45) = *((_QWORD *)v1 + 44);
  v97 = (_QWORD *)((char *)v1 + 328);
  v98 = *(int *)(v4 + 24);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::assign((char **)v1 + 41, v98, &__p);
  v99 = *((_QWORD *)v1 + 7);
  if (!*(_BYTE *)(*((_QWORD *)v1 + 6) + 148))
  {
LABEL_148:
    if (*(int *)(v99 + 24) < 1)
      return;
    v132 = 0;
    while (1)
    {
      v134 = *(_QWORD *)(*((_QWORD *)v1 + 17) + 8 * v132 + 8);
      if (*(_DWORD *)(v134 + 16) == 2 && **(_QWORD **)(v134 + 24) == *(_QWORD *)(*(_QWORD *)(v134 + 24) + 8))
        goto LABEL_152;
      v136 = (char *)*((_QWORD *)v1 + 45);
      v135 = *((_QWORD *)v1 + 46);
      if ((unint64_t)v136 >= v135)
        break;
      *(_DWORD *)v136 = v132;
      v133 = (uint64_t)(v136 + 4);
LABEL_151:
      *((_QWORD *)v1 + 45) = v133;
      *(_QWORD *)(*((_QWORD *)v1 + 41) + ((v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v132;
LABEL_152:
      if ((uint64_t)++v132 >= *(int *)(v99 + 24))
        return;
    }
    v137 = (char *)*v164;
    v138 = v136 - (_BYTE *)*v164;
    v139 = v138 >> 2;
    v140 = (v138 >> 2) + 1;
    if (v140 >> 62)
      goto LABEL_179;
    v141 = v135 - (_QWORD)v137;
    if (v141 >> 1 > v140)
      v140 = v141 >> 1;
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
      v142 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v142 = v140;
    if (v142)
    {
      if (v142 >> 62)
        goto LABEL_180;
      v143 = operator new(4 * v142);
      v144 = &v143[4 * v139];
      *v144 = v132;
      v133 = (uint64_t)(v144 + 1);
      if (v136 != v137)
        goto LABEL_165;
    }
    else
    {
      v143 = 0;
      v144 = (_DWORD *)(4 * v139);
      *(_DWORD *)(4 * v139) = v132;
      v133 = 4 * v139 + 4;
      if (v136 != v137)
      {
LABEL_165:
        v145 = v136 - 4 - v137;
        if (v145 >= 0x2C)
        {
          v146 = v136 - &v143[v138];
          v1 = v158;
          if (v146 >= 0x20)
          {
            v147 = (v145 >> 2) + 1;
            v148 = 4 * (v147 & 0x7FFFFFFFFFFFFFF8);
            v149 = &v136[-v148];
            v144 = (_DWORD *)((char *)v144 - v148);
            v150 = &v143[4 * v139 - 16];
            v151 = v136 - 16;
            v152 = v147 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v153 = *(_OWORD *)v151;
              *(v150 - 1) = *((_OWORD *)v151 - 1);
              *v150 = v153;
              v150 -= 2;
              v151 -= 32;
              v152 -= 8;
            }
            while (v152);
            v136 = v149;
            if (v147 == (v147 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_174;
          }
        }
        else
        {
          v1 = v158;
        }
        do
        {
          v154 = *((_DWORD *)v136 - 1);
          v136 -= 4;
          *--v144 = v154;
        }
        while (v136 != v137);
LABEL_174:
        *((_QWORD *)v1 + 44) = v144;
        *((_QWORD *)v1 + 45) = v133;
        *((_QWORD *)v1 + 46) = &v143[4 * v142];
        if (v137)
        {
          operator delete(v137);
          v99 = *((_QWORD *)v1 + 7);
        }
        goto LABEL_151;
      }
    }
    v1 = v158;
    goto LABEL_174;
  }
  v100 = *(_QWORD *)(v99 + 80);
  v101 = (_QWORD *)(v100 + 8);
  if (!v100)
    v101 = 0;
  v102 = *(int *)(v99 + 72);
  if ((_DWORD)v102)
  {
    v157 = &v101[v102];
    while (1)
    {
      v161 = v101;
      v103 = *v101;
      v104 = *(int *)(v103 + 16);
      if ((_DWORD)v104)
        break;
LABEL_113:
      v101 = v161 + 1;
      if (v161 + 1 == v157)
        goto LABEL_146;
    }
    v105 = *(int **)(v103 + 24);
    v106 = &v105[v104];
    while (2)
    {
      if (~*v105 <= *v105)
        v108 = *v105;
      else
        v108 = ~*v105;
      v109 = (unint64_t)v108 >> 6;
      v110 = *(_QWORD *)(*v97 + 8 * v109);
      if (((1 << v108) & v110) != 0)
        goto LABEL_118;
      v111 = *(_QWORD *)(*((_QWORD *)v1 + 17) + 8 * v108 + 8);
      if (*(_DWORD *)(v111 + 16) == 2 && **(_QWORD **)(v111 + 24) == *(_QWORD *)(*(_QWORD *)(v111 + 24) + 8))
        goto LABEL_118;
      *(_QWORD *)(*v97 + 8 * v109) = (1 << v108) | v110;
      v113 = (int *)*((_QWORD *)v1 + 45);
      v112 = *((_QWORD *)v1 + 46);
      if ((unint64_t)v113 < v112)
      {
        *v113 = v108;
        v107 = (uint64_t)(v113 + 1);
        goto LABEL_117;
      }
      v114 = (int *)*v164;
      v115 = (char *)v113 - (_BYTE *)*v164;
      v116 = v115 >> 2;
      v117 = (v115 >> 2) + 1;
      if (v117 >> 62)
LABEL_179:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v118 = v112 - (_QWORD)v114;
      if (v118 >> 1 > v117)
        v117 = v118 >> 1;
      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
        v119 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v119 = v117;
      if (v119)
      {
        if (v119 >> 62)
          goto LABEL_180;
        v120 = operator new(4 * v119);
        v121 = (int *)&v120[4 * v116];
        *v121 = v108;
        v107 = (uint64_t)(v121 + 1);
        if (v113 == v114)
        {
LABEL_143:
          v131 = &v120[4 * v119];
          v1 = v158;
          *((_QWORD *)v158 + 44) = v121;
          *((_QWORD *)v158 + 45) = v107;
          *((_QWORD *)v158 + 46) = v131;
          if (v114)
            operator delete(v114);
LABEL_117:
          *((_QWORD *)v1 + 45) = v107;
LABEL_118:
          if (++v105 == v106)
            goto LABEL_113;
          continue;
        }
      }
      else
      {
        v120 = 0;
        v121 = (int *)(4 * v116);
        *(_DWORD *)(4 * v116) = v108;
        v107 = 4 * v116 + 4;
        if (v113 == v114)
          goto LABEL_143;
      }
      break;
    }
    v122 = (char *)(v113 - 1) - (char *)v114;
    if (v122 < 0x2C)
      goto LABEL_186;
    if ((unint64_t)((char *)v113 - &v120[v115]) < 0x20)
      goto LABEL_186;
    v123 = (v122 >> 2) + 1;
    v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
    v125 = &v113[v124 / 0xFFFFFFFFFFFFFFFCLL];
    v121 = (int *)((char *)v121 - v124);
    v126 = &v120[4 * v116 - 16];
    v127 = v113 - 4;
    v128 = v123 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v129 = *(_OWORD *)v127;
      *(v126 - 1) = *((_OWORD *)v127 - 1);
      *v126 = v129;
      v126 -= 2;
      v127 -= 8;
      v128 -= 8;
    }
    while (v128);
    v113 = v125;
    if (v123 != (v123 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_186:
      do
      {
        v130 = *--v113;
        *--v121 = v130;
      }
      while (v113 != v114);
    }
    goto LABEL_143;
  }
LABEL_146:
  if (*((_QWORD *)v1 + 44) == *((_QWORD *)v1 + 45))
  {
    v99 = *((_QWORD *)v1 + 7);
    goto LABEL_148;
  }
}

void sub_22DA90DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA90DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA90DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NeighborhoodGeneratorHelper::Synchronize(operations_research::sat::NeighborhoodGeneratorHelper *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BOOL4 IsEmpty;
  BOOL v26;
  uint64_t v27;
  unsigned __int8 **v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  absl::lts_2020_02_25::Mutex *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  absl::lts_2020_02_25::Mutex *v47;
  char __p[17];
  char v49;
  unint64_t v50;
  void *v51;
  unint64_t v52[3];
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  int *v59;
  int *v60;
  uint64_t v61;

  v3 = (operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 248);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 248), a2);
  v11 = (_QWORD *)*((_QWORD *)this + 10);
  if (v11)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    operations_research::sat::SharedBoundsManager::GetChangedBounds(v11, (absl::lts_2020_02_25::Mutex *)*((unsigned int *)this + 16), &v59, &v56, &v53);
    v13 = v59;
    if (v60 != v59)
    {
      v14 = 0;
      v47 = v3;
      while (1)
      {
        v15 = v13[v14];
        v16 = *((_QWORD *)v56 + v14);
        v17 = *((_QWORD *)v53 + v14);
        if (*_MergedGlobals_5[0] >= 3
          && (_MergedGlobals_5[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)_MergedGlobals_5, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_lns.cc", (const char *)3))&& *off_2540793F8[0] >= 3&& (off_2540793F8[0] != &google::kLogSiteUninitialized|| google::InitVLOG3__((google *)off_2540793F8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_lns.cc", (const char *)3)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v52, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 71);
          v18 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Variable: ", 10);
          v19 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" old domain: [", 14);
          v20 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
          v21 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"] new domain: [", 15);
          v22 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
          v23 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
          google::LogMessage::~LogMessage((google::LogMessage *)v52);
        }
        v24 = *(_QWORD *)(*((_QWORD *)this + 17) + 8 * v15 + 8);
        operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v24 + 24), *(int *)(v24 + 16), v52, v12);
        operations_research::Domain::Domain(__p, v16, v17);
        operations_research::Domain::IntersectionWith(v52, (const operations_research::Domain *)__p, &v50);
        if ((__p[0] & 1) != 0)
          operator delete(*(void **)&__p[8]);
        IsEmpty = operations_research::Domain::IsEmpty((operations_research::Domain *)&v50);
        v26 = IsEmpty;
        if (IsEmpty)
        {
          v27 = *((_QWORD *)this + 11);
          v49 = 16;
          strcpy(__p, "LNS base problem");
          operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(v27, (absl::lts_2020_02_25::Mutex *)__p);
          if (v49 < 0)
          {
            operator delete(*(void **)__p);
            v28 = (unsigned __int8 **)*((_QWORD *)this + 9);
            if (!v28)
              goto LABEL_29;
LABEL_28:
            absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v28, v4);
            atomic_store(1u, v28[3]);
            absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v28, v39, v40, v41, v42, v43, v44, v45);
            goto LABEL_29;
          }
          v28 = (unsigned __int8 **)*((_QWORD *)this + 9);
          if (v28)
            goto LABEL_28;
        }
        else
        {
          v29 = *(_QWORD *)(*((_QWORD *)this + 17) + 8 * v15 + 8);
          *(_DWORD *)(v29 + 16) = 0;
          v30 = (unsigned int *)(v29 + 16);
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v29 + 16), v50 >> 1);
          if ((v50 & 1) != 0)
            v31 = (uint64_t *)v51;
          else
            v31 = (uint64_t *)&v51;
          if (v50 >= 2)
          {
            v32 = &v31[2 * (v50 >> 1)];
            v33 = *(_DWORD *)(v29 + 16);
            do
            {
              v34 = *v31;
              v35 = *(_DWORD *)(v29 + 20);
              v36 = v33 + 1;
              if (v33 == v35)
              {
                google::protobuf::RepeatedField<long long>::Reserve(v30, v33 + 1);
                v35 = *(_DWORD *)(v29 + 20);
              }
              v37 = *(_QWORD *)(v29 + 24);
              *(_QWORD *)(v37 + 8 * v33) = v34;
              *(_DWORD *)(v29 + 16) = v36;
              v38 = v31[1];
              v33 += 2;
              if (v36 == v35)
              {
                google::protobuf::RepeatedField<long long>::Reserve(v30, v33);
                v37 = *(_QWORD *)(v29 + 24);
              }
              *(_QWORD *)(v37 + 8 * v36) = v38;
              *v30 = v33;
              v31 += 2;
            }
            while (v31 != v32);
          }
        }
LABEL_29:
        if ((v50 & 1) != 0)
        {
          operator delete(v51);
          if ((v52[0] & 1) == 0)
          {
LABEL_31:
            if (v26)
              goto LABEL_45;
            goto LABEL_35;
          }
        }
        else if ((v52[0] & 1) == 0)
        {
          goto LABEL_31;
        }
        operator delete((void *)v52[1]);
        if (v26)
        {
LABEL_45:
          if (v53)
          {
            v54 = v53;
            operator delete(v53);
          }
          v46 = v56;
          v3 = v47;
          if (v56)
            goto LABEL_41;
          goto LABEL_42;
        }
LABEL_35:
        ++v14;
        v13 = v59;
        if (v14 >= v60 - v59)
        {
          v3 = v47;
          if (v59 != v60)
            operations_research::sat::NeighborhoodGeneratorHelper::RecomputeHelperData(this);
          break;
        }
      }
    }
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    v46 = v56;
    if (v56)
    {
LABEL_41:
      v57 = v46;
      operator delete(v46);
    }
LABEL_42:
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock(v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_22DA91274(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, absl::lts_2020_02_25::Mutex *a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,void *a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;

  if (__p)
  {
    operator delete(__p);
    v30 = a27;
    if (!a27)
    {
LABEL_3:
      v31 = *(void **)(v28 - 112);
      if (!v31)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v30 = a27;
    if (!a27)
      goto LABEL_3;
  }
  operator delete(v30);
  v31 = *(void **)(v28 - 112);
  if (!v31)
  {
LABEL_5:
    absl::lts_2020_02_25::Mutex::Unlock(a9, a2, a3, a4, a5, a6, a7, a8);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v28 - 104) = v31;
  operator delete(v31);
  goto LABEL_5;
}

void std::vector<std::vector<int>>::assign(uint64_t a1, unint64_t a2, char **a3)
{
  uint64_t v6;
  char **v7;
  char **v8;
  char **v9;
  char **v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  int64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - *(_QWORD *)a1) >> 3) >= a2)
  {
    v13 = (*(_QWORD *)(a1 + 8) - (_QWORD)v7) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (*(_QWORD *)(a1 + 8) - (_QWORD)v7) / 24;
    for (; v14; --v14)
    {
      if (v7 != a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v7, *a3, a3[1], (a3[1] - *a3) >> 2);
      v7 += 3;
    }
    if (a2 <= v13)
    {
      v23 = *(_QWORD *)(a1 + 8);
      v24 = *(_QWORD *)a1 + 24 * a2;
      if (v23 != v24)
      {
        v25 = *(_QWORD *)(a1 + 8);
        do
        {
          v27 = *(void **)(v25 - 24);
          v25 -= 24;
          v26 = v27;
          if (v27)
          {
            *(_QWORD *)(v23 - 16) = v26;
            operator delete(v26);
          }
          v23 = v25;
        }
        while (v25 != v24);
      }
      *(_QWORD *)(a1 + 8) = v24;
    }
    else
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        v20 = *a3;
        v19 = a3[1];
        v21 = v19 - *a3;
        if (v19 != *a3)
        {
          if (v21 < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v22 = (char *)operator new(v19 - *a3);
          *v15 = v22;
          v15[1] = v22;
          v18 = &v22[4 * (v21 >> 2)];
          v15[2] = v18;
          memcpy(v22, v20, v21);
          v15[1] = v18;
        }
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      *(_QWORD *)(a1 + 8) = v16;
    }
  }
  else
  {
    if (v7)
    {
      v8 = *(char ***)(a1 + 8);
      v9 = *(char ***)a1;
      if (v8 != v7)
      {
        v10 = *(char ***)(a1 + 8);
        do
        {
          v12 = *(v10 - 3);
          v10 -= 3;
          v11 = v12;
          if (v12)
          {
            *(v8 - 2) = v11;
            operator delete(v11);
          }
          v8 = v10;
        }
        while (v10 != v7);
        v9 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v9);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_45;
    v28 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v29 = 2 * v28;
    if (2 * v28 <= a2)
      v29 = a2;
    v30 = v28 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v29;
    if (v30 > 0xAAAAAAAAAAAAAAALL)
LABEL_45:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v31 = 3 * v30;
    v32 = operator new(24 * v30);
    v33 = v32;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = v32;
    *(_QWORD *)(a1 + 16) = &v32[v31];
    v34 = *a3;
    v35 = a3[1] - *a3;
    if (v35)
    {
      if (v35 < 0)
      {
        *v32 = 0;
        v32[1] = 0;
        v32[2] = 0;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      v36 = 24 * a2;
      v37 = v32;
      do
      {
        *v37 = 0;
        v37[1] = 0;
        v37[2] = 0;
        v38 = (char *)operator new(v35);
        *v37 = v38;
        v37[1] = v38;
        v39 = &v38[4 * (v35 >> 2)];
        v37[2] = v39;
        memcpy(v38, v34, v35);
        v37[1] = v39;
        v37 += 3;
        v36 -= 24;
      }
      while (v36);
    }
    else
    {
      bzero(v32, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    *(_QWORD *)(a1 + 8) = &v33[3 * a2];
  }
}

void sub_22DA91668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_22DA91688(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22DA91690(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_22DA916B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void operations_research::sat::Neighborhood::~Neighborhood(void **this)
{
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(this + 1));
  }
  else
  {
    operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(this + 1));
  }
}

void operations_research::sat::NeighborhoodGeneratorHelper::FixGivenVariables(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  operations_research::sat::CpModelProto *v9;
  uint64_t v10;
  _QWORD *v11;
  operations_research::sat::PartialVariableAssignment *v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::Arena *v21;
  uint64_t v22;
  google::protobuf::Arena *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37[2];
  uint64_t *v38;
  int v39;

  *(_WORD *)a4 = 0;
  v8 = a4 + 8;
  v9 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a4 + 8), 0);
  *(_QWORD *)(a4 + 152) = 0;
  *(_BYTE *)(a4 + 183) = 0;
  *(_BYTE *)(a4 + 160) = 0;
  *(_WORD *)a4 = 1;
  operations_research::sat::CpModelProto::CopyFrom(v9, *(const operations_research::sat::CpModelProto **)(a1 + 56));
  if (v8 != a1 + 104)
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a4 + 24, a1 + 120);
  v10 = *(_QWORD *)(a4 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
  {
    if (*v11)
      goto LABEL_7;
  }
  else if (v11)
  {
    goto LABEL_7;
  }
  v12 = *(operations_research::sat::PartialVariableAssignment **)(a4 + 136);
  if (v12)
  {
    operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v12);
    MEMORY[0x22E31DF78]();
  }
LABEL_7:
  *(_QWORD *)(a4 + 136) = 0;
  LODWORD(v13) = *(_DWORD *)(a4 + 32);
  if ((int)v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_QWORD *)(a4 + 136);
      if (v15)
      {
        v17 = *(unsigned int *)(v15 + 16);
        v16 = (unsigned int *)(v15 + 16);
        v18 = v17 + 1;
        if ((_DWORD)v17 == *(_DWORD *)(v15 + 20))
          goto LABEL_12;
      }
      else
      {
        v22 = *(_QWORD *)(a4 + 16);
        v23 = (google::protobuf::Arena *)(v22 & 0xFFFFFFFFFFFFFFFELL);
        if ((v22 & 1) != 0)
          v23 = *(google::protobuf::Arena **)v23;
        v15 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v23);
        *(_QWORD *)(a4 + 136) = v15;
        v17 = *(unsigned int *)(v15 + 16);
        v16 = (unsigned int *)(v15 + 16);
        v18 = v17 + 1;
        if ((_DWORD)v17 == *(_DWORD *)(v15 + 20))
        {
LABEL_12:
          google::protobuf::RepeatedField<int>::Reserve(v16, v18);
          v19 = *(_QWORD *)(a4 + 136);
          *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v17) = i;
          *(_DWORD *)(v15 + 16) = v18;
          v15 = v19;
          if (!v19)
          {
            v20 = *(_QWORD *)(a4 + 16);
            v21 = (google::protobuf::Arena *)(v20 & 0xFFFFFFFFFFFFFFFELL);
            if ((v20 & 1) != 0)
              v21 = *(google::protobuf::Arena **)v21;
            v15 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v21);
            *(_QWORD *)(a4 + 136) = v15;
          }
          goto LABEL_20;
        }
      }
      *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v17) = i;
      *(_DWORD *)(v15 + 16) = v18;
LABEL_20:
      v24 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * i);
      v25 = *(unsigned int *)(v15 + 40);
      if ((_DWORD)v25 == *(_DWORD *)(v15 + 44))
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 40), v25 + 1);
      *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v25) = v24;
      *(_DWORD *)(v15 + 40) = v25 + 1;
      v13 = *(int *)(a4 + 32);
    }
  }
  v26 = *a3;
  v27 = a3[1];
  v28 = *a3 == v27;
  *(_BYTE *)(a4 + 1) = *a3 != v27;
  if (!v28)
  {
    LODWORD(v37[0]) = *(_DWORD *)(a2 + 16);
    v39 = v13;
    if (LODWORD(v37[0]) == (_DWORD)v13)
    {
      if (v26 == v27)
        return;
      goto LABEL_27;
    }
    v38 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v37, (int)&v39, "initial_solution.solution_size() == neighborhood.cp_model.variables_size()");
    if (v38)
    {
      google::LogMessageFatal::LogMessageFatal(v37, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 191, &v38);
      google::LogMessage::stream((google::LogMessage *)v37);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v37);
    }
    v26 = *a3;
    v27 = a3[1];
    if (*a3 != v27)
    {
      do
      {
LABEL_27:
        v29 = *v26;
        v30 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8 * v29 + 8);
        *(_DWORD *)(v30 + 16) = 0;
        v31 = *(_QWORD *)(a2 + 24);
        v32 = *(_QWORD *)(v31 + 8 * v29);
        v33 = *(_DWORD *)(v30 + 20);
        if (v33)
        {
          v34 = v30;
        }
        else
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v30 + 16), 1);
          v34 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8 * v29 + 8);
          v31 = *(_QWORD *)(a2 + 24);
          v33 = *(_DWORD *)(v34 + 20);
        }
        **(_QWORD **)(v30 + 24) = v32;
        *(_DWORD *)(v30 + 16) = 1;
        v35 = *(_QWORD *)(v31 + 8 * v29);
        v36 = *(unsigned int *)(v34 + 16);
        if ((_DWORD)v36 == v33)
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v34 + 16), v36 + 1);
        *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8 * v36) = v35;
        *(_DWORD *)(v34 + 16) = v36 + 1;
        ++v26;
      }
      while (v26 != v27);
    }
  }
}

void sub_22DA919F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DA919FC(_Unwind_Exception *a1)
{
  void **v1;

  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_22DA91A10(_Unwind_Exception *a1)
{
  void **v1;

  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_22DA91A24(_Unwind_Exception *a1)
{
  void **v1;

  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_22DA91A38(_Unwind_Exception *a1)
{
  void **v1;

  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_22DA91A4C(_Unwind_Exception *a1)
{
  void **v1;

  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::NeighborhoodGeneratorHelper::RemoveMarkedConstraints(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  operations_research::sat::CpModelProto *v7;
  int *v8;
  int *v9;

  *(_WORD *)a3 = 0;
  v6 = a3 + 8;
  v7 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a3 + 8), 0);
  *(_QWORD *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 183) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_WORD *)a3 = 1;
  operations_research::sat::CpModelProto::CopyFrom(v7, *(const operations_research::sat::CpModelProto **)(a1 + 56));
  if (v6 != a1 + 104)
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a3 + 24, a1 + 120);
  v9 = *a2;
  v8 = a2[1];
  if (v9 != v8)
  {
    *(_BYTE *)(a3 + 1) = 0;
    do
      operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*(_QWORD *)(a3 + 64) + 8 * *v9++ + 8));
    while (v9 != v8);
  }
}

void sub_22DA91B04(_Unwind_Exception *a1)
{
  void **v1;

  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_22DA91B18(_Unwind_Exception *a1)
{
  void **v1;

  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::NeighborhoodGeneratorHelper::RelaxGivenVariables(_QWORD *a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  int *v13;
  int *v14;
  unint64_t v15;
  int *v16;
  int *v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  int *v27;
  unint64_t v28;
  int *v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;

  v8 = *(int *)(a1[7] + 24);
  v45 = 0;
  v46 = 0;
  v44 = 0;
  if (!(_DWORD)v8)
  {
    v11 = 0;
    v13 = *a3;
    v14 = a3[1];
    if (*a3 == v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  if ((v8 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v9 = (v8 - 1) >> 6;
  v10 = operator new(8 * (v9 + 1));
  v11 = v10;
  v45 = v8;
  v46 = v9 + 1;
  v44 = v10;
  if (v8 >= 0x41)
    v12 = (v8 - 1) >> 6;
  else
    v12 = 0;
  v10[v12] = 0;
  if (v8 >= 0x40)
    bzero(v10, 8 * (v8 >> 6));
  if ((v8 & 0x3F) != 0)
    v11[v8 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v8 & 0x3F));
  v13 = *a3;
  v14 = a3[1];
  if (*a3 != v14)
  {
    do
    {
LABEL_13:
      v15 = *v13++;
      *(_QWORD *)((char *)v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    }
    while (v13 != v14);
  }
LABEL_14:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v17 = (int *)a1[44];
  v16 = (int *)a1[45];
  if (v17 != v16)
  {
    v38 = a4;
    v39 = a2;
    v40 = (int *)a1[45];
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = v42;
    while (1)
    {
      v22 = *v17;
      if (((*(_QWORD *)((char *)v11 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      {
        if (v18 >= v19)
        {
          v23 = (v18 - (char *)v20) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
          {
            v42 = v21;
            v43 = v19;
            v41 = v20;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v19 - (char *)v20) >> 1 > v24)
            v24 = (v19 - (char *)v20) >> 1;
          if ((unint64_t)(v19 - (char *)v20) >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            if (v25 >> 62)
            {
              v42 = v21;
              v43 = v19;
              v41 = v20;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v26 = operator new(4 * v25);
            v27 = (int *)&v26[4 * v23];
            *v27 = v22;
            v21 = (uint64_t)(v27 + 1);
            if (v18 == (char *)v20)
              goto LABEL_34;
LABEL_31:
            v28 = v18 - 4 - (char *)v20;
            if (v28 < 0xBC)
            {
              v29 = (int *)v18;
              goto LABEL_33;
            }
            if (&v26[v18 - (char *)v20 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v18 - (char *)v20 - 4])
            {
              v29 = (int *)v18;
              goto LABEL_33;
            }
            if (&v18[-(v28 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v18 - 4)
            {
              v29 = (int *)v18;
              goto LABEL_33;
            }
            if ((unint64_t)((char *)v20 - v26) < 0x20)
            {
              v29 = (int *)v18;
              goto LABEL_33;
            }
            v32 = (v28 >> 2) + 1;
            v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
            v29 = (int *)&v18[-v33];
            v27 = (int *)((char *)v27 - v33);
            v34 = &v26[4 * v23 - 16];
            v35 = v18 - 16;
            v36 = v32 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v37 = *(_OWORD *)v35;
              *(v34 - 1) = *((_OWORD *)v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 32;
              v36 -= 8;
            }
            while (v36);
            if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_33:
                v30 = *--v29;
                *--v27 = v30;
              }
              while (v29 != v20);
            }
          }
          else
          {
            v26 = 0;
            v27 = (int *)(4 * v23);
            *(_DWORD *)(4 * v23) = v22;
            v21 = 4 * v23 + 4;
            if (v18 != (char *)v20)
              goto LABEL_31;
          }
LABEL_34:
          v19 = &v26[4 * v25];
          if (v20)
          {
            v31 = (char *)v21;
            operator delete(v20);
            v21 = (uint64_t)v31;
            v18 = v31;
          }
          else
          {
            v18 = (char *)v21;
          }
          v20 = v27;
          v16 = v40;
          goto LABEL_17;
        }
        *(_DWORD *)v18 = v22;
        v18 += 4;
        v21 = (uint64_t)v18;
      }
LABEL_17:
      if (++v17 == v16)
      {
        v42 = v21;
        v43 = v19;
        a2 = v39;
        a4 = v38;
        goto LABEL_50;
      }
    }
  }
  v20 = 0;
LABEL_50:
  v41 = v20;
  operations_research::sat::NeighborhoodGeneratorHelper::FixGivenVariables((uint64_t)a1, a2, &v41, a4);
  if (v20)
    operator delete(v20);
  if (v11)
    operator delete(v11);
}

void sub_22DA91EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  if (v17)
  {
    operator delete(v17);
    v16 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::NeighborhoodGenerator::ReadyToGenerate(operations_research::sat::NeighborhoodGenerator *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v2;
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 88);
  v3 = (absl::lts_2020_02_25::Mutex *)(v2 + 312);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 312), a2);
  v6 = v2 + 352;
  v5 = *(_QWORD *)(v2 + 352);
  v4 = *(_QWORD *)(v6 + 8);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v7, v8, v9, v10, v11, v12, v13);
  return (int)(-858993459 * ((unint64_t)(v4 - v5) >> 3)) > 0;
}

double operations_research::sat::NeighborhoodGenerator::GetUCBScore(operations_research::sat::NeighborhoodGenerator *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  long double v15;

  v4 = (operations_research::sat::NeighborhoodGenerator *)((char *)this + 40);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::NeighborhoodGenerator *)((char *)this + 40), a2);
  v12 = *((_QWORD *)this + 12);
  if (v12 >= 11)
  {
    v14 = *((double *)this + 16);
    v15 = log((double)(uint64_t)a2);
    v13 = sqrt((v15 + v15) / (double)v12) + v14;
  }
  else
  {
    v13 = INFINITY;
  }
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
  return v13;
}

void operations_research::sat::NeighborhoodGenerator::Synchronize(operations_research::sat::NeighborhoodGenerator *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  absl::lts_2020_02_25::Mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  int v30;
  uint64_t v31;
  double v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  char v42;

  v3 = (operations_research::sat::NeighborhoodGenerator *)((char *)this + 40);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::NeighborhoodGenerator *)((char *)this + 40), a2);
  v4 = *((_QWORD *)this + 6);
  v5 = (char *)*((_QWORD *)this + 7);
  v6 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v5[-v4] >> 4));
  if (v5 == (char *)v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *,false>(v4, v5, (uint64_t)&v42, v7, 1);
  v15 = *((_QWORD *)this + 6);
  v16 = *((_QWORD *)this + 7);
  if (v15 == v16)
  {
    v18 = 0;
    goto LABEL_30;
  }
  v17 = 0;
  v18 = 0;
  do
  {
    (*(void (**)(operations_research::sat::NeighborhoodGenerator *, uint64_t))(*(_QWORD *)this + 40))(this, v15);
    ++*((_QWORD *)this + 12);
    if ((*(_DWORD *)(v15 + 8) - 3) > 1)
    {
      ++v18;
    }
    else
    {
      ++*((_QWORD *)this + 13);
      ++v17;
    }
    if ((*(unsigned int (**)(operations_research::sat::NeighborhoodGenerator *))(*(_QWORD *)this + 32))(this))
    {
      v21 = *(_QWORD *)(v15 + 64);
      v20 = *(_QWORD *)(v15 + 72);
    }
    else
    {
      v20 = *(_QWORD *)(v15 + 40);
      v21 = *(_QWORD *)(v15 + 56);
    }
    v22 = v20 - v21;
    v23 = ((v20 - v21) ^ v20) & (v21 ^ v20);
    v24 = (v20 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if (v23 >= 0)
      v24 = v22;
    if (v24 <= 0)
      v25 = *((_QWORD *)this + 14) + 1;
    else
      v25 = 0;
    *((_QWORD *)this + 14) = v25;
    v26 = *(double *)(v15 + 32);
    v27 = fmax((double)v24, 0.0) / (v26 + 1.0);
    v28 = *((_QWORD *)this + 12);
    v29 = *((double *)this + 16);
    if (v28 > 100)
      v19 = v27 * 0.1 + v29 * 0.9;
    else
      v19 = v29 + (v27 - v29) / (double)v28;
    *((double *)this + 15) = v26 + *((double *)this + 15);
    *((double *)this + 16) = v19;
    v15 += 80;
  }
  while (v15 != v16);
  v30 = v18 - v17;
  if (v18 == v17)
  {
LABEL_30:
    *((_QWORD *)this + 10) += 2 * v18;
    if (*((uint64_t *)this + 14) < 51)
      goto LABEL_32;
    goto LABEL_31;
  }
  if (v18 < v17)
  {
    v31 = *((_QWORD *)this + 10);
    v32 = *((double *)this + 9);
    v33 = v17 - v18;
    do
    {
      v34 = v31 + 1;
      v35 = 1.0 / sqrt((double)(v31 + 2)) + 1.0;
      v36 = 1.0 - (1.0 - v32) / v35;
      v32 = v32 * v35;
      if (v32 >= v36)
        v32 = v36;
      ++v31;
      --v33;
    }
    while (v33);
    *((double *)this + 9) = v32;
    *((_QWORD *)this + 10) = v34 + 2 * v18;
    if (*((uint64_t *)this + 14) < 51)
      goto LABEL_32;
LABEL_31:
    *((_QWORD *)this + 14) = 0;
    *((double *)this + 11) = fmin(*((double *)this + 11) * 1.02, 60.0);
    goto LABEL_32;
  }
  v37 = *((_QWORD *)this + 10);
  if (v17 < v18)
  {
    v38 = *((double *)this + 9);
    do
    {
      v39 = v37 + 2;
      ++v37;
      v40 = 1.0 / sqrt((double)v39) + 1.0;
      v41 = v38 / v40;
      v38 = 1.0 - (1.0 - v38) * v40;
      if (v41 >= v38)
        v38 = v41;
      --v30;
    }
    while (v30);
    *((double *)this + 9) = v38;
  }
  *((_QWORD *)this + 10) = v37 + 2 * v17;
  if (*((uint64_t *)this + 14) >= 51)
    goto LABEL_31;
LABEL_32:
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v8, v9, v10, v11, v12, v13, v14);
}

void sub_22DA922D0(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SimpleNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  int *begin;
  int *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  signed int v21;
  std::vector<int> v22;
  _QWORD v23[2];
  __int128 v24;

  v10 = *(_QWORD *)(a1 + 32);
  memset(&v22, 0, sizeof(v22));
  v12 = *(_BYTE **)(v10 + 352);
  v11 = *(_BYTE **)(v10 + 360);
  v13 = v11 - v12;
  if (v11 == v12)
  {
    begin = 0;
    v16 = 0;
  }
  else
  {
    if (v13 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    begin = (int *)operator new(v11 - v12);
    v15 = &begin[v13 >> 2];
    v22.__begin_ = begin;
    v22.__end_cap_.__value_ = v15;
    memcpy(begin, v12, v13);
    v22.__end_ = v15;
    v16 = 4 * (v13 >> 2);
    if (v16 >= 5)
    {
      v24 = xmmword_22DCE8C50;
      if (v15 - 1 > begin)
      {
        v17 = ((unint64_t)v16 >> 2) - 1;
        do
        {
          v23[0] = 0;
          v23[1] = v17;
          v18 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v24, a3, v23);
          if (v18)
          {
            v19 = *begin;
            *begin = begin[v18];
            begin[v18] = v19;
          }
          ++begin;
          --v17;
        }
        while (begin < v15 - 1);
        begin = v22.__begin_;
        v16 = (char *)v22.__end_ - (char *)v22.__begin_;
      }
    }
  }
  v20 = v16 >> 2;
  v21 = llround((1.0 - a5) * (double)(unint64_t)(v16 >> 2));
  if (v21 <= v20)
  {
    if (v21 < v20)
      v22.__end_ = &begin[v21];
  }
  else
  {
    std::vector<int>::__append(&v22, v21 - v20);
  }
  operations_research::sat::NeighborhoodGeneratorHelper::FixGivenVariables(*(_QWORD *)(a1 + 32), a2, &v22.__begin_, a4);
  if (v22.__begin_)
  {
    v22.__end_ = v22.__begin_;
    operator delete(v22.__begin_);
  }
}

void sub_22DA92488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::VariableGraphNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  operations_research::sat::CpModelProto *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  int v35;
  char *v36;
  int *v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int *v62;
  int *v63;
  uint64_t v64;
  int *v65;
  int *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  _DWORD *v76;
  unint64_t v77;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  unint64_t v86;
  int *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  int v99;
  char *v100;
  uint64_t v101;
  int v102;
  char *v103;
  uint64_t v104;
  char *v105;
  int64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  char *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  int v122;
  int v123;
  char *v124;
  char *v125;
  int64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  char *v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  unint64_t *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  int64x2_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  int *v158;
  uint64_t *v160;
  void *__p;
  char *v162;
  char *v163;
  void *v164;
  char *v165;
  char *v166;
  void *v167;
  char *v168;
  char *v169;
  uint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  __int128 v174;
  int64x2_t v175;
  __int128 v176;
  uint64_t v177;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = (*(_QWORD *)(v6 + 360) - *(_QWORD *)(v6 + 352)) >> 2;
  v8 = vcvtpd_s64_f64((double)(int)v7 * a5);
  if (v8 == (_DWORD)v7)
  {
    *(_WORD *)a4 = 0;
    v9 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a4 + 8), 0);
    *(_QWORD *)(a4 + 152) = 0;
    *(_BYTE *)(a4 + 183) = 0;
    *(_BYTE *)(a4 + 160) = 0;
    *(_WORD *)a4 = 1;
    operations_research::sat::CpModelProto::CopyFrom(v9, *(const operations_research::sat::CpModelProto **)(v6 + 56));
    if (a4 + 8 != v6 + 104)
      google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a4 + 24, v6 + 120);
    return;
  }
  v11 = *(int *)(*(_QWORD *)(v6 + 56) + 24);
  LODWORD(v173) = v8;
  LODWORD(v170) = 0;
  if (v8 < 1)
  {
    v170 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v173, (int)&v170, "target_size > 0");
    if (v170)
    {
      v149 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v173, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 367, &v170);
      google::LogMessage::stream((google::LogMessage *)v149);
      v150 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)" ", 1);
      std::ostream::operator<<();
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v173);
    }
  }
  v170 = 0;
  v171 = 0;
  v172 = 0;
  if ((_DWORD)v11)
  {
    if ((v11 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (v11 - 1) >> 6;
    v13 = (uint64_t *)operator new(8 * (v12 + 1));
    v171 = v11;
    v172 = v12 + 1;
    v170 = v13;
    if (v11 >= 0x41)
      v14 = (v11 - 1) >> 6;
    else
      v14 = 0;
    v15 = v13;
    v13[v14] = 0;
    if (v11 >= 0x40)
      bzero(v13, 8 * (v11 >> 6));
    if ((v11 & 0x3F) != 0)
      v15[v11 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v11 & 0x3F));
    v16 = v15;
  }
  else
  {
    v16 = 0;
  }
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v17 = *(_QWORD *)(a1 + 32);
  v160 = v16;
  if ((int)v7 < 1)
  {
    v19 = 0;
    v20 = 0;
    v18 = 0;
  }
  else
  {
    LODWORD(__p) = 0;
    HIDWORD(__p) = v7 - 1;
    v173 = (uint64_t)__p;
    v18 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&__p, a3, (int *)&v173);
    v20 = v165;
    v19 = (unint64_t)v166;
  }
  v21 = *(int *)(*(_QWORD *)(v17 + 352) + 4 * v18);
  *(uint64_t *)((char *)v16 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
  if ((unint64_t)v20 < v19)
  {
    *(_DWORD *)v20 = v21;
    v22 = (uint64_t)(v20 + 4);
    goto LABEL_36;
  }
  v23 = (char *)v164;
  v24 = v20 - (_BYTE *)v164;
  v25 = (v20 - (_BYTE *)v164) >> 2;
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 62)
    goto LABEL_198;
  v27 = v19 - (_QWORD)v164;
  if (v27 >> 1 > v26)
    v26 = v27 >> 1;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
    v28 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (v28)
  {
    if (v28 >> 62)
      goto LABEL_197;
    v29 = operator new(4 * v28);
    v30 = &v29[4 * v25];
    v31 = &v29[4 * v28];
    *v30 = v21;
    v22 = (uint64_t)(v30 + 1);
    v32 = v20 - v23;
    if (v20 != v23)
    {
LABEL_30:
      v33 = v32 - 4;
      if (v33 >= 0x2C && (unint64_t)(v20 - v29 - v24) >= 0x20)
      {
        v143 = (v33 >> 2) + 1;
        v144 = 4 * (v143 & 0x7FFFFFFFFFFFFFF8);
        v34 = &v20[-v144];
        v30 = (_DWORD *)((char *)v30 - v144);
        v145 = &v29[4 * v25 - 16];
        v146 = v20 - 16;
        v147 = v143 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v148 = *(_OWORD *)v146;
          *(v145 - 1) = *((_OWORD *)v146 - 1);
          *v145 = v148;
          v145 -= 2;
          v146 -= 32;
          v147 -= 8;
        }
        while (v147);
        v16 = v160;
        if (v143 == (v143 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          v164 = v30;
          v165 = (char *)v22;
          v166 = v31;
          if (!v23)
            goto LABEL_36;
          goto LABEL_35;
        }
      }
      else
      {
        v34 = v20;
        v16 = v160;
      }
      do
      {
        v35 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *--v30 = v35;
      }
      while (v34 != v23);
      goto LABEL_34;
    }
  }
  else
  {
    v29 = 0;
    v30 = (_DWORD *)(4 * v25);
    v31 = 0;
    *(_DWORD *)(4 * v25) = v21;
    v22 = 4 * v25 + 4;
    v32 = v20 - v23;
    if (v20 != v23)
      goto LABEL_30;
  }
  v16 = v160;
  v164 = v30;
  v165 = (char *)v22;
  v166 = v31;
  if (v23)
LABEL_35:
    operator delete(v23);
LABEL_36:
  v165 = (char *)v22;
  v36 = v168;
  v151 = a2;
  v152 = a4;
  if (v168 >= v169)
  {
    v38 = (char *)v167;
    v39 = v168 - (_BYTE *)v167;
    v40 = (v168 - (_BYTE *)v167) >> 2;
    v41 = v40 + 1;
    if (!((unint64_t)(v40 + 1) >> 62))
    {
      v42 = v169 - (_BYTE *)v167;
      if ((v169 - (_BYTE *)v167) >> 1 > v41)
        v41 = v42 >> 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
        v43 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (!v43)
      {
        v44 = 0;
        v45 = (char *)(4 * v40);
        v46 = 0;
        *(_DWORD *)(4 * v40) = v21;
        v47 = 4 * v40 + 4;
        v48 = v36 - v38;
        if (v36 == v38)
          goto LABEL_59;
LABEL_53:
        v49 = v48 - 4;
        if (v49 < 0x2C)
          goto LABEL_201;
        if ((unint64_t)(v36 - v44 - v39) < 0x20)
          goto LABEL_201;
        v50 = (v49 >> 2) + 1;
        v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        v52 = &v36[-v51];
        v45 -= v51;
        v53 = &v44[4 * v40 - 16];
        v54 = v36 - 16;
        v55 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v56 = *(_OWORD *)v54;
          *((_OWORD *)v53 - 1) = *((_OWORD *)v54 - 1);
          *(_OWORD *)v53 = v56;
          v53 -= 32;
          v54 -= 32;
          v55 -= 8;
        }
        while (v55);
        v36 = v52;
        if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_201:
          do
          {
            v57 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v45 - 1) = v57;
            v45 -= 4;
          }
          while (v36 != v38);
        }
LABEL_59:
        v167 = v45;
        v168 = (char *)v47;
        v169 = v46;
        if (v38)
          operator delete(v38);
        v16 = v160;
        v168 = (char *)v47;
        __p = 0;
        v162 = 0;
        v163 = 0;
        v37 = (int *)v164;
        if (v165 == v164)
          goto LABEL_177;
LABEL_62:
        v58 = 0;
        v59 = 0;
        v156 = v8;
        v157 = 0;
        v154 = vdupq_n_s64(2uLL);
        while (1)
        {
          v60 = v157;
          v162 = v157;
          v155 = v59;
          v61 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 304) + 24 * v37[v59];
          v63 = *(int **)v61;
          v62 = *(int **)(v61 + 8);
          v158 = v62;
          while (v63 != v62)
          {
            v64 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 280) + 24 * *v63;
            v66 = *(int **)v64;
            v65 = *(int **)(v64 + 8);
            while (v66 != v65)
            {
              v68 = *v66;
              v69 = v16[v68 >> 6];
              if (((1 << v68) & v69) == 0)
              {
                v16[v68 >> 6] = (1 << v68) | v69;
                if (v60 < v58)
                {
                  *(_DWORD *)v60 = v68;
                  v67 = (uint64_t)(v60 + 4);
                  goto LABEL_68;
                }
                v70 = (char *)__p;
                v71 = v60 - (_BYTE *)__p;
                v72 = (v60 - (_BYTE *)__p) >> 2;
                v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 62)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                if ((v58 - (_BYTE *)__p) >> 1 > v73)
                  v73 = (v58 - (_BYTE *)__p) >> 1;
                if ((unint64_t)(v58 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
                  v74 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v74 = v73;
                if (v74)
                {
                  if (v74 >> 62)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v75 = operator new(4 * v74);
                  v76 = &v75[4 * v72];
                  *v76 = v68;
                  v67 = (uint64_t)(v76 + 1);
                  if (v60 != v70)
                  {
LABEL_82:
                    v77 = v60 - 4 - v70;
                    if (v77 < 0xBC
                      || &v75[v71 - 4 - (v77 & 0xFFFFFFFFFFFFFFFCLL)] > &v75[v71 - 4]
                      || &v60[-(v77 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v60 - 4
                      || (unint64_t)(v60 - &v75[v71]) < 0x20)
                    {
                      v78 = v60;
                    }
                    else
                    {
                      v80 = (v77 >> 2) + 1;
                      v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
                      v78 = &v60[-v81];
                      v76 = (_DWORD *)((char *)v76 - v81);
                      v82 = &v75[4 * v72 - 16];
                      v83 = v60 - 16;
                      v84 = v80 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v85 = *(_OWORD *)v83;
                        *(v82 - 1) = *((_OWORD *)v83 - 1);
                        *v82 = v85;
                        v82 -= 2;
                        v83 -= 32;
                        v84 -= 8;
                      }
                      while (v84);
                      if (v80 == (v80 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_85:
                        v58 = &v75[4 * v74];
                        __p = v76;
                        v163 = v58;
                        if (!v70)
                          goto LABEL_68;
LABEL_89:
                        operator delete(v70);
LABEL_68:
                        v162 = (char *)v67;
                        v60 = (char *)v67;
                        v16 = v160;
                        goto LABEL_69;
                      }
                    }
                    do
                    {
                      v79 = *((_DWORD *)v78 - 1);
                      v78 -= 4;
                      *--v76 = v79;
                    }
                    while (v78 != v70);
                    goto LABEL_85;
                  }
                }
                else
                {
                  v75 = 0;
                  v76 = (_DWORD *)(4 * v72);
                  *(_DWORD *)(4 * v72) = v68;
                  v67 = 4 * v72 + 4;
                  if (v60 != v70)
                    goto LABEL_82;
                }
                v58 = &v75[4 * v74];
                __p = v76;
                v163 = v58;
                if (v70)
                  goto LABEL_89;
                goto LABEL_68;
              }
LABEL_69:
              ++v66;
            }
            ++v63;
            v62 = v158;
          }
          v157 = (char *)__p;
          if (v60 - (_BYTE *)__p >= 5 && v60 - 4 > __p)
          {
            v86 = (unint64_t)(v60 - (_BYTE *)__p) >> 2;
            v87 = (int *)__p;
            while (v86 == 1)
            {
LABEL_100:
              ++v87;
              --v86;
              if (v87 >= (int *)v60 - 1)
                goto LABEL_127;
            }
            if (!v86)
            {
              v173 = a3;
              v174 = xmmword_22DCE8C60;
              v175 = v154;
              v176 = xmmword_22DCE8C70;
              v177 = -1;
              v97 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(&v173);
              goto LABEL_125;
            }
            v88 = __clz(v86);
            if (((v86 << v88) & 0x7FFFFFFFFFFFFFFFLL) != 0)
              v89 = 64;
            else
              v89 = 63;
            v90 = v89 - v88;
            v173 = a3;
            *(_QWORD *)&v174 = v89 - v88;
            v91 = (v89 - v88) >> 5;
            if ((v90 & 0x1F) != 0)
              v92 = v91 + 1;
            else
              v92 = v91;
            v93 = v90 / v92;
            *((_QWORD *)&v174 + 1) = v93;
            v175.i64[0] = v92;
            v94 = (-1 << (v90 / v92)) & 0x100000000;
            if (v93 >= 0x40)
              v94 = 0;
            *(_QWORD *)&v176 = v94;
            if ((v94 ^ 0x100000000) > v94 / v92)
            {
              v93 = v90 / ++v92;
              *((_QWORD *)&v174 + 1) = v93;
              v175.i64[0] = v92;
              if (v93 > 0x3F)
              {
                v175.i64[1] = v92 - (v90 % v92);
                *(_QWORD *)&v176 = 0;
                LODWORD(v93) = 64;
                goto LABEL_122;
              }
              *(_QWORD *)&v176 = (-1 << (v90 / v92)) & 0x100000000;
            }
            v175.i64[1] = v92 - v90 % v92;
            if (v93 < 0x3F)
            {
              *((_QWORD *)&v176 + 1) = 0x80000000uLL >> v93 << (v93 + 1);
              v95 = 0xFFFFFFFF >> -(char)v93;
              if (!v93)
                v95 = 0;
              LODWORD(v177) = v95;
              if (v93 >= 0x1F)
                v96 = -1;
              else
                v96 = 0xFFFFFFFF >> ~(_BYTE)v93;
              goto LABEL_123;
            }
LABEL_122:
            *((_QWORD *)&v176 + 1) = 0;
            v98 = -(int)v93;
            v96 = -1;
            LODWORD(v177) = 0xFFFFFFFF >> v98;
LABEL_123:
            HIDWORD(v177) = v96;
            do
              v97 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(&v173);
            while (v97 >= v86);
LABEL_125:
            if (v97)
            {
              v99 = *v87;
              *v87 = v87[v97];
              v87[v97] = v99;
            }
            goto LABEL_100;
          }
LABEL_127:
          v100 = v157;
          if (v157 != v60)
            break;
LABEL_128:
          v16 = v160;
          if (v156 > (v168 - (_BYTE *)v167) >> 2)
          {
            v59 = v155 + 1;
            v37 = (int *)v164;
            if (v155 + 1 < (unint64_t)((v165 - (_BYTE *)v164) >> 2))
              continue;
          }
          goto LABEL_177;
        }
        while (1)
        {
          if (v156 <= (v168 - (_BYTE *)v167) >> 2)
            goto LABEL_128;
          v102 = *(_DWORD *)v100;
          v103 = v165;
          if (v165 < v166)
          {
            *(_DWORD *)v165 = v102;
            v104 = (uint64_t)(v103 + 4);
            goto LABEL_156;
          }
          v105 = (char *)v164;
          v106 = v165 - (_BYTE *)v164;
          v107 = (v165 - (_BYTE *)v164) >> 2;
          v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 62)
            goto LABEL_195;
          v109 = v166 - (_BYTE *)v164;
          if ((v166 - (_BYTE *)v164) >> 1 > v108)
            v108 = v109 >> 1;
          v110 = (unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v108;
          if (v110)
            break;
          v112 = 0;
          v113 = (char *)(4 * v107);
          *(_DWORD *)(4 * v107) = v102;
          v104 = 4 * v107 + 4;
          if (v103 != v105)
            goto LABEL_148;
LABEL_154:
          v164 = v113;
          v165 = (char *)v104;
          v166 = &v112[4 * v110];
          if (v105)
          {
            v123 = v102;
            operator delete(v105);
            v102 = v123;
          }
LABEL_156:
          v165 = (char *)v104;
          if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 328)
                           + (((unint64_t)v102 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v102) & 1) == 0)
            goto LABEL_133;
          v124 = v168;
          if (v168 >= v169)
          {
            v125 = (char *)v167;
            v126 = v168 - (_BYTE *)v167;
            v127 = (v168 - (_BYTE *)v167) >> 2;
            v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 62)
LABEL_195:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v129 = v169 - (_BYTE *)v167;
            if ((v169 - (_BYTE *)v167) >> 1 > v128)
              v128 = v129 >> 1;
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
              v130 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v130 = v128;
            if (v130)
            {
              if (v130 >> 62)
LABEL_194:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v131 = v102;
              v132 = (char *)operator new(4 * v130);
              v133 = &v132[4 * v127];
              *(_DWORD *)v133 = v131;
              v101 = (uint64_t)(v133 + 4);
              if (v124 == v125)
                goto LABEL_175;
LABEL_169:
              v134 = v124 - 4 - v125;
              if (v134 < 0x2C)
                goto LABEL_202;
              if ((unint64_t)(v124 - &v132[v126]) < 0x20)
                goto LABEL_202;
              v135 = (v134 >> 2) + 1;
              v136 = 4 * (v135 & 0x7FFFFFFFFFFFFFF8);
              v137 = &v124[-v136];
              v133 -= v136;
              v138 = &v132[4 * v127 - 16];
              v139 = v124 - 16;
              v140 = v135 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v141 = *(_OWORD *)v139;
                *((_OWORD *)v138 - 1) = *((_OWORD *)v139 - 1);
                *(_OWORD *)v138 = v141;
                v138 -= 32;
                v139 -= 32;
                v140 -= 8;
              }
              while (v140);
              v124 = v137;
              if (v135 != (v135 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_202:
                do
                {
                  v142 = *((_DWORD *)v124 - 1);
                  v124 -= 4;
                  *((_DWORD *)v133 - 1) = v142;
                  v133 -= 4;
                }
                while (v124 != v125);
              }
            }
            else
            {
              v132 = 0;
              v133 = (char *)(4 * v127);
              *(_DWORD *)(4 * v127) = v102;
              v101 = 4 * v127 + 4;
              if (v124 != v125)
                goto LABEL_169;
            }
LABEL_175:
            v167 = v133;
            v168 = (char *)v101;
            v169 = &v132[4 * v130];
            if (v125)
              operator delete(v125);
            goto LABEL_132;
          }
          *(_DWORD *)v168 = v102;
          v101 = (uint64_t)(v124 + 4);
LABEL_132:
          v168 = (char *)v101;
LABEL_133:
          v100 += 4;
          if (v100 == v60)
            goto LABEL_128;
        }
        if (v110 >> 62)
          goto LABEL_194;
        v111 = *(_DWORD *)v100;
        v112 = (char *)operator new(4 * v110);
        v102 = v111;
        v113 = &v112[4 * v107];
        *(_DWORD *)v113 = v111;
        v104 = (uint64_t)(v113 + 4);
        if (v103 == v105)
          goto LABEL_154;
LABEL_148:
        v114 = v103 - 4 - v105;
        if (v114 < 0x2C)
          goto LABEL_203;
        if ((unint64_t)(v103 - &v112[v106]) < 0x20)
          goto LABEL_203;
        v115 = (v114 >> 2) + 1;
        v116 = 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
        v117 = &v103[-v116];
        v113 -= v116;
        v118 = &v112[4 * v107 - 16];
        v119 = v103 - 16;
        v120 = v115 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v121 = *(_OWORD *)v119;
          *((_OWORD *)v118 - 1) = *((_OWORD *)v119 - 1);
          *(_OWORD *)v118 = v121;
          v118 -= 32;
          v119 -= 32;
          v120 -= 8;
        }
        while (v120);
        v103 = v117;
        if (v115 != (v115 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_203:
          do
          {
            v122 = *((_DWORD *)v103 - 1);
            v103 -= 4;
            *((_DWORD *)v113 - 1) = v122;
            v113 -= 4;
          }
          while (v103 != v105);
        }
        goto LABEL_154;
      }
      if (!(v43 >> 62))
      {
        v44 = (char *)operator new(4 * v43);
        v45 = &v44[4 * v40];
        v46 = &v44[4 * v43];
        *(_DWORD *)v45 = v21;
        v47 = (uint64_t)(v45 + 4);
        v48 = v36 - v38;
        if (v36 == v38)
          goto LABEL_59;
        goto LABEL_53;
      }
LABEL_197:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_198:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)v168 = v21;
  v168 = v36 + 4;
  __p = 0;
  v162 = 0;
  v163 = 0;
  v37 = (int *)v164;
  if (v165 != v164)
    goto LABEL_62;
LABEL_177:
  operations_research::sat::NeighborhoodGeneratorHelper::RelaxGivenVariables(*(_QWORD **)(a1 + 32), v151, (int **)&v167, v152);
  if (__p)
    operator delete(__p);
  if (v164)
  {
    v165 = (char *)v164;
    operator delete(v164);
  }
  if (v167)
  {
    v168 = (char *)v167;
    operator delete(v167);
  }
  if (v16)
    operator delete(v16);
}

void sub_22DA93110()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 152));
}

void sub_22DA93118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  void *v31;
  void *v33;
  void *v34;

  if (__p)
  {
    operator delete(__p);
    v33 = a27;
    if (!a27)
    {
LABEL_3:
      v34 = a30;
      if (!a30)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v33 = a27;
    if (!a27)
      goto LABEL_3;
  }
  operator delete(v33);
  v34 = a30;
  if (!a30)
  {
LABEL_4:
    if (!v31)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v34);
  if (!v31)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConstraintGraphNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  operations_research::sat::CpModelProto *v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int64_t v33;
  unint64_t v34;
  char *v35;
  int v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  BOOL v42;
  int v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  int v47;
  int *v48;
  int v49;
  uint64_t v50;
  char **v51;
  char *v52;
  int *v53;
  int *v54;
  int *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  uint64_t v93;
  int *v94;
  int *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  unint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  unint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v128;
  int64x2_t v129;
  unint64_t v131;
  int *v132;
  char *v133;
  int *v134;
  uint64_t *v135;
  void *__p;
  int *v137;
  uint64_t v138;
  void *v139;
  char *v140;
  char *v141;
  void *v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  char *v146;
  char *v147;
  uint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  int v152;
  uint64_t *v153;
  __int128 v154;
  int64x2_t v155;
  __int128 v156;
  uint64_t v157;

  v6 = *(_QWORD *)(a1 + 32);
  v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 288) - *(_QWORD *)(v6 + 280)) >> 3);
  if (!(_DWORD)v128
    || (v7 = (*(_QWORD *)(v6 + 360) - *(_QWORD *)(v6 + 352)) >> 2,
        v8 = vcvtpd_s64_f64((double)(int)v7 * a5),
        v8 == (_DWORD)v7))
  {
    *(_WORD *)a4 = 0;
    v17 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a4 + 8), 0);
    *(_QWORD *)(a4 + 152) = 0;
    *(_BYTE *)(a4 + 183) = 0;
    *(_BYTE *)(a4 + 160) = 0;
    *(_WORD *)a4 = 1;
    operations_research::sat::CpModelProto::CopyFrom(v17, *(const operations_research::sat::CpModelProto **)(v6 + 56));
    if (a4 + 8 != v6 + 104)
      google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a4 + 24, v6 + 120);
    return;
  }
  v10 = *(int *)(*(_QWORD *)(v6 + 56) + 24);
  LODWORD(v153) = v8;
  LODWORD(v148) = 0;
  if (v8 < 1)
  {
    v148 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v153, (int)&v148, "target_size > 0");
    v11 = v128;
    if (v148)
    {
      v124 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v153, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 420, &v148);
      google::LogMessage::stream((google::LogMessage *)v124);
LABEL_140:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v153);
    }
  }
  else
  {
    v11 = v128;
  }
  v148 = 0;
  v149 = 0;
  v150 = 0;
  if (!(_DWORD)v10)
  {
    v15 = 0;
    v145 = 0;
    v146 = 0;
    v147 = 0;
    v16 = v11 << 32;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    if (!(v11 << 32))
      goto LABEL_21;
    goto LABEL_19;
  }
  if ((v10 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v12 = (v10 - 1) >> 6;
  v13 = (uint64_t *)operator new(8 * (v12 + 1));
  v149 = v10;
  v150 = v12 + 1;
  v148 = v13;
  if (v10 >= 0x41)
    v14 = (v10 - 1) >> 6;
  else
    v14 = 0;
  v15 = v13;
  v13[v14] = 0;
  if (v10 >= 0x40)
    bzero(v13, 8 * (v10 >> 6));
  LODWORD(v11) = v128;
  if ((v10 & 0x3F) != 0)
    v15[v10 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v10 & 0x3F));
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v16 = v128 << 32;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v128 << 32)
  {
LABEL_19:
    if ((v16 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v142 = operator new(8 * (((unint64_t)((int)v11 - 1) >> 6) + 1));
    v143 = 0;
    v144 = ((unint64_t)((int)v11 - 1) >> 6) + 1;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&v142, (int)v11, 0);
  }
LABEL_21:
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v125 = a2;
  v126 = a4;
  if ((int)v11 <= 0)
  {
    v24 = 0;
    v19 = 0;
    v21 = 0;
    v20 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    goto LABEL_25;
  }
  LODWORD(__p) = 0;
  HIDWORD(__p) = v11 - 1;
  v153 = (uint64_t *)__p;
  v18 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&__p, a3, (int *)&v153);
  v19 = v18;
  v21 = v140;
  v20 = v141;
  if (v140 >= v141)
  {
    v24 = (char *)v139;
    v25 = v140 - (_BYTE *)v139;
    v26 = (v140 - (_BYTE *)v139) >> 2;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
LABEL_25:
    v28 = v20 - v24;
    if (v28 >> 1 > v27)
      v27 = v28 >> 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(4 * v29);
      v31 = &v30[4 * v26];
      v32 = &v30[4 * v29];
      *(_DWORD *)v31 = v19;
      v22 = (uint64_t)(v31 + 4);
      v33 = v21 - v24;
      if (v21 != v24)
      {
LABEL_33:
        v34 = v33 - 4;
        if (v34 >= 0x2C && (unint64_t)(v21 - v30 - v25) >= 0x20)
        {
          v118 = (v34 >> 2) + 1;
          v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
          v35 = &v21[-v119];
          v31 -= v119;
          v120 = &v30[4 * v26 - 16];
          v121 = v21 - 16;
          v122 = v118 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v123 = *(_OWORD *)v121;
            *((_OWORD *)v120 - 1) = *((_OWORD *)v121 - 1);
            *(_OWORD *)v120 = v123;
            v120 -= 32;
            v121 -= 32;
            v122 -= 8;
          }
          while (v122);
          v23 = a1;
          if (v118 == (v118 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_37:
            v139 = v31;
            v140 = (char *)v22;
            v141 = v32;
            if (!v24)
              goto LABEL_39;
LABEL_38:
            operator delete(v24);
            goto LABEL_39;
          }
        }
        else
        {
          v35 = v21;
          v23 = a1;
        }
        do
        {
          v36 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *((_DWORD *)v31 - 1) = v36;
          v31 -= 4;
        }
        while (v35 != v24);
        goto LABEL_37;
      }
    }
    else
    {
      v30 = 0;
      v31 = (char *)(4 * v26);
      v32 = 0;
      *(_DWORD *)(4 * v26) = v19;
      v22 = 4 * v26 + 4;
      v33 = v21 - v24;
      if (v21 != v24)
        goto LABEL_33;
    }
    v23 = a1;
    v139 = v31;
    v140 = (char *)v22;
    v141 = v32;
    if (!v24)
      goto LABEL_39;
    goto LABEL_38;
  }
  *(_DWORD *)v140 = v18;
  v22 = (uint64_t)(v21 + 4);
  v23 = a1;
LABEL_39:
  v37 = v15;
  v140 = (char *)v22;
  *(_QWORD *)((char *)v142 + (((unint64_t)*(int *)(v22 - 4) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v22 - 4);
  __p = 0;
  v137 = 0;
  v138 = 0;
  if (v8)
  {
    v38 = 0;
    v133 = 0;
    v131 = v8;
    v129 = vdupq_n_s64(2uLL);
    v135 = v15;
    do
    {
      v39 = (char *)v139;
      v40 = v140;
      if (v139 == v140)
        break;
      v41 = (unint64_t)(v140 - (_BYTE *)v139) >> 2;
      v42 = __OFSUB__((_DWORD)v41, 1);
      v43 = v41 - 1;
      if (v43 < 0 != v42)
      {
        v45 = 0;
        v44 = (uint64_t *)a3;
      }
      else
      {
        LODWORD(v151) = 0;
        HIDWORD(v151) = v43;
        v153 = v151;
        v44 = (uint64_t *)a3;
        v45 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v151, a3, (int *)&v153);
        v39 = (char *)v139;
        v40 = v140;
      }
      v46 = 4 * v45;
      v47 = *(_DWORD *)&v39[v46];
      v49 = *((_DWORD *)v40 - 1);
      v48 = (int *)(v40 - 4);
      *(_DWORD *)&v39[v46] = v49;
      *v48 = v47;
      v140 = (char *)v48;
      v152 = v128;
      LODWORD(v153) = v47;
      if (v47 >= (int)v128)
      {
        v151 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v153, (int)&v152, "contraint_index < num_constraints");
        if (v151)
        {
          v117 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v153, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 444, &v151);
          google::LogMessage::stream((google::LogMessage *)v117);
          goto LABEL_140;
        }
      }
      v50 = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 280);
      v51 = (char **)(v50 + 24 * v47);
      if (&__p != (void **)v51)
      {
        v52 = *(char **)(v50 + 24 * v47 + 8);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&__p, *v51, v52, (v52 - *v51) >> 2);
      }
      v54 = (int *)__p;
      v53 = v137;
      if ((char *)v137 - (_BYTE *)__p < 5 || (v55 = v137 - 1, v137 - 1 <= __p))
      {
        if (__p == v137)
          continue;
LABEL_79:
        v132 = v53;
LABEL_82:
        v69 = *v54;
        v70 = *v54;
        v71 = (unint64_t)*v54 >> 6;
        v72 = 1 << *v54;
        v73 = v37[v71];
        if ((v72 & v73) != 0)
          goto LABEL_81;
        v74 = v71;
        v37[v74] = v72 | v73;
        v38 = v146;
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 328) + v74 * 8) & v72) == 0)
          goto LABEL_107;
        if (v146 < v133)
        {
          *(_DWORD *)v146 = v69;
          v75 = (uint64_t)(v38 + 4);
          goto LABEL_106;
        }
        v76 = (char *)v145;
        v77 = v146 - (_BYTE *)v145;
        v78 = (v146 - (_BYTE *)v145) >> 2;
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v133 - (_BYTE *)v145) >> 1 > v79)
          v79 = (v133 - (_BYTE *)v145) >> 1;
        if ((unint64_t)(v133 - (_BYTE *)v145) >= 0x7FFFFFFFFFFFFFFCLL)
          v80 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v80 = v79;
        if (v80)
        {
          if (v80 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v81 = (char *)operator new(4 * v80);
          v53 = v132;
          v82 = &v81[4 * v78];
          *(_DWORD *)v82 = v69;
          v75 = (uint64_t)(v82 + 4);
          if (v38 != v76)
          {
LABEL_95:
            v83 = v38 - 4 - v76;
            if (v83 < 0x2C)
            {
              v23 = a1;
              goto LABEL_103;
            }
            v53 = v132;
            v84 = v38 - &v81[v77];
            v23 = a1;
            if (v84 < 0x20)
              goto LABEL_172;
            v85 = (v83 >> 2) + 1;
            v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
            v87 = &v38[-v86];
            v82 -= v86;
            v88 = &v81[4 * v78 - 16];
            v89 = v38 - 16;
            v90 = v85 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v91 = *(_OWORD *)v89;
              *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
              *(_OWORD *)v88 = v91;
              v88 -= 32;
              v89 -= 32;
              v90 -= 8;
            }
            while (v90);
            v38 = v87;
            v53 = v132;
            if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_172:
              do
              {
LABEL_103:
                v92 = *((_DWORD *)v38 - 1);
                v38 -= 4;
                *((_DWORD *)v82 - 1) = v92;
                v82 -= 4;
              }
              while (v38 != v76);
            }
LABEL_104:
            v145 = v82;
            v133 = &v81[4 * v80];
            v147 = v133;
            if (v76)
            {
              operator delete(v76);
              v53 = v132;
            }
LABEL_106:
            v146 = (char *)v75;
            v38 = (char *)v75;
            v37 = v135;
LABEL_107:
            if (v131 == (v38 - (_BYTE *)v145) >> 2)
              continue;
            v134 = v54;
            v93 = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 304) + 24 * v70;
            v94 = *(int **)v93;
            v95 = *(int **)(v93 + 8);
            if (*(int **)v93 == v95)
            {
LABEL_81:
              if (++v54 == v53)
                continue;
              goto LABEL_82;
            }
            while (2)
            {
              v97 = *v94;
              v98 = *((_QWORD *)v142 + (v97 >> 6));
              if (((1 << v97) & v98) == 0)
              {
                *((_QWORD *)v142 + (v97 >> 6)) = (1 << v97) | v98;
                v99 = v140;
                if (v140 < v141)
                {
                  *(_DWORD *)v140 = v97;
                  v96 = (uint64_t)(v99 + 4);
                }
                else
                {
                  v100 = (char *)v139;
                  v101 = v140 - (_BYTE *)v139;
                  v102 = (v140 - (_BYTE *)v139) >> 2;
                  v103 = v102 + 1;
                  if ((unint64_t)(v102 + 1) >> 62)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v104 = v141 - (_BYTE *)v139;
                  if ((v141 - (_BYTE *)v139) >> 1 > v103)
                    v103 = v104 >> 1;
                  if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
                    v105 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v105 = v103;
                  if (v105)
                  {
                    if (v105 >> 62)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v106 = (char *)operator new(4 * v105);
                    v107 = &v106[4 * v102];
                    *(_DWORD *)v107 = v97;
                    v96 = (uint64_t)(v107 + 4);
                    if (v99 != v100)
                    {
LABEL_124:
                      v108 = v99 - 4 - v100;
                      if (v108 < 0x2C)
                        goto LABEL_173;
                      if ((unint64_t)(v99 - &v106[v101]) < 0x20)
                        goto LABEL_173;
                      v109 = (v108 >> 2) + 1;
                      v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
                      v111 = &v99[-v110];
                      v107 -= v110;
                      v112 = &v106[4 * v102 - 16];
                      v113 = v99 - 16;
                      v114 = v109 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v115 = *(_OWORD *)v113;
                        *((_OWORD *)v112 - 1) = *((_OWORD *)v113 - 1);
                        *(_OWORD *)v112 = v115;
                        v112 -= 32;
                        v113 -= 32;
                        v114 -= 8;
                      }
                      while (v114);
                      v99 = v111;
                      if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_173:
                        do
                        {
                          v116 = *((_DWORD *)v99 - 1);
                          v99 -= 4;
                          *((_DWORD *)v107 - 1) = v116;
                          v107 -= 4;
                        }
                        while (v99 != v100);
                      }
                    }
                  }
                  else
                  {
                    v106 = 0;
                    v107 = (char *)(4 * v102);
                    *(_DWORD *)(4 * v102) = v97;
                    v96 = 4 * v102 + 4;
                    if (v99 != v100)
                      goto LABEL_124;
                  }
                  v139 = v107;
                  v140 = (char *)v96;
                  v141 = &v106[4 * v105];
                  if (v100)
                    operator delete(v100);
                  v37 = v135;
                }
                v140 = (char *)v96;
              }
              if (++v94 == v95)
              {
                v23 = a1;
                v54 = v134;
                v53 = v132;
                goto LABEL_81;
              }
              continue;
            }
          }
        }
        else
        {
          v81 = 0;
          v82 = (char *)(4 * v78);
          *(_DWORD *)(4 * v78) = v69;
          v75 = 4 * v78 + 4;
          if (v38 != v76)
            goto LABEL_95;
        }
        v23 = a1;
        goto LABEL_104;
      }
      v56 = (unint64_t)((char *)v137 - (_BYTE *)__p) >> 2;
      do
      {
        if (v56 == 1)
          goto LABEL_52;
        if (!v56)
        {
          v153 = v44;
          v154 = xmmword_22DCE8C60;
          v155 = v129;
          v156 = xmmword_22DCE8C70;
          v157 = -1;
          v66 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t *)&v153);
          goto LABEL_76;
        }
        v57 = __clz(v56);
        v58 = 63;
        if (((v56 << v57) & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v58 = 64;
        v59 = v58 - v57;
        v153 = v44;
        *(_QWORD *)&v154 = v58 - v57;
        v60 = (v58 - v57) >> 5;
        if ((v59 & 0x1F) != 0)
          v61 = v60 + 1;
        else
          v61 = v60;
        v62 = v59 / v61;
        *((_QWORD *)&v154 + 1) = v62;
        v155.i64[0] = v61;
        v63 = (-1 << (v59 / v61)) & 0x100000000;
        if (v62 >= 0x40)
          v63 = 0;
        *(_QWORD *)&v156 = v63;
        if ((v63 ^ 0x100000000) > v63 / v61)
        {
          v62 = v59 / ++v61;
          *((_QWORD *)&v154 + 1) = v62;
          v155.i64[0] = v61;
          if (v62 > 0x3F)
          {
            v155.i64[1] = v61 - (v59 % v61);
            *(_QWORD *)&v156 = 0;
            LODWORD(v62) = 64;
            goto LABEL_73;
          }
          *(_QWORD *)&v156 = (-1 << (v59 / v61)) & 0x100000000;
        }
        v155.i64[1] = v61 - v59 % v61;
        if (v62 < 0x3F)
        {
          *((_QWORD *)&v156 + 1) = 0x80000000uLL >> v62 << (v62 + 1);
          v64 = 0xFFFFFFFF >> -(char)v62;
          if (!v62)
            v64 = 0;
          LODWORD(v157) = v64;
          if (v62 >= 0x1F)
            v65 = -1;
          else
            v65 = 0xFFFFFFFF >> ~(_BYTE)v62;
          goto LABEL_74;
        }
LABEL_73:
        *((_QWORD *)&v156 + 1) = 0;
        v67 = -(int)v62;
        v65 = -1;
        LODWORD(v157) = 0xFFFFFFFF >> v67;
LABEL_74:
        HIDWORD(v157) = v65;
        do
          v66 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t *)&v153);
        while (v66 >= v56);
LABEL_76:
        if (v66)
        {
          v68 = *v54;
          *v54 = v54[v66];
          v54[v66] = v68;
        }
LABEL_52:
        ++v54;
        --v56;
      }
      while (v54 < v55);
      v54 = (int *)__p;
      v53 = v137;
      if (__p != v137)
        goto LABEL_79;
    }
    while (v131 > (v38 - (_BYTE *)v145) >> 2);
  }
  operations_research::sat::NeighborhoodGeneratorHelper::RelaxGivenVariables(*(_QWORD **)(v23 + 32), v125, (int **)&v145, v126);
  if (__p)
  {
    v137 = (int *)__p;
    operator delete(__p);
  }
  if (v139)
  {
    v140 = (char *)v139;
    operator delete(v139);
  }
  if (v142)
    operator delete(v142);
  if (v145)
    operator delete(v145);
  if (v37)
    operator delete(v37);
}

void sub_22DA93CE4()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 152));
}

void sub_22DA93CEC()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 152));
}

void sub_22DA93CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v36 = a28;
    if (!a28)
    {
LABEL_3:
      v37 = a31;
      if (!a31)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v36 = a28;
    if (!a28)
      goto LABEL_3;
  }
  operator delete(v36);
  v37 = a31;
  if (!a31)
  {
LABEL_4:
    v38 = a34;
    if (!a34)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v37);
  v38 = a34;
  if (!a34)
  {
LABEL_5:
    if (!a24)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v38);
  if (!a24)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a24);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::GenerateSchedulingNeighborhoodForRelaxation(int *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  operations_research::sat::CpModelProto *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t *i;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  int v30;
  uint64_t **v31;
  int v32;
  _DWORD *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  int *v40;
  int *v41;
  char *v42;
  int v43;
  uint64_t *j;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  google::protobuf::Arena *v78;
  uint64_t v79;
  int v80;
  unsigned int *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  operations_research::sat::PartialVariableAssignment *v94;
  uint64_t k;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  google::protobuf::Arena *v102;
  uint64_t v103;
  google::protobuf::Arena *v104;
  uint64_t v105;
  uint64_t v106;
  operations_research::sat::CpModelProto *v107;
  int *v108;
  uint64_t v109;
  int *v110;
  google::protobuf::Arena **v111;
  uint64_t *v113[2];
  uint64_t v114;
  uint64_t *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;

  *(_WORD *)a5 = 0;
  v9 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a5 + 8), 0);
  *(_QWORD *)(a5 + 152) = 0;
  *(_BYTE *)(a5 + 183) = 0;
  *(_BYTE *)(a5 + 160) = 0;
  *(_WORD *)a5 = 1;
  v107 = v9;
  operations_research::sat::CpModelProto::CopyFrom(v9, *(const operations_research::sat::CpModelProto **)(a4 + 56));
  if (v107 != (operations_research::sat::CpModelProto *)(a4 + 104))
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a5 + 24, a4 + 120);
  v10 = *(_QWORD *)(a4 + 256);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a4 + 264) - v10) >> 3) < 0x14)
    v11 = 0;
  else
    v11 = (uint64_t)(*(_QWORD *)(v10 + 464) - *(_QWORD *)(v10 + 456)) >> 2;
  *(_BYTE *)(a5 + 1) = a2 < v11;
  std::set<int>::set[abi:ne180100]<int const*>(&v119, a1, &a1[a2]);
  v12 = *(_QWORD **)(a4 + 256);
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 264) - (_QWORD)v12) >> 3);
  if (v13 >= 0x14)
  {
    v14 = (int *)v12[57];
    v15 = (int *)v12[58];
    if (v15 != v14)
    {
      v109 = a4;
      do
      {
        v16 = *v14;
        for (i = v120; i; i = (uint64_t *)*i)
        {
          v30 = *((_DWORD *)i + 7);
          if (v16 >= v30)
          {
            if (v30 >= v16)
              goto LABEL_10;
            ++i;
          }
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8 * v16 + 8);
        v19 = *(_DWORD *)(v18 + 16);
        if (v19)
        {
          LODWORD(v116) = *(_DWORD *)(v18 + 16);
          LODWORD(v115) = 1;
          if (v19 != 1)
          {
            v113[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v116, (int)&v115, "interval_ct.enforcement_literal().size() == 1");
            if (v113[0])
            {
              google::LogMessageFatal::LogMessageFatal((unint64_t *)&v116, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 485, v113);
              google::LogMessage::stream((google::LogMessage *)&v116);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v116);
            }
          }
          v20 = **(_DWORD **)(v18 + 24);
          if (~v20 <= v20)
            v21 = **(_DWORD **)(v18 + 24);
          else
            v21 = ~v20;
          v22 = 8 * v21;
          v23 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + v22);
          v24 = *(_QWORD *)(*(_QWORD *)(a5 + 40) + v22 + 8);
          *(_DWORD *)(v24 + 16) = 0;
          v25 = *(_DWORD *)(v24 + 20);
          v26 = v24;
          if (!v25)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 16), 1);
            v26 = *(_QWORD *)(*(_QWORD *)(a5 + 40) + 8 * v21 + 8);
            v25 = *(_DWORD *)(v26 + 20);
          }
          **(_QWORD **)(v24 + 24) = (int)v23;
          *(_DWORD *)(v24 + 16) = 1;
          v27 = *(unsigned int *)(v26 + 16);
          if ((_DWORD)v27 == v25)
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 16), v27 + 1);
          *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v27) = (int)v23;
          *(_DWORD *)(v26 + 16) = v27 + 1;
          if (v20 >= 0 != (v23 != 0))
          {
            v28 = v120;
            v29 = &v120;
LABEL_28:
            v31 = v29;
            if (v28)
            {
              do
              {
                v29 = (uint64_t **)v28;
                v32 = *((_DWORD *)v28 + 7);
                if (v16 < v32)
                {
                  v28 = *v29;
                  goto LABEL_28;
                }
                if (v32 >= v16)
                  goto LABEL_10;
                v28 = v29[1];
              }
              while (v28);
              v31 = v29 + 1;
            }
            v33 = operator new(0x20uLL);
            v33[7] = v16;
            *(_QWORD *)v33 = 0;
            *((_QWORD *)v33 + 1) = 0;
            *((_QWORD *)v33 + 2) = v29;
            *v31 = (uint64_t *)v33;
            if (*v119)
            {
              v119 = (_QWORD *)*v119;
              v33 = *v31;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v120, (uint64_t *)v33);
            ++v121;
          }
        }
LABEL_10:
        ++v14;
      }
      while (v14 != v15);
      v12 = *(_QWORD **)(v109 + 256);
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v109 + 264) - (_QWORD)v12) >> 3);
    }
    if (v13 >= 0x15)
    {
      v108 = (int *)v12[61];
      if (v108 != (int *)v12[60])
      {
        v34 = (int *)v12[60];
        v111 = (google::protobuf::Arena **)(a5 + 48);
        while (1)
        {
          v110 = v34;
          v35 = *v34;
          v116 = 0;
          v117 = 0;
          v118 = 0;
          v36 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8 * v35 + 8);
          v37 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
          if (*(_DWORD *)(v36 + 60) == 20)
            v37 = *(uint64_t **)(v36 + 48);
          v38 = *((int *)v37 + 4);
          if ((_DWORD)v38)
          {
            v39 = 0;
            v40 = (int *)v37[3];
            v41 = &v40[v38];
            while (1)
            {
              v43 = *v40;
              for (j = v120; j; j = (uint64_t *)*j)
              {
                v50 = *((_DWORD *)j + 7);
                if (v43 >= v50)
                {
                  if (v50 >= v43)
                    goto LABEL_48;
                  ++j;
                }
              }
              v45 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8 * v43 + 8);
              if (*(_DWORD *)(v45 + 60) == 19)
              {
                v46 = *(_QWORD *)(v45 + 48);
                v47 = *(_QWORD *)(a3 + 24);
                if (!*(_QWORD *)(v47 + 8 * *(int *)(v46 + 24)))
                  goto LABEL_48;
                v48 = *(_QWORD *)(v47 + 8 * *(int *)(v46 + 16));
                v49 = v118;
                if (v39 >= v118)
                {
LABEL_61:
                  v52 = (unint64_t)v116;
                  v53 = (v39 - v116) >> 4;
                  v54 = v53 + 1;
                  if ((unint64_t)(v53 + 1) >> 60)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v55 = v49 - v116;
                  if (v55 >> 3 > v54)
                    v54 = v55 >> 3;
                  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
                    v56 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v56 = v54;
                  if (v56)
                  {
                    if (v56 >> 60)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v57 = (char *)operator new(16 * v56);
                    v58 = (uint64_t)&v57[16 * v53];
                    *(_QWORD *)v58 = v48;
                    *(_DWORD *)(v58 + 8) = v43;
                    v59 = v58;
                    if (v39 == (char *)v52)
                      goto LABEL_74;
                    do
                    {
LABEL_72:
                      *(_OWORD *)(v59 - 16) = *((_OWORD *)v39 - 1);
                      v59 -= 16;
                      v39 -= 16;
                    }
                    while (v39 != (char *)v52);
                    v39 = v116;
                  }
                  else
                  {
                    v57 = 0;
                    v58 = 16 * v53;
                    *(_QWORD *)v58 = v48;
                    *(_DWORD *)(v58 + 8) = v43;
                    v59 = 16 * v53;
                    if (v39 != (char *)v52)
                      goto LABEL_72;
                  }
LABEL_74:
                  v42 = (char *)(v58 + 16);
                  v116 = (char *)v59;
                  v117 = v58 + 16;
                  v118 = &v57[16 * v56];
                  if (v39)
                    operator delete(v39);
                  goto LABEL_47;
                }
              }
              else
              {
                v51 = *(_QWORD *)(a3 + 24);
                if (!*(_QWORD *)(v51 + 8 * dword_25408AE58))
                  goto LABEL_48;
                v48 = *(_QWORD *)(v51 + 8 * (int)qword_25408AE50);
                v49 = v118;
                if (v39 >= v118)
                  goto LABEL_61;
              }
              *(_QWORD *)v39 = v48;
              *((_DWORD *)v39 + 2) = v43;
              v42 = v39 + 16;
LABEL_47:
              v117 = (uint64_t)v42;
              v39 = v42;
LABEL_48:
              if (++v40 == v41)
              {
                v60 = (uint64_t)v116;
                goto LABEL_78;
              }
            }
          }
          v39 = 0;
          v60 = 0;
LABEL_78:
          v61 = 126 - 2 * __clz((uint64_t)&v39[-v60] >> 4);
          v62 = v39 == (char *)v60 ? 0 : v61;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>(v60, (uint64_t *)v39, (uint64_t)v113, v62, 1);
          v63 = v116;
          if ((unint64_t)(v117 - (_QWORD)v116) >= 0x11)
            break;
LABEL_113:
          if (v63)
            operator delete(v63);
          v34 = v110 + 1;
          if (v110 + 1 == v108)
            goto LABEL_115;
        }
        v64 = 0;
        v65 = 1;
        while (1)
        {
          v66 = *(int **)(a5 + 64);
          v67 = *(_QWORD *)&v66[2 * *(int *)&v63[v64 + 8] + 2];
          v68 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v67 + 60) == 19)
            v68 = *(uint64_t **)(v67 + 48);
          v69 = *(_QWORD *)&v66[2 * *(int *)&v63[v64 + 24] + 2];
          v70 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v69 + 60) == 19)
            v70 = *(uint64_t **)(v69 + 48);
          v71 = *((_DWORD *)v68 + 5);
          v72 = *(_QWORD *)(a3 + 24);
          v73 = *((int *)v70 + 4);
          v113[0] = *(uint64_t **)(v72 + 8 * v71);
          v114 = *(_QWORD *)(v72 + 8 * v73);
          if ((uint64_t)v113[0] > v114)
          {
            v115 = (uint64_t *)google::MakeCheckOpString<long long,long long>((int)v113, (int)&v114, "initial_solution.solution(before_var) <= initial_solution.solution(after_var)");
            if (v115)
            {
              google::LogMessageFatal::LogMessageFatal((unint64_t *)v113, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 531, &v115);
              google::LogMessage::stream((google::LogMessage *)v113);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v113);
            }
            v66 = *(int **)(a5 + 64);
            if (!v66)
              break;
          }
          v74 = *(int *)(a5 + 56);
          v75 = *v66;
          if ((int)v74 < *v66)
          {
            *(_DWORD *)(a5 + 56) = v74 + 1;
            v76 = *(_QWORD *)&v66[2 * v74 + 2];
            if (*(_DWORD *)(v76 + 60) != 12)
              goto LABEL_91;
            goto LABEL_98;
          }
          if (v75 == *(_DWORD *)(a5 + 60))
            goto LABEL_96;
LABEL_97:
          *v66 = v75 + 1;
          v76 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*v111);
          v84 = *(_QWORD *)(a5 + 64);
          v85 = *(int *)(a5 + 56);
          *(_DWORD *)(a5 + 56) = v85 + 1;
          *(_QWORD *)(v84 + 8 * v85 + 8) = v76;
          if (*(_DWORD *)(v76 + 60) != 12)
          {
LABEL_91:
            operations_research::sat::ConstraintProto::clear_constraint(v76);
            *(_DWORD *)(v76 + 60) = 12;
            v77 = *(_QWORD *)(v76 + 8);
            v78 = (google::protobuf::Arena *)(v77 & 0xFFFFFFFFFFFFFFFELL);
            if ((v77 & 1) != 0)
              v78 = *(google::protobuf::Arena **)v78;
            v79 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v78);
            *(_QWORD *)(v76 + 48) = v79;
            v82 = *(unsigned int *)(v79 + 64);
            v80 = *(_DWORD *)(v79 + 68);
            v81 = (unsigned int *)(v79 + 64);
            v83 = v82 + 1;
            if ((_DWORD)v82 != v80)
              goto LABEL_100;
LABEL_99:
            google::protobuf::RepeatedField<long long>::Reserve(v81, v83);
            v80 = *(_DWORD *)(v79 + 68);
            goto LABEL_100;
          }
LABEL_98:
          v79 = *(_QWORD *)(v76 + 48);
          v82 = *(unsigned int *)(v79 + 64);
          v80 = *(_DWORD *)(v79 + 68);
          v81 = (unsigned int *)(v79 + 64);
          v83 = v82 + 1;
          if ((_DWORD)v82 == v80)
            goto LABEL_99;
LABEL_100:
          v86 = *(_QWORD *)(v79 + 72);
          *(_QWORD *)(v86 + 8 * v82) = 0x8000000000000000;
          *(_DWORD *)(v79 + 64) = v83;
          v87 = v82 + 2;
          if (v83 == v80)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v81, v87);
            v86 = *(_QWORD *)(v79 + 72);
          }
          *(_QWORD *)(v86 + 8 * v83) = 0;
          v88 = *(unsigned int *)(v79 + 16);
          *(_DWORD *)(v79 + 64) = v87;
          v89 = v88 + 1;
          if ((_DWORD)v88 == *(_DWORD *)(v79 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v79 + 16), v88 + 1);
          *(_DWORD *)(*(_QWORD *)(v79 + 24) + 4 * v88) = v71;
          v90 = *(unsigned int *)(v79 + 40);
          *(_DWORD *)(v79 + 16) = v89;
          if ((_DWORD)v90 == *(_DWORD *)(v79 + 44))
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v79 + 40), v90 + 1);
            v89 = *(_DWORD *)(v79 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v79 + 48) + 8 * v90) = 1;
          *(_DWORD *)(v79 + 40) = v90 + 1;
          if (v89 == *(_DWORD *)(v79 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v79 + 16), v89 + 1);
          *(_DWORD *)(*(_QWORD *)(v79 + 24) + 4 * v89) = v73;
          *(_DWORD *)(v79 + 16) = v89 + 1;
          v91 = *(unsigned int *)(v79 + 40);
          if ((_DWORD)v91 == *(_DWORD *)(v79 + 44))
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v79 + 40), v91 + 1);
          *(_QWORD *)(*(_QWORD *)(v79 + 48) + 8 * v91) = -1;
          *(_DWORD *)(v79 + 40) = v91 + 1;
          ++v65;
          v63 = v116;
          v64 += 16;
          if (v65 >= (v117 - (uint64_t)v116) >> 4)
            goto LABEL_113;
        }
        v75 = *(_DWORD *)(a5 + 60);
LABEL_96:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v111, v75 + 1);
        v66 = *(int **)(a5 + 64);
        v75 = *v66;
        goto LABEL_97;
      }
    }
  }
LABEL_115:
  v92 = *(_QWORD *)(a5 + 16);
  v93 = (_QWORD *)(v92 & 0xFFFFFFFFFFFFFFFELL);
  if ((v92 & 1) != 0)
  {
    if (*v93)
      goto LABEL_119;
  }
  else if (v93)
  {
    goto LABEL_119;
  }
  v94 = *(operations_research::sat::PartialVariableAssignment **)(a5 + 136);
  if (v94)
  {
    operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v94);
    MEMORY[0x22E31DF78]();
  }
LABEL_119:
  *(_QWORD *)(a5 + 136) = 0;
  if (*(int *)(a5 + 32) >= 1)
  {
    for (k = 0; k < *(int *)(a5 + 32); ++k)
    {
      v96 = *(_QWORD *)(a5 + 136);
      if (v96)
      {
        v98 = *(unsigned int *)(v96 + 16);
        v97 = (unsigned int *)(v96 + 16);
        v99 = v98 + 1;
        if ((_DWORD)v98 == *(_DWORD *)(v96 + 20))
          goto LABEL_124;
      }
      else
      {
        v103 = *(_QWORD *)(a5 + 16);
        v104 = (google::protobuf::Arena *)(v103 & 0xFFFFFFFFFFFFFFFELL);
        if ((v103 & 1) != 0)
          v104 = *(google::protobuf::Arena **)v104;
        v96 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v104);
        *(_QWORD *)(a5 + 136) = v96;
        v98 = *(unsigned int *)(v96 + 16);
        v97 = (unsigned int *)(v96 + 16);
        v99 = v98 + 1;
        if ((_DWORD)v98 == *(_DWORD *)(v96 + 20))
        {
LABEL_124:
          google::protobuf::RepeatedField<int>::Reserve(v97, v99);
          v100 = *(_QWORD *)(a5 + 136);
          *(_DWORD *)(*(_QWORD *)(v96 + 24) + 4 * v98) = k;
          *(_DWORD *)(v96 + 16) = v99;
          v96 = v100;
          if (!v100)
          {
            v101 = *(_QWORD *)(a5 + 16);
            v102 = (google::protobuf::Arena *)(v101 & 0xFFFFFFFFFFFFFFFELL);
            if ((v101 & 1) != 0)
              v102 = *(google::protobuf::Arena **)v102;
            v96 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v102);
            *(_QWORD *)(a5 + 136) = v96;
          }
          goto LABEL_132;
        }
      }
      *(_DWORD *)(*(_QWORD *)(v96 + 24) + 4 * v98) = k;
      *(_DWORD *)(v96 + 16) = v99;
LABEL_132:
      v105 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * k);
      v106 = *(unsigned int *)(v96 + 40);
      if ((_DWORD)v106 == *(_DWORD *)(v96 + 44))
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v96 + 40), v106 + 1);
      *(_QWORD *)(*(_QWORD *)(v96 + 48) + 8 * v106) = v105;
      *(_DWORD *)(v96 + 40) = v106 + 1;
    }
  }
  *(_BYTE *)a5 = 1;
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v119, v120);
}

void sub_22DA947C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA947C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, operations_research::sat::CpModelProto *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  uint64_t v23;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a22, a23);
  if (*(char *)(v23 + 183) < 0)
    operator delete(*(void **)(v23 + 160));
  operations_research::sat::CpModelProto::~CpModelProto(a10);
  _Unwind_Resume(a1);
}

void operations_research::sat::SchedulingNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  int *begin;
  int *end;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  signed int v21;
  std::vector<int> v22;
  _QWORD v23[2];
  __int128 v24;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 256);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 264) - v10) >> 3) <= 0x13)
  {
    end = 0;
    begin = 0;
    memset(&v22, 0, sizeof(v22));
    v16 = 0;
  }
  else
  {
    v12 = *(_BYTE **)(v10 + 456);
    v11 = *(_BYTE **)(v10 + 464);
    memset(&v22, 0, sizeof(v22));
    v13 = v11 - v12;
    if (v11 == v12)
    {
      end = 0;
      begin = 0;
      v16 = 0;
    }
    else
    {
      if (v13 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      begin = (int *)operator new(v11 - v12);
      end = &begin[v13 >> 2];
      v22.__begin_ = begin;
      v22.__end_cap_.__value_ = end;
      memcpy(begin, v12, v13);
      v22.__end_ = end;
      v16 = 4 * (v13 >> 2);
      if (v16 >= 5)
      {
        v24 = xmmword_22DCE8C50;
        if (end - 1 > begin)
        {
          v17 = ((unint64_t)v16 >> 2) - 1;
          do
          {
            v23[0] = 0;
            v23[1] = v17;
            v18 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v24, a3, v23);
            if (v18)
            {
              v19 = *begin;
              *begin = begin[v18];
              begin[v18] = v19;
            }
            ++begin;
            --v17;
          }
          while (begin < end - 1);
          begin = v22.__begin_;
          end = v22.__end_;
          v16 = (char *)v22.__end_ - (char *)v22.__begin_;
        }
      }
    }
  }
  v20 = v16 >> 2;
  v21 = llround((double)(unint64_t)(v16 >> 2) * a5);
  if (v21 <= v20)
  {
    if (v21 < v20)
    {
      end = &begin[v21];
      v22.__end_ = end;
    }
  }
  else
  {
    std::vector<int>::__append(&v22, v21 - v20);
    begin = v22.__begin_;
    end = v22.__end_;
  }
  operations_research::sat::GenerateSchedulingNeighborhoodForRelaxation(begin, end - begin, a2, *(_QWORD *)(a1 + 32), a4);
  if (v22.__begin_)
  {
    v22.__end_ = v22.__begin_;
    operator delete(v22.__begin_);
  }
}

void sub_22DA94A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  signed int v30;
  signed int v31;
  char *v32;
  int *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v55;
  int *v57;
  char *v58;
  char *v59;
  _DWORD v60[2];
  char *v61;
  char *v62;
  char *v63;

  v7 = a1;
  v8 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 256);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 264) - v10) >> 3);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  if (v11 >= 0x14)
  {
    v12 = *(int **)(v10 + 456);
    v13 = *(int **)(v10 + 464);
    if (v13 != v12)
    {
      v8 = 0;
      v14 = 0;
      v9 = 0;
      while (1)
      {
        while (1)
        {
          v15 = *v12;
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 56) + 56) + 8 * v15 + 8);
          v17 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v16 + 60) == 19)
            v17 = *(uint64_t **)(v16 + 48);
          v18 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * *((int *)v17 + 4));
          if (v8 >= v14)
            break;
          *(_QWORD *)v8 = v18;
          *((_DWORD *)v8 + 2) = v15;
          v8 += 16;
          v62 = v8;
          if (++v12 == v13)
            goto LABEL_27;
        }
        v19 = (v8 - v9) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v14 - v9) >> 3 > v20)
          v20 = (v14 - v9) >> 3;
        if ((unint64_t)(v14 - v9) >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          if (v21 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = (char *)operator new(16 * v21);
          v23 = (uint64_t)&v22[16 * v19];
          *(_QWORD *)v23 = v18;
          *(_DWORD *)(v23 + 8) = v15;
          if (v8 == v9)
          {
LABEL_24:
            v25 = (char *)v23;
            v14 = &v22[16 * v21];
            v8 = (char *)(v23 + 16);
            v61 = (char *)v23;
            v63 = v14;
            v7 = a1;
            if (!v9)
              goto LABEL_21;
            goto LABEL_20;
          }
        }
        else
        {
          v22 = 0;
          v23 = 16 * v19;
          *(_QWORD *)v23 = v18;
          *(_DWORD *)(v23 + 8) = v15;
          if (v8 == v9)
            goto LABEL_24;
        }
        v24 = v23;
        do
        {
          v25 = (char *)(v24 - 16);
          *(_OWORD *)(v24 - 16) = *((_OWORD *)v8 - 1);
          v8 -= 16;
          v24 -= 16;
        }
        while (v8 != v9);
        v14 = &v22[16 * v21];
        v8 = (char *)(v23 + 16);
        v61 = v25;
        v63 = v14;
        v7 = a1;
        if (!v9)
          goto LABEL_21;
LABEL_20:
        operator delete(v9);
LABEL_21:
        v9 = v25;
        v62 = v8;
        if (++v12 == v13)
          goto LABEL_27;
      }
    }
    v8 = 0;
    v9 = 0;
  }
LABEL_27:
  v26 = 126 - 2 * __clz((v8 - v9) >> 4);
  if (v8 == v9)
    v27 = 0;
  else
    v27 = v26;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>((uint64_t)v9, (uint64_t *)v8, (uint64_t)&v57, v27, 1);
  v28 = v61;
  v29 = (v62 - v61) >> 4;
  v30 = vcvtmd_s64_f64((double)(unint64_t)v29 * a5);
  v60[0] = 0;
  v60[1] = ~v30 + v29;
  v31 = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v60, a3, v60);
  v32 = 0;
  v33 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  if (v31 < v30)
  {
    v55 = a2;
    v34 = 0;
    v35 = 0;
    v32 = 0;
    v36 = v31;
    while (1)
    {
      while (1)
      {
        v37 = &v28[16 * v36 + 8];
        if (v32 >= v35)
          break;
        *(_DWORD *)v32 = *(_DWORD *)v37;
        v32 += 4;
        v58 = v32;
        if ((_DWORD)++v36 == v30)
          goto LABEL_62;
      }
      v38 = (v32 - v34) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v35 - v34) >> 1 > v39)
        v39 = (v35 - v34) >> 1;
      if ((unint64_t)(v35 - v34) >= 0x7FFFFFFFFFFFFFFCLL)
        v40 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
      {
        if (v40 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v41 = operator new(4 * v40);
        v42 = (int *)&v41[4 * v38];
        *v42 = *(_DWORD *)v37;
        v43 = (uint64_t)(v42 + 1);
        if (v32 == v34)
          goto LABEL_48;
      }
      else
      {
        v41 = 0;
        v42 = (int *)(4 * v38);
        *(_DWORD *)(4 * v38) = *(_DWORD *)v37;
        v43 = 4 * v38 + 4;
        if (v32 == v34)
          goto LABEL_48;
      }
      v44 = v32 - 4 - v34;
      if (v44 >= 0xBC)
      {
        if (&v41[v32 - v34 - 4 - (v44 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v32 - v34 - 4])
        {
          v45 = v32;
        }
        else if (&v32[-(v44 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v32 - 4)
        {
          v45 = v32;
        }
        else if ((unint64_t)(v34 - v41) >= 0x20)
        {
          v47 = (v44 >> 2) + 1;
          v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
          v45 = &v32[-v48];
          v42 = (int *)((char *)v42 - v48);
          v49 = &v41[4 * v38 - 16];
          v50 = v32 - 16;
          v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_48;
        }
        else
        {
          v45 = v32;
        }
      }
      else
      {
        v45 = v32;
      }
      do
      {
        v46 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--v42 = v46;
      }
      while (v45 != v34);
LABEL_48:
      v35 = &v41[4 * v40];
      v57 = v42;
      v58 = (char *)v43;
      v59 = v35;
      if (v34)
        operator delete(v34);
      v34 = (char *)v42;
      v32 = (char *)v43;
      v58 = (char *)v43;
      if ((_DWORD)++v36 == v30)
      {
LABEL_62:
        v7 = a1;
        v33 = v57;
        a2 = v55;
        break;
      }
    }
  }
  operations_research::sat::GenerateSchedulingNeighborhoodForRelaxation(v33, (v32 - (char *)v33) >> 2, a2, *(_QWORD *)(v7 + 32), a4);
  if (v33)
    operator delete(v33);
  if (v28)
    operator delete(v28);
}

void sub_22DA94EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::RelaxationInducedNeighborhoodGenerator::ReadyToGenerate(operations_research::sat::RelaxationInducedNeighborhoodGenerator *this, absl::lts_2020_02_25::Mutex *a2)
{
  operations_research::sat::SharedIncompleteSolutionManager *v3;
  uint64_t v5;
  absl::lts_2020_02_25::Mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  absl::lts_2020_02_25::Mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  absl::lts_2020_02_25::Mutex *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  absl::lts_2020_02_25::Mutex *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  absl::lts_2020_02_25::Mutex *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  absl::lts_2020_02_25::Mutex *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = (operations_research::sat::SharedIncompleteSolutionManager *)*((_QWORD *)this + 20);
  if (v3)
    return operations_research::sat::SharedIncompleteSolutionManager::HasNewSolution(v3, a2);
  v5 = *((_QWORD *)this + 17);
  if (v5)
  {
    v6 = (absl::lts_2020_02_25::Mutex *)(v5 + 312);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v5 + 312), a2);
    v9 = v5 + 352;
    v7 = *(_QWORD *)(v5 + 352);
    v8 = *(_QWORD *)(v9 + 8);
    absl::lts_2020_02_25::Mutex::Unlock(v6, v10, v11, v12, v13, v14, v15, v16);
    if (!(-858993459 * ((unint64_t)(v8 - v7) >> 3)))
      return 0;
  }
  v17 = *((_QWORD *)this + 19);
  if (v17)
  {
    v18 = (absl::lts_2020_02_25::Mutex *)(v17 + 8);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v17 + 8), a2);
    v21 = v17 + 48;
    v19 = *(_QWORD *)(v17 + 48);
    v20 = *(_QWORD *)(v21 + 8);
    absl::lts_2020_02_25::Mutex::Unlock(v18, v22, v23, v24, v25, v26, v27, v28);
    if ((int)(-858993459 * ((unint64_t)(v20 - v19) >> 3)) > 0)
      return 1;
  }
  v29 = *((_QWORD *)this + 18);
  if (v29
    && (v30 = (absl::lts_2020_02_25::Mutex *)(v29 + 8),
        absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v29 + 8), a2),
        v33 = v29 + 48,
        v31 = *(_QWORD *)(v29 + 48),
        v32 = *(_QWORD *)(v33 + 8),
        absl::lts_2020_02_25::Mutex::Unlock(v30, v34, v35, v36, v37, v38, v39, v40),
        (int)(-858993459 * ((unint64_t)(v32 - v31) >> 3)) > 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

void operations_research::sat::RelaxationInducedNeighborhoodGenerator::Generate(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  operations_research::sat::CpModelProto *v7;
  operations_research::sat::CpModelProto *v8;
  absl::lts_2020_02_25::Mutex *v9;
  uint64_t v10;
  absl::lts_2020_02_25::Mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  absl::lts_2020_02_25::Mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  operations_research::sat::SharedIncompleteSolutionManager *v24;
  _BOOL4 HasNewSolution;
  absl::lts_2020_02_25::Mutex *v26;
  uint64_t v27;
  uint64_t v28;
  absl::lts_2020_02_25::Mutex *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int *v45;
  int *v46;
  const char *v47;
  int *v48;
  __n128 v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL IsEmpty;
  unint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  char v68;
  void **v69;
  void **v70;
  unsigned int v71;
  void *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  _QWORD *v77;
  int *v78;
  int *v79;
  operations_research::sat::CpModelProto *v80;
  __n128 v81;
  void **v82;
  uint64_t v83;
  int *v84;
  char v85;
  void *v86[3];
  unint64_t v87;
  __int128 v88;
  unint64_t v89;
  void *__p[2];
  int *v91;
  __n128 v92;
  _OWORD v93[2];
  __n128 v94;

  v4 = a1;
  v6 = *(_QWORD *)(a1 + 32);
  *(_WORD *)a3 = 0;
  v7 = (operations_research::sat::CpModelProto *)(a3 + 8);
  v8 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a3 + 8), 0);
  *(_QWORD *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  v82 = (void **)(a3 + 160);
  *(_BYTE *)(a3 + 183) = 0;
  *(_WORD *)a3 = 1;
  operations_research::sat::CpModelProto::CopyFrom(v8, *(const operations_research::sat::CpModelProto **)(v6 + 56));
  if (v7 != (operations_research::sat::CpModelProto *)(v6 + 104))
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a3 + 24, v6 + 120);
  *(_BYTE *)a3 = 0;
  v10 = *(_QWORD *)(v4 + 152);
  v80 = v7;
  if (v10)
  {
    v11 = (absl::lts_2020_02_25::Mutex *)(v10 + 8);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v10 + 8), v9);
    v14 = v10 + 48;
    v12 = *(_QWORD *)(v10 + 48);
    v13 = *(_QWORD *)(v14 + 8);
    absl::lts_2020_02_25::Mutex::Unlock(v11, v15, v16, v17, v18, v19, v20, v21);
    v22 = (int)(-858993459 * ((unint64_t)(v13 - v12) >> 3)) > 0;
    v23 = *(_QWORD *)(v4 + 144);
    if (!v23)
      goto LABEL_5;
  }
  else
  {
    v22 = 0;
    v23 = *(_QWORD *)(v4 + 144);
    if (!v23)
    {
LABEL_5:
      v24 = *(operations_research::sat::SharedIncompleteSolutionManager **)(v4 + 160);
      if (v24)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  v26 = (absl::lts_2020_02_25::Mutex *)(v23 + 8);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v23 + 8), v9);
  v28 = v23 + 48;
  v23 = *(_QWORD *)(v23 + 48);
  v27 = *(_QWORD *)(v28 + 8);
  absl::lts_2020_02_25::Mutex::Unlock(v26, v29, v30, v31, v32, v33, v34, v35);
  LODWORD(v23) = (int)(-858993459 * ((unint64_t)(v27 - v23) >> 3)) > 0;
  v24 = *(operations_research::sat::SharedIncompleteSolutionManager **)(v4 + 160);
  if (v24)
  {
LABEL_6:
    HasNewSolution = operations_research::sat::SharedIncompleteSolutionManager::HasNewSolution(v24, v9);
    if (((v22 | v23) & 1) != 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_10:
  HasNewSolution = 0;
  if (((v22 | v23) & 1) != 0)
    goto LABEL_12;
LABEL_11:
  if (!HasNewSolution)
    return;
LABEL_12:
  v94 = 0u;
  memset(v93, 0, sizeof(v93));
  if ((v22 & v23) == 1)
  {
    v36 = a2[312];
    v37 = (v36 + 1) % 0x270uLL;
    v38 = 4 * v36;
    v39 = 4 * v37;
    LODWORD(v36) = *((_DWORD *)a2 + (v36 + 397) % 0x270uLL) ^ ((*((_DWORD *)a2 + v37) & 0x7FFFFFFE | *((_DWORD *)a2 + v36) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)a2 + v37) << 31) >> 31) & 0x9908B0DF;
    *(_DWORD *)((char *)a2 + v38) = v36;
    LODWORD(v36) = ((v36 ^ (v36 >> 11)) << 7) & 0x9D2C5680 ^ v36 ^ (v36 >> 11);
    v40 = (double)(((_DWORD)v36 << 15) & 0xEFC60000 ^ v36 ^ ((((_DWORD)v36 << 15) & 0xEFC60000 ^ v36) >> 18));
    if (v37 == 623)
      v41 = 0;
    else
      v41 = v37 + 1;
    v42 = 397;
    if (v37 >= 0xE3)
      v42 = -227;
    v43 = *((_DWORD *)a2 + v42 + v37) ^ ((*((_DWORD *)a2 + v41) & 0x7FFFFFFE | *((_DWORD *)a2 + v37) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)a2 + v41) << 31) >> 31) & 0x9908B0DF;
    *(_DWORD *)((char *)a2 + v39) = v43;
    v44 = ((v43 ^ (v43 >> 11)) << 7) & 0x9D2C5680 ^ v43 ^ (v43 >> 11);
    a2[312] = v41;
    if ((v40 + (double)((v44 << 15) & 0xEFC60000 ^ v44 ^ (((v44 << 15) & 0xEFC60000 ^ v44) >> 18)) * 4294967300.0)
       * 5.42101086e-20
       + 0.0 >= 0.5)
      goto LABEL_19;
LABEL_24:
    operations_research::sat::GetRINSNeighborhood(*(_QWORD **)(v4 + 136), 0, *(_QWORD **)(v4 + 152), *(operations_research::sat::SharedIncompleteSolutionManager **)(v4 + 160), (absl::lts_2020_02_25::Mutex *)a2, (uint64_t *)&v89);
    v45 = (int *)v89;
    *(_QWORD *)&v93[0] = v89;
    v84 = (int *)__p[0];
    *(_OWORD *)((char *)v93 + 8) = *(_OWORD *)__p;
    v46 = v91;
    *((_QWORD *)&v93[1] + 1) = v91;
    v81 = v92;
    v94 = v92;
    if (HasNewSolution)
      v47 = "incomplete";
    else
      v47 = "lp";
    goto LABEL_27;
  }
  if (v22)
    goto LABEL_24;
LABEL_19:
  if (((v23 | HasNewSolution) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 659);
    v77 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Check failed: relaxation_solution_available || incomplete_solution_available ", 77);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v89);
  }
  operations_research::sat::GetRINSNeighborhood(*(_QWORD **)(v4 + 136), *(_QWORD **)(v4 + 144), 0, *(operations_research::sat::SharedIncompleteSolutionManager **)(v4 + 160), (absl::lts_2020_02_25::Mutex *)a2, (uint64_t *)&v89);
  v45 = (int *)v89;
  *(_QWORD *)&v93[0] = v89;
  v84 = (int *)__p[0];
  *(_OWORD *)((char *)v93 + 8) = *(_OWORD *)__p;
  v46 = v91;
  *((_QWORD *)&v93[1] + 1) = v91;
  v81 = v92;
  v94 = v92;
  if (HasNewSolution)
    v47 = "incomplete";
  else
    v47 = "relaxation";
LABEL_27:
  MEMORY[0x22E31DC84](v82, v47);
  v48 = v84;
  v49 = v81;
  v50 = (int *)v81.n128_u64[0];
  if (v45 != v84)
  {
    v85 = 0;
    while (1)
    {
      v51 = *v45;
      if ((int)v51 >= *(_DWORD *)(a3 + 32)
        || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 328) + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v51) & 1) == 0)
      {
        goto LABEL_30;
      }
      v52 = *((_QWORD *)v45 + 1);
      v53 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v51 + 8);
      operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v53 + 24), *(int *)(v53 + 16), &v89, v49);
      v54 = operations_research::Domain::Contains((operations_research::Domain *)&v89, v52);
      if (!v54)
        break;
      v55 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v51 + 8);
      *(_DWORD *)(v55 + 16) = 0;
      v56 = *(_DWORD *)(v55 + 20);
      v57 = v55;
      if (!v56)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v55 + 16), 1);
        v57 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v51 + 8);
        v56 = *(_DWORD *)(v57 + 20);
      }
      **(_QWORD **)(v55 + 24) = v52;
      *(_DWORD *)(v55 + 16) = 1;
      v58 = *(unsigned int *)(v57 + 16);
      if ((_DWORD)v58 == v56)
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 16), v58 + 1);
      *(_QWORD *)(*(_QWORD *)(v57 + 24) + 8 * v58) = v52;
      *(_DWORD *)(v57 + 16) = v58 + 1;
      *(_BYTE *)(a3 + 1) = 1;
      if ((v89 & 1) != 0)
        goto LABEL_41;
LABEL_29:
      if (!v54)
      {
        v46 = (int *)*((_QWORD *)&v93[1] + 1);
LABEL_76:
        if (v46)
        {
          v94.n128_u64[0] = (unint64_t)v46;
          operator delete(v46);
        }
        if (*(_QWORD *)&v93[0])
          operator delete(*(void **)&v93[0]);
        if ((v85 & 1) == 0)
        {
          if (*(char *)(a3 + 183) < 0)
            operator delete(*v82);
          operations_research::sat::CpModelProto::~CpModelProto(v80);
        }
        return;
      }
LABEL_30:
      v45 += 4;
      if (v45 == v48)
      {
        v46 = (int *)*((_QWORD *)&v93[1] + 1);
        v50 = (int *)v94.n128_u64[0];
        if (*((_QWORD *)&v93[1] + 1) == v94.n128_u64[0])
        {
LABEL_71:
          *(_BYTE *)a3 = 1;
          if (v46)
            goto LABEL_72;
          goto LABEL_73;
        }
LABEL_46:
        v59 = v46;
        v83 = v4;
        v78 = v50;
        v79 = v46;
        while (2)
        {
          v60 = *v59;
          if ((int)v60 < *(_DWORD *)(a3 + 32)
            && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 328) + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v60) & 1) != 0)
          {
            v61 = *((_QWORD *)v59 + 1);
            v62 = *((_QWORD *)v59 + 2);
            v63 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v60 + 8);
            operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v63 + 24), *(int *)(v63 + 16), &v89, v49);
            operations_research::Domain::Domain(v86, v61, v62);
            operations_research::Domain::IntersectionWith(&v89, (const operations_research::Domain *)v86, &v87);
            if ((v89 & 1) != 0)
              operator delete(__p[0]);
            v89 = v87;
            *(_OWORD *)__p = v88;
            v87 = 0;
            if (((uint64_t)v86[0] & 1) != 0)
              operator delete(v86[1]);
            IsEmpty = operations_research::Domain::IsEmpty((operations_research::Domain *)&v89);
            v65 = v89;
            if (IsEmpty)
            {
              v85 = 1;
              v4 = v83;
              if ((v89 & 1) != 0)
                goto LABEL_70;
            }
            else
            {
              v66 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v60 + 8);
              *(_DWORD *)(v66 + 16) = 0;
              v67 = (unsigned int *)(v66 + 16);
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v66 + 16), v65 >> 1);
              v68 = v89;
              if ((v89 & 1) != 0)
                v69 = (void **)__p[0];
              else
                v69 = __p;
              if (v89 >= 2)
              {
                v70 = &v69[2 * (v89 >> 1)];
                v71 = *(_DWORD *)(v66 + 16);
                do
                {
                  v72 = *v69;
                  v73 = *(_DWORD *)(v66 + 20);
                  v74 = v71 + 1;
                  if (v71 == v73)
                  {
                    google::protobuf::RepeatedField<long long>::Reserve(v67, v71 + 1);
                    v73 = *(_DWORD *)(v66 + 20);
                  }
                  v75 = *(_QWORD *)(v66 + 24);
                  *(_QWORD *)(v75 + 8 * v71) = v72;
                  *(_DWORD *)(v66 + 16) = v74;
                  v76 = v69[1];
                  v71 += 2;
                  if (v74 == v73)
                  {
                    google::protobuf::RepeatedField<long long>::Reserve(v67, v71);
                    v75 = *(_QWORD *)(v66 + 24);
                  }
                  *(_QWORD *)(v75 + 8 * v74) = v76;
                  *v67 = v71;
                  v69 += 2;
                }
                while (v69 != v70);
                v68 = v89;
                v50 = v78;
                v46 = v79;
              }
              *(_BYTE *)(a3 + 1) = 1;
              v4 = v83;
              if ((v68 & 1) != 0)
LABEL_70:
                operator delete(__p[0]);
            }
            if (IsEmpty)
              goto LABEL_76;
          }
          v59 += 6;
          if (v59 == v50)
            goto LABEL_71;
          continue;
        }
      }
    }
    v85 = 1;
    if ((v89 & 1) == 0)
      goto LABEL_29;
LABEL_41:
    operator delete(__p[0]);
    goto LABEL_29;
  }
  if (v46 != (int *)v81.n128_u64[0])
  {
    v85 = 0;
    goto LABEL_46;
  }
  v46 = (int *)v81.n128_u64[0];
  if (v81.n128_u64[0])
  {
LABEL_72:
    v94.n128_u64[0] = (unint64_t)v46;
    operator delete(v46);
  }
LABEL_73:
  if (*(_QWORD *)&v93[0])
    operator delete(*(void **)&v93[0]);
}

void sub_22DA957F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  void **v26;
  uint64_t v27;

  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)(v27 - 144));
  operations_research::sat::Neighborhood::~Neighborhood(v26);
  _Unwind_Resume(a1);
}

void operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  signed int v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  unint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  void *__p;
  uint64_t v54;
  char *v55;
  void *v56;
  _BYTE *v57;
  char *v58;
  void *v59;

  v56 = 0;
  v57 = 0;
  v58 = 0;
  v6 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 48);
  if ((_DWORD)v6)
  {
    if ((v6 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(4 * v6);
    v8 = 0;
    v9 = &v7[4 * v6];
    v56 = v7;
    v57 = v7;
    v58 = v9;
    v10 = v6;
    v11 = v7;
    while (1)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 56) + 8 * v8 + 8) + 60) == 19)
        goto LABEL_6;
      if (v7 >= v9)
        break;
      *(_DWORD *)v7 = v8;
      v12 = (uint64_t)(v7 + 4);
LABEL_5:
      v57 = (_BYTE *)v12;
      v7 = (char *)v12;
LABEL_6:
      if (++v8 == v10)
        goto LABEL_37;
    }
    v13 = (v7 - v11) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v9 - v11) >> 1 > v14)
      v14 = (v9 - v11) >> 1;
    if ((unint64_t)(v9 - v11) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(4 * v15);
      v17 = &v16[4 * v13];
      *v17 = v8;
      v12 = (uint64_t)(v17 + 1);
      if (v7 == v11)
        goto LABEL_23;
    }
    else
    {
      v16 = 0;
      v17 = (_DWORD *)(4 * v13);
      *(_DWORD *)(4 * v13) = v8;
      v12 = 4 * v13 + 4;
      if (v7 == v11)
        goto LABEL_23;
    }
    v18 = v7 - 4 - v11;
    if (v18 >= 0xBC)
    {
      if (&v16[v7 - v11 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v7 - v11 - 4])
      {
        v19 = v7;
      }
      else if (&v7[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v19 = v7;
      }
      else if ((unint64_t)(v11 - v16) >= 0x20)
      {
        v21 = (v18 >> 2) + 1;
        v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v19 = &v7[-v22];
        v17 = (_DWORD *)((char *)v17 - v22);
        v23 = &v16[4 * v13 - 16];
        v24 = (__int128 *)(v7 - 16);
        v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 2;
          v25 -= 8;
        }
        while (v25);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_23;
      }
      else
      {
        v19 = v7;
      }
    }
    else
    {
      v19 = v7;
    }
    do
    {
      v20 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *--v17 = v20;
    }
    while (v19 != v11);
LABEL_23:
    v9 = &v16[4 * v15];
    v56 = v17;
    v58 = v9;
    if (v11)
      operator delete(v11);
    v11 = (char *)v17;
    goto LABEL_5;
  }
  v11 = 0;
  v7 = 0;
LABEL_37:
  v27 = (v7 - v11) >> 2;
  if ((int)v27 < 1)
  {
    v28 = 0;
  }
  else
  {
    LODWORD(v59) = 0;
    HIDWORD(v59) = v27 - 1;
    __p = v59;
    v28 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v59, a2, (int *)&__p);
  }
  v29 = llround((1.0 - a4) * (double)(unint64_t)v27);
  __p = 0;
  v54 = 0;
  v55 = 0;
  if (v29)
  {
    v30 = v29;
    if (v29 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v31 = (char *)operator new(4 * v29);
    v32 = 0;
    __p = v31;
    v54 = (uint64_t)v31;
    v55 = &v31[4 * v30];
    v33 = v56;
    v34 = v31;
    do
    {
      if (v34 < v55)
      {
        *(_DWORD *)v34 = v33[v28];
        v35 = (uint64_t)(v34 + 4);
        goto LABEL_44;
      }
      v36 = v32 + 1;
      if ((v32 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v37 = v55 - v31;
      if ((v55 - v31) >> 1 > v36)
        v36 = v37 >> 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v38 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v39 = operator new(4 * v38);
        v40 = &v39[4 * v32];
        *v40 = v33[v28];
        v35 = (uint64_t)(v40 + 1);
        if (v34 == v31)
          goto LABEL_63;
      }
      else
      {
        v39 = 0;
        v40 = (_DWORD *)(4 * v32);
        *(_DWORD *)(4 * v32) = v33[v28];
        v35 = 4 * v32 + 4;
        if (v34 == v31)
          goto LABEL_63;
      }
      v41 = v34 - 4 - v31;
      if (v41 >= 0xBC)
      {
        v44 = 4 * v32;
        if (&v39[4 * v32 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[4 * v32 - 4])
        {
          v42 = v34;
        }
        else if (&v34[-(v41 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v34 - 4)
        {
          v42 = v34;
        }
        else if ((unint64_t)(v34 - &v39[v44]) >= 0x20)
        {
          v45 = (v41 >> 2) + 1;
          v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          v42 = &v34[-v46];
          v40 = (_DWORD *)((char *)v40 - v46);
          v47 = &v39[v44 - 16];
          v48 = v34 - 16;
          v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_63;
        }
        else
        {
          v42 = v34;
        }
      }
      else
      {
        v42 = v34;
      }
      do
      {
        v43 = *((_DWORD *)v42 - 1);
        v42 -= 4;
        *--v40 = v43;
      }
      while (v42 != v31);
LABEL_63:
      __p = v40;
      v54 = v35;
      v55 = &v39[4 * v38];
      if (v31)
      {
        operator delete(v31);
        v33 = v56;
        v31 = (char *)__p;
      }
      else
      {
        v31 = (char *)v40;
      }
LABEL_44:
      v54 = v35;
      if (v28 + 1 == (v57 - (_BYTE *)v33) >> 2)
        v28 = 0;
      else
        ++v28;
      v32 = (v35 - (uint64_t)v31) >> 2;
      v34 = (char *)v35;
    }
    while (v32 < v30);
  }
  operations_research::sat::NeighborhoodGeneratorHelper::RemoveMarkedConstraints(*(_QWORD *)(a1 + 32), (int **)&__p, a3);
  if (__p)
  {
    v54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_22DA95DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::WeightedRandomRelaxationNeighborhoodGenerator(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  void **v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;

  *(_QWORD *)a1 = off_24F982810;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x3FB999999999999ALL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v7 = (void **)(a1 + 136);
  *(_QWORD *)a1 = &off_24F9827D0;
  *(_QWORD *)(a1 + 168) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v8 = *(int *)(*(_QWORD *)(a2 + 56) + 48);
  if ((_DWORD)v8)
  {
    if ((v8 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
    v10 = 0;
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = v9;
    *(_QWORD *)(a1 + 152) = &v9[8 * v8];
    v11 = v8;
    while (1)
    {
      switch(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 56) + 8 * v10 + 8) + 60))
      {
        case 0:
        case 0x13:
          v36 = *(_QWORD *)(a1 + 152);
          if ((unint64_t)v9 < v36)
          {
            *(_QWORD *)v9 = 0;
            v23 = (uint64_t)(v9 + 8);
LABEL_101:
            *(_QWORD *)(a1 + 144) = v23;
            goto LABEL_68;
          }
          v43 = (char *)*v7;
          v44 = v9 - (_BYTE *)*v7;
          v45 = v44 >> 3;
          v46 = (v44 >> 3) + 1;
          if (v46 >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v47 = v36 - (_QWORD)v43;
          if (v47 >> 2 > v46)
            v46 = v47 >> 2;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            if (v48 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v49 = operator new(8 * v48);
            v50 = &v49[8 * v45];
            *v50 = 0;
            v23 = (uint64_t)(v50 + 1);
            if (v9 == v43)
              goto LABEL_99;
LABEL_96:
            v57 = v9 - 8 - v43;
            if (v57 < 0x168)
            {
              v58 = v9;
              goto LABEL_98;
            }
            if (&v49[v44 - 8 - (v57 & 0xFFFFFFFFFFFFFFF8)] > &v49[v44 - 8])
            {
              v58 = v9;
              goto LABEL_98;
            }
            if (&v9[-(v57 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
            {
              v58 = v9;
              goto LABEL_98;
            }
            if ((unint64_t)(v9 - v49 - v44) < 0x20)
            {
              v58 = v9;
              goto LABEL_98;
            }
            v72 = (v57 >> 3) + 1;
            v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
            v58 = &v9[-v73];
            v50 = (_QWORD *)((char *)v50 - v73);
            v74 = &v49[8 * v45 - 16];
            v75 = v9 - 16;
            v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v77 = *(_OWORD *)v75;
              *(v74 - 1) = *((_OWORD *)v75 - 1);
              *v74 = v77;
              v74 -= 2;
              v75 -= 32;
              v76 -= 4;
            }
            while (v76);
            if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                v59 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *--v50 = v59;
              }
              while (v58 != v43);
            }
          }
          else
          {
            v49 = 0;
            v50 = (_QWORD *)(8 * v45);
            *(_QWORD *)(8 * v45) = 0;
            v23 = 8 * v45 + 8;
            if (v9 != v43)
              goto LABEL_96;
          }
LABEL_99:
          *(_QWORD *)(a1 + 136) = v50;
          *(_QWORD *)(a1 + 144) = v23;
          *(_QWORD *)(a1 + 152) = &v49[8 * v48];
          if (v43)
            operator delete(v43);
          goto LABEL_101;
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0x14:
        case 0x15:
        case 0x1B:
        case 0x1C:
          v12 = *(_QWORD *)(a1 + 152);
          if ((unint64_t)v9 < v12)
          {
            v13 = 0x4000000000000000;
            goto LABEL_24;
          }
          v15 = (char *)*v7;
          v16 = v9 - (_BYTE *)*v7;
          v17 = v16 >> 3;
          v18 = (v16 >> 3) + 1;
          if (v18 >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v19 = v12 - (_QWORD)v15;
          if (v19 >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (!v20)
          {
            v21 = 0;
            v22 = (_QWORD *)(8 * v17);
            *(_QWORD *)(8 * v17) = 0x4000000000000000;
            v23 = 8 * v17 + 8;
            if (v9 == v15)
              goto LABEL_65;
LABEL_46:
            v33 = v9 - 8 - v15;
            if (v33 < 0x168)
            {
              v34 = v9;
              goto LABEL_48;
            }
            if (&v21[v16 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v21[v16 - 8])
            {
              v34 = v9;
              do
              {
LABEL_48:
                v35 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *--v22 = v35;
              }
              while (v34 != v15);
              goto LABEL_65;
            }
            if (&v9[-(v33 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
            {
              v34 = v9;
              goto LABEL_48;
            }
            if ((unint64_t)(v9 - v21 - v16) < 0x20)
            {
              v34 = v9;
              goto LABEL_48;
            }
            v51 = (v33 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v34 = &v9[-v52];
            v22 = (_QWORD *)((char *)v22 - v52);
            v53 = &v21[8 * v17 - 16];
            v54 = v9 - 16;
            v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_48;
            goto LABEL_65;
          }
          if (v20 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * v20);
          v22 = &v21[8 * v17];
          *v22 = 0x4000000000000000;
          v23 = (uint64_t)(v22 + 1);
          if (v9 != v15)
            goto LABEL_46;
          goto LABEL_65;
        case 0xC:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x1A:
          v24 = *(_QWORD *)(a1 + 152);
          if ((unint64_t)v9 < v24)
          {
            v13 = 0x3FF0000000000000;
            goto LABEL_24;
          }
          v15 = (char *)*v7;
          v29 = v9 - (_BYTE *)*v7;
          v30 = v29 >> 3;
          v31 = (v29 >> 3) + 1;
          if (v31 >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v32 = v24 - (_QWORD)v15;
          if (v32 >> 2 > v31)
            v31 = v32 >> 2;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v31;
          if (!v20)
          {
            v21 = 0;
            v22 = (_QWORD *)(8 * v30);
            *(_QWORD *)(8 * v30) = 0x3FF0000000000000;
            v23 = 8 * v30 + 8;
            if (v9 == v15)
              goto LABEL_65;
LABEL_62:
            v40 = v9 - 8 - v15;
            if (v40 < 0x168)
            {
              v41 = v9;
              goto LABEL_64;
            }
            if (&v21[v29 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v21[v29 - 8])
            {
              v41 = v9;
              do
              {
LABEL_64:
                v42 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *--v22 = v42;
              }
              while (v41 != v15);
              goto LABEL_65;
            }
            if (&v9[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
            {
              v41 = v9;
              goto LABEL_64;
            }
            if ((unint64_t)(v9 - v21 - v29) < 0x20)
            {
              v41 = v9;
              goto LABEL_64;
            }
            v66 = (v40 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v41 = &v9[-v67];
            v22 = (_QWORD *)((char *)v22 - v67);
            v68 = &v21[8 * v30 - 16];
            v69 = v9 - 16;
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *(_OWORD *)v69;
              *(v68 - 1) = *((_OWORD *)v69 - 1);
              *v68 = v71;
              v68 -= 2;
              v69 -= 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_64;
            goto LABEL_65;
          }
          if (v20 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * v20);
          v22 = &v21[8 * v30];
          *v22 = 0x3FF0000000000000;
          v23 = (uint64_t)(v22 + 1);
          if (v9 != v15)
            goto LABEL_62;
LABEL_65:
          *(_QWORD *)(a1 + 136) = v22;
          *(_QWORD *)(a1 + 144) = v23;
          *(_QWORD *)(a1 + 152) = &v21[8 * v20];
          if (v15)
            operator delete(v15);
LABEL_67:
          *(_QWORD *)(a1 + 144) = v23;
          ++*(_DWORD *)(a1 + 160);
LABEL_68:
          v9 = (char *)v23;
LABEL_69:
          if (++v10 == v11)
            return a1;
          break;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x16:
        case 0x17:
        case 0x19:
          v14 = *(_QWORD *)(a1 + 152);
          if ((unint64_t)v9 < v14)
          {
            v13 = 0x4008000000000000;
LABEL_24:
            *(_QWORD *)v9 = v13;
            v23 = (uint64_t)(v9 + 8);
            goto LABEL_67;
          }
          v15 = (char *)*v7;
          v25 = v9 - (_BYTE *)*v7;
          v26 = v25 >> 3;
          v27 = (v25 >> 3) + 1;
          if (v27 >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v28 = v14 - (_QWORD)v15;
          if (v28 >> 2 > v27)
            v27 = v28 >> 2;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v27;
          if (!v20)
          {
            v21 = 0;
            v22 = (_QWORD *)(8 * v26);
            *(_QWORD *)(8 * v26) = 0x4008000000000000;
            v23 = 8 * v26 + 8;
            if (v9 == v15)
              goto LABEL_65;
LABEL_57:
            v37 = v9 - 8 - v15;
            if (v37 < 0x168)
            {
              v38 = v9;
              goto LABEL_59;
            }
            if (&v21[v25 - 8 - (v37 & 0xFFFFFFFFFFFFFFF8)] > &v21[v25 - 8])
            {
              v38 = v9;
              do
              {
LABEL_59:
                v39 = *((_QWORD *)v38 - 1);
                v38 -= 8;
                *--v22 = v39;
              }
              while (v38 != v15);
              goto LABEL_65;
            }
            if (&v9[-(v37 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
            {
              v38 = v9;
              goto LABEL_59;
            }
            if ((unint64_t)(v9 - v21 - v25) < 0x20)
            {
              v38 = v9;
              goto LABEL_59;
            }
            v60 = (v37 >> 3) + 1;
            v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            v38 = &v9[-v61];
            v22 = (_QWORD *)((char *)v22 - v61);
            v62 = &v21[8 * v26 - 16];
            v63 = v9 - 16;
            v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *v62 = v65;
              v62 -= 2;
              v63 -= 32;
              v64 -= 4;
            }
            while (v64);
            if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_59;
            goto LABEL_65;
          }
          if (v20 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * v20);
          v22 = &v21[8 * v26];
          *v22 = 0x4008000000000000;
          v23 = (uint64_t)(v22 + 1);
          if (v9 != v15)
            goto LABEL_57;
          goto LABEL_65;
        default:
          goto LABEL_69;
      }
    }
  }
  return a1;
}

void sub_22DA965C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  operations_research::sat::NeighborhoodGenerator *v10;
  void **v11;
  void *v13;

  absl::lts_2020_02_25::flat_hash_map<long long,std::vector<int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::~flat_hash_map(a10);
  v13 = *v11;
  if (*v11)
  {
    *((_QWORD *)v10 + 18) = v13;
    operator delete(v13);
  }
  operations_research::sat::NeighborhoodGenerator::~NeighborhoodGenerator(v10);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,std::vector<int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::~flat_hash_map(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v4) & 0x80000000) == 0)
      {
        v6 = *v5 + v3;
        v7 = *(void **)(v6 + 8);
        if (v7)
        {
          *(_QWORD *)(v6 + 16) = v7;
          operator delete(v7);
          v2 = *(_QWORD *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v5 = 0;
  }
  v8 = *(_QWORD **)(a1 + 32);
  if (v8)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v8);
  return a1;
}

void operations_research::sat::NeighborhoodGenerator::~NeighborhoodGenerator(operations_research::sat::NeighborhoodGenerator *this)
{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::NeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::AdditionalProcessingOnSynchronize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;

  v5 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 72);
  v6 = (uint64_t *)(a1 + 168);
  v7 = absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>>((uint64_t *)(a1 + 168), (uint64_t *)a2);
  if (v4 <= v5)
  {
    if (*(_DWORD *)(a2 + 8) == 4 && v4 != v5)
    {
      v18 = *(int **)v7;
      v19 = *(int **)(v7 + 8);
      if (*(int **)v7 != v19)
      {
        v20 = *(_QWORD *)(a1 + 136);
        do
        {
          v21 = *v18;
          v22 = *(double *)(v20 + 8 * v21);
          if (v22 > 0.5)
            *(double *)(v20 + 8 * v21) = v22 + -0.5;
          ++v18;
        }
        while (v18 != v19);
      }
    }
  }
  else
  {
    v8 = *(int **)v7;
    v9 = *(int **)(v7 + 8);
    if (*(int **)v7 != v9)
    {
      v10 = *(_QWORD *)(a1 + 136);
      do
      {
        v11 = *v8++;
        v12 = 8 * v11;
        v13 = *(double *)(v10 + 8 * v11);
        v14 = v13 + 10.0;
        v15 = v13 > 90.0;
        v16 = 100.0;
        if (!v15)
          v16 = v14;
        *(double *)(v10 + v12) = v16;
      }
      while (v8 != v9);
    }
  }
  return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::erase<long long>(v6, (_QWORD *)a2);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v4 = 0;
  v5 = *a2;
  v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v7 = *a1;
  v8 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v9 = a1[3];
  while (1)
  {
    v10 = v8 & v9;
    v11 = *(_QWORD *)(v7 + v10);
    v12 = ((v11 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v12)
      break;
LABEL_6:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
    {
      v14 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::prepare_insert(a1, v6);
      v15 = (uint64_t *)(a1[1] + 32 * v14);
      *v15 = *a2;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = 0;
      v13 = a1[1];
      return v13 + 32 * v14 + 8;
    }
    v4 += 8;
    v8 = v4 + v10;
  }
  v13 = a1[1];
  while (1)
  {
    v14 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v9;
    if (*(_QWORD *)(v13 + 32 * v14) == v5)
      return v13 + 32 * v14 + 8;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_6;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::erase<long long>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  v3 = 0;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v5 = *a1;
  v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v9 = v6 & v7;
    v10 = *(_QWORD *)(v5 + v9);
    v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11)
      break;
LABEL_6:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return 0;
    v3 += 8;
    v6 = v3 + v9;
  }
  v12 = a1[1];
  while (1)
  {
    v13 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_QWORD *)(v12 + 32 * v13) == *a2)
      break;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_6;
  }
  if (v13 == v7)
    return 0;
  v15 = v12 + 32 * v13;
  v16 = (_QWORD *)(v5 + v13);
  v17 = *(void **)(v15 + 8);
  if (v17)
  {
    *(_QWORD *)(v15 + 16) = v17;
    operator delete(v17);
    v5 = *a1;
    v7 = a1[3];
  }
  --a1[2];
  v18 = (uint64_t)v16 - v5 - 8;
  v19 = *v16 & (~*v16 << 6) & 0x8080808080808080;
  v20 = *(_QWORD *)(v5 + (v18 & v7)) & (~*(_QWORD *)(v5 + (v18 & v7)) << 6) & 0x8080808080808080;
  if (v20)
    v21 = v19 == 0;
  else
    v21 = 1;
  if (v21)
  {
    v25 = 0;
    v22 = -2;
  }
  else
  {
    v23 = (__clz(v20) >> 3) + (__clz(__rbit64(v19)) >> 3);
    v24 = v23 >= 8;
    v25 = v23 < 8;
    if (v24)
      v22 = -2;
    else
      v22 = 0x80;
  }
  *(_BYTE *)v16 = v22;
  *(_BYTE *)((a1[3] & v18) + (a1[3] & 7) + *a1 + 1) = v22;
  v26 = a1[4];
  a1[5] += v25;
  if (!v26)
    return 1;
  v27 = (unint64_t *)(v26 + 8);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 - 1, v27));
  v29 = (unint64_t *)(v26 + 16);
  result = 1;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  return result;
}

void operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  int *v47;
  unint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  absl::lts_2020_02_25::Mutex *v57;
  uint64_t v58;
  int *v59;
  int64_t v60;
  char *v61;
  char *v62;
  absl::lts_2020_02_25::Mutex *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v72[24];
  uint64_t v73;
  void *__p;
  void *v75;
  char *v76;
  void *v77;
  unint64_t v78;
  char *v79;
  int *v80;
  char *v81;
  char *v82;
  uint64_t *v83;
  uint64_t *v84;
  void **p_p;

  v6 = *(_DWORD *)(a1 + 160);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v8 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  if (v7 != v8)
  {
    v10 = a1;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v78;
    HIDWORD(v4) = 0;
    while (1)
    {
      v16 = *(double *)(v8 + 8 * v12);
      if (v16 <= 0.0)
        goto LABEL_5;
      v17 = *(_QWORD *)(a2 + 2496);
      v18 = (v17 + 1) % 0x270uLL;
      v19 = 4 * v17;
      v20 = 4 * v18;
      LODWORD(v17) = *(_DWORD *)(a2 + 4 * ((v17 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v18) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v17) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v18) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v19) = v17;
      LODWORD(v17) = ((v17 ^ (v17 >> 11)) << 7) & 0x9D2C5680 ^ v17 ^ (v17 >> 11);
      v21 = (double)(((_DWORD)v17 << 15) & 0xEFC60000 ^ v17 ^ ((((_DWORD)v17 << 15) & 0xEFC60000 ^ v17) >> 18));
      if (v18 == 623)
        v22 = 0;
      else
        v22 = v18 + 1;
      v23 = 397;
      if (v18 >= 0xE3)
        v23 = -227;
      v24 = *(_DWORD *)(a2 + 4 * (v23 + v18)) ^ ((*(_DWORD *)(a2 + 4 * v22) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v18) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v22) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v20) = v24;
      v25 = ((v24 ^ (v24 >> 11)) << 7) & 0x9D2C5680 ^ v24 ^ (v24 >> 11);
      *(_QWORD *)(a2 + 2496) = v22;
      v26 = pow((v21 + (double)((v25 << 15) & 0xEFC60000 ^ v25 ^ (((v25 << 15) & 0xEFC60000 ^ v25) >> 18)) * 4294967300.0)* 5.42101086e-20+ 0.0, 1.0 / v16);
      v27 = v26;
      if (v11 >= (unint64_t)v13)
        break;
      *(double *)v11 = v26;
      *(_DWORD *)(v11 + 8) = v12;
      v15 = v11 + 16;
LABEL_4:
      v8 = *(_QWORD *)(v10 + 136);
      v7 = *(_QWORD *)(v10 + 144);
      v11 = v15;
LABEL_5:
      if (++v12 >= (unint64_t)((v7 - v8) >> 3))
      {
        v78 = v15;
        v79 = v13;
        goto LABEL_32;
      }
    }
    v28 = (uint64_t)(v11 - (_QWORD)v14) >> 4;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60)
    {
      v78 = v15;
      v79 = v13;
      v77 = v14;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v13 - v14) >> 3 > v29)
      v29 = (v13 - v14) >> 3;
    if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
    {
      if (v30 >> 60)
      {
        v78 = v15;
        v79 = v13;
        v77 = v14;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v31 = (char *)operator new(16 * v30);
      v32 = (uint64_t)&v31[16 * v28];
      *(double *)v32 = v27;
      *(_DWORD *)(v32 + 8) = v12;
      if ((char *)v11 != v14)
      {
LABEL_22:
        v33 = v32;
        do
        {
          v34 = (char *)(v33 - 16);
          *(_OWORD *)(v33 - 16) = *(_OWORD *)(v11 - 16);
          v11 -= 16;
          v33 -= 16;
        }
        while ((char *)v11 != v14);
        v13 = &v31[16 * v30];
        v15 = v32 + 16;
        if (!v14)
          goto LABEL_26;
LABEL_25:
        operator delete(v14);
LABEL_26:
        v14 = v34;
        v10 = a1;
        goto LABEL_4;
      }
    }
    else
    {
      v31 = 0;
      v32 = 16 * v28;
      *(double *)v32 = v26;
      *(_DWORD *)(v32 + 8) = v12;
      if ((char *)v11 != v14)
        goto LABEL_22;
    }
    v34 = (char *)v32;
    v13 = &v31[16 * v30];
    v15 = v32 + 16;
    if (!v14)
      goto LABEL_26;
    goto LABEL_25;
  }
  v11 = 0;
  v14 = 0;
LABEL_32:
  v35 = 126 - 2 * __clz((uint64_t)(v11 - (_QWORD)v14) >> 4);
  v77 = v14;
  if ((char *)v11 == v14)
    v36 = 0;
  else
    v36 = v35;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,false>(v11, v11, (uint64_t)v14, (unint64_t)v14, (uint64_t)&v73, v36, 1);
  LODWORD(v4) = llround((1.0 - a4) * (double)v6);
  if ((int)v4 >= 1)
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    while (1)
    {
      while (1)
      {
        v42 = (int *)&v14[16 * v40 + 8];
        if (v39 >= v38)
          break;
        *(_DWORD *)v39 = *v42;
        v39 += 4;
        v41 = (uint64_t)v39;
        v81 = v39;
        if (++v40 == v4)
          goto LABEL_68;
      }
      v43 = (v39 - (char *)v37) >> 2;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v38 - (char *)v37) >> 1 > v44)
        v44 = (v38 - (char *)v37) >> 1;
      if ((unint64_t)(v38 - (char *)v37) >= 0x7FFFFFFFFFFFFFFCLL)
        v45 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
      {
        if (v45 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v46 = operator new(4 * v45);
        v47 = (int *)&v46[4 * v43];
        *v47 = *v42;
        v41 = (uint64_t)(v47 + 1);
        if (v39 == (char *)v37)
          goto LABEL_53;
      }
      else
      {
        v46 = 0;
        v47 = (int *)(4 * v43);
        *(_DWORD *)(4 * v43) = *v42;
        v41 = 4 * v43 + 4;
        if (v39 == (char *)v37)
          goto LABEL_53;
      }
      v48 = v39 - 4 - (char *)v37;
      if (v48 >= 0xBC)
      {
        if (&v46[v39 - (char *)v37 - 4 - (v48 & 0xFFFFFFFFFFFFFFFCLL)] > &v46[v39 - (char *)v37 - 4])
        {
          v49 = v39;
        }
        else if (&v39[-(v48 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v39 - 4)
        {
          v49 = v39;
        }
        else if ((unint64_t)((char *)v37 - v46) >= 0x20)
        {
          v51 = (v48 >> 2) + 1;
          v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
          v49 = &v39[-v52];
          v47 = (int *)((char *)v47 - v52);
          v53 = &v46[4 * v43 - 16];
          v54 = v39 - 16;
          v55 = v51 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v56 = *(_OWORD *)v54;
            *(v53 - 1) = *((_OWORD *)v54 - 1);
            *v53 = v56;
            v53 -= 2;
            v54 -= 32;
            v55 -= 8;
          }
          while (v55);
          if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_53;
        }
        else
        {
          v49 = v39;
        }
      }
      else
      {
        v49 = v39;
      }
      do
      {
        v50 = *((_DWORD *)v49 - 1);
        v49 -= 4;
        *--v47 = v50;
      }
      while (v49 != (char *)v37);
LABEL_53:
      v38 = &v46[4 * v45];
      v80 = v47;
      v81 = (char *)v41;
      v82 = v38;
      if (v37)
        operator delete(v37);
      v37 = v47;
      v81 = (char *)v41;
      ++v40;
      v39 = (char *)v41;
      if (v40 == v4)
        goto LABEL_68;
    }
  }
  v41 = 0;
LABEL_68:
  operations_research::sat::NeighborhoodGeneratorHelper::RemoveMarkedConstraints(*(_QWORD *)(a1 + 32), &v80, a3);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 40), v57);
  v58 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a3 + 152) = v58;
  *(_QWORD *)(a1 + 216) = v58 + 1;
  v73 = v58;
  __p = 0;
  v75 = 0;
  v76 = 0;
  v59 = v80;
  v60 = v41 - (_QWORD)v80;
  if (v60)
  {
    if (v60 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v61 = (char *)operator new(v60);
    v62 = &v61[4 * (v60 >> 2)];
    __p = v61;
    v76 = v62;
    memcpy(v61, v59, v60);
    v75 = v62;
  }
  v83 = (uint64_t *)(a1 + 168);
  v84 = &v73;
  p_p = &__p;
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::EmplaceDecomposable::operator()<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<std::vector<int>&&>>(&v83, &v73, &v84, (uint64_t *)&p_p, (uint64_t)v72);
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(a1 + 40), v63, v64, v65, v66, v67, v68, v69);
  if (v77)
    operator delete(v77);
  if (v59)
    operator delete(v59);
}

void sub_22DA97148(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;
  absl::lts_2020_02_25::Mutex *v24;
  void *v26;

  if (__p)
    operator delete(__p);
  absl::lts_2020_02_25::Mutex::Unlock(v24, a2, a3, a4, a5, a6, a7, a8);
  operations_research::sat::Neighborhood::~Neighborhood(a10);
  if (v23)
  {
    operator delete(v23);
    v26 = a22;
    if (!a22)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v26 = a22;
    if (!a22)
      goto LABEL_5;
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::NeighborhoodGenerator::IsRelaxationGenerator(operations_research::sat::NeighborhoodGenerator *this)
{
  return 0;
}

void operations_research::sat::SimpleNeighborhoodGenerator::~SimpleNeighborhoodGenerator(operations_research::sat::SimpleNeighborhoodGenerator *this)
{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SimpleNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SimpleNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::VariableGraphNeighborhoodGenerator::~VariableGraphNeighborhoodGenerator(operations_research::sat::VariableGraphNeighborhoodGenerator *this)
{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::VariableGraphNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::VariableGraphNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::ConstraintGraphNeighborhoodGenerator::~ConstraintGraphNeighborhoodGenerator(operations_research::sat::ConstraintGraphNeighborhoodGenerator *this)
{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::ConstraintGraphNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::ConstraintGraphNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::SchedulingNeighborhoodGenerator::~SchedulingNeighborhoodGenerator(operations_research::sat::SchedulingNeighborhoodGenerator *this)
{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SchedulingNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SchedulingNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator::~SchedulingTimeWindowNeighborhoodGenerator(operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator *this)
{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::RelaxationInducedNeighborhoodGenerator::~RelaxationInducedNeighborhoodGenerator(operations_research::sat::RelaxationInducedNeighborhoodGenerator *this)
{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::RelaxationInducedNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::RelaxationInducedNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator::~ConsecutiveConstraintsRelaxationNeighborhoodGenerator(operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *this)
{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24F982810;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator::ReadyToGenerate(operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *this)
{
  return 1;
}

uint64_t operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator::IsRelaxationGenerator(operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *this)
{
  return 1;
}

void operations_research::sat::NeighborhoodGeneratorHelper::~NeighborhoodGeneratorHelper(operations_research::sat::NeighborhoodGeneratorHelper *this)
{
  operations_research::sat::NeighborhoodGeneratorHelper::~NeighborhoodGeneratorHelper(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;

  *(_QWORD *)this = &off_24F982798;
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 38);
  if (v4)
  {
    v5 = *((_QWORD *)this + 39);
    v6 = (void *)*((_QWORD *)this + 38);
    if (v5 != v4)
    {
      v7 = *((_QWORD *)this + 39);
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)*((_QWORD *)this + 38);
    }
    *((_QWORD *)this + 39) = v4;
    operator delete(v6);
  }
  v10 = *((_QWORD *)this + 35);
  if (v10)
  {
    v11 = *((_QWORD *)this + 36);
    v12 = (void *)*((_QWORD *)this + 35);
    if (v11 != v10)
    {
      v13 = *((_QWORD *)this + 36);
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v10;
    operator delete(v12);
  }
  v16 = *((_QWORD *)this + 32);
  if (v16)
  {
    v17 = *((_QWORD *)this + 33);
    v18 = (void *)*((_QWORD *)this + 32);
    if (v17 != v16)
    {
      v19 = *((_QWORD *)this + 33);
      do
      {
        v21 = *(void **)(v19 - 24);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)*((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v16;
    operator delete(v18);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 248));
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 104));
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t operations_research::sat::NeighborhoodGeneratorHelper::TaskIsAvailable(operations_research::sat::NeighborhoodGeneratorHelper *this)
{
  return 0;
}

void operations_research::sat::NeighborhoodGeneratorHelper::GenerateTask(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::~WeightedRandomRelaxationNeighborhoodGenerator(operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator *this)
{
  operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::~WeightedRandomRelaxationNeighborhoodGenerator(this);
  JUMPOUT(0x22E31DF78);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &off_24F9827D0;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)((char *)this + 176);
    do
    {
      if ((*(char *)(*((_QWORD *)this + 21) + v4) & 0x80000000) == 0)
      {
        v6 = *v5 + v3;
        v7 = *(void **)(v6 + 8);
        if (v7)
        {
          *(_QWORD *)(v6 + 16) = v7;
          operator delete(v7);
          v2 = *((_QWORD *)this + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*((void **)this + 21));
    *((_QWORD *)this + 21) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
    *v5 = 0;
  }
  v8 = (_QWORD *)*((_QWORD *)this + 25);
  if (v8)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v8);
  v9 = (void *)*((_QWORD *)this + 17);
  if (v9)
  {
    *((_QWORD *)this + 18) = v9;
    operator delete(v9);
  }
  *(_QWORD *)this = off_24F982810;
  v10 = (void *)*((_QWORD *)this + 6);
  if (v10)
  {
    *((_QWORD *)this + 7) = v10;
    operator delete(v10);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::ReadyToGenerate(operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator *this)
{
  return 1;
}

uint64_t operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::IsRelaxationGenerator(operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator *this)
{
  return 1;
}

uint64_t google::MakeCheckOpString<long long,long long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DA9784C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  operations_research::sat::IntegerVariableProto **v5;
  operations_research::sat::IntegerVariableProto *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  operations_research::sat::IntegerVariableProto **v15;
  operations_research::sat::IntegerVariableProto **v16;
  operations_research::sat::IntegerVariableProto *v17;
  operations_research::sat::IntegerVariableProto *v18;
  operations_research::sat::IntegerVariableProto *v19;
  google::protobuf::Arena *v20;
  int v21;
  uint64_t v22;
  operations_research::sat::IntegerVariableProto **v23;
  operations_research::sat::IntegerVariableProto **v24;
  operations_research::sat::IntegerVariableProto *v25;
  operations_research::sat::IntegerVariableProto *v26;
  int v27;
  int *v28;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 8);
    if ((int)v4 >= 1)
    {
      v5 = (operations_research::sat::IntegerVariableProto **)(*(_QWORD *)(a1 + 16) + 8);
      do
      {
        v6 = *v5++;
        operations_research::sat::IntegerVariableProto::Clear(v6);
        --v4;
      }
      while (v4);
      *(_DWORD *)(a1 + 8) = 0;
    }
    v7 = *(_DWORD *)(a2 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, *(_DWORD *)(a2 + 8));
      v10 = v9;
      v11 = **(int **)(a1 + 16);
      v12 = *(int *)(a1 + 8);
      v13 = v11 - v12;
      if ((int)v11 - (int)v12 >= v7)
        v14 = v7;
      else
        v14 = v13;
      if ((int)v14 >= 1)
      {
        v15 = (operations_research::sat::IntegerVariableProto **)(v8 + 8);
        v16 = (operations_research::sat::IntegerVariableProto **)v9;
        do
        {
          v18 = *v15++;
          v17 = v18;
          v19 = *v16++;
          google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v17, v19);
          --v14;
        }
        while (v14);
      }
      if (v13 < v7)
      {
        v20 = *(google::protobuf::Arena **)a1;
        v21 = v12 + v7 - v11;
        v22 = 8 * v11 - 8 * v12;
        v23 = (operations_research::sat::IntegerVariableProto **)((char *)v10 + v22);
        v24 = (operations_research::sat::IntegerVariableProto **)(v22 + v8 + 8);
        do
        {
          v25 = *v24++;
          v26 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v20);
          google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v25, v26);
          *v23++ = v26;
          --v21;
        }
        while (v21);
      }
      v27 = *(_DWORD *)(a1 + 8) + v7;
      *(_DWORD *)(a1 + 8) = v27;
      v28 = *(int **)(a1 + 16);
      if (*v28 < v27)
        *v28 = v27;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *,false>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  BOOL v43;
  int v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  int64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  BOOL v56;
  __int128 *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  double *v39;
  _OWORD *v40;
  int v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (result != a2)
  {
    v2 = result + 80;
    if (result + 80 != a2)
    {
      v3 = 0;
      v4 = result;
      while (1)
      {
        v6 = v4;
        v4 = v2;
        v7 = *(_DWORD *)(v6 + 88);
        v8 = *(_DWORD *)(v6 + 8);
        if (v7 >= v8)
        {
          if (v8 < v7)
            goto LABEL_6;
          v9 = *(double *)(v6 + 96);
          v10 = *(double *)(v6 + 16);
          if (v9 >= v10)
          {
            if (v10 < v9)
              goto LABEL_6;
            v11 = *(double *)(v6 + 104);
            v12 = *(double *)(v6 + 24);
            if (v11 >= v12)
            {
              if (v12 < v11)
                goto LABEL_6;
              v13 = *(double *)(v6 + 112);
              v14 = *(double *)(v6 + 32);
              if (v13 >= v14)
              {
                if (v14 < v13)
                  goto LABEL_6;
                v15 = *(_QWORD *)(v6 + 120);
                v16 = *(_QWORD *)(v6 + 40);
                if (v15 >= v16)
                {
                  if (v16 < v15)
                    goto LABEL_6;
                  v17 = *(_QWORD *)(v6 + 128);
                  v18 = *(_QWORD *)(v6 + 48);
                  if (v17 >= v18)
                  {
                    if (v18 < v17)
                      goto LABEL_6;
                    v19 = *(_QWORD *)(v6 + 136);
                    v20 = *(_QWORD *)(v6 + 56);
                    if (v19 >= v20)
                    {
                      if (v20 < v19)
                        goto LABEL_6;
                      v21 = *(_QWORD *)(v6 + 144);
                      v22 = *(_QWORD *)(v6 + 64);
                      if (v21 >= v22)
                      {
                        if (v22 < v21)
                          goto LABEL_6;
                        v23 = *(_QWORD *)(v6 + 152);
                        v24 = *(_QWORD *)(v6 + 72);
                        if (v23 >= v24 && (v24 < v23 || *(_QWORD *)v4 >= *(_QWORD *)v6))
                          goto LABEL_6;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v9 = *(double *)(v6 + 96);
        }
        v25 = *(_QWORD *)(v6 + 80);
        v26 = *(_DWORD *)(v6 + 92);
        v27 = *(double *)(v6 + 104);
        v28 = *(double *)(v6 + 112);
        v29 = *(_QWORD *)(v6 + 120);
        v30 = *(_QWORD *)(v6 + 128);
        v31 = *(_QWORD *)(v6 + 136);
        v32 = *(_QWORD *)(v6 + 144);
        v33 = *(_QWORD *)(v6 + 152);
        v34 = *(_OWORD *)(v6 + 48);
        *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 32);
        *(_OWORD *)(v4 + 48) = v34;
        *(_OWORD *)(v4 + 64) = *(_OWORD *)(v6 + 64);
        v35 = *(_OWORD *)(v6 + 16);
        v5 = result;
        *(_OWORD *)v4 = *(_OWORD *)v6;
        *(_OWORD *)(v4 + 16) = v35;
        if (v6 == result)
          goto LABEL_5;
        v36 = v3;
        while (1)
        {
          v39 = (double *)(result + v36);
          v40 = (_OWORD *)(result + v36 - 80);
          v41 = *(_DWORD *)(result + v36 - 72);
          if (v7 >= v41)
          {
            if (v41 < v7)
              goto LABEL_50;
            v42 = *(v39 - 8);
            if (v9 >= v42)
            {
              if (v42 < v9)
                goto LABEL_50;
              v43 = *(v39 - 7);
              if (v27 >= v43)
              {
                if (v43 < v27)
                  goto LABEL_50;
                v44 = *(v39 - 6);
                if (v28 >= v44)
                {
                  if (v44 < v28)
                    goto LABEL_50;
                  v45 = *((_QWORD *)v39 - 5);
                  if (v29 >= v45)
                  {
                    if (v45 < v29)
                      goto LABEL_50;
                    v46 = *((_QWORD *)v39 - 4);
                    if (v30 >= v46)
                    {
                      if (v46 < v30)
                        goto LABEL_50;
                      v47 = *((_QWORD *)v39 - 3);
                      if (v31 >= v47)
                      {
                        if (v47 < v31)
                          goto LABEL_50;
                        v48 = *((_QWORD *)v39 - 2);
                        if (v32 >= v48)
                        {
                          if (v48 < v32)
                            goto LABEL_50;
                          v49 = *((_QWORD *)v39 - 1);
                          if (v33 >= v49)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_29:
          v6 -= 80;
          v37 = *(_OWORD *)(result + v36 - 32);
          *((_OWORD *)v39 + 2) = *(_OWORD *)(result + v36 - 48);
          *((_OWORD *)v39 + 3) = v37;
          *((_OWORD *)v39 + 4) = *(_OWORD *)(result + v36 - 16);
          v38 = *(_OWORD *)(result + v36 - 64);
          *(_OWORD *)v39 = *v40;
          *((_OWORD *)v39 + 1) = v38;
          v36 -= 80;
          if (!v36)
          {
            v5 = result;
            goto LABEL_5;
          }
        }
        if (v49 >= v33)
          break;
LABEL_50:
        v5 = v6;
LABEL_5:
        *(_QWORD *)v5 = v25;
        *(_DWORD *)(v5 + 8) = v7;
        *(_DWORD *)(v5 + 12) = v26;
        *(double *)(v5 + 16) = v9;
        *(double *)(v5 + 24) = v27;
        *(double *)(v5 + 32) = v28;
        *(_QWORD *)(v5 + 40) = v29;
        *(_QWORD *)(v5 + 48) = v30;
        *(_QWORD *)(v5 + 56) = v31;
        *(_QWORD *)(v5 + 64) = v32;
        *(_QWORD *)(v5 + 72) = v33;
LABEL_6:
        v2 = v4 + 80;
        v3 += 80;
        if (v4 + 80 == a2)
          return result;
      }
      if (v25 >= *(_QWORD *)v40)
      {
        v5 = result + v36;
        goto LABEL_5;
      }
      goto LABEL_29;
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  double v5;
  uint64_t v6;
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (result != a2)
  {
    while (1)
    {
      if (result + 10 == a2)
        return result;
      v2 = result;
      result += 10;
      v3 = *((_DWORD *)v2 + 22);
      v4 = *((_DWORD *)v2 + 2);
      if (v3 >= v4)
      {
        if (v4 >= v3)
        {
          v5 = *((double *)v2 + 12);
          v27 = *((double *)v2 + 2);
          if (v5 < v27)
            goto LABEL_7;
          if (v27 >= v5)
          {
            v28 = *((double *)v2 + 13);
            v29 = *((double *)v2 + 3);
            if (v28 < v29)
              goto LABEL_7;
            if (v29 >= v28)
            {
              v30 = *((double *)v2 + 14);
              v31 = *((double *)v2 + 4);
              if (v30 < v31)
                goto LABEL_7;
              if (v31 >= v30)
              {
                v32 = v2[15];
                v33 = v2[5];
                if (v32 < v33)
                  goto LABEL_7;
                if (v33 >= v32)
                {
                  v34 = v2[16];
                  v35 = v2[6];
                  if (v34 < v35)
                    goto LABEL_7;
                  if (v35 >= v34)
                  {
                    v36 = v2[17];
                    v37 = v2[7];
                    if (v36 < v37)
                      goto LABEL_7;
                    if (v37 >= v36)
                    {
                      v38 = v2[18];
                      v39 = v2[8];
                      if (v38 < v39)
                        goto LABEL_7;
                      if (v39 >= v38)
                      {
                        v40 = v2[19];
                        v41 = v2[9];
                        if (v40 < v41 || v41 >= v40 && *result < *v2)
                          goto LABEL_7;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v5 = *((double *)v2 + 12);
LABEL_7:
        v6 = *result;
        v7 = *((_DWORD *)v2 + 23);
        v8 = *((double *)v2 + 13);
        v9 = *((double *)v2 + 14);
        v10 = v2[15];
        v11 = v2[16];
        v12 = v2[17];
        v13 = v2[18];
        v14 = result;
        v15 = v2[19];
        while (1)
        {
          v16 = *(v14 - 2);
          v14[2] = *(v14 - 3);
          v14[3] = v16;
          v14[4] = *(v14 - 1);
          v17 = *(v14 - 4);
          *v14 = *(v14 - 5);
          v14[1] = v17;
          v18 = *((_DWORD *)v14 - 38);
          if (v3 >= v18)
          {
            if (v18 < v3)
              break;
            v19 = *((double *)v14 - 18);
            if (v5 >= v19)
            {
              if (v19 < v5)
                break;
              v20 = *((double *)v14 - 17);
              if (v8 >= v20)
              {
                if (v20 < v8)
                  break;
                v21 = *((double *)v14 - 16);
                if (v9 >= v21)
                {
                  if (v21 < v9)
                    break;
                  v22 = *((_QWORD *)v14 - 15);
                  if (v10 >= v22)
                  {
                    if (v22 < v10)
                      break;
                    v23 = *((_QWORD *)v14 - 14);
                    if (v11 >= v23)
                    {
                      if (v23 < v11)
                        break;
                      v24 = *((_QWORD *)v14 - 13);
                      if (v12 >= v24)
                      {
                        if (v24 < v12)
                          break;
                        v25 = *((_QWORD *)v14 - 12);
                        if (v13 >= v25)
                        {
                          if (v25 < v13)
                            break;
                          v26 = *((_QWORD *)v14 - 11);
                          if (v15 >= v26 && (v26 < v15 || v6 >= *((_QWORD *)v14 - 20)))
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v14 -= 5;
        }
        *((_QWORD *)v14 - 10) = v6;
        *((_DWORD *)v14 - 18) = v3;
        *((_DWORD *)v14 - 17) = v7;
        *((double *)v14 - 8) = v5;
        *((double *)v14 - 7) = v8;
        *((double *)v14 - 6) = v9;
        *((_QWORD *)v14 - 5) = v10;
        *((_QWORD *)v14 - 4) = v11;
        *((_QWORD *)v14 - 3) = v12;
        *((_QWORD *)v14 - 2) = v13;
        *((_QWORD *)v14 - 1) = v15;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a1 + 2);
  if (v3 < v4)
    goto LABEL_2;
  if (v4 < v3)
    goto LABEL_7;
  v24 = *((double *)a2 + 2);
  v25 = *((double *)a1 + 2);
  if (v24 < v25)
    goto LABEL_2;
  if (v25 < v24)
    goto LABEL_7;
  v26 = *((double *)a2 + 3);
  v27 = *((double *)a1 + 3);
  if (v26 < v27)
    goto LABEL_2;
  if (v27 < v26)
    goto LABEL_7;
  v28 = *((double *)a2 + 4);
  v29 = *((double *)a1 + 4);
  if (v28 < v29)
    goto LABEL_2;
  if (v29 < v28)
    goto LABEL_7;
  v30 = *((_QWORD *)a2 + 5);
  v31 = *((_QWORD *)a1 + 5);
  if (v30 < v31)
    goto LABEL_2;
  if (v31 < v30)
    goto LABEL_7;
  v32 = *((_QWORD *)a2 + 6);
  v33 = *((_QWORD *)a1 + 6);
  if (v32 < v33
    || v33 >= v32
    && ((v34 = *((_QWORD *)a2 + 7), v35 = *((_QWORD *)a1 + 7), v34 < v35)
     || v35 >= v34
     && ((v36 = *((_QWORD *)a2 + 8), v37 = *((_QWORD *)a1 + 8), v36 < v37)
      || v37 >= v36
      && ((v38 = *((_QWORD *)a2 + 9), v39 = *((_QWORD *)a1 + 9), v38 < v39)
       || v39 >= v38 && *(_QWORD *)a2 < *(_QWORD *)a1))))
  {
LABEL_2:
    v5 = *((_DWORD *)a3 + 2);
    if (v5 < v3)
      goto LABEL_31;
    if (v3 >= v5)
    {
      v40 = *((double *)a3 + 2);
      v41 = *((double *)a2 + 2);
      if (v40 < v41)
        goto LABEL_31;
      if (v41 >= v40)
      {
        v47 = *((double *)a3 + 3);
        v48 = *((double *)a2 + 3);
        if (v47 < v48)
          goto LABEL_31;
        if (v48 >= v47)
        {
          v49 = *((double *)a3 + 4);
          v50 = *((double *)a2 + 4);
          if (v49 < v50)
            goto LABEL_31;
          if (v50 >= v49)
          {
            v51 = *((_QWORD *)a3 + 5);
            v52 = *((_QWORD *)a2 + 5);
            if (v51 < v52)
              goto LABEL_31;
            if (v52 >= v51)
            {
              v53 = *((_QWORD *)a3 + 6);
              v54 = *((_QWORD *)a2 + 6);
              if (v53 < v54
                || v54 >= v53
                && ((v55 = *((_QWORD *)a3 + 7), v56 = *((_QWORD *)a2 + 7), v55 < v56)
                 || v56 >= v55
                 && ((v57 = *((_QWORD *)a3 + 8), v58 = *((_QWORD *)a2 + 8), v57 < v58)
                  || v58 >= v57
                  && ((v59 = *((_QWORD *)a3 + 9), v60 = *((_QWORD *)a2 + 9), v59 < v60)
                   || v60 >= v59 && *(_QWORD *)a3 < *(_QWORD *)a2))))
              {
LABEL_31:
                v121 = a1[2];
                v126 = a1[3];
                v131 = a1[4];
                v111 = *a1;
                v116 = a1[1];
                *a1 = *a3;
                v42 = a3[4];
                v44 = a3[1];
                v43 = a3[2];
                a1[3] = a3[3];
                a1[4] = v42;
                a1[1] = v44;
                a1[2] = v43;
                a3[3] = v126;
                a3[4] = v131;
                a3[2] = v121;
                result = 1;
                *a3 = v111;
                a3[1] = v116;
                return result;
              }
            }
          }
        }
      }
    }
    v117 = a1[2];
    v122 = a1[3];
    v127 = a1[4];
    v107 = *a1;
    v112 = a1[1];
    *a1 = *a2;
    v6 = a2[4];
    v8 = a2[1];
    v7 = a2[2];
    a1[3] = a2[3];
    a1[4] = v6;
    a1[1] = v8;
    a1[2] = v7;
    a2[3] = v122;
    a2[4] = v127;
    *a2 = v107;
    a2[1] = v112;
    a2[2] = v117;
    v9 = *((_DWORD *)a3 + 2);
    v10 = *((_DWORD *)a2 + 2);
    if (v9 < v10)
      goto LABEL_5;
    if (v10 < v9)
      return 1;
    v61 = *((double *)a3 + 2);
    v62 = *((double *)a2 + 2);
    if (v61 < v62)
      goto LABEL_5;
    if (v62 < v61)
      return 1;
    v67 = *((double *)a3 + 3);
    v68 = *((double *)a2 + 3);
    if (v67 < v68)
      goto LABEL_5;
    if (v68 < v67)
      return 1;
    v73 = *((double *)a3 + 4);
    v74 = *((double *)a2 + 4);
    if (v73 < v74)
      goto LABEL_5;
    if (v74 < v73)
      return 1;
    v79 = *((_QWORD *)a3 + 5);
    v80 = *((_QWORD *)a2 + 5);
    if (v79 < v80)
      goto LABEL_5;
    if (v80 < v79)
      return 1;
    v85 = *((_QWORD *)a3 + 6);
    v86 = *((_QWORD *)a2 + 6);
    if (v85 < v86)
      goto LABEL_5;
    if (v86 < v85)
      return 1;
    v91 = *((_QWORD *)a3 + 7);
    v92 = *((_QWORD *)a2 + 7);
    if (v91 < v92)
      goto LABEL_5;
    if (v92 < v91)
      return 1;
    v97 = *((_QWORD *)a3 + 8);
    v98 = *((_QWORD *)a2 + 8);
    if (v97 < v98)
      goto LABEL_5;
    if (v98 < v97)
      return 1;
    v103 = *((_QWORD *)a3 + 9);
    v104 = *((_QWORD *)a2 + 9);
    if (v103 < v104)
      goto LABEL_5;
    if (v104 < v103)
      return 1;
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
LABEL_5:
      v118 = a2[2];
      v123 = a2[3];
      v128 = a2[4];
      v108 = *a2;
      v113 = a2[1];
      *a2 = *a3;
      v11 = a3[4];
      v13 = a3[1];
      v12 = a3[2];
      a2[3] = a3[3];
      a2[4] = v11;
      a2[1] = v13;
      a2[2] = v12;
      a3[3] = v123;
      a3[4] = v128;
      a3[2] = v118;
      result = 2;
      *a3 = v108;
      a3[1] = v113;
      return result;
    }
    return 1;
  }
  else
  {
LABEL_7:
    v15 = *((_DWORD *)a3 + 2);
    if (v15 < v3)
      goto LABEL_8;
    if (v3 < v15)
      return 0;
    v45 = *((double *)a3 + 2);
    v46 = *((double *)a2 + 2);
    if (v45 < v46)
      goto LABEL_8;
    if (v46 < v45)
      return 0;
    v65 = *((double *)a3 + 3);
    v66 = *((double *)a2 + 3);
    if (v65 < v66)
      goto LABEL_8;
    if (v66 < v65)
      return 0;
    v71 = *((double *)a3 + 4);
    v72 = *((double *)a2 + 4);
    if (v71 < v72)
      goto LABEL_8;
    if (v72 < v71)
      return 0;
    v77 = *((_QWORD *)a3 + 5);
    v78 = *((_QWORD *)a2 + 5);
    if (v77 < v78)
      goto LABEL_8;
    if (v78 < v77)
      return 0;
    v83 = *((_QWORD *)a3 + 6);
    v84 = *((_QWORD *)a2 + 6);
    if (v83 < v84)
      goto LABEL_8;
    if (v84 < v83)
      return 0;
    v89 = *((_QWORD *)a3 + 7);
    v90 = *((_QWORD *)a2 + 7);
    if (v89 < v90)
      goto LABEL_8;
    if (v90 < v89)
      return 0;
    v95 = *((_QWORD *)a3 + 8);
    v96 = *((_QWORD *)a2 + 8);
    if (v95 < v96)
      goto LABEL_8;
    if (v96 < v95)
      return 0;
    v101 = *((_QWORD *)a3 + 9);
    v102 = *((_QWORD *)a2 + 9);
    if (v101 < v102)
      goto LABEL_8;
    if (v102 < v101)
      return 0;
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
LABEL_8:
      v119 = a2[2];
      v124 = a2[3];
      v129 = a2[4];
      v109 = *a2;
      v114 = a2[1];
      *a2 = *a3;
      v16 = a3[4];
      v18 = a3[1];
      v17 = a3[2];
      a2[3] = a3[3];
      a2[4] = v16;
      a2[1] = v18;
      a2[2] = v17;
      a3[3] = v124;
      a3[4] = v129;
      *a3 = v109;
      a3[1] = v114;
      a3[2] = v119;
      v19 = *((_DWORD *)a2 + 2);
      v20 = *((_DWORD *)a1 + 2);
      if (v19 < v20)
      {
LABEL_9:
        v120 = a1[2];
        v125 = a1[3];
        v130 = a1[4];
        v110 = *a1;
        v115 = a1[1];
        *a1 = *a2;
        v21 = a2[4];
        v23 = a2[1];
        v22 = a2[2];
        a1[3] = a2[3];
        a1[4] = v21;
        a1[1] = v23;
        a1[2] = v22;
        a2[3] = v125;
        a2[4] = v130;
        result = 2;
        *a2 = v110;
        a2[1] = v115;
        a2[2] = v120;
        return result;
      }
      if (v20 >= v19)
      {
        v63 = *((double *)a2 + 2);
        v64 = *((double *)a1 + 2);
        if (v63 < v64)
          goto LABEL_9;
        if (v64 >= v63)
        {
          v69 = *((double *)a2 + 3);
          v70 = *((double *)a1 + 3);
          if (v69 < v70)
            goto LABEL_9;
          if (v70 >= v69)
          {
            v75 = *((double *)a2 + 4);
            v76 = *((double *)a1 + 4);
            if (v75 < v76)
              goto LABEL_9;
            if (v76 >= v75)
            {
              v81 = *((_QWORD *)a2 + 5);
              v82 = *((_QWORD *)a1 + 5);
              if (v81 < v82)
                goto LABEL_9;
              if (v82 >= v81)
              {
                v87 = *((_QWORD *)a2 + 6);
                v88 = *((_QWORD *)a1 + 6);
                if (v87 < v88)
                  goto LABEL_9;
                if (v88 >= v87)
                {
                  v93 = *((_QWORD *)a2 + 7);
                  v94 = *((_QWORD *)a1 + 7);
                  if (v93 < v94)
                    goto LABEL_9;
                  if (v94 >= v93)
                  {
                    v99 = *((_QWORD *)a2 + 8);
                    v100 = *((_QWORD *)a1 + 8);
                    if (v99 < v100)
                      goto LABEL_9;
                    if (v100 >= v99)
                    {
                      v105 = *((_QWORD *)a2 + 9);
                      v106 = *((_QWORD *)a1 + 9);
                      if (v105 < v106)
                        goto LABEL_9;
                      if (v106 >= v105)
                      {
                        if (*(_QWORD *)a2 < *(_QWORD *)a1)
                          goto LABEL_9;
                        return 1;
                      }
                      else
                      {
                        return 1;
                      }
                    }
                    else
                    {
                      return 1;
                    }
                  }
                  else
                  {
                    return 1;
                  }
                }
                else
                {
                  return 1;
                }
              }
              else
              {
                return 1;
              }
            }
            else
            {
              return 1;
            }
          }
          else
          {
            return 1;
          }
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::NeighborhoodGenerator::SolveData *,std::__less<void,void> &>(__int128 *a1, unint64_t a2)
{
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *i;
  int v22;
  uint64_t *v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t j;
  int v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 *v53;
  int v54;
  __int128 *v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  v2 = *(double *)a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((double *)a1 + 2);
  v5 = *((double *)a1 + 3);
  v6 = *((double *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  v9 = *((_QWORD *)a1 + 7);
  v10 = *((_QWORD *)a1 + 8);
  v11 = *((_QWORD *)a1 + 9);
  v12 = *(_DWORD *)(a2 - 72);
  if ((int)v3 < v12)
    goto LABEL_20;
  if (v12 >= (int)v3)
  {
    v13 = *(double *)(a2 - 64);
    if (v4 < v13
      || v13 >= v4
      && ((v14 = *(double *)(a2 - 56), v5 < v14)
       || v14 >= v5
       && ((v15 = *(double *)(a2 - 48), v6 < v15)
        || v15 >= v6
        && ((v16 = *(_QWORD *)(a2 - 40), v7 < v16)
         || v16 >= v7
         && ((v17 = *(_QWORD *)(a2 - 32), v8 < v17)
          || v17 >= v8
          && ((v18 = *(_QWORD *)(a2 - 24), v9 < v18)
           || v18 >= v9
           && ((v19 = *(_QWORD *)(a2 - 16), v10 < v19)
            || v19 >= v10
            && ((v20 = *(_QWORD *)(a2 - 8), v11 < v20) || v20 >= v11 && *(uint64_t *)&v2 < *(_QWORD *)(a2 - 80)))))))))
    {
LABEL_20:
      i = a1 + 5;
      v22 = *((_DWORD *)a1 + 22);
      if ((int)v3 < v22)
        goto LABEL_66;
      v23 = (uint64_t *)(a1 + 6);
      while (1)
      {
        if (v22 >= (int)v3)
        {
          if (v4 < *(double *)v23)
            goto LABEL_66;
          if (*(double *)v23 >= v4)
          {
            v24 = *((double *)v23 + 1);
            if (v5 < v24)
              goto LABEL_66;
            if (v24 >= v5)
            {
              v25 = *((double *)v23 + 2);
              if (v6 < v25)
                goto LABEL_66;
              if (v25 >= v6)
              {
                v26 = v23[3];
                if (v7 < v26)
                  goto LABEL_66;
                if (v26 >= v7)
                {
                  v27 = v23[4];
                  if (v8 < v27)
                    goto LABEL_66;
                  if (v27 >= v8)
                  {
                    v28 = v23[5];
                    if (v9 < v28)
                      goto LABEL_66;
                    if (v28 >= v9)
                    {
                      v29 = v23[6];
                      if (v10 < v29)
                        goto LABEL_66;
                      if (v29 >= v10)
                      {
                        v30 = v23[7];
                        if (v11 < v30)
                        {
LABEL_65:
                          i = (__int128 *)(v23 - 2);
                          goto LABEL_66;
                        }
                        if (v30 >= v11 && *(uint64_t *)&v2 < *(v23 - 2))
                          goto LABEL_66;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        i += 5;
        v22 = *((_DWORD *)v23 + 18);
        v23 += 10;
        if ((int)v3 < v22)
          goto LABEL_65;
      }
    }
  }
  for (i = a1 + 5; (unint64_t)i < a2; i += 5)
  {
    v31 = *((_DWORD *)i + 2);
    if ((int)v3 < v31)
      break;
    if (v31 >= (int)v3)
    {
      v32 = *((double *)i + 2);
      if (v4 < v32)
        break;
      if (v32 >= v4)
      {
        v33 = *((double *)i + 3);
        if (v5 < v33)
          break;
        if (v33 >= v5)
        {
          v34 = *((double *)i + 4);
          if (v6 < v34)
            break;
          if (v34 >= v6)
          {
            v35 = *((_QWORD *)i + 5);
            if (v7 < v35)
              break;
            if (v35 >= v7)
            {
              v36 = *((_QWORD *)i + 6);
              if (v8 < v36)
                break;
              if (v36 >= v8)
              {
                v37 = *((_QWORD *)i + 7);
                if (v9 < v37)
                  break;
                if (v37 >= v9)
                {
                  v38 = *((_QWORD *)i + 8);
                  if (v10 < v38)
                    break;
                  if (v38 >= v10)
                  {
                    v39 = *((_QWORD *)i + 9);
                    if (v11 < v39 || v39 >= v11 && *(uint64_t *)&v2 < *(_QWORD *)i)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_66:
  if ((unint64_t)i < a2)
  {
    for (j = a2 - 152; ; j -= 80)
    {
      if ((int)v3 >= v12)
      {
        if (v12 < (int)v3)
          break;
        v42 = *(double *)(j + 88);
        if (v4 >= v42)
        {
          if (v42 < v4)
            break;
          v43 = *(double *)(j + 96);
          if (v5 >= v43)
          {
            if (v43 < v5)
              break;
            v44 = *(double *)(j + 104);
            if (v6 >= v44)
            {
              if (v44 < v6)
                break;
              v45 = *(_QWORD *)(j + 112);
              if (v7 >= v45)
              {
                if (v45 < v7)
                  break;
                v46 = *(_QWORD *)(j + 120);
                if (v8 >= v46)
                {
                  if (v46 < v8)
                    break;
                  v47 = *(_QWORD *)(j + 128);
                  if (v9 >= v47)
                  {
                    if (v47 < v9)
                      break;
                    v48 = *(_QWORD *)(j + 136);
                    if (v10 >= v48)
                    {
                      if (v48 < v10)
                        break;
                      v49 = *(_QWORD *)(j + 144);
                      if (v11 >= v49 && (v49 < v11 || *(uint64_t *)&v2 >= *(_QWORD *)(j + 72)))
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
      v41 = *(_DWORD *)j;
      v12 = v41;
    }
    a2 = j + 72;
  }
  while ((unint64_t)i < a2)
  {
    v76 = *i;
    v79 = i[3];
    v80 = i[4];
    v77 = i[1];
    v78 = i[2];
    v50 = *(_OWORD *)(a2 + 64);
    v52 = *(_OWORD *)(a2 + 16);
    v51 = *(_OWORD *)(a2 + 32);
    i[3] = *(_OWORD *)(a2 + 48);
    i[4] = v50;
    i[1] = v52;
    i[2] = v51;
    *i = *(_OWORD *)a2;
    *(_OWORD *)(a2 + 48) = v79;
    *(_OWORD *)(a2 + 64) = v80;
    *(_OWORD *)(a2 + 16) = v77;
    *(_OWORD *)(a2 + 32) = v78;
    *(_OWORD *)a2 = v76;
    v53 = i + 5;
    v54 = *((_DWORD *)i + 22);
    if ((int)v3 >= v54)
    {
      v55 = i + 6;
      while (1)
      {
        if (v54 >= (int)v3)
        {
          if (v4 < *(double *)v55)
          {
            i = v53;
            goto LABEL_120;
          }
          if (*(double *)v55 >= v4)
          {
            v56 = *((double *)v55 + 1);
            if (v5 < v56)
            {
              i = v53;
              goto LABEL_120;
            }
            if (v56 >= v5)
            {
              v57 = *((double *)v55 + 2);
              if (v6 < v57)
              {
                i = v53;
                goto LABEL_120;
              }
              if (v57 >= v6)
              {
                v58 = *((_QWORD *)v55 + 3);
                if (v7 < v58)
                {
                  i = v53;
                  goto LABEL_120;
                }
                if (v58 >= v7)
                {
                  v59 = *((_QWORD *)v55 + 4);
                  if (v8 < v59)
                  {
                    i = v53;
                    goto LABEL_120;
                  }
                  if (v59 >= v8)
                  {
                    v60 = *((_QWORD *)v55 + 5);
                    if (v9 < v60)
                    {
                      i = v53;
                      goto LABEL_120;
                    }
                    if (v60 >= v9)
                    {
                      v61 = *((_QWORD *)v55 + 6);
                      if (v10 < v61)
                      {
                        i = v53;
                        goto LABEL_120;
                      }
                      if (v61 >= v10)
                      {
                        v62 = *((_QWORD *)v55 + 7);
                        if (v11 < v62)
                        {
                          i = v53;
                          goto LABEL_120;
                        }
                        if (v62 >= v11 && *(uint64_t *)&v2 < *((_QWORD *)v55 - 2))
                        {
LABEL_111:
                          i = v55 - 1;
                          goto LABEL_120;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v53 += 5;
        v54 = *((_DWORD *)v55 + 18);
        v55 += 5;
        if ((int)v3 < v54)
          goto LABEL_111;
      }
    }
    i += 5;
    while (1)
    {
      do
      {
LABEL_120:
        a2 -= 80;
        v63 = *(_DWORD *)(a2 + 8);
      }
      while ((int)v3 < v63);
      if (v63 < (int)v3)
        break;
      v64 = *(double *)(a2 + 16);
      if (v4 >= v64)
      {
        if (v64 < v4)
          break;
        v65 = *(double *)(a2 + 24);
        if (v5 >= v65)
        {
          if (v65 < v5)
            break;
          v66 = *(double *)(a2 + 32);
          if (v6 >= v66)
          {
            if (v66 < v6)
              break;
            v67 = *(_QWORD *)(a2 + 40);
            if (v7 >= v67)
            {
              if (v67 < v7)
                break;
              v68 = *(_QWORD *)(a2 + 48);
              if (v8 >= v68)
              {
                if (v68 < v8)
                  break;
                v69 = *(_QWORD *)(a2 + 56);
                if (v9 >= v69)
                {
                  if (v69 < v9)
                    break;
                  v70 = *(_QWORD *)(a2 + 64);
                  if (v10 >= v70)
                  {
                    if (v70 < v10)
                      break;
                    v71 = *(_QWORD *)(a2 + 72);
                    if (v11 >= v71 && (v71 < v11 || *(uint64_t *)&v2 >= *(_QWORD *)a2))
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (i - 5 != a1)
  {
    *a1 = *(i - 5);
    v72 = *(i - 4);
    v73 = *(i - 3);
    v74 = *(i - 1);
    a1[3] = *(i - 2);
    a1[4] = v74;
    a1[1] = v72;
    a1[2] = v73;
  }
  *((double *)i - 10) = v2;
  *((_QWORD *)i - 9) = v3;
  *((double *)i - 8) = v4;
  *((double *)i - 7) = v5;
  *((double *)i - 6) = v6;
  *((_QWORD *)i - 5) = v7;
  *((_QWORD *)i - 4) = v8;
  *((_QWORD *)i - 3) = v9;
  *((_QWORD *)i - 2) = v10;
  *((_QWORD *)i - 1) = v11;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::NeighborhoodGenerator::SolveData *,std::__less<void,void> &>(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double *v24;
  int v25;
  double *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double *v43;
  double *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  double *v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  v2 = 0;
  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = *((_QWORD *)a1 + 5);
  v9 = *((_QWORD *)a1 + 6);
  v10 = *((_QWORD *)a1 + 7);
  v11 = *((_QWORD *)a1 + 8);
  v12 = *((_QWORD *)a1 + 9);
  while (1)
  {
    v13 = (uint64_t *)&a1[v2];
    v14 = LODWORD(a1[v2 + 11]);
    if (v14 >= (int)v4)
    {
      if ((int)v4 < v14)
        break;
      v15 = *((double *)v13 + 12);
      if (v15 >= v5)
      {
        if (v5 < v15)
          break;
        v16 = *((double *)v13 + 13);
        if (v16 >= v6)
        {
          if (v6 < v16)
            break;
          v17 = *((double *)v13 + 14);
          if (v17 >= v7)
          {
            if (v7 < v17)
              break;
            v18 = v13[15];
            if (v18 >= v8)
            {
              if (v8 < v18)
                break;
              v19 = v13[16];
              if (v19 >= v9)
              {
                if (v9 < v19)
                  break;
                v20 = v13[17];
                if (v20 >= v10)
                {
                  if (v10 < v20)
                    break;
                  v21 = v13[18];
                  if (v21 >= v11)
                  {
                    if (v11 < v21)
                      break;
                    v22 = v13[19];
                    if (v22 >= v12 && (v12 < v22 || v13[10] >= *(uint64_t *)&v3))
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
    v2 += 10;
  }
  v23 = (unint64_t)&a1[v2 + 10];
  if (v2 * 8)
  {
    v24 = a2 - 10;
    v25 = *((_DWORD *)a2 - 18);
    if (v25 >= (int)v4)
    {
      v26 = a2 - 8;
      while (1)
      {
        if ((int)v4 >= v25)
        {
          if (*v26 < v5)
            break;
          if (v5 >= *v26)
          {
            v27 = v26[1];
            if (v27 < v6)
              break;
            if (v6 >= v27)
            {
              v28 = v26[2];
              if (v28 < v7)
                break;
              if (v7 >= v28)
              {
                v29 = *((_QWORD *)v26 + 3);
                if (v29 < v8)
                  break;
                if (v8 >= v29)
                {
                  v30 = *((_QWORD *)v26 + 4);
                  if (v30 < v9)
                    break;
                  if (v9 >= v30)
                  {
                    v31 = *((_QWORD *)v26 + 5);
                    if (v31 < v10)
                      break;
                    if (v10 >= v31)
                    {
                      v32 = *((_QWORD *)v26 + 6);
                      if (v32 < v11)
                        break;
                      if (v11 >= v32)
                      {
                        v33 = *((_QWORD *)v26 + 7);
                        if (v33 < v12)
                          goto LABEL_68;
                        if (v12 >= v33 && *((_QWORD *)v26 - 2) < *(uint64_t *)&v3)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v24 -= 10;
        v25 = *((_DWORD *)v26 - 22);
        v26 -= 10;
        if (v25 < (int)v4)
          goto LABEL_68;
      }
    }
  }
  else
  {
    if (v23 >= (unint64_t)a2)
    {
LABEL_115:
      v24 = a2;
      v42 = v23;
      if (v23 >= (unint64_t)a2)
        goto LABEL_116;
      goto LABEL_70;
    }
    v24 = a2 - 10;
    v34 = *((_DWORD *)a2 - 18);
    if (v34 >= (int)v4)
    {
      v26 = a2 - 8;
      while (1)
      {
        a2 = v26 - 2;
        if ((int)v4 >= v34)
        {
          if (*v26 < v5)
            break;
          if (v5 >= *v26)
          {
            v35 = v26[1];
            if (v35 < v6)
              break;
            if (v6 >= v35)
            {
              v36 = v26[2];
              if (v36 < v7)
                break;
              if (v7 >= v36)
              {
                v37 = *((_QWORD *)v26 + 3);
                if (v37 < v8)
                  break;
                if (v8 >= v37)
                {
                  v38 = *((_QWORD *)v26 + 4);
                  if (v38 < v9)
                    break;
                  if (v9 >= v38)
                  {
                    v39 = *((_QWORD *)v26 + 5);
                    if (v39 < v10)
                      break;
                    if (v10 >= v39)
                    {
                      v40 = *((_QWORD *)v26 + 6);
                      if (v40 < v11)
                        break;
                      if (v11 >= v40)
                      {
                        v41 = *((_QWORD *)v26 + 7);
                        if (v41 < v12)
                          goto LABEL_115;
                        if (v12 >= v41 && *(_QWORD *)a2 < *(uint64_t *)&v3)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v23 >= (unint64_t)a2)
          break;
        v24 -= 10;
        v34 = *((_DWORD *)v26 - 22);
        v26 -= 10;
        if (v34 < (int)v4)
        {
LABEL_68:
          v24 = v26 - 2;
          break;
        }
      }
    }
  }
  v42 = v23;
  if (v23 >= (unint64_t)v24)
    goto LABEL_116;
LABEL_70:
  v43 = v24;
  do
  {
    v70 = *(_OWORD *)v42;
    v73 = *(_OWORD *)(v42 + 48);
    v74 = *(_OWORD *)(v42 + 64);
    v71 = *(_OWORD *)(v42 + 16);
    v72 = *(_OWORD *)(v42 + 32);
    v45 = *((_OWORD *)v43 + 4);
    v47 = *((_OWORD *)v43 + 1);
    v46 = *((_OWORD *)v43 + 2);
    *(_OWORD *)(v42 + 48) = *((_OWORD *)v43 + 3);
    *(_OWORD *)(v42 + 64) = v45;
    *(_OWORD *)(v42 + 16) = v47;
    *(_OWORD *)(v42 + 32) = v46;
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_OWORD *)v43 + 3) = v73;
    *((_OWORD *)v43 + 4) = v74;
    *((_OWORD *)v43 + 1) = v71;
    *((_OWORD *)v43 + 2) = v72;
    *(_OWORD *)v43 = v70;
    while (1)
    {
      do
      {
        v42 += 80;
        v48 = *(_DWORD *)(v42 + 8);
      }
      while (v48 < (int)v4);
      if ((int)v4 < v48)
        break;
      v49 = *(double *)(v42 + 16);
      if (v49 >= v5)
      {
        if (v5 < v49)
          break;
        v50 = *(double *)(v42 + 24);
        if (v50 >= v6)
        {
          if (v6 < v50)
            break;
          v51 = *(double *)(v42 + 32);
          if (v51 >= v7)
          {
            if (v7 < v51)
              break;
            v52 = *(_QWORD *)(v42 + 40);
            if (v52 >= v8)
            {
              if (v8 < v52)
                break;
              v53 = *(_QWORD *)(v42 + 48);
              if (v53 >= v9)
              {
                if (v9 < v53)
                  break;
                v54 = *(_QWORD *)(v42 + 56);
                if (v54 >= v10)
                {
                  if (v10 < v54)
                    break;
                  v55 = *(_QWORD *)(v42 + 64);
                  if (v55 >= v11)
                  {
                    if (v11 < v55)
                      break;
                    v56 = *(_QWORD *)(v42 + 72);
                    if (v56 >= v12 && (v12 < v56 || *(_QWORD *)v42 >= *(uint64_t *)&v3))
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
    v44 = v43 - 10;
    v57 = *((_DWORD *)v43 - 18);
    if (v57 >= (int)v4)
    {
      v58 = v43 - 8;
      do
      {
        if ((int)v4 >= v57)
        {
          if (*v58 < v5)
            goto LABEL_72;
          if (v5 >= *v58)
          {
            v59 = v58[1];
            if (v59 < v6)
              goto LABEL_72;
            if (v6 >= v59)
            {
              v60 = v58[2];
              if (v60 < v7)
                goto LABEL_72;
              if (v7 >= v60)
              {
                v61 = *((_QWORD *)v58 + 3);
                if (v61 < v8)
                  goto LABEL_72;
                if (v8 >= v61)
                {
                  v62 = *((_QWORD *)v58 + 4);
                  if (v62 < v9)
                    goto LABEL_72;
                  if (v9 >= v62)
                  {
                    v63 = *((_QWORD *)v58 + 5);
                    if (v63 < v10)
                      goto LABEL_72;
                    if (v10 >= v63)
                    {
                      v64 = *((_QWORD *)v58 + 6);
                      if (v64 < v11)
                        goto LABEL_72;
                      if (v11 >= v64)
                      {
                        v65 = *((_QWORD *)v58 + 7);
                        if (v65 < v12)
                          goto LABEL_72;
                        if (v12 >= v65 && *((_QWORD *)v58 - 2) < *(uint64_t *)&v3)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v44 -= 10;
        v57 = *((_DWORD *)v58 - 22);
        v58 -= 10;
      }
      while (v57 >= (int)v4);
      v44 = v58 - 2;
    }
LABEL_72:
    v43 = v44;
  }
  while (v42 < (unint64_t)v44);
LABEL_116:
  if ((double *)(v42 - 80) != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v42 - 80);
    v66 = *(_OWORD *)(v42 - 64);
    v67 = *(_OWORD *)(v42 - 48);
    v68 = *(_OWORD *)(v42 - 16);
    *((_OWORD *)a1 + 3) = *(_OWORD *)(v42 - 32);
    *((_OWORD *)a1 + 4) = v68;
    *((_OWORD *)a1 + 1) = v66;
    *((_OWORD *)a1 + 2) = v67;
  }
  *(double *)(v42 - 80) = v3;
  *(_QWORD *)(v42 - 72) = v4;
  *(double *)(v42 - 64) = v5;
  *(double *)(v42 - 56) = v6;
  *(double *)(v42 - 48) = v7;
  *(_QWORD *)(v42 - 40) = v8;
  *(_QWORD *)(v42 - 32) = v9;
  *(_QWORD *)(v42 - 24) = v10;
  *(_QWORD *)(v42 - 16) = v11;
  *(_QWORD *)(v42 - 8) = v12;
  return v42 - 80;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  int v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD *v33;
  int v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  int v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v55 = (__int128 *)(a2 - 80);
      v56 = *(_DWORD *)(a2 - 72);
      v57 = *(_DWORD *)(a1 + 8);
      if (v56 < v57)
        goto LABEL_56;
      if (v57 >= v56)
      {
        v61 = *(double *)(a2 - 64);
        v62 = *(double *)(a1 + 16);
        if (v61 < v62)
          goto LABEL_56;
        if (v62 >= v61)
        {
          v63 = *(double *)(a2 - 56);
          v64 = *(double *)(a1 + 24);
          if (v63 < v64)
            goto LABEL_56;
          if (v64 >= v63)
          {
            v65 = *(double *)(a2 - 48);
            v66 = *(double *)(a1 + 32);
            if (v65 < v66)
              goto LABEL_56;
            if (v66 >= v65)
            {
              v67 = *(_QWORD *)(a2 - 40);
              v68 = *(_QWORD *)(a1 + 40);
              if (v67 < v68)
                goto LABEL_56;
              if (v68 >= v67)
              {
                v69 = *(_QWORD *)(a2 - 32);
                v70 = *(_QWORD *)(a1 + 48);
                if (v69 < v70
                  || v70 >= v69
                  && ((v71 = *(_QWORD *)(a2 - 24), v72 = *(_QWORD *)(a1 + 56), v71 < v72)
                   || v72 >= v71
                   && ((v73 = *(_QWORD *)(a2 - 16), v74 = *(_QWORD *)(a1 + 64), v73 < v74)
                    || v74 >= v73
                    && ((v75 = *(_QWORD *)(a2 - 8), v76 = *(_QWORD *)(a1 + 72), v75 < v76)
                     || v76 >= v75 && *(_QWORD *)v55 < *(_QWORD *)a1))))
                {
LABEL_56:
                  v79 = *(_OWORD *)(a1 + 32);
                  v80 = *(_OWORD *)(a1 + 48);
                  v81 = *(_OWORD *)(a1 + 64);
                  v77 = *(_OWORD *)a1;
                  v78 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)a1 = *v55;
                  v58 = *(_OWORD *)(a2 - 16);
                  v60 = *(_OWORD *)(a2 - 64);
                  v59 = *(_OWORD *)(a2 - 48);
                  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 32);
                  *(_OWORD *)(a1 + 64) = v58;
                  *(_OWORD *)(a1 + 16) = v60;
                  *(_OWORD *)(a1 + 32) = v59;
                  *(_OWORD *)(a2 - 32) = v80;
                  *(_OWORD *)(a2 - 16) = v81;
                  *v55 = v77;
                  *(_OWORD *)(a2 - 64) = v78;
                  *(_OWORD *)(a2 - 48) = v79;
                }
              }
            }
          }
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((__int128 *)a1, (__int128 *)(a1 + 80), (__int128 *)(a2 - 80));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      v6 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((__int128 *)a1, (__int128 *)(a1 + 80), (__int128 *)(a1 + 160));
      v7 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (2)
  {
    v11 = *(_DWORD *)(v7 + 8);
    v12 = *(_DWORD *)(v6 + 8);
    if (v11 >= v12)
    {
      if (v12 < v11)
        goto LABEL_8;
      v13 = *(double *)(v7 + 16);
      v14 = *(double *)(v6 + 16);
      if (v13 >= v14)
      {
        if (v14 < v13)
          goto LABEL_8;
        v15 = *(double *)(v7 + 24);
        v16 = *(double *)(v6 + 24);
        if (v15 >= v16)
        {
          if (v16 < v15)
            goto LABEL_8;
          v43 = *(double *)(v7 + 32);
          v44 = *(double *)(v6 + 32);
          if (v43 >= v44)
          {
            if (v44 < v43)
              goto LABEL_8;
            v45 = *(_QWORD *)(v7 + 40);
            v46 = *(_QWORD *)(v6 + 40);
            if (v45 >= v46)
            {
              if (v46 < v45)
                goto LABEL_8;
              v47 = *(_QWORD *)(v7 + 48);
              v48 = *(_QWORD *)(v6 + 48);
              if (v47 >= v48)
              {
                if (v48 < v47)
                  goto LABEL_8;
                v49 = *(_QWORD *)(v7 + 56);
                v50 = *(_QWORD *)(v6 + 56);
                if (v49 >= v50)
                {
                  if (v50 < v49)
                    goto LABEL_8;
                  v51 = *(_QWORD *)(v7 + 64);
                  v52 = *(_QWORD *)(v6 + 64);
                  if (v51 >= v52)
                  {
                    if (v52 < v51)
                      goto LABEL_8;
                    v53 = *(_QWORD *)(v7 + 72);
                    v54 = *(_QWORD *)(v6 + 72);
                    if (v53 >= v54 && (v54 < v53 || *(_QWORD *)v7 >= *(_QWORD *)v6))
                      goto LABEL_8;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v13 = *(double *)(v7 + 16);
    }
    v17 = *(_QWORD *)v7;
    v18 = *(_DWORD *)(v7 + 12);
    v19 = *(double *)(v7 + 24);
    v20 = *(double *)(v7 + 32);
    v21 = *(_QWORD *)(v7 + 40);
    v22 = *(_QWORD *)(v7 + 48);
    v23 = *(_QWORD *)(v7 + 56);
    v24 = *(_QWORD *)(v7 + 64);
    v25 = *(_QWORD *)(v7 + 72);
    v26 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v7 + 48) = v26;
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v6 + 64);
    v27 = *(_OWORD *)(v6 + 16);
    v10 = a1;
    *(_OWORD *)v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = v27;
    if (v6 == a1)
      goto LABEL_7;
    v28 = v8;
    while (1)
    {
      v32 = a1 + v28;
      v33 = (_OWORD *)(a1 + v28 + 80);
      v34 = *(_DWORD *)(a1 + v28 + 88);
      if (v11 >= v34)
      {
        if (v34 < v11)
          goto LABEL_38;
        v35 = *(double *)(v32 + 96);
        if (v13 >= v35)
        {
          if (v35 < v13)
            goto LABEL_38;
          v36 = *(double *)(v32 + 104);
          if (v19 >= v36)
          {
            if (v36 < v19)
              goto LABEL_38;
            v37 = *(double *)(v32 + 112);
            if (v20 >= v37)
            {
              if (v37 < v20)
                goto LABEL_38;
              v38 = *(_QWORD *)(v32 + 120);
              if (v21 >= v38)
              {
                if (v38 < v21)
                  goto LABEL_38;
                v39 = *(_QWORD *)(v32 + 128);
                if (v22 >= v39)
                {
                  if (v39 < v22)
                    goto LABEL_38;
                  v40 = *(_QWORD *)(v32 + 136);
                  if (v23 >= v40)
                  {
                    if (v40 < v23)
                      goto LABEL_38;
                    v41 = *(_QWORD *)(v32 + 144);
                    if (v24 >= v41)
                    {
                      if (v41 < v24)
                        goto LABEL_38;
                      v42 = *(_QWORD *)(v32 + 152);
                      if (v25 >= v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_17:
      v29 = (_OWORD *)(v32 + 160);
      v6 -= 80;
      v30 = *(_OWORD *)(a1 + v28 + 128);
      v29[2] = *(_OWORD *)(a1 + v28 + 112);
      v29[3] = v30;
      v29[4] = *(_OWORD *)(a1 + v28 + 144);
      v31 = *(_OWORD *)(a1 + v28 + 96);
      *v29 = *v33;
      v29[1] = v31;
      v28 -= 80;
      if (v28 == -160)
      {
        v10 = a1;
        goto LABEL_7;
      }
    }
    if (v42 >= v25)
    {
      if (v17 >= *(_QWORD *)v33)
      {
        v10 = a1 + v28 + 160;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
LABEL_38:
    v10 = v6;
LABEL_7:
    *(_QWORD *)v10 = v17;
    *(_DWORD *)(v10 + 8) = v11;
    *(_DWORD *)(v10 + 12) = v18;
    *(double *)(v10 + 16) = v13;
    *(double *)(v10 + 24) = v19;
    *(double *)(v10 + 32) = v20;
    *(_QWORD *)(v10 + 40) = v21;
    *(_QWORD *)(v10 + 48) = v22;
    *(_QWORD *)(v10 + 56) = v23;
    *(_QWORD *)(v10 + 64) = v24;
    ++v9;
    *(_QWORD *)(v10 + 72) = v25;
    if (v9 == 8)
      return v7 + 80 == a2;
LABEL_8:
    v6 = v7;
    v8 += 80;
    v7 += 80;
    if (v7 != a2)
      continue;
    return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_DWORD *)(a4 + 8);
  v10 = *(_DWORD *)(a3 + 8);
  if (v9 < v10)
    goto LABEL_59;
  if (v10 >= v9)
  {
    v40 = *(double *)(a4 + 16);
    v41 = *(double *)(a3 + 16);
    if (v40 < v41)
      goto LABEL_59;
    if (v41 >= v40)
    {
      v42 = *(double *)(a4 + 24);
      v43 = *(double *)(a3 + 24);
      if (v42 < v43)
        goto LABEL_59;
      if (v43 >= v42)
      {
        v44 = *(double *)(a4 + 32);
        v45 = *(double *)(a3 + 32);
        if (v44 < v45)
          goto LABEL_59;
        if (v45 >= v44)
        {
          v46 = *(_QWORD *)(a4 + 40);
          v47 = *(_QWORD *)(a3 + 40);
          if (v46 < v47)
            goto LABEL_59;
          if (v47 >= v46)
          {
            v48 = *(_QWORD *)(a4 + 48);
            v49 = *(_QWORD *)(a3 + 48);
            if (v48 < v49
              || v49 >= v48
              && ((v50 = *(_QWORD *)(a4 + 56), v51 = *(_QWORD *)(a3 + 56), v50 < v51)
               || v51 >= v50
               && ((v52 = *(_QWORD *)(a4 + 64), v53 = *(_QWORD *)(a3 + 64), v52 < v53)
                || v53 >= v52
                && ((v54 = *(_QWORD *)(a4 + 72), v55 = *(_QWORD *)(a3 + 72), v54 < v55)
                 || v55 >= v54 && *(_QWORD *)a4 < *(_QWORD *)a3))))
            {
LABEL_59:
              v78 = *(_OWORD *)(a3 + 32);
              v81 = *(_OWORD *)(a3 + 48);
              v84 = *(_OWORD *)(a3 + 64);
              v72 = *(_OWORD *)a3;
              v75 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a3 = *(_OWORD *)a4;
              v11 = *(_OWORD *)(a4 + 64);
              v13 = *(_OWORD *)(a4 + 16);
              v12 = *(_OWORD *)(a4 + 32);
              *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
              *(_OWORD *)(a3 + 64) = v11;
              *(_OWORD *)(a3 + 16) = v13;
              *(_OWORD *)(a3 + 32) = v12;
              *(_OWORD *)(a4 + 48) = v81;
              *(_OWORD *)(a4 + 64) = v84;
              *(_OWORD *)a4 = v72;
              *(_OWORD *)(a4 + 16) = v75;
              *(_OWORD *)(a4 + 32) = v78;
              v14 = *(_DWORD *)(a3 + 8);
              v15 = *(_DWORD *)(a2 + 8);
              if (v14 < v15)
                goto LABEL_3;
              if (v15 >= v14)
              {
                v56 = *(double *)(a3 + 16);
                v57 = *(double *)(a2 + 16);
                if (v56 < v57)
                  goto LABEL_3;
                if (v57 >= v56)
                {
                  v58 = *(double *)(a3 + 24);
                  v59 = *(double *)(a2 + 24);
                  if (v58 < v59)
                    goto LABEL_3;
                  if (v59 >= v58)
                  {
                    v60 = *(double *)(a3 + 32);
                    v61 = *(double *)(a2 + 32);
                    if (v60 < v61)
                      goto LABEL_3;
                    if (v61 >= v60)
                    {
                      v62 = *(_QWORD *)(a3 + 40);
                      v63 = *(_QWORD *)(a2 + 40);
                      if (v62 < v63)
                        goto LABEL_3;
                      if (v63 >= v62)
                      {
                        v64 = *(_QWORD *)(a3 + 48);
                        v65 = *(_QWORD *)(a2 + 48);
                        if (v64 < v65
                          || v65 >= v64
                          && ((v66 = *(_QWORD *)(a3 + 56), v67 = *(_QWORD *)(a2 + 56), v66 < v67)
                           || v67 >= v66
                           && ((v68 = *(_QWORD *)(a3 + 64), v69 = *(_QWORD *)(a2 + 64), v68 < v69)
                            || v69 >= v68
                            && ((v70 = *(_QWORD *)(a3 + 72), v71 = *(_QWORD *)(a2 + 72), v70 < v71)
                             || v71 >= v70 && *(_QWORD *)a3 < *(_QWORD *)a2))))
                        {
LABEL_3:
                          v79 = *(_OWORD *)(a2 + 32);
                          v82 = *(_OWORD *)(a2 + 48);
                          v85 = *(_OWORD *)(a2 + 64);
                          v73 = *(_OWORD *)a2;
                          v76 = *(_OWORD *)(a2 + 16);
                          *(_OWORD *)a2 = *(_OWORD *)a3;
                          v16 = *(_OWORD *)(a3 + 64);
                          v18 = *(_OWORD *)(a3 + 16);
                          v17 = *(_OWORD *)(a3 + 32);
                          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
                          *(_OWORD *)(a2 + 64) = v16;
                          *(_OWORD *)(a2 + 16) = v18;
                          *(_OWORD *)(a2 + 32) = v17;
                          *(_OWORD *)(a3 + 48) = v82;
                          *(_OWORD *)(a3 + 64) = v85;
                          *(_OWORD *)a3 = v73;
                          *(_OWORD *)(a3 + 16) = v76;
                          *(_OWORD *)(a3 + 32) = v79;
                          v19 = *(_DWORD *)(a2 + 8);
                          v20 = *(_DWORD *)(a1 + 8);
                          if (v19 < v20)
                            goto LABEL_22;
                          if (v20 >= v19)
                          {
                            v21 = *(double *)(a2 + 16);
                            v22 = *(double *)(a1 + 16);
                            if (v21 < v22)
                              goto LABEL_22;
                            if (v22 >= v21)
                            {
                              v23 = *(double *)(a2 + 24);
                              v24 = *(double *)(a1 + 24);
                              if (v23 < v24)
                                goto LABEL_22;
                              if (v24 >= v23)
                              {
                                v25 = *(double *)(a2 + 32);
                                v26 = *(double *)(a1 + 32);
                                if (v25 < v26)
                                  goto LABEL_22;
                                if (v26 >= v25)
                                {
                                  v27 = *(_QWORD *)(a2 + 40);
                                  v28 = *(_QWORD *)(a1 + 40);
                                  if (v27 < v28)
                                    goto LABEL_22;
                                  if (v28 >= v27)
                                  {
                                    v29 = *(_QWORD *)(a2 + 48);
                                    v30 = *(_QWORD *)(a1 + 48);
                                    if (v29 < v30
                                      || v30 >= v29
                                      && ((v31 = *(_QWORD *)(a2 + 56), v32 = *(_QWORD *)(a1 + 56), v31 < v32)
                                       || v32 >= v31
                                       && ((v33 = *(_QWORD *)(a2 + 64), v34 = *(_QWORD *)(a1 + 64), v33 < v34)
                                        || v34 >= v33
                                        && ((v35 = *(_QWORD *)(a2 + 72), v36 = *(_QWORD *)(a1 + 72), v35 < v36)
                                         || v36 >= v35 && *(_QWORD *)a2 < *(_QWORD *)a1))))
                                    {
LABEL_22:
                                      v80 = *(_OWORD *)(a1 + 32);
                                      v83 = *(_OWORD *)(a1 + 48);
                                      v86 = *(_OWORD *)(a1 + 64);
                                      v74 = *(_OWORD *)a1;
                                      v77 = *(_OWORD *)(a1 + 16);
                                      *(_OWORD *)a1 = *(_OWORD *)a2;
                                      v37 = *(_OWORD *)(a2 + 64);
                                      v39 = *(_OWORD *)(a2 + 16);
                                      v38 = *(_OWORD *)(a2 + 32);
                                      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
                                      *(_OWORD *)(a1 + 64) = v37;
                                      *(_OWORD *)(a1 + 16) = v39;
                                      *(_OWORD *)(a1 + 32) = v38;
                                      *(_OWORD *)(a2 + 48) = v83;
                                      *(_OWORD *)(a2 + 64) = v86;
                                      *(_OWORD *)a2 = v74;
                                      *(_OWORD *)(a2 + 16) = v77;
                                      *(_OWORD *)(a2 + 32) = v80;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a5 + 8);
  v12 = *(_DWORD *)(a4 + 8);
  if (v11 < v12)
    goto LABEL_60;
  if (v12 >= v11)
  {
    v13 = *(double *)(a5 + 16);
    v14 = *(double *)(a4 + 16);
    if (v13 < v14)
      goto LABEL_60;
    if (v14 >= v13)
    {
      v15 = *(double *)(a5 + 24);
      v16 = *(double *)(a4 + 24);
      if (v15 < v16)
        goto LABEL_60;
      if (v16 >= v15)
      {
        v17 = *(double *)(a5 + 32);
        v18 = *(double *)(a4 + 32);
        if (v17 < v18)
          goto LABEL_60;
        if (v18 >= v17)
        {
          v19 = *(_QWORD *)(a5 + 40);
          v20 = *(_QWORD *)(a4 + 40);
          if (v19 < v20)
            goto LABEL_60;
          if (v20 >= v19)
          {
            v21 = *(_QWORD *)(a5 + 48);
            v22 = *(_QWORD *)(a4 + 48);
            if (v21 < v22
              || v22 >= v21
              && ((v23 = *(_QWORD *)(a5 + 56), v24 = *(_QWORD *)(a4 + 56), v23 < v24)
               || v24 >= v23
               && ((v25 = *(_QWORD *)(a5 + 64), v26 = *(_QWORD *)(a4 + 64), v25 < v26)
                || v26 >= v25
                && ((v27 = *(_QWORD *)(a5 + 72), v28 = *(_QWORD *)(a4 + 72), v27 < v28)
                 || v28 >= v27 && *(_QWORD *)a5 < *(_QWORD *)a4))))
            {
LABEL_60:
              v103 = *(_OWORD *)(a4 + 32);
              v107 = *(_OWORD *)(a4 + 48);
              v111 = *(_OWORD *)(a4 + 64);
              v95 = *(_OWORD *)a4;
              v99 = *(_OWORD *)(a4 + 16);
              *(_OWORD *)a4 = *(_OWORD *)a5;
              v29 = *(_OWORD *)(a5 + 64);
              v31 = *(_OWORD *)(a5 + 16);
              v30 = *(_OWORD *)(a5 + 32);
              *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
              *(_OWORD *)(a4 + 64) = v29;
              *(_OWORD *)(a4 + 16) = v31;
              *(_OWORD *)(a4 + 32) = v30;
              *(_OWORD *)(a5 + 48) = v107;
              *(_OWORD *)(a5 + 64) = v111;
              *(_OWORD *)a5 = v95;
              *(_OWORD *)(a5 + 16) = v99;
              *(_OWORD *)(a5 + 32) = v103;
              v32 = *(_DWORD *)(a4 + 8);
              v33 = *(_DWORD *)(a3 + 8);
              if (v32 < v33)
                goto LABEL_83;
              if (v33 >= v32)
              {
                v47 = *(double *)(a4 + 16);
                v48 = *(double *)(a3 + 16);
                if (v47 < v48)
                  goto LABEL_83;
                if (v48 >= v47)
                {
                  v49 = *(double *)(a4 + 24);
                  v50 = *(double *)(a3 + 24);
                  if (v49 < v50)
                    goto LABEL_83;
                  if (v50 >= v49)
                  {
                    v51 = *(double *)(a4 + 32);
                    v52 = *(double *)(a3 + 32);
                    if (v51 < v52)
                      goto LABEL_83;
                    if (v52 >= v51)
                    {
                      v53 = *(_QWORD *)(a4 + 40);
                      v54 = *(_QWORD *)(a3 + 40);
                      if (v53 < v54)
                        goto LABEL_83;
                      if (v54 >= v53)
                      {
                        v55 = *(_QWORD *)(a4 + 48);
                        v56 = *(_QWORD *)(a3 + 48);
                        if (v55 < v56
                          || v56 >= v55
                          && ((v57 = *(_QWORD *)(a4 + 56), v58 = *(_QWORD *)(a3 + 56), v57 < v58)
                           || v58 >= v57
                           && ((v59 = *(_QWORD *)(a4 + 64), v60 = *(_QWORD *)(a3 + 64), v59 < v60)
                            || v60 >= v59
                            && ((v61 = *(_QWORD *)(a4 + 72), v62 = *(_QWORD *)(a3 + 72), v61 < v62)
                             || v62 >= v61 && *(_QWORD *)a4 < *(_QWORD *)a3))))
                        {
LABEL_83:
                          v104 = *(_OWORD *)(a3 + 32);
                          v108 = *(_OWORD *)(a3 + 48);
                          v112 = *(_OWORD *)(a3 + 64);
                          v96 = *(_OWORD *)a3;
                          v100 = *(_OWORD *)(a3 + 16);
                          *(_OWORD *)a3 = *(_OWORD *)a4;
                          v34 = *(_OWORD *)(a4 + 64);
                          v36 = *(_OWORD *)(a4 + 16);
                          v35 = *(_OWORD *)(a4 + 32);
                          *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
                          *(_OWORD *)(a3 + 64) = v34;
                          *(_OWORD *)(a3 + 16) = v36;
                          *(_OWORD *)(a3 + 32) = v35;
                          *(_OWORD *)(a4 + 48) = v108;
                          *(_OWORD *)(a4 + 64) = v112;
                          *(_OWORD *)a4 = v96;
                          *(_OWORD *)(a4 + 16) = v100;
                          *(_OWORD *)(a4 + 32) = v104;
                          v37 = *(_DWORD *)(a3 + 8);
                          v38 = *(_DWORD *)(a2 + 8);
                          if (v37 < v38)
                            goto LABEL_22;
                          if (v38 >= v37)
                          {
                            v63 = *(double *)(a3 + 16);
                            v64 = *(double *)(a2 + 16);
                            if (v63 < v64)
                              goto LABEL_22;
                            if (v64 >= v63)
                            {
                              v65 = *(double *)(a3 + 24);
                              v66 = *(double *)(a2 + 24);
                              if (v65 < v66)
                                goto LABEL_22;
                              if (v66 >= v65)
                              {
                                v67 = *(double *)(a3 + 32);
                                v68 = *(double *)(a2 + 32);
                                if (v67 < v68)
                                  goto LABEL_22;
                                if (v68 >= v67)
                                {
                                  v69 = *(_QWORD *)(a3 + 40);
                                  v70 = *(_QWORD *)(a2 + 40);
                                  if (v69 < v70)
                                    goto LABEL_22;
                                  if (v70 >= v69)
                                  {
                                    v71 = *(_QWORD *)(a3 + 48);
                                    v72 = *(_QWORD *)(a2 + 48);
                                    if (v71 < v72
                                      || v72 >= v71
                                      && ((v73 = *(_QWORD *)(a3 + 56), v74 = *(_QWORD *)(a2 + 56), v73 < v74)
                                       || v74 >= v73
                                       && ((v75 = *(_QWORD *)(a3 + 64), v76 = *(_QWORD *)(a2 + 64), v75 < v76)
                                        || v76 >= v75
                                        && ((v77 = *(_QWORD *)(a3 + 72), v78 = *(_QWORD *)(a2 + 72), v77 < v78)
                                         || v78 >= v77 && *(_QWORD *)a3 < *(_QWORD *)a2))))
                                    {
LABEL_22:
                                      v105 = *(_OWORD *)(a2 + 32);
                                      v109 = *(_OWORD *)(a2 + 48);
                                      v113 = *(_OWORD *)(a2 + 64);
                                      v97 = *(_OWORD *)a2;
                                      v101 = *(_OWORD *)(a2 + 16);
                                      *(_OWORD *)a2 = *(_OWORD *)a3;
                                      v39 = *(_OWORD *)(a3 + 64);
                                      v41 = *(_OWORD *)(a3 + 16);
                                      v40 = *(_OWORD *)(a3 + 32);
                                      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
                                      *(_OWORD *)(a2 + 64) = v39;
                                      *(_OWORD *)(a2 + 16) = v41;
                                      *(_OWORD *)(a2 + 32) = v40;
                                      *(_OWORD *)(a3 + 48) = v109;
                                      *(_OWORD *)(a3 + 64) = v113;
                                      *(_OWORD *)a3 = v97;
                                      *(_OWORD *)(a3 + 16) = v101;
                                      *(_OWORD *)(a3 + 32) = v105;
                                      v42 = *(_DWORD *)(a2 + 8);
                                      v43 = *(_DWORD *)(a1 + 8);
                                      if (v42 < v43)
                                        goto LABEL_23;
                                      if (v43 >= v42)
                                      {
                                        v79 = *(double *)(a2 + 16);
                                        v80 = *(double *)(a1 + 16);
                                        if (v79 < v80)
                                          goto LABEL_23;
                                        if (v80 >= v79)
                                        {
                                          v81 = *(double *)(a2 + 24);
                                          v82 = *(double *)(a1 + 24);
                                          if (v81 < v82)
                                            goto LABEL_23;
                                          if (v82 >= v81)
                                          {
                                            v83 = *(double *)(a2 + 32);
                                            v84 = *(double *)(a1 + 32);
                                            if (v83 < v84)
                                              goto LABEL_23;
                                            if (v84 >= v83)
                                            {
                                              v85 = *(_QWORD *)(a2 + 40);
                                              v86 = *(_QWORD *)(a1 + 40);
                                              if (v85 < v86)
                                                goto LABEL_23;
                                              if (v86 >= v85)
                                              {
                                                v87 = *(_QWORD *)(a2 + 48);
                                                v88 = *(_QWORD *)(a1 + 48);
                                                if (v87 < v88
                                                  || v88 >= v87
                                                  && ((v89 = *(_QWORD *)(a2 + 56), v90 = *(_QWORD *)(a1 + 56), v89 < v90)
                                                   || v90 >= v89
                                                   && ((v91 = *(_QWORD *)(a2 + 64), v92 = *(_QWORD *)(a1 + 64),
                                                                                    v91 < v92)
                                                    || v92 >= v91
                                                    && ((v93 = *(_QWORD *)(a2 + 72),
                                                         v94 = *(_QWORD *)(a1 + 72),
                                                         v93 < v94)
                                                     || v94 >= v93 && *(_QWORD *)a2 < *(_QWORD *)a1))))
                                                {
LABEL_23:
                                                  v106 = *(_OWORD *)(a1 + 32);
                                                  v110 = *(_OWORD *)(a1 + 48);
                                                  v114 = *(_OWORD *)(a1 + 64);
                                                  v98 = *(_OWORD *)a1;
                                                  v102 = *(_OWORD *)(a1 + 16);
                                                  *(_OWORD *)a1 = *(_OWORD *)a2;
                                                  v44 = *(_OWORD *)(a2 + 64);
                                                  v46 = *(_OWORD *)(a2 + 16);
                                                  v45 = *(_OWORD *)(a2 + 32);
                                                  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
                                                  *(_OWORD *)(a1 + 64) = v44;
                                                  *(_OWORD *)(a1 + 16) = v46;
                                                  *(_OWORD *)(a1 + 32) = v45;
                                                  *(_OWORD *)(a2 + 48) = v110;
                                                  *(_OWORD *)(a2 + 64) = v114;
                                                  *(_OWORD *)a2 = v98;
                                                  *(_OWORD *)(a2 + 16) = v102;
                                                  *(_OWORD *)(a2 + 32) = v106;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  int64_t v5;
  _OWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 4)))
    {
      v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 4)) | 1;
      v6 = (_OWORD *)(result + 80 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 4) + 2) < a3)
      {
        v7 = result + 80 * v5;
        v8 = *(_DWORD *)(v7 + 8);
        v9 = *((_DWORD *)v6 + 22);
        if (v8 < v9)
          goto LABEL_23;
        if (v9 >= v8)
        {
          v10 = *(double *)(v7 + 16);
          v11 = *((double *)v6 + 12);
          if (v10 < v11)
            goto LABEL_23;
          if (v11 >= v10)
          {
            v12 = *(double *)(v7 + 24);
            v13 = *((double *)v6 + 13);
            if (v12 < v13)
              goto LABEL_23;
            if (v13 >= v12)
            {
              v14 = *(double *)(v7 + 32);
              v15 = *((double *)v6 + 14);
              if (v14 < v15)
                goto LABEL_23;
              if (v15 >= v14)
              {
                v16 = *(_QWORD *)(v7 + 40);
                v17 = *((_QWORD *)v6 + 15);
                if (v16 < v17)
                  goto LABEL_23;
                if (v17 >= v16)
                {
                  v18 = *(_QWORD *)(v7 + 48);
                  v19 = *((_QWORD *)v6 + 16);
                  if (v18 < v19
                    || v19 >= v18
                    && ((v20 = *(_QWORD *)(v7 + 56), v21 = *((_QWORD *)v6 + 17), v20 < v21)
                     || v21 >= v20
                     && ((v22 = *(_QWORD *)(v7 + 64), v23 = *((_QWORD *)v6 + 18), v22 < v23)
                      || v23 >= v22
                      && ((v24 = *(_QWORD *)(v7 + 72), v25 = *((_QWORD *)v6 + 19), v24 < v25)
                       || v25 >= v24 && *(_QWORD *)v6 < *((_QWORD *)v6 + 10)))))
                  {
LABEL_23:
                    v6 += 5;
                    v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 4) + 2;
                  }
                }
              }
            }
          }
        }
      }
      v26 = *((_DWORD *)v6 + 2);
      v27 = *((_DWORD *)a4 + 2);
      if (v26 >= v27)
      {
        v28 = *((double *)a4 + 2);
        if (v27 >= v26)
        {
          v30 = *((double *)v6 + 2);
          if (v30 < v28)
            return result;
          v29 = *((double *)a4 + 3);
          if (v28 >= v30)
          {
            v31 = *((double *)v6 + 3);
            if (v31 < v29)
              return result;
            if (v29 >= v31)
            {
              v32 = *((double *)v6 + 4);
              v33 = *((double *)a4 + 4);
              if (v32 < v33)
                return result;
              if (v33 >= v32)
              {
                v34 = *((_QWORD *)v6 + 5);
                v35 = a4[5];
                if (v34 < v35)
                  return result;
                if (v35 >= v34)
                {
                  v36 = *((_QWORD *)v6 + 6);
                  v37 = a4[6];
                  if (v36 < v37)
                    return result;
                  if (v37 >= v36)
                  {
                    v38 = *((_QWORD *)v6 + 7);
                    v39 = a4[7];
                    if (v38 < v39)
                      return result;
                    if (v39 >= v38)
                    {
                      v40 = *((_QWORD *)v6 + 8);
                      v41 = a4[8];
                      if (v40 < v41)
                        return result;
                      if (v41 >= v40)
                      {
                        v42 = *((_QWORD *)v6 + 9);
                        v43 = a4[9];
                        if (v42 < v43 || v43 >= v42 && *(_QWORD *)v6 < *a4)
                          return result;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v29 = *((double *)a4 + 3);
        }
        v44 = *a4;
        v45 = *((_DWORD *)a4 + 3);
        v46 = *((double *)a4 + 4);
        v47 = a4[5];
        v48 = a4[6];
        v49 = a4[7];
        v50 = a4[8];
        v51 = a4[9];
        *(_OWORD *)a4 = *v6;
        v52 = v6[4];
        v54 = v6[1];
        v53 = v6[2];
        *((_OWORD *)a4 + 3) = v6[3];
        *((_OWORD *)a4 + 4) = v52;
        *((_OWORD *)a4 + 1) = v54;
        *((_OWORD *)a4 + 2) = v53;
        if (v4 >= v5)
        {
          while (1)
          {
            v58 = v6;
            v59 = 2 * v5;
            v5 = (2 * v5) | 1;
            v6 = (_OWORD *)(result + 80 * v5);
            v60 = v59 + 2;
            if (v60 < a3)
            {
              v61 = result + 80 * v5;
              v62 = *(_DWORD *)(v61 + 8);
              v63 = *((_DWORD *)v6 + 22);
              if (v62 < v63)
                goto LABEL_49;
              if (v63 >= v62)
              {
                v73 = *(double *)(v61 + 16);
                v74 = *((double *)v6 + 12);
                if (v73 < v74)
                  goto LABEL_49;
                if (v74 >= v73)
                {
                  v75 = *(double *)(v61 + 24);
                  v76 = *((double *)v6 + 13);
                  if (v75 < v76)
                    goto LABEL_49;
                  if (v76 >= v75)
                  {
                    v77 = *(double *)(v61 + 32);
                    v78 = *((double *)v6 + 14);
                    if (v77 < v78)
                      goto LABEL_49;
                    if (v78 >= v77)
                    {
                      v79 = *(_QWORD *)(v61 + 40);
                      v80 = *((_QWORD *)v6 + 15);
                      if (v79 < v80)
                        goto LABEL_49;
                      if (v80 >= v79)
                      {
                        v81 = *(_QWORD *)(v61 + 48);
                        v82 = *((_QWORD *)v6 + 16);
                        if (v81 < v82
                          || v82 >= v81
                          && ((v83 = *(_QWORD *)(v61 + 56), v84 = *((_QWORD *)v6 + 17), v83 < v84)
                           || v84 >= v83
                           && ((v85 = *(_QWORD *)(v61 + 64), v86 = *((_QWORD *)v6 + 18), v85 < v86)
                            || v86 >= v85
                            && ((v87 = *(_QWORD *)(v61 + 72), v88 = *((_QWORD *)v6 + 19), v87 < v88)
                             || v88 >= v87 && *(_QWORD *)v6 < *((_QWORD *)v6 + 10)))))
                        {
LABEL_49:
                          v6 += 5;
                          v5 = v60;
                        }
                      }
                    }
                  }
                }
              }
            }
            v64 = *((_DWORD *)v6 + 2);
            if (v64 < v27)
              break;
            if (v27 >= v64)
            {
              v65 = *((double *)v6 + 2);
              if (v65 < v28)
                break;
              if (v28 >= v65)
              {
                v66 = *((double *)v6 + 3);
                if (v66 < v29)
                  break;
                if (v29 >= v66)
                {
                  v67 = *((double *)v6 + 4);
                  if (v67 < v46)
                    break;
                  if (v46 >= v67)
                  {
                    v68 = *((_QWORD *)v6 + 5);
                    if (v68 < v47)
                      break;
                    if (v47 >= v68)
                    {
                      v69 = *((_QWORD *)v6 + 6);
                      if (v69 < v48)
                        break;
                      if (v48 >= v69)
                      {
                        v70 = *((_QWORD *)v6 + 7);
                        if (v70 < v49)
                          break;
                        if (v49 >= v70)
                        {
                          v71 = *((_QWORD *)v6 + 8);
                          if (v71 < v50)
                            break;
                          if (v50 >= v71)
                          {
                            v72 = *((_QWORD *)v6 + 9);
                            if (v72 < v51 || v51 >= v72 && *(_QWORD *)v6 < v44)
                              break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            *v58 = *v6;
            v55 = v6[1];
            v56 = v6[2];
            v57 = v6[4];
            v58[3] = v6[3];
            v58[4] = v57;
            v58[1] = v55;
            v58[2] = v56;
            if (v4 < v5)
              goto LABEL_90;
          }
          v6 = v58;
        }
LABEL_90:
        *(_QWORD *)v6 = v44;
        *((_DWORD *)v6 + 2) = v27;
        *((_DWORD *)v6 + 3) = v45;
        *((double *)v6 + 2) = v28;
        *((double *)v6 + 3) = v29;
        *((double *)v6 + 4) = v46;
        *((_QWORD *)v6 + 5) = v47;
        *((_QWORD *)v6 + 6) = v48;
        *((_QWORD *)v6 + 7) = v49;
        *((_QWORD *)v6 + 8) = v50;
        *((_QWORD *)v6 + 9) = v51;
      }
    }
  }
  return result;
}

__n128 std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v9 = a1;
    v10 = v3 + 1;
    a1 += 80 * (v3 + 1);
    v11 = 2 * v3;
    v3 = (2 * v3) | 1;
    v12 = v11 + 2;
    if (v12 < a3)
    {
      v13 = v9 + 80 * v10;
      v14 = *(_DWORD *)(v13 + 8);
      v15 = *(_DWORD *)(a1 + 88);
      if (v14 < v15)
        goto LABEL_4;
      if (v15 >= v14)
      {
        v16 = *(double *)(v13 + 16);
        v17 = *(double *)(a1 + 96);
        if (v16 < v17)
          goto LABEL_4;
        if (v17 >= v16)
        {
          v18 = *(double *)(v13 + 24);
          v19 = *(double *)(a1 + 104);
          if (v18 < v19)
            goto LABEL_4;
          if (v19 >= v18)
          {
            v20 = *(double *)(v13 + 32);
            v21 = *(double *)(a1 + 112);
            if (v20 < v21)
              goto LABEL_4;
            if (v21 >= v20)
            {
              v22 = *(_QWORD *)(v13 + 40);
              v23 = *(_QWORD *)(a1 + 120);
              if (v22 < v23)
                goto LABEL_4;
              if (v23 >= v22)
              {
                v24 = *(_QWORD *)(v13 + 48);
                v25 = *(_QWORD *)(a1 + 128);
                if (v24 < v25
                  || v25 >= v24
                  && ((v26 = *(_QWORD *)(v13 + 56), v27 = *(_QWORD *)(a1 + 136), v26 < v27)
                   || v27 >= v26
                   && ((v28 = *(_QWORD *)(v13 + 64), v29 = *(_QWORD *)(a1 + 144), v28 < v29)
                    || v29 >= v28
                    && ((v30 = *(_QWORD *)(v13 + 72), v31 = *(_QWORD *)(a1 + 152), v30 < v31)
                     || v31 >= v30 && *(_QWORD *)a1 < *(_QWORD *)(a1 + 80)))))
                {
LABEL_4:
                  a1 += 80;
                  v3 = v12;
                }
              }
            }
          }
        }
      }
    }
    *(_OWORD *)v9 = *(_OWORD *)a1;
    result = *(__n128 *)(a1 + 16);
    v7 = *(_OWORD *)(a1 + 32);
    v8 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v9 + 64) = v8;
    *(__n128 *)(v9 + 16) = result;
    *(_OWORD *)(v9 + 32) = v7;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD *v41;
  unint64_t v42;
  int v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 80 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 80);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *(_DWORD *)(a2 - 72);
    if (v8 >= v9)
    {
      if (v9 < v8)
        return result;
      v11 = *((double *)v6 + 2);
      v10 = *(double *)(a2 - 64);
      if (v11 >= v10)
      {
        if (v10 < v11)
          return result;
        v12 = *((double *)v6 + 3);
        v13 = *(double *)(a2 - 56);
        if (v12 >= v13)
        {
          if (v13 < v12)
            return result;
          v14 = *((double *)v6 + 4);
          v15 = *(double *)(a2 - 48);
          if (v14 >= v15)
          {
            if (v15 < v14)
              return result;
            v16 = *((_QWORD *)v6 + 5);
            v17 = *(_QWORD *)(a2 - 40);
            if (v16 >= v17)
            {
              if (v17 < v16)
                return result;
              v18 = *((_QWORD *)v6 + 6);
              v19 = *(_QWORD *)(a2 - 32);
              if (v18 >= v19)
              {
                if (v19 < v18)
                  return result;
                v20 = *((_QWORD *)v6 + 7);
                v21 = *(_QWORD *)(a2 - 24);
                if (v20 >= v21)
                {
                  if (v21 < v20)
                    return result;
                  v22 = *((_QWORD *)v6 + 8);
                  v23 = *(_QWORD *)(a2 - 16);
                  if (v22 >= v23)
                  {
                    if (v23 < v22)
                      return result;
                    v24 = *((_QWORD *)v6 + 9);
                    v25 = *(_QWORD *)(a2 - 8);
                    if (v24 >= v25 && (v25 < v24 || *(_QWORD *)v6 >= *v7))
                      return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v10 = *(double *)(a2 - 64);
    }
    v26 = *(_QWORD *)(a2 - 80);
    v27 = *(_DWORD *)(a2 - 68);
    v28 = *(double *)(a2 - 56);
    v29 = *(double *)(a2 - 48);
    v30 = *(_QWORD *)(a2 - 40);
    v31 = *(_QWORD *)(a2 - 32);
    v32 = *(_QWORD *)(a2 - 24);
    v33 = *(_QWORD *)(a2 - 16);
    v34 = *(_QWORD *)(a2 - 8);
    *(_OWORD *)v7 = *v6;
    v35 = v6[4];
    v37 = v6[1];
    v36 = v6[2];
    *(_OWORD *)(a2 - 32) = v6[3];
    *(_OWORD *)(a2 - 16) = v35;
    *(_OWORD *)(a2 - 64) = v37;
    *(_OWORD *)(a2 - 48) = v36;
    if (v4 >= 2)
    {
      while (1)
      {
        v41 = v6;
        v42 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 80 * v5);
        v43 = *((_DWORD *)v6 + 2);
        if (v43 >= v9)
        {
          if (v9 < v43)
            break;
          v44 = *((double *)v6 + 2);
          if (v44 >= v10)
          {
            if (v10 < v44)
              break;
            v45 = *((double *)v6 + 3);
            if (v45 >= v28)
            {
              if (v28 < v45)
                break;
              v46 = *((double *)v6 + 4);
              if (v46 >= v29)
              {
                if (v29 < v46)
                  break;
                v47 = *((_QWORD *)v6 + 5);
                if (v47 >= v30)
                {
                  if (v30 < v47)
                    break;
                  v48 = *((_QWORD *)v6 + 6);
                  if (v48 >= v31)
                  {
                    if (v31 < v48)
                      break;
                    v49 = *((_QWORD *)v6 + 7);
                    if (v49 >= v32)
                    {
                      if (v32 < v49)
                        break;
                      v50 = *((_QWORD *)v6 + 8);
                      if (v50 >= v33)
                      {
                        if (v33 < v50)
                          break;
                        v51 = *((_QWORD *)v6 + 9);
                        if (v51 >= v34 && (v34 < v51 || *(_QWORD *)v6 >= v26))
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        *v41 = *v6;
        v38 = v6[1];
        v39 = v6[2];
        v40 = v6[4];
        v41[3] = v6[3];
        v41[4] = v40;
        v41[1] = v38;
        v41[2] = v39;
        if (v42 <= 1)
          goto LABEL_45;
      }
      v6 = v41;
    }
LABEL_45:
    *(_QWORD *)v6 = v26;
    *((_DWORD *)v6 + 2) = v9;
    *((_DWORD *)v6 + 3) = v27;
    *((double *)v6 + 2) = v10;
    *((double *)v6 + 3) = v28;
    *((double *)v6 + 4) = v29;
    *((_QWORD *)v6 + 5) = v30;
    *((_QWORD *)v6 + 6) = v31;
    *((_QWORD *)v6 + 7) = v32;
    *((_QWORD *)v6 + 8) = v33;
    *((_QWORD *)v6 + 9) = v34;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = *(_QWORD *)(a2 + 2496);
  v6 = (v5 + 1) % 0x270uLL;
  v7 = 4 * v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 4 * ((v5 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v5) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + v7) = v5;
  *(_QWORD *)(a2 + 2496) = v6;
  LODWORD(v5) = ((v5 ^ (v5 >> 11)) << 7) & 0x9D2C5680 ^ v5 ^ (v5 >> 11);
  v8 = ((_DWORD)v5 << 15) & 0xEFC60000 ^ v5 ^ ((((_DWORD)v5 << 15) & 0xEFC60000 ^ v5) >> 18);
  v9 = v4 + 1;
  if (((v4 + 1) & v4) == 0)
    return (v8 & v4) + v3;
  v10 = v8 * (unint64_t)v9;
  if (v9 <= v10)
    return (HIDWORD(v10) + v3);
  v12 = ~v4 % v9;
  if (v12 <= v10)
    return (HIDWORD(v10) + v3);
  do
  {
    v13 = 4 * v6;
    v14 = v6 + 397;
    if (v6 == 623)
      v6 = 0;
    else
      ++v6;
    v15 = *(_DWORD *)(a2 + 4 * (v14 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + v13) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
    v16 = v15 ^ (v15 >> 11);
    *(_DWORD *)(a2 + v13) = v15;
    v17 = v9
        * (unint64_t)((((v16 << 7) & 0x9D2C5680 ^ v16) << 15) & 0xEFC60000 ^ (v16 << 7) & 0x9D2C5680 ^ v16 ^ (((((v16 << 7) & 0x9D2C5680 ^ v16) << 15) & 0xEFC60000 ^ (v16 << 7) & 0x9D2C5680 ^ v16) >> 18));
  }
  while (v12 > v17);
  *(_QWORD *)(a2 + 2496) = v6;
  return (HIDWORD(v17) + v3);
}

_QWORD **std::set<int>::set[abi:ne180100]<int const*>(_QWORD **a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  uint64_t *v13;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = std::__tree<int>::__find_equal<int>(a1, v4, &v13, &v12, v6);
      if (!*v7)
      {
        v8 = operator new(0x20uLL);
        v8[7] = *v6;
        v9 = v13;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        *v7 = (uint64_t)v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = (_DWORD *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22DA9B388(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v25 = a1[4];
    if (!v25)
      return;
LABEL_21:
    *((_QWORD *)v25 + 4) = v14 >> 3;
    *((_QWORD *)v25 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v19 = &v5[32 * (_QWORD)v13];
      v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v19)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v19));
      v21 = *a1;
      v22 = a1[3];
      v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      v24 = *(_QWORD *)&(*a1)[v23] & (~*(_QWORD *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v23 = (v15 + v23) & (unint64_t)v22;
          v24 = *(_QWORD *)&v21[v23] & (~*(_QWORD *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = &a1[1][32 * v16];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *((_QWORD *)v18 + 3) = 0;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
      *((_QWORD *)v18 + 3) = *((_QWORD *)v19 + 3);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *((_QWORD *)v19 + 3) = 0;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v25 = a1[4];
  if (v25)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int8x16_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v40 = *(_QWORD *)(result + 32);
    if (!v40)
      return result;
LABEL_26:
    *(_QWORD *)(v40 + 32) = v15 >> 3;
    *(_QWORD *)(v40 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v18 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v19 = 32 * v14;
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(_QWORD *)(*(_QWORD *)(result + 8) + 32 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      v23 = 0;
      v24 = *(uint64_t *)((_BYTE *)v18->i64 + v22) & (~*(uint64_t *)((char *)v18->i64 + v22) << 7) & 0x8080808080808080;
      if (v24)
      {
        v16 = ((v21 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      }
      else
      {
        v16 = ((v21 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
        do
        {
          v23 += 8;
          v16 = (v23 + v16) & v13;
          v24 = *(uint64_t *)((_BYTE *)v18->i64 + v16) & (~*(uint64_t *)((char *)v18->i64 + v16) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v17 = (v16 + (__clz(__rbit64(v24)) >> 3)) & v13;
      v15 += v23;
      if ((((v17 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v25 = v18->u8[v17];
        v18->i8[v17] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v17 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v26 = *(_QWORD *)(result + 8);
        if (v25 == 128)
        {
          v27 = (_QWORD *)(v26 + 32 * v17);
          v28 = v26 + 32 * v14;
          *v27 = *(_QWORD *)v28;
          v27[1] = 0;
          v27[2] = 0;
          v27[3] = 0;
          *(_OWORD *)(v27 + 1) = *(_OWORD *)(v28 + 8);
          v27[3] = *(_QWORD *)(v28 + 24);
          *(_QWORD *)(v28 + 16) = 0;
          *(_QWORD *)(v28 + 24) = 0;
          *(_QWORD *)(v28 + 8) = 0;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v29 = (uint64_t *)(v26 + v19);
          v30 = *v29;
          v31 = v29[3];
          v32 = *(_OWORD *)(v29 + 1);
          v29[2] = 0;
          v29[3] = 0;
          v29[1] = 0;
          v33 = *(_QWORD *)(result + 8);
          v34 = (_QWORD *)(v33 + v19);
          v35 = v33 + 32 * v17;
          *v34 = *(_QWORD *)v35;
          v34[1] = 0;
          v34[2] = 0;
          v34[3] = 0;
          *(_OWORD *)(v34 + 1) = *(_OWORD *)(v35 + 8);
          v34[3] = *(_QWORD *)(v35 + 24);
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)(v35 + 24) = 0;
          *(_QWORD *)(v35 + 8) = 0;
          v36 = *(_QWORD *)(result + 8) + 32 * v17;
          *(_QWORD *)v36 = v30;
          *(_OWORD *)(v36 + 8) = v32;
          *(_QWORD *)(v36 + 24) = v31;
          --v14;
        }
      }
      else
      {
        v18->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v37 = v14 - (v14 >> 3);
  v38 = v14 == 7;
  v39 = 6;
  if (!v38)
    v39 = v37;
  *(_QWORD *)(result + 40) = v39 - *(_QWORD *)(result + 16);
  v40 = *(_QWORD *)(result + 32);
  if (v40)
    goto LABEL_26;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,false>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int v49;
  int v50;
  double v51;
  double v52;
  int v53;
  int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  double v59;
  int v60;
  uint64_t v61;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  int v82;
  uint64_t i;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  while (2)
  {
    v14 = a2 - a4;
    v15 = (uint64_t)(a2 - a4) >> 4;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
LABEL_34:
        v47 = *(double *)a4;
        v48 = *(double *)(a2 - 16);
        if (*(double *)a4 < v48)
        {
          v49 = *(_DWORD *)(a2 - 8);
          v50 = *(_DWORD *)(a4 + 8);
LABEL_36:
          *(double *)(a2 - 16) = v47;
          *(double *)a4 = v48;
          *(_DWORD *)(a2 - 8) = v50;
          *(_DWORD *)(a4 + 8) = v49;
          return;
        }
        if (v48 >= v47)
        {
          v50 = *(_DWORD *)(a4 + 8);
          v49 = *(_DWORD *)(a2 - 8);
          if (v50 < v49)
            goto LABEL_36;
        }
        return;
      case 3uLL:
LABEL_37:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a3, a4 + 16);
        return;
      case 4uLL:
LABEL_38:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32);
        v51 = *(double *)a4;
        v52 = *(double *)(a2 - 48);
        if (*(double *)a4 >= v52)
        {
          if (v52 < v51)
            return;
          v54 = *(_DWORD *)(a4 + 8);
          v53 = *(_DWORD *)(a2 - 40);
          if (v54 >= v53)
            return;
        }
        else
        {
          v53 = *(_DWORD *)(a2 - 40);
          v54 = *(_DWORD *)(a4 + 8);
        }
        *(double *)(a2 - 48) = v51;
        *(double *)a4 = v52;
        *(_DWORD *)(a2 - 40) = v54;
        *(_DWORD *)(a4 + 8) = v53;
        v55 = *(double *)(a2 - 48);
        v56 = *(double *)(a2 - 32);
        if (v55 >= v56)
        {
          if (v56 < v55)
            return;
          v58 = *(_DWORD *)(a2 - 40);
          v57 = *(_DWORD *)(a2 - 24);
          if (v58 >= v57)
            return;
        }
        else
        {
          v57 = *(_DWORD *)(a2 - 24);
          v58 = *(_DWORD *)(a2 - 40);
        }
        *(double *)(a2 - 32) = v55;
        *(double *)(a2 - 48) = v56;
        *(_DWORD *)(a2 - 24) = v58;
        *(_DWORD *)(a2 - 40) = v57;
        v59 = *(double *)(a2 - 16);
        if (v55 < v59)
        {
          v60 = *(_DWORD *)(a2 - 8);
LABEL_98:
          *(double *)(a2 - 16) = v55;
          *(double *)(a2 - 32) = v59;
          *(_DWORD *)(a2 - 8) = v58;
          *(_DWORD *)(a2 - 24) = v60;
          return;
        }
        if (v59 >= v55)
        {
          v60 = *(_DWORD *)(a2 - 8);
          if (v58 < v60)
            goto LABEL_98;
        }
        return;
      case 5uLL:
LABEL_44:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32, a2 - 48, a2 - 48, a3, a4 + 16);
        return;
      default:
        if (v14 < 384)
          goto LABEL_54;
        if (!a6)
          goto LABEL_45;
        v16 = v15 >> 1;
        v17 = a2 - 16 * (v15 >> 1);
        v18 = a4 + 16;
        v84 = a3;
        if ((unint64_t)v14 <= 0x800)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 16 * (v15 >> 1), a2 - 16 * (v15 >> 1), a1, a2, v18, a4 + 16);
          v25 = a6 - 1;
          if ((a7 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16 * (v15 >> 1), a2 - 16 * (v15 >> 1), v18, a4 + 16);
          v19 = a2 + 16 * (1 - v16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 16, a2 - 16, v19, v19, a4 + 32, a4 + 32);
          v20 = a2 + 16 * ~v16;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 32, a2 - 32, v20, v20, a4 + 48, a4 + 48);
          v21 = v19;
          v22 = v19;
          a3 = v84;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(v21, v22, v17, v17, v20, v20);
          v23 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = *(_QWORD *)(v17 - 16);
          *(_QWORD *)(v17 - 16) = v23;
          v24 = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = *(_DWORD *)(v17 - 8);
          *(_DWORD *)(v17 - 8) = v24;
          v25 = a6 - 1;
          if ((a7 & 1) != 0)
            goto LABEL_13;
        }
        v26 = *(double *)(a2 - 16);
        if (*(double *)a2 < v26 || v26 >= *(double *)a2 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a2 - 8))
        {
LABEL_13:
          a6 = v25;
          goto LABEL_14;
        }
        std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(a1, a2, a3, a4);
        a1 = v30;
        a2 = v31;
        v32 = 2 - a6;
LABEL_22:
        v35 = a2 - a4;
        v36 = (uint64_t)(a2 - a4) >> 4;
        break;
    }
    switch(v36)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        goto LABEL_34;
      case 3uLL:
        goto LABEL_37;
      case 4uLL:
        goto LABEL_38;
      case 5uLL:
        goto LABEL_44;
      default:
        if (v35 > 383)
        {
          if (v32 == 1)
          {
LABEL_45:
            if (a2 != a4)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a3, a4, a3, a4, a5);
            return;
          }
          v37 = v36 >> 1;
          v38 = a2 - 16 * (v36 >> 1);
          if ((unint64_t)v35 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 16 * (v36 >> 1), a2 - 16 * (v36 >> 1), a1, a2, a4 + 16, a4 + 16);
            v45 = *(double *)a2;
            v46 = *(double *)(a2 - 16);
            if (*(double *)a2 < v46)
              goto LABEL_31;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16 * (v36 >> 1), a2 - 16 * (v36 >> 1), a4 + 16, a4 + 16);
            v39 = a2 + 16 * (1 - v37);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 16, a2 - 16, v39, v39, a4 + 32, a4 + 32);
            v40 = a2 + 16 * ~v37;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 32, a2 - 32, v40, v40, a4 + 48, a4 + 48);
            v41 = v39;
            v42 = v39;
            a3 = v84;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(v41, v42, v38, v38, v40, v40);
            v43 = *(_QWORD *)(a2 - 16);
            *(_QWORD *)(a2 - 16) = *(_QWORD *)(v38 - 16);
            *(_QWORD *)(v38 - 16) = v43;
            v44 = *(_DWORD *)(a2 - 8);
            *(_DWORD *)(a2 - 8) = *(_DWORD *)(v38 - 8);
            *(_DWORD *)(v38 - 8) = v44;
            v45 = *(double *)a2;
            v46 = *(double *)(a2 - 16);
            if (*(double *)a2 < v46)
              goto LABEL_31;
          }
          if (v46 < v45 || *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a2 - 8))
          {
            std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(a1, a2, a3, a4);
            a1 = v33;
            a2 = v34;
            ++v32;
            goto LABEL_22;
          }
LABEL_31:
          a7 = 0;
          a6 = -v32;
LABEL_14:
          std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(a2, (double *)a4, (uint64_t)&v85);
          v27 = v85;
          v28 = v86;
          if (!v87)
            goto LABEL_2;
          v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, v85, v86);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(v28 - 16, v28 - 16, v84, a4))
          {
            if ((v29 & 1) != 0)
            {
              a1 = v27;
              a2 = v28 - 16;
              a3 = v84;
              continue;
            }
LABEL_2:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,false>(a1, a2, v27, v28, a5, a6, a7 & 1);
            a7 = 0;
            a2 = v28 - 16;
            a1 = v27;
            a3 = v84;
            continue;
          }
          a3 = v27;
          a4 = v28;
          if ((v29 & 1) != 0)
            return;
          continue;
        }
        a7 = 0;
LABEL_54:
        v61 = a2 - 16;
        v63 = a2 == a4 || v61 == a4;
        if ((a7 & 1) != 0)
        {
          if (v63)
            return;
          v64 = 0;
          v65 = a2 - 16;
LABEL_66:
          v67 = v61 + 16;
          v68 = *(double *)v61;
          v69 = *(double *)(v65 - 16);
          v65 -= 16;
          v70 = v69;
          if (v69 >= *(double *)v61)
          {
            if (v68 < v70)
              goto LABEL_65;
            v71 = *(_DWORD *)(v61 - 8);
            v72 = *(_DWORD *)(v61 + 8);
            if (v71 >= v72)
              goto LABEL_65;
          }
          else
          {
            v71 = *(_DWORD *)(v61 - 8);
            v72 = *(_DWORD *)(v61 + 8);
          }
          *(double *)(v61 - 16) = v68;
          *(_DWORD *)(v61 - 8) = v72;
          v66 = a2;
          if (v67 == a2)
            goto LABEL_64;
          v73 = v64;
          v66 = v67;
          while (1)
          {
            v76 = *(double *)(a2 + v73);
            if (v70 < v76)
            {
              v74 = *(_DWORD *)(a2 + v73 + 8);
            }
            else
            {
              if (v76 < v70)
              {
                v66 = a2 + v73;
LABEL_64:
                *(double *)(v66 - 16) = v70;
                *(_DWORD *)(v66 - 8) = v71;
LABEL_65:
                v64 -= 16;
                v61 = v65;
                if (v65 == a4)
                  return;
                goto LABEL_66;
              }
              v74 = *(_DWORD *)(a2 + v73 + 8);
              if (v71 >= v74)
                goto LABEL_64;
            }
            v66 += 16;
            v75 = a2 + v73;
            *(double *)(v75 - 16) = v76;
            *(_DWORD *)(v75 - 8) = v74;
            v73 += 16;
            if (!v73)
            {
              v66 = a2;
              goto LABEL_64;
            }
          }
        }
        if (!v63)
        {
          v77 = a2 - 8;
          v78 = a2 - 16;
          while (1)
          {
            v79 = *(double *)(v78 - 16);
            v78 -= 16;
            v80 = v79;
            v81 = *(double *)v61;
            if (v79 < *(double *)v61)
              break;
            if (v81 >= v80)
            {
              v82 = *(_DWORD *)(v61 - 8);
              if (v82 < *(_DWORD *)(v61 + 8))
                goto LABEL_87;
            }
LABEL_82:
            v77 -= 16;
            v61 = v78;
            if (v78 == a4)
              return;
          }
          v82 = *(_DWORD *)(v61 - 8);
LABEL_87:
          for (i = v77; ; i += 16)
          {
            *(double *)(i - 24) = v81;
            *(_DWORD *)(i - 16) = *(_DWORD *)i;
            v81 = *(double *)(i + 8);
            if (v80 >= v81 && (v81 < v80 || v82 >= *(_DWORD *)(i + 16)))
              break;
          }
          *(double *)(i - 8) = v80;
          *(_DWORD *)i = v82;
          goto LABEL_82;
        }
        return;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  int v11;
  int v12;
  int v13;
  double v14;
  double v15;
  int v16;
  int v17;
  uint64_t result;
  int v19;
  int v20;
  double v21;
  int v22;

  v6 = *(double *)(a4 - 16);
  v7 = *(double *)(a2 - 16);
  if (v6 < v7 || v7 >= v6 && *(_DWORD *)(a4 - 8) < *(_DWORD *)(a2 - 8))
  {
    v8 = *(double *)(a6 - 16);
    if (v8 < v6)
    {
      v9 = *(_DWORD *)(a6 - 8);
LABEL_16:
      *(double *)(a2 - 16) = v8;
      *(double *)(a6 - 16) = v7;
      v19 = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = v9;
      *(_DWORD *)(a6 - 8) = v19;
      return 1;
    }
    if (v6 >= v8)
    {
      v9 = *(_DWORD *)(a6 - 8);
      v13 = *(_DWORD *)(a4 - 8);
      if (v9 < v13)
        goto LABEL_16;
    }
    else
    {
      v13 = *(_DWORD *)(a4 - 8);
    }
    *(double *)(a2 - 16) = v6;
    *(double *)(a4 - 16) = v7;
    v20 = *(_DWORD *)(a2 - 8);
    *(_DWORD *)(a2 - 8) = v13;
    *(_DWORD *)(a4 - 8) = v20;
    v21 = *(double *)(a6 - 16);
    if (v21 >= v7)
    {
      if (v7 < v21)
        return 1;
      v22 = *(_DWORD *)(a6 - 8);
      if (v22 >= v20)
        return 1;
    }
    else
    {
      v22 = *(_DWORD *)(a6 - 8);
    }
    *(double *)(a4 - 16) = v21;
    *(double *)(a6 - 16) = v7;
    *(_DWORD *)(a4 - 8) = v22;
    result = 2;
    *(_DWORD *)(a6 - 8) = v20;
    return result;
  }
  v10 = *(double *)(a6 - 16);
  if (v10 >= v6)
  {
    if (v6 < v10)
      return 0;
    v12 = *(_DWORD *)(a6 - 8);
    v11 = *(_DWORD *)(a4 - 8);
    if (v12 >= v11)
      return 0;
  }
  else
  {
    v11 = *(_DWORD *)(a4 - 8);
    v12 = *(_DWORD *)(a6 - 8);
  }
  *(double *)(a4 - 16) = v10;
  *(double *)(a6 - 16) = v6;
  *(_DWORD *)(a4 - 8) = v12;
  *(_DWORD *)(a6 - 8) = v11;
  v14 = *(double *)(a4 - 16);
  v15 = *(double *)(a2 - 16);
  if (v14 < v15)
  {
    v16 = *(_DWORD *)(a2 - 8);
    v17 = *(_DWORD *)(a4 - 8);
LABEL_14:
    *(double *)(a2 - 16) = v14;
    *(double *)(a4 - 16) = v15;
    *(_DWORD *)(a2 - 8) = v17;
    result = 2;
    *(_DWORD *)(a4 - 8) = v16;
    return result;
  }
  if (v15 >= v14)
  {
    v17 = *(_DWORD *)(a4 - 8);
    v16 = *(_DWORD *)(a2 - 8);
    if (v17 < v16)
      goto LABEL_14;
  }
  return 1;
}

void std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  double v5;
  int v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;

  v4 = a2 - 16;
  v5 = *(double *)(a2 - 16);
  v6 = *(_DWORD *)(a2 - 8);
  v7 = *(double *)a4;
  if (v5 >= *(double *)a4 && (v7 < v5 || v6 >= *(_DWORD *)(a4 + 8)))
  {
    while (v4 > a4)
    {
      v19 = *(double *)(v4 - 16);
      if (v5 < v19 || v19 >= v5 && v6 < *(_DWORD *)(v4 - 8))
        break;
      v4 -= 16;
    }
  }
  else
  {
    v8 = *(double *)(a2 - 32);
    if (v5 >= v8)
    {
      v9 = a2 - 48;
      do
      {
        if (v8 >= v5 && v6 < *(_DWORD *)(v9 + 24))
          break;
        v10 = *(double *)v9;
        v9 -= 16;
        v8 = v10;
      }
      while (v5 >= v10);
      v4 = v9 + 32;
    }
  }
  if (v4 > a4)
  {
    for (a4 += 16; v5 < v7 || v7 >= v5 && v6 < *(_DWORD *)(a4 - 8); a4 += 16)
    {
      v11 = *(double *)a4;
      v7 = v11;
    }
  }
  if (a4 >= v4)
  {
    v12 = v4;
  }
  else
  {
    v12 = v4;
    do
    {
      v13 = *(_QWORD *)(v12 - 16);
      v12 -= 16;
      *(_QWORD *)v12 = *(_QWORD *)(a4 - 16);
      *(_QWORD *)(a4 - 16) = v13;
      v14 = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(a4 - 8);
      *(_DWORD *)(a4 - 8) = v14;
      v15 = *(double *)(v12 - 16);
      if (v5 >= v15)
      {
        v16 = v4 - 48;
        do
        {
          if (v15 >= v5 && v6 < *(_DWORD *)(v16 + 24))
            break;
          v17 = *(double *)v16;
          v16 -= 16;
          v15 = v17;
        }
        while (v5 >= v17);
        v12 = v16 + 32;
      }
      do
      {
        do
        {
          a4 += 16;
          v18 = *(double *)(a4 - 16);
        }
        while (v5 < v18);
      }
      while (v18 >= v5 && v6 < *(_DWORD *)(a4 - 8));
      v4 = v12;
    }
    while (a4 < v12);
  }
  if (v12 + 16 != a2)
  {
    *(_QWORD *)(a2 - 16) = *(_QWORD *)v12;
    *(_DWORD *)(a2 - 8) = *(_DWORD *)(v12 + 8);
  }
  *(double *)v12 = v5;
  *(_DWORD *)(v12 + 8) = v6;
}

void std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(uint64_t a1@<X1>, double *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  int v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;

  v3 = 0;
  v4 = *(double *)(a1 - 16);
  v5 = *(_DWORD *)(a1 - 8);
  while (1)
  {
    v6 = *(double *)(a1 + v3 - 32);
    if (v6 >= v4 && (v4 < v6 || *(_DWORD *)(a1 + v3 - 24) >= v5))
      break;
    v3 -= 16;
  }
  v7 = a1 + v3 - 16;
  if (v3)
  {
    do
    {
      v8 = *a2;
      a2 += 2;
      v9 = v8;
    }
    while (v8 >= v4 && (v4 < v9 || *((_DWORD *)a2 - 2) >= v5));
  }
  else if (v7 > (unint64_t)a2)
  {
    while (1)
    {
      v10 = *a2;
      a2 += 2;
      v11 = v10;
      if (v10 < v4)
        break;
      if (v4 < v11)
      {
        if ((unint64_t)a2 >= v7)
          break;
      }
      else if (*((_DWORD *)a2 - 2) < v5 || (unint64_t)a2 >= v7)
      {
        break;
      }
    }
  }
  v13 = a1 + v3 - 16;
  if ((unint64_t)a2 < v7)
  {
    v14 = a2;
    do
    {
      v15 = *(_QWORD *)(v13 - 16);
      v13 -= 16;
      *(double *)v13 = *(v14 - 2);
      *((_QWORD *)v14 - 2) = v15;
      v16 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *((_DWORD *)v14 - 2);
      *((_DWORD *)v14 - 2) = v16;
      while (1)
      {
        v17 = *(double *)(v13 - 16);
        if (v17 >= v4 && (v4 < v17 || *(_DWORD *)(v13 - 8) >= v5))
          break;
        v13 -= 16;
      }
      do
      {
        v18 = *v14;
        v14 += 2;
        v19 = v18;
      }
      while (v18 >= v4 && (v4 < v19 || *((_DWORD *)v14 - 2) >= v5));
    }
    while ((unint64_t)v14 < v13);
  }
  v20 = v13 + 16;
  if (v13 + 16 != a1)
  {
    *(_QWORD *)(a1 - 16) = *(_QWORD *)v13;
    *(_DWORD *)(a1 - 8) = *(_DWORD *)(v13 + 8);
  }
  *(double *)v13 = v4;
  *(_DWORD *)(v13 + 8) = v5;
  *(_QWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = (unint64_t)a2 >= v7;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  double v26;
  int v27;
  int v28;
  double v29;
  double v30;
  int v31;
  int v32;
  double v33;
  int v34;
  int v35;

  switch((a2 - a4) >> 4)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v21 = *(double *)a4;
      v22 = *(double *)(a2 - 16);
      if (*(double *)a4 < v22)
      {
        v23 = *(_DWORD *)(a2 - 8);
        v24 = *(_DWORD *)(a4 + 8);
LABEL_23:
        *(double *)(a2 - 16) = v21;
        *(double *)a4 = v22;
        *(_DWORD *)(a2 - 8) = v24;
        *(_DWORD *)(a4 + 8) = v23;
        return 1;
      }
      if (v22 < v21)
        return 1;
      v24 = *(_DWORD *)(a4 + 8);
      v23 = *(_DWORD *)(a2 - 8);
      if (v24 < v23)
        goto LABEL_23;
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a3, a4 + 16);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32);
      v25 = *(double *)a4;
      v26 = *(double *)(a2 - 48);
      if (*(double *)a4 >= v26)
      {
        if (v26 < v25)
          return 1;
        v28 = *(_DWORD *)(a4 + 8);
        v27 = *(_DWORD *)(a2 - 40);
        if (v28 >= v27)
          return 1;
      }
      else
      {
        v27 = *(_DWORD *)(a2 - 40);
        v28 = *(_DWORD *)(a4 + 8);
      }
      *(double *)(a2 - 48) = v25;
      *(double *)a4 = v26;
      *(_DWORD *)(a2 - 40) = v28;
      *(_DWORD *)(a4 + 8) = v27;
      v29 = *(double *)(a2 - 48);
      v30 = *(double *)(a2 - 32);
      if (v29 >= v30)
      {
        if (v30 < v29)
          return 1;
        v32 = *(_DWORD *)(a2 - 40);
        v31 = *(_DWORD *)(a2 - 24);
        if (v32 >= v31)
          return 1;
      }
      else
      {
        v31 = *(_DWORD *)(a2 - 24);
        v32 = *(_DWORD *)(a2 - 40);
      }
      *(double *)(a2 - 32) = v29;
      *(double *)(a2 - 48) = v30;
      *(_DWORD *)(a2 - 24) = v32;
      *(_DWORD *)(a2 - 40) = v31;
      v33 = *(double *)(a2 - 16);
      if (v29 < v33)
      {
        v34 = *(_DWORD *)(a2 - 8);
LABEL_31:
        *(double *)(a2 - 16) = v29;
        *(double *)(a2 - 32) = v33;
        *(_DWORD *)(a2 - 8) = v32;
        *(_DWORD *)(a2 - 24) = v34;
        return 1;
      }
      if (v33 >= v29)
      {
        v34 = *(_DWORD *)(a2 - 8);
        if (v32 < v34)
          goto LABEL_31;
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32, a2 - 48, a2 - 48, a3, a4 + 16);
      return 1;
    default:
      v7 = a2 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32);
      v9 = a2 - 48;
      if (a2 - 48 == a4)
        goto LABEL_34;
      v8 = 0;
      v10 = 0;
      v11 = a2 - 48;
      while (2)
      {
        v12 = *(double *)(v11 - 16);
        v11 -= 16;
        v13 = v12;
        v14 = *(double *)(v7 - 16);
        if (v12 >= v14)
        {
          if (v14 < v13)
            goto LABEL_7;
          v15 = *(_DWORD *)(v9 - 8);
          v16 = *(_DWORD *)(v7 - 8);
          if (v15 >= v16)
            goto LABEL_7;
        }
        else
        {
          v15 = *(_DWORD *)(v9 - 8);
          v16 = *(_DWORD *)(v7 - 8);
        }
        *(double *)(v9 - 16) = v14;
        *(_DWORD *)(v9 - 8) = v16;
        if (v7 == a2)
        {
LABEL_5:
          v7 = a2;
          goto LABEL_6;
        }
        v17 = v8;
        while (2)
        {
          v20 = *(double *)(a2 + v17 - 32);
          if (v13 < v20)
          {
            v18 = *(_DWORD *)(a2 + v17 - 24);
LABEL_13:
            v7 += 16;
            v19 = a2 + v17;
            *(double *)(v19 - 48) = v20;
            *(_DWORD *)(v19 - 40) = v18;
            v17 += 16;
            if (v17 == 32)
              goto LABEL_5;
            continue;
          }
          break;
        }
        if (v20 < v13)
          goto LABEL_6;
        v18 = *(_DWORD *)(a2 + v17 - 24);
        if (v15 < v18)
          goto LABEL_13;
        v7 = a2 + v17 - 32;
LABEL_6:
        *(double *)(v7 - 16) = v13;
        *(_DWORD *)(v7 - 8) = v15;
        if (++v10 == 8)
        {
          v35 = 0;
          LODWORD(v8) = v11 == a4;
        }
        else
        {
LABEL_7:
          v8 -= 16;
          v7 = v9;
          v9 = v11;
          if (v11 != a4)
            continue;
LABEL_34:
          v35 = 1;
        }
        return (v35 | v8) & 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  double v32;
  int v33;
  int v34;
  double v35;
  double v36;
  int v37;
  int v38;
  double v39;
  double v40;
  int v41;
  int v42;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a3, a4, a5, a6);
  v15 = *(double *)(a8 - 16);
  v16 = *(double *)(a6 - 16);
  if (v15 >= v16)
  {
    if (v16 < v15)
      goto LABEL_16;
    v18 = *(_DWORD *)(a8 - 8);
    v17 = *(_DWORD *)(a6 - 8);
    if (v18 >= v17)
      goto LABEL_16;
  }
  else
  {
    v17 = *(_DWORD *)(a6 - 8);
    v18 = *(_DWORD *)(a8 - 8);
  }
  *(double *)(a6 - 16) = v15;
  *(double *)(a8 - 16) = v16;
  *(_DWORD *)(a6 - 8) = v18;
  *(_DWORD *)(a8 - 8) = v17;
  v19 = *(double *)(a6 - 16);
  v20 = *(double *)(a4 - 16);
  if (v19 >= v20)
  {
    if (v20 < v19)
      goto LABEL_16;
    v22 = *(_DWORD *)(a6 - 8);
    v21 = *(_DWORD *)(a4 - 8);
    if (v22 >= v21)
      goto LABEL_16;
  }
  else
  {
    v21 = *(_DWORD *)(a4 - 8);
    v22 = *(_DWORD *)(a6 - 8);
  }
  *(double *)(a4 - 16) = v19;
  *(double *)(a6 - 16) = v20;
  *(_DWORD *)(a4 - 8) = v22;
  *(_DWORD *)(a6 - 8) = v21;
  v23 = *(double *)(a4 - 16);
  v24 = *(double *)(a2 - 16);
  if (v23 < v24)
  {
    v25 = *(_DWORD *)(a2 - 8);
    v26 = *(_DWORD *)(a4 - 8);
LABEL_7:
    *(double *)(a2 - 16) = v23;
    *(double *)(a4 - 16) = v24;
    *(_DWORD *)(a2 - 8) = v26;
    *(_DWORD *)(a4 - 8) = v25;
    goto LABEL_16;
  }
  if (v24 >= v23)
  {
    v26 = *(_DWORD *)(a4 - 8);
    v25 = *(_DWORD *)(a2 - 8);
    if (v26 < v25)
      goto LABEL_7;
  }
LABEL_16:
  v27 = *(double *)(a10 - 16);
  v28 = *(double *)(a8 - 16);
  if (v27 >= v28)
  {
    if (v28 < v27)
      return result;
    v30 = *(_DWORD *)(a10 - 8);
    v29 = *(_DWORD *)(a8 - 8);
    if (v30 >= v29)
      return result;
  }
  else
  {
    v29 = *(_DWORD *)(a8 - 8);
    v30 = *(_DWORD *)(a10 - 8);
  }
  *(double *)(a8 - 16) = v27;
  *(double *)(a10 - 16) = v28;
  *(_DWORD *)(a8 - 8) = v30;
  *(_DWORD *)(a10 - 8) = v29;
  v31 = *(double *)(a8 - 16);
  v32 = *(double *)(a6 - 16);
  if (v31 >= v32)
  {
    if (v32 < v31)
      return result;
    v34 = *(_DWORD *)(a8 - 8);
    v33 = *(_DWORD *)(a6 - 8);
    if (v34 >= v33)
      return result;
  }
  else
  {
    v33 = *(_DWORD *)(a6 - 8);
    v34 = *(_DWORD *)(a8 - 8);
  }
  *(double *)(a6 - 16) = v31;
  *(double *)(a8 - 16) = v32;
  *(_DWORD *)(a6 - 8) = v34;
  *(_DWORD *)(a8 - 8) = v33;
  v35 = *(double *)(a6 - 16);
  v36 = *(double *)(a4 - 16);
  if (v35 >= v36)
  {
    if (v36 < v35)
      return result;
    v38 = *(_DWORD *)(a6 - 8);
    v37 = *(_DWORD *)(a4 - 8);
    if (v38 >= v37)
      return result;
  }
  else
  {
    v37 = *(_DWORD *)(a4 - 8);
    v38 = *(_DWORD *)(a6 - 8);
  }
  *(double *)(a4 - 16) = v35;
  *(double *)(a6 - 16) = v36;
  *(_DWORD *)(a4 - 8) = v38;
  *(_DWORD *)(a6 - 8) = v37;
  v39 = *(double *)(a4 - 16);
  v40 = *(double *)(a2 - 16);
  if (v39 < v40)
  {
    v41 = *(_DWORD *)(a2 - 8);
    v42 = *(_DWORD *)(a4 - 8);
LABEL_24:
    *(double *)(a2 - 16) = v39;
    *(double *)(a4 - 16) = v40;
    *(_DWORD *)(a2 - 8) = v42;
    *(_DWORD *)(a4 - 8) = v41;
    return result;
  }
  if (v40 >= v39)
  {
    v42 = *(_DWORD *)(a4 - 8);
    v41 = *(_DWORD *)(a2 - 8);
    if (v42 < v41)
      goto LABEL_24;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;

  v8 = a2 - a4;
  if (a2 == a4)
    return a5;
  v10 = a4;
  if (v8 >= 17)
  {
    v14 = (unint64_t)((v8 >> 4) - 2) >> 1;
    v15 = v14 + 1;
    v16 = a2 - 16 * v14;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a7, v8 >> 4, v16, v16);
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  if (v10 != a6)
  {
    v17 = v10;
    v18 = v10;
    do
    {
      v21 = *(double *)(v18 - 16);
      v18 -= 16;
      v22 = v21;
      v23 = *(double *)(a2 - 16);
      if (v21 < v23)
      {
        v19 = *(_DWORD *)(v17 - 8);
        v20 = *(_DWORD *)(a2 - 8);
      }
      else
      {
        if (v23 < v22)
          goto LABEL_9;
        v19 = *(_DWORD *)(v17 - 8);
        v20 = *(_DWORD *)(a2 - 8);
        if (v19 >= v20)
          goto LABEL_9;
      }
      *(double *)(v17 - 16) = v23;
      *(double *)(a2 - 16) = v22;
      *(_DWORD *)(v17 - 8) = v20;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a7, v8 >> 4, a1, a2);
LABEL_9:
      v17 = v18;
    }
    while (v18 != a6);
  }
  if (v8 >= 17)
  {
    v24 = (unint64_t)v8 >> 4;
    do
    {
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a3, v10, a7, v24);
      v10 += 16;
    }
    while (v24-- > 2);
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;

  if (a4 >= 2)
  {
    v6 = a2 - a6;
    v7 = (unint64_t)(a4 - 2) >> 1;
    if (v7 >= (a2 - a6) >> 4)
    {
      v8 = v6 >> 3;
      v9 = (v6 >> 3) | 1;
      v10 = a2 - 16 * v9;
      v11 = v8 + 2;
      if (v11 < a4)
      {
        v12 = *(double *)(v10 - 16);
        v13 = *(double *)(v10 - 32);
        if (v12 < v13 || v13 >= v12 && *(_DWORD *)(v10 - 8) < *(_DWORD *)(v10 - 24))
        {
          v10 -= 16;
          v9 = v11;
        }
      }
      v14 = *(double *)(v10 - 16);
      v15 = *(double *)(a6 - 16);
      if (v14 >= v15)
      {
        if (v15 >= v14)
        {
          v17 = *(_DWORD *)(v10 - 8);
          v16 = *(_DWORD *)(a6 - 8);
          if (v17 < v16)
            return;
        }
        else
        {
          v16 = *(_DWORD *)(a6 - 8);
          v17 = *(_DWORD *)(v10 - 8);
        }
        *(double *)(a6 - 16) = v14;
        *(_DWORD *)(a6 - 8) = v17;
        if (v7 >= v9)
        {
          while (1)
          {
            v19 = 2 * v9;
            v9 = (2 * v9) | 1;
            v18 = a2 - 16 * v9;
            v20 = v19 + 2;
            if (v20 < a4)
            {
              v21 = *(double *)(v18 - 16);
              v22 = *(double *)(v18 - 32);
              if (v21 < v22 || v22 >= v21 && *(_DWORD *)(v18 - 8) < *(_DWORD *)(v18 - 24))
              {
                v18 -= 16;
                v9 = v20;
              }
            }
            v23 = *(double *)(v18 - 16);
            if (v23 < v15)
              break;
            v24 = *(_DWORD *)(v18 - 8);
            if (v15 >= v23 && v24 < v16)
              break;
            *(double *)(v10 - 16) = v23;
            *(_DWORD *)(v10 - 8) = v24;
            v10 = v18;
            if (v7 < v9)
              goto LABEL_14;
          }
        }
        v18 = v10;
LABEL_14:
        *(double *)(v18 - 16) = v15;
        *(_DWORD *)(v18 - 8) = v16;
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  double v27;

  if (a6 >= 2)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 - 16);
    v8 = *(_DWORD *)(a2 - 8);
    v9 = a2;
    do
    {
      v10 = v9;
      v9 += 16 * ~v6;
      v11 = 2 * v6;
      v6 = (2 * v6) | 1;
      v12 = v11 + 2;
      if (v12 < a6)
      {
        v13 = *(double *)(v9 - 16);
        v14 = *(double *)(v9 - 32);
        if (v13 < v14 || v14 >= v13 && *(_DWORD *)(v9 - 8) < *(_DWORD *)(v9 - 24))
        {
          v9 -= 16;
          v6 = v12;
        }
      }
      *(_QWORD *)(v10 - 16) = *(_QWORD *)(v9 - 16);
      *(_DWORD *)(v10 - 8) = *(_DWORD *)(v9 - 8);
    }
    while (v6 <= (uint64_t)((unint64_t)(a6 - 2) >> 1));
    if (v9 == a4 + 16)
    {
      *(_QWORD *)(v9 - 16) = v7;
      *(_DWORD *)(v9 - 8) = v8;
      return;
    }
    v15 = (double *)(v9 - 16);
    *(_QWORD *)(v9 - 16) = *(_QWORD *)a4;
    *(_DWORD *)(v9 - 8) = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a4 = v7;
    *(_DWORD *)(a4 + 8) = v8;
    v16 = a2 - (v9 - 16);
    if (v16 >= 17)
    {
      v17 = ((unint64_t)v16 >> 4) - 2;
      v18 = v17 >> 1;
      v19 = a2 - 16 * (v17 >> 1);
      v20 = *(double *)(v19 - 16);
      v21 = *v15;
      if (v20 >= *v15)
      {
        if (v21 < v20)
          return;
        v23 = *(_DWORD *)(v19 - 8);
        v22 = *(_DWORD *)(v9 - 8);
        if (v23 >= v22)
          return;
      }
      else
      {
        v22 = *(_DWORD *)(v9 - 8);
        v23 = *(_DWORD *)(v19 - 8);
      }
      *(double *)(v9 - 16) = v20;
      *(_DWORD *)(v9 - 8) = v23;
      if (v17 >= 2)
      {
        while (1)
        {
          v26 = v18 - 1;
          v18 = (v18 - 1) >> 1;
          v24 = a2 - 16 * v18;
          v27 = *(double *)(v24 - 16);
          if (v27 < v21)
          {
            v25 = *(_DWORD *)(v24 - 8);
          }
          else
          {
            if (v21 < v27)
              break;
            v25 = *(_DWORD *)(v24 - 8);
            if (v25 >= v22)
              break;
          }
          *(double *)(v19 - 16) = v27;
          *(_DWORD *)(v19 - 8) = v25;
          v19 = a2 - 16 * v18;
          if (v26 <= 1)
            goto LABEL_19;
        }
      }
      v24 = v19;
LABEL_19:
      *(double *)(v24 - 16) = v21;
      *(_DWORD *)(v24 - 8) = v22;
    }
  }
}

uint64_t *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::EmplaceDecomposable::operator()<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<std::vector<int>&&>>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v9 = 0;
  result = *a1;
  v11 = *a2;
  v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2));
  v13 = *result;
  v14 = (v12 >> 7) ^ ((unint64_t)*result >> 12);
  v15 = result[3];
  while (1)
  {
    v16 = v14 & v15;
    v17 = *(_QWORD *)(v13 + (v14 & v15));
    v18 = ((v17 ^ (0x101010101010101 * (v12 & 0x7F))) - 0x101010101010101) & ~(v17 ^ (0x101010101010101
                                                                                        * (v12 & 0x7F))) & 0x8080808080808080;
    if (v18)
      break;
LABEL_6:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
    {
      result = (uint64_t *)absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::prepare_insert(result, v12);
      v20 = (unint64_t)result;
      v22 = (_QWORD *)((*a1)[1] + 32 * (_QWORD)result);
      v23 = *a4;
      v24 = **a3;
      v22[2] = 0;
      v22[3] = 0;
      *v22 = v24;
      v22[1] = 0;
      *(_OWORD *)(v22 + 1) = *(_OWORD *)v23;
      v22[3] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)v23 = 0;
      v13 = **a1;
      v19 = (*a1)[1];
      v21 = 1;
      goto LABEL_10;
    }
    v9 += 8;
    v14 = v9 + v16;
  }
  v19 = result[1];
  while (1)
  {
    v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v15;
    if (*(_QWORD *)(v19 + 32 * v20) == v11)
      break;
    v18 &= v18 - 1;
    if (!v18)
      goto LABEL_6;
  }
  v21 = 0;
LABEL_10:
  *(_QWORD *)a5 = v13 + v20;
  *(_QWORD *)(a5 + 8) = v19 + 32 * v20;
  *(_BYTE *)(a5 + 16) = v21;
  return result;
}

void operations_research::sat::CpModelMapping::CreateVariables(std::vector<int> *this, const operations_research::sat::CpModelProto *a2, char a3, operations_research::sat::Model *a4)
{
  const operations_research::sat::CpModelProto *v6;
  std::vector<int>::size_type v8;
  operations_research::sat::SatSolver *v9;
  std::vector<int>::pointer begin;
  std::vector<int> *v11;
  unint64_t v12;
  std::vector<int>::pointer v13;
  std::vector<int> *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  int *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  int *v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  void *v63;
  char *i;
  uint64_t (***v65)();
  uint64_t v66;
  char *v67;
  char *v68;
  char *j;
  uint64_t (***v70)();
  uint64_t v71;
  const operations_research::sat::CpModelProto *v72;
  std::vector<int>::size_type v73;
  std::vector<int> *v74;
  std::vector<int>::pointer v75;
  uint64_t mm;
  void *v77;
  int *v78;
  uint64_t v79;
  int *v80;
  int *k;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t m;
  unint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v92;
  int *v93;
  int *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t n;
  unint64_t v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  int *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t ii;
  unint64_t v115;
  int v116;
  unint64_t v117;
  uint64_t jj;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t kk;
  unint64_t v124;
  unint64_t v125;
  int *v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  size_t v130;
  _QWORD *v131;
  int v132;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v134;
  int v135;
  int v136;
  std::vector<int>::pointer v137;
  int v138;
  int *v139;
  char *v140;
  int32x4_t v141;
  int32x4_t *v142;
  int32x4_t v143;
  int32x4_t v144;
  uint64_t v145;
  unint64_t v146;
  operations_research::sat::IntegerTrail *v147;
  __n128 v148;
  std::vector<int>::pointer v149;
  std::vector<int>::pointer v150;
  unint64_t v151;
  std::vector<int>::pointer v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t nn;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  std::vector<int>::pointer v162;
  std::vector<int>::pointer v163;
  std::vector<int> *v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  _DWORD *v178;
  int v179;
  int v180;
  int v181;
  std::vector<int>::pointer v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t (***v190)();
  _DWORD *v191;
  int v192;
  int v193;
  int v194;
  std::vector<int>::pointer v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  uint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  std::vector<int>::pointer v206;
  std::vector<int>::pointer v207;
  char *v208;
  char v209;
  std::vector<int>::size_type __n;
  uint64_t v211;
  std::vector<int> *v212;
  operations_research::sat::Model *v213;
  operations_research::sat::SatSolver *v214;
  void *v215;
  std::vector<int> *v216;
  int *v217;
  void *v218;
  std::vector<int> *v219;
  const operations_research::sat::CpModelProto *v220;
  std::vector<int>::value_type __x[2];
  __int128 v222;
  __int128 v223;
  void *v224;
  void *__p[7];
  std::vector<int>::value_type v226[2];
  void *v227[2];
  __int128 v228;
  uint64_t v229;
  std::vector<int> v230;
  uint64_t (**v231)();
  uint64_t v232;
  unsigned int v233;
  uint64_t (***v234)();
  uint64_t (**v235)();
  uint64_t v236;
  uint64_t v237;
  uint64_t (***v238)();
  uint64_t (**v239)();
  int *v240[2];
  uint64_t (***v241)();
  uint64_t (**v242)();
  int *v243[2];
  uint64_t (***v244)();
  uint64_t v245;

  v6 = a2;
  v245 = *MEMORY[0x24BDAC8D0];
  v8 = *((int *)a2 + 6);
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a4);
  v226[0] = *((_DWORD *)v9 + 4);
  LODWORD(__p[0]) = 0;
  v209 = a3;
  if (v226[0])
  {
    __p[0] = (void *)google::MakeCheckOpString<int,int>((int)v226, (int)__p, "sat_solver->NumVariables() == 0");
    if (__p[0])
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v226, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 122, (uint64_t **)__p);
      google::LogMessage::stream((google::LogMessage *)v226);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v226);
    }
  }
  *(_QWORD *)v226 = 0;
  v227[0] = 0;
  v227[1] = 0;
  memset(__p, 0, 24);
  begin = this[2].__begin_;
  v11 = this + 2;
  v12 = this[2].__end_ - begin;
  if (v8 <= v12)
  {
    if (v8 < v12)
      this[2].__end_ = &begin[v8];
  }
  else
  {
    std::vector<int>::__append(this + 2, v8 - v12, &operations_research::sat::kNoBooleanVariable);
  }
  __x[0] = -1;
  v13 = this[3].__begin_;
  v14 = this + 3;
  v15 = this[3].__end_ - v13;
  v216 = this + 3;
  if (v8 <= v15)
  {
    if (v8 < v15)
      this[3].__end_ = &v13[v8];
  }
  else
  {
    std::vector<int>::__append(v216, v8 - v15, __x);
    v14 = this + 3;
  }
  v213 = a4;
  v214 = v9;
  __n = v8;
  v211 = v8;
  v219 = this;
  v220 = v6;
  v212 = this + 2;
  if ((int)v8 >= 1)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = v8;
    while (1)
    {
      v22 = *(_QWORD *)(*((_QWORD *)v6 + 4) + 8 * v19 + 8);
      if (*(_DWORD *)(v22 + 16) != 2)
        goto LABEL_14;
      v23 = *(uint64_t **)(v22 + 24);
      v24 = *v23;
      if (*v23 < 0)
        goto LABEL_14;
      v25 = v23[1];
      if (v25 > 1)
        goto LABEL_14;
      v11->__begin_[v19] = v20;
      v14->__begin_[v20] = v19;
      if (v25)
      {
        if (v24 == 1)
        {
          if (v18 < v17)
          {
            *(_DWORD *)v18 = v20;
            v26 = v18 + 4;
LABEL_49:
            __p[1] = v26;
            v18 = (char *)v26;
            goto LABEL_13;
          }
          v38 = (v18 - v16) >> 2;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62)
LABEL_277:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if ((v17 - v16) >> 1 > v39)
            v39 = (v17 - v16) >> 1;
          if ((unint64_t)(v17 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
          {
            if (v40 >> 62)
LABEL_276:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v41 = operator new(4 * v40);
            v42 = (int *)&v41[4 * v38];
            *v42 = v20;
            v26 = v42 + 1;
            if (v18 != v16)
            {
LABEL_43:
              v43 = v18 - 4 - v16;
              if (v43 < 0xBC
                || &v41[v18 - v16 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v18 - v16 - 4]
                || &v18[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v18 - 4
                || (unint64_t)(v16 - v41) < 0x20)
              {
                v44 = v18;
                v6 = v220;
                v21 = v211;
              }
              else
              {
                v56 = (v43 >> 2) + 1;
                v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
                v44 = &v18[-v57];
                v42 = (int *)((char *)v42 - v57);
                v58 = &v41[4 * v38 - 16];
                v59 = v18 - 16;
                v60 = v56 & 0x7FFFFFFFFFFFFFF8;
                v6 = v220;
                do
                {
                  v61 = *(_OWORD *)v59;
                  *(v58 - 1) = *((_OWORD *)v59 - 1);
                  *v58 = v61;
                  v58 -= 2;
                  v59 -= 32;
                  v60 -= 8;
                }
                while (v60);
                v21 = v211;
                if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_46:
                  v17 = &v41[4 * v40];
                  __p[0] = v42;
                  __p[1] = v26;
                  __p[2] = v17;
                  if (v16)
                    goto LABEL_47;
                  goto LABEL_48;
                }
              }
              do
              {
                v45 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *--v42 = v45;
              }
              while (v44 != v16);
              goto LABEL_46;
            }
          }
          else
          {
            v41 = 0;
            v42 = (int *)(4 * v38);
            *(_DWORD *)(4 * v38) = v20;
            v26 = (void *)(4 * v38 + 4);
            if (v18 != v16)
              goto LABEL_43;
          }
          v6 = v220;
          v21 = v211;
          v17 = &v41[4 * v40];
          __p[0] = v42;
          __p[1] = v26;
          __p[2] = v17;
          if (v16)
          {
LABEL_47:
            v46 = v17;
            operator delete(v16);
            v17 = v46;
          }
LABEL_48:
          v16 = (char *)v42;
          v11 = v212;
          v14 = v216;
          goto LABEL_49;
        }
      }
      else
      {
        v27 = (char *)v227[0];
        if (v227[0] >= v227[1])
        {
          v28 = *(char **)v226;
          v29 = (char *)v227[0] - *(_QWORD *)v226;
          v30 = ((uint64_t)v227[0] - *(_QWORD *)v226) >> 2;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62)
            goto LABEL_277;
          v32 = (uint64_t)v227[1] - *(_QWORD *)v226;
          if (((uint64_t)v227[1] - *(_QWORD *)v226) >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          v208 = v17;
          if (v33)
          {
            if (v33 >> 62)
              goto LABEL_276;
            v34 = operator new(4 * v33);
            v35 = (int *)((char *)v34 + 4 * v30);
            *v35 = v20;
            v36 = v35 + 1;
            if (v27 != v28)
            {
LABEL_32:
              v37 = v27 - 4 - v28;
              if (v37 < 0x2C)
              {
                v6 = v220;
                goto LABEL_59;
              }
              v47 = v27 - &v29[(_QWORD)v34];
              v6 = v220;
              if (v47 < 0x20)
                goto LABEL_280;
              v48 = (v37 >> 2) + 1;
              v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
              v50 = &v27[-v49];
              v35 = (int *)((char *)v35 - v49);
              v51 = (char *)v34 + 4 * v30 - 16;
              v52 = v27 - 16;
              v53 = v48 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v54 = *(_OWORD *)v52;
                *(v51 - 1) = *((_OWORD *)v52 - 1);
                *v51 = v54;
                v51 -= 2;
                v52 -= 32;
                v53 -= 8;
              }
              while (v53);
              v27 = v50;
              if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_280:
                do
                {
LABEL_59:
                  v55 = *((_DWORD *)v27 - 1);
                  v27 -= 4;
                  *--v35 = v55;
                }
                while (v27 != v28);
              }
LABEL_60:
              *(_QWORD *)v226 = v35;
              v227[1] = (char *)v34 + 4 * v33;
              if (v28)
                operator delete(v28);
              v21 = v211;
              v11 = v212;
              v14 = v216;
              v17 = v208;
              v227[0] = v36;
              goto LABEL_13;
            }
          }
          else
          {
            v34 = 0;
            v35 = (int *)(4 * v30);
            *(_DWORD *)(4 * v30) = v20;
            v36 = (void *)(4 * v30 + 4);
            if (v27 != v28)
              goto LABEL_32;
          }
          v6 = v220;
          goto LABEL_60;
        }
        *(_DWORD *)v227[0] = v20;
        v227[0] = v27 + 4;
      }
LABEL_13:
      ++v20;
LABEL_14:
      if (++v19 == v21)
        goto LABEL_71;
    }
  }
  v18 = 0;
  v20 = 0;
LABEL_71:
  operations_research::sat::SatSolver::SetNumVariables(v214, v20);
  v63 = __p[0];
  if (__p[0] != v18)
  {
    for (i = (char *)__p[0]; i != v18; i += 4)
    {
      __x[0] = 2 * *(_DWORD *)i;
      v242 = &off_24F980568;
      v243[0] = __x;
      v243[1] = (int *)1;
      v244 = &v242;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v243, (uint64_t)v213);
      v65 = v244;
      if (v244 == &v242)
      {
        v65 = &v242;
        v66 = 4;
      }
      else
      {
        if (!v244)
          continue;
        v66 = 5;
      }
      (*v65)[v66]();
    }
  }
  v68 = *(char **)v226;
  v67 = (char *)v227[0];
  if (*(void **)v226 != v227[0])
  {
    for (j = *(char **)v226; j != v67; j += 4)
    {
      __x[0] = (2 * *(_DWORD *)j) | 1;
      v239 = &off_24F980568;
      v240[0] = __x;
      v240[1] = (int *)1;
      v241 = &v239;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v240, (uint64_t)v213);
      v70 = v241;
      if (v241 == &v239)
      {
        v70 = &v239;
        v71 = 4;
      }
      else
      {
        if (!v241)
          continue;
        v71 = 5;
      }
      (*v70)[v71]();
    }
  }
  v72 = v220;
  if (v63)
    operator delete(v63);
  v73 = __n;
  if (v68)
    operator delete(v68);
  memset(&v230, 0, sizeof(v230));
  v74 = v219;
  if ((v209 & 1) == 0)
  {
    *(_QWORD *)v226 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_OWORD *)v227 = 0u;
    v228 = 0u;
    v229 = 0;
    memset(__p, 0, 48);
    if (*((int *)v220 + 12) < 1)
    {
      v78 = 0;
      v77 = 0;
    }
    else
    {
      v77 = 0;
      v78 = 0;
      v79 = 0;
      do
      {
        operations_research::sat::GetReferencesUsedByConstraint(*(operations_research::sat **)(*((_QWORD *)v72 + 7) + 8 * v79 + 8), (uint64_t)__x);
        if (v78)
          operator delete(v78);
        v78 = *(int **)__x;
        __p[0] = *(void **)__x;
        v217 = (int *)v222;
        *(_OWORD *)&__p[1] = v222;
        v222 = 0uLL;
        *(_QWORD *)__x = 0;
        if (v77)
        {
          operator delete(v77);
          v80 = *(int **)__x;
        }
        else
        {
          v80 = 0;
        }
        v215 = (void *)v223;
        *(_OWORD *)&__p[3] = v223;
        __p[5] = v224;
        v224 = 0;
        v223 = 0uLL;
        if (v80)
        {
          *(_QWORD *)&v222 = v80;
          operator delete(v80);
        }
        for (k = v78; k != v217; ++k)
        {
          v85 = 0;
          if (~*k <= *k)
            v88 = *k;
          else
            v88 = ~*k;
          v89 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v88)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v88));
          for (m = (v89 >> 7) ^ (*(_QWORD *)v226 >> 12); ; m = v85 + v82)
          {
            v82 = m & v228;
            v83 = *(_QWORD *)(*(_QWORD *)v226 + v82);
            v84 = ((v83 ^ (0x101010101010101 * (v89 & 0x7F))) - 0x101010101010101) & ~(v83 ^ (0x101010101010101
                                                                                                * (v89 & 0x7F))) & 0x8080808080808080;
            if (v84)
              break;
LABEL_111:
            if ((v83 & (~v83 << 6) & 0x8080808080808080) != 0)
            {
              v87 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v226, v89);
              *((_DWORD *)v227[0] + v87) = v88;
              goto LABEL_114;
            }
            v85 += 8;
          }
          while (*((_DWORD *)v227[0] + ((v82 + (__clz(__rbit64(v84)) >> 3)) & v228)) != v88)
          {
            v84 &= v84 - 1;
            if (!v84)
              goto LABEL_111;
          }
LABEL_114:
          ;
        }
        ++v79;
        v72 = v220;
        v77 = v215;
      }
      while (v79 < *((int *)v220 + 12));
    }
    v90 = *((_QWORD *)v72 + 15);
    if (v72 != (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
      && v90 != 0)
    {
      v92 = *(int *)(v90 + 16);
      if ((_DWORD)v92)
      {
        v93 = *(int **)(v90 + 24);
        v94 = &v93[v92];
        do
        {
          v98 = 0;
          if (~*v93 <= *v93)
            v101 = *v93;
          else
            v101 = ~*v93;
          v102 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v101)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v101));
          for (n = (v102 >> 7) ^ (*(_QWORD *)v226 >> 12); ; n = v98 + v95)
          {
            v95 = n & v228;
            v96 = *(_QWORD *)(*(_QWORD *)v226 + v95);
            v97 = ((v96 ^ (0x101010101010101 * (v102 & 0x7F))) - 0x101010101010101) & ~(v96 ^ (0x101010101010101
                                                                                                 * (v102 & 0x7F))) & 0x8080808080808080;
            if (v97)
              break;
LABEL_129:
            if ((v96 & (~v96 << 6) & 0x8080808080808080) != 0)
            {
              v100 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v226, v102);
              *((_DWORD *)v227[0] + v100) = v101;
              goto LABEL_132;
            }
            v98 += 8;
          }
          while (*((_DWORD *)v227[0] + ((v95 + (__clz(__rbit64(v97)) >> 3)) & v228)) != v101)
          {
            v97 &= v97 - 1;
            if (!v97)
              goto LABEL_129;
          }
LABEL_132:
          ++v93;
        }
        while (v93 != v94);
      }
    }
    v218 = v77;
    v103 = *((_QWORD *)v220 + 10);
    if (v103)
      v104 = v103 + 8;
    else
      v104 = 0;
    v105 = *((int *)v220 + 18);
    if ((_DWORD)v105)
    {
      v106 = v104 + 8 * v105;
      do
      {
        v107 = *(int *)(*(_QWORD *)v104 + 16);
        if ((_DWORD)v107)
        {
          v108 = *(int **)(*(_QWORD *)v104 + 24);
          v109 = &v108[v107];
          do
          {
            v113 = 0;
            if (~*v108 <= *v108)
              v116 = *v108;
            else
              v116 = ~*v108;
            v117 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v116)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v116));
            for (ii = (v117 >> 7) ^ (*(_QWORD *)v226 >> 12); ; ii = v113 + v110)
            {
              v110 = ii & v228;
              v111 = *(_QWORD *)(*(_QWORD *)v226 + v110);
              v112 = ((v111 ^ (0x101010101010101 * (v117 & 0x7F))) - 0x101010101010101) & ~(v111 ^ (0x101010101010101 * (v117 & 0x7F))) & 0x8080808080808080;
              if (v112)
                break;
LABEL_148:
              if ((v111 & (~v111 << 6) & 0x8080808080808080) != 0)
              {
                v115 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v226, v117);
                *((_DWORD *)v227[0] + v115) = v116;
                goto LABEL_151;
              }
              v113 += 8;
            }
            while (*((_DWORD *)v227[0] + ((v110 + (__clz(__rbit64(v112)) >> 3)) & v228)) != v116)
            {
              v112 &= v112 - 1;
              if (!v112)
                goto LABEL_148;
            }
LABEL_151:
            ++v108;
          }
          while (v108 != v109);
        }
        v104 += 8;
      }
      while (v104 != v106);
    }
    v74 = v219;
    v72 = v220;
    if ((int)v211 >= 1)
    {
      for (jj = 0; jj != v211; ++jj)
      {
        if (v212->__begin_[jj] == -1)
        {
          v122 = 0;
          v125 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + jj)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + jj));
          for (kk = (*(_QWORD *)v226 >> 12) ^ (v125 >> 7); ; kk = v122 + v119)
          {
            v119 = kk & v228;
            v120 = *(_QWORD *)(*(_QWORD *)v226 + v119);
            v121 = ((v120 ^ (0x101010101010101 * (v125 & 0x7F))) - 0x101010101010101) & ~(v120 ^ (0x101010101010101 * (v125 & 0x7F))) & 0x8080808080808080;
            if (v121)
              break;
LABEL_161:
            if ((v120 & (~v120 << 6) & 0x8080808080808080) != 0)
            {
              v124 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v226, v125);
              *((_DWORD *)v227[0] + v124) = jj;
              goto LABEL_165;
            }
            v122 += 8;
          }
          while (jj != *((_DWORD *)v227[0] + ((v119 + (__clz(__rbit64(v121)) >> 3)) & v228)))
          {
            v121 &= v121 - 1;
            if (!v121)
              goto LABEL_161;
          }
        }
LABEL_165:
        ;
      }
    }
    v126 = (int *)v227[0];
    v127 = *(char **)v226;
    if ((char)**(_BYTE **)v226 > -2)
    {
      v73 = __n;
      v129 = (_QWORD *)(*(_QWORD *)v226 + v228);
      if (*(_QWORD *)v226 != *(_QWORD *)v226 + (_QWORD)v228)
        goto LABEL_172;
    }
    else
    {
      v73 = __n;
      do
      {
        v128 = (__clz(__rbit64(((*(_QWORD *)v127 >> 7) & ~*(_QWORD *)v127 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v127 += v128;
        v126 += v128;
      }
      while (*v127 < -1);
      v129 = (_QWORD *)(*(_QWORD *)v226 + v228);
      if (v127 != (char *)(*(_QWORD *)v226 + v228))
      {
LABEL_172:
        v130 = 0;
        v131 = v127;
        do
        {
          v132 = *((char *)v131 + 1);
          v131 = (_QWORD *)((char *)v131 + 1);
          if (v132 <= -2)
          {
            do
              v131 = (_QWORD *)((char *)v131
                              + ((__clz(__rbit64(((*v131 >> 7) & ~*v131 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3));
            while (*(char *)v131 < -1);
          }
          ++v130;
        }
        while (v131 != v129);
        goto LABEL_179;
      }
    }
    v130 = 0;
LABEL_179:
    std::vector<int>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::iterator>((uint64_t)&v230, v127, v126, v129, v62, v130);
    std::__sort<std::__less<int,int> &,int *>();
    end = v230.__end_;
    if (v230.__begin_ != v230.__end_)
    {
      v134 = v230.__begin_ + 1;
      while (v134 != v230.__end_)
      {
        v135 = *(v134 - 1);
        v136 = *v134++;
        if (v135 == v136)
        {
          v137 = v134 - 2;
          while (v134 != end)
          {
            v138 = v135;
            v135 = *v134;
            if (v138 != *v134)
            {
              v137[1] = v135;
              ++v137;
            }
            ++v134;
          }
          v139 = v137 + 1;
          v140 = (char *)((char *)end - (char *)(v137 + 1));
          if (end != v137 + 1)
          {
            if (end != (std::vector<int>::pointer)&v140[(_QWORD)v139])
              memmove(v137 + 1, &v140[(_QWORD)v139], 0);
            v230.__end_ = v139;
            v73 = __n;
          }
          break;
        }
      }
    }
    if (v218)
      operator delete(v218);
    if (v78)
      operator delete(v78);
    if ((_QWORD)v228)
    {
      operator delete(*(void **)v226);
      *(_QWORD *)v226 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v229 = 0;
      v227[1] = 0;
      *(_QWORD *)&v228 = 0;
      v227[0] = 0;
    }
    if (*((_QWORD *)&v228 + 1))
      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v228 + 1));
    goto LABEL_205;
  }
  if ((_DWORD)v211)
  {
    std::vector<int>::__append(&v230, __n);
    if ((int)v211 >= 1)
    {
      v75 = v230.__begin_;
      if (__n < 8)
      {
        for (mm = 0; mm != v211; ++mm)
LABEL_204:
          v75[mm] = mm;
        goto LABEL_205;
      }
      mm = v211 & 0x7FFFFFF8;
      v141 = (int32x4_t)xmmword_22DCE64F0;
      v142 = (int32x4_t *)(v230.__begin_ + 4);
      v143.i64[0] = 0x400000004;
      v143.i64[1] = 0x400000004;
      v144.i64[0] = 0x800000008;
      v144.i64[1] = 0x800000008;
      v145 = v211 & 0xFFFFFFF8;
      do
      {
        v142[-1] = v141;
        *v142 = vaddq_s32(v141, v143);
        v141 = vaddq_s32(v141, v144);
        v142 += 2;
        v145 -= 8;
      }
      while (v145);
      if (mm != v211)
        goto LABEL_204;
    }
  }
LABEL_205:
  v146 = v74->__end_ - v74->__begin_;
  if (v73 <= v146)
  {
    if (v73 < v146)
      v74->__end_ = &v74->__begin_[v73];
  }
  else
  {
    std::vector<int>::__append(v74, v73 - v146, &operations_research::sat::kNoIntegerVariable);
  }
  v147 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v213);
  operations_research::sat::IntegerTrail::ReserveSpaceForNumVariables(v147, (unint64_t)((char *)v230.__end_ - (char *)v230.__begin_) >> 2);
  v149 = v230.__begin_;
  v150 = v230.__end_;
  v151 = ((char *)v230.__end_ - (char *)v230.__begin_) >> 1;
  v226[0] = -1;
  v152 = v74[4].__begin_;
  v153 = v74[4].__end_ - v152;
  if (v151 <= v153)
  {
    if (v151 >= v153)
    {
      if (v230.__begin_ == v230.__end_)
        goto LABEL_216;
    }
    else
    {
      v74[4].__end_ = &v152[v151];
      if (v149 == v150)
        goto LABEL_216;
    }
  }
  else
  {
    std::vector<int>::__append(v74 + 4, v151 - v153, v226);
    v149 = v230.__begin_;
    v150 = v230.__end_;
    if (v230.__begin_ == v230.__end_)
      goto LABEL_216;
  }
  do
  {
    v159 = *v149;
    v160 = *(_QWORD *)(*((_QWORD *)v72 + 4) + 8 * *v149 + 8);
    operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v160 + 24), *(int *)(v160 + 16), (unint64_t *)v226, v148);
    v161 = operations_research::sat::IntegerTrail::AddIntegerVariable(v147, (__int128 **)v226);
    v162 = v74->__begin_;
    v74->__begin_[v159] = v161;
    if ((v226[0] & 1) != 0)
    {
      operator delete(v227[0]);
      v162 = v74->__begin_;
    }
    v74[4].__begin_[v162[v159]] = v159;
    ++v149;
    v72 = v220;
  }
  while (v149 != v150);
LABEL_216:
  v154 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v213);
  if ((int)v211 >= 1)
  {
    v155 = v154;
    for (nn = 0; nn != v211; ++nn)
    {
      v157 = v74->__begin_[nn];
      if (v157 != -1)
      {
        v158 = v212->__begin_[nn];
        if (v158 != -1)
          operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(v155, (const char *)(2 * v158), v157, 1);
      }
    }
  }
  v163 = v74[1].__begin_;
  v164 = v74 + 1;
  v165 = *((_DWORD *)v72 + 12);
  v166 = v74[1].__end_ - v163;
  if (v165 <= v166)
  {
    if (v165 < v166)
      v74[1].__end_ = &v163[v165];
  }
  else
  {
    std::vector<int>::__append(v74 + 1, v165 - v166, &operations_research::sat::kNoIntervalVariable);
    v165 = *((_DWORD *)v72 + 12);
  }
  if (v165 >= 1)
  {
    v167 = 0;
    while (1)
    {
      v173 = *(_QWORD *)(*((_QWORD *)v72 + 7) + 8 * v167 + 8);
      if (*(_DWORD *)(v173 + 60) == 19)
        break;
LABEL_253:
      if (++v167 >= *((int *)v72 + 12))
        goto LABEL_271;
    }
    if (*(_DWORD *)(v173 + 16))
    {
      v174 = **(_DWORD **)(v173 + 24);
      if (~v174 <= v174)
        v175 = **(_DWORD **)(v173 + 24);
      else
        v175 = ~v174;
      HIDWORD(v177) = v219[2].__begin_[v175];
      LODWORD(v177) = **(_DWORD **)(v173 + 24);
      v176 = (v177 >> 31);
      v178 = *(_DWORD **)(v173 + 48);
      v179 = v178[4];
      v180 = v178[5];
      if (~v179 <= v179)
        v181 = v178[4];
      else
        v181 = ~v179;
      v182 = v219->__begin_;
      v183 = v219->__begin_[v181] ^ (v179 >> 31);
      if (~v180 <= v180)
        v184 = v178[5];
      else
        v184 = ~v180;
      v185 = v182[v184] ^ (v180 >> 31);
      v186 = v178[6];
      if (~v186 <= v186)
        v187 = v186;
      else
        v187 = ~v186;
      v188 = v182[v187] ^ (v186 >> 31);
      v235 = &off_24F982B40;
      v236 = v183 | (v185 << 32);
      v237 = v188 | (v176 << 32);
      v238 = &v235;
      v189 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>((uint64_t)v213);
      v164->__begin_[v167] = operations_research::sat::IntervalsRepository::CreateInterval(v189, v236, SHIDWORD(v236), v237, 0, SHIDWORD(v237));
      v190 = v238;
      if (v238 == &v235)
      {
        v190 = &v235;
LABEL_268:
        v203 = 4;
        goto LABEL_269;
      }
    }
    else
    {
      v191 = *(_DWORD **)(v173 + 48);
      v192 = v191[4];
      v193 = v191[5];
      if (~v192 <= v192)
        v194 = v191[4];
      else
        v194 = ~v192;
      v195 = v219->__begin_;
      v196 = v219->__begin_[v194] ^ (v192 >> 31);
      if (~v193 <= v193)
        v197 = v191[5];
      else
        v197 = ~v193;
      v198 = v195[v197] ^ (v193 >> 31);
      v199 = v191[6];
      if (~v199 <= v199)
        v200 = v199;
      else
        v200 = ~v199;
      v201 = v195[v200];
      v231 = &off_24F982C40;
      v232 = v196 | (v198 << 32);
      v233 = v201 ^ (v199 >> 31);
      v234 = &v231;
      v202 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>((uint64_t)v213);
      v164->__begin_[v167] = operations_research::sat::IntervalsRepository::CreateInterval(v202, v232, SHIDWORD(v232), v233, 0, -1);
      v190 = v234;
      if (v234 == &v231)
      {
        v190 = &v231;
        goto LABEL_268;
      }
    }
    if (!v190)
      goto LABEL_270;
    v203 = 5;
LABEL_269:
    (*v190)[v203]();
LABEL_270:
    v171 = 0;
    v204 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v173)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v173)))
         + v173;
    v205 = ((v204 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v204);
    v206 = v219[5].__begin_;
    v172 = ((unint64_t)v206 >> 12) ^ (v205 >> 7);
    v207 = v219[6].__begin_;
    while (1)
    {
      v168 = v172 & (unint64_t)v207;
      v169 = *(_QWORD *)((char *)v206 + v168);
      v170 = ((v169 ^ (0x101010101010101 * (v205 & 0x7F))) - 0x101010101010101) & ~(v169 ^ (0x101010101010101
                                                                                              * (v205 & 0x7F))) & 0x8080808080808080;
      if (v170)
        break;
LABEL_234:
      if ((v169 & (~v169 << 6) & 0x8080808080808080) != 0)
      {
        *(_QWORD *)&v219[5].__end_[2
                                 * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert((uint64_t *)&v219[5], v205)] = v173;
        goto LABEL_253;
      }
      v171 += 8;
      v172 = v171 + v168;
    }
    while (*(_QWORD *)&v219[5].__end_[2 * ((v168 + (__clz(__rbit64(v170)) >> 3)) & (unint64_t)v207)] != v173)
    {
      v170 &= v170 - 1;
      if (!v170)
        goto LABEL_234;
    }
    goto LABEL_253;
  }
LABEL_271:
  if (v230.__begin_)
  {
    v230.__end_ = v230.__begin_;
    operator delete(v230.__begin_);
  }
}

void sub_22DA9E4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a34);
}

void sub_22DA9E4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelMapping *this, unint64_t a2, operations_research::sat::Model *a3)
{
  unint64_t v3;
  uint64_t v7;
  operations_research::sat::IntegerTrail *v8;
  operations_research::sat::SatSolver *v9;
  operations_research::sat::SatSolver *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  __n128 v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  const char *v78;
  int v79;
  char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  char *v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t **v91;
  unint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  unint64_t *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  const char *v114;
  uint64_t v115;
  const char *v116;
  const char *v117;
  int v118;
  char *v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  char *v123;
  unint64_t *v124;
  _QWORD *v125;
  unint64_t *v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t **v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  unint64_t *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  char v165;
  int v166;
  unsigned int *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t AssociatedLiteral;
  operations_research::sat::SatSolver *v189;
  uint64_t (***v190)();
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  int v204;
  unint64_t v205;
  uint64_t *v206;
  _OWORD *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t i;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  unint64_t v225;
  char v226;
  uint64_t *v227;
  unint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t LiteralAssociatedToEquality;
  operations_research::sat::SatSolver *v259;
  uint64_t (***v260)();
  operations_research::sat::SatSolver *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  char *v276;
  char *v277;
  char *v278;
  void *v279;
  void *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  unint64_t v285;
  unint64_t **v286;
  unint64_t **v287;
  unint64_t v288;
  char *v289;
  unint64_t v290;
  int v291;
  int v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  int v298;
  const operations_research::sat::CpModelProto *v299;
  int v300;
  operations_research::sat::SatSolver *v301;
  operations_research::sat::IntegerTrail *v302;
  uint64_t *v303;
  operations_research::sat::Model *v304;
  unsigned int *v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t *v308;
  int v309;
  _BYTE v310[24];
  __int128 v311;
  uint64_t v312;
  unint64_t v313;
  void *v314;
  __int128 v315;
  unint64_t v316;
  _BYTE v317[12];
  int v318;
  int v319;
  char *v320;
  char *v321;
  char *v322;
  uint64_t (**v323)();
  unint64_t v324;
  uint64_t (***v325)();
  uint64_t (**v326)();
  unint64_t v327;
  uint64_t (***v328)();
  uint64_t (**v329)();
  unint64_t v330;
  uint64_t (***v331)();
  uint64_t v332;

  v332 = *MEMORY[0x24BDAC8D0];
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  if (*((_BYTE *)v9 + 496))
    return;
  v10 = v9;
  v304 = a3;
  v305 = (unsigned int *)v7;
  v11 = *(int *)(a2 + 24);
  v321 = 0;
  v322 = 0;
  v320 = 0;
  if ((_DWORD)v11)
  {
    if ((v11 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = 24 * v11;
    v320 = (char *)operator new(24 * v11);
    v322 = &v320[v12];
    v13 = 24 * ((v12 - 24) / 0x18uLL) + 24;
    bzero(v320, v13);
    v321 = &v320[v13];
  }
  v295 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>((uint64_t)v304);
  v301 = v10;
  v15 = *(_QWORD *)(a2 + 56);
  if (v15)
    v16 = v15 + 8;
  else
    v16 = 0;
  v17 = *(int *)(a2 + 48);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 0;
    v297 = 0;
    v299 = (const operations_research::sat::CpModelProto *)a2;
    v293 = (uint64_t *)((char *)this + 216);
    v20 = v16 + 8 * v17;
    v302 = v8;
    v307 = v20;
    while (1)
    {
      v3 = *(_QWORD *)v16;
      if (*(_DWORD *)(*(_QWORD *)v16 + 60) != 12)
        goto LABEL_10;
      if (*(_DWORD *)(v3 + 16) != 1)
        goto LABEL_10;
      v21 = *(_QWORD *)(v3 + 48);
      if (*(_DWORD *)(v21 + 16) != 1)
        goto LABEL_10;
      v22 = **(_DWORD **)(v3 + 24);
      if (~v22 <= v22)
        v23 = **(_DWORD **)(v3 + 24);
      else
        v23 = ~v22;
      v24 = *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v23);
      v25 = **(_DWORD **)(v21 + 24);
      if (~v25 <= v25)
        v26 = **(_DWORD **)(v21 + 24);
      else
        v26 = ~v25;
      v319 = v26;
      v27 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v26 + 8);
      operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v27 + 24), *(int *)(v27 + 16), &v316, v14);
      v29 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (*(_DWORD *)(v3 + 60) == 12)
        v29 = *(uint64_t **)(v3 + 48);
      operations_research::Domain::FromFlatSpanOfIntervals(v29[9], *((int *)v29 + 16), (unint64_t *)v310, v28);
      v30 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (*(_DWORD *)(v3 + 60) == 12)
        v30 = *(uint64_t **)(v3 + 48);
      v31 = *(_QWORD *)v30[6];
      if (v25 >= 0)
        v32 = v31;
      else
        v32 = -v31;
      operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)v310, v32, (unint64_t *)&v315);
      if ((v310[0] & 1) != 0)
        operator delete(*(void **)&v310[8]);
      v34 = __PAIR64__(v24, v22) >> 31;
      if ((v315 & 0x1FFFFFFFELL) == 2)
      {
        v35 = operations_research::Domain::Max((operations_research::Domain *)&v315, v33);
        if (v35 >= operations_research::Domain::Max((operations_research::Domain *)&v316, v36))
        {
          v38 = operations_research::Domain::Min((operations_research::Domain *)&v315, v37);
          if (v38 > operations_research::Domain::Min((operations_research::Domain *)&v316, v39))
          {
            v40 = v319;
            if (~v319 <= v319)
              v41 = v319;
            else
              v41 = ~v319;
            v42 = *(_DWORD *)(*(_QWORD *)this + 4 * v41);
            v43 = operations_research::Domain::Min((operations_research::Domain *)&v315, v37);
            *(_DWORD *)v310 = v42 ^ (v40 >> 31);
            *(_QWORD *)&v310[4] = v43;
            v44 = *(_QWORD *)v310;
            v45 = HIDWORD(v43);
            if (v19 < (unint64_t)v297)
            {
              *(_QWORD *)v19 = v3;
              *(_DWORD *)(v19 + 8) = v34;
              *(_QWORD *)(v19 + 12) = v44;
              *(_DWORD *)(v19 + 20) = HIDWORD(v43);
              v19 += 24;
              v8 = v302;
LABEL_70:
              v290 = v290 & 0xFFFFFFFF00000000 | *(unsigned int *)(v19 - 4);
              operations_research::sat::ImpliedBounds::Add(v295, v34, *(_QWORD *)(v19 - 12), *(_DWORD *)(v19 - 4));
              goto LABEL_83;
            }
            v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v18) >> 3) + 1;
            if (v59 > 0xAAAAAAAAAAAAAAALL)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v297 - v18) >> 3) > v59)
              v59 = 0x5555555555555556 * ((v297 - v18) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v297 - v18) >> 3) >= 0x555555555555555)
              v60 = 0xAAAAAAAAAAAAAAALL;
            else
              v60 = v59;
            if (v60)
            {
              v306 = *(_QWORD *)v310;
              if (v60 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v61 = v60;
              v62 = (char *)operator new(24 * v60);
              v44 = v306;
              v60 = v61;
            }
            else
            {
              v62 = 0;
            }
            v67 = &v62[8 * ((uint64_t)(v19 - (_QWORD)v18) >> 3)];
            *(_QWORD *)v67 = v3;
            *((_DWORD *)v67 + 2) = v34;
            *(_QWORD *)(v67 + 12) = v44;
            *((_DWORD *)v67 + 5) = v45;
            if ((char *)v19 == v18)
            {
              v70 = &v62[8 * ((uint64_t)(v19 - (_QWORD)v18) >> 3)];
              v8 = v302;
              v297 = &v62[24 * v60];
              v19 = (unint64_t)(v67 + 24);
              if (v18)
                goto LABEL_68;
            }
            else
            {
              v68 = &v62[8 * ((uint64_t)(v19 - (_QWORD)v18) >> 3)];
              v8 = v302;
              do
              {
                v69 = *(_OWORD *)(v19 - 24);
                v70 = v68 - 24;
                *((_QWORD *)v68 - 1) = *(_QWORD *)(v19 - 8);
                *(_OWORD *)(v68 - 24) = v69;
                v19 -= 24;
                v68 -= 24;
              }
              while ((char *)v19 != v18);
              v297 = &v62[24 * v60];
              v19 = (unint64_t)(v67 + 24);
              if (v18)
LABEL_68:
                operator delete(v18);
            }
            v18 = v70;
            goto LABEL_70;
          }
        }
        v46 = operations_research::Domain::Min((operations_research::Domain *)&v315, v37);
        if (v46 <= operations_research::Domain::Min((operations_research::Domain *)&v316, v47))
        {
          v49 = operations_research::Domain::Max((operations_research::Domain *)&v315, v48);
          if (v49 < operations_research::Domain::Max((operations_research::Domain *)&v316, v50))
          {
            v52 = v319;
            v53 = ~v319;
            if (~v319 > v319)
              v52 = ~v319;
            v54 = *(_DWORD *)(*(_QWORD *)this + 4 * v52);
            v55 = operations_research::Domain::Max((operations_research::Domain *)&v315, v51);
            v56 = 0x7FFFFFFFFFFFFFFFLL;
            if (v55 >= (uint64_t)0x8000000000000002)
              v56 = -v55;
            *(_DWORD *)v310 = v54 ^ (v53 >> 31);
            *(_QWORD *)&v310[4] = v56;
            v57 = *(_QWORD *)v310;
            v58 = HIDWORD(v56);
            if (v19 >= (unint64_t)v297)
            {
              v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v18) >> 3) + 1;
              if (v63 > 0xAAAAAAAAAAAAAAALL)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v297 - v18) >> 3) > v63)
                v63 = 0x5555555555555556 * ((v297 - v18) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v297 - v18) >> 3) >= 0x555555555555555)
                v64 = 0xAAAAAAAAAAAAAAALL;
              else
                v64 = v63;
              if (v64)
              {
                v306 = *(_QWORD *)v310;
                if (v64 > 0xAAAAAAAAAAAAAAALL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v65 = v64;
                v66 = (char *)operator new(24 * v64);
                v57 = v306;
                v64 = v65;
              }
              else
              {
                v66 = 0;
              }
              v71 = &v66[8 * ((uint64_t)(v19 - (_QWORD)v18) >> 3)];
              *(_QWORD *)v71 = v3;
              *((_DWORD *)v71 + 2) = v34;
              *(_QWORD *)(v71 + 12) = v57;
              *((_DWORD *)v71 + 5) = v58;
              if ((char *)v19 == v18)
              {
                v74 = &v66[8 * ((uint64_t)(v19 - (_QWORD)v18) >> 3)];
                v8 = v302;
              }
              else
              {
                v72 = &v66[8 * ((uint64_t)(v19 - (_QWORD)v18) >> 3)];
                v8 = v302;
                do
                {
                  v73 = *(_OWORD *)(v19 - 24);
                  v74 = v72 - 24;
                  *((_QWORD *)v72 - 1) = *(_QWORD *)(v19 - 8);
                  *(_OWORD *)(v72 - 24) = v73;
                  v19 -= 24;
                  v72 -= 24;
                }
                while ((char *)v19 != v18);
              }
              v297 = &v66[24 * v64];
              v19 = (unint64_t)(v71 + 24);
              if (v18)
                operator delete(v18);
              v18 = v74;
            }
            else
            {
              *(_QWORD *)v19 = v3;
              *(_DWORD *)(v19 + 8) = v34;
              *(_QWORD *)(v19 + 12) = v57;
              *(_DWORD *)(v19 + 20) = HIDWORD(v56);
              v19 += 24;
              v8 = v302;
            }
            v288 = v288 & 0xFFFFFFFF00000000 | *(unsigned int *)(v19 - 4);
            operations_research::sat::ImpliedBounds::Add(v295, v34, *(_QWORD *)(v19 - 12), *(_DWORD *)(v19 - 4));
          }
        }
      }
LABEL_83:
      operations_research::Domain::IntersectionWith(&v316, (const operations_research::Domain *)&v315, &v313);
      if (!operations_research::Domain::IsEmpty((operations_research::Domain *)&v313))
      {
        v76 = operations_research::Domain::Min((operations_research::Domain *)&v313, v75);
        if (v76 == operations_research::Domain::Max((operations_research::Domain *)&v313, v77))
        {
          v306 = v19;
          v282 = v18;
          v79 = v319;
          v80 = v320;
          v81 = operations_research::Domain::Min((operations_research::Domain *)&v313, v78);
          v83 = v81;
          v84 = &v80[24 * v79];
          v87 = (unint64_t *)*((_QWORD *)v84 + 1);
          v86 = v84 + 8;
          v85 = v87;
          v89 = v86 + 1;
          v88 = v86[1];
          if ((unint64_t)v87 >= v88)
          {
            v91 = (unint64_t **)&v80[24 * v79];
            v92 = *v91;
            v93 = ((char *)v85 - (char *)*v91) >> 5;
            v94 = v93 + 1;
            if ((unint64_t)(v93 + 1) >> 59)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v95 = v88 - (_QWORD)v92;
            if (v95 >> 4 > v94)
              v94 = v95 >> 4;
            v96 = (unint64_t)v95 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v94;
            if (v96)
            {
              v286 = v91;
              if (v96 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v97 = v96;
              v98 = (char *)operator new(32 * v96);
              v89 = v86 + 1;
              v91 = v286;
              v96 = v97;
            }
            else
            {
              v98 = 0;
            }
            v99 = &v98[32 * v93];
            *(_QWORD *)v99 = v3;
            *((_DWORD *)v99 + 2) = v34;
            *((_QWORD *)v99 + 2) = v83;
            v99[24] = 1;
            v100 = (unint64_t *)v99;
            if (v85 == v92)
            {
              v18 = v282;
              a2 = (unint64_t)v299;
            }
            else
            {
              v18 = v282;
              a2 = (unint64_t)v299;
              do
              {
                v101 = *((_OWORD *)v85 - 2);
                *(_OWORD *)((char *)v100 - 23) = *(_OWORD *)((char *)v85 - 23);
                *((_OWORD *)v100 - 2) = v101;
                v100 -= 4;
                v85 -= 4;
              }
              while (v85 != v92);
              v85 = *v91;
            }
            *v91 = v100;
            v90 = v99 + 32;
            *v86 = v99 + 32;
            *v89 = &v98[32 * v96];
            v19 = v306;
            if (v85)
              operator delete(v85);
          }
          else
          {
            *v85 = v3;
            *((_DWORD *)v85 + 2) = v34;
            v85[2] = v81;
            v90 = v85 + 4;
            *((_BYTE *)v85 + 24) = 1;
            v19 = v306;
            a2 = (unint64_t)v299;
          }
          *v86 = v90;
          v102 = operations_research::Domain::Min((operations_research::Domain *)&v313, v82);
          v8 = v302;
          if (operations_research::Domain::Contains((operations_research::Domain *)&v316, v102))
          {
            absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::try_emplace_impl<int const&>(v293, &v319, (uint64_t)v310);
            v103 = *(uint64_t **)&v310[8];
            v105 = operations_research::Domain::Min((operations_research::Domain *)&v313, v104);
            v106 = 0;
            v107 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v105)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v105));
            v108 = v103[1];
            v109 = (v108 >> 12) ^ (v107 >> 7);
            v110 = v103[4];
            while (1)
            {
              v111 = v109 & v110;
              v112 = *(_QWORD *)(v108 + v111);
              v113 = ((v112 ^ (0x101010101010101 * (v107 & 0x7F))) - 0x101010101010101) & ~(v112 ^ (0x101010101010101 * (v107 & 0x7F))) & 0x8080808080808080;
              if (v113)
                break;
LABEL_109:
              if ((v112 & (~v112 << 6) & 0x8080808080808080) != 0)
              {
                *(_QWORD *)(v103[2]
                          + 8
                          * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert(v103 + 1, v107)) = v105;
                goto LABEL_112;
              }
              v106 += 8;
              v109 = v106 + v111;
            }
            while (*(_QWORD *)(v103[2] + 8 * ((v111 + (__clz(__rbit64(v113)) >> 3)) & v110)) != v105)
            {
              v113 &= v113 - 1;
              if (!v113)
                goto LABEL_109;
            }
          }
        }
      }
LABEL_112:
      if ((v313 & 1) != 0)
        operator delete(v314);
      operations_research::Domain::Complement((operations_research::Domain *)&v315, (unint64_t *)v310);
      operations_research::Domain::IntersectionWith(&v316, (const operations_research::Domain *)v310, &v313);
      if ((v310[0] & 1) != 0)
        operator delete(*(void **)&v310[8]);
      if (!operations_research::Domain::IsEmpty((operations_research::Domain *)&v313))
      {
        v115 = operations_research::Domain::Min((operations_research::Domain *)&v313, v114);
        if (v115 == operations_research::Domain::Max((operations_research::Domain *)&v313, v116))
        {
          v306 = v19;
          v283 = v18;
          v118 = v319;
          v119 = v320;
          v120 = operations_research::Domain::Min((operations_research::Domain *)&v313, v117);
          v122 = v120;
          v123 = &v119[24 * v118];
          v126 = (unint64_t *)*((_QWORD *)v123 + 1);
          v125 = v123 + 8;
          v124 = v126;
          v128 = v125 + 1;
          v127 = v125[1];
          if ((unint64_t)v126 >= v127)
          {
            v130 = (unint64_t **)&v119[24 * v118];
            v131 = *v130;
            v132 = ((char *)v124 - (char *)*v130) >> 5;
            v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 59)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v134 = v127 - (_QWORD)v131;
            if (v134 >> 4 > v133)
              v133 = v134 >> 4;
            v135 = (unint64_t)v134 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v133;
            if (v135)
            {
              v287 = v130;
              if (v135 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v136 = v135;
              v137 = (char *)operator new(32 * v135);
              v128 = v125 + 1;
              v130 = v287;
              v135 = v136;
            }
            else
            {
              v137 = 0;
            }
            v138 = &v137[32 * v132];
            *(_QWORD *)v138 = v3;
            *((_DWORD *)v138 + 2) = v34;
            *((_QWORD *)v138 + 2) = v122;
            v138[24] = 0;
            v139 = (unint64_t *)v138;
            if (v124 == v131)
            {
              v18 = v283;
              a2 = (unint64_t)v299;
            }
            else
            {
              v18 = v283;
              a2 = (unint64_t)v299;
              do
              {
                v140 = *((_OWORD *)v124 - 2);
                *(_OWORD *)((char *)v139 - 23) = *(_OWORD *)((char *)v124 - 23);
                *((_OWORD *)v139 - 2) = v140;
                v139 -= 4;
                v124 -= 4;
              }
              while (v124 != v131);
              v124 = *v130;
            }
            *v130 = v139;
            v129 = v138 + 32;
            *v125 = v138 + 32;
            *v128 = &v137[32 * v135];
            v19 = v306;
            if (v124)
              operator delete(v124);
          }
          else
          {
            *v124 = v3;
            *((_DWORD *)v124 + 2) = v34;
            v124[2] = v120;
            v129 = v124 + 4;
            *((_BYTE *)v124 + 24) = 0;
            v19 = v306;
            a2 = (unint64_t)v299;
          }
          *v125 = v129;
          v141 = operations_research::Domain::Min((operations_research::Domain *)&v313, v121);
          v8 = v302;
          if (operations_research::Domain::Contains((operations_research::Domain *)&v316, v141))
          {
            absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::try_emplace_impl<int const&>(v293, &v319, (uint64_t)v310);
            v142 = *(uint64_t **)&v310[8];
            v144 = operations_research::Domain::Min((operations_research::Domain *)&v313, v143);
            v145 = 0;
            v146 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v144)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v144));
            v147 = v142[1];
            v148 = (v147 >> 12) ^ (v146 >> 7);
            v149 = v142[4];
            while (1)
            {
              v150 = v148 & v149;
              v151 = *(_QWORD *)(v147 + v150);
              v152 = ((v151 ^ (0x101010101010101 * (v146 & 0x7F))) - 0x101010101010101) & ~(v151 ^ (0x101010101010101 * (v146 & 0x7F))) & 0x8080808080808080;
              if (v152)
                break;
LABEL_142:
              if ((v151 & (~v151 << 6) & 0x8080808080808080) != 0)
              {
                *(_QWORD *)(v142[2]
                          + 8
                          * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert(v142 + 1, v146)) = v144;
                goto LABEL_145;
              }
              v145 += 8;
              v148 = v145 + v150;
            }
            while (*(_QWORD *)(v142[2] + 8 * ((v150 + (__clz(__rbit64(v152)) >> 3)) & v149)) != v144)
            {
              v152 &= v152 - 1;
              if (!v152)
                goto LABEL_142;
            }
          }
        }
      }
LABEL_145:
      if ((v313 & 1) != 0)
      {
        operator delete(v314);
        v20 = v307;
        if ((v315 & 1) == 0)
        {
LABEL_147:
          if ((v316 & 1) != 0)
            goto LABEL_151;
          goto LABEL_10;
        }
      }
      else
      {
        v20 = v307;
        if ((v315 & 1) == 0)
          goto LABEL_147;
      }
      operator delete(*((void **)&v315 + 1));
      if ((v316 & 1) != 0)
LABEL_151:
        operator delete(*(void **)v317);
LABEL_10:
      v16 += 8;
      if (v16 == v20)
        goto LABEL_153;
    }
  }
  v19 = 0;
  v18 = 0;
LABEL_153:
  v153 = (uint64_t)(v19 - (_QWORD)v18) / 24;
  v154 = 126 - 2 * __clz(v153);
  if ((char *)v19 == v18)
    v155 = 0;
  else
    v155 = v154;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,false>((uint64_t)v18, v19, v155, 1);
  v284 = v18;
  if (v153 >= 2)
  {
    v300 = 0;
    v308 = (uint64_t *)((char *)this + 120);
    v156 = v153 - 1;
    v3 = (unint64_t)(v18 + 24);
    do
    {
      if (*(_DWORD *)(v3 - 16) == (*(_DWORD *)(v3 + 8) ^ 1))
      {
        v157 = *(_DWORD *)(v3 - 4);
        *(_QWORD *)v310 = *(_QWORD *)(v3 - 12);
        *(_DWORD *)&v310[8] = v157;
        v158 = *((_QWORD *)v8 + 5);
        if (*(uint64_t *)&v310[4] > *(_QWORD *)(v158 + 12 * *(int *)v310))
        {
          v159 = *(_DWORD *)(v3 - 4);
          *(_QWORD *)v310 = *(_QWORD *)(v3 - 12);
          *(_DWORD *)&v310[8] = v159;
          if (*(uint64_t *)&v310[4] <= -*(_QWORD *)(v158 + 12 * (*(_DWORD *)v310 ^ 1)))
          {
            v160 = *(_DWORD *)(v3 + 20);
            *(_QWORD *)v310 = *(_QWORD *)(v3 + 12);
            *(_DWORD *)&v310[8] = v160;
            if (*(uint64_t *)&v310[4] > *(_QWORD *)(v158 + 12 * *(int *)v310))
            {
              v161 = *(_DWORD *)(v3 + 20);
              *(_QWORD *)v310 = *(_QWORD *)(v3 + 12);
              *(_DWORD *)&v310[8] = v161;
              if (*(uint64_t *)&v310[4] <= -*(_QWORD *)(v158 + 12 * (*(_DWORD *)v310 ^ 1)))
              {
                v16 = v16 & 0xFFFFFFFF00000000 | *(unsigned int *)(v3 - 4);
                operations_research::sat::IntegerEncoder::Canonicalize((uint64_t)v305, *(const char **)(v3 - 12), v16, (uint64_t)v310);
                a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v3 + 20);
                operations_research::sat::IntegerEncoder::Canonicalize((uint64_t)v305, *(const char **)(v3 + 12), a2, (uint64_t)&v316);
                *(_QWORD *)&v315 = *(_QWORD *)&v317[4];
                DWORD2(v315) = v318;
                if (*(_DWORD *)v310 == *(_DWORD *)&v317[4] && *(_QWORD *)&v310[4] == *(_QWORD *)((char *)&v315 + 4))
                {
                  v306 = v306 & 0xFFFFFFFF00000000 | *(unsigned int *)(v3 - 4);
                  operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral((uint64_t)v305, (const char *)*(unsigned int *)(v3 - 16), *(const char **)(v3 - 12), *(_DWORD *)(v3 - 4));
                  v162 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(v308, (uint64_t *)(v3 - 24));
                  if (v163)
                    *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v162) = *(_QWORD *)(v3 - 24);
                  v164 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(v308, (uint64_t *)v3);
                  ++v300;
                  if (v165)
                    *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v164) = *(_QWORD *)v3;
                }
              }
            }
          }
        }
      }
      v3 += 24;
      --v156;
    }
    while (v156);
  }
  if ((char *)v19 != v18)
  {
    v166 = 0;
    v167 = (unsigned int *)v18;
    while (2)
    {
      v173 = v19;
      v174 = 0;
      v175 = *(_QWORD *)v167;
      v176 = v167[2];
      v177 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v167)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + *(_QWORD *)v167)))
           + *(_QWORD *)v167;
      v178 = ((v177 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v177);
      v179 = *((_QWORD *)this + 15);
      v180 = v178 >> 7;
      v181 = (v178 >> 7) ^ (v179 >> 12);
      v182 = *((_QWORD *)this + 18);
      v183 = 0x101010101010101 * (v178 & 0x7F);
      while (1)
      {
        v184 = v181 & v182;
        v185 = *(_QWORD *)(v179 + v184);
        v186 = ((v185 ^ v183) - 0x101010101010101) & ~(v185 ^ v183) & 0x8080808080808080;
        if (v186)
          break;
LABEL_182:
        if ((v185 & (~v185 << 6) & 0x8080808080808080) != 0)
          goto LABEL_185;
        v174 += 8;
        v181 = v174 + v184;
      }
      while (1)
      {
        v187 = (v184 + (__clz(__rbit64(v186)) >> 3)) & v182;
        if (*(_QWORD *)(*((_QWORD *)this + 16) + 8 * v187) == v175)
          break;
        v186 &= v186 - 1;
        if (!v186)
          goto LABEL_182;
      }
      if (v187 != v182)
      {
        v19 = v173;
        goto LABEL_189;
      }
LABEL_185:
      v3 = v3 & 0xFFFFFFFF00000000 | v167[5];
      AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v305, *(const char **)(v167 + 3), v3);
      v329 = &off_24F982CC0;
      v330 = v176 | (AssociatedLiteral << 32);
      v331 = &v329;
      v189 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v304);
      operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v189, v330 ^ 1, SHIDWORD(v330));
      v190 = v331;
      v19 = v173;
      if (v331 == &v329)
      {
        v190 = &v329;
        v191 = 4;
      }
      else
      {
        if (!v331)
          goto LABEL_193;
        v191 = 5;
      }
      (*v190)[v191]();
LABEL_193:
      if (*((_BYTE *)v301 + 496))
        goto LABEL_296;
      v192 = 0;
      ++v166;
      v193 = *((_QWORD *)this + 15);
      v194 = v180 ^ (v193 >> 12);
      v195 = *((_QWORD *)this + 18);
      while (1)
      {
        v196 = v194 & v195;
        v197 = *(_QWORD *)(v193 + v196);
        v198 = ((v197 ^ v183) - 0x101010101010101) & ~(v197 ^ v183) & 0x8080808080808080;
        if (v198)
          break;
LABEL_198:
        if ((v197 & (~v197 << 6) & 0x8080808080808080) != 0)
        {
          *(_QWORD *)(*((_QWORD *)this + 16)
                    + 8
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert((uint64_t *)this + 15, v178)) = v175;
          goto LABEL_201;
        }
        v192 += 8;
        v194 = v192 + v196;
      }
      while (*(_QWORD *)(*((_QWORD *)this + 16) + 8 * ((v196 + (__clz(__rbit64(v198)) >> 3)) & v195)) != v175)
      {
        v198 &= v198 - 1;
        if (!v198)
          goto LABEL_198;
      }
LABEL_201:
      v171 = 0;
      v199 = *((_QWORD *)this + 21);
      v172 = v180 ^ (v199 >> 12);
      v200 = *((_QWORD *)this + 24);
      while (1)
      {
        v168 = v172 & v200;
        v169 = *(_QWORD *)(v199 + v168);
        v170 = ((v169 ^ v183) - 0x101010101010101) & ~(v169 ^ v183) & 0x8080808080808080;
        if (v170)
          break;
LABEL_175:
        if ((v169 & (~v169 << 6) & 0x8080808080808080) != 0)
        {
          *(_QWORD *)(*((_QWORD *)this + 22)
                    + 8
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert((uint64_t *)this + 21, v178)) = v175;
          goto LABEL_189;
        }
        v171 += 8;
        v172 = v171 + v168;
      }
      while (*(_QWORD *)(*((_QWORD *)this + 22) + 8 * ((v168 + (__clz(__rbit64(v170)) >> 3)) & v200)) != v175)
      {
        v170 &= v170 - 1;
        if (!v170)
          goto LABEL_175;
      }
LABEL_189:
      v167 += 6;
      if (v167 != (unsigned int *)v19)
        continue;
      break;
    }
    if (*_MergedGlobals_6[0] >= 1
      && (_MergedGlobals_6[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_6, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v310, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 423);
      google::LogMessage::stream((google::LogMessage *)v310);
      v201 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)" literals associated to VAR >= value, and ", 42);
      v202 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)" half-associations.", 19);
      google::LogMessage::~LogMessage((google::LogMessage *)v310);
    }
  }
  v289 = v320;
  if (v321 != v320)
  {
    v203 = 0;
    v281 = 0;
    v309 = 0;
    v291 = 0;
    v204 = 0;
    v303 = (uint64_t *)((char *)this + 120);
    v205 = (v321 - v320) / 24;
    if (v205 <= 1)
      v205 = 1;
    v285 = v205;
    do
    {
      v206 = (uint64_t *)&v289[24 * v203];
      v207 = (_OWORD *)v206[1];
      v208 = 126 - 2 * __clz(((uint64_t)v207 - *v206) >> 5);
      if (v207 == (_OWORD *)*v206)
        v209 = 0;
      else
        v209 = v208;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,false>(*v206, v207, v209, 1);
      if (*v206 != v206[1])
      {
        v294 = v206[1];
        v296 = *v206;
        v298 = v204;
        *(_QWORD *)v310 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_OWORD *)&v310[8] = 0u;
        v311 = 0u;
        v312 = 0;
        v210 = *v206;
        v211 = v206[1];
        if ((unint64_t)(v211 - *v206) >= 0x21)
        {
          v212 = 0;
          v213 = 1;
          do
          {
            v220 = v210 + 32 * v212;
            v221 = *(_QWORD *)(v220 + 16);
            v222 = v210 + 32 * v213;
            if (v221 == *(_QWORD *)(v222 + 16))
            {
              v223 = *(unsigned int *)(v222 + 8);
              if (*(_DWORD *)(v220 + 8) == (v223 ^ 1)
                && *(_BYTE *)(v210 + 32 * v212 + 24)
                && !*(_BYTE *)(v210 + 32 * v213 + 24))
              {
                operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue((uint64_t)v305, (const char *)(v223 ^ 1), *(_DWORD *)(*(_QWORD *)this + 4 * v203), v221);
                v224 = (uint64_t *)(*v206 + 32 * v212);
                v225 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(v303, v224);
                if (v226)
                  *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v225) = *v224;
                v227 = (uint64_t *)(*v206 + 32 * v213);
                v228 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(v303, v227);
                if (v229)
                  *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v228) = *v227;
                v217 = 0;
                v210 = *v206;
                v230 = *v206 + 32 * v212;
                v233 = *(_QWORD *)(v230 + 16);
                v232 = (_QWORD *)(v230 + 16);
                v231 = v233;
                ++v291;
                v234 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v233)
                       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                           + v233));
                for (i = (v234 >> 7) ^ (*(_QWORD *)v310 >> 12); ; i = v217 + v214)
                {
                  v214 = i & v311;
                  v215 = *(_QWORD *)(*(_QWORD *)v310 + v214);
                  v216 = ((v215 ^ (0x101010101010101 * (v234 & 0x7F))) - 0x101010101010101) & ~(v215 ^ (0x101010101010101 * (v234 & 0x7F))) & 0x8080808080808080;
                  if (v216)
                    break;
LABEL_221:
                  if ((v215 & (~v215 << 6) & 0x8080808080808080) != 0)
                  {
                    v219 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v310, v234);
                    *(_QWORD *)(*(_QWORD *)&v310[8] + 8 * v219) = *v232;
                    v210 = *v206;
                    goto LABEL_228;
                  }
                  v217 += 8;
                }
                while (*(_QWORD *)(*(_QWORD *)&v310[8] + 8 * ((v214 + (__clz(__rbit64(v216)) >> 3)) & v311)) != v231)
                {
                  v216 &= v216 - 1;
                  if (!v216)
                    goto LABEL_221;
                }
              }
            }
LABEL_228:
            ++v212;
            ++v213;
            v211 = v206[1];
          }
          while (v213 < (v211 - v210) >> 5);
        }
        v292 = *((unsigned __int8 *)v301 + 496);
        if (*((_BYTE *)v301 + 496))
        {
          v235 = v298;
          v237 = v294;
          v236 = v296;
        }
        else
        {
          while (v210 != v211)
          {
            v243 = 0;
            v244 = *(_QWORD *)v210;
            v245 = *(unsigned int *)(v210 + 8);
            v246 = *(unsigned __int8 *)(v210 + 24);
            v247 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v210)
                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                       * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                        + *(_QWORD *)v210)))
                 + *(_QWORD *)v210;
            v248 = ((v247 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v247);
            v249 = *((_QWORD *)this + 15);
            v250 = v248 >> 7;
            v251 = (v248 >> 7) ^ (v249 >> 12);
            v252 = *((_QWORD *)this + 18);
            v253 = 0x101010101010101 * (v248 & 0x7F);
            while (1)
            {
              v254 = v251 & v252;
              v255 = *(_QWORD *)(v249 + v254);
              v256 = ((v255 ^ v253) - 0x101010101010101) & ~(v255 ^ v253) & 0x8080808080808080;
              if (v256)
                break;
LABEL_255:
              if ((v255 & (~v255 << 6) & 0x8080808080808080) != 0)
                goto LABEL_258;
              v243 += 8;
              v251 = v243 + v254;
            }
            while (1)
            {
              v257 = (v254 + (__clz(__rbit64(v256)) >> 3)) & v252;
              if (*(_QWORD *)(*((_QWORD *)this + 16) + 8 * v257) == v244)
                break;
              v256 &= v256 - 1;
              if (!v256)
                goto LABEL_255;
            }
            if (v257 == v252)
            {
LABEL_258:
              LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality((uint64_t)v305, *(_DWORD *)(*(_QWORD *)this + 4 * v203), *(_QWORD *)(v210 + 16));
              if (v246)
              {
                v326 = &off_24F982CC0;
                v327 = v245 | (LiteralAssociatedToEquality << 32);
                v328 = &v326;
                v259 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v304);
                operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v259, v327 ^ 1, SHIDWORD(v327));
                v260 = v328;
                if (v328 == &v326)
                {
                  v260 = &v326;
                  goto LABEL_265;
                }
LABEL_262:
                if (v260)
                {
                  v262 = 5;
                  goto LABEL_266;
                }
              }
              else
              {
                v323 = &off_24F982CC0;
                v324 = v245 | ((unint64_t)(LiteralAssociatedToEquality ^ 1) << 32);
                v325 = &v323;
                v261 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v304);
                operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v261, v324 ^ 1, SHIDWORD(v324));
                v260 = v325;
                if (v325 != &v323)
                  goto LABEL_262;
                v260 = &v323;
LABEL_265:
                v262 = 4;
LABEL_266:
                (*v260)[v262]();
              }
              v263 = 0;
              ++v309;
              v264 = *((_QWORD *)this + 15);
              v265 = v250 ^ (v264 >> 12);
              v266 = *((_QWORD *)this + 18);
              while (1)
              {
                v267 = v265 & v266;
                v268 = *(_QWORD *)(v264 + v267);
                v269 = ((v268 ^ v253) - 0x101010101010101) & ~(v268 ^ v253) & 0x8080808080808080;
                if (v269)
                  break;
LABEL_271:
                if ((v268 & (~v268 << 6) & 0x8080808080808080) != 0)
                {
                  *(_QWORD *)(*((_QWORD *)this + 16)
                            + 8
                            * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert(v303, v248)) = v244;
                  goto LABEL_274;
                }
                v263 += 8;
                v265 = v263 + v267;
              }
              while (*(_QWORD *)(*((_QWORD *)this + 16) + 8 * ((v267 + (__clz(__rbit64(v269)) >> 3)) & v266)) != v244)
              {
                v269 &= v269 - 1;
                if (!v269)
                  goto LABEL_271;
              }
LABEL_274:
              v241 = 0;
              v270 = *((_QWORD *)this + 21);
              v242 = v250 ^ (v270 >> 12);
              v271 = *((_QWORD *)this + 24);
              while (1)
              {
                v238 = v242 & v271;
                v239 = *(_QWORD *)(v270 + v238);
                v240 = ((v239 ^ v253) - 0x101010101010101) & ~(v239 ^ v253) & 0x8080808080808080;
                if (v240)
                  break;
LABEL_246:
                if ((v239 & (~v239 << 6) & 0x8080808080808080) != 0)
                {
                  *(_QWORD *)(*((_QWORD *)this + 22)
                            + 8
                            * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert((uint64_t *)this + 21, v248)) = v244;
                  goto LABEL_249;
                }
                v241 += 8;
                v242 = v241 + v238;
              }
              while (*(_QWORD *)(*((_QWORD *)this + 22) + 8 * ((v238 + (__clz(__rbit64(v240)) >> 3)) & v271)) != v244)
              {
                v240 &= v240 - 1;
                if (!v240)
                  goto LABEL_246;
              }
            }
LABEL_249:
            v210 += 32;
          }
          v235 = v298;
          v237 = v294;
          v236 = v296;
          if (*off_254079408[0] > 0
            && (off_254079408[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_254079408, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
          {
            if (operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v305, *(_DWORD *)(*(_QWORD *)this + 4 * v203)))
            {
              LODWORD(v281) = v281 + 1;
            }
            else
            {
              ++HIDWORD(v281);
            }
          }
        }
        if ((_QWORD)v311)
        {
          operator delete(*(void **)v310);
          *(_QWORD *)v310 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          v312 = 0;
          *(_QWORD *)&v310[16] = 0;
          *(_QWORD *)&v311 = 0;
          *(_QWORD *)&v310[8] = 0;
        }
        if (*((_QWORD *)&v311 + 1))
          absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v311 + 1));
        if (v292)
          goto LABEL_296;
        v204 = v235 + ((unint64_t)(v237 - v236) >> 5);
      }
      ++v203;
    }
    while (v203 != v285);
    if (v204 >= 1
      && *off_254079410[0] >= 1
      && (off_254079410[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079410, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v310, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 495);
      google::LogMessage::stream((google::LogMessage *)v310);
      v272 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272, (uint64_t)" literals associated to VAR == value, and ", 42);
      v273 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, (uint64_t)" half-associations.", 19);
      google::LogMessage::~LogMessage((google::LogMessage *)v310);
    }
    if ((int)v281 >= 1
      && *off_254079418[0] >= 1
      && (off_254079418[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079418, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v310, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 499);
      v274 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v310);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v274, (uint64_t)"num_fully_encoded_variables: ", 29);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v310);
    }
    if (SHIDWORD(v281) >= 1
      && *off_254079420[0] >= 1
      && (off_254079420[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079420, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v310, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 502);
      v275 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v310);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v275, (uint64_t)"num_partially_encoded_variables: ", 33);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v310);
    }
  }
LABEL_296:
  if (v284)
    operator delete(v284);
  v276 = v320;
  if (v320)
  {
    v277 = v321;
    if (v321 != v320)
    {
      v278 = v321;
      do
      {
        v280 = (void *)*((_QWORD *)v278 - 3);
        v278 -= 24;
        v279 = v280;
        if (v280)
        {
          *((_QWORD *)v277 - 2) = v279;
          operator delete(v279);
        }
        v277 = v278;
      }
      while (v278 != v276);
    }
    operator delete(v276);
  }
}

void sub_22DAA003C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *__p,uint64_t a34,char a35,void *a36,uint64_t a37,char a38,void *a39)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operations_research::sat::Model::MyNew<operations_research::sat::ImpliedBounds>(a1);
  v9 = *(_QWORD **)(a1 + 32);
  v10 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F984258;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void operations_research::sat::CpModelMapping::PropagateEncodingFromEquivalenceRelations(operations_research::sat::CpModelMapping *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::Model *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  signed int v30;
  uint64_t v31;
  char *v32;
  char **v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  const char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  operations_research::sat::CpModelMapping *v54;
  uint64_t v55;
  int v56;
  int v57;
  char **v58;
  operations_research::sat::SatSolver *v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  const char *v63[2];

  v60 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
  v59 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  v7 = *((_QWORD *)a2 + 7);
  if (v7)
    v8 = (uint64_t *)(v7 + 8);
  else
    v8 = 0;
  v9 = *((int *)a2 + 12);
  if (!(_DWORD)v9)
    return;
  v10 = 0;
  v11 = 0;
  v12 = &v62;
  v13 = &v8[v9];
  do
  {
    v14 = *v8;
    if (!*(_DWORD *)(*v8 + 16) && *(_DWORD *)(v14 + 60) == 12)
    {
      v15 = *(_QWORD *)(v14 + 48);
      if (*(_DWORD *)(v15 + 16) == 2 && *(_DWORD *)(v15 + 64) == 2)
      {
        v16 = *(uint64_t **)(v15 + 72);
        v17 = *v16;
        if (*v16 == v16[1])
        {
          v18 = *(int **)(v15 + 24);
          v19 = *v18;
          v20 = v18[1];
          v21 = ~v19 <= v19 ? v19 : ~v19;
          v22 = ~v20 <= v20 ? v20 : ~v20;
          v23 = *(uint64_t **)(v15 + 48);
          v25 = *v23;
          v24 = v23[1];
          v26 = v25 >= 0 ? v25 : -v25;
          v27 = v24 >= 0 ? v24 : -v24;
          v28 = !v25 || v24 == 0;
          if (!v28)
          {
            v54 = this;
            v55 = v11;
            v29 = *(_DWORD *)(*(_QWORD *)this + 4 * v22) ^ (v20 >> 31);
            v30 = *(_DWORD *)(*(_QWORD *)this + 4 * v21) ^ (v19 >> 31) ^ ((unint64_t)v25 >> 63);
            v56 = v30;
            v57 = v29 ^ ((unint64_t)v24 >> 63);
            v31 = v60[4];
            if (v30 >= (int)(-1431655765 * ((unint64_t)(v60[5] - v31) >> 3)))
            {
              *v12 = 0;
              v12[1] = 0;
              v33 = v12;
              v61 = (char *)v12;
            }
            else
            {
              *v12 = 0;
              v12[1] = 0;
              v61 = (char *)v12;
              std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(&v61, *(_QWORD **)(v31 + 24 * v30), (_QWORD *)(v31 + 24 * v30 + 8));
              v32 = v61;
              v33 = v12;
              if (v61 != (char *)v12)
              {
                do
                {
                  v34 = (const char *)*((unsigned int *)v32 + 9);
                  if ((v17 - *(_QWORD *)(v32 + 28) * v26) / v27
                     - ((v17 - *(_QWORD *)(v32 + 28) * v26) / v27 * v27 > v17 - *(_QWORD *)(v32 + 28) * v26) >= (uint64_t)0x8000000000000002)
                    v35 = ((v17 - *(_QWORD *)(v32 + 28) * v26) / v27 * v27 > v17 - *(_QWORD *)(v32 + 28) * v26)
                        - (v17 - *(_QWORD *)(v32 + 28) * v26) / v27;
                  else
                    v35 = 0x7FFFFFFFFFFFFFFFLL;
                  LODWORD(v63[0]) = v57 ^ 1;
                  *(const char **)((char *)v63 + 4) = (const char *)v35;
                  v3 = v3 & 0xFFFFFFFF00000000 | HIDWORD(v35);
                  operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral((uint64_t)v60, v34, v63[0], v3);
                  v36 = (char *)*((_QWORD *)v32 + 1);
                  if (v36)
                  {
                    do
                    {
                      v37 = v36;
                      v36 = *(char **)v36;
                    }
                    while (v36);
                  }
                  else
                  {
                    do
                    {
                      v37 = (char *)*((_QWORD *)v32 + 2);
                      v28 = *(_QWORD *)v37 == (_QWORD)v32;
                      v32 = v37;
                    }
                    while (!v28);
                  }
                  ++v10;
                  v32 = v37;
                }
                while (v37 != (char *)v12);
              }
            }
            std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v61, v62);
            v38 = v60[4];
            v58 = v33;
            if (v57 >= (int)(-1431655765 * ((unint64_t)(v60[5] - v38) >> 3)))
            {
              *v33 = 0;
              v33[1] = 0;
              v61 = (char *)v33;
            }
            else
            {
              *v33 = 0;
              v33[1] = 0;
              v61 = (char *)v33;
              std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(&v61, *(_QWORD **)(v38 + 24 * v57), (_QWORD *)(v38 + 24 * v57 + 8));
              v39 = v61;
              if (v61 != (char *)v33)
              {
                v11 = v55;
                do
                {
                  v40 = (const char *)*((unsigned int *)v39 + 9);
                  if ((v17 - *(_QWORD *)(v39 + 28) * v27) / v26
                     - ((v17 - *(_QWORD *)(v39 + 28) * v27) / v26 * v26 > v17 - *(_QWORD *)(v39 + 28) * v27) >= (uint64_t)0x8000000000000002)
                    v41 = ((v17 - *(_QWORD *)(v39 + 28) * v27) / v26 * v26 > v17 - *(_QWORD *)(v39 + 28) * v27)
                        - (v17 - *(_QWORD *)(v39 + 28) * v27) / v26;
                  else
                    v41 = 0x7FFFFFFFFFFFFFFFLL;
                  LODWORD(v63[0]) = v56 ^ 1;
                  *(const char **)((char *)v63 + 4) = (const char *)v41;
                  v3 = v3 & 0xFFFFFFFF00000000 | HIDWORD(v41);
                  operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral((uint64_t)v60, v40, v63[0], v3);
                  v42 = (char *)*((_QWORD *)v39 + 1);
                  if (v42)
                  {
                    do
                    {
                      v43 = v42;
                      v42 = *(char **)v42;
                    }
                    while (v42);
                  }
                  else
                  {
                    do
                    {
                      v43 = (char *)*((_QWORD *)v39 + 2);
                      v28 = *(_QWORD *)v43 == (_QWORD)v39;
                      v39 = v43;
                    }
                    while (!v28);
                  }
                  ++v10;
                  v39 = v43;
                }
                while (v43 != (char *)v58);
LABEL_58:
                std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v61, v62);
                operations_research::sat::IntegerEncoder::PartialDomainEncoding(v60, v56, &v61);
                v45 = v61;
                v44 = v62;
                if (v61 == v62)
                {
                  if (!v61)
                    goto LABEL_61;
                }
                else
                {
                  do
                  {
                    v48 = (const char *)*((unsigned int *)v45 + 2);
                    v49 = v17 - *(_QWORD *)v45 * v26;
                    if (v49 % v27)
                    {
                      operations_research::sat::SatSolver::AddUnitClause((uint64_t)v59, v48 ^ 1);
                      ++v11;
                    }
                    else
                    {
                      operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue((uint64_t)v60, v48, v57, v49 / v27);
                      ++v10;
                    }
                    v45 += 12;
                  }
                  while (v45 != v44);
                  v45 = v61;
                  if (!v61)
                  {
LABEL_61:
                    operations_research::sat::IntegerEncoder::PartialDomainEncoding(v60, v57, &v61);
                    v46 = v61;
                    v47 = v62;
                    if (v61 == v62)
                    {
                      v12 = v58;
                      if (!v61)
                        goto LABEL_6;
                    }
                    else
                    {
                      do
                      {
                        v50 = (const char *)*((unsigned int *)v46 + 2);
                        v51 = v17 - *(_QWORD *)v46 * v27;
                        if (v51 % v26)
                        {
                          operations_research::sat::SatSolver::AddUnitClause((uint64_t)v59, v50 ^ 1);
                          ++v11;
                        }
                        else
                        {
                          operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue((uint64_t)v60, v50, v56, v51 / v26);
                          ++v10;
                        }
                        v46 += 12;
                      }
                      while (v46 != v47);
                      v46 = v61;
                      v12 = v58;
                      if (!v61)
                        goto LABEL_6;
                    }
                    v62 = v46;
                    operator delete(v46);
LABEL_6:
                    this = v54;
                    goto LABEL_7;
                  }
                }
                v62 = v45;
                operator delete(v45);
                goto LABEL_61;
              }
            }
            v11 = v55;
            goto LABEL_58;
          }
        }
      }
    }
LABEL_7:
    ++v8;
  }
  while (v8 != v13);
  if (v10 > 0
    && *off_254079428[0] >= 1
    && (off_254079428[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079428, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v61, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 581);
    v52 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Num associations from equivalences = ", 37);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v61);
  }
  if (v11 >= 1
    && *off_254079430[0] >= 1
    && (off_254079430[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079430, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v61, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 584);
    v53 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Num literals set to false from equivalences = ", 46);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v61);
  }
}

void sub_22DAA097C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_22DAA0994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DAA09A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DAA09BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_22DAA09D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_22DAA09EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CpModelMapping::DetectOptionalVariables(operations_research::sat::CpModelMapping *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::Model *a3)
{
  operations_research::sat::SatParameters *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t **v27;
  int v28;
  uint64_t **v29;
  uint64_t ***v30;
  uint64_t **v31;
  int v32;
  _DWORD *v33;
  int *v34;
  int *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::vector<int> *v40;
  std::vector<int>::pointer begin;
  char *v42;
  _QWORD *v43;
  int *v44;
  int *v45;
  uint64_t *v46;
  int v47;
  std::vector<int>::pointer v48;
  int v49;
  uint64_t **v50;
  uint64_t *v51;
  _DWORD *v52;
  uint64_t **v53;
  int v54;
  unint64_t v55;
  int *v56;
  int *v57;
  char *v58;
  _QWORD *v59;
  int *v60;
  unint64_t v61;
  operations_research::sat::IntegerTrail *v62;
  uint64_t v63;
  int v64;
  int **v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int *v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  void *v82;
  char *v83;
  void *v84;
  void *v85;
  operations_research::sat::CpModelMapping *v86;
  const operations_research::sat::CpModelProto *v87;
  int *v88;
  int *v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t v92;
  void *__p;
  char *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;

  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  if (*((_BYTE *)v6 + 502) && !*((_BYTE *)v6 + 129))
  {
    v7 = *((int *)a2 + 6);
    v95 = 0;
    v96 = 0;
    v97 = 0;
    if ((_DWORD)v7)
    {
      if ((v7 & 0x80000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v8 = (v7 - 1) >> 6;
      v9 = operator new(8 * (v8 + 1));
      v10 = v9;
      v96 = v7;
      v97 = v8 + 1;
      v95 = v9;
      if (v7 >= 0x41)
        v11 = (v7 - 1) >> 6;
      else
        v11 = 0;
      v9[v11] = 0;
      if (v7 >= 0x40)
        bzero(v9, 8 * (v7 >> 6));
      if ((v7 & 0x3F) != 0)
        v10[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
    }
    else
    {
      v10 = 0;
    }
    v12 = *((_QWORD *)a2 + 15);
    v13 = a2 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
       || v12 == 0;
    if (!v13)
    {
      v14 = *(int *)(v12 + 16);
      if ((_DWORD)v14)
      {
        v15 = *(int **)(v12 + 24);
        v16 = 4 * v14;
        do
        {
          v18 = *v15++;
          v17 = v18;
          if (~v18 > v18)
            v17 = ~v17;
          *(_QWORD *)((char *)v10 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          v16 -= 4;
        }
        while (v16);
      }
    }
    v86 = this;
    std::vector<std::vector<int>>::vector(&__p, v7);
    v91 = 0;
    v92 = 0;
    v90 = &v91;
    if (*((int *)a2 + 12) >= 1)
    {
      v19 = 0;
      v87 = a2;
      while (1)
      {
        v20 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v19 + 8);
        if (!*(_DWORD *)(v20 + 16))
          break;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v90, v91);
        v91 = 0;
        v92 = 0;
        v90 = &v91;
        v21 = *(int *)(v20 + 16);
        if ((_DWORD)v21)
        {
          v22 = *(int **)(v20 + 24);
          v23 = &v22[v21];
          while (1)
          {
            v24 = v91;
            v25 = &v91;
            if (v90 != &v91)
            {
              v26 = v91;
              v27 = &v91;
              if (v91)
              {
                do
                {
                  v25 = (uint64_t **)v26;
                  v26 = (uint64_t *)v26[1];
                }
                while (v26);
              }
              else
              {
                do
                {
                  v25 = (uint64_t **)v27[2];
                  v13 = *v25 == (uint64_t *)v27;
                  v27 = v25;
                }
                while (v13);
              }
              v28 = *v22;
              if (*((_DWORD *)v25 + 7) >= *v22)
                break;
            }
            if (v91)
              v29 = v25;
            else
              v29 = &v91;
            v30 = &v90;
            if (v91)
            {
              v30 = (uint64_t ***)v25;
              v31 = v25 + 1;
            }
            else
            {
              v31 = &v91;
            }
            if (!v30[1])
              goto LABEL_52;
LABEL_30:
            if (++v22 == v23)
              goto LABEL_54;
          }
          v31 = &v91;
          v29 = &v91;
          if (v91)
          {
            while (1)
            {
              while (1)
              {
                v29 = (uint64_t **)v24;
                v32 = *((_DWORD *)v24 + 7);
                if (v28 >= v32)
                  break;
                v24 = *v29;
                v31 = v29;
                if (!*v29)
                  goto LABEL_52;
              }
              if (v32 >= v28)
                goto LABEL_30;
              v24 = v29[1];
              if (!v24)
              {
                v31 = v29 + 1;
                break;
              }
            }
          }
LABEL_52:
          v33 = operator new(0x20uLL);
          v33[7] = *v22;
          *(_QWORD *)v33 = 0;
          *((_QWORD *)v33 + 1) = 0;
          *((_QWORD *)v33 + 2) = v29;
          *v31 = (uint64_t *)v33;
          if (*v90)
          {
            v90 = (uint64_t **)*v90;
            v33 = *v31;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v91, (uint64_t *)v33);
          ++v92;
          goto LABEL_30;
        }
LABEL_54:
        operations_research::sat::UsedVariables((operations_research::sat *)v20, &v88);
        v35 = v88;
        v34 = v89;
        if (v88 != v89)
        {
          v36 = v95;
          do
          {
            v37 = *v35;
            v38 = v37 >> 6;
            v39 = 1 << v37;
            v40 = (std::vector<int> *)((char *)__p + 24 * (int)v37);
            if (((1 << v37) & v36[v37 >> 6]) != 0)
            {
              begin = v40->__begin_;
              v42 = (char *)__p + 24 * (int)v37;
              v45 = (int *)*((_QWORD *)v42 + 1);
              v43 = v42 + 8;
              v44 = v45;
              if (v40->__begin_ == v45 || (v46 = v91) == 0)
              {
                v47 = 0;
              }
              else
              {
                v47 = 0;
                v48 = v40->__begin_;
                do
                {
                  v49 = *v48;
                  v50 = &v91;
                  v51 = v46;
                  do
                  {
                    v52 = v51;
                    v53 = v50;
                    v54 = *((_DWORD *)v51 + 7);
                    if (v54 >= v49)
                      v50 = (uint64_t **)v51;
                    else
                      ++v51;
                    v51 = (uint64_t *)*v51;
                  }
                  while (v51);
                  if (v50 != &v91)
                  {
                    if (v54 < v49)
                      v52 = v53;
                    if (v49 >= v52[7])
                      begin[v47++] = v49;
                  }
                  ++v48;
                }
                while (v48 != v44);
              }
              v55 = v44 - begin;
              if (v47 <= v55)
              {
                if (v47 < v55)
                  *v43 = &begin[v47];
              }
              else
              {
                std::vector<int>::__append(v40, v47 - v55);
              }
            }
            else
            {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v40, *(char **)(v20 + 24), (char *)(*(_QWORD *)(v20 + 24) + 4 * *(int *)(v20 + 16)), *(int *)(v20 + 16));
            }
            v36[v38] |= v39;
            ++v35;
          }
          while (v35 != v34);
          a2 = v87;
          v35 = v88;
        }
        if (v35)
        {
          v89 = v35;
          v56 = v35;
LABEL_24:
          operator delete(v56);
        }
LABEL_25:
        if (++v19 >= *((int *)a2 + 12))
          goto LABEL_86;
      }
      operations_research::sat::UsedVariables(*(operations_research::sat **)(*((_QWORD *)a2 + 7) + 8 * v19 + 8), &v88);
      v56 = v88;
      v57 = v89;
      if (v88 != v89)
      {
        v58 = (char *)v95;
        v59 = __p;
        v60 = v88;
        do
        {
          v61 = *v60++;
          *(_QWORD *)&v58[(v61 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v61;
          v59[3 * (int)v61 + 1] = v59[3 * (int)v61];
        }
        while (v60 != v57);
      }
      if (!v56)
        goto LABEL_25;
      v89 = v56;
      goto LABEL_24;
    }
LABEL_86:
    v62 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
    if ((int)v7 >= 1)
    {
      v63 = 0;
      v64 = 0;
      v65 = (int **)((char *)__p + 8);
      v66 = *((_QWORD *)a2 + 4) + 8;
      do
      {
        v67 = *(_QWORD *)(v66 + 8 * v63);
        v68 = *(_QWORD **)(v67 + 24);
        v69 = v68[*(int *)(v67 + 16) - 1];
        if (*v68 != v69 && (*v68 || v69 != 1))
        {
          v71 = *(v65 - 1);
          if (v71 != *v65)
          {
            ++v64;
            v72 = *(int *)(*(_QWORD *)v86 + 4 * v63);
            v73 = *v71;
            if (~v73 <= v73)
              v74 = v73;
            else
              v74 = ~v73;
            HIDWORD(v75) = *(_DWORD *)(*((_QWORD *)v86 + 6) + 4 * v74);
            LODWORD(v75) = v73;
            v76 = (v75 >> 31) ^ 1;
            v77 = *((_QWORD *)v62 + 51);
            *(_DWORD *)(v77 + 4 * v72) = v76;
            *(_DWORD *)(v77 + 4 * (v72 ^ 1)) = v76;
          }
        }
        ++v63;
        v65 += 3;
      }
      while (v7 != v63);
    }
    if (*operations_research::sat::CpModelMapping::DetectOptionalVariables(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__ > 1
      && (operations_research::sat::CpModelMapping::DetectOptionalVariables(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::CpModelMapping::DetectOptionalVariables(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v88, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 660);
      v78 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Auto-detected ", 14);
      v79 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" optional variables.", 20);
      google::LogMessage::~LogMessage((google::LogMessage *)&v88);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v90, v91);
    v80 = (char *)__p;
    if (__p)
    {
      v81 = v94;
      v82 = __p;
      if (v94 != __p)
      {
        v83 = v94;
        do
        {
          v85 = (void *)*((_QWORD *)v83 - 3);
          v83 -= 24;
          v84 = v85;
          if (v85)
          {
            *((_QWORD *)v81 - 2) = v84;
            operator delete(v84);
          }
          v81 = v83;
        }
        while (v83 != v80);
        v82 = __p;
      }
      v94 = v80;
      operator delete(v82);
    }
    if (v95)
      operator delete(v95);
  }
}

void sub_22DAA1058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a16, a17);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a19);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

operations_research::sat::SatParameters *operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::SatParameters *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d)
    return (operations_research::sat::SatParameters *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::SatParameters *)operator new();
  operations_research::sat::SatParameters::SatParameters(v8, 0);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F983D58;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DAA1258(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C4095D8551FLL);
  _Unwind_Resume(a1);
}

void operations_research::sat::FullEncodingFixedPointComputer::ComputeFixedPoint(char **this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t i;
  int v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  __n128 v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char **v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  _QWORD *v47;
  void *p_p;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  signed int v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  int *v64;
  int *v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t (***v83)();
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t (***v90)();
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  char **v100;
  _BYTE v101[16];
  void *__p;
  void *v103;
  unsigned __int8 v104;
  uint64_t (**v105)();
  void *v106;
  unint64_t *v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned int *)*this + 12);
  v3 = *((unsigned int *)*this + 6);
  LOBYTE(v105) = 0;
  v100 = this + 15;
  std::vector<BOOL>::assign(this + 15, (int)v2, &v105);
  LOBYTE(v105) = 0;
  std::vector<BOOL>::assign(this + 18, (int)v2, &v105);
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      while (1)
      {
        v5 = operations_research::sat::FullEncodingFixedPointComputer::ProcessConstraint((operations_research::sat::FullEncodingFixedPointComputer *)this, i);
        v6 = this[15];
        v7 = i >> 6;
        v8 = 1 << i;
        if (v5)
          break;
        *(_QWORD *)&v6[8 * v7] &= ~v8;
        if (v2 == ++i)
          goto LABEL_6;
      }
      *(_QWORD *)&v6[8 * v7] |= v8;
    }
  }
LABEL_6:
  if ((int)v3 < 1)
    goto LABEL_68;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *(_DWORD *)(*(_QWORD *)this[3] + 4 * v9);
    if (v11 != -1
      && *(_QWORD *)(*((_QWORD *)this[5] + 5) + 12 * v11) + *(_QWORD *)(*((_QWORD *)this[5] + 5) + 12 * (v11 ^ 1))
      && !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)this[4], *(_DWORD *)(*(_QWORD *)this[3] + 4 * v9)))
    {
      v13 = *(_QWORD *)(*((_QWORD *)*this + 4) + 8 * v9 + 8);
      operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v13 + 24), *(int *)(v13 + 16), (unint64_t *)&v105, v12);
      v15 = operations_research::Domain::Size((operations_research::Domain *)&v105);
      if ((uint64_t)v15 < 3)
      {
LABEL_59:
        if ((v105 & 1) == 0)
          goto LABEL_8;
      }
      else
      {
        v16 = 0;
        v17 = this[3];
        v18 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v9)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v9));
        v19 = *((_QWORD *)v17 + 27);
        v97 = v18 >> 7;
        v20 = (v18 >> 7) ^ (v19 >> 12);
        v21 = *((_QWORD *)v17 + 30);
        v22 = 0x101010101010101 * (v18 & 0x7F);
        v99 = v10;
        while (1)
        {
          v23 = v20 & v21;
          v24 = *(_QWORD *)(v19 + v23);
          v25 = ((v24 ^ v22) - 0x101010101010101) & ~(v24 ^ v22) & 0x8080808080808080;
          if (v25)
            break;
LABEL_17:
          if ((v24 & (~v24 << 6) & 0x8080808080808080) != 0)
          {
            v26 = *((_QWORD *)v17 + 30);
            goto LABEL_20;
          }
          v16 += 8;
          v20 = v16 + v23;
        }
        while (1)
        {
          v26 = (v23 + (__clz(__rbit64(v25)) >> 3)) & v21;
          v14 = (_DWORD *)(*((_QWORD *)v17 + 28) + 56 * v26);
          if (v9 == *v14)
            break;
          v25 &= v25 - 1;
          if (!v25)
            goto LABEL_17;
        }
LABEL_20:
        v98 = v22;
        v27 = (char **)(v17 + 264);
        if (v26 != v21)
          v27 = (char **)(v14 + 2);
        v28 = v27[1];
        v29 = *v27;
        if (**v27 <= -2)
        {
          do
          {
            v30 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v29 = (_QWORD *)((char *)v29 + v30);
            v28 += 8 * v30;
          }
          while (*(char *)v29 < -1);
        }
        v31 = &v27[3][(_QWORD)*v27];
        if (v29 == (_QWORD *)v31)
        {
          v32 = 0;
        }
        else
        {
          v32 = 0;
          do
          {
            v33 = *(int *)v28;
            if (v33 > operations_research::Domain::Min((operations_research::Domain *)&v105, (const char *)v22)
              && v33 < operations_research::Domain::Max((operations_research::Domain *)&v105, (const char *)v22))
            {
              v32 += operations_research::Domain::Contains((operations_research::Domain *)&v105, v33);
            }
            v34 = *((char *)v29 + 1);
            v29 = (_QWORD *)((char *)v29 + 1);
            v28 += 8;
            if (v34 <= -2)
            {
              do
              {
                v35 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v29 = (_QWORD *)((char *)v29 + v35);
                v28 += 8 * v35;
              }
              while (*(char *)v29 < -1);
            }
          }
          while (v29 != (_QWORD *)v31);
        }
        v36 = 0;
        v37 = (unint64_t)this[21];
        v38 = v97 ^ (v37 >> 12);
        v39 = this[24];
        v10 = v99;
        while (1)
        {
          v40 = v38 & (unint64_t)v39;
          v41 = *(_QWORD *)(v37 + v40);
          v42 = ((v41 ^ v98) - 0x101010101010101) & ~(v41 ^ v98) & 0x8080808080808080;
          if (v42)
            break;
LABEL_38:
          if ((v41 & (~v41 << 6) & 0x8080808080808080) != 0)
            goto LABEL_41;
          v36 += 8;
          v38 = v36 + v40;
        }
        while (1)
        {
          v43 = (v40 + (__clz(__rbit64(v42)) >> 3)) & (unint64_t)v39;
          v44 = (uint64_t)&this[22][56 * v43];
          if (v9 == *(_DWORD *)v44)
            break;
          v42 &= v42 - 1;
          if (!v42)
            goto LABEL_38;
        }
        if ((char *)v43 == v39)
        {
LABEL_41:
          v45 = 0;
          v46 = v15 >> 1;
          if (v32 >= (uint64_t)(v15 >> 1))
            goto LABEL_46;
        }
        else
        {
          v45 = *(_QWORD *)(v44 + 24);
          v46 = v15 >> 1;
          if (v32 >= (uint64_t)(v15 >> 1))
            goto LABEL_46;
        }
        if ((uint64_t)v15 <= 15 && v45 >= v46)
        {
LABEL_46:
          if (*off_254079438[0] >= 3
            && (off_254079438[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_254079438, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)3)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v101, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 803);
            v47 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v101);
            google::protobuf::Message::ShortDebugString(*(google::protobuf::Message **)(*((_QWORD *)*this + 4) + 8 * v9 + 8), (uint64_t)&__p);
            if ((v104 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = __p;
            if ((v104 & 0x80u) == 0)
              v49 = v104;
            else
              v49 = (uint64_t)v103;
            v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)p_p, v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" is encoded with ", 17);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" unary constraints, and ", 24);
            v52 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" binary constraints on a domain of size ", 40);
            std::ostream::operator<<();
            if ((char)v104 < 0)
              operator delete(__p);
            google::LogMessage::~LogMessage((google::LogMessage *)v101);
          }
          operations_research::sat::FullEncodingFixedPointComputer::FullyEncode((operations_research::sat::FullEncodingFixedPointComputer *)this, v9);
          v10 = v99 + 1;
          goto LABEL_59;
        }
        if ((v105 & 1) == 0)
          goto LABEL_8;
      }
      operator delete(v106);
    }
LABEL_8:
    ++v9;
  }
  while (v9 != v3);
  if (v10 >= 1
    && *off_254079440[0] > 1
    && (off_254079440[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079440, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v105, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 813);
    google::LogMessage::stream((google::LogMessage *)&v105);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" variables fully encoded after model introspection.", 51);
    google::LogMessage::~LogMessage((google::LogMessage *)&v105);
  }
LABEL_68:
  v54 = this[12];
  if (this[13] != v54)
  {
    v55 = 0;
    v56 = 0;
    v57 = -1;
    do
    {
      if (*(_QWORD *)&v54[v55] != *(_QWORD *)&v54[v55 + 8])
      {
        v58 = v57 <= (int)v56 ? v56 : v57;
        v59 = *(_DWORD *)(*(_QWORD *)this[3] + 4 * v58);
        if (!(*(_QWORD *)(*((_QWORD *)this[5] + 5) + 12 * v59)
             + *(_QWORD *)(*((_QWORD *)this[5] + 5) + 12 * (v59 ^ 1)))
          || operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)this[4], v59))
        {
          operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue((operations_research::sat::FullEncodingFixedPointComputer *)this, v56);
        }
      }
      ++v56;
      v54 = this[12];
      v55 += 24;
      --v57;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((this[13] - v54) >> 3) > v56);
  }
  v60 = this[9];
  v61 = this[10];
  if (v60 != v61)
  {
    while (1)
    {
      v62 = *((_DWORD *)v61 - 1);
      v61 -= 4;
      this[10] = v61;
      v63 = (uint64_t)&this[12][24 * v62];
      v65 = *(int **)v63;
      v64 = *(int **)(v63 + 8);
      if (*(int **)v63 != v64)
        break;
LABEL_82:
      if (v60 == v61)
        return;
    }
    v66 = *v100;
    while (2)
    {
      v69 = *v65;
      v70 = v69 >> 6;
      v71 = 1 << v69;
      if (((1 << v69) & *(_QWORD *)&v66[8 * (v69 >> 6)]) != 0)
        goto LABEL_89;
      v72 = *(_QWORD *)(*((_QWORD *)*this + 7) + 8 * v69 + 8);
      v73 = *v65;
      switch(*(_DWORD *)(v72 + 60))
      {
        case 0xC:
          operations_research::sat::FullEncodingFixedPointComputer::ProcessLinear((uint64_t)this, v73);
          goto LABEL_86;
        case 0xE:
          v74 = operations_research::sat::FullEncodingFixedPointComputer::ProcessElement((operations_research::sat::FullEncodingFixedPointComputer *)this, v73);
          v66 = this[15];
          v67 = (uint64_t *)&v66[8 * v70];
          if (v74)
            goto LABEL_87;
          v68 = *v67 & ~v71;
          goto LABEL_88;
        case 0x10:
          v75 = *(_QWORD *)(v72 + 48);
          if (*(_BYTE *)(v75 + 60))
            goto LABEL_86;
          v76 = *(int *)(v75 + 16);
          if (!(_DWORD)v76)
            goto LABEL_86;
          v77 = *(int **)(v75 + 24);
          v78 = 4 * v76;
          while (1)
          {
            if (~*v77 <= *v77)
              v92 = *v77;
            else
              v92 = ~*v77;
            if (~v92 <= v92)
              v93 = v92;
            else
              v93 = ~v92;
            if (v92 == -1)
              goto LABEL_121;
            v94 = *(_DWORD *)(*(_QWORD *)this[3] + 4 * v93) ^ (v92 >> 31);
            if (*(_QWORD *)(*((_QWORD *)this[5] + 5) + 12 * v94)
               + *(_QWORD *)(*((_QWORD *)this[5] + 5) + 12 * (v94 ^ 1)))
            {
              v95 = (uint64_t)this[2];
              v105 = &off_24F980458;
              LODWORD(v106) = v94;
              v107 = (unint64_t *)&v105;
              v96 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v95);
              if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v96, (signed int)v106))
                operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v96, (signed int)v106);
              operations_research::sat::IntegerEncoder::FullDomainEncoding(v96, (signed int)v106, (char **)&__p);
              if (__p)
              {
                v103 = __p;
                operator delete(__p);
              }
              v90 = (uint64_t (***)())v107;
              if (v107 == (unint64_t *)&v105)
              {
                v90 = &v105;
                v91 = 4;
              }
              else
              {
                if (!v107)
                  goto LABEL_120;
                v91 = 5;
              }
              (*v90)[v91]();
            }
LABEL_120:
            operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue((operations_research::sat::FullEncodingFixedPointComputer *)this, v92);
LABEL_121:
            ++v77;
            v78 -= 4;
            if (!v78)
              goto LABEL_86;
          }
        case 0x11:
          v79 = *(_QWORD *)(v72 + 48);
          v80 = *(int *)(v79 + 112);
          if (!(_DWORD)v80)
            goto LABEL_86;
          v81 = *(int **)(v79 + 120);
          v82 = 4 * v80;
          break;
        default:
          goto LABEL_86;
      }
LABEL_103:
      if (~*v81 <= *v81)
        v85 = *v81;
      else
        v85 = ~*v81;
      if (~v85 <= v85)
        v86 = v85;
      else
        v86 = ~v85;
      if (v85 != -1)
      {
        v87 = *(_DWORD *)(*(_QWORD *)this[3] + 4 * v86) ^ (v85 >> 31);
        if (*(_QWORD *)(*((_QWORD *)this[5] + 5) + 12 * v87)
           + *(_QWORD *)(*((_QWORD *)this[5] + 5) + 12 * (v87 ^ 1)))
        {
          v88 = (uint64_t)this[2];
          v105 = &off_24F980458;
          LODWORD(v106) = v87;
          v107 = (unint64_t *)&v105;
          v89 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v88);
          if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v89, (signed int)v106))
            operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v89, (signed int)v106);
          operations_research::sat::IntegerEncoder::FullDomainEncoding(v89, (signed int)v106, (char **)&__p);
          if (__p)
          {
            v103 = __p;
            operator delete(__p);
          }
          v83 = (uint64_t (***)())v107;
          if (v107 == (unint64_t *)&v105)
          {
            v83 = &v105;
            v84 = 4;
            goto LABEL_100;
          }
          if (v107)
          {
            v84 = 5;
LABEL_100:
            (*v83)[v84]();
          }
        }
        operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue((operations_research::sat::FullEncodingFixedPointComputer *)this, v85);
      }
      ++v81;
      v82 -= 4;
      if (!v82)
      {
LABEL_86:
        v66 = *v100;
        v67 = (uint64_t *)&(*v100)[8 * v70];
LABEL_87:
        v68 = *v67 | v71;
LABEL_88:
        *v67 = v68;
LABEL_89:
        if (++v65 == v64)
        {
          v60 = this[9];
          v61 = this[10];
          goto LABEL_82;
        }
        continue;
      }
      goto LABEL_103;
    }
  }
}

void sub_22DAA1C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *__p,uint64_t a25,uint64_t a26)
{
  if ((a23 & 1) != 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DAA1D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  if (a23 == &a20)
    JUMPOUT(0x22DAA1D3CLL);
  JUMPOUT(0x22DAA1D00);
}

uint64_t operations_research::sat::FullEncodingFixedPointComputer::ProcessConstraint(operations_research::sat::FullEncodingFixedPointComputer *a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 8 * a2 + 8);
  switch(*(_DWORD *)(v2 + 60))
  {
    case 0xC:
      operations_research::sat::FullEncodingFixedPointComputer::ProcessLinear((uint64_t)a1, a2);
      return 1;
    case 0xE:
      return operations_research::sat::FullEncodingFixedPointComputer::ProcessElement(a1, a2);
    case 0x10:
      v5 = *(_QWORD *)(v2 + 48);
      if (!*(_BYTE *)(v5 + 60))
      {
        v11 = *(int *)(v5 + 16);
        if ((_DWORD)v11)
        {
          v12 = *(int **)(v5 + 24);
          v13 = 4 * v11;
          do
          {
            v14 = *v12++;
            operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(a1, v14);
            v13 -= 4;
          }
          while (v13);
        }
      }
      return 1;
    case 0x11:
      v6 = *(_QWORD *)(v2 + 48);
      v7 = *(int *)(v6 + 112);
      if ((_DWORD)v7)
      {
        v8 = *(int **)(v6 + 120);
        v9 = 4 * v7;
        do
        {
          v10 = *v8++;
          operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(a1, v10);
          v9 -= 4;
        }
        while (v9);
      }
      return 1;
    default:
      return 1;
  }
}

void operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(operations_research::sat::FullEncodingFixedPointComputer *this, int a2)
{
  int v2;
  int v3;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t (***v8)();
  uint64_t v9;
  void *__p[3];
  uint64_t (**v11)();
  signed int v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (~a2 <= a2)
    v2 = a2;
  else
    v2 = ~a2;
  if (~v2 <= v2)
    v3 = v2;
  else
    v3 = ~v2;
  if (v2 != -1)
  {
    v5 = *(_DWORD *)(**((_QWORD **)this + 3) + 4 * v3) ^ (v2 >> 31);
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 12 * v5)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 12 * (v5 ^ 1)))
    {
      v6 = *((_QWORD *)this + 2);
      v11 = &off_24F980458;
      v12 = v5;
      v13 = &v11;
      v7 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v6);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v7, v12))
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v7, v12);
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v7, v12, (char **)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v8 = v13;
      if (v13 == &v11)
      {
        v9 = 4;
        v8 = &v11;
        goto LABEL_17;
      }
      if (v13)
      {
        v9 = 5;
LABEL_17:
        (*v8)[v9]();
      }
    }
    operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue(this, v2);
  }
}

void sub_22DAA1FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (a15 == v15)
  {
    (*(void (**)(void))(a12 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a15)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*(_QWORD *)a15 + 40))();
  _Unwind_Resume(exception_object);
}

void operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue(operations_research::sat::FullEncodingFixedPointComputer *this, int a2)
{
  int v3;
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  int *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  _OWORD *v31;
  int *v32;
  uint64_t v33;
  __int128 v34;
  int v35;

  if (~a2 <= a2)
    v3 = a2;
  else
    v3 = ~a2;
  v4 = (_QWORD *)((char *)this + 48);
  if (*((_QWORD *)this + 7) <= (unint64_t)v3)
  {
    v5 = v3 + 1;
    v8 = *((_QWORD *)this + 12);
    v7 = *((_QWORD *)this + 13);
    v6 = (char *)this + 96;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3);
    if (v5 <= v9)
    {
      if (v5 < v9)
      {
        v10 = v8 + 24 * (int)v5;
        if (v7 != v10)
        {
          v11 = *((_QWORD *)this + 13);
          do
          {
            v13 = *(void **)(v11 - 24);
            v11 -= 24;
            v12 = v13;
            if (v13)
            {
              *(_QWORD *)(v7 - 16) = v12;
              operator delete(v12);
            }
            v7 = v11;
          }
          while (v11 != v10);
        }
        *((_QWORD *)this + 13) = v10;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v6, v5 - v9);
    }
    std::vector<BOOL>::resize((uint64_t)v4, v3 + 1, 0);
  }
  v14 = *(_QWORD *)(*v4 + 8 * ((unint64_t)v3 >> 6));
  if ((v14 & (1 << v3)) == 0)
  {
    *(_QWORD *)(*v4 + 8 * ((unint64_t)v3 >> 6)) = v14 | (1 << v3);
    v16 = (int *)*((_QWORD *)this + 10);
    v15 = *((_QWORD *)this + 11);
    if ((unint64_t)v16 < v15)
    {
      *v16 = v3;
      v17 = (uint64_t)(v16 + 1);
LABEL_37:
      *((_QWORD *)this + 10) = v17;
      return;
    }
    v18 = (int *)*((_QWORD *)this + 9);
    v19 = v16 - v18;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = v15 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(4 * v22);
      v24 = (int *)&v23[4 * v19];
      v25 = &v23[4 * v22];
      *v24 = v3;
      v17 = (uint64_t)(v24 + 1);
      v26 = (char *)v16 - (char *)v18;
      if (v16 == v18)
        goto LABEL_35;
    }
    else
    {
      v23 = 0;
      v24 = (int *)(4 * v19);
      v25 = 0;
      *(_DWORD *)(4 * v19) = v3;
      v17 = 4 * v19 + 4;
      v26 = (char *)v16 - (char *)v18;
      if (v16 == v18)
      {
LABEL_35:
        *((_QWORD *)this + 9) = v24;
        *((_QWORD *)this + 10) = v17;
        *((_QWORD *)this + 11) = v25;
        if (v18)
          operator delete(v18);
        goto LABEL_37;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_42;
    if ((unint64_t)((char *)v18 - v23) < 0x20)
      goto LABEL_42;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v16[v29 / 0xFFFFFFFFFFFFFFFCLL];
    v24 = (int *)((char *)v24 - v29);
    v31 = &v23[4 * v19 - 16];
    v32 = v16 - 4;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 8;
      v33 -= 8;
    }
    while (v33);
    v16 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_42:
      do
      {
        v35 = *--v16;
        *--v24 = v35;
      }
      while (v16 != v18);
    }
    goto LABEL_35;
  }
}

uint64_t operations_research::sat::FullEncodingFixedPointComputer::ProcessElement(operations_research::sat::FullEncodingFixedPointComputer *this, int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  signed int v8;
  _BOOL4 IsFullyEncoded;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  signed int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  signed int v25;
  int *v27;
  uint64_t v28;
  int v29;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) + 8 * a2 + 8);
  if (*(_DWORD *)(v4 + 60) == 14)
  {
    operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(this, *(_DWORD *)(*(_QWORD *)(v4 + 48) + 36));
    v5 = *(_DWORD *)(v4 + 60);
    if (v5 != 14)
      goto LABEL_3;
LABEL_6:
    v6 = *(_DWORD *)(*(_QWORD *)(v4 + 48) + 40);
    if (v6 == -1)
      goto LABEL_14;
    goto LABEL_7;
  }
  operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(this, dword_25408ADF4);
  v5 = *(_DWORD *)(v4 + 60);
  if (v5 == 14)
    goto LABEL_6;
LABEL_3:
  v6 = dword_25408ADF8;
  if (dword_25408ADF8 == -1)
    goto LABEL_14;
LABEL_7:
  if (~v6 <= v6)
    v7 = v6;
  else
    v7 = ~v6;
  v8 = *(_DWORD *)(**((_QWORD **)this + 3) + 4 * v7) ^ (v6 >> 31);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 12 * v8)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 12 * (v8 ^ 1))))
    return 1;
  IsFullyEncoded = operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*((_QWORD *)this + 4), v8);
  v5 = *(_DWORD *)(v4 + 60);
  if (!IsFullyEncoded)
  {
LABEL_14:
    if (v5 == 14)
      goto LABEL_15;
    goto LABEL_21;
  }
  if (v5 == 14)
  {
    v10 = *(uint64_t **)(v4 + 48);
    v11 = *((int *)v10 + 4);
    if (!(_DWORD)v11)
      goto LABEL_14;
  }
  else
  {
    v10 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    v11 = (int)qword_25408ADE0;
    if (!(_DWORD)qword_25408ADE0)
      goto LABEL_14;
  }
  v14 = (int *)v10[3];
  v15 = 4 * v11;
  do
  {
    v16 = *v14++;
    operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(this, v16);
    v15 -= 4;
  }
  while (v15);
  if (*(_DWORD *)(v4 + 60) == 14)
  {
LABEL_15:
    v12 = *(uint64_t **)(v4 + 48);
    v13 = *((int *)v12 + 4);
    if (!(_DWORD)v13)
      goto LABEL_35;
    goto LABEL_22;
  }
LABEL_21:
  v12 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  v13 = (int)qword_25408ADE0;
  if (!(_DWORD)qword_25408ADE0)
  {
LABEL_35:
    if (v6 == -1
      || (~v6 <= v6 ? (v24 = v6) : (v24 = ~v6),
          (v25 = *(_DWORD *)(**((_QWORD **)this + 3) + 4 * v24) ^ (v6 >> 31),
           *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 12 * v25)
         + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 12 * (v25 ^ 1)))
       && !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*((_QWORD *)this + 4), v25)))
    {
      operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(this, v6);
    }
    return 1;
  }
LABEL_22:
  v17 = (int *)v12[3];
  v18 = 4 * v13;
  while (1)
  {
    v19 = *v17;
    if (*v17 != v6)
    {
      if (v19 == -1)
        break;
      v20 = ~v19 <= v19 ? *v17 : ~v19;
      v21 = *(_DWORD *)(**((_QWORD **)this + 3) + 4 * v20) ^ (v19 >> 31);
      if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 12 * v21)
         + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 12 * (v21 ^ 1)))
      {
        if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*((_QWORD *)this + 4), v21))
          break;
      }
    }
    ++v17;
    v18 -= 4;
    if (!v18)
      goto LABEL_35;
  }
  if (((*(_QWORD *)(*((_QWORD *)this + 18) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    return 0;
  if (*(_DWORD *)(v4 + 60) == 14)
  {
    v22 = *(uint64_t **)(v4 + 48);
    v23 = *((int *)v22 + 4);
    if (!(_DWORD)v23)
      goto LABEL_46;
LABEL_44:
    v27 = (int *)v22[3];
    v28 = 4 * v23;
    do
    {
      v29 = *v27++;
      operations_research::sat::FullEncodingFixedPointComputer::Register((uint64_t)this, a2, v29);
      v28 -= 4;
    }
    while (v28);
    goto LABEL_46;
  }
  v22 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  v23 = (int)qword_25408ADE0;
  if ((_DWORD)qword_25408ADE0)
    goto LABEL_44;
LABEL_46:
  operations_research::sat::FullEncodingFixedPointComputer::Register((uint64_t)this, a2, v6);
  return 0;
}

uint64_t operations_research::sat::FullEncodingFixedPointComputer::ProcessLinear(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  signed int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  signed int v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v34;
  int v35;
  char v36[8];
  uint64_t *v37;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 420))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 8 * a2 + 8);
    v4 = *(_DWORD *)(v3 + 60);
    if (v4 == 12)
    {
      v5 = *(uint64_t **)(v3 + 48);
      if (*((_DWORD *)v5 + 4) != 2)
        return 1;
    }
    else
    {
      v5 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if ((_DWORD)qword_25408AC60 != 2)
        return 1;
    }
    if (*((_DWORD *)v5 + 16) != 2 || *(_QWORD *)v5[9] != *(_QWORD *)(v5[9] + 8))
    {
      if (v4 == 12)
      {
      }
      {
        return 1;
      }
      v4 = *(_DWORD *)(v3 + 60);
    }
    if (v4 == 12)
      v6 = *(uint64_t **)(v3 + 48);
    else
      v6 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    v7 = (int *)v6[3];
    v8 = *v7;
    v9 = v7[1];
    v34 = v9;
    v35 = v8;
    if (v8 == -1
      || (~v8 <= v8 ? (v10 = v8) : (v10 = ~v8),
          (v11 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 4 * v10) ^ (v8 >> 31),
           *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 12 * v11)
         + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 12 * (v11 ^ 1)))
       && !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*(_QWORD *)(a1 + 32), v11)))
    {
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<int const&>((uint64_t *)(a1 + 168), &v35, (uint64_t)v36);
      v12 = 0;
      v13 = v37;
      v14 = v37[1];
      v15 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v9)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v9));
      v16 = (v15 >> 7) ^ (v14 >> 12);
      v17 = v37[4];
      while (1)
      {
        v18 = v16 & v17;
        v19 = *(_QWORD *)(v14 + v18);
        v20 = ((v19 ^ (0x101010101010101 * (v15 & 0x7F))) - 0x101010101010101) & ~(v19 ^ (0x101010101010101
                                                                                            * (v15 & 0x7F))) & 0x8080808080808080;
        if (v20)
          break;
LABEL_26:
        if ((v19 & (~v19 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v13[2]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v37 + 1, v15)) = v9;
          goto LABEL_29;
        }
        v12 += 8;
        v16 = v12 + v18;
      }
      while (*(_DWORD *)(v37[2] + 4 * ((v18 + (__clz(__rbit64(v20)) >> 3)) & v17)) != v9)
      {
        v20 &= v20 - 1;
        if (!v20)
          goto LABEL_26;
      }
    }
LABEL_29:
    if (v9 == -1
      || (~v9 <= v9 ? (v21 = v9) : (v21 = ~v9),
          (v22 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 4 * v21) ^ (v9 >> 31),
           *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 12 * v22)
         + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 12 * (v22 ^ 1)))
       && !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*(_QWORD *)(a1 + 32), v22)))
    {
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<int const&>((uint64_t *)(a1 + 168), &v34, (uint64_t)v36);
      v23 = 0;
      v24 = v37;
      v25 = v37[1];
      v26 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v35)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v35));
      v27 = (v26 >> 7) ^ (v25 >> 12);
      v28 = v37[4];
      while (1)
      {
        v29 = v27 & v28;
        v30 = *(_QWORD *)(v25 + v29);
        v31 = ((v30 ^ (0x101010101010101 * (v26 & 0x7F))) - 0x101010101010101) & ~(v30 ^ (0x101010101010101
                                                                                            * (v26 & 0x7F))) & 0x8080808080808080;
        if (v31)
          break;
LABEL_39:
        if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
        {
          v32 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v37 + 1, v26);
          *(_DWORD *)(v24[2] + 4 * v32) = v35;
          return 1;
        }
        v23 += 8;
        v27 = v23 + v29;
      }
      while (*(_DWORD *)(v37[2] + 4 * ((v29 + (__clz(__rbit64(v31)) >> 3)) & v28)) != v35)
      {
        v31 &= v31 - 1;
        if (!v31)
          goto LABEL_39;
      }
    }
  }
  return 1;
}

void operations_research::sat::FullEncodingFixedPointComputer::Register(uint64_t a1, int a2, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _DWORD *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;

  if (~a3 <= a3)
    v5 = a3;
  else
    v5 = ~a3;
  v8 = *(_QWORD *)(a1 + 96);
  v6 = a1 + 96;
  v7 = v8;
  *(_QWORD *)(*(_QWORD *)(v6 + 48) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v9 = *(_QWORD *)(v6 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3);
  v11 = v5;
  if (v10 <= v5)
  {
    v12 = v5 + 1;
    if (v12 <= v10)
    {
      if (v12 < v10)
      {
        v13 = v7 + 24 * (int)v12;
        if (v9 != v13)
        {
          v14 = *(_QWORD *)(v6 + 8);
          do
          {
            v16 = *(void **)(v14 - 24);
            v14 -= 24;
            v15 = v16;
            if (v16)
            {
              *(_QWORD *)(v9 - 16) = v15;
              operator delete(v15);
            }
            v9 = v14;
          }
          while (v14 != v13);
        }
        *(_QWORD *)(a1 + 104) = v13;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v6, v12 - v10);
    }
    std::vector<BOOL>::resize(a1 + 48, v11 + 1, 0);
    v7 = *(_QWORD *)(a1 + 96);
  }
  v17 = v7 + 24 * v11;
  v18 = (uint64_t *)(v17 + 8);
  v19 = *(char **)(v17 + 8);
  v20 = *(_QWORD *)(v17 + 16);
  if ((unint64_t)v19 < v20)
  {
    *(_DWORD *)v19 = a2;
    v21 = (uint64_t)(v19 + 4);
    goto LABEL_36;
  }
  v22 = *(char **)v17;
  v23 = (uint64_t)&v19[-*(_QWORD *)v17];
  v24 = v23 >> 2;
  v25 = (v23 >> 2) + 1;
  if (v25 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v26 = v20 - (_QWORD)v22;
  if (v26 >> 1 > v25)
    v25 = v26 >> 1;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
    v27 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
  {
    if (v27 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v28 = operator new(4 * v27);
    v29 = &v28[4 * v24];
    v30 = &v28[4 * v27];
    *v29 = a2;
    v21 = (uint64_t)(v29 + 1);
    v31 = v19 - v22;
    if (v19 == v22)
      goto LABEL_34;
    goto LABEL_28;
  }
  v28 = 0;
  v29 = (_DWORD *)(4 * v24);
  v30 = 0;
  *(_DWORD *)(4 * v24) = a2;
  v21 = 4 * v24 + 4;
  v31 = v19 - v22;
  if (v19 != v22)
  {
LABEL_28:
    v32 = v31 - 4;
    if (v32 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v19 - v28 - v23) < 0x20)
      goto LABEL_41;
    v33 = (v32 >> 2) + 1;
    v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    v35 = &v19[-v34];
    v29 = (_DWORD *)((char *)v29 - v34);
    v36 = &v28[4 * v24 - 16];
    v37 = v19 - 16;
    v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    v19 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v40 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--v29 = v40;
      }
      while (v19 != v22);
    }
  }
LABEL_34:
  *(_QWORD *)v17 = v29;
  *v18 = v21;
  *(_QWORD *)(v17 + 16) = v30;
  if (v22)
    operator delete(v22);
LABEL_36:
  *v18 = v21;
}

BOOL operations_research::sat::`anonymous namespace'::ConstraintIsNEq(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  const char *v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v29[3];
  unint64_t v30[3];
  void *v31[3];
  unint64_t v32[3];

  v6 = *(unsigned int *)(a1 + 16);
  if ((int)v6 < 1)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = *(uint64_t **)(a1 + 48);
    v12 = *(_DWORD **)(a1 + 24);
    v13 = *a2;
    v14 = *(_QWORD *)(a3 + 40);
    do
    {
      v16 = *v11++;
      v15 = v16;
      LODWORD(v16) = *v12++;
      v17 = v16;
      if (~(_DWORD)v16 <= (int)v16)
        v18 = v17;
      else
        v18 = ~v17;
      v19 = *(_DWORD *)(v13 + 4 * v18) ^ (v17 >> 31);
      v20 = *(_QWORD *)(v14 + 12 * v19);
      v21 = *(_QWORD *)(v14 + 12 * (v19 ^ 1));
      if (v15 < 0)
        v22 = -v21;
      else
        v22 = v20;
      if (v15 >= 0)
        v20 = -v21;
      v9 += v22 * v15;
      v10 += v15 * v20;
      --v6;
    }
    while (v6);
  }
  operations_research::Domain::Domain(v31, v9, v10);
  operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(a1 + 72), *(int *)(a1 + 64), v29, v23);
  operations_research::Domain::Complement((operations_research::Domain *)v29, v30);
  operations_research::Domain::IntersectionWith(v31, (const operations_research::Domain *)v30, v32);
  if ((v30[0] & 1) != 0)
  {
    operator delete((void *)v30[1]);
    if ((v29[0] & 1) == 0)
    {
LABEL_16:
      if (((uint64_t)v31[0] & 1) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  else if ((v29[0] & 1) == 0)
  {
    goto LABEL_16;
  }
  operator delete((void *)v29[1]);
  if (((uint64_t)v31[0] & 1) != 0)
LABEL_17:
    operator delete(v31[1]);
LABEL_18:
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)v32))
  {
    v25 = 0;
  }
  else
  {
    v26 = operations_research::Domain::Min((operations_research::Domain *)v32, v24);
    v27 = operations_research::Domain::Size((operations_research::Domain *)v32);
    v25 = v27 == 1;
    if (a4 && v27 == 1)
    {
      *a4 = v26;
      v25 = 1;
    }
  }
  if ((v32[0] & 1) != 0)
    operator delete((void *)v32[1]);
  return v25;
}

void sub_22DAA2C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, char a12, void *__p, uint64_t a14, char a15, void *a16)
{
  uint64_t v16;

  if ((*(_BYTE *)(v16 - 56) & 1) != 0)
    operator delete(*(void **)(v16 - 48));
  _Unwind_Resume(exception_object);
}

void operations_research::sat::MaybeFullyEncodeMoreVariables(operations_research::sat *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::Model *a3)
{
  char *v4[6];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v4[0] = (char *)this;
  v4[1] = (char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  v4[2] = (char *)a2;
  v4[3] = (char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v4[4] = (char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  v4[5] = (char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v13 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  operations_research::sat::FullEncodingFixedPointComputer::ComputeFixedPoint(v4);
  operations_research::sat::FullEncodingFixedPointComputer::~FullEncodingFixedPointComputer((operations_research::sat::FullEncodingFixedPointComputer *)v4);
}

void sub_22DAA2DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::FullEncodingFixedPointComputer::~FullEncodingFixedPointComputer((operations_research::sat::FullEncodingFixedPointComputer *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadBoolOrConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  unint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t (***v33)();
  uint64_t v34;
  const operations_research::sat::ConstraintProto *v35;
  void *__p;
  char *v37;
  char *v38;
  uint64_t (**v39)();
  int *v40[2];
  uint64_t (***v41)();
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v6 = v5;
  if (*((_DWORD *)this + 15) == 3)
    v7 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v7 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v5, (int *)v7 + 4, (char **)&__p);
  v35 = a2;
  v8 = *((int *)this + 4);
  if ((_DWORD)v8)
  {
    v9 = (int *)*((_QWORD *)this + 3);
    v10 = &v9[v8];
    v11 = v37;
    while (1)
    {
      v13 = *v9;
      v14 = ~*v9 <= *v9 ? *v9 : ~v13;
      v15 = (__PAIR64__(*(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v14), v13) >> 31) ^ 1;
      if (v11 >= v38)
        break;
      *(_DWORD *)v11 = v15;
      v12 = (uint64_t)(v11 + 4);
LABEL_7:
      v37 = (char *)v12;
      ++v9;
      v11 = (char *)v12;
      if (v9 == v10)
        goto LABEL_39;
    }
    v16 = (char *)__p;
    v17 = v11 - (_BYTE *)__p;
    v18 = (v11 - (_BYTE *)__p) >> 2;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v38 - (_BYTE *)__p;
    if ((v38 - (_BYTE *)__p) >> 1 > v19)
      v19 = v20 >> 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(4 * v21);
      v23 = &v22[4 * v18];
      *v23 = v15;
      v12 = (uint64_t)(v23 + 1);
      if (v11 == v16)
        goto LABEL_26;
    }
    else
    {
      v22 = 0;
      v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = v15;
      v12 = 4 * v18 + 4;
      if (v11 == v16)
        goto LABEL_26;
    }
    v24 = v11 - 4 - v16;
    if (v24 >= 0xBC)
    {
      if (&v22[v17 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[v17 - 4])
      {
        v25 = v11;
      }
      else if (&v11[-(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4)
      {
        v25 = v11;
      }
      else if ((unint64_t)(v11 - v22 - v17) >= 0x20)
      {
        v27 = (v24 >> 2) + 1;
        v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
        v25 = &v11[-v28];
        v23 = (_DWORD *)((char *)v23 - v28);
        v29 = &v22[4 * v18 - 16];
        v30 = v11 - 16;
        v31 = v27 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 8;
        }
        while (v31);
        if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_26:
          __p = v23;
          v37 = (char *)v12;
          v38 = &v22[4 * v21];
          if (v16)
            operator delete(v16);
          goto LABEL_7;
        }
      }
      else
      {
        v25 = v11;
      }
    }
    else
    {
      v25 = v11;
    }
    do
    {
      v26 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *--v23 = v26;
    }
    while (v25 != v16);
    goto LABEL_26;
  }
  v12 = (uint64_t)v37;
LABEL_39:
  v39 = &off_24F980568;
  v40[0] = (int *)__p;
  v40[1] = (int *)((v12 - (uint64_t)__p) >> 2);
  v41 = &v39;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v40, (uint64_t)v35);
  v33 = v41;
  if (v41 == &v39)
  {
    v34 = 4;
    v33 = &v39;
  }
  else
  {
    if (!v41)
      goto LABEL_44;
    v34 = 5;
  }
  (*v33)[v34]();
LABEL_44:
  if (__p)
  {
    v37 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DAA30B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_QWORD *)(v8 + 208) = 0;
  *(_QWORD *)(v8 + 216) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_QWORD *)(v8 + 256) = 0;
  *(_QWORD *)(v8 + 264) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(v8 + 304) = 0;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  v9 = v3;
  v10 = (_QWORD *)*v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v9 = v10;
        v11 = v10[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
          break;
        v10 = (_QWORD *)*v9;
        v3 = v9;
        if (!*v9)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
        break;
      v10 = (_QWORD *)v9[1];
      if (!v10)
      {
        v3 = v9 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v9;
    v9 = operator new(0x30uLL);
    v9[4] = &gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v12;
    *v3 = v9;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v9;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v9[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F984290;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

uint64_t operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>@<X0>(uint64_t result@<X0>, int *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  int *v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int *v28;
  uint64_t v29;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = (int *)*((_QWORD *)a2 + 1);
    v9 = &v8[v4];
    v28 = v9;
    v29 = result;
    while (1)
    {
      while (1)
      {
        v10 = *v8;
        v11 = ~*v8 <= *v8 ? *v8 : ~v10;
        v12 = __PAIR64__(*(_DWORD *)(*(_QWORD *)(result + 48) + 4 * v11), v10) >> 31;
        if (v7 >= v6)
          break;
        *(_DWORD *)v7 = v12;
        v7 += 4;
        a3[1] = v7;
        if (++v8 == v9)
          return result;
      }
      v13 = (v7 - v5) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v6 - v5) >> 1 > v14)
        v14 = (v6 - v5) >> 1;
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = operator new(4 * v15);
        v17 = &v16[4 * v13];
        *(_DWORD *)v17 = v12;
        v18 = (uint64_t)(v17 + 4);
        if (v7 == v5)
          goto LABEL_22;
      }
      else
      {
        v16 = 0;
        v17 = (char *)(4 * v13);
        *(_DWORD *)(4 * v13) = v12;
        v18 = 4 * v13 + 4;
        if (v7 == v5)
          goto LABEL_22;
      }
      v19 = v7 - 4 - v5;
      if (v19 < 0xBC)
      {
        v20 = v7;
        goto LABEL_21;
      }
      if (&v16[v7 - v5 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v7 - v5 - 4])
        break;
      if (&v7[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v20 = v7;
        goto LABEL_21;
      }
      if ((unint64_t)(v5 - v16) < 0x20)
      {
        v20 = v7;
        goto LABEL_21;
      }
      v22 = (v19 >> 2) + 1;
      v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v20 = &v7[-v23];
      v17 -= v23;
      v24 = &v16[4 * v13 - 16];
      v25 = v7 - 16;
      v26 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_21;
LABEL_22:
      v6 = &v16[4 * v15];
      *a3 = v17;
      a3[1] = (char *)v18;
      a3[2] = v6;
      if (v5)
        operator delete(v5);
      v5 = v17;
      v9 = v28;
      result = v29;
      a3[1] = (char *)v18;
      ++v8;
      v7 = (char *)v18;
      if (v8 == v28)
        return result;
    }
    v20 = v7;
    do
    {
LABEL_21:
      v21 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v17 - 1) = v21;
      v17 -= 4;
    }
    while (v20 != v5);
    goto LABEL_22;
  }
  return result;
}

void sub_22DAA3504(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadBoolAndConstraint(uint64_t **this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  const operations_research::sat::ConstraintProto *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  operations_research::sat::SatSolver *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  const operations_research::sat::ConstraintProto *v55;
  operations_research::sat *v56;
  int *v57;
  char *v58;
  char *v59;
  void *__p;
  char *v61;
  char *v62;

  v3 = a2;
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  __p = 0;
  v61 = 0;
  v62 = 0;
  v6 = *((int *)this + 4);
  if ((_DWORD)v6)
  {
    v55 = v3;
    v56 = (operations_research::sat *)this;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (int *)this[3];
    v11 = &v10[v6];
    v12 = (uint64_t)v61;
    v57 = v11;
    while (1)
    {
      while (1)
      {
        v13 = *v10;
        v14 = ~*v10 <= *v10 ? *v10 : ~v13;
        v15 = (__PAIR64__(*(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v14), v13) >> 31) ^ 1;
        if (v7 >= v8)
          break;
        *(_DWORD *)v7 = v15;
        v7 += 4;
        v12 = (uint64_t)v7;
        if (++v10 == v11)
          goto LABEL_36;
      }
      v16 = (v7 - v9) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
      {
        v61 = (char *)v12;
        v62 = v8;
        __p = v9;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v8 - v9) >> 1 > v17)
        v17 = (v8 - v9) >> 1;
      if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
      {
        if (v18 >> 62)
        {
          v61 = (char *)v12;
          v62 = v8;
          __p = v9;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v19 = v18;
        v20 = operator new(4 * v18);
        v18 = v19;
        v21 = &v20[4 * v16];
        *(_DWORD *)v21 = v15;
        v12 = (uint64_t)(v21 + 4);
        if (v7 == v9)
          goto LABEL_22;
      }
      else
      {
        v20 = 0;
        v21 = (char *)(4 * v16);
        *(_DWORD *)(4 * v16) = v15;
        v12 = 4 * v16 + 4;
        if (v7 == v9)
          goto LABEL_22;
      }
      v22 = v7 - 4 - v9;
      if (v22 >= 0xBC)
      {
        if (&v20[v7 - v9 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v7 - v9 - 4])
        {
          v23 = v7;
        }
        else if (&v7[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
        {
          v23 = v7;
        }
        else if ((unint64_t)(v9 - v20) >= 0x20)
        {
          v25 = (v22 >> 2) + 1;
          v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
          v23 = &v7[-v26];
          v21 -= v26;
          v27 = &v20[4 * v16 - 16];
          v28 = v7 - 16;
          v29 = v25 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v30 = *(_OWORD *)v28;
            *(v27 - 1) = *((_OWORD *)v28 - 1);
            *v27 = v30;
            v27 -= 2;
            v28 -= 32;
            v29 -= 8;
          }
          while (v29);
          if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_22;
        }
        else
        {
          v23 = v7;
        }
      }
      else
      {
        v23 = v7;
      }
      do
      {
        v24 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v21 - 1) = v24;
        v21 -= 4;
      }
      while (v23 != v9);
LABEL_22:
      v8 = &v20[4 * v18];
      if (v9)
        operator delete(v9);
      v9 = v21;
      v11 = v57;
      ++v10;
      v7 = (char *)v12;
      if (v10 == v57)
      {
LABEL_36:
        v61 = (char *)v12;
        v62 = v8;
        v3 = v55;
        this = (uint64_t **)v56;
        goto LABEL_38;
      }
    }
  }
  v9 = 0;
LABEL_38:
  __p = v9;
  v31 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v3);
  if (*((_DWORD *)this + 15) == 4)
    v32 = this[6];
  else
    v32 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v5, (int *)v32 + 4, &v58);
  v33 = v58;
  v34 = v59;
  if (v58 != v59)
  {
    v35 = v61;
    while (1)
    {
      v36 = *(_DWORD *)v33;
      if (v35 >= v62)
        break;
      *(_DWORD *)v35 = v36;
      v37 = (uint64_t)(v35 + 4);
LABEL_66:
      v61 = (char *)v37;
      operations_research::sat::SatSolver::AddProblemClause(v31, (int *)__p, (v37 - (uint64_t)__p) >> 2);
      v35 = v61 - 4;
      v61 -= 4;
      v33 += 4;
      if (v33 == v34)
      {
        v33 = v58;
        goto LABEL_68;
      }
    }
    v38 = (char *)__p;
    v39 = v35 - (_BYTE *)__p;
    v40 = (v35 - (_BYTE *)__p) >> 2;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v42 = v62 - (_BYTE *)__p;
    if ((v62 - (_BYTE *)__p) >> 1 > v41)
      v41 = v42 >> 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
      v43 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      if (v43 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v44 = operator new(4 * v43);
      v45 = &v44[4 * v40];
      *v45 = v36;
      v37 = (uint64_t)(v45 + 1);
      if (v35 == v38)
        goto LABEL_64;
    }
    else
    {
      v44 = 0;
      v45 = (_DWORD *)(4 * v40);
      *(_DWORD *)(4 * v40) = v36;
      v37 = 4 * v40 + 4;
      if (v35 == v38)
        goto LABEL_64;
    }
    v46 = v35 - 4 - v38;
    if (v46 >= 0x2C)
    {
      if ((unint64_t)(v35 - v44 - v39) >= 0x20)
      {
        v48 = (v46 >> 2) + 1;
        v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        v47 = &v35[-v49];
        v45 = (_DWORD *)((char *)v45 - v49);
        v50 = &v44[4 * v40 - 16];
        v51 = v35 - 16;
        v52 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *v50 = v53;
          v50 -= 2;
          v51 -= 32;
          v52 -= 8;
        }
        while (v52);
        if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_64:
          __p = v45;
          v61 = (char *)v37;
          v62 = &v44[4 * v43];
          if (v38)
            operator delete(v38);
          goto LABEL_66;
        }
      }
      else
      {
        v47 = v35;
      }
    }
    else
    {
      v47 = v35;
    }
    do
    {
      v54 = *((_DWORD *)v47 - 1);
      v47 -= 4;
      *--v45 = v54;
    }
    while (v47 != v38);
    goto LABEL_64;
  }
LABEL_68:
  if (v33)
  {
    v59 = v33;
    operator delete(v33);
  }
  if (__p)
  {
    v61 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DAA3974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadAtMostOneConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[3];
  const operations_research::sat::ConstraintProto *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 4))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 971);
    v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !HasEnforcementLiteral(ct) ", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Not supported.", 14);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
  }
  if (*((_DWORD *)this + 15) == 26)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (char **)__p);
  operations_research::sat::AtMostOneConstraint((uint64_t)__p, (uint64_t)v13);
  v12 = a2;
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v14 + 48))(v14, &v12);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22DAA3B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22DAA3B78(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::LoadBoolXorConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[3];
  const operations_research::sat::ConstraintProto *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 4))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 977);
    v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !HasEnforcementLiteral(ct) ", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Not supported.", 14);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
  }
  if (*((_DWORD *)this + 15) == 5)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (char **)__p);
  operations_research::sat::LiteralXorIs((uint64_t)__p, 1, (uint64_t)v13);
  v12 = a2;
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v14 + 48))(v14, &v12);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22DAA3CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22DAA3D30(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::LiteralXorIs(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v6 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = v5 - *(_QWORD *)a1;
  if (v5 == *(_QWORD *)a1)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a1);
    v9 = &v8[4 * (v7 >> 2)];
    memcpy(v8, v6, v7);
  }
  *(_QWORD *)(a3 + 24) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24F982D40;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  v11 = v9 - v8;
  if (v11)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    v10[1] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    v10[3] = v13;
    memcpy(v12, v8, v11);
    v10[2] = v13;
  }
  *((_BYTE *)v10 + 32) = a2;
  *(_QWORD *)(a3 + 24) = v10;
  if (v8)
    operator delete(v8);
}

void sub_22DAA3E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadLinearConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  const operations_research::sat::ConstraintProto *v3;
  __n128 v5;
  uint64_t *v6;
  operations_research::sat::IntegerTrail *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  const void *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  const operations_research::sat::ConstraintProto *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  operations_research::sat::SatParameters *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  const operations_research::sat::ConstraintProto **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  operations_research::sat::SatSolver *v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  _DWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int *v83;
  int *v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  char *v89;
  int64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  _DWORD *v96;
  unint64_t v97;
  char *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  int *v110;
  int *v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  _DWORD *v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t (***v130)();
  uint64_t v131;
  uint64_t (***v132)();
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  void *v136;
  uint64_t v137;
  void *v138;
  const operations_research::sat::ConstraintProto *v139;
  _QWORD *v140;
  _QWORD *v141;
  void *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t *v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t *v149;
  uint64_t *v150;
  char *v151;
  int v152;
  uint64_t *v153;
  BOOL v154;
  _QWORD *v155;
  _QWORD *v156;
  void *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t *v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t *v164;
  _QWORD *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  unint64_t v174;
  char *v175;
  uint64_t *v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  int v189;
  _QWORD *v190;
  uint64_t v191;
  void *v192;
  operations_research::sat::SatSolver *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const operations_research::sat::ConstraintProto *v198;
  uint64_t v199;
  operations_research::sat *v200;
  uint64_t v201;
  uint64_t *v202;
  void *__p;
  void *v204;
  _DWORD *v205;
  char *v206[3];
  char *v207[3];
  void *v208;
  char *v209;
  char *v210;
  void *v211;
  uint64_t v212;
  char *v213;
  void *v214;
  void *v215;
  const operations_research::sat::ConstraintProto *v216;
  uint64_t (**v217)();
  int *v218[2];
  uint64_t (***v219)();
  _BYTE v220[24];
  _BYTE *v221;
  _BYTE v222[24];
  _BYTE *v223;
  _QWORD v224[3];
  _QWORD *v225;
  _BYTE v226[24];
  uint64_t (***v227)();
  _BYTE v228[24];
  _BYTE *v229;
  _QWORD v230[3];
  _QWORD *v231;
  _QWORD v232[3];
  _QWORD *v233;
  _BYTE v234[24];
  uint64_t (***v235)();
  uint64_t (**v236)();
  int *v237[2];
  uint64_t (***v238)();
  uint64_t v239;

  v3 = a2;
  v239 = *MEMORY[0x24BDAC8D0];
  v202 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v201 = (uint64_t)v3;
  if (*((_DWORD *)this + 15) == 12)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 6);
    if (!*((_DWORD *)v6 + 4))
      goto LABEL_143;
  }
  else if (!(_DWORD)qword_25408AC60)
  {
    v6 = &operations_research::sat::_LinearConstraintProto_default_instance_;
LABEL_143:
    operations_research::Domain::FromFlatSpanOfIntervals(v6[9], *((int *)v6 + 16), (unint64_t *)&v214, v5);
    if (operations_research::Domain::Contains((operations_research::Domain *)&v214, 0))
      goto LABEL_202;
    v106 = *((int *)this + 4);
    if (!(_DWORD)v106)
    {
      if (*off_254079448[0] >= 1
        && (off_254079448[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079448, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v208, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1068);
        v134 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v208);
        v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"Trivially UNSAT constraint: ", 28);
        google::protobuf::Message::DebugString(this, &v211);
        if (SHIBYTE(v213) >= 0)
          v136 = &v211;
        else
          v136 = v211;
        if (SHIBYTE(v213) >= 0)
          v137 = HIBYTE(v213);
        else
          v137 = v212;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v136, v137);
        if (SHIBYTE(v213) < 0)
          operator delete(v211);
        google::LogMessage::~LogMessage((google::LogMessage *)&v208);
      }
      *((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v3) + 496) = 1;
      goto LABEL_202;
    }
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v110 = (int *)*((_QWORD *)this + 3);
    v111 = &v110[v106];
    while (1)
    {
      while (1)
      {
        v112 = *v110;
        v113 = ~*v110 <= *v110 ? *v110 : ~v112;
        v114 = (__PAIR64__(*(_DWORD *)(v202[6] + 4 * v113), v112) >> 31) ^ 1;
        if (v109 >= v108)
          break;
        *(_DWORD *)v109 = v114;
        v109 += 4;
        v212 = (uint64_t)v109;
        if (++v110 == v111)
          goto LABEL_179;
      }
      v115 = (v109 - v107) >> 2;
      v116 = v115 + 1;
      if ((unint64_t)(v115 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v108 - v107) >> 1 > v116)
        v116 = (v108 - v107) >> 1;
      if ((unint64_t)(v108 - v107) >= 0x7FFFFFFFFFFFFFFCLL)
        v117 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v117 = v116;
      if (v117)
      {
        if (v117 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v118 = operator new(4 * v117);
        v119 = &v118[4 * v115];
        *v119 = v114;
        v120 = (uint64_t)(v119 + 1);
        if (v109 == v107)
          goto LABEL_165;
      }
      else
      {
        v118 = 0;
        v119 = (_DWORD *)(4 * v115);
        *(_DWORD *)(4 * v115) = v114;
        v120 = 4 * v115 + 4;
        if (v109 == v107)
          goto LABEL_165;
      }
      v121 = v109 - 4 - v107;
      if (v121 >= 0xBC)
      {
        if (&v118[v109 - v107 - 4 - (v121 & 0xFFFFFFFFFFFFFFFCLL)] > &v118[v109 - v107 - 4])
        {
          v122 = v109;
        }
        else if (&v109[-(v121 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v109 - 4)
        {
          v122 = v109;
        }
        else if ((unint64_t)(v107 - v118) >= 0x20)
        {
          v124 = (v121 >> 2) + 1;
          v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
          v122 = &v109[-v125];
          v119 = (_DWORD *)((char *)v119 - v125);
          v126 = &v118[4 * v115 - 16];
          v127 = v109 - 16;
          v128 = v124 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v129 = *(_OWORD *)v127;
            *(v126 - 1) = *((_OWORD *)v127 - 1);
            *v126 = v129;
            v126 -= 2;
            v127 -= 32;
            v128 -= 8;
          }
          while (v128);
          if (v124 == (v124 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_165;
        }
        else
        {
          v122 = v109;
        }
      }
      else
      {
        v122 = v109;
      }
      do
      {
        v123 = *((_DWORD *)v122 - 1);
        v122 -= 4;
        *--v119 = v123;
      }
      while (v122 != v107);
LABEL_165:
      v108 = &v118[4 * v117];
      v211 = v119;
      v212 = v120;
      v213 = v108;
      if (v107)
        operator delete(v107);
      v107 = (char *)v119;
      v109 = (char *)v120;
      v212 = v120;
      if (++v110 == v111)
      {
LABEL_179:
        v236 = &off_24F980568;
        v237[0] = (int *)v211;
        v237[1] = (int *)((v109 - (_BYTE *)v211) >> 2);
        v238 = &v236;
        operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v237, (uint64_t)v3);
        v130 = v238;
        if (v238 == &v236)
        {
          v131 = 4;
          v130 = &v236;
LABEL_199:
          (*v130)[v131]();
        }
        else if (v238)
        {
          v131 = 5;
          goto LABEL_199;
        }
        if (v211)
          operator delete(v211);
LABEL_202:
        if ((v214 & 1) != 0)
        {
          v138 = v215;
          goto LABEL_316;
        }
        return;
      }
    }
  }
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v3);
  if (*((_DWORD *)this + 15) == 12)
    v8 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v8 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v202, (int *)v8 + 4, (int **)&v214);
  v9 = *((_DWORD *)this + 15);
  if (v9 == 12)
    v10 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  v11 = *((int *)v10 + 10);
  v12 = (const void *)v10[6];
  v212 = 0;
  v213 = 0;
  v211 = 0;
  if ((_DWORD)v11)
  {
    if ((v11 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(8 * v11);
    v211 = v13;
    v213 = &v13[8 * v11];
    memcpy(v13, v12, 8 * v11);
    v212 = (uint64_t)v213;
    v14 = (int *)v214;
    v15 = (_BYTE *)v215 - (_BYTE *)v214;
    if (v215 != v214)
      goto LABEL_14;
LABEL_32:
    v19 = 0;
    v18 = 0;
    v17 = 0;
    v22 = 1;
    goto LABEL_33;
  }
  v13 = 0;
  v14 = (int *)v214;
  v15 = (_BYTE *)v215 - (_BYTE *)v214;
  if (v215 == v214)
    goto LABEL_32;
LABEL_14:
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = v15 >> 2;
  v21 = *((_QWORD *)v7 + 5);
  if (v20 <= 1)
    v20 = 1;
  LOBYTE(v22) = 1;
  do
  {
    if (v22)
    {
      v23 = *(_DWORD *)(v10[3] + 4 * v16);
      if (~v23 > v23)
        v23 = ~v23;
      v22 = *(_DWORD *)(v202[6] + 4 * v23) != -1;
    }
    else
    {
      v22 = 0;
    }
    v24 = v14[v16];
    v25 = *(_QWORD *)(v21 + 12 * v24);
    v26 = *(_QWORD *)(v21 + 12 * (v24 ^ 1));
    v27 = *(_QWORD *)&v13[8 * v16];
    if (v19 <= 1 - v25 - v26)
      v19 = 1 - v25 - v26;
    v28 = v27 * v25;
    v29 = v26 * v27;
    v30 = -(v26 * v27);
    if (v30 < v28)
      v31 = -v29;
    else
      v31 = v28;
    v17 = (const operations_research::sat::ConstraintProto *)((char *)v17 + v31);
    if (v28 <= v30)
      v32 = -v29;
    else
      v32 = v28;
    v18 += v32;
    ++v16;
  }
  while (v20 != v16);
LABEL_33:
  if (*((_DWORD *)v10 + 4) != 2
    || (v33 = *((_QWORD *)v7 + 5), !(*(_QWORD *)(v33 + 12 * *v14) + *(_QWORD *)(v33 + 12 * (*v14 ^ 1))))
    || (*(_QWORD *)(v33 + 12 * v14[1]) + *(_QWORD *)(v33 + 12 * (v14[1] ^ 1)) ? (v34 = v19 <= 15) : (v34 = 0), !v34))
  {
    v200 = this;
    if (v9 == 12)
      goto LABEL_49;
LABEL_253:
    v41 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if ((_DWORD)qword_25408AC90 != 2)
      goto LABEL_50;
    goto LABEL_254;
  }
  v35 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v3);
  v36 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  if (*((int *)v35 + 105) > 0)
  {
    v37 = v36;
    v38 = *((_DWORD *)this + 15);
    if (v38 == 12)
      v39 = (uint64_t *)*((_QWORD *)this + 6);
    else
      v39 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (*((_DWORD *)v39 + 16) == 2 && *(_QWORD *)v39[9] == *(_QWORD *)(v39[9] + 8))
    {
      v40 = v38 == 12
          ? *(const operations_research::sat::ConstraintProto ***)(*((_QWORD *)this + 6) + 72)
          : (const operations_research::sat::ConstraintProto **)qword_25408AC98;
      v139 = *v40;
      if (v17 != v139
        && (const operations_research::sat::ConstraintProto *)v18 != v139
        && operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v36, *(_DWORD *)v214)
        && operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v37, *((_DWORD *)v214 + 1)))
      {
        if (*off_254079450[0] >= 3
          && (off_254079450[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079450, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)3)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1108);
          v140 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"Load AC version of ", 19);
          google::protobuf::Message::DebugString(this, &v208);
          if (SHIBYTE(v210) >= 0)
            v142 = &v208;
          else
            v142 = v208;
          if (SHIBYTE(v210) >= 0)
            v143 = HIBYTE(v210);
          else
            v143 = (uint64_t)v209;
          v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)v142, v143);
          v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)", var0 domain = ", 16);
          v146 = (unint64_t *)operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v7, *(_DWORD *)v214);
          v147 = operations_research::operator<<(v145, v146);
          v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)", var1 domain = ", 16);
          v149 = (unint64_t *)operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v7, *((_DWORD *)v214 + 1));
          operations_research::operator<<(v148, v149);
          if (SHIBYTE(v210) < 0)
            operator delete(v208);
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v202, (int *)this + 4, v207);
        if (*((_DWORD *)this + 15) == 12)
          v150 = (uint64_t *)*((_QWORD *)this + 6);
        else
          v150 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        v151 = v207[0];
        if (!v207[0])
          goto LABEL_312;
        v207[1] = v207[0];
        goto LABEL_311;
      }
    }
    v152 = *((_DWORD *)v35 + 105);
    v216 = 0;
    if (v152 >= 1)
    {
      v153 = *((_DWORD *)this + 15) == 12
           ? (uint64_t *)*((_QWORD *)this + 6)
           : &operations_research::sat::_LinearConstraintProto_default_instance_;
      {
        v154 = v17 == v216 || v18 == (_QWORD)v216;
        if (!v154
          && operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v37, *(_DWORD *)v214)
          && operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v37, *((_DWORD *)v214 + 1)))
        {
          if (*off_254079458[0] >= 3
            && (off_254079458[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_254079458, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)3)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1124);
            v155 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
            v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"Load NAC version of ", 20);
            google::protobuf::Message::DebugString(this, &v208);
            if (SHIBYTE(v210) >= 0)
              v157 = &v208;
            else
              v157 = v208;
            if (SHIBYTE(v210) >= 0)
              v158 = HIBYTE(v210);
            else
              v158 = (uint64_t)v209;
            v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v157, v158);
            v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)", var0 domain = ", 16);
            v161 = (unint64_t *)operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v7, *(_DWORD *)v214);
            v162 = operations_research::operator<<(v160, v161);
            v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)", var1 domain = ", 16);
            v164 = (unint64_t *)operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v7, *((_DWORD *)v214 + 1));
            v165 = operations_research::operator<<(v163, v164);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)", value = ", 10);
            std::ostream::operator<<();
            if (SHIBYTE(v210) < 0)
              operator delete(v208);
            google::LogMessage::~LogMessage((google::LogMessage *)&__p);
          }
          operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v202, (int *)this + 4, v206);
          v151 = v206[0];
          if (!v206[0])
            goto LABEL_312;
          v206[1] = v206[0];
LABEL_311:
          operator delete(v151);
          goto LABEL_312;
        }
      }
    }
  }
  v9 = *((_DWORD *)this + 15);
  v200 = this;
  if (v9 != 12)
    goto LABEL_253;
LABEL_49:
  v41 = (uint64_t *)*((_QWORD *)this + 6);
  if (*((_DWORD *)v41 + 16) != 2)
  {
LABEL_50:
    v42 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v196 = v18;
    v198 = v17;
    while (v9 == 12)
    {
      v43 = *((_QWORD *)this + 6);
      if (v42 >= *(int *)(v43 + 64))
        goto LABEL_108;
      v44 = (uint64_t *)(v43 + 72);
LABEL_57:
      v45 = *v44;
      v46 = *(_QWORD *)(v45 + 8 * v42);
      v47 = *(_QWORD *)(v45 + ((8 * v42) | 8));
      if ((uint64_t)v17 >= v46)
        v48 = 0x8000000000000000;
      else
        v48 = v46;
      if (v18 <= v47)
        v49 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      v224[0] = &off_24F982EF8;
      v225 = v224;
      v50 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v3);
      v51 = *((_DWORD *)v50 + 4);
      operations_research::sat::SatSolver::SetNumVariables(v50, v51 + 1);
      v52 = v225;
      if (v225 == v224)
      {
        v52 = v224;
        v53 = 4;
      }
      else
      {
        if (!v225)
          goto LABEL_68;
        v53 = 5;
      }
      (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_68:
      v54 = 2 * v51;
      v55 = v209;
      if (v209 < v210)
      {
        *(_DWORD *)v209 = v54;
        v209 = v55 + 4;
        if (v48 == 0x8000000000000000)
          goto LABEL_99;
LABEL_91:
        v75 = operator new(4uLL);
        __p = v75;
        *v75 = v54;
        v204 = v75 + 1;
        v205 = v75 + 1;
        operations_research::sat::ConditionalWeightedSumGreaterOrEqual<std::vector<long long>>((const void **)&__p, (char **)&v214, (uint64_t)&v211, v48, (uint64_t)v222);
        v216 = v3;
        if (!v223)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v223 + 48))(v223, &v216);
        v76 = v223;
        if (v223 == v222)
        {
          v76 = v222;
          v77 = 4;
LABEL_96:
          (*(void (**)(void))(*v76 + 8 * v77))();
        }
        else if (v223)
        {
          v77 = 5;
          goto LABEL_96;
        }
        if (__p)
        {
          v204 = __p;
          operator delete(__p);
        }
        goto LABEL_99;
      }
      v56 = v42;
      v57 = (char *)v208;
      v58 = v209 - (_BYTE *)v208;
      v59 = (v209 - (_BYTE *)v208) >> 2;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v61 = v210 - (_BYTE *)v208;
      if ((v210 - (_BYTE *)v208) >> 1 > v60)
        v60 = v61 >> 1;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
        v62 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v62 = v60;
      if (!v62)
      {
        v63 = 0;
        v64 = (int *)(4 * v59);
        *(_DWORD *)(4 * v59) = v54;
        v65 = 4 * v59 + 4;
        if (v55 == v57)
          goto LABEL_88;
LABEL_82:
        v66 = v55 - 4 - v57;
        if (v66 < 0x2C)
          goto LABEL_345;
        if ((unint64_t)(v55 - &v63[v58]) < 0x20)
          goto LABEL_345;
        v67 = (v66 >> 2) + 1;
        v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
        v69 = &v55[-v68];
        v64 = (int *)((char *)v64 - v68);
        v70 = &v63[4 * v59 - 16];
        v71 = v55 - 16;
        v72 = v67 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v73 = *(_OWORD *)v71;
          *((_OWORD *)v70 - 1) = *((_OWORD *)v71 - 1);
          *(_OWORD *)v70 = v73;
          v70 -= 32;
          v71 -= 32;
          v72 -= 8;
        }
        while (v72);
        v55 = v69;
        if (v67 != (v67 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_345:
          do
          {
            v74 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *--v64 = v74;
          }
          while (v55 != v57);
        }
        goto LABEL_88;
      }
      if (v62 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v63 = (char *)operator new(4 * v62);
      v64 = (int *)&v63[4 * v59];
      *v64 = v54;
      v65 = (uint64_t)(v64 + 1);
      if (v55 != v57)
        goto LABEL_82;
LABEL_88:
      v208 = v64;
      v209 = (char *)v65;
      v210 = &v63[4 * v62];
      if (v57)
        operator delete(v57);
      this = v200;
      v3 = (const operations_research::sat::ConstraintProto *)v201;
      v42 = v56;
      v18 = v196;
      v17 = v198;
      v209 = (char *)v65;
      if (v48 != 0x8000000000000000)
        goto LABEL_91;
LABEL_99:
      if (v49 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_51;
      v78 = operator new(4uLL);
      __p = v78;
      *v78 = v54;
      v204 = v78 + 1;
      v205 = v78 + 1;
      operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>((const void **)&__p, (char **)&v214, (uint64_t **)&v211, v49, (uint64_t)v220);
      v216 = v3;
      if (!v221)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v221 + 48))(v221, &v216);
      v79 = v221;
      if (v221 == v220)
      {
        v79 = v220;
        v80 = 4;
      }
      else
      {
        if (!v221)
          goto LABEL_106;
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_106:
      if (__p)
      {
        v204 = __p;
        operator delete(__p);
      }
LABEL_51:
      v42 += 2;
      v9 = *((_DWORD *)this + 15);
    }
    if (v42 < (int)qword_25408AC90)
    {
      v44 = &qword_25408AC98;
      goto LABEL_57;
    }
LABEL_108:
    v81 = *((int *)this + 4);
    v82 = v209;
    if ((_DWORD)v81)
    {
      v83 = (int *)*((_QWORD *)this + 3);
      v84 = &v83[v81];
      while (1)
      {
        v86 = *v83;
        v87 = ~*v83 <= *v83 ? *v83 : ~v86;
        v88 = (__PAIR64__(*(_DWORD *)(v202[6] + 4 * v87), v86) >> 31) ^ 1;
        if (v82 >= v210)
          break;
        *(_DWORD *)v82 = v88;
        v85 = (uint64_t)(v82 + 4);
LABEL_111:
        v209 = (char *)v85;
        ++v83;
        v82 = (char *)v85;
        if (v83 == v84)
          goto LABEL_183;
      }
      v89 = (char *)v208;
      v90 = v82 - (_BYTE *)v208;
      v91 = (v82 - (_BYTE *)v208) >> 2;
      v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v93 = v210 - (_BYTE *)v208;
      if ((v210 - (_BYTE *)v208) >> 1 > v92)
        v92 = v93 >> 1;
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
        v94 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v94 = v92;
      if (v94)
      {
        if (v94 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v95 = operator new(4 * v94);
        v96 = &v95[4 * v91];
        *v96 = v88;
        v85 = (uint64_t)(v96 + 1);
        if (v82 == v89)
          goto LABEL_130;
      }
      else
      {
        v95 = 0;
        v96 = (_DWORD *)(4 * v91);
        *(_DWORD *)(4 * v91) = v88;
        v85 = 4 * v91 + 4;
        if (v82 == v89)
          goto LABEL_130;
      }
      v97 = v82 - 4 - v89;
      if (v97 >= 0xBC)
      {
        if (&v95[v90 - 4 - (v97 & 0xFFFFFFFFFFFFFFFCLL)] > &v95[v90 - 4])
        {
          v98 = v82;
        }
        else if (&v82[-(v97 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v82 - 4)
        {
          v98 = v82;
        }
        else if ((unint64_t)(v82 - v95 - v90) >= 0x20)
        {
          v100 = (v97 >> 2) + 1;
          v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
          v98 = &v82[-v101];
          v96 = (_DWORD *)((char *)v96 - v101);
          v102 = &v95[4 * v91 - 16];
          v103 = v82 - 16;
          v104 = v100 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v105 = *(_OWORD *)v103;
            *(v102 - 1) = *((_OWORD *)v103 - 1);
            *v102 = v105;
            v102 -= 2;
            v103 -= 32;
            v104 -= 8;
          }
          while (v104);
          if (v100 == (v100 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_130:
            v208 = v96;
            v209 = (char *)v85;
            v210 = &v95[4 * v94];
            if (v89)
              operator delete(v89);
            goto LABEL_111;
          }
        }
        else
        {
          v98 = v82;
        }
      }
      else
      {
        v98 = v82;
      }
      do
      {
        v99 = *((_DWORD *)v98 - 1);
        v98 -= 4;
        *--v96 = v99;
      }
      while (v98 != v89);
      goto LABEL_130;
    }
    v85 = (uint64_t)v209;
LABEL_183:
    v217 = &off_24F980568;
    v218[0] = (int *)v208;
    v218[1] = (int *)((v85 - (uint64_t)v208) >> 2);
    v219 = &v217;
    operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v218, v201);
    v132 = v219;
    if (v219 == &v217)
    {
      v133 = 4;
      v132 = &v217;
LABEL_308:
      (*v132)[v133]();
      goto LABEL_309;
    }
    goto LABEL_306;
  }
LABEL_254:
  v166 = (uint64_t *)v41[9];
  v168 = *v166;
  v167 = v166[1];
  if ((uint64_t)v17 >= v168)
    v169 = 0x8000000000000000;
  else
    v169 = v168;
  if (v18 <= v167)
    v170 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v170 = v167;
  if (*((_DWORD *)this + 4))
  {
    operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v202, (int *)this + 4, (char **)&v208);
    if (v169 != 0x8000000000000000)
    {
      operations_research::sat::ConditionalWeightedSumGreaterOrEqual<std::vector<long long>>((const void **)&v208, (char **)&v214, (uint64_t)&v211, v169, (uint64_t)v228);
      __p = v3;
      if (!v229)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, void **))(*(_QWORD *)v229 + 48))(v229, &__p);
      v171 = v229;
      if (v229 == v228)
      {
        v172 = 4;
        v171 = v228;
        goto LABEL_302;
      }
      if (v229)
      {
        v172 = 5;
LABEL_302:
        (*(void (**)(void))(*v171 + 8 * v172))();
      }
    }
    if (v170 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_309;
    operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>((const void **)&v208, (char **)&v214, (uint64_t **)&v211, v170, (uint64_t)v226);
    __p = v3;
    if (!v227)
      std::__throw_bad_function_call[abi:ne180100]();
    ((void (*)(uint64_t (***)(), void **))(*v227)[6])(v227, &__p);
    v132 = v227;
    if (v227 == (uint64_t (***)())v226)
    {
      v133 = 4;
      v132 = (uint64_t (***)())v226;
      goto LABEL_308;
    }
LABEL_306:
    if (v132)
    {
      v133 = 5;
      goto LABEL_308;
    }
LABEL_309:
    v151 = (char *)v208;
    if (!v208)
      goto LABEL_312;
    v209 = (char *)v208;
    goto LABEL_311;
  }
  if (v22)
  {
    v197 = v169;
    v199 = v170;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    if (v215 != v214)
    {
      v173 = 0;
      v174 = 0;
      do
      {
        if (*((_DWORD *)this + 15) == 12)
          v176 = (uint64_t *)*((_QWORD *)this + 6);
        else
          v176 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        v177 = *(_DWORD *)(v176[3] + 4 * v174);
        if (~v177 <= v177)
          v178 = v177;
        else
          v178 = ~v177;
        v179 = __PAIR64__(*(_DWORD *)(v202[6] + 4 * v178), v177) >> 31;
        v180 = *((_QWORD *)v211 + v174);
        if (v173 < v210)
        {
          *(_DWORD *)v173 = v179;
          *(_QWORD *)(v173 + 4) = v180;
          v175 = v173 + 12;
        }
        else
        {
          v181 = (char *)v208;
          v182 = 0xAAAAAAAAAAAAAAABLL * ((v173 - (_BYTE *)v208) >> 2);
          v183 = v182 + 1;
          if (v182 + 1 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v210 - (_BYTE *)v208) >> 2) > v183)
            v183 = 0x5555555555555556 * ((v210 - (_BYTE *)v208) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v210 - (_BYTE *)v208) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v184 = 0x1555555555555555;
          else
            v184 = v183;
          if (v184)
          {
            if (v184 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v185 = (char *)operator new(12 * v184);
          }
          else
          {
            v185 = 0;
          }
          v186 = &v185[4 * ((v173 - (_BYTE *)v208) >> 2)];
          *(_DWORD *)v186 = v179;
          *(_QWORD *)(v186 + 4) = v180;
          v187 = &v185[12 * v182];
          if (v173 != v181)
          {
            do
            {
              v188 = *(_QWORD *)(v173 - 12);
              v173 -= 12;
              v189 = *((_DWORD *)v173 + 2);
              *(_QWORD *)(v187 - 12) = v188;
              v187 -= 12;
              *((_DWORD *)v187 + 2) = v189;
            }
            while (v173 != v181);
            v173 = (char *)v208;
          }
          v175 = v186 + 12;
          v208 = v187;
          v209 = v186 + 12;
          v210 = &v185[12 * v184];
          if (v173)
            operator delete(v173);
          this = v200;
        }
        v209 = v175;
        ++v174;
        v173 = v175;
      }
      while (v174 < ((_BYTE *)v215 - (_BYTE *)v214) >> 2);
    }
    v235 = 0;
    v192 = operator new(0x20uLL);
    *(_QWORD *)v192 = &off_24F982E78;
    *((_QWORD *)v192 + 1) = v197;
    *((_QWORD *)v192 + 2) = v199;
    *((_QWORD *)v192 + 3) = &v208;
    v235 = (uint64_t (***)())v192;
    v193 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v201);
    operations_research::sat::SatSolver::AddLinearConstraint((uint64_t)v193, 1, *((_QWORD *)v192 + 1), 1, *((_QWORD *)v192 + 2), *((void ***)v192 + 3));
    v132 = v235;
    if (v235 == (uint64_t (***)())v234)
    {
      v133 = 4;
      v132 = (uint64_t (***)())v234;
      goto LABEL_308;
    }
    goto LABEL_306;
  }
  if (v169 == 0x8000000000000000)
    goto LABEL_321;
  operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)&v214, (uint64_t)&v211, v169, v232);
  v208 = v3;
  if (!v233)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, void **))(*v233 + 48))(v233, &v208);
  v190 = v233;
  if (v233 == v232)
  {
    v191 = 4;
    v190 = v232;
    goto LABEL_320;
  }
  if (v233)
  {
    v191 = 5;
LABEL_320:
    (*(void (**)(void))(*v190 + 8 * v191))();
  }
LABEL_321:
  if (v170 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_312;
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)&v214, (uint64_t **)&v211, v170, v230);
  v208 = v3;
  if (!v231)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, void **))(*v231 + 48))(v231, &v208);
  v194 = v231;
  if (v231 == v230)
  {
    v195 = 4;
    v194 = v230;
  }
  else
  {
    if (!v231)
      goto LABEL_312;
    v195 = 5;
  }
  (*(void (**)(void))(*v194 + 8 * v195))();
LABEL_312:
  if (v211)
  {
    v212 = (uint64_t)v211;
    operator delete(v211);
  }
  v138 = v214;
  if (v214)
  {
    v215 = v214;
LABEL_316:
    operator delete(v138);
  }
}

void sub_22DAA52B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,void *a36,uint64_t a37,uint64_t a38,_Unwind_Exception *exception_objecta,char exception_object_8,uint64_t exception_object_16,uint64_t exception_object_24,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (__p)
    operator delete(__p);
  if (!a35)
    _Unwind_Resume(exception_object);
  operator delete(a35);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>@<X0>(_QWORD *result@<X0>, int *a2@<X1>, int **a3@<X8>)
{
  uint64_t v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  int *v28;
  _QWORD *v29;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = (int *)*((_QWORD *)a2 + 1);
    v9 = &v8[v4];
    v28 = v9;
    v29 = result;
    while (1)
    {
      while (1)
      {
        v10 = *v8;
        v11 = ~*v8 <= *v8 ? *v8 : ~v10;
        v12 = *(_DWORD *)(*result + 4 * v11) ^ (v10 >> 31);
        if (v7 >= v6)
          break;
        *v7++ = v12;
        a3[1] = v7;
        if (++v8 == v9)
          return result;
      }
      v13 = v7 - v5;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (((char *)v6 - (char *)v5) >> 1 > v14)
        v14 = ((char *)v6 - (char *)v5) >> 1;
      if ((unint64_t)((char *)v6 - (char *)v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = operator new(4 * v15);
        v17 = (int *)&v16[4 * v13];
        *v17 = v12;
        v18 = (uint64_t)(v17 + 1);
        if (v7 == v5)
          goto LABEL_22;
      }
      else
      {
        v16 = 0;
        v17 = (int *)(4 * v13);
        *(_DWORD *)(4 * v13) = v12;
        v18 = 4 * v13 + 4;
        if (v7 == v5)
          goto LABEL_22;
      }
      v19 = (char *)(v7 - 1) - (char *)v5;
      if (v19 < 0xBC)
      {
        v20 = v7;
        goto LABEL_21;
      }
      if (&v16[(char *)v7 - (char *)v5 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[(char *)v7 - (char *)v5 - 4])
        break;
      if ((int *)((char *)v7 - (v19 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v7 - 1)
      {
        v20 = v7;
        goto LABEL_21;
      }
      if ((unint64_t)((char *)v5 - v16) < 0x20)
      {
        v20 = v7;
        goto LABEL_21;
      }
      v22 = (v19 >> 2) + 1;
      v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v20 = &v7[v23 / 0xFFFFFFFFFFFFFFFCLL];
      v17 = (int *)((char *)v17 - v23);
      v24 = &v16[4 * v13 - 16];
      v25 = v7 - 4;
      v26 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 8;
        v26 -= 8;
      }
      while (v26);
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_21;
LABEL_22:
      v6 = (int *)&v16[4 * v15];
      *a3 = v17;
      a3[1] = (int *)v18;
      a3[2] = v6;
      if (v5)
        operator delete(v5);
      v5 = v17;
      v9 = v28;
      result = v29;
      a3[1] = (int *)v18;
      ++v8;
      v7 = (int *)v18;
      if (v8 == v28)
        return result;
    }
    v20 = v7;
    do
    {
LABEL_21:
      v21 = *--v20;
      *--v17 = v21;
    }
    while (v20 != v5);
    goto LABEL_22;
  }
  return result;
}

void sub_22DAA586C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::LoadEquivalenceAC(_QWORD *a1, uint64_t a2, signed int a3, uint64_t a4, signed int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t j;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t k;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  int v80;
  char *v81;
  int v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  int *v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *m;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  char *v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  void *__p;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _BYTE v117[24];
  _BYTE *v118;
  _BYTE v119[24];
  _BYTE *v120;
  int v121;
  int v122;
  _BYTE v123[24];
  _BYTE *v124;
  _BYTE v125[24];
  _BYTE *v126;
  uint64_t v127;

  v7 = a7;
  v127 = *MEMORY[0x24BDAC8D0];
  v13 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a7);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v13, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 990);
    v102 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"Check failed: encoder->VariableIsFullyEncoded(var1) ", 52);
    goto LABEL_114;
  }
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v13, a5))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 991);
    v103 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Check failed: encoder->VariableIsFullyEncoded(var2) ", 52);
LABEL_114:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
  __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v114 = 0u;
  v115 = 0u;
  v116 = 0;
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v13, a3, &v110);
  v15 = v110;
  v14 = v111;
  v108 = a1;
  v105 = a6;
  if (v110 != v111)
  {
    v104 = v13;
    v16 = v7;
    do
    {
      v21 = 0;
      v24 = *((_DWORD *)v15 + 2);
      v25 = *(_QWORD *)v15 * a2;
      v26 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v25)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v25));
      v23 = v114;
      for (i = (v26 >> 7) ^ ((unint64_t)__p >> 12); ; i = v21 + v17)
      {
        v17 = i & v115;
        v18 = *(_QWORD *)((char *)__p + v17);
        v19 = ((v18 ^ (0x101010101010101 * (v26 & 0x7F))) - 0x101010101010101) & ~(v18 ^ (0x101010101010101
                                                                                            * (v26 & 0x7F))) & 0x8080808080808080;
        if (v19)
          break;
LABEL_8:
        if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
        {
          v20 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&__p, v26);
          v23 = v114;
          *(_QWORD *)(v114 + 12 * v20) = v25;
          goto LABEL_11;
        }
        v21 += 8;
      }
      while (1)
      {
        v20 = (v17 + (__clz(__rbit64(v19)) >> 3)) & v115;
        if (*(_QWORD *)(v114 + 12 * v20) == v25)
          break;
        v19 &= v19 - 1;
        if (!v19)
          goto LABEL_8;
      }
LABEL_11:
      *(_DWORD *)(v23 + 12 * v20 + 8) = v24;
      v15 += 12;
    }
    while (v15 != v14);
    v15 = v110;
    v7 = v16;
    a1 = v108;
    v13 = v104;
  }
  if (v15)
  {
    v111 = v15;
    operator delete(v15);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v13, a5, &v110);
  v27 = v110;
  v28 = v111;
  if (v110 != v111)
  {
    while (1)
    {
      v31 = 0;
      v32 = *((_DWORD *)v27 + 2);
      v33 = a6 - *(_QWORD *)v27 * a4;
      v109 = v33;
      v34 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v33)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v33));
      v35 = v114;
      v36 = (v34 >> 7) ^ ((unint64_t)__p >> 12);
      v37 = 0x101010101010101 * (v34 & 0x7F);
      for (j = v36; ; j = v31 + v39)
      {
        v39 = j & v115;
        v40 = *(_QWORD *)((char *)__p + v39);
        v41 = ((v40 ^ v37) - 0x101010101010101) & ~(v40 ^ v37) & 0x8080808080808080;
        if (v41)
          break;
LABEL_25:
        if ((v40 & (~v40 << 6) & 0x8080808080808080) != 0)
          goto LABEL_28;
        v31 += 8;
      }
      while (1)
      {
        v42 = (v39 + (__clz(__rbit64(v41)) >> 3)) & v115;
        if (*(_QWORD *)(v114 + 12 * v42) == v33)
          break;
        v41 &= v41 - 1;
        if (!v41)
          goto LABEL_25;
      }
      if (v42 == (_QWORD)v115)
      {
LABEL_28:
        v43 = *a1;
        v44 = a1[1];
        v121 = v32 ^ 1;
        v126 = 0;
        v45 = operator new(0x28uLL);
        v45[1] = v43;
        *v45 = &off_24F982DF8;
        v45[2] = (v44 - v43) >> 2;
        v45[3] = &v121;
        v45[4] = 1;
        v126 = v45;
        operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v45 + 1), v7);
        v29 = v126;
        if (v126 == v125)
        {
          v29 = v125;
          v30 = 4;
LABEL_19:
          (*(void (**)(void))(*v29 + 8 * v30))();
          goto LABEL_20;
        }
        if (v126)
        {
          v30 = 5;
          goto LABEL_19;
        }
        goto LABEL_20;
      }
      for (k = 0; ; v36 = k + v47)
      {
        v47 = v36 & v115;
        v48 = *(_QWORD *)((char *)__p + v47);
        v49 = ((v48 ^ v37) - 0x101010101010101) & ~(v48 ^ v37) & 0x8080808080808080;
        if (v49)
          break;
LABEL_35:
        if ((v48 & (~v48 << 6) & 0x8080808080808080) != 0)
        {
          v50 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&__p, v34);
          v35 = v114;
          *(_QWORD *)(v114 + 12 * v50) = v109;
          goto LABEL_38;
        }
        k += 8;
      }
      while (1)
      {
        v50 = (v47 + (__clz(__rbit64(v49)) >> 3)) & v115;
        if (*(_QWORD *)(v114 + 12 * v50) == v33)
          break;
        v49 &= v49 - 1;
        if (!v49)
          goto LABEL_35;
      }
LABEL_38:
      v51 = *(_DWORD *)(v35 + 12 * v50 + 8);
      v52 = *a1;
      v53 = a1[1];
      v121 = v32 ^ 1;
      v122 = v51;
      v124 = 0;
      v54 = operator new(0x28uLL);
      v54[1] = v52;
      *v54 = &off_24F982DF8;
      v54[2] = (v53 - v52) >> 2;
      v54[3] = &v121;
      v54[4] = 2;
      v124 = v54;
      operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v54 + 1), v7);
      v55 = v124;
      if (v124 == v123)
      {
        v55 = v123;
        v56 = 4;
      }
      else
      {
        if (!v124)
          goto LABEL_43;
        v56 = 5;
      }
      (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_43:
      v57 = *a1;
      v58 = a1[1];
      v121 = v32;
      v122 = v51 ^ 1;
      v120 = 0;
      v59 = operator new(0x28uLL);
      v59[1] = v57;
      *v59 = &off_24F982DF8;
      v59[2] = (v58 - v57) >> 2;
      v59[3] = &v121;
      v59[4] = 2;
      v120 = v59;
      operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v59 + 1), v7);
      v60 = v120;
      a6 = v105;
      if (v120 == v119)
      {
        v60 = v119;
        v61 = 4;
        goto LABEL_47;
      }
      if (v120)
      {
        v61 = 5;
LABEL_47:
        (*(void (**)(void))(*v60 + 8 * v61))();
      }
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::erase<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((uint64_t *)&__p, &v109);
LABEL_20:
      v27 += 12;
      if (v27 == v28)
      {
        v27 = v110;
        break;
      }
    }
  }
  if (v27)
  {
    v111 = v27;
    operator delete(v27);
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v62 = v114;
  if (*(char *)__p > -2)
  {
    v63 = (char *)__p;
    v65 = (char *)__p + v115;
    if (__p != (char *)__p + (_QWORD)v115)
    {
LABEL_56:
      v107 = v65;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      while (1)
      {
        v69 = *(_DWORD *)(v62 + 8);
        if (v68 < v67)
        {
          *(_DWORD *)v68 = v69;
          v68 += 4;
          v111 = v68;
          v70 = *++v63;
          v62 += 12;
          if (v70 <= -2)
            goto LABEL_79;
          goto LABEL_57;
        }
        v71 = (v68 - v66) >> 2;
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v67 - v66) >> 1 > v72)
          v72 = (v67 - v66) >> 1;
        if ((unint64_t)(v67 - v66) >= 0x7FFFFFFFFFFFFFFCLL)
          v73 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        if (v73)
        {
          if (v73 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v74 = v73;
          v75 = operator new(4 * v73);
          v73 = v74;
          v76 = &v75[4 * v71];
          *(_DWORD *)v76 = v69;
          v77 = (uint64_t)(v76 + 4);
          if (v68 == v66)
            goto LABEL_75;
        }
        else
        {
          v75 = 0;
          v76 = (char *)(4 * v71);
          *(_DWORD *)(4 * v71) = v69;
          v77 = 4 * v71 + 4;
          if (v68 == v66)
            goto LABEL_75;
        }
        v78 = v68 - 4 - v66;
        if (v78 < 0xBC)
        {
          v79 = v68;
          goto LABEL_74;
        }
        if (&v75[v68 - v66 - 4 - (v78 & 0xFFFFFFFFFFFFFFFCLL)] > &v75[v68 - v66 - 4])
        {
          v79 = v68;
          do
          {
LABEL_74:
            v80 = *((_DWORD *)v79 - 1);
            v79 -= 4;
            *((_DWORD *)v76 - 1) = v80;
            v76 -= 4;
          }
          while (v79 != v66);
          goto LABEL_75;
        }
        if (&v68[-(v78 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v68 - 4)
        {
          v79 = v68;
          goto LABEL_74;
        }
        if ((unint64_t)(v66 - v75) < 0x20)
        {
          v79 = v68;
          goto LABEL_74;
        }
        v85 = (v78 >> 2) + 1;
        v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
        v79 = &v68[-v86];
        v76 -= v86;
        v87 = &v75[4 * v71 - 16];
        v88 = v68 - 16;
        v89 = v85 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v90 = *(_OWORD *)v88;
          *(v87 - 1) = *((_OWORD *)v88 - 1);
          *v87 = v90;
          v87 -= 2;
          v88 -= 32;
          v89 -= 8;
        }
        while (v89);
        if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_74;
LABEL_75:
        v67 = &v75[4 * v73];
        v110 = v76;
        v111 = (char *)v77;
        v112 = v67;
        if (v66)
        {
          v68 = (char *)v77;
          v81 = &v75[4 * v73];
          operator delete(v66);
          v67 = v81;
          v66 = v76;
          v65 = v107;
          v111 = v68;
          v82 = *++v63;
          v62 += 12;
          if (v82 <= -2)
            goto LABEL_79;
        }
        else
        {
          v66 = v76;
          v68 = (char *)v77;
          v65 = v107;
          v111 = (char *)v77;
          v83 = *++v63;
          v62 += 12;
          if (v83 <= -2)
          {
            do
            {
LABEL_79:
              v84 = (__clz(__rbit64(((*(_QWORD *)v63 >> 7) & ~*(_QWORD *)v63 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v63 += v84;
              v62 += 12 * v84;
            }
            while (*v63 < -1);
          }
        }
LABEL_57:
        if (v63 == v65)
        {
          v91 = (int *)v110;
          goto LABEL_94;
        }
      }
    }
  }
  else
  {
    v63 = (char *)__p;
    do
    {
      v64 = (__clz(__rbit64(((*(_QWORD *)v63 >> 7) & ~*(_QWORD *)v63 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v63 += v64;
      v62 += 12 * v64;
    }
    while (*v63 < -1);
    v65 = (char *)__p + v115;
    if (v63 != (char *)__p + (_QWORD)v115)
      goto LABEL_56;
  }
  v68 = 0;
  v91 = 0;
LABEL_94:
  v92 = 126 - 2 * __clz((v68 - (char *)v91) >> 2);
  if (v68 == (char *)v91)
    v93 = 0;
  else
    v93 = v92;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v91, v68, (uint64_t)&v109, v93, 1);
  v95 = v110;
  v94 = v111;
  if (v110 != v111)
  {
    for (m = v110; m != v94; m += 4)
    {
      v99 = *v108;
      v100 = v108[1];
      LODWORD(v109) = *(_DWORD *)m ^ 1;
      v118 = 0;
      v101 = operator new(0x28uLL);
      v101[1] = v99;
      *v101 = &off_24F982DF8;
      v101[2] = (v100 - v99) >> 2;
      v101[3] = &v109;
      v101[4] = 1;
      v118 = v101;
      operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v101 + 1), v7);
      v97 = v118;
      if (v118 == v117)
      {
        v97 = v117;
        v98 = 4;
      }
      else
      {
        if (!v118)
          continue;
        v98 = 5;
      }
      (*(void (**)(void))(*v97 + 8 * v98))();
    }
  }
  if (v95)
    operator delete(v95);
  if ((_QWORD)v115)
  {
    operator delete(__p);
    __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v116 = 0;
    *(_QWORD *)&v115 = 0;
    v114 = 0uLL;
  }
  if (*((_QWORD *)&v115 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v115 + 1));
}

void sub_22DAA6248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::LoadEquivalenceNeqAC(uint64_t *a1, uint64_t a2, signed int a3, uint64_t a4, signed int a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v51;
  char *v52;
  void *__p;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _DWORD v57[2];
  _BYTE v58[24];
  _BYTE *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v12 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a7);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v12, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1034);
    v45 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: encoder->VariableIsFullyEncoded(var1) ", 52);
    goto LABEL_41;
  }
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v12, a5))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1035);
    v46 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: encoder->VariableIsFullyEncoded(var2) ", 52);
LABEL_41:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
  __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v54 = 0u;
  v55 = 0u;
  v56 = 0;
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v12, a3, &v51);
  v14 = v51;
  v13 = v52;
  if (v51 != v52)
  {
    v47 = a4;
    v48 = a6;
    do
    {
      v19 = 0;
      v22 = *((_DWORD *)v14 + 2);
      v23 = *(_QWORD *)v14 * a2;
      v24 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v23)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v23));
      v21 = v54;
      for (i = (v24 >> 7) ^ ((unint64_t)__p >> 12); ; i = v19 + v15)
      {
        v15 = i & v55;
        v16 = *(_QWORD *)((char *)__p + v15);
        v17 = ((v16 ^ (0x101010101010101 * (v24 & 0x7F))) - 0x101010101010101) & ~(v16 ^ (0x101010101010101
                                                                                            * (v24 & 0x7F))) & 0x8080808080808080;
        if (v17)
          break;
LABEL_8:
        if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
        {
          v18 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&__p, v24);
          v21 = v54;
          *(_QWORD *)(v54 + 12 * v18) = v23;
          goto LABEL_11;
        }
        v19 += 8;
      }
      while (1)
      {
        v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v55;
        if (*(_QWORD *)(v54 + 12 * v18) == v23)
          break;
        v17 &= v17 - 1;
        if (!v17)
          goto LABEL_8;
      }
LABEL_11:
      *(_DWORD *)(v21 + 12 * v18 + 8) = v22;
      v14 += 12;
    }
    while (v14 != v13);
    v14 = v51;
    a4 = v47;
    a6 = v48;
  }
  if (v14)
  {
    v52 = v14;
    operator delete(v14);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v12, a5, &v51);
  v25 = v51;
  v26 = v52;
  if (v51 != v52)
  {
    while (1)
    {
      v32 = 0;
      v42 = a6 - *(_QWORD *)v25 * a4;
      v43 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v42)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v42));
      v33 = (v43 >> 7) ^ ((unint64_t)__p >> 12);
      v44 = 0x101010101010101 * (v43 & 0x7F);
      while (1)
      {
        v27 = v33 & v55;
        v28 = *(_QWORD *)((char *)__p + v27);
        v29 = ((v28 ^ v44) - 0x101010101010101) & ~(v28 ^ v44) & 0x8080808080808080;
        if (v29)
          break;
LABEL_21:
        if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
          goto LABEL_29;
        v32 += 8;
        v33 = v32 + v27;
      }
      while (1)
      {
        v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v55;
        v31 = v54 + 12 * v30;
        if (*(_QWORD *)v31 == v42)
          break;
        v29 &= v29 - 1;
        if (!v29)
          goto LABEL_21;
      }
      if (v30 == (_QWORD)v55)
        goto LABEL_29;
      v34 = a4;
      v35 = a6;
      v36 = *a1;
      v37 = a1[1];
      v38 = *(_DWORD *)(v31 + 8) ^ 1;
      v57[0] = *((_DWORD *)v25 + 2) ^ 1;
      v57[1] = v38;
      v59 = 0;
      v39 = operator new(0x28uLL);
      v39[1] = v36;
      *v39 = &off_24F982DF8;
      v39[2] = (v37 - v36) >> 2;
      v39[3] = v57;
      v39[4] = 2;
      v59 = v39;
      operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v39 + 1), a7);
      v40 = v59;
      a6 = v35;
      a4 = v34;
      if (v59 == v58)
        break;
      if (v59)
      {
        v41 = 5;
LABEL_28:
        (*(void (**)(void))(*v40 + 8 * v41))();
      }
LABEL_29:
      v25 += 12;
      if (v25 == v26)
      {
        v25 = v51;
        goto LABEL_32;
      }
    }
    v40 = v58;
    v41 = 4;
    goto LABEL_28;
  }
LABEL_32:
  if (v25)
  {
    v52 = v25;
    operator delete(v25);
  }
  if ((_QWORD)v55)
  {
    operator delete(__p);
    __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v56 = 0;
    *(_QWORD *)&v55 = 0;
    v54 = 0uLL;
  }
  if (*((_QWORD *)&v55 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v55 + 1));
}

void sub_22DAA67EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  int64x2_t *v10;
  uint64_t *v11;
  unint64_t v12;
  int64x2_t *v13;
  uint64_t v14;
  int64x2_t v15;
  void *__p;
  void *v17;
  __int8 *v18;

  v8 = *(_BYTE **)a2;
  v7 = *(_BYTE **)(a2 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (int64x2_t *)operator new(v7 - v8);
    __p = v10;
    v18 = &v10->i8[8 * (v9 >> 3)];
    memmove(v10, v8, v9);
    v17 = v18;
    v11 = (uint64_t *)v10;
    if ((unint64_t)(v9 - 8) < 0x18)
      goto LABEL_14;
    v12 = ((unint64_t)(v9 - 8) >> 3) + 1;
    v11 = &v10->i64[v12 & 0x3FFFFFFFFFFFFFFCLL];
    v13 = v10 + 1;
    v14 = v12 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v15 = vnegq_s64(*v13);
      v13[-1] = vnegq_s64(v13[-1]);
      *v13 = v15;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_14:
      do
      {
        *v11 = -*v11;
        ++v11;
      }
      while (v11 != (uint64_t *)((char *)v10 + 8 * (v9 >> 3)));
    }
  }
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(a1, (uint64_t **)&__p, -a3, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_22DAA69E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(unsigned int **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int *v8;
  unsigned int *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  char *v40;
  void *__p;
  void *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45[2];
  int v46;
  uint64_t *v47;

  v9 = *a1;
  v8 = a1[1];
  v46 = 1;
  v10 = (char *)v8 - (char *)v9;
  v45[0] = v8 - v9;
  if (v8 != v9)
  {
    v11 = v10 >> 2;
    if (v10 >> 2 != 1)
      goto LABEL_3;
    goto LABEL_44;
  }
  v47 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v45, (int)&v46, "vars.size() >= 1");
  if (v47)
  {
    google::LogMessageFatal::LogMessageFatal(v45, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.h", 270, &v47);
    google::LogMessage::stream((google::LogMessage *)v45);
    goto LABEL_58;
  }
  v9 = *a1;
  v8 = a1[1];
  v10 = (char *)v8 - (char *)*a1;
  v11 = v10 >> 2;
  if (v10 >> 2 == 1)
  {
LABEL_44:
    v34 = **a2;
    v45[0] = v34;
    v46 = 0;
    if (v34)
    {
      if (v34 > 0)
      {
        v35 = *v9;
        *a4 = &off_24F983D90;
        a4[1] = v35;
        v28 = a3 / v34 - (a3 / v34 * v34 > a3);
        goto LABEL_52;
      }
LABEL_49:
      v36 = *v9;
      v37 = -a3 / -v34;
      *a4 = &off_24F983E10;
      a4[1] = v36;
      if (-(v34 * v37) >= -a3)
        v28 = -a3 / -v34;
      else
        v28 = v37 + 1;
      goto LABEL_52;
    }
    v47 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v45, (int)&v46, "c != 0");
    if (!v47)
    {
      v9 = *a1;
      goto LABEL_49;
    }
    google::LogMessageFatal::LogMessageFatal(v45, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.h", 273, &v47);
    google::LogMessage::stream((google::LogMessage *)v45);
LABEL_58:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v45);
  }
LABEL_3:
  if (v11 != 2)
  {
    if (v11 == 3)
    {
      v12 = *a2;
      v13 = **a2;
      if (v13 == 1 || v13 == -1)
      {
        v15 = v12[1];
        if (v15 == 1 || v15 == -1)
        {
          v17 = v12[2];
          if (v17 == 1 || v17 == -1)
          {
            v19 = *v9 ^ (v13 != 1);
            v20 = v9[1] ^ (v15 != 1);
            v21 = v9[2] ^ (v17 != 1);
            a4[3] = 0;
            v22 = operator new(0x20uLL);
            *(_QWORD *)v22 = &off_24F983F10;
            v22[2] = v19;
            v22[3] = v21;
            *((_QWORD *)v22 + 2) = a3;
            v22[6] = v20;
            a4[3] = v22;
            return;
          }
        }
      }
    }
    goto LABEL_32;
  }
  v23 = **a2;
  if (v23 == 1 || v23 == -1)
  {
    v25 = (*a2)[1];
    if (v25 == 1 || v25 == -1)
    {
      v27 = *v9 ^ (v23 != 1) | ((unint64_t)(v9[1] ^ (v25 != 1)) << 32);
      *a4 = &off_24F983E90;
      a4[1] = v27 ^ 0x100000000;
      v28 = -a3;
LABEL_52:
      a4[2] = v28;
      a4[3] = a4;
      return;
    }
  }
LABEL_32:
  v38 = 0;
  v39 = 0;
  v40 = 0;
  if (v8 != v9)
  {
    if (v10 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v29 = (char *)operator new(v10);
    v30 = &v29[4 * v11];
    v38 = v29;
    v40 = v30;
    memcpy(v29, v9, v10);
    v39 = v30;
  }
  __p = 0;
  v42 = 0;
  v43 = 0;
  v31 = *a2;
  v32 = (char *)a2[1] - (char *)*a2;
  if (v32)
  {
    if (v32 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    __p = operator new(v32);
    v43 = (char *)__p + 8 * (v32 >> 3);
    memcpy(__p, v31, v32);
    v42 = v43;
  }
  v44 = a3;
  a4[3] = 0;
  v33 = operator new(0x40uLL);
  *v33 = &off_24F983F90;
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v33 + 1, (uint64_t)&v38);
  a4[3] = v33;
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
}

void sub_22DAA6D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAA6D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAA6D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a10);
  _Unwind_Resume(a1);
}

void sub_22DAA6D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_22DAA6D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConditionalWeightedSumGreaterOrEqual<std::vector<long long>>(const void **a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  int64x2_t *v12;
  uint64_t *v13;
  unint64_t v14;
  int64x2_t *v15;
  uint64_t v16;
  int64x2_t v17;
  void *__p;
  void *v19;
  __int8 *v20;

  v10 = *(_BYTE **)a3;
  v9 = *(_BYTE **)(a3 + 8);
  v19 = 0;
  v20 = 0;
  __p = 0;
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (int64x2_t *)operator new(v9 - v10);
    __p = v12;
    v20 = &v12->i8[8 * (v11 >> 3)];
    memmove(v12, v10, v11);
    v19 = v20;
    v13 = (uint64_t *)v12;
    if ((unint64_t)(v11 - 8) < 0x18)
      goto LABEL_14;
    v14 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v13 = &v12->i64[v14 & 0x3FFFFFFFFFFFFFFCLL];
    v15 = v12 + 1;
    v16 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vnegq_s64(*v15);
      v15[-1] = vnegq_s64(v15[-1]);
      *v15 = v17;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_14:
      do
      {
        *v13 = -*v13;
        ++v13;
      }
      while (v13 != (uint64_t *)((char *)v12 + 8 * (v11 >> 3)));
    }
  }
  operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(a1, a2, (uint64_t **)&__p, -a4, a5);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_22DAA6EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(const void **a1@<X0>, char **a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v25;
  int64_t v26;
  const void *v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  void *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  void *__p;
  void *v43;
  char *v44;
  _BYTE v45[12];
  int v46;
  uint64_t *v47;

  v11 = *a2;
  v10 = a2[1];
  v46 = 1;
  v12 = v10 - v11;
  *(_QWORD *)v45 = (v10 - v11) >> 2;
  if (v10 == v11)
  {
    v47 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v45, (int)&v46, "vars.size() >= 1");
    if (v47)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v45, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.h", 398, &v47);
      google::LogMessage::stream((google::LogMessage *)v45);
      goto LABEL_66;
    }
    v11 = *a2;
    v10 = a2[1];
    v12 = v10 - *a2;
    v13 = v12 >> 2;
    if (v12 >> 2 != 1)
      goto LABEL_3;
LABEL_49:
    *(_QWORD *)v45 = **a3;
    v30 = *(_QWORD *)v45;
    v46 = 0;
    if (*(_QWORD *)v45)
    {
      v31 = *(_DWORD *)*a2;
      if (*(uint64_t *)v45 > 0)
        goto LABEL_51;
      goto LABEL_56;
    }
    v47 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v45, (int)&v46, "coefficients[0] != 0");
    if (!v47)
    {
      v30 = **a3;
      v31 = *(_DWORD *)*a2;
      if (v30 > 0)
      {
LABEL_51:
        v32 = a4 / v30 - (a4 / v30 * v30 > a4);
        v31 ^= 1u;
        if (v32 >= (uint64_t)0x8000000000000002)
          v33 = -v32;
        else
          v33 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_59:
        *(_DWORD *)v45 = v31;
        *(_QWORD *)&v45[4] = v33;
        operations_research::sat::Implication((uint64_t)a1, *(uint64_t *)v45, SHIDWORD(v33), a5);
        return;
      }
LABEL_56:
      v34 = -a4 / -v30;
      if (-(v30 * v34) >= -a4)
        v33 = -a4 / -v30;
      else
        v33 = v34 + 1;
      goto LABEL_59;
    }
    google::LogMessageFatal::LogMessageFatal((unint64_t *)v45, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.h", 400, &v47);
    google::LogMessage::stream((google::LogMessage *)v45);
LABEL_66:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v45);
  }
  v13 = v12 >> 2;
  if (v12 >> 2 == 1)
    goto LABEL_49;
LABEL_3:
  if (v13 == 2)
  {
    v21 = **a3;
    if (v21 == 1 || v21 == -1)
    {
      v23 = (*a3)[1];
      if (v23 == 1 || v23 == -1)
      {
        operations_research::sat::ConditionalSum2LowerOrEqual(*(_DWORD *)v11 ^ (v21 != 1), *((_DWORD *)v11 + 1) ^ (v23 != 1), a4, (uint64_t)a1, a5);
        return;
      }
    }
  }
  else if (v13 == 3)
  {
    v14 = *a3;
    v15 = **a3;
    if (v15 == 1 || v15 == -1)
    {
      v17 = v14[1];
      if (v17 == 1 || v17 == -1)
      {
        v19 = v14[2];
        if (v19 == 1 || v19 == -1)
        {
          operations_research::sat::ConditionalSum3LowerOrEqual(*(_DWORD *)v11 ^ (v15 != 1), *((_DWORD *)v11 + 1) ^ (v17 != 1), *((_DWORD *)v11 + 2) ^ (v19 != 1), a4, (uint64_t)a1, a5);
          return;
        }
      }
    }
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = operator new(v12);
    v37 = (char *)v35 + 4 * v13;
    memcpy(v35, v11, v12);
    v36 = v37;
  }
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v25 = *a3;
  v26 = (char *)a3[1] - (char *)*a3;
  if (v26)
  {
    if (v26 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v38 = operator new(v26);
    v40 = (char *)v38 + 8 * (v26 >> 3);
    memcpy(v38, v25, v26);
    v39 = v40;
  }
  v41 = a4;
  __p = 0;
  v43 = 0;
  v44 = 0;
  v27 = *a1;
  v28 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  if (v28)
  {
    if (v28 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    __p = operator new(v28);
    v44 = (char *)__p + 4 * (v28 >> 2);
    memcpy(__p, v27, v28);
    v43 = v44;
  }
  *(_QWORD *)(a5 + 24) = 0;
  v29 = operator new(0x58uLL);
  *v29 = &off_24F9841D8;
  operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v29 + 1, (uint64_t)&v35);
  *(_QWORD *)(a5 + 24) = v29;
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_22DAA72D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAA72D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAA72E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::~function((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22DAA72FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::~function((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22DAA7310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;
  void *v19;

  if (a16)
  {
    operator delete(a16);
    v18 = a12;
    if (!a12)
    {
LABEL_3:
      v19 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v18 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v18);
  v19 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v19);
  goto LABEL_5;
}

void sub_22DAA7370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9)
    JUMPOUT(0x22DAA7334);
  JUMPOUT(0x22DAA732CLL);
}

void operations_research::sat::LoadAllDiffConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  operations_research::sat::IntegerTrail *v7;
  uint64_t v8;
  signed int *v9;
  signed int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  signed int v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *__p;
  signed int *v20;
  const operations_research::sat::ConstraintProto *v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 13)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_AllDifferentConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)&__p);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  v9 = (signed int *)__p;
  v10 = v20;
  if (__p == v20)
  {
    v13 = 0;
    goto LABEL_12;
  }
  v11 = v8;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = *v9;
    v12 += operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v11, *v9);
    if (v13 <= 1
              - *(_QWORD *)(*((_QWORD *)v7 + 5) + 12 * v14)
              - *(_QWORD *)(*((_QWORD *)v7 + 5) + 12 * (v14 ^ 1)))
      v13 = 1 - *(_QWORD *)(*((_QWORD *)v7 + 5) + 12 * v14) - *(_QWORD *)(*((_QWORD *)v7 + 5) + 12 * (v14 ^ 1));
    ++v9;
  }
  while (v9 != v10);
  if (v12 == ((char *)v20 - (_BYTE *)__p) >> 2)
  {
LABEL_12:
    if (v13 >= 1024)
      goto LABEL_17;
    operations_research::sat::AllDifferentBinary((uint64_t)&__p, (uint64_t)v26);
    v21 = a2;
    if (!v27)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v27 + 48))(v27, &v21);
    v15 = v27;
    if (v27 == v26)
    {
      v16 = 4;
      v15 = v26;
    }
    else
    {
      if (!v27)
        goto LABEL_22;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_22:
    operations_research::sat::AllDifferentAC((uint64_t)&__p, (uint64_t)v24);
    v21 = a2;
    if (!v25)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v25 + 48))(v25, &v21);
    v17 = v25;
    if (v25 == v24)
    {
      v18 = 4;
      v17 = v24;
      goto LABEL_27;
    }
    goto LABEL_24;
  }
LABEL_17:
  operations_research::sat::AllDifferentOnBounds((uint64_t)&__p, (uint64_t)v22);
  v21 = a2;
  if (!v23)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v23 + 48))(v23, &v21);
  v17 = v23;
  if (v23 == v22)
  {
    v18 = 4;
    v17 = v22;
    goto LABEL_27;
  }
LABEL_24:
  if (!v17)
    goto LABEL_28;
  v18 = 5;
LABEL_27:
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_28:
  if (__p)
  {
    v20 = (signed int *)__p;
    operator delete(__p);
  }
}

void sub_22DAA75F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v26;
  uint64_t v27;

  v26 = a21;
  if (a21 == &a18)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadIntProdConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15[2];
  int v16;
  uint64_t *v17;
  void *__p;
  _BYTE *v19;
  uint64_t (**v20)();
  uint64_t v21;
  int v22;
  uint64_t (***v23)();
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 11)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  v7 = *((_DWORD *)v6 + 9);
  if (~v7 <= v7)
    v8 = *((_DWORD *)v6 + 9);
  else
    v8 = ~v7;
  v9 = *(_DWORD *)(*v5 + 4 * v8);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)&__p);
  v10 = (uint64_t *)__p;
  v15[0] = (v19 - (_BYTE *)__p) >> 2;
  v16 = 2;
  if (v19 - (_BYTE *)__p != 8)
  {
    v17 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v15, (int)&v16, "vars.size() == 2");
    if (v17)
    {
      google::LogMessageFatal::LogMessageFatal(v15, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1234, &v17);
      v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "General int_prod not supported yet.");
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v15);
    }
    v10 = (uint64_t *)__p;
  }
  v11 = *v10;
  v20 = &off_24F982F88;
  v21 = v11;
  v22 = v9 ^ (v7 >> 31);
  v23 = &v20;
  operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)&v21, (uint64_t)a2);
  v12 = v23;
  if (v23 == &v20)
  {
    v13 = 4;
    v12 = &v20;
  }
  else
  {
    if (!v23)
      goto LABEL_13;
    v13 = 5;
  }
  ((void (*)(uint64_t (***)()))(*v12)[v13])(v12);
LABEL_13:
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_22DAA7824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DAA782C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadIntDivConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  signed int v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;
  unint64_t v23;
  void *__p[3];
  uint64_t (**v25)();
  uint64_t v26;
  int v27;
  uint64_t (***v28)();
  uint64_t (**v29)();
  _QWORD v30[2];
  uint64_t (***v31)();
  uint64_t (**v32)();
  unsigned int v33[4];
  uint64_t (***v34)();
  uint64_t (**v35)();
  unsigned int v36[4];
  uint64_t (***v37)();
  uint64_t (**v38)();
  signed int v39;
  uint64_t (***v40)();
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 7)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  v7 = *((_DWORD *)v6 + 9);
  if (~v7 <= v7)
    v8 = *((_DWORD *)v6 + 9);
  else
    v8 = ~v7;
  v9 = *(_DWORD *)(*v5 + 4 * v8);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)__p);
  v10 = *((_DWORD *)__p[0] + 1);
  v38 = &off_24F983188;
  v39 = v10;
  v40 = &v38;
  v11 = (char *)a2 + 32;
  v12 = (_QWORD *)*((_QWORD *)a2 + 4);
  do
  {
    v13 = v12[4];
    v14 = v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v15 = v12;
    else
      v15 = v12 + 1;
    if (v14)
      v11 = (char *)v12;
    v12 = (_QWORD *)*v15;
  }
  while (*v15);
  v16 = v9 ^ (v7 >> 31);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 5) + 40) + 12 * v10)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 5) + 40) + 12 * (v10 ^ 1))))
  {
    v35 = &off_24F983218;
    v36[0] = v10;
    v37 = &v35;
    v17 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v36, (uint64_t)a2);
    v18 = v37;
    if (v37 == &v35)
    {
      v19 = 4;
      v18 = &v35;
    }
    else
    {
      if (!v37)
        goto LABEL_23;
      v19 = 5;
    }
    (*v18)[v19]();
LABEL_23:
    v23 = *(unsigned int *)__p[0] | (unint64_t)(v16 << 32);
    if (v17 == 1)
    {
      v32 = &off_24F983298;
      *(_QWORD *)v33 = v23;
      v34 = &v32;
      operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(v33, (uint64_t)a2);
      v21 = v34;
      if (v34 == &v32)
      {
        v22 = 4;
        v21 = &v32;
        goto LABEL_29;
      }
    }
    else
    {
      v29 = &off_24F983398;
      v30[0] = v17;
      v30[1] = v23;
      v31 = &v29;
      operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)v30, (uint64_t)a2);
      v21 = v31;
      if (v31 == &v29)
      {
        v22 = 4;
        v21 = &v29;
        goto LABEL_29;
      }
    }
    goto LABEL_27;
  }
  v20 = *(_QWORD *)__p[0];
  v25 = &off_24F983450;
  v26 = v20;
  v27 = v16;
  v28 = &v25;
  operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)&v26, (uint64_t)a2);
  v21 = v28;
  if (v28 == &v25)
  {
    v22 = 4;
    v21 = &v25;
    goto LABEL_29;
  }
LABEL_27:
  if (!v21)
    goto LABEL_30;
  v22 = 5;
LABEL_29:
  (*v21)[v22]();
LABEL_30:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22DAA7AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a19;
  if (a19 == v23)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadIntMinConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p[3];
  const operations_research::sat::ConstraintProto *v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 10)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  v7 = *((_DWORD *)v6 + 9);
  if (~v7 <= v7)
    v8 = *((_DWORD *)v6 + 9);
  else
    v8 = ~v7;
  v9 = *(_DWORD *)(*v5 + 4 * v8);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)__p);
  operations_research::sat::IsEqualToMinOf(v9 ^ (v7 >> 31), (uint64_t)__p, (uint64_t)v14);
  v13 = a2;
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v15 + 48))(v15, &v13);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22DAA7CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::IsEqualToMinOf(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a2);
    v9 = &v8[4 * (v7 >> 2)];
    memcpy(v8, v6, v7);
  }
  *(_QWORD *)(a3 + 24) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24F983508;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  v11 = v9 - v8;
  if (v11)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    v10[1] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    v10[3] = v13;
    memcpy(v12, v8, v11);
    v10[2] = v13;
  }
  *((_DWORD *)v10 + 8) = a1;
  *(_QWORD *)(a3 + 24) = v10;
  if (v8)
    operator delete(v8);
}

void sub_22DAA7E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::GetExprFromProto(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  void *__p[2];
  void *v31[2];
  __int128 v32;
  uint64_t v33;

  v33 = 0;
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  *(_OWORD *)__p = 0u;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(a2, (int *)(a1 + 16), (int **)&v28);
  v27 = a3;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v28;
  v31[0] = v29;
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = (char *)v32;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v6);
      if ((unint64_t)v7 >= *((_QWORD *)&v32 + 1))
        break;
      *(_QWORD *)v7 = v9;
      v8 = (uint64_t)(v7 + 8);
LABEL_6:
      *(_QWORD *)&v32 = v8;
      ++v6;
      v7 = (char *)v8;
      if (v6 >= v5)
        goto LABEL_34;
    }
    v10 = (char *)v31[1];
    v11 = v7 - (char *)v31[1];
    v12 = (v7 - (char *)v31[1]) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = *((_QWORD *)&v32 + 1) - (unint64_t)v31[1];
    if ((uint64_t)(*((_QWORD *)&v32 + 1) - (unint64_t)v31[1]) >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(8 * v15);
      v17 = &v16[8 * v12];
      *v17 = v9;
      v8 = (uint64_t)(v17 + 1);
      if (v7 == v10)
        goto LABEL_22;
    }
    else
    {
      v16 = 0;
      v17 = (_QWORD *)(8 * v12);
      *(_QWORD *)(8 * v12) = v9;
      v8 = 8 * v12 + 8;
      if (v7 == v10)
        goto LABEL_22;
    }
    v18 = v7 - 8 - v10;
    if (v18 >= 0x168)
    {
      if (&v16[v11 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - 8])
      {
        v19 = v7;
      }
      else if (&v7[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8)
      {
        v19 = v7;
      }
      else if ((unint64_t)(v7 - &v16[v11]) >= 0x20)
      {
        v21 = (v18 >> 3) + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = &v7[-v22];
        v17 = (_QWORD *)((char *)v17 - v22);
        v23 = &v16[8 * v12 - 16];
        v24 = v7 - 16;
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          v31[1] = v17;
          *(_QWORD *)&v32 = v8;
          *((_QWORD *)&v32 + 1) = &v16[8 * v15];
          if (v10)
          {
            operator delete(v10);
            v5 = *(_DWORD *)(a1 + 40);
          }
          goto LABEL_6;
        }
      }
      else
      {
        v19 = v7;
      }
    }
    else
    {
      v19 = v7;
    }
    do
    {
      v20 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *--v17 = v20;
    }
    while (v19 != v10);
    goto LABEL_22;
  }
LABEL_34:
  v33 = *(_QWORD *)(a1 + 64);
  operations_research::sat::CanonicalizeExpr(__p, v27);
  if (v31[1])
  {
    *(void **)&v32 = v31[1];
    operator delete(v31[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22DAA80F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_22DAA8104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_22DAA8118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_22DAA812C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadLinMaxConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20[3];
  void *v21;
  void *v22;
  void *v23[2];
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unint64_t v30;
  void *v31[3];
  void *v32;
  void *v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 27)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  v7 = (uint64_t *)v6[5];
  if (v7)
    v8 = v7;
  else
    v8 = &operations_research::sat::_LinearExpressionProto_default_instance_;
  operations_research::sat::GetExprFromProto((uint64_t)v8, v5, (uint64_t)v31);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  if (*((_DWORD *)this + 15) == 27)
    v9 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v9 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  std::vector<operations_research::sat::LinearExpression>::reserve((char **)&v28, *((int *)v9 + 6));
  v10 = 0;
  while (*((_DWORD *)this + 15) == 27)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 6);
    if (v10 >= *((int *)v11 + 6))
      goto LABEL_27;
LABEL_17:
    operations_research::sat::GetExprFromProto(*(_QWORD *)(v11[4] + 8 * v10 + 8), v5, (uint64_t)v20);
    operations_research::sat::NegationOf((uint64_t)v20, (uint64_t)v23);
    v12 = v29;
    if ((unint64_t)v29 >= v30)
    {
      v29 = std::vector<operations_research::sat::LinearExpression>::__push_back_slow_path<operations_research::sat::LinearExpression>(&v28, (uint64_t)v23);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      *((_QWORD *)v29 + 2) = 0;
      *((_QWORD *)v12 + 3) = 0;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *(_OWORD *)v12 = *(_OWORD *)v23;
      *((_QWORD *)v12 + 2) = v24;
      v23[0] = 0;
      v23[1] = 0;
      v24 = 0;
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 5) = 0;
      *(_OWORD *)(v12 + 24) = *(_OWORD *)__p;
      *((_QWORD *)v12 + 5) = v26;
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      *((_QWORD *)v12 + 6) = v27;
      v29 = v12 + 56;
    }
    if (v23[0])
    {
      v23[1] = v23[0];
      operator delete(v23[0]);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v20[0])
    {
      v20[1] = v20[0];
      operator delete(v20[0]);
    }
    ++v10;
  }
  if (v10 < (int)qword_25408AAC8)
  {
    v11 = &operations_research::sat::_LinearArgumentProto_default_instance_;
    goto LABEL_17;
  }
LABEL_27:
  operations_research::sat::NegationOf((uint64_t)v31, (uint64_t)v23);
  operations_research::sat::IsEqualToMinOf((uint64_t)v23, (uint64_t *)&v28, (uint64_t)v34);
  v20[0] = a2;
  if (!v35)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v35 + 48))(v35, v20);
  v13 = v35;
  if (v35 == v34)
  {
    v14 = 4;
    v13 = v34;
LABEL_32:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  else if (v35)
  {
    v14 = 5;
    goto LABEL_32;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  v15 = (char *)v28;
  if (v28)
  {
    v16 = v29;
    v17 = v28;
    if (v29 != v28)
    {
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 4);
        if (v18)
        {
          *((_QWORD *)v16 - 3) = v18;
          operator delete(v18);
        }
        v19 = (void *)*((_QWORD *)v16 - 7);
        if (v19)
        {
          *((_QWORD *)v16 - 6) = v19;
          operator delete(v19);
        }
        v16 -= 56;
      }
      while (v16 != v15);
      v17 = v28;
    }
    v29 = v15;
    operator delete(v17);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
}

void sub_22DAA8440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  std::vector<operations_research::sat::LinearExpression>::~vector[abi:ne180100](&a24);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a27);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::LinearExpression>::reserve(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v2 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = a1[1];
    v5 = 56 * a2;
    v6 = (char *)operator new(56 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_15:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *(_OWORD *)(v10 - 56) = *(_OWORD *)&v4[v9 - 56];
        *((_QWORD *)v10 - 5) = *(_QWORD *)&v4[v9 - 40];
        *((_QWORD *)v11 - 7) = 0;
        *((_QWORD *)v11 - 6) = 0;
        *((_QWORD *)v11 - 5) = 0;
        *((_OWORD *)v10 - 2) = *(_OWORD *)&v4[v9 - 32];
        v12 = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v10 - 2) = *(_QWORD *)&v4[v9 - 16];
        *((_QWORD *)v11 - 4) = 0;
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v10 - 1) = v12;
        v9 -= 56;
      }
      while (&v4[v9] != v2);
      v13 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v13)
      {
        do
        {
          v14 = (void *)*((_QWORD *)v2 - 4);
          if (v14)
          {
            *((_QWORD *)v2 - 3) = v14;
            operator delete(v14);
          }
          v15 = (void *)*((_QWORD *)v2 - 7);
          if (v15)
          {
            *((_QWORD *)v2 - 6) = v15;
            operator delete(v15);
          }
          v2 -= 56;
        }
        while (v2 != v13);
        v2 = v13;
      }
      if (v2)
        goto LABEL_15;
    }
  }
}

void operations_research::sat::IsEqualToMinOf(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10[3];
  void *v11;
  void *v12;
  void *__p;
  char *v14;
  uint64_t v15;

  operations_research::sat::LinearExpression::LinearExpression(v10, a1);
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(&__p, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>>(a3, (uint64_t)v10);
  v5 = (char *)__p;
  if (__p)
  {
    v6 = v14;
    v7 = __p;
    if (v14 != __p)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 4);
        if (v8)
        {
          *((_QWORD *)v6 - 3) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 - 7);
        if (v9)
        {
          *((_QWORD *)v6 - 6) = v9;
          operator delete(v9);
        }
        v6 -= 56;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v14 = v5;
    operator delete(v7);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
}

void sub_22DAA8730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22DAA8744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void **std::vector<operations_research::sat::LinearExpression>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 7);
        if (v6)
        {
          *((_QWORD *)v3 - 6) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::LoadIntMaxConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p[3];
  const operations_research::sat::ConstraintProto *v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 9)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  v7 = *((_DWORD *)v6 + 9);
  if (~v7 <= v7)
    v8 = *((_DWORD *)v6 + 9);
  else
    v8 = ~v7;
  v9 = *(_DWORD *)(*v5 + 4 * v8);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)__p);
  operations_research::sat::IsEqualToMaxOf(v9 ^ (v7 >> 31), (uint64_t)__p, (uint64_t)v14);
  v13 = a2;
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v15 + 48))(v15, &v13);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22DAA88EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::IsEqualToMaxOf(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a2);
    v9 = &v8[4 * (v7 >> 2)];
    memcpy(v8, v6, v7);
  }
  *(_QWORD *)(a3 + 24) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24F9836F8;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  v11 = v9 - v8;
  if (v11)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    v10[1] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    v10[3] = v13;
    memcpy(v12, v8, v11);
    v10[2] = v13;
  }
  *((_DWORD *)v10 + 8) = a1;
  *(_QWORD *)(a3 + 24) = v10;
  if (v8)
    operator delete(v8);
}

void sub_22DAA8A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadNoOverlapConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  operations_research::sat::CpModelMapping *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[3];
  const operations_research::sat::ConstraintProto *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = (operations_research::sat::CpModelMapping *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 20)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (char **)__p);
  operations_research::sat::Disjunctive((uint64_t)__p, (uint64_t)v11);
  v10 = a2;
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v12 + 48))(v12, &v10);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22DAA8BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(operations_research::sat::CpModelMapping *a1@<X0>, int *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  operations_research::sat::CpModelMapping *v5;
  char *v6;
  char *v7;
  char *v8;
  int *v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int *v28;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  if ((_DWORD)v4)
  {
    v5 = a1;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (int *)*((_QWORD *)a2 + 1);
    v10 = &v9[v4];
    v28 = v10;
    while (1)
    {
      while (1)
      {
        v11 = operations_research::sat::CpModelMapping::Interval(v5, *v9);
        v12 = v11;
        if (v8 >= v7)
          break;
        *(_DWORD *)v8 = v11;
        v8 += 4;
        a3[1] = v8;
        if (++v9 == v10)
          return;
      }
      v13 = (v8 - v6) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v7 - v6) >> 1 > v14)
        v14 = (v7 - v6) >> 1;
      if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = operator new(4 * v15);
        v17 = &v16[4 * v13];
        *(_DWORD *)v17 = v12;
        v18 = (uint64_t)(v17 + 4);
        if (v8 == v6)
          goto LABEL_19;
      }
      else
      {
        v16 = 0;
        v17 = (char *)(4 * v13);
        *(_DWORD *)(4 * v13) = v12;
        v18 = 4 * v13 + 4;
        if (v8 == v6)
          goto LABEL_19;
      }
      v19 = v8 - 4 - v6;
      if (v19 < 0xBC)
      {
        v20 = v8;
        goto LABEL_18;
      }
      if (&v16[v8 - v6 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v8 - v6 - 4])
        break;
      if (&v8[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v8 - 4)
      {
        v20 = v8;
        goto LABEL_18;
      }
      if ((unint64_t)(v6 - v16) < 0x20)
      {
        v20 = v8;
        goto LABEL_18;
      }
      v22 = (v19 >> 2) + 1;
      v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v20 = &v8[-v23];
      v17 -= v23;
      v24 = &v16[4 * v13 - 16];
      v25 = v8 - 16;
      v26 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_18;
LABEL_19:
      v7 = &v16[4 * v15];
      *a3 = v17;
      a3[1] = (char *)v18;
      a3[2] = v7;
      if (v6)
        operator delete(v6);
      v6 = v17;
      v10 = v28;
      v5 = a1;
      a3[1] = (char *)v18;
      ++v9;
      v8 = (char *)v18;
      if (v9 == v28)
        return;
    }
    v20 = v8;
    do
    {
LABEL_18:
      v21 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v17 - 1) = v21;
      v17 -= 4;
    }
    while (v20 != v6);
    goto LABEL_19;
  }
}

void sub_22DAA8E28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadNoOverlap2dConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t *v3;
  operations_research::sat::CpModelMapping *v6;
  operations_research::sat::CpModelMapping *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  void *__p[3];
  void *v14[3];
  const operations_research::sat::ConstraintProto *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 15) == 21)
    v3 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v3 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
  if (!*((_DWORD *)v3 + 4))
    return;
  v6 = (operations_research::sat::CpModelMapping *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v7 = v6;
  if (*((_DWORD *)this + 15) == 21)
    v8 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v8 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v6, (int *)v8 + 4, (char **)v14);
  if (*((_DWORD *)this + 15) == 21)
    v9 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v9 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v7, (int *)v9 + 10, (char **)__p);
  if (*((_DWORD *)this + 15) == 21)
    v10 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v10 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
  operations_research::sat::NonOverlappingRectangles((uint64_t)v14, (uint64_t)__p, *((_BYTE *)v10 + 60) == 0, (uint64_t)v16);
  v15 = a2;
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v17 + 48))(v17, &v15);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_19;
  }
  if (v17)
  {
    v12 = 5;
LABEL_19:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
}

void sub_22DAA8FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_objecta, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Exception *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = exception_objecta;
    if (!exception_objecta)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = exception_objecta;
    if (!exception_objecta)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NonOverlappingRectangles(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  char *v19;
  void *__p;
  void *v21;
  char *v22;
  char v23;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  v8 = *(const void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = v7 - *(_QWORD *)a1;
  if (v7 != *(_QWORD *)a1)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - *(_QWORD *)a1);
    v11 = &v10[4 * (v9 >> 2)];
    v17 = v10;
    v19 = v11;
    memcpy(v10, v8, v9);
    v18 = v11;
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  v12 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13)
  {
    if (v13 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v13);
    v15 = &v14[4 * (v13 >> 2)];
    __p = v14;
    v22 = v15;
    memcpy(v14, v12, v13);
    v21 = v15;
  }
  v23 = a3;
  *(_QWORD *)(a4 + 24) = 0;
  v16 = operator new(0x40uLL);
  *v16 = &off_24F9837F8;
  operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(v16 + 1), (uint64_t)&v17);
  *(_QWORD *)(a4 + 24) = v16;
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_22DAA9178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a10);
  _Unwind_Resume(a1);
}

void sub_22DAA9194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_22DAA91A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadCumulativeConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  int *v3;
  operations_research::sat::CpModelMapping *v5;
  operations_research::sat::CpModelMapping *v6;
  _DWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int *v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  int v34;
  __int128 v35;
  int *v36;
  int *v37;
  void *__p;
  char *v39;
  unint64_t v40;
  void *v41[3];
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v3 = (int *)a2;
  v44 = *MEMORY[0x24BDAC8D0];
  v5 = (operations_research::sat::CpModelMapping *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v6 = v5;
  v8 = *((_DWORD *)this + 15);
  v7 = (_DWORD *)((char *)this + 60);
  if (v8 == 22)
    v9 = *(uint64_t **)(v7 - 3);
  else
    v9 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v5, (int *)v9 + 4, (char **)v41);
  if (*v7 == 22)
    v10 = *(uint64_t **)(v7 - 3);
  else
    v10 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
  v11 = *((_DWORD *)v10 + 15);
  if (~v11 <= v11)
    v12 = *((_DWORD *)v10 + 15);
  else
    v12 = ~v11;
  v13 = *(_DWORD *)(*(_QWORD *)v6 + 4 * v12);
  __p = 0;
  v39 = 0;
  v40 = 0;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v6, (int *)v10 + 10, &v36);
  v14 = v36;
  v15 = v37;
  if (v36 != v37)
  {
    v31 = v13;
    v32 = v11;
    v33 = v3;
    v16 = v39;
    do
    {
      v18 = *v14;
      if ((unint64_t)v16 < v40)
      {
        *(_DWORD *)v16 = v18;
        *(_OWORD *)(v16 + 4) = xmmword_22DCE5E30;
        v17 = v16 + 20;
      }
      else
      {
        v19 = (char *)__p;
        v20 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)__p) >> 2);
        v21 = v20 + 1;
        if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v40 - (_QWORD)__p) >> 2) > v21)
          v21 = 0x999999999999999ALL * ((uint64_t)(v40 - (_QWORD)__p) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (_QWORD)__p) >> 2) >= 0x666666666666666)
          v22 = 0xCCCCCCCCCCCCCCCLL;
        else
          v22 = v21;
        if (v22)
        {
          if (v22 > 0xCCCCCCCCCCCCCCCLL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = (char *)operator new(20 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[20 * v20];
        *(_DWORD *)v24 = v18;
        *(_OWORD *)(v24 + 4) = xmmword_22DCE5E30;
        v25 = v24;
        if (v16 != v19)
        {
          do
          {
            v26 = *(_OWORD *)(v16 - 20);
            *((_DWORD *)v25 - 1) = *((_DWORD *)v16 - 1);
            *(_OWORD *)(v25 - 20) = v26;
            v25 -= 20;
            v16 -= 20;
          }
          while (v16 != v19);
          v16 = (char *)__p;
        }
        v27 = &v23[20 * v22];
        v17 = v24 + 20;
        __p = v25;
        v39 = v24 + 20;
        v40 = (unint64_t)v27;
        if (v16)
          operator delete(v16);
      }
      v39 = v17;
      ++v14;
      v16 = v17;
    }
    while (v14 != v15);
    v14 = v36;
    v3 = v33;
    v13 = v31;
    v11 = v32;
  }
  v28 = v13 ^ (v11 >> 31);
  if (v14)
  {
    v37 = v14;
    operator delete(v14);
  }
  v34 = v28;
  v35 = xmmword_22DCE5E30;
  operations_research::sat::Cumulative((uint64_t)v41, (uint64_t)&__p, (__int128 *)&v34, 0, (uint64_t)v42);
  v36 = v3;
  if (!v43)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, int **))(*(_QWORD *)v43 + 48))(v43, &v36);
  v29 = v43;
  if (v43 == v42)
  {
    v30 = 4;
    v29 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_39;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_39:
  if (__p)
  {
    v39 = (char *)__p;
    operator delete(__p);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
}

void sub_22DAA94CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (!a22)
    _Unwind_Resume(exception_object);
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::DetectEquivalencesInElementConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  const operations_research::sat::ConstraintProto *v3;
  _QWORD *v5;
  int *v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t (***v25)();
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  unsigned int v36;
  int64_t v37;
  uint64_t (***v38)();
  uint64_t v39;
  const operations_research::Domain *v40;
  uint64_t *v41;
  uint64_t **v42;
  int64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t (***v48)();
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  const char *v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  BOOL v69;
  _QWORD *v70;
  unsigned int v71;
  int64_t v72;
  uint64_t (***v73)();
  uint64_t v74;
  const operations_research::sat::ConstraintProto *v75;
  uint64_t *v76;
  uint64_t **v77;
  int64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t **v81;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  int v87;
  operations_research::sat::IntegerTrail *v88;
  _QWORD *v89;
  unint64_t v90;
  __int128 v91;
  void *v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  __int128 __p;
  void *v99[3];
  uint64_t (**v100)();
  unsigned int v101[4];
  uint64_t (***v102)();
  uint64_t (**v103)();
  int v104;
  uint64_t (***v105)();
  uint64_t (**v106)();
  signed int v107;
  uint64_t (***v108)();
  uint64_t (**v109)();
  unsigned int v110[4];
  uint64_t (***v111)();
  uint64_t (**v112)();
  int v113;
  uint64_t (***v114)();
  uint64_t (**v115)();
  signed int v116;
  uint64_t (***v117)();
  uint64_t (**v118)();
  int v119;
  uint64_t (***v120)();
  uint64_t (**v121)();
  int v122;
  uint64_t (***v123)();
  uint64_t v124;

  v3 = a2;
  v124 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v86 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  v88 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v3);
  if (*((_DWORD *)this + 15) == 14)
    v6 = (int *)*((_QWORD *)this + 6);
  else
    v6 = (int *)&operations_research::sat::_ElementConstraintProto_default_instance_;
  v8 = v6[9];
  v7 = v6[10];
  if ((int)~v8 <= (int)v8)
    v9 = v6[9];
  else
    v9 = ~v8;
  v10 = *(_DWORD *)(*v5 + 4 * v9);
  if (~v7 <= v7)
    v11 = v6[10];
  else
    v11 = ~v7;
  v12 = *(_DWORD *)(*v5 + 4 * v11);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, v6 + 4, (int **)v99);
  v121 = &off_24F983188;
  v122 = v10 ^ (v8 >> 31);
  v123 = &v121;
  v14 = (char *)v3 + 32;
  v13 = (_QWORD *)*((_QWORD *)v3 + 4);
  v89 = (_QWORD *)((char *)v3 + 32);
  v15 = v13;
  do
  {
    v16 = v15[4];
    v17 = v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v18 = v15;
    else
      v18 = v15 + 1;
    if (v17)
      v14 = (char *)v15;
    v15 = (_QWORD *)*v18;
  }
  while (*v18);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 5) + 40) + 12 * (int)(v10 ^ (v8 >> 31)))
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 5) + 40) + 12 * (int)(v10 ^ (v8 >> 31) ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v97, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1339);
    v83 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Check failed: !m->Get(IsFixed(index)) ", 38);
    goto LABEL_139;
  }
  v118 = &off_24F983188;
  v87 = v12 ^ (v7 >> 31);
  v119 = v87;
  v120 = &v118;
  v19 = (char *)v3 + 32;
  do
  {
    v20 = v13[4];
    v21 = v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v22 = v13;
    else
      v22 = v13 + 1;
    if (v21)
      v19 = (char *)v13;
    v13 = (_QWORD *)*v22;
  }
  while (*v22);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v19 + 5) + 40) + 12 * v87)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v19 + 5) + 40) + 12 * (v87 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v97, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1340);
    v84 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Check failed: !m->Get(IsFixed(target)) ", 39);
LABEL_139:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v97);
  }
  v96 = 0;
  v97 = 0;
  v23 = &v95;
  v94 = (uint64_t *)&v95;
  v95 = 0;
  v115 = &off_24F980458;
  v85 = v10 ^ (v8 >> 31);
  v116 = v85;
  v117 = &v115;
  v24 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v24, v116))
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v24, v116);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v24, v116, (char **)&v92);
  v25 = v117;
  if (v117 == &v115)
  {
    v26 = 4;
    v25 = &v115;
  }
  else
  {
    if (!v117)
      goto LABEL_35;
    v26 = 5;
  }
  (*v25)[v26]();
LABEL_35:
  v28 = v92;
  v27 = v93;
  if (v92 == v93)
    goto LABEL_67;
  do
  {
    while (1)
    {
      v29 = *(_DWORD *)((char *)v99[0] + ((uint64_t)(*v28 << 32) >> 30));
      v30 = (int)*v28;
      v112 = &off_24F983188;
      v113 = v29;
      v114 = &v112;
      v31 = (char *)v3 + 32;
      v32 = (_QWORD *)*v89;
      do
      {
        v33 = v32[4];
        v34 = v33 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v33 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v35 = v32;
        else
          v35 = v32 + 1;
        if (v34)
          v31 = (char *)v32;
        v32 = (_QWORD *)*v35;
      }
      while (*v35);
      if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v31 + 5) + 40) + 12 * v29)
           + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v31 + 5) + 40) + 12 * (v29 ^ 1))))
        break;
      v40 = (const operations_research::Domain *)operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v88, *((_DWORD *)v99[0] + v30));
      operations_research::Domain::UnionWith((operations_research::Domain *)&v97, v40, &v90);
      if ((v97 & 1) != 0)
        operator delete((void *)__p);
      v97 = v90;
      __p = v91;
      v28 = (_QWORD *)((char *)v28 + 12);
      if (v28 == v27)
        goto LABEL_66;
    }
    v36 = *((_DWORD *)v99[0] + v30);
    v109 = &off_24F983218;
    v110[0] = v36;
    v111 = &v109;
    v37 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v110, (uint64_t)v3);
    v38 = v111;
    if (v111 == &v109)
    {
      v38 = &v109;
      v39 = 4;
    }
    else
    {
      if (!v111)
        goto LABEL_54;
      v39 = 5;
    }
    (*v38)[v39]();
LABEL_54:
    v41 = v95;
    v42 = &v95;
    if (v95)
    {
      while (1)
      {
        while (1)
        {
          v42 = (uint64_t **)v41;
          v43 = *(uint64_t *)((char *)v41 + 28);
          if (v37 >= v43)
            break;
          v41 = *v42;
          v23 = v42;
          if (!*v42)
            goto LABEL_61;
        }
        if (v43 >= v37)
          break;
        v41 = v42[1];
        if (!v41)
        {
          v23 = v42 + 1;
          goto LABEL_61;
        }
      }
      v44 = (char *)v42;
    }
    else
    {
LABEL_61:
      v44 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v44 + 28) = v37;
      *((_DWORD *)v44 + 9) = 0;
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = 0;
      *((_QWORD *)v44 + 2) = v42;
      *v23 = (uint64_t *)v44;
      v45 = (uint64_t *)v44;
      if (*v94)
      {
        v94 = (uint64_t *)*v94;
        v45 = *v23;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v95, v45);
      ++v96;
    }
    ++*((_DWORD *)v44 + 9);
    v23 = &v95;
    v28 = (_QWORD *)((char *)v28 + 12);
  }
  while (v28 != v27);
LABEL_66:
  v28 = v92;
LABEL_67:
  if (v28)
  {
    v93 = v28;
    operator delete(v28);
  }
  v46 = v94;
  if (v94 != (uint64_t *)&v95)
  {
    do
    {
      v50 = *(uint64_t *)((char *)v46 + 28);
      if (operations_research::Domain::Contains((operations_research::Domain *)&v97, v50))
      {
        v51 = v95;
        v52 = &v95;
        v53 = &v95;
        if (v95)
        {
          while (1)
          {
            while (1)
            {
              v53 = (uint64_t **)v51;
              v54 = *(uint64_t *)((char *)v51 + 28);
              if (v50 >= v54)
                break;
              v51 = *v53;
              v52 = v53;
              if (!*v53)
                goto LABEL_84;
            }
            if (v54 >= v50)
              break;
            v51 = v53[1];
            if (!v51)
            {
              v52 = v53 + 1;
              goto LABEL_84;
            }
          }
          v55 = (char *)v53;
        }
        else
        {
LABEL_84:
          v55 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v55 + 28) = v50;
          *((_DWORD *)v55 + 9) = 0;
          *(_QWORD *)v55 = 0;
          *((_QWORD *)v55 + 1) = 0;
          *((_QWORD *)v55 + 2) = v53;
          *v52 = (uint64_t *)v55;
          v56 = (uint64_t *)v55;
          if (*v94)
          {
            v94 = (uint64_t *)*v94;
            v56 = *v52;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v95, v56);
          ++v96;
        }
        ++*((_DWORD *)v55 + 9);
      }
      v57 = (uint64_t *)v46[1];
      if (v57)
      {
        do
        {
          v58 = (uint64_t **)v57;
          v57 = (uint64_t *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (uint64_t **)v46[2];
          v59 = *v58 == v46;
          v46 = (uint64_t *)v58;
        }
        while (!v59);
      }
      v46 = (uint64_t *)v58;
    }
    while (v58 != &v95);
  }
  v106 = &off_24F980458;
  v107 = v85;
  v108 = &v106;
  v47 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v47, v107))
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v47, v107);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v47, v107, (char **)&v92);
  v48 = v108;
  if (v108 == &v106)
  {
    v49 = 4;
    v48 = &v106;
LABEL_96:
    (*v48)[v49]();
  }
  else if (v108)
  {
    v49 = 5;
    goto LABEL_96;
  }
  v61 = v92;
  v60 = v93;
  if (v92 != v93)
  {
    v62 = 1;
    while (2)
    {
      v63 = (const char *)*((unsigned int *)v61 + 2);
      v64 = *(_DWORD *)((char *)v99[0] + ((uint64_t)(*v61 << 32) >> 30));
      v65 = (int)*v61;
      v103 = &off_24F983188;
      v104 = v64;
      v105 = &v103;
      v66 = v89;
      v67 = (_QWORD *)*v89;
      do
      {
        v68 = v67[4];
        v69 = v68 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v68 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v70 = v67;
        else
          v70 = v67 + 1;
        if (v69)
          v66 = v67;
        v67 = (_QWORD *)*v70;
      }
      while (*v70);
      if (*(_QWORD *)(*(_QWORD *)(v66[5] + 40) + 12 * v64)
         + *(_QWORD *)(*(_QWORD *)(v66[5] + 40) + 12 * (v64 ^ 1)))
      {
        goto LABEL_99;
      }
      v71 = *((_DWORD *)v99[0] + v65);
      v100 = &off_24F983218;
      v101[0] = v71;
      v102 = &v100;
      v72 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v101, (uint64_t)v3);
      v73 = v102;
      if (v102 == &v100)
      {
        v73 = &v100;
        v74 = 4;
LABEL_114:
        (*v73)[v74]();
      }
      else if (v102)
      {
        v74 = 5;
        goto LABEL_114;
      }
      v75 = v3;
      v76 = v95;
LABEL_117:
      v77 = v23;
      if (v76)
      {
        while (1)
        {
          v23 = (uint64_t **)v76;
          v78 = *(uint64_t *)((char *)v76 + 28);
          if (v72 < v78)
          {
            v76 = *v23;
            goto LABEL_117;
          }
          if (v78 >= v72)
            break;
          v76 = v23[1];
          if (!v76)
          {
            v77 = v23 + 1;
            goto LABEL_122;
          }
        }
        v81 = v23;
        v23 = &v95;
        v3 = v75;
        if (*((_DWORD *)v81 + 9) == 1)
        {
LABEL_127:
          operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(v86, v63, v87, v72);
          goto LABEL_100;
        }
      }
      else
      {
LABEL_122:
        v79 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v79 + 28) = v72;
        *((_DWORD *)v79 + 9) = 0;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = 0;
        *((_QWORD *)v79 + 2) = v23;
        *v77 = (uint64_t *)v79;
        v80 = (uint64_t *)v79;
        if (*v94)
        {
          v94 = (uint64_t *)*v94;
          v80 = *v77;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v95, v80);
        ++v96;
        v23 = &v95;
        v3 = v75;
        if (*((_DWORD *)v79 + 9) == 1)
          goto LABEL_127;
      }
LABEL_99:
      v62 = 0;
LABEL_100:
      v61 = (_QWORD *)((char *)v61 + 12);
      if (v61 == v60)
      {
        v61 = v92;
        if (v92)
          goto LABEL_129;
        goto LABEL_130;
      }
      continue;
    }
  }
  v62 = 1;
  if (v92)
  {
LABEL_129:
    v93 = v61;
    operator delete(v61);
  }
LABEL_130:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v94, v95);
  if ((v97 & 1) != 0)
    operator delete((void *)__p);
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
  return v62 & 1;
}

void sub_22DAA9DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25,uint64_t a26,char a27,void *__p,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char *a44)
{
  char *v44;
  char *v46;
  uint64_t v47;

  v46 = a44;
  if (a44 == v44)
  {
    v47 = 4;
    v46 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_6;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_6:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a24, a25);
  if ((a27 & 1) != 0)
    operator delete(__p);
  if (!a30)
    _Unwind_Resume(a1);
  a31 = (uint64_t)a30;
  operator delete(a30);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadElementConstraintBounds(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  const operations_research::sat::ConstraintProto *v3;
  _QWORD *v5;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  signed int v20;
  uint64_t (***v21)();
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  char *v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  BOOL v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t (***v78)();
  uint64_t v79;
  int v80;
  _QWORD *v81;
  unint64_t v82;
  BOOL v83;
  _QWORD *v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t (***v87)();
  uint64_t v88;
  void *v89;
  operations_research::sat::PrecedencesPropagator *v90;
  int v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  _BYTE *v98;
  _QWORD *v99;
  int v100;
  void *v101;
  operations_research::sat::PrecedencesPropagator *v102;
  int v103;
  int v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  BOOL v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  const operations_research::sat::ConstraintProto *v116;
  _DWORD *v117;
  int v118;
  unint64_t v119[2];
  uint64_t *v120;
  void *__p;
  char *v122;
  char *v123;
  void *v124;
  char *v125;
  char *v126;
  void *v127;
  _DWORD *v128;
  void *v129;
  _BYTE *v130;
  int v131;
  _BYTE v132[24];
  _BYTE *v133;
  uint64_t (**v134)();
  signed int v135;
  uint64_t (***v136)();
  _BYTE v137[24];
  _BYTE *v138;
  _BYTE v139[24];
  _BYTE *v140;
  _BYTE v141[24];
  _BYTE *v142;
  uint64_t (**v143)();
  unsigned int v144[4];
  uint64_t (***v145)();
  uint64_t (**v146)();
  int v147;
  uint64_t (***v148)();
  _BYTE v149[24];
  _BYTE *v150;
  uint64_t (**v151)();
  unsigned int v152[4];
  uint64_t (***v153)();
  uint64_t (**v154)();
  signed int v155;
  uint64_t (***v156)();
  uint64_t (**v157)();
  unsigned int v158;
  uint64_t (***v159)();
  uint64_t (**v160)();
  int v161;
  uint64_t (***v162)();
  uint64_t v163;

  v3 = a2;
  v163 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 14)
    v6 = (int *)*((_QWORD *)this + 6);
  else
    v6 = (int *)&operations_research::sat::_ElementConstraintProto_default_instance_;
  v7 = v6[9];
  v8 = v6[10];
  if ((int)~v7 <= (int)v7)
    v9 = v6[9];
  else
    v9 = ~v7;
  v10 = *(_DWORD *)(*v5 + 4 * v9);
  if ((int)~v8 <= (int)v8)
    v11 = v6[10];
  else
    v11 = ~v8;
  v12 = *(_DWORD *)(*v5 + 4 * v11);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, v6 + 4, (int **)&v129);
  v160 = &off_24F983188;
  v161 = v10 ^ (v7 >> 31);
  v162 = &v160;
  v14 = (_QWORD *)((char *)v3 + 32);
  v13 = (_QWORD *)*((_QWORD *)v3 + 4);
  v15 = (char *)v3 + 32;
  do
  {
    v16 = v13[4];
    v17 = v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v18 = v13;
    else
      v18 = v13 + 1;
    if (v17)
      v15 = (char *)v13;
    v13 = (_QWORD *)*v18;
  }
  while (*v18);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 5) + 40) + 12 * (int)(v10 ^ (v7 >> 31)))
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 5) + 40) + 12 * (int)(v10 ^ (v7 >> 31) ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v127, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1393);
    v112 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v127);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"Check failed: !m->Get(IsFixed(index)) ", 38);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v127);
  }
  v157 = &off_24F980458;
  v158 = v10 ^ (v7 >> 31);
  v159 = &v157;
  v19 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v19, v158))
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v19, v158);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v19, v158, (char **)&v127);
  v20 = v12 ^ (v8 >> 31);
  v21 = v159;
  if (v159 == &v157)
  {
    v22 = 4;
    v21 = &v157;
  }
  else
  {
    if (!v159)
      goto LABEL_26;
    v22 = 5;
  }
  (*v21)[v22]();
LABEL_26:
  v124 = 0;
  v125 = 0;
  v126 = 0;
  __p = 0;
  v122 = 0;
  v123 = 0;
  v23 = v127;
  v117 = v128;
  if (v127 != v128)
  {
    v113 = 12 * (v20 ^ 1);
    v114 = 12 * v20;
    v115 = v12 ^ (v8 >> 31);
    v116 = v3;
    while (1)
    {
      v25 = *(_QWORD *)v23;
      v118 = v23[2];
      LODWORD(v119[0]) = v25;
      v131 = 0;
      if ((v25 & 0x80000000) != 0)
      {
        v120 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v119, (int)&v131, "i >= 0");
        if (v120)
        {
          google::LogMessageFatal::LogMessageFatal(v119, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1401, &v120);
          google::LogMessage::stream((google::LogMessage *)v119);
          goto LABEL_154;
        }
      }
      v131 = v25;
      v26 = v129;
      v119[0] = (v130 - (_BYTE *)v129) >> 2;
      v27 = (int)v25;
      if (v119[0] <= (int)v25)
      {
        v120 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v131, (int)v119, "i < vars.size()");
        if (v120)
        {
          google::LogMessageFatal::LogMessageFatal(v119, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1402, &v120);
          google::LogMessage::stream((google::LogMessage *)v119);
LABEL_154:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v119);
        }
        v26 = v129;
        v29 = v122;
        v28 = v123;
        if (v122 < v123)
        {
LABEL_34:
          *(_DWORD *)v29 = v26[v27];
          v122 = v29 + 4;
          v31 = v125;
          v30 = v126;
          if (v125 >= v126)
            goto LABEL_62;
          goto LABEL_35;
        }
      }
      else
      {
        v29 = v122;
        v28 = v123;
        if (v122 < v123)
          goto LABEL_34;
      }
      v33 = (char *)__p;
      v34 = v29 - (_BYTE *)__p;
      v35 = (v29 - (_BYTE *)__p) >> 2;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v37 = v28 - (_BYTE *)__p;
      if (v37 >> 1 > v36)
        v36 = v37 >> 1;
      v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v36;
      if (v38)
      {
        if (v38 >> 62)
          goto LABEL_149;
        v39 = operator new(4 * v38);
        v40 = &v39[4 * v35];
        *v40 = v26[v27];
        v41 = (uint64_t)(v40 + 1);
        if (v29 == v33)
        {
LABEL_53:
          v3 = v116;
          goto LABEL_59;
        }
      }
      else
      {
        v39 = 0;
        v40 = (_DWORD *)(4 * v35);
        *(_DWORD *)(4 * v35) = v26[v27];
        v41 = 4 * v35 + 4;
        if (v29 == v33)
          goto LABEL_53;
      }
      v42 = v29 - 4 - v33;
      if (v42 < 0x2C)
        break;
      v43 = v29 - &v39[v34];
      v3 = v116;
      if (v43 < 0x20)
        goto LABEL_58;
      v44 = (v42 >> 2) + 1;
      v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
      v46 = &v29[-v45];
      v40 = (_DWORD *)((char *)v40 - v45);
      v47 = &v39[4 * v35 - 16];
      v48 = v29 - 16;
      v49 = v44 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v50 = *(_OWORD *)v48;
        *(v47 - 1) = *((_OWORD *)v48 - 1);
        *v47 = v50;
        v47 -= 2;
        v48 -= 32;
        v49 -= 8;
      }
      while (v49);
      v29 = v46;
      if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_58;
LABEL_59:
      __p = v40;
      v122 = (char *)v41;
      v123 = &v39[4 * v38];
      if (v33)
        operator delete(v33);
      v20 = v115;
      v122 = (char *)v41;
      v31 = v125;
      v30 = v126;
      if (v125 >= v126)
      {
LABEL_62:
        v52 = (char *)v124;
        v53 = v31 - (_BYTE *)v124;
        v54 = (v31 - (_BYTE *)v124) >> 2;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v56 = v30 - (_BYTE *)v124;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 >> 62)
LABEL_149:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = operator new(4 * v57);
          v59 = &v58[4 * v54];
          *v59 = v118;
          v60 = (uint64_t)(v59 + 1);
          if (v31 != v52)
          {
LABEL_71:
            v61 = v31 - 4 - v52;
            if (v61 < 0x2C)
            {
              v3 = v116;
              goto LABEL_79;
            }
            v62 = v31 - &v58[v53];
            v3 = v116;
            if (v62 < 0x20)
              goto LABEL_157;
            v63 = (v61 >> 2) + 1;
            v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
            v65 = &v31[-v64];
            v59 = (_DWORD *)((char *)v59 - v64);
            v66 = &v58[4 * v54 - 16];
            v67 = v31 - 16;
            v68 = v63 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v69 = *(_OWORD *)v67;
              *(v66 - 1) = *((_OWORD *)v67 - 1);
              *v66 = v69;
              v66 -= 2;
              v67 -= 32;
              v68 -= 8;
            }
            while (v68);
            v31 = v65;
            if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_157:
              do
              {
LABEL_79:
                v70 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *--v59 = v70;
              }
              while (v31 != v52);
            }
LABEL_80:
            v124 = v59;
            v125 = (char *)v60;
            v126 = &v58[4 * v57];
            if (v52)
              operator delete(v52);
            v20 = v115;
            v125 = (char *)v60;
            v32 = v129;
            if (*((_DWORD *)v129 + v27) == v115)
              goto LABEL_30;
            goto LABEL_83;
          }
        }
        else
        {
          v58 = 0;
          v59 = (_DWORD *)(4 * v54);
          *(_DWORD *)(4 * v54) = v118;
          v60 = 4 * v54 + 4;
          if (v31 != v52)
            goto LABEL_71;
        }
        v3 = v116;
        goto LABEL_80;
      }
LABEL_35:
      *(_DWORD *)v31 = v118;
      v125 = v31 + 4;
      v32 = v129;
      if (*((_DWORD *)v129 + v27) == v20)
        goto LABEL_30;
LABEL_83:
      v154 = &off_24F983188;
      v155 = v20;
      v156 = &v154;
      v71 = (_QWORD *)*v14;
      v72 = v14;
      v73 = (_QWORD *)*v14;
      do
      {
        v74 = v73[4];
        v75 = v74 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v74 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v76 = v73;
        else
          v76 = v73 + 1;
        if (v75)
          v72 = v73;
        v73 = (_QWORD *)*v76;
      }
      while (*v76);
      if (!(*(_QWORD *)(*(_QWORD *)(v72[5] + 40) + v114) + *(_QWORD *)(*(_QWORD *)(v72[5] + 40) + v113)))
      {
        v151 = &off_24F983218;
        v152[0] = v20;
        v153 = &v151;
        v77 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v152, (uint64_t)v3);
        v78 = v153;
        if (v153 == &v151)
        {
          v78 = &v151;
          v79 = 4;
LABEL_111:
          (*v78)[v79]();
        }
        else if (v153)
        {
          v79 = 5;
          goto LABEL_111;
        }
        v96 = *((_DWORD *)v129 + v27);
        v150 = 0;
        v97 = operator new(0x20uLL);
        *v97 = &off_24F983920;
        v97[1] = v77;
        v97[2] = v77;
        *((_DWORD *)v97 + 6) = v118;
        *((_DWORD *)v97 + 7) = v96;
        v150 = v97;
        operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v97 + 1), (uint64_t)v3);
        v98 = v150;
        if (v150 != v149)
          goto LABEL_121;
        v98 = v149;
        goto LABEL_28;
      }
      v80 = v32[v27];
      v146 = &off_24F983188;
      v147 = v80;
      v148 = &v146;
      v81 = v14;
      do
      {
        v82 = v71[4];
        v83 = v82 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v82 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v84 = v71;
        else
          v84 = v71 + 1;
        if (v83)
          v81 = v71;
        v71 = (_QWORD *)*v84;
      }
      while (*v84);
      v85 = v32[v27];
      if (!(*(_QWORD *)(*(_QWORD *)(v81[5] + 40) + 12 * v80)
           + *(_QWORD *)(*(_QWORD *)(v81[5] + 40) + 12 * (v80 ^ 1))))
      {
        v143 = &off_24F983218;
        v144[0] = v85;
        v145 = &v143;
        v86 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v144, (uint64_t)v3);
        v87 = v145;
        if (v145 == &v143)
        {
          v87 = &v143;
          v88 = 4;
LABEL_115:
          (*v87)[v88]();
        }
        else if (v145)
        {
          v88 = 5;
          goto LABEL_115;
        }
        v142 = 0;
        v99 = operator new(0x20uLL);
        *v99 = &off_24F983920;
        v99[1] = v86;
        v99[2] = v86;
        *((_DWORD *)v99 + 6) = v118;
        *((_DWORD *)v99 + 7) = v20;
        v142 = v99;
        operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v99 + 1), (uint64_t)v3);
        v98 = v142;
        if (v142 != v141)
          goto LABEL_121;
        v98 = v141;
        goto LABEL_28;
      }
      v140 = 0;
      v89 = operator new(0x20uLL);
      *(_QWORD *)v89 = &off_24F983A20;
      *((_DWORD *)v89 + 2) = v85;
      *((_DWORD *)v89 + 3) = v20;
      *((_QWORD *)v89 + 2) = 0;
      *((_DWORD *)v89 + 6) = v118;
      v140 = v89;
      v90 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>((uint64_t)v3);
      v91 = *((_DWORD *)v89 + 2);
      v92 = *((_DWORD *)v89 + 3);
      v93 = *((_QWORD *)v89 + 2);
      LODWORD(v119[0]) = *((_DWORD *)v89 + 6);
      operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v90, v91, v92, v93, -1, (int *)v119, 1);
      v94 = v140;
      if (v140 == v139)
      {
        v94 = v139;
        v95 = 4;
        goto LABEL_119;
      }
      if (v140)
      {
        v95 = 5;
LABEL_119:
        (*(void (**)(void))(*v94 + 8 * v95))();
      }
      v100 = *((_DWORD *)v129 + v27);
      v138 = 0;
      v101 = operator new(0x20uLL);
      *(_QWORD *)v101 = &off_24F983A20;
      *((_DWORD *)v101 + 2) = v20;
      *((_DWORD *)v101 + 3) = v100;
      *((_QWORD *)v101 + 2) = 0;
      *((_DWORD *)v101 + 6) = v118;
      v138 = v101;
      v102 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>((uint64_t)v3);
      v103 = *((_DWORD *)v101 + 2);
      v104 = *((_DWORD *)v101 + 3);
      v105 = *((_QWORD *)v101 + 2);
      LODWORD(v119[0]) = *((_DWORD *)v101 + 6);
      operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v102, v103, v104, v105, -1, (int *)v119, 1);
      v98 = v138;
      if (v138 != v137)
      {
LABEL_121:
        if (!v98)
          goto LABEL_30;
        v24 = 5;
        goto LABEL_29;
      }
      v98 = v137;
LABEL_28:
      v24 = 4;
LABEL_29:
      (*(void (**)(void))(*(_QWORD *)v98 + 8 * v24))();
LABEL_30:
      v23 += 3;
      if (v23 == v117)
        goto LABEL_124;
    }
    v3 = v116;
    do
    {
LABEL_58:
      v51 = *((_DWORD *)v29 - 1);
      v29 -= 4;
      *--v40 = v51;
    }
    while (v29 != v33);
    goto LABEL_59;
  }
LABEL_124:
  v134 = &off_24F983188;
  v135 = v20;
  v136 = &v134;
  v106 = (_QWORD *)*v14;
  do
  {
    v107 = v106[4];
    v108 = v107 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v107 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v109 = v106;
    else
      v109 = v106 + 1;
    if (v108)
      v14 = v106;
    v106 = (_QWORD *)*v109;
  }
  while (*v109);
  if (*(_QWORD *)(*(_QWORD *)(v14[5] + 40) + 12 * v20) + *(_QWORD *)(*(_QWORD *)(v14[5] + 40) + 12 * (v20 ^ 1)))
  {
    operations_research::sat::PartialIsOneOfVar(v20, (uint64_t)&__p, (const void **)&v124, (uint64_t)v132);
    v119[0] = (unint64_t)v3;
    if (!v133)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, unint64_t *))(*(_QWORD *)v133 + 48))(v133, v119);
    v110 = v133;
    if (v133 == v132)
    {
      v111 = 4;
      v110 = v132;
    }
    else
    {
      if (!v133)
        goto LABEL_139;
      v111 = 5;
    }
    (*(void (**)(void))(*v110 + 8 * v111))();
  }
LABEL_139:
  if (__p)
  {
    v122 = (char *)__p;
    operator delete(__p);
  }
  if (v124)
  {
    v125 = (char *)v124;
    operator delete(v124);
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
}

void sub_22DAAA9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAAA9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAAA9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,_Unwind_Exception *exception_objecta,uint64_t exception_object_8,uint64_t exception_object_16,uint64_t exception_object_24,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  void *v54;
  void *v55;

  if (__p)
  {
    operator delete(__p);
    v54 = a23;
    if (!a23)
    {
LABEL_3:
      v55 = a26;
      if (!a26)
      {
LABEL_8:
        if (!a29)
          _Unwind_Resume(exception_object);
        operator delete(a29);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(v55);
      goto LABEL_8;
    }
  }
  else
  {
    v54 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v54);
  v55 = a26;
  if (!a26)
    goto LABEL_8;
  goto LABEL_7;
}

void operations_research::sat::PartialIsOneOfVar(int a1@<W0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  const void *v7;
  const void *v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  const void *v13;
  int64_t v14;
  _QWORD *v15;
  const void *v17;
  void *v18;
  void *v19;
  char *v20;
  int v21;
  void *__p;
  void *v23;
  char *v24;
  unint64_t v25[2];
  uint64_t v26;
  uint64_t *v27;

  v8 = *(const void **)a2;
  v7 = *(const void **)(a2 + 8);
  v9 = (int64_t)v7 - *(_QWORD *)a2;
  v10 = v9 >> 2;
  v25[0] = v9 >> 2;
  v26 = ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 2;
  if (v9 >> 2 == v26)
  {
    v19 = 0;
    v20 = 0;
    v18 = 0;
    if (v7 == v8)
      goto LABEL_5;
    goto LABEL_3;
  }
  v27 = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)v25, (int)&v26, "vars.size() == selectors.size()");
  if (v27)
  {
    google::LogMessageFatal::LogMessageFatal(v25, (google::glog_internal_namespace_ *)"./ortools/sat/cp_constraints.h", 162, &v27);
    google::LogMessage::stream((google::LogMessage *)v25);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v25);
  }
  v8 = *(const void **)a2;
  v17 = *(const void **)(a2 + 8);
  v9 = (int64_t)v17 - *(_QWORD *)a2;
  v10 = v9 >> 2;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  if (v17 != v8)
  {
LABEL_3:
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = (char *)operator new(v9);
    v12 = &v11[4 * v10];
    v18 = v11;
    v20 = v12;
    memcpy(v11, v8, v9);
    v19 = v12;
  }
LABEL_5:
  v21 = a1;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v13 = *a3;
  v14 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v14)
  {
    if (v14 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    __p = operator new(v14);
    v24 = (char *)__p + 4 * (v14 >> 2);
    memcpy(__p, v13, v14);
    v23 = v24;
  }
  *(_QWORD *)(a4 + 24) = 0;
  v15 = operator new(0x40uLL);
  *v15 = &off_24F983AA0;
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(v15 + 1), (uint64_t)&v18);
  *(_QWORD *)(a4 + 24) = v15;
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_22DAAAD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAAAD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_22DAAAD90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22DAAADA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadElementConstraintAC(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  int *v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t (***v25)();
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t i;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  const operations_research::sat::ConstraintProto *v39;
  uint64_t *v40;
  uint64_t (***v41)();
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t j;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  signed int v61;
  uint64_t *v62;
  uint64_t (***v63)();
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t (***v67)();
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  operations_research::sat::SatSolver *v79;
  operations_research::sat::SatSolver *v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  uint64_t *v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t k;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t *v101;
  int *v102;
  char *v103;
  int *v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  int *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  _OWORD *v119;
  int *v120;
  uint64_t v121;
  __int128 v122;
  int v123;
  int *v124;
  int64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  int *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int *v135;
  _OWORD *v136;
  int *v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  _DWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  _OWORD *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  int v165;
  uint64_t *v166;
  char *v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t m;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t (***v182)();
  uint64_t v183;
  uint64_t n;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  int v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  _QWORD *v197;
  _QWORD *v198;
  operations_research::sat::IntegerTrail *v199;
  unsigned int *v200;
  _QWORD *v201;
  unsigned int *v202;
  const operations_research::sat::ConstraintProto *v203;
  uint64_t *v204;
  uint64_t v205;
  void *__p;
  int *v207;
  char *v208;
  void *v209;
  uint64_t *v210;
  void *v211;
  unsigned int *v212;
  void *v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  void *v217;
  _DWORD *v218;
  void *v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  void *v223[3];
  const operations_research::sat::ConstraintProto *v224;
  _BYTE v225[24];
  uint64_t (***v226)();
  uint64_t (**v227)();
  int *v228[2];
  uint64_t (***v229)();
  _BYTE v230[24];
  _BYTE *v231;
  _BYTE v232[24];
  _BYTE *v233;
  _QWORD v234[3];
  _QWORD *v235;
  uint64_t (**v236)();
  unint64_t v237;
  uint64_t (***v238)();
  uint64_t (**v239)();
  signed int v240;
  uint64_t (***v241)();
  uint64_t (**v242)();
  int v243;
  uint64_t (***v244)();
  uint64_t (**v245)();
  signed int v246;
  uint64_t (***v247)();
  uint64_t (**v248)();
  unsigned int v249;
  uint64_t (***v250)();
  uint64_t (**v251)();
  int v252;
  uint64_t (***v253)();
  uint64_t (**v254)();
  int v255;
  uint64_t (***v256)();
  uint64_t v257;

  v257 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 14)
    v6 = (int *)*((_QWORD *)this + 6);
  else
    v6 = (int *)&operations_research::sat::_ElementConstraintProto_default_instance_;
  v8 = v6[9];
  v7 = v6[10];
  if (~v8 <= v8)
    v9 = v6[9];
  else
    v9 = ~v8;
  v10 = *(_DWORD *)(*v5 + 4 * v9);
  if ((int)~v7 <= (int)v7)
    v11 = v6[10];
  else
    v11 = ~v7;
  v12 = *(_DWORD *)(*v5 + 4 * v11);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, v6 + 4, (int **)v223);
  v13 = v10 ^ (v8 >> 31);
  v254 = &off_24F983188;
  v255 = v13;
  v256 = &v254;
  v15 = (char *)a2 + 32;
  v14 = (_QWORD *)*((_QWORD *)a2 + 4);
  v201 = (_QWORD *)((char *)a2 + 32);
  v16 = v14;
  do
  {
    v17 = v16[4];
    v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v19 = v16;
    else
      v19 = v16 + 1;
    if (v18)
      v15 = (char *)v16;
    v16 = (_QWORD *)*v19;
  }
  while (*v19);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 5) + 40) + 12 * v13)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 5) + 40) + 12 * (v13 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v219, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1445);
    v197 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"Check failed: !m->Get(IsFixed(index)) ", 38);
    goto LABEL_246;
  }
  v251 = &off_24F983188;
  v252 = v12 ^ (v7 >> 31);
  v253 = &v251;
  v20 = (char *)a2 + 32;
  do
  {
    v21 = v14[4];
    v22 = v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v23 = v14;
    else
      v23 = v14 + 1;
    if (v22)
      v20 = (char *)v14;
    v14 = (_QWORD *)*v23;
  }
  while (*v23);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v20 + 5) + 40) + 12 * (int)(v12 ^ (v7 >> 31)))
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v20 + 5) + 40) + 12 * (int)(v12 ^ (v7 >> 31) ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v219, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1446);
    v198 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"Check failed: !m->Get(IsFixed(target)) ", 39);
LABEL_246:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v219);
  }
  v220 = 0u;
  v221 = 0u;
  v219 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v222 = 0;
  v248 = &off_24F980458;
  v249 = v12 ^ (v7 >> 31);
  v250 = &v248;
  v24 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v24, v249))
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v24, v249);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v24, v249, (char **)&v217);
  v25 = v250;
  if (v250 == &v248)
  {
    v26 = 4;
    v25 = &v248;
  }
  else
  {
    if (!v250)
      goto LABEL_35;
    v26 = 5;
  }
  (*v25)[v26]();
LABEL_35:
  v203 = a2;
  v27 = v217;
  v28 = v218;
  if (v217 != v218)
  {
    do
    {
      v33 = 0;
      v36 = *(_QWORD *)v27;
      v37 = v27[2];
      v38 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v27)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v27));
      v35 = v220;
      for (i = (v38 >> 7) ^ ((unint64_t)v219 >> 12); ; i = v33 + v29)
      {
        v29 = i & v221;
        v30 = *(_QWORD *)((char *)v219 + v29);
        v31 = ((v30 ^ (0x101010101010101 * (v38 & 0x7F))) - 0x101010101010101) & ~(v30 ^ (0x101010101010101
                                                                                            * (v38 & 0x7F))) & 0x8080808080808080;
        if (v31)
          break;
LABEL_40:
        if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
        {
          v32 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&v219, v38);
          v35 = v220;
          *(_QWORD *)(v220 + 12 * v32) = v36;
          goto LABEL_43;
        }
        v33 += 8;
      }
      while (1)
      {
        v32 = (v29 + (__clz(__rbit64(v31)) >> 3)) & v221;
        if (*(_QWORD *)(v220 + 12 * v32) == v36)
          break;
        v31 &= v31 - 1;
        if (!v31)
          goto LABEL_40;
      }
LABEL_43:
      *(_DWORD *)(v35 + 12 * v32 + 8) = v37;
      v27 += 3;
    }
    while (v27 != v28);
  }
  v213 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v214 = 0u;
  v215 = 0u;
  v216 = 0;
  v245 = &off_24F980458;
  v246 = v13;
  v247 = &v245;
  v39 = a2;
  v40 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v40, v246))
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v40, v246);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v40, v246, (char **)&v211);
  v41 = v247;
  if (v247 == &v245)
  {
    v42 = 4;
    v41 = &v245;
  }
  else
  {
    if (!v247)
      goto LABEL_52;
    v42 = 5;
  }
  (*v41)[v42]();
LABEL_52:
  v199 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  v43 = (unsigned int *)v211;
  v200 = v212;
  if (v211 != v212)
  {
    while (1)
    {
      v45 = *(_QWORD *)v43;
      v202 = v43;
      v205 = v43[2];
      v46 = *((_DWORD *)v223[0] + (int)*(_QWORD *)v43);
      v242 = &off_24F983188;
      v243 = v46;
      v244 = &v242;
      v47 = v201;
      v48 = (_QWORD *)*v201;
      do
      {
        v49 = v48[4];
        v50 = v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v51 = v48;
        else
          v51 = v48 + 1;
        if (v50)
          v47 = v48;
        v48 = (_QWORD *)*v51;
      }
      while (*v51);
      if (!(*(_QWORD *)(*(_QWORD *)(v47[5] + 40) + 12 * v46)
           + *(_QWORD *)(*(_QWORD *)(v47[5] + 40) + 12 * (v46 ^ 1))))
      {
        v52 = 0;
        v53 = *(_QWORD *)(*((_QWORD *)v199 + 5) + 12 * *((int *)v223[0] + (int)v45));
        v54 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v53)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v53));
        v55 = v214;
        for (j = (v54 >> 7) ^ ((unint64_t)v213 >> 12); ; j = v52 + v57)
        {
          v57 = j & v215;
          v58 = *(_QWORD *)((char *)v213 + v57);
          v59 = ((v58 ^ (0x101010101010101 * (v54 & 0x7F))) - 0x101010101010101) & ~(v58 ^ (0x101010101010101
                                                                                              * (v54 & 0x7F))) & 0x8080808080808080;
          if (v59)
            break;
LABEL_70:
          if ((v58 & (~v58 << 6) & 0x8080808080808080) != 0)
          {
            v60 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::prepare_insert((uint64_t *)&v213, v54);
            v143 = (_QWORD *)(v214 + 32 * v60);
            *v143 = v53;
            v143[1] = 0;
            v143[2] = 0;
            v143[3] = 0;
            v55 = v214;
            goto LABEL_166;
          }
          v52 += 8;
        }
        while (1)
        {
          v60 = (v57 + (__clz(__rbit64(v59)) >> 3)) & v215;
          if (*(_QWORD *)(v214 + 32 * v60) == v53)
            break;
          v59 &= v59 - 1;
          if (!v59)
            goto LABEL_70;
        }
LABEL_166:
        v144 = v55 + 32 * v60;
        v147 = *(_QWORD *)(v144 + 24);
        v146 = (_QWORD *)(v144 + 24);
        v145 = v147;
        v148 = v146 - 1;
        v149 = (char *)*(v146 - 1);
        if ((unint64_t)v149 < v147)
        {
          *(_DWORD *)v149 = v205;
          v44 = (uint64_t)(v149 + 4);
        }
        else
        {
          v150 = (char *)*(v146 - 2);
          v151 = (v149 - v150) >> 2;
          v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v153 = v145 - (_QWORD)v150;
          if (v153 >> 1 > v152)
            v152 = v153 >> 1;
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
            v154 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v154 = v152;
          if (v154)
          {
            if (v154 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v155 = operator new(4 * v154);
            v156 = &v155[4 * v151];
            *v156 = v205;
            v44 = (uint64_t)(v156 + 1);
            if (v149 != v150)
            {
LABEL_176:
              v157 = v149 - 4 - v150;
              if (v157 < 0x2C)
                goto LABEL_255;
              if ((unint64_t)(v150 - v155) < 0x20)
                goto LABEL_255;
              v158 = (v157 >> 2) + 1;
              v159 = 4 * (v158 & 0x7FFFFFFFFFFFFFF8);
              v160 = &v149[-v159];
              v156 = (_DWORD *)((char *)v156 - v159);
              v161 = &v155[4 * v151 - 16];
              v162 = v149 - 16;
              v163 = v158 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v164 = *(_OWORD *)v162;
                *(v161 - 1) = *((_OWORD *)v162 - 1);
                *v161 = v164;
                v161 -= 2;
                v162 -= 32;
                v163 -= 8;
              }
              while (v163);
              v149 = v160;
              if (v158 != (v158 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_255:
                do
                {
                  v165 = *((_DWORD *)v149 - 1);
                  v149 -= 4;
                  *--v156 = v165;
                }
                while (v149 != v150);
              }
            }
          }
          else
          {
            v155 = 0;
            v156 = (_DWORD *)(4 * v151);
            *(_DWORD *)(4 * v151) = v205;
            v44 = 4 * v151 + 4;
            if (v149 != v150)
              goto LABEL_176;
          }
          *(v146 - 2) = v156;
          *v148 = v44;
          *v146 = &v155[4 * v154];
          if (v150)
            operator delete(v150);
        }
        *v148 = v44;
        v39 = v203;
        goto LABEL_56;
      }
      v61 = *((_DWORD *)v223[0] + (int)v45);
      v239 = &off_24F980458;
      v240 = v61;
      v241 = &v239;
      v62 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v39);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v62, v240))
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v62, v240);
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v62, v240, (char **)&v209);
      v63 = v241;
      if (v241 == &v239)
        break;
      if (v241)
      {
        v64 = 5;
LABEL_78:
        (*v63)[v64]();
      }
      __p = 0;
      v207 = 0;
      v208 = 0;
      v66 = (uint64_t *)v209;
      v65 = v210;
      v204 = v210;
      while (v66 != v65)
      {
        v69 = 0;
        v70 = *v66;
        v71 = *((unsigned int *)v66 + 2);
        v72 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v66)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + *v66));
        v73 = (v72 >> 7) ^ ((unint64_t)v219 >> 12);
        v74 = 0x101010101010101 * (v72 & 0x7F);
        while (1)
        {
          v75 = v73 & v221;
          v76 = *(_QWORD *)((char *)v219 + v75);
          v77 = ((v76 ^ v74) - 0x101010101010101) & ~(v76 ^ v74) & 0x8080808080808080;
          if (v77)
            break;
LABEL_88:
          if ((v76 & (~v76 << 6) & 0x8080808080808080) != 0)
            goto LABEL_91;
          v69 += 8;
          v73 = v69 + v75;
        }
        while (1)
        {
          v78 = (v75 + (__clz(__rbit64(v77)) >> 3)) & v221;
          if (*(_QWORD *)(v220 + 12 * v78) == v70)
            break;
          v77 &= v77 - 1;
          if (!v77)
            goto LABEL_88;
        }
        if (v78 != (_QWORD)v221)
        {
          v234[0] = &off_24F982EF8;
          v235 = v234;
          v80 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v39);
          v81 = *((_DWORD *)v80 + 4);
          operations_research::sat::SatSolver::SetNumVariables(v80, v81 + 1);
          v82 = v235;
          if (v235 == v234)
          {
            v82 = v234;
            v83 = 4;
LABEL_98:
            (*(void (**)(void))(*v82 + 8 * v83))();
          }
          else if (v235)
          {
            v83 = 5;
            goto LABEL_98;
          }
          v233 = 0;
          v84 = operator new(0x28uLL);
          *(_QWORD *)v84 = &off_24F983BD8;
          *((_QWORD *)v84 + 1) = 0;
          *((_QWORD *)v84 + 2) = 0;
          *((_QWORD *)v84 + 3) = 0;
          v85 = (uint64_t *)operator new(8uLL);
          *((_QWORD *)v84 + 1) = v85;
          *v85++ = v205 | (v71 << 32);
          v86 = 2 * v81;
          *((_QWORD *)v84 + 2) = v85;
          *((_QWORD *)v84 + 3) = v85;
          *((_DWORD *)v84 + 8) = 2 * v81;
          v233 = v84;
          operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int **)v84 + 1, (uint64_t)v39);
          v87 = v233;
          if (v233 == v232)
          {
            v87 = v232;
            v88 = 4;
LABEL_103:
            (*(void (**)(void))(*v87 + 8 * v88))();
          }
          else if (v233)
          {
            v88 = 5;
            goto LABEL_103;
          }
          v89 = 0;
          v90 = v214;
          for (k = (v72 >> 7) ^ ((unint64_t)v213 >> 12); ; k = v89 + v92)
          {
            v92 = k & v215;
            v93 = *(_QWORD *)((char *)v213 + v92);
            v94 = ((v93 ^ v74) - 0x101010101010101) & ~(v93 ^ v74) & 0x8080808080808080;
            if (v94)
              break;
LABEL_108:
            if ((v93 & (~v93 << 6) & 0x8080808080808080) != 0)
            {
              v95 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::prepare_insert((uint64_t *)&v213, v72);
              v96 = (_QWORD *)(v214 + 32 * v95);
              *v96 = v70;
              v96[1] = 0;
              v96[2] = 0;
              v96[3] = 0;
              v90 = v214;
              v39 = v203;
              goto LABEL_111;
            }
            v89 += 8;
          }
          while (1)
          {
            v95 = (v92 + (__clz(__rbit64(v94)) >> 3)) & v215;
            if (*(_QWORD *)(v214 + 32 * v95) == v70)
              break;
            v94 &= v94 - 1;
            if (!v94)
              goto LABEL_108;
          }
LABEL_111:
          v97 = v90 + 32 * v95;
          v100 = *(_QWORD *)(v97 + 24);
          v99 = (_QWORD *)(v97 + 24);
          v98 = v100;
          v101 = v99 - 1;
          v102 = (int *)*(v99 - 1);
          if ((unint64_t)v102 < v100)
          {
            *v102 = v86;
            *v101 = (uint64_t)(v102 + 1);
            v104 = v207;
            v103 = v208;
            if (v207 < (int *)v208)
              goto LABEL_113;
LABEL_134:
            v124 = (int *)__p;
            v125 = (char *)v104 - (_BYTE *)__p;
            v126 = ((char *)v104 - (_BYTE *)__p) >> 2;
            v127 = v126 + 1;
            if ((unint64_t)(v126 + 1) >> 62)
LABEL_248:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v128 = v103 - (_BYTE *)__p;
            if (v128 >> 1 > v127)
              v127 = v128 >> 1;
            if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
              v129 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v129 = v127;
            if (v129)
            {
              if (v129 >> 62)
LABEL_247:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v130 = operator new(4 * v129);
              v131 = (int *)&v130[4 * v126];
              *v131 = v86;
              v105 = (uint64_t)(v131 + 1);
              if (v104 != v124)
              {
LABEL_143:
                v132 = (char *)(v104 - 1) - (char *)v124;
                v39 = v203;
                if (v132 < 0x2C)
                  goto LABEL_256;
                if ((unint64_t)((char *)v104 - &v130[v125]) < 0x20)
                  goto LABEL_256;
                v133 = (v132 >> 2) + 1;
                v134 = 4 * (v133 & 0x7FFFFFFFFFFFFFF8);
                v135 = &v104[v134 / 0xFFFFFFFFFFFFFFFCLL];
                v131 = (int *)((char *)v131 - v134);
                v136 = &v130[4 * v126 - 16];
                v137 = v104 - 4;
                v138 = v133 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v139 = *(_OWORD *)v137;
                  *(v136 - 1) = *((_OWORD *)v137 - 1);
                  *v136 = v139;
                  v136 -= 2;
                  v137 -= 8;
                  v138 -= 8;
                }
                while (v138);
                v104 = v135;
                if (v133 != (v133 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_256:
                  do
                  {
                    v140 = *--v104;
                    *--v131 = v140;
                  }
                  while (v104 != v124);
                }
                __p = v131;
                v207 = (int *)v105;
                v208 = &v130[4 * v129];
                if (v124)
LABEL_150:
                  operator delete(v124);
LABEL_151:
                v207 = (int *)v105;
                goto LABEL_82;
              }
            }
            else
            {
              v130 = 0;
              v131 = (int *)(4 * v126);
              *(_DWORD *)(4 * v126) = v86;
              v105 = 4 * v126 + 4;
              if (v104 != v124)
                goto LABEL_143;
            }
            v39 = v203;
            __p = v131;
            v207 = (int *)v105;
            v208 = &v130[4 * v129];
            if (v124)
              goto LABEL_150;
            goto LABEL_151;
          }
          v106 = (int *)*(v99 - 2);
          v107 = v102 - v106;
          v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 62)
            goto LABEL_248;
          v109 = v98 - (_QWORD)v106;
          if (v109 >> 1 > v108)
            v108 = v109 >> 1;
          if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
            v110 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v110 = v108;
          if (v110)
          {
            if (v110 >> 62)
              goto LABEL_247;
            v111 = v110;
            v112 = operator new(4 * v110);
            v110 = v111;
            v113 = (int *)&v112[4 * v107];
            *v113 = v86;
            v114 = (uint64_t)(v113 + 1);
            if (v102 == v106)
              goto LABEL_131;
LABEL_125:
            v115 = (char *)(v102 - 1) - (char *)v106;
            if (v115 < 0x2C)
              goto LABEL_257;
            if ((unint64_t)((char *)v106 - v112) < 0x20)
              goto LABEL_257;
            v116 = (v115 >> 2) + 1;
            v117 = 4 * (v116 & 0x7FFFFFFFFFFFFFF8);
            v118 = &v102[v117 / 0xFFFFFFFFFFFFFFFCLL];
            v113 = (int *)((char *)v113 - v117);
            v119 = &v112[4 * v107 - 16];
            v120 = v102 - 4;
            v121 = v116 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v122 = *(_OWORD *)v120;
              *(v119 - 1) = *((_OWORD *)v120 - 1);
              *v119 = v122;
              v119 -= 2;
              v120 -= 8;
              v121 -= 8;
            }
            while (v121);
            v102 = v118;
            if (v116 != (v116 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_257:
              do
              {
                v123 = *--v102;
                *--v113 = v123;
              }
              while (v102 != v106);
            }
          }
          else
          {
            v112 = 0;
            v113 = (int *)(4 * v107);
            *(_DWORD *)(4 * v107) = v86;
            v114 = 4 * v107 + 4;
            if (v102 != v106)
              goto LABEL_125;
          }
LABEL_131:
          *(v99 - 2) = v113;
          *v101 = v114;
          *v99 = &v112[4 * v110];
          if (v106)
            operator delete(v106);
          v39 = v203;
          *v101 = v114;
          v104 = v207;
          v103 = v208;
          if (v207 >= (int *)v208)
            goto LABEL_134;
LABEL_113:
          *v104 = v86;
          v105 = (uint64_t)(v104 + 1);
          goto LABEL_151;
        }
LABEL_91:
        v236 = &off_24F982CC0;
        v237 = v205 | ((unint64_t)(v71 ^ 1) << 32);
        v238 = &v236;
        v79 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v39);
        operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v79, v237 ^ 1, SHIDWORD(v237));
        v67 = v238;
        if (v238 == &v236)
        {
          v67 = &v236;
          v68 = 4;
LABEL_81:
          (*v67)[v68]();
          goto LABEL_82;
        }
        if (v238)
        {
          v68 = 5;
          goto LABEL_81;
        }
LABEL_82:
        v66 = (uint64_t *)((char *)v66 + 12);
        v65 = v204;
      }
      operations_research::sat::ReifiedBoolOr((uint64_t)&__p, v205, (uint64_t)v230);
      v224 = v39;
      if (!v231)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v231 + 48))(v231, &v224);
      v141 = v231;
      if (v231 == v230)
      {
        v141 = v230;
        v142 = 4;
LABEL_160:
        (*(void (**)(void))(*v141 + 8 * v142))();
      }
      else if (v231)
      {
        v142 = 5;
        goto LABEL_160;
      }
      if (__p)
      {
        v207 = (int *)__p;
        operator delete(__p);
      }
      if (v209)
      {
        v210 = (uint64_t *)v209;
        operator delete(v209);
      }
LABEL_56:
      v43 = v202 + 3;
      if (v202 + 3 == v200)
        goto LABEL_188;
    }
    v63 = &v239;
    v64 = 4;
    goto LABEL_78;
  }
LABEL_188:
  v166 = (uint64_t *)v220;
  if (*(char *)v219 > -2)
  {
    v167 = (char *)v219;
    v169 = (char *)v219 + v221;
    if (v219 == (char *)v219 + (_QWORD)v221)
      goto LABEL_224;
    while (1)
    {
LABEL_196:
      v170 = 0;
      v171 = *v166;
      v172 = *((_DWORD *)v166 + 2);
      v173 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v166)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *v166));
      v174 = v214;
      v175 = (v173 >> 7) ^ ((unint64_t)v213 >> 12);
      v176 = 0x101010101010101 * (v173 & 0x7F);
      for (m = v175; ; m = v170 + v178)
      {
        v178 = m & v215;
        v179 = *(_QWORD *)((char *)v213 + v178);
        v180 = ((v179 ^ v176) - 0x101010101010101) & ~(v179 ^ v176) & 0x8080808080808080;
        if (v180)
          break;
LABEL_200:
        if ((v179 & (~v179 << 6) & 0x8080808080808080) != 0)
          goto LABEL_203;
        v170 += 8;
      }
      while (1)
      {
        v181 = (v178 + (__clz(__rbit64(v180)) >> 3)) & v215;
        if (*(_QWORD *)(v214 + 32 * v181) == v171)
          break;
        v180 &= v180 - 1;
        if (!v180)
          goto LABEL_200;
      }
      if (v181 == (_QWORD)v215)
      {
LABEL_203:
        LODWORD(v209) = v172 ^ 1;
        v227 = &off_24F980568;
        v228[0] = (int *)&v209;
        v228[1] = (int *)1;
        v229 = &v227;
        operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v228, (uint64_t)v203);
        v182 = v229;
        if (v229 == &v227)
        {
          v182 = &v227;
LABEL_220:
          v183 = 4;
          goto LABEL_221;
        }
        if (!v229)
          goto LABEL_217;
      }
      else
      {
        for (n = 0; ; v175 = n + v185)
        {
          v185 = v175 & v215;
          v186 = *(_QWORD *)((char *)v213 + v185);
          v187 = ((v186 ^ v176) - 0x101010101010101) & ~(v186 ^ v176) & 0x8080808080808080;
          if (v187)
            break;
LABEL_210:
          if ((v186 & (~v186 << 6) & 0x8080808080808080) != 0)
          {
            v188 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::prepare_insert((uint64_t *)&v213, v173);
            v189 = (_QWORD *)(v214 + 32 * v188);
            *v189 = v171;
            v189[1] = 0;
            v189[2] = 0;
            v189[3] = 0;
            v174 = v214;
            goto LABEL_214;
          }
          n += 8;
        }
        while (1)
        {
          v188 = (v185 + (__clz(__rbit64(v187)) >> 3)) & v215;
          if (*(_QWORD *)(v214 + 32 * v188) == v171)
            break;
          v187 &= v187 - 1;
          if (!v187)
            goto LABEL_210;
        }
LABEL_214:
        operations_research::sat::ReifiedBoolOr(v174 + 32 * v188 + 8, v172, (uint64_t)v225);
        v209 = v203;
        if (!v226)
          std::__throw_bad_function_call[abi:ne180100]();
        ((void (*)(uint64_t (***)(), void **))(*v226)[6])(v226, &v209);
        v182 = v226;
        if (v226 == (uint64_t (***)())v225)
        {
          v182 = (uint64_t (***)())v225;
          goto LABEL_220;
        }
        if (!v226)
        {
LABEL_217:
          v190 = *++v167;
          v166 = (uint64_t *)((char *)v166 + 12);
          if (v190 > -2)
            goto LABEL_195;
          goto LABEL_222;
        }
      }
      v183 = 5;
LABEL_221:
      (*v182)[v183]();
      v191 = *++v167;
      v166 = (uint64_t *)((char *)v166 + 12);
      if (v191 > -2)
        goto LABEL_195;
      do
      {
LABEL_222:
        v192 = (__clz(__rbit64(((*(_QWORD *)v167 >> 7) & ~*(_QWORD *)v167 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v167 += v192;
        v166 = (uint64_t *)((char *)v166 + 12 * v192);
      }
      while (*v167 < -1);
LABEL_195:
      if (v167 == v169)
        goto LABEL_224;
    }
  }
  v167 = (char *)v219;
  do
  {
    v168 = (__clz(__rbit64(((*(_QWORD *)v167 >> 7) & ~*(_QWORD *)v167 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
    v167 += v168;
    v166 = (uint64_t *)((char *)v166 + 12 * v168);
  }
  while (*v167 < -1);
  v169 = (char *)v219 + v221;
  if (v167 != (char *)v219 + (_QWORD)v221)
    goto LABEL_196;
LABEL_224:
  if (v211)
  {
    v212 = (unsigned int *)v211;
    operator delete(v211);
  }
  v193 = v215;
  if ((_QWORD)v215)
  {
    v194 = 0;
    v195 = 0;
    do
    {
      if ((*((char *)v213 + v195) & 0x80000000) == 0)
      {
        v196 = *(void **)(v214 + v194 + 8);
        if (v196)
        {
          *(_QWORD *)(v214 + v194 + 16) = v196;
          operator delete(v196);
          v193 = v215;
        }
      }
      ++v195;
      v194 += 32;
    }
    while (v195 != v193);
    operator delete(v213);
    v213 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v216 = 0;
    *(_QWORD *)&v215 = 0;
    v214 = 0uLL;
  }
  if (*((_QWORD *)&v215 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v215 + 1));
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if ((_QWORD)v221)
  {
    operator delete(v219);
    v219 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v222 = 0;
    *(_QWORD *)&v221 = 0;
    v220 = 0uLL;
  }
  if (*((_QWORD *)&v221 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v221 + 1));
  if (v223[0])
  {
    v223[1] = v223[0];
    operator delete(v223[0]);
  }
}

void sub_22DAAC030(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void operations_research::sat::ReifiedBoolOr(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v6 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = v5 - *(_QWORD *)a1;
  if (v5 == *(_QWORD *)a1)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a1);
    v9 = &v8[4 * (v7 >> 2)];
    memcpy(v8, v6, v7);
  }
  *(_QWORD *)(a3 + 24) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24F983C58;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  v11 = v9 - v8;
  if (v11)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    v10[1] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    v10[3] = v13;
    memcpy(v12, v8, v11);
    v10[2] = v13;
  }
  *((_DWORD *)v10 + 8) = a2;
  *(_QWORD *)(a3 + 24) = v10;
  if (v8)
    operator delete(v8);
}

void sub_22DAAC400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::~flat_hash_map(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v4) & 0x80000000) == 0)
      {
        v6 = *v5 + v3;
        v7 = *(void **)(v6 + 8);
        if (v7)
        {
          *(_QWORD *)(v6 + 16) = v7;
          operator delete(v7);
          v2 = *(_QWORD *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v5 = 0;
  }
  v8 = *(_QWORD **)(a1 + 32);
  if (v8)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v8);
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void operations_research::sat::LoadElementConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  const operations_research::sat::ConstraintProto *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t *v25;
  int v26;
  int v27;
  unsigned int v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  operations_research::sat::SatSolver *v37;
  operations_research::sat::SatSolver *v38;
  uint64_t (***v39)();
  uint64_t v40;
  google::LogMessage *v41;
  _QWORD *v42;
  uint64_t *v43;
  unsigned int v44;
  int v45;
  int v46;
  operations_research::sat::IntegerTrail *v47;
  signed int v48;
  operations_research::sat::Model *v49;
  char updated;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  unint64_t v56;
  BOOL v57;
  _QWORD *v58;
  char v59;
  uint64_t *v60;
  uint64_t (***v61)();
  uint64_t v62;
  char *v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  uint64_t (***v67)();
  uint64_t v68;
  int *v69;
  int *v70;
  unsigned int v71;
  int v72;
  int v73;
  uint64_t (***v74)();
  uint64_t v75;
  uint64_t (***v76)();
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  int64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  int *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  char *v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  unsigned int *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  unsigned int v116;
  char *v117;
  uint64_t v118;
  char *v119;
  int64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  int64_t v128;
  uint64_t (***v129)();
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  int v139;
  int v140;
  char *v141;
  uint64_t v142;
  char *v143;
  int64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  int64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  __int128 v160;
  int v161;
  char **v162;
  uint64_t v163;
  uint64_t (***v164)();
  uint64_t v165;
  char *v166;
  uint64_t (***v167)();
  uint64_t v168;
  _QWORD *v169;
  char *v170;
  _QWORD *v171;
  unint64_t v172;
  BOOL v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t (***v177)();
  uint64_t v178;
  char *v179;
  unint64_t v180;
  BOOL v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  int *v187;
  int *v188;
  uint64_t (***v189)();
  int v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  signed int v194;
  _QWORD *v195;
  char *v196;
  unint64_t v197;
  BOOL v198;
  _QWORD *v199;
  int v200;
  int v201;
  uint64_t (***v202)();
  uint64_t v203;
  int v204;
  _BOOL4 IsFullyEncoded;
  int v206;
  int v207;
  operations_research::sat::ConstraintProto *v208;
  void *v209[3];
  void *v210;
  char *v211;
  char *v212;
  void *v213;
  char *v214;
  char *v215;
  char *v216[3];
  uint64_t (**v217)();
  signed int v218;
  uint64_t (***v219)();
  uint64_t (**v220)();
  int v221;
  uint64_t (***v222)();
  uint64_t (**v223)();
  unsigned int v224[4];
  uint64_t (***v225)();
  uint64_t (**v226)();
  unint64_t v227;
  uint64_t (***v228)();
  uint64_t (**v229)();
  signed int v230;
  uint64_t (***v231)();
  uint64_t (**v232)();
  int v233;
  uint64_t (***v234)();
  uint64_t (**v235)();
  signed int v236;
  uint64_t (***v237)();
  uint64_t (**v238)();
  int *v239[2];
  uint64_t (***v240)();
  char *v241;
  int *v242[2];
  char **v243;
  uint64_t (**v244)();
  int *v245[2];
  uint64_t (***v246)();
  uint64_t (**v247)();
  int *v248[2];
  uint64_t (***v249)();
  uint64_t (**v250)();
  unint64_t v251;
  uint64_t (***v252)();
  uint64_t (**v253)();
  uint64_t (**v254)();
  uint64_t (***v255)();
  uint64_t v256;

  v3 = a2;
  v256 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v6 = v5;
  if (*((_DWORD *)this + 15) == 14)
    v7 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v7 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  v8 = *((_DWORD *)v7 + 9);
  if (~v8 <= v8)
    v9 = *((_DWORD *)v7 + 9);
  else
    v9 = ~v8;
  v10 = *(_DWORD *)(*v5 + 4 * v9);
  v11 = *((int *)v7 + 4);
  v12 = v5[6];
  v208 = v3;
  if ((_DWORD)v11)
  {
    v13 = (int *)v7[3];
    v14 = 4 * v11;
    while (1)
    {
      v15 = *v13;
      if (~*v13 > *v13)
        v15 = ~v15;
      if (*(_DWORD *)(v12 + 4 * v15) == -1)
        break;
      ++v13;
      v14 -= 4;
      if (!v14)
        goto LABEL_13;
    }
LABEL_43:
    if (*((_DWORD *)this + 15) == 14)
      v43 = (uint64_t *)*((_QWORD *)this + 6);
    else
      v43 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    v44 = *((_DWORD *)v43 + 10);
    if ((int)~v44 <= (int)v44)
      v45 = *((_DWORD *)v43 + 10);
    else
      v45 = ~v44;
    v46 = *(_DWORD *)(*v6 + 4 * v45);
    operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v6, (int *)v43 + 4, (int **)&v253);
    v47 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v3);
    operations_research::Domain::Domain(v209, 0, (((char *)v254 - (char *)v253) >> 2) - 1);
    v48 = v10 ^ (v8 >> 31);
    updated = operations_research::sat::IntegerTrail::UpdateInitialDomain((uint64_t)v47, v48, (operations_research::Domain *)v209);
    if (((uint64_t)v209[0] & 1) != 0)
      operator delete(v209[1]);
    if ((updated & 1) == 0)
      goto LABEL_276;
    v51 = v46 ^ (v44 >> 31);
    v235 = &off_24F983188;
    v236 = v48;
    v237 = &v235;
    v53 = (_QWORD *)((char *)v3 + 32);
    v52 = (_QWORD *)*((_QWORD *)v3 + 4);
    v54 = (char *)v3 + 32;
    v55 = v52;
    do
    {
      v56 = v55[4];
      v57 = v56 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v56 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v58 = v55;
      else
        v58 = v55 + 1;
      if (v57)
        v54 = (char *)v55;
      v55 = (_QWORD *)*v58;
    }
    while (*v58);
    if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v54 + 5) + 40) + 12 * v48)
         + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v54 + 5) + 40) + 12 * (v48 ^ 1))))
    {
      v59 = 0;
      goto LABEL_211;
    }
    v232 = &off_24F983188;
    v233 = v46 ^ (v44 >> 31);
    v234 = &v232;
    v63 = (char *)v3 + 32;
    do
    {
      v64 = v52[4];
      v65 = v64 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v64 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v66 = v52;
      else
        v66 = v52 + 1;
      if (v65)
        v63 = (char *)v52;
      v52 = (_QWORD *)*v66;
    }
    while (*v66);
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v63 + 5) + 40) + 12 * (int)v51)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v63 + 5) + 40) + 12 * (int)(v51 ^ 1)))
    {
      v59 = operations_research::sat::DetectEquivalencesInElementConstraint(this, v3, v49);
      v67 = v234;
      if (v234 == &v232)
      {
        v68 = 4;
        v67 = &v232;
      }
      else
      {
        if (!v234)
          goto LABEL_211;
        v68 = 5;
      }
    }
    else
    {
      v59 = 0;
      v67 = &v232;
      v68 = 4;
    }
    (*v67)[v68]();
LABEL_211:
    v167 = v237;
    if (v237 == &v235)
    {
      v168 = 4;
      v167 = &v235;
    }
    else
    {
      if (!v237)
        goto LABEL_216;
      v168 = 5;
    }
    (*v167)[v168]();
LABEL_216:
    if ((v59 & 1) != 0)
      goto LABEL_276;
    v229 = &off_24F983188;
    v230 = v48;
    v231 = &v229;
    v169 = (_QWORD *)*v53;
    v170 = (char *)v3 + 32;
    v171 = (_QWORD *)*v53;
    do
    {
      v172 = v171[4];
      v173 = v172 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v172 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v174 = v171;
      else
        v174 = v171 + 1;
      if (v173)
        v170 = (char *)v171;
      v171 = (_QWORD *)*v174;
    }
    while (*v174);
    if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v170 + 5) + 40) + 12 * v48)
         + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v170 + 5) + 40) + 12 * (v48 ^ 1))))
    {
      v223 = &off_24F983218;
      v224[0] = v48;
      v225 = &v223;
      v175 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v224, (uint64_t)v3);
      v176 = v51 | ((unint64_t)*((unsigned int *)v253 + v175) << 32);
      v226 = &off_24F983298;
      v227 = v176;
      v228 = &v226;
      operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int *)&v227, (uint64_t)v3);
      v177 = v228;
      if (v228 == &v226)
      {
        v178 = 4;
        v177 = &v226;
      }
      else
      {
        if (!v228)
        {
LABEL_270:
          v202 = v225;
          if (v225 == &v223)
          {
            v203 = 4;
            v202 = &v223;
            goto LABEL_274;
          }
          if (v225)
          {
            v203 = 5;
LABEL_274:
            (*v202)[v203]();
          }
LABEL_276:
          v166 = (char *)v253;
          if (!v253)
            return;
          v254 = v253;
          goto LABEL_278;
        }
        v178 = 5;
      }
      (*v177)[v178]();
      goto LABEL_270;
    }
    v220 = &off_24F983188;
    v221 = v46 ^ (v44 >> 31);
    v222 = &v220;
    v179 = (char *)v3 + 32;
    do
    {
      v180 = v169[4];
      v181 = v180 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v180 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v182 = v169;
      else
        v182 = v169 + 1;
      if (v181)
        v179 = (char *)v169;
      v169 = (_QWORD *)*v182;
    }
    while (*v182);
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v179 + 5) + 40) + 12 * (int)v51)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v179 + 5) + 40) + 12 * (int)(v51 ^ 1)))
    {
      v183 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
      IsFullyEncoded = operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v183, v51);
      v184 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      if (*((_DWORD *)this + 15) == 14)
        v184 = (uint64_t *)*((_QWORD *)this + 6);
      v185 = *((int *)v184 + 4);
      v207 = v185;
      v186 = 0;
      if ((_DWORD)v185)
      {
        v187 = (int *)v184[3];
        v188 = &v187[v185];
        while (1)
        {
          v192 = *v187;
          v193 = ~*v187 <= *v187 ? *v187 : ~v192;
          v194 = *(_DWORD *)(*v6 + 4 * v193) ^ (v192 >> 31);
          v217 = &off_24F983188;
          v218 = v194;
          v219 = &v217;
          v195 = (_QWORD *)*v53;
          v196 = (char *)v3 + 32;
          do
          {
            v197 = v195[4];
            v198 = v197 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
            if (v197 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
              v199 = v195;
            else
              v199 = v195 + 1;
            if (v198)
              v196 = (char *)v195;
            v195 = (_QWORD *)*v199;
          }
          while (*v199);
          if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v196 + 5) + 40) + 12 * v194)
               + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v196 + 5) + 40) + 12 * (v194 ^ 1))))
            break;
          v190 = operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v183, v194);
          v189 = v219;
          if (v219 == &v217)
          {
            v189 = &v217;
            goto LABEL_243;
          }
          if (!v219)
            goto LABEL_245;
          v191 = 5;
LABEL_244:
          (*v189)[v191]();
LABEL_245:
          v186 += v190;
          if (++v187 == v188)
            goto LABEL_262;
        }
        v189 = &v217;
        v190 = 1;
LABEL_243:
        v191 = 4;
        goto LABEL_244;
      }
LABEL_262:
      v200 = *((_DWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v3)
             + 105);
      if (v200 >= 1)
      {
        v201 = IsFullyEncoded;
        if (v186 >= v207 - 1)
          v201 = 1;
        if (v201 == 1)
        {
          if (v200 < 2)
          else
            operations_research::sat::LoadElementConstraintAC(this, v3, v49);
          goto LABEL_276;
        }
      }
    }
    operations_research::sat::LoadElementConstraintBounds(this, v3, v49);
    goto LABEL_276;
  }
LABEL_13:
  v16 = *((_DWORD *)v7 + 10);
  if (~v16 > v16)
    v16 = ~v16;
  if (*(_DWORD *)(v12 + 4 * v16) == -1)
  {
    if (*operations_research::sat::LoadElementConstraint(operations_research::sat::ConstraintProto const&,operations_research::sat::Model *)::vlocal__ >= 1
      && (operations_research::sat::LoadElementConstraint(operations_research::sat::ConstraintProto const&,operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::LoadElementConstraint(operations_research::sat::ConstraintProto const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
    {
      v41 = google::LogMessage::LogMessage((google::LogMessage *)&v253, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1574);
      v42 = (_QWORD *)google::LogMessage::stream(v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Fix BOOLean_element not propagated on target", 44);
      google::LogMessage::~LogMessage((google::LogMessage *)&v253);
    }
    goto LABEL_43;
  }
  v17 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v3);
  v18 = v17;
  v21 = (uint64_t *)*((_QWORD *)this + 6);
  v20 = (char *)this + 48;
  v19 = v21;
  if (*((_DWORD *)v20 + 3) != 14)
    v19 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  v22 = *((_DWORD *)v19 + 9);
  if ((int)~v22 <= (int)v22)
    v23 = *((_DWORD *)v19 + 9);
  else
    v23 = ~v22;
  v24 = *(_DWORD *)(*v17 + 4 * v23);
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v17, (int *)v19 + 4, v216);
  if (*((_DWORD *)v20 + 3) == 14)
    v25 = *(uint64_t **)v20;
  else
    v25 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  v26 = *((_DWORD *)v25 + 10);
  if (~v26 <= v26)
    v27 = *((_DWORD *)v25 + 10);
  else
    v27 = ~v26;
  v28 = *(_DWORD *)(v18[6] + 4 * v27);
  v253 = &off_24F983188;
  LODWORD(v254) = v24 ^ (v22 >> 31);
  v255 = &v253;
  v29 = (char *)v3 + 32;
  v30 = (_QWORD *)*((_QWORD *)v3 + 4);
  do
  {
    v31 = v30[4];
    v32 = v31 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v31 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v33 = v30;
    else
      v33 = v30 + 1;
    if (v32)
      v29 = (char *)v30;
    v30 = (_QWORD *)*v33;
  }
  while (*v33);
  v34 = (__PAIR64__(v28, v26) >> 31);
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v29 + 5) + 40) + 12 * (int)(v24 ^ (v22 >> 31)))
     + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v29 + 5) + 40) + 12 * (int)(v24 ^ (v22 >> 31) ^ 1)))
  {
    v213 = 0;
    v214 = 0;
    v215 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v250 = &off_24F980458;
    LODWORD(v251) = v24 ^ (v22 >> 31);
    v252 = &v250;
    v60 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
    if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v60, v251))
      operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v60, v251);
    operations_research::sat::IntegerEncoder::FullDomainEncoding(v60, v251, &v241);
    v61 = v252;
    if (v252 == &v250)
    {
      v62 = 4;
      v61 = &v250;
    }
    else
    {
      if (!v252)
      {
LABEL_79:
        v69 = (int *)v241;
        v70 = v242[0];
        if (v241 == (char *)v242[0])
          goto LABEL_138;
        v206 = v34;
        v204 = v34 ^ 1;
        while (1)
        {
          v71 = *(_DWORD *)&v216[0][4 * *(_QWORD *)v69];
          v72 = v69[2] ^ 1;
          v73 = v71 ^ 1;
          LODWORD(v238) = v72;
          HIDWORD(v238) = v71 ^ 1;
          LODWORD(v239[0]) = v206;
          v247 = &off_24F980568;
          v248[0] = (int *)&v238;
          v248[1] = (int *)3;
          v249 = &v247;
          operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v248, (uint64_t)v3);
          v74 = v249;
          if (v249 == &v247)
          {
            v74 = &v247;
            v75 = 4;
          }
          else
          {
            if (!v249)
              goto LABEL_87;
            v75 = 5;
          }
          (*v74)[v75]();
LABEL_87:
          v238 = (uint64_t (**)())__PAIR64__(v71, v72);
          LODWORD(v239[0]) = v204;
          v244 = &off_24F980568;
          v245[0] = (int *)&v238;
          v245[1] = (int *)3;
          v246 = &v244;
          operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v245, (uint64_t)v3);
          v76 = v246;
          if (v246 == &v244)
          {
            v76 = &v244;
            v77 = 4;
            goto LABEL_91;
          }
          if (v246)
          {
            v77 = 5;
LABEL_91:
            (*v76)[v77]();
          }
          v78 = v214;
          if (v214 >= v215)
          {
            v81 = (char *)v213;
            v82 = v214 - (_BYTE *)v213;
            v83 = (v214 - (_BYTE *)v213) >> 2;
            v84 = v83 + 1;
            if ((unint64_t)(v83 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v85 = v215 - (_BYTE *)v213;
            if ((v215 - (_BYTE *)v213) >> 1 > v84)
              v84 = v85 >> 1;
            if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
              v86 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v86 = v84;
            if (!v86)
            {
              v87 = 0;
              v88 = (int *)(4 * v83);
              *(_DWORD *)(4 * v83) = v73;
              v89 = 4 * v83 + 4;
              if (v78 == v81)
                goto LABEL_113;
LABEL_104:
              v90 = v78 - 4 - v81;
              if (v90 < 0x2C)
                goto LABEL_291;
              if ((unint64_t)(v78 - &v87[v82]) < 0x20)
                goto LABEL_291;
              v91 = (v90 >> 2) + 1;
              v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
              v93 = &v78[-v92];
              v88 = (int *)((char *)v88 - v92);
              v94 = &v87[4 * v83 - 16];
              v95 = v78 - 16;
              v96 = v91 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v97 = *(_OWORD *)v95;
                *((_OWORD *)v94 - 1) = *((_OWORD *)v95 - 1);
                *(_OWORD *)v94 = v97;
                v94 -= 32;
                v95 -= 32;
                v96 -= 8;
              }
              while (v96);
              v78 = v93;
              if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_291:
                do
                {
                  v98 = *((_DWORD *)v78 - 1);
                  v78 -= 4;
                  *--v88 = v98;
                }
                while (v78 != v81);
              }
              goto LABEL_113;
            }
            if (v86 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v87 = (char *)operator new(4 * v86);
            v88 = (int *)&v87[4 * v83];
            *v88 = v73;
            v89 = (uint64_t)(v88 + 1);
            if (v78 != v81)
              goto LABEL_104;
LABEL_113:
            v213 = v88;
            v214 = (char *)v89;
            v215 = &v87[4 * v86];
            if (v81)
              operator delete(v81);
            v214 = (char *)v89;
            v80 = v211;
            v79 = v212;
            if (v211 < v212)
              goto LABEL_81;
LABEL_116:
            v99 = (char *)v210;
            v100 = v80 - (_BYTE *)v210;
            v101 = (v80 - (_BYTE *)v210) >> 2;
            v102 = v101 + 1;
            v3 = v208;
            if ((unint64_t)(v101 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v103 = v79 - (_BYTE *)v210;
            if (v103 >> 1 > v102)
              v102 = v103 >> 1;
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
              v104 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v104 = v102;
            if (v104)
            {
              if (v104 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v105 = operator new(4 * v104);
              v106 = (unsigned int *)&v105[4 * v101];
              *v106 = v71;
              v107 = (uint64_t)(v106 + 1);
              if (v80 == v99)
                goto LABEL_134;
LABEL_125:
              v108 = v80 - 4 - v99;
              if (v108 < 0x2C)
                goto LABEL_292;
              if ((unint64_t)(v80 - &v105[v100]) < 0x20)
                goto LABEL_292;
              v109 = (v108 >> 2) + 1;
              v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
              v111 = &v80[-v110];
              v106 = (unsigned int *)((char *)v106 - v110);
              v112 = &v105[4 * v101 - 16];
              v113 = (__int128 *)(v80 - 16);
              v114 = v109 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v115 = *v113;
                *(v112 - 1) = *(v113 - 1);
                *v112 = v115;
                v112 -= 2;
                v113 -= 2;
                v114 -= 8;
              }
              while (v114);
              v80 = v111;
              if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_292:
                do
                {
                  v116 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *--v106 = v116;
                }
                while (v80 != v99);
              }
              goto LABEL_134;
            }
            v105 = 0;
            v106 = (unsigned int *)(4 * v101);
            *(_DWORD *)(4 * v101) = v71;
            v107 = 4 * v101 + 4;
            if (v80 != v99)
              goto LABEL_125;
LABEL_134:
            v210 = v106;
            v211 = (char *)v107;
            v212 = &v105[4 * v104];
            if (v99)
              operator delete(v99);
            v211 = (char *)v107;
            v69 += 3;
            if (v69 == v70)
            {
LABEL_137:
              v69 = (int *)v241;
              LODWORD(v34) = v206;
LABEL_138:
              if (v69)
              {
                v242[0] = v69;
                operator delete(v69);
              }
              v117 = v214;
              if (v214 < v215)
              {
                *(_DWORD *)v214 = v34;
                v118 = (uint64_t)(v117 + 4);
                goto LABEL_171;
              }
              v119 = (char *)v213;
              v120 = v214 - (_BYTE *)v213;
              v121 = (v214 - (_BYTE *)v213) >> 2;
              v122 = v121 + 1;
              if ((unint64_t)(v121 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v123 = v215 - (_BYTE *)v213;
              if ((v215 - (_BYTE *)v213) >> 1 > v122)
                v122 = v123 >> 1;
              if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                v124 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v124 = v122;
              if (v124)
              {
                if (v124 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v125 = (char *)operator new(4 * v124);
                v126 = &v125[4 * v121];
                v127 = &v125[4 * v124];
                *(_DWORD *)v126 = v34;
                v118 = (uint64_t)(v126 + 4);
                v128 = v117 - v119;
                if (v117 == v119)
                  goto LABEL_169;
LABEL_163:
                v131 = v128 - 4;
                if (v131 < 0x2C)
                  goto LABEL_293;
                if ((unint64_t)(v117 - v125 - v120) < 0x20)
                  goto LABEL_293;
                v132 = (v131 >> 2) + 1;
                v133 = 4 * (v132 & 0x7FFFFFFFFFFFFFF8);
                v134 = &v117[-v133];
                v126 -= v133;
                v135 = &v125[4 * v121 - 16];
                v136 = v117 - 16;
                v137 = v132 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v138 = *(_OWORD *)v136;
                  *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
                  *(_OWORD *)v135 = v138;
                  v135 -= 32;
                  v136 -= 32;
                  v137 -= 8;
                }
                while (v137);
                v117 = v134;
                if (v132 != (v132 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_293:
                  do
                  {
                    v139 = *((_DWORD *)v117 - 1);
                    v117 -= 4;
                    *((_DWORD *)v126 - 1) = v139;
                    v126 -= 4;
                  }
                  while (v117 != v119);
                }
              }
              else
              {
                v125 = 0;
                v126 = (char *)(4 * v121);
                v127 = 0;
                *(_DWORD *)(4 * v121) = v34;
                v118 = 4 * v121 + 4;
                v128 = v117 - v119;
                if (v117 != v119)
                  goto LABEL_163;
              }
LABEL_169:
              v213 = v126;
              v214 = (char *)v118;
              v215 = v127;
              if (v119)
                operator delete(v119);
LABEL_171:
              v214 = (char *)v118;
              v140 = v34 ^ 1;
              v141 = v211;
              if (v211 < v212)
              {
                *(_DWORD *)v211 = v140;
                v142 = (uint64_t)(v141 + 4);
                goto LABEL_193;
              }
              v143 = (char *)v210;
              v144 = v211 - (_BYTE *)v210;
              v145 = (v211 - (_BYTE *)v210) >> 2;
              v146 = v145 + 1;
              if ((unint64_t)(v145 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v147 = v212 - (_BYTE *)v210;
              if ((v212 - (_BYTE *)v210) >> 1 > v146)
                v146 = v147 >> 1;
              if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL)
                v148 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v148 = v146;
              if (v148)
              {
                if (v148 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v149 = (char *)operator new(4 * v148);
                v150 = &v149[4 * v145];
                v151 = &v149[4 * v148];
                *(_DWORD *)v150 = v140;
                v142 = (uint64_t)(v150 + 4);
                v152 = v141 - v143;
                if (v141 != v143)
                {
LABEL_182:
                  v153 = v152 - 4;
                  if (v153 < 0x2C)
                    goto LABEL_294;
                  if ((unint64_t)(v141 - v149 - v144) < 0x20)
                    goto LABEL_294;
                  v154 = (v153 >> 2) + 1;
                  v155 = 4 * (v154 & 0x7FFFFFFFFFFFFFF8);
                  v156 = &v141[-v155];
                  v150 -= v155;
                  v157 = &v149[4 * v145 - 16];
                  v158 = v141 - 16;
                  v159 = v154 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v160 = *(_OWORD *)v158;
                    *((_OWORD *)v157 - 1) = *((_OWORD *)v158 - 1);
                    *(_OWORD *)v157 = v160;
                    v157 -= 32;
                    v158 -= 32;
                    v159 -= 8;
                  }
                  while (v159);
                  v141 = v156;
                  if (v154 != (v154 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_294:
                    do
                    {
                      v161 = *((_DWORD *)v141 - 1);
                      v141 -= 4;
                      *((_DWORD *)v150 - 1) = v161;
                      v150 -= 4;
                    }
                    while (v141 != v143);
                  }
                }
              }
              else
              {
                v149 = 0;
                v150 = (char *)(4 * v145);
                v151 = 0;
                *(_DWORD *)(4 * v145) = v140;
                v142 = 4 * v145 + 4;
                v152 = v141 - v143;
                if (v141 != v143)
                  goto LABEL_182;
              }
              v210 = v150;
              v211 = (char *)v142;
              v212 = v151;
              if (v143)
                operator delete(v143);
LABEL_193:
              v211 = (char *)v142;
              v241 = (char *)&off_24F980568;
              v242[0] = (int *)v213;
              v242[1] = (int *)((v214 - (_BYTE *)v213) >> 2);
              v243 = &v241;
              operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v242, (uint64_t)v3);
              v162 = v243;
              if (v243 == &v241)
              {
                v163 = 4;
                v162 = &v241;
LABEL_197:
                (*(void (**)(void))&(*v162)[8 * v163])();
              }
              else if (v243)
              {
                v163 = 5;
                goto LABEL_197;
              }
              v238 = &off_24F980568;
              v239[0] = (int *)v210;
              v239[1] = (int *)((v211 - (_BYTE *)v210) >> 2);
              v240 = &v238;
              operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v239, (uint64_t)v3);
              v164 = v240;
              if (v240 == &v238)
              {
                v165 = 4;
                v164 = &v238;
LABEL_202:
                (*v164)[v165]();
              }
              else if (v240)
              {
                v165 = 5;
                goto LABEL_202;
              }
              if (v210)
              {
                v211 = (char *)v210;
                operator delete(v210);
              }
              if (v213)
              {
                v214 = (char *)v213;
                operator delete(v213);
              }
              goto LABEL_207;
            }
          }
          else
          {
            *(_DWORD *)v214 = v73;
            v214 = v78 + 4;
            v80 = v211;
            v79 = v212;
            if (v211 >= v212)
              goto LABEL_116;
LABEL_81:
            *(_DWORD *)v80 = v71;
            v3 = v208;
            v211 = v80 + 4;
            v69 += 3;
            if (v69 == v70)
              goto LABEL_137;
          }
        }
      }
      v62 = 5;
    }
    (*v61)[v62]();
    goto LABEL_79;
  }
  v247 = &off_24F983218;
  LODWORD(v248[0]) = v24 ^ (v22 >> 31);
  v249 = &v247;
  v35 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()((unsigned int *)v248, (uint64_t)v3);
  v36 = v34 | ((unint64_t)*(unsigned int *)&v216[0][4 * v35] << 32);
  v250 = &off_24F983CD8;
  v251 = v36;
  v252 = &v250;
  v37 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v3);
  operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v37, v251 ^ 1, SHIDWORD(v251));
  v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v3);
  operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v38, v251, HIDWORD(v251) ^ 1);
  v39 = v252;
  if (v252 == &v250)
  {
    v40 = 4;
    v39 = &v250;
    goto LABEL_153;
  }
  if (v252)
  {
    v40 = 5;
LABEL_153:
    (*v39)[v40]();
  }
  v129 = v249;
  if (v249 == &v247)
  {
    v130 = 4;
    v129 = &v247;
  }
  else
  {
    if (!v249)
      goto LABEL_207;
    v130 = 5;
  }
  (*v129)[v130]();
LABEL_207:
  v166 = v216[0];
  if (v216[0])
  {
    v216[1] = v216[0];
LABEL_278:
    operator delete(v166);
  }
}

void sub_22DAAD5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;
  void *v60;

  v60 = *(void **)(v58 - 128);
  if (v60)
  {
    *(_QWORD *)(v58 - 120) = v60;
    operator delete(v60);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::LoadElementConstraintHalfAC(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  signed int v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t *v28;
  uint64_t (***v29)();
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  signed int v35;
  uint64_t *v36;
  uint64_t (***v37)();
  uint64_t v38;
  _DWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  void *v45[3];
  char *v46;
  char *v47;
  void *__p[3];
  void *v49[3];
  uint64_t (**v50)();
  signed int v51;
  uint64_t (***v52)();
  uint64_t (**v53)();
  signed int v54;
  uint64_t (***v55)();
  uint64_t (**v56)();
  signed int v57;
  uint64_t (***v58)();
  uint64_t (**v59)();
  signed int v60;
  uint64_t (***v61)();
  uint64_t (**v62)();
  int v63;
  uint64_t (***v64)();
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 14)
    v6 = (int *)*((_QWORD *)this + 6);
  else
    v6 = (int *)&operations_research::sat::_ElementConstraintProto_default_instance_;
  v8 = v6[9];
  v7 = v6[10];
  if (~v8 <= v8)
    v9 = v6[9];
  else
    v9 = ~v8;
  v10 = *(_DWORD *)(*v5 + 4 * v9);
  if (~v7 <= v7)
    v11 = v6[10];
  else
    v11 = ~v7;
  v12 = *(_DWORD *)(*v5 + 4 * v11);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, v6 + 4, (int **)v49);
  v13 = v10 ^ (v8 >> 31);
  v62 = &off_24F983188;
  v63 = v13;
  v64 = &v62;
  v14 = (char *)a2 + 32;
  v15 = (_QWORD *)*((_QWORD *)a2 + 4);
  v16 = (char *)a2 + 32;
  v17 = v15;
  do
  {
    v18 = v17[4];
    v19 = v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v20 = v17;
    else
      v20 = v17 + 1;
    if (v19)
      v16 = (char *)v17;
    v17 = (_QWORD *)*v20;
  }
  while (*v20);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 5) + 40) + 12 * v13)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 5) + 40) + 12 * (v13 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v46, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1519);
    v40 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: !m->Get(IsFixed(index)) ", 38);
    goto LABEL_63;
  }
  v21 = v12 ^ (v7 >> 31);
  v59 = &off_24F983188;
  v60 = v21;
  v61 = &v59;
  do
  {
    v22 = v15[4];
    v23 = v22 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v22 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v24 = v15;
    else
      v24 = v15 + 1;
    if (v23)
      v14 = (char *)v15;
    v15 = (_QWORD *)*v24;
  }
  while (*v24);
  if (!(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 5) + 40) + 12 * v21)
       + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 5) + 40) + 12 * (v21 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v46, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1520);
    v41 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: !m->Get(IsFixed(target)) ", 39);
LABEL_63:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v46);
  }
  v56 = &off_24F980458;
  v57 = v21;
  v58 = &v56;
  v25 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v25, v57))
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v25, v57);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v25, v57, (char **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v26 = v58;
  if (v58 == &v56)
  {
    v27 = 4;
    v26 = &v56;
  }
  else
  {
    if (!v58)
      goto LABEL_37;
    v27 = 5;
  }
  (*v26)[v27]();
LABEL_37:
  v53 = &off_24F980458;
  v54 = v13;
  v55 = &v53;
  v28 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v28, v54))
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v28, v54);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v28, v54, &v46);
  v29 = v55;
  if (v55 == &v53)
  {
    v30 = 4;
    v29 = &v53;
  }
  else
  {
    if (!v55)
      goto LABEL_44;
    v30 = 5;
  }
  (*v29)[v30]();
LABEL_44:
  v31 = v46;
  v32 = v47;
  if (v46 == v47)
    goto LABEL_56;
  do
  {
    v33 = *(_QWORD *)v31;
    v34 = *((_DWORD *)v31 + 2);
    v35 = *(_DWORD *)((char *)v49[0] + ((uint64_t)(*(_QWORD *)v31 << 32) >> 30));
    v50 = &off_24F980458;
    v51 = v35;
    v52 = &v50;
    v36 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
    if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v36, v51))
      operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v36, v51);
    operations_research::sat::IntegerEncoder::FullDomainEncoding(v36, v51, (char **)v45);
    if (v45[0])
    {
      v45[1] = v45[0];
      operator delete(v45[0]);
    }
    v37 = v52;
    if (v52 == &v50)
    {
      v37 = &v50;
      v38 = 4;
    }
    else
    {
      if (!v52)
        goto LABEL_54;
      v38 = 5;
    }
    (*v37)[v38]();
LABEL_54:
    v39 = operator new(4uLL);
    *v39 = v34;
    v43 = v39 + 1;
    v44 = v39 + 1;
    v42 = v39;
    v43 = v39;
    operator delete(v39);
    v31 += 12;
  }
  while (v31 != v32);
  v31 = v46;
LABEL_56:
  if (v31)
  {
    v47 = v31;
    operator delete(v31);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
}

void sub_22DAADCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  char *v35;
  char *v37;
  uint64_t v38;

  v37 = a31;
  if (a31 == v35)
  {
    v38 = 4;
    v37 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadTableConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  char *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  char *v55;
  char *v56;
  void *v57;
  char *v58;
  void *v59;
  void *v60;
  operations_research::sat *v61;
  const operations_research::sat::ConstraintProto *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  void *__p;
  __int128 v68;
  char *v69;
  __int128 v70;
  void *v71;
  __int128 v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  char *v76;
  int *v77;

  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 16)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_TableConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)&v76);
  if (*((_DWORD *)this + 15) == 16)
    v7 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v7 = &operations_research::sat::_TableConstraintProto_default_instance_;
  v8 = *((int *)v7 + 10);
  v9 = (const void *)v7[6];
  v74 = 0;
  v75 = 0;
  v73 = 0;
  if ((_DWORD)v8)
  {
    if ((v8 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = 8 * v8;
    v11 = (char *)operator new(8 * v8);
    v12 = &v11[8 * v8];
    v73 = v11;
    v75 = v12;
    memcpy(v11, v9, v10);
    v74 = v12;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v61 = this;
  v62 = a2;
  v13 = (char *)v77 - v76;
  v66 = v11;
  v14 = ((v12 - v11) >> 3) / (unint64_t)(int)(((char *)v77 - v76) >> 2);
  std::vector<std::vector<long long>>::vector(&v71, (int)v14);
  if ((int)v14 >= 1 && (int)(v13 >> 2) >= 1)
  {
    v24 = 0;
    v25 = 0;
    v63 = v14;
    do
    {
      v26 = v25;
      v25 += v13 >> 2;
      v64 = v25;
      v65 = v24;
      do
      {
        while (1)
        {
          v27 = (char *)v71 + 24 * v24;
          v28 = v73;
          v29 = (uint64_t *)(v27 + 8);
          v30 = (char *)*((_QWORD *)v27 + 1);
          v31 = *((_QWORD *)v27 + 2);
          v66 = (char *)v73;
          if ((unint64_t)v30 >= v31)
            break;
          *(_QWORD *)v30 = v73[v26];
          *v29 = (uint64_t)(v30 + 8);
          if (v25 == (_DWORD)++v26)
            goto LABEL_25;
        }
        v32 = *(char **)v27;
        v33 = (uint64_t)&v30[-*(_QWORD *)v27];
        v34 = v33 >> 3;
        v35 = (v33 >> 3) + 1;
        if (v35 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v36 = v31 - (_QWORD)v32;
        if (v36 >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (!v37)
        {
          v38 = 0;
          v39 = (_QWORD *)(8 * v34);
          *(_QWORD *)(8 * v34) = v73[v26];
          v40 = 8 * v34 + 8;
          if (v30 == v32)
            goto LABEL_46;
LABEL_40:
          v41 = v30 - 8 - v32;
          if (v41 < 0x58)
            goto LABEL_79;
          if ((unint64_t)(v30 - &v38[v33]) < 0x20)
            goto LABEL_79;
          v42 = (v41 >> 3) + 1;
          v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          v44 = &v30[-v43];
          v39 = (_QWORD *)((char *)v39 - v43);
          v45 = &v38[8 * v34 - 16];
          v46 = v30 - 16;
          v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          v30 = v44;
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_79:
            do
            {
              v49 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *--v39 = v49;
            }
            while (v30 != v32);
          }
          goto LABEL_46;
        }
        if (v37 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = operator new(8 * v37);
        v39 = &v38[8 * v34];
        *v39 = v28[v26];
        v40 = (uint64_t)(v39 + 1);
        if (v30 != v32)
          goto LABEL_40;
LABEL_46:
        *(_QWORD *)v27 = v39;
        *v29 = v40;
        *((_QWORD *)v27 + 2) = &v38[8 * v37];
        if (v32)
          operator delete(v32);
        v25 = v64;
        v24 = v65;
        *v29 = v40;
        ++v26;
      }
      while (v64 != (_DWORD)v26);
LABEL_25:
      ++v24;
    }
    while (v24 != v63);
  }
  v16 = &operations_research::sat::_TableConstraintProto_default_instance_;
  if (*((_DWORD *)v61 + 15) == 16)
    v16 = (uint64_t *)*((_QWORD *)v61 + 6);
  v17 = ((char *)v77 - v76) >> 2;
  if (*((_BYTE *)v16 + 60))
  {
    v69 = (char *)v71;
    v70 = v72;
    v72 = 0uLL;
    v71 = 0;
    operations_research::sat::AddNegatedTableConstraint((uint64_t)v76, v17, &v69, (uint64_t)v62);
    v18 = v69;
    if (!v69)
      goto LABEL_61;
    v19 = (char *)v70;
    v20 = v69;
    if ((char *)v70 != v69)
    {
      v21 = (char *)v70;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v19 - 2) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = v69;
    }
    *(_QWORD *)&v70 = v18;
  }
  else
  {
    __p = v71;
    v68 = v72;
    v72 = 0uLL;
    v71 = 0;
    operations_research::sat::AddTableConstraint((uint64_t)v76, v17, (char *)&__p, (uint64_t)v62);
    v50 = (char *)__p;
    if (!__p)
      goto LABEL_61;
    v51 = (char *)v68;
    v20 = __p;
    if ((void *)v68 != __p)
    {
      v52 = (char *)v68;
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 3);
        v52 -= 24;
        v53 = v54;
        if (v54)
        {
          *((_QWORD *)v51 - 2) = v53;
          operator delete(v53);
        }
        v51 = v52;
      }
      while (v52 != v50);
      v20 = __p;
    }
    *(_QWORD *)&v68 = v50;
  }
  operator delete(v20);
LABEL_61:
  v55 = (char *)v71;
  if (v71)
  {
    v56 = (char *)v72;
    v57 = v71;
    if ((void *)v72 != v71)
    {
      v58 = (char *)v72;
      do
      {
        v60 = (void *)*((_QWORD *)v58 - 3);
        v58 -= 24;
        v59 = v60;
        if (v60)
        {
          *((_QWORD *)v56 - 2) = v59;
          operator delete(v59);
        }
        v56 = v58;
      }
      while (v58 != v55);
      v57 = v71;
    }
    *(_QWORD *)&v72 = v55;
    operator delete(v57);
  }
  if (v66)
  {
    v74 = v66;
    operator delete(v66);
  }
  if (v76)
  {
    v77 = (int *)v76;
    operator delete(v76);
  }
}

void sub_22DAAE234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  std::vector<std::vector<int>>::~vector[abi:ne180100](&a17);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a23);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadAutomatonConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  void *v32;
  void *__p[2];
  char *v34;
  void *v35;
  char *v36;
  unint64_t v37;
  void *v38[3];
  const operations_research::sat::ConstraintProto *v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v6 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
  if (*((_DWORD *)this + 15) == 17)
    v7 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v7 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v7 + 28, (int **)v38);
  if (*((_DWORD *)this + 15) == 17)
    v8 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v8 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
  v9 = *((int *)v8 + 10);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  std::vector<std::vector<long long>>::reserve((uint64_t)&v35, v9);
  v10 = v9;
  if ((int)v9 >= 1)
  {
    v11 = 0;
    v12 = 8 * v10;
    do
    {
      if (*((_DWORD *)this + 15) == 17)
        v13 = (uint64_t *)*((_QWORD *)this + 6);
      else
        v13 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
      v14 = *(_QWORD *)(v13[6] + v11);
      v15 = *(_QWORD *)(v13[12] + v11);
      v16 = *(_QWORD *)(v13[9] + v11);
      v17 = operator new(0x18uLL);
      __p[1] = v17 + 3;
      v34 = (char *)(v17 + 3);
      *v17 = v14;
      v17[1] = v15;
      v17[2] = v16;
      __p[0] = v17;
      v18 = v36;
      if ((unint64_t)v36 < v37)
      {
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_OWORD *)v18 = *(_OWORD *)__p;
        *((_QWORD *)v18 + 2) = v34;
        v36 = v18 + 24;
      }
      else
      {
        v36 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)&v35, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      v11 += 8;
    }
    while (v12 != v11);
  }
  if (*((_DWORD *)this + 15) == 17)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  v19 = v6[17];
  v20 = *((int *)v6 + 4);
  v21 = (const void *)v6[3];
  __p[0] = 0;
  __p[1] = 0;
  v34 = 0;
  if ((_DWORD)v20)
  {
    if ((v20 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v22 = 8 * v20;
    v23 = (char *)operator new(8 * v20);
    v24 = &v23[8 * v20];
    __p[0] = v23;
    v34 = v24;
    memcpy(v23, v21, v22);
    __p[1] = v24;
  }
  operations_research::sat::TransitionConstraint((uint64_t)v38, (uint64_t *)&v35, v19, (uint64_t)__p, (uint64_t)v40);
  v39 = a2;
  if (!v41)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v41 + 48))(v41, &v39);
  v25 = v41;
  if (v41 == v40)
  {
    v26 = 4;
    v25 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_28;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_28:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v27 = (char *)v35;
  if (v35)
  {
    v28 = v36;
    v29 = v35;
    if (v36 != v35)
    {
      v30 = v36;
      do
      {
        v32 = (void *)*((_QWORD *)v30 - 3);
        v30 -= 24;
        v31 = v32;
        if (v32)
        {
          *((_QWORD *)v28 - 2) = v31;
          operator delete(v31);
        }
        v28 = v30;
      }
      while (v30 != v27);
      v29 = v35;
    }
    v36 = v27;
    operator delete(v29);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
}

void sub_22DAAE564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, _Unwind_Exception *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _Unwind_Exception *v24;

  if (__p)
  {
    operator delete(__p);
    std::vector<std::vector<int>>::~vector[abi:ne180100](&a13);
    v24 = exception_object;
    if (!exception_object)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::vector<int>>::~vector[abi:ne180100](&a13);
    v24 = exception_object;
    if (!exception_object)
      goto LABEL_3;
  }
  a17 = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<long long>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        v12 = v2;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v2 - 2) = v13;
            operator delete(v13);
          }
          v2 = v12;
        }
        while (v12 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

void operations_research::sat::GetSquareMatrixFromIntegerVariables(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  operations_research::sat::SatSolver *v15;
  int v16;
  uint64_t v17;
  operations_research::sat::SatSolver *v18;
  int v19;
  int32x4_t *v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t (***v31)();
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t (***v35)();
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t (***v40)();
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  void *__p;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t (**v52)();
  int v53;
  uint64_t (***v54)();
  uint64_t (**v55)();
  int v56;
  uint64_t (***v57)();
  uint64_t (**v58)();
  int v59;
  uint64_t (***v60)();
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v6 = a1[1];
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  v47 = *(_DWORD *)(v8 + 280);
  if (v47 == -1)
  {
    v14 = v8;
    v15 = *(operations_research::sat::SatSolver **)v8;
    v16 = *((_DWORD *)v15 + 4);
    operations_research::sat::SatSolver::SetNumVariables(v15, v16 + 1);
    *(_DWORD *)(v14 + 280) = 2 * v16;
    operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)v14, 2 * v16);
    v47 = *(_DWORD *)(v14 + 280);
    v9 = v6 - v7;
    v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    v11 = *(_DWORD *)(v10 + 280);
    if (v11 != -1)
    {
LABEL_3:
      v12 = v9 << 30;
      v13 = (int)(v9 >> 2);
      __p = 0;
      v49 = 0;
      v50 = 0;
      if (!(v9 << 30))
        goto LABEL_14;
      goto LABEL_7;
    }
  }
  else
  {
    v9 = v6 - v7;
    v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    v11 = *(_DWORD *)(v10 + 280);
    if (v11 != -1)
      goto LABEL_3;
  }
  v17 = v10;
  v18 = *(operations_research::sat::SatSolver **)v10;
  v19 = *((_DWORD *)v18 + 4);
  operations_research::sat::SatSolver::SetNumVariables(v18, v19 + 1);
  *(_DWORD *)(v17 + 280) = 2 * v19;
  operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)v17, 2 * v19);
  v11 = *(_DWORD *)(v17 + 280);
  v12 = v9 << 30;
  v13 = (int)(v9 >> 2);
  __p = 0;
  v49 = 0;
  v50 = 0;
  if (!(v9 << 30))
    goto LABEL_14;
LABEL_7:
  if (v12 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v20 = (int32x4_t *)operator new(v9 & 0x3FFFFFFFFLL);
  v21 = v11 ^ 1;
  __p = v20;
  v50 = &v20->i8[4 * v13];
  v22 = (v13 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v23 = (unsigned int *)v20;
  if (v22 < 7)
    goto LABEL_47;
  v24 = v22 + 1;
  v23 = (unsigned int *)v20 + (v24 & 0x7FFFFFFFFFFFFFF8);
  v25 = vdupq_n_s32(v21);
  v26 = v20 + 1;
  v27 = v24 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v26[-1] = v25;
    *v26 = v25;
    v26 += 2;
    v27 -= 8;
  }
  while (v27);
  if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_47:
    do
      *v23++ = v21;
    while (v23 != (unsigned int *)((char *)v20 + 4 * v13));
  }
  v49 = &v20->i8[4 * v13];
LABEL_14:
  std::vector<std::vector<operations_research::sat::Literal>>::vector(a3, v13, (uint64_t)&__p);
  v28 = (unint64_t)v9 >> 2;
  if (__p)
  {
    v49 = (char *)__p;
    operator delete(__p);
  }
  if ((int)v28 >= 1)
  {
    v29 = 0;
    v46 = ((unint64_t)v9 >> 2);
    do
    {
      v30 = 0;
      do
      {
        v33 = *(_DWORD *)(*a1 + 4 * v29);
        v58 = &off_24F983188;
        v59 = v33;
        v60 = &v58;
        v34 = std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::operator()((uint64_t)&v58, a2);
        v35 = v60;
        if (v60 == &v58)
        {
          v35 = &v58;
          v36 = 4;
        }
        else
        {
          if (!v60)
            goto LABEL_29;
          v36 = 5;
        }
        (*v35)[v36]();
LABEL_29:
        if (v34)
        {
          v37 = *(_DWORD *)(*a1 + 4 * v29);
          v55 = &off_24F983218;
          v56 = v37;
          v57 = &v55;
          v38 = std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()((uint64_t)&v55, a2);
          v31 = v57;
          if (v57 != &v55)
          {
            if (v57)
            {
              v32 = 5;
LABEL_21:
              (*v31)[v32]();
            }
            *(_DWORD *)(*(_QWORD *)(*a3 + 24 * v29) + 4 * v38) = v47;
            goto LABEL_23;
          }
          v31 = &v55;
          v32 = 4;
          goto LABEL_21;
        }
        v39 = *(_DWORD *)(*a1 + 4 * v29);
        v51 = a2;
        v52 = &off_24F980458;
        v53 = v39;
        v54 = &v52;
        std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::operator()((uint64_t)&v52, &v51, (char **)&__p);
        v40 = v54;
        if (v54 == &v52)
        {
          v40 = &v52;
          v41 = 4;
          goto LABEL_37;
        }
        if (v54)
        {
          v41 = 5;
LABEL_37:
          (*v40)[v41]();
        }
        v42 = (char *)__p;
        v43 = v49;
        if (__p != v49)
        {
          v44 = *(_QWORD *)(*a3 + 24 * v29);
          v45 = (char *)__p;
          do
          {
            *(_DWORD *)(v44 + ((uint64_t)(*(_QWORD *)v45 << 32) >> 30)) = *((_DWORD *)v45 + 2);
            v45 += 12;
          }
          while (v45 != v43);
        }
        if (v42)
        {
          v49 = v42;
          operator delete(v42);
        }
LABEL_23:
        ++v30;
      }
      while (v30 != (_DWORD)v28);
      ++v29;
    }
    while (v29 != v46);
  }
}

void sub_22DAAEB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DAAEB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  void **v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == &a15)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::vector<std::vector<int>>::~vector[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadCircuitConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t *v3;
  uint64_t v4;
  const void *v5;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  void *__p[3];
  void *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  char *v19;
  const operations_research::sat::ConstraintProto *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 15) == 15)
    v3 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v3 = &operations_research::sat::_CircuitConstraintProto_default_instance_;
  v4 = *((int *)v3 + 4);
  if (!(_DWORD)v4)
    return;
  v5 = (const void *)v3[3];
  v18 = 0;
  v19 = 0;
  v17 = 0;
  if ((v4 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v17 = operator new(4 * v4);
  v19 = (char *)v17 + 4 * v4;
  memcpy(v17, v5, 4 * v4);
  v18 = v19;
  v7 = (const void *)v3[6];
  v8 = *((int *)v3 + 10);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if ((_DWORD)v8)
  {
    if ((v8 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = operator new(4 * v8);
    v16 = (char *)v14 + 4 * v8;
    memcpy(v14, v7, 4 * v8);
    v15 = v16;
  }
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v9, (int *)v3 + 16, (char **)__p);
  v10 = operations_research::sat::ReindexArcs((int **)&v17, (int **)&v14);
  operations_research::sat::SubcircuitConstraint(v10, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)__p, 0, (uint64_t)v21);
  v20 = a2;
  if (!v22)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v22 + 48))(v22, &v20);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
    goto LABEL_14;
  }
  if (v22)
  {
    v12 = 5;
LABEL_14:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_22DAAED94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v24;

  if (a13)
  {
    operator delete(a13);
    v24 = __p;
    if (!__p)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v24 = __p;
    if (!__p)
      goto LABEL_4;
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_22DAAEE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16)
    JUMPOUT(0x22DAAEDE8);
  JUMPOUT(0x22DAAEDE0);
}

void operations_research::sat::LoadRoutesConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t *v3;
  uint64_t v4;
  const void *v5;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  void *__p[3];
  void *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  char *v19;
  const operations_research::sat::ConstraintProto *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 15) == 23)
    v3 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v3 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
  v4 = *((int *)v3 + 4);
  if (!(_DWORD)v4)
    return;
  v5 = (const void *)v3[3];
  v18 = 0;
  v19 = 0;
  v17 = 0;
  if ((v4 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v17 = operator new(4 * v4);
  v19 = (char *)v17 + 4 * v4;
  memcpy(v17, v5, 4 * v4);
  v18 = v19;
  v7 = (const void *)v3[6];
  v8 = *((int *)v3 + 10);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if ((_DWORD)v8)
  {
    if ((v8 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = operator new(4 * v8);
    v16 = (char *)v14 + 4 * v8;
    memcpy(v14, v7, 4 * v8);
    v15 = v16;
  }
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v9, (int *)v3 + 16, (char **)__p);
  v10 = operations_research::sat::ReindexArcs((int **)&v17, (int **)&v14);
  operations_research::sat::SubcircuitConstraint(v10, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)__p, 1, (uint64_t)v21);
  v20 = a2;
  if (!v22)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v22 + 48))(v22, &v20);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
    goto LABEL_14;
  }
  if (v22)
  {
    v12 = 5;
LABEL_14:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_22DAAF02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v24;

  if (a13)
  {
    operator delete(a13);
    v24 = __p;
    if (!__p)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v24 = __p;
    if (!__p)
      goto LABEL_4;
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_22DAAF0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16)
    JUMPOUT(0x22DAAF080);
  JUMPOUT(0x22DAAF078);
}

void operations_research::sat::LoadCircuitCoveringConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int32x4_t *v12;
  unint64_t v13;
  uint64_t *v14;
  int32x4_t *v15;
  uint64_t v16;
  int32x4_t *v17;
  int32x4_t *v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  void *v34;
  void *__p;
  void *v36;
  __int8 *v37;
  void *v38;
  char *v39;
  void *v40[3];
  const operations_research::sat::ConstraintProto *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 25)
    v6 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v6 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)v40);
  operations_research::sat::GetSquareMatrixFromIntegerVariables((uint64_t *)v40, (uint64_t)a2, &v38);
  if (*((_DWORD *)this + 15) == 25)
    v7 = (uint64_t *)*((_QWORD *)this + 6);
  else
    v7 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
  v8 = v7[6];
  v9 = *((int *)v7 + 10);
  v10 = 8 * v9;
  v11 = (uint64_t *)(v8 + 8 * v9);
  v36 = 0;
  v37 = 0;
  __p = 0;
  if (v11 != (uint64_t *)v8)
  {
    if ((v10 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (int32x4_t *)operator new(v10 >> 1);
    __p = v12;
    v37 = &v12->i8[4 * v9];
    v13 = 8 * v9 - 8;
    v14 = (uint64_t *)v8;
    v15 = v12;
    if (v13 < 0x38)
      goto LABEL_45;
    v16 = (v13 >> 3) + 1;
    v14 = (uint64_t *)(v8 + 8 * (v16 & 0x3FFFFFFFFFFFFFF8));
    v15 = (int32x4_t *)((char *)v12 + 4 * (v16 & 0x3FFFFFFFFFFFFFF8));
    v17 = v12 + 1;
    v18 = (int32x4_t *)(v8 + 32);
    v19 = v16 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v21 = v18[-2];
      v20 = v18[-1];
      v23 = *v18;
      v22 = v18[1];
      v18 += 4;
      v17[-1] = vuzp1q_s32(v21, v20);
      *v17 = vuzp1q_s32(v23, v22);
      v17 += 2;
      v19 -= 8;
    }
    while (v19);
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_45:
      do
      {
        v24 = *v14++;
        v15->i32[0] = v24;
        v15 = (int32x4_t *)((char *)v15 + 4);
      }
      while (v14 != v11);
    }
    v36 = v15;
  }
  operations_research::sat::ExactlyOnePerRowAndPerColumn((uint64_t *)&v38, (uint64_t)v44);
  v41 = a2;
  if (!v45)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v45 + 48))(v45, &v41);
  v25 = v45;
  if (v45 == v44)
  {
    v26 = 4;
    v25 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_21;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_21:
  operations_research::sat::CircuitCovering((uint64_t *)&v38, (uint64_t)&__p, (uint64_t)v42);
  v41 = a2;
  if (!v43)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, const operations_research::sat::ConstraintProto **))(*(_QWORD *)v43 + 48))(v43, &v41);
  v27 = v43;
  if (v43 == v42)
  {
    v28 = 4;
    v27 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_27;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_27:
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  v29 = (char *)v38;
  if (v38)
  {
    v30 = v39;
    v31 = v38;
    if (v39 != v38)
    {
      v32 = v39;
      do
      {
        v34 = (void *)*((_QWORD *)v32 - 3);
        v32 -= 24;
        v33 = v34;
        if (v34)
        {
          *((_QWORD *)v30 - 2) = v33;
          operator delete(v33);
        }
        v30 = v32;
      }
      while (v32 != v29);
      v31 = v38;
    }
    v39 = v29;
    operator delete(v31);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
}

void sub_22DAAF388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::LoadConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  int v3;
  uint64_t result;

  v3 = *((_DWORD *)this + 15);
  result = 1;
  switch(v3)
  {
    case 0:
    case 19:
      return result;
    case 3:
      operations_research::sat::LoadBoolOrConstraint(this, a2, a3);
      result = 1;
      break;
    case 4:
      operations_research::sat::LoadBoolAndConstraint((uint64_t **)this, a2, a3);
      result = 1;
      break;
    case 5:
      operations_research::sat::LoadBoolXorConstraint(this, a2, a3);
      result = 1;
      break;
    case 7:
      operations_research::sat::LoadIntDivConstraint(this, a2, a3);
      result = 1;
      break;
    case 9:
      operations_research::sat::LoadIntMaxConstraint(this, a2, a3);
      result = 1;
      break;
    case 10:
      operations_research::sat::LoadIntMinConstraint(this, a2, a3);
      result = 1;
      break;
    case 11:
      operations_research::sat::LoadIntProdConstraint(this, a2, a3);
      result = 1;
      break;
    case 12:
      operations_research::sat::LoadLinearConstraint(this, a2, a3);
      result = 1;
      break;
    case 13:
      operations_research::sat::LoadAllDiffConstraint(this, a2, a3);
      result = 1;
      break;
    case 14:
      operations_research::sat::LoadElementConstraint(this, a2, a3);
      result = 1;
      break;
    case 15:
      operations_research::sat::LoadCircuitConstraint(this, a2, a3);
      result = 1;
      break;
    case 16:
      operations_research::sat::LoadTableConstraint(this, a2, a3);
      result = 1;
      break;
    case 17:
      operations_research::sat::LoadAutomatonConstraint(this, a2, a3);
      result = 1;
      break;
    case 20:
      operations_research::sat::LoadNoOverlapConstraint(this, a2, a3);
      result = 1;
      break;
    case 21:
      operations_research::sat::LoadNoOverlap2dConstraint(this, a2, a3);
      result = 1;
      break;
    case 22:
      operations_research::sat::LoadCumulativeConstraint(this, a2, a3);
      result = 1;
      break;
    case 23:
      operations_research::sat::LoadRoutesConstraint(this, a2, a3);
      result = 1;
      break;
    case 25:
      operations_research::sat::LoadCircuitCoveringConstraint(this, a2, a3);
      result = 1;
      break;
    case 26:
      operations_research::sat::LoadAtMostOneConstraint(this, a2, a3);
      result = 1;
      break;
    case 27:
      operations_research::sat::LoadLinMaxConstraint(this, a2, a3);
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F982B40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F982B40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(int *a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(*a2);
  return operations_research::sat::IntervalsRepository::CreateInterval(v3, a1[2], a1[3], a1[4], 0, a1[5]);
}

uint64_t std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat19NewOptionalIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_"
                     "NS0_7LiteralEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat19NewOptionalIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag"
                                "_EiEES4_S4_NS0_7LiteralEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat19NewOptionalIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_NS0_7LiteralEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat19NewOptionalIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_NS0_7LiteralEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operator new();
  *(_QWORD *)v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a1);
  *(_QWORD *)(v8 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a1);
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_QWORD *)(v8 + 128) = 0;
  v9 = v3;
  v10 = (_QWORD *)*v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v9 = v10;
        v11 = v10[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d)
          break;
        v10 = (_QWORD *)*v9;
        v3 = v9;
        if (!*v9)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d)
        break;
      v10 = (_QWORD *)v9[1];
      if (!v10)
      {
        v3 = v9 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v9;
    v9 = operator new(0x30uLL);
    v9[4] = &gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v12;
    *v3 = v9;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v9;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v9[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F982BF8;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DAAF8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x20C40A3A67D38);
  _Unwind_Resume(a1);
}

operations_research::sat::PrecedencesPropagator *operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::PrecedencesPropagator *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
    return (operations_research::sat::PrecedencesPropagator *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::PrecedencesPropagator *)operator new();
  operations_research::sat::PrecedencesPropagator::PrecedencesPropagator(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F982BC0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DAAFA78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F3C407E1D6AB2);
  _Unwind_Resume(a1);
}

operations_research::sat::PrecedencesPropagator *operations_research::sat::PrecedencesPropagator::PrecedencesPropagator(operations_research::sat::PrecedencesPropagator *this, operations_research::sat::Model *a2)
{
  char *v4;
  operations_research::sat::GenericLiteralWatcher *v5;
  int v6;
  operations_research::sat::SatSolver *v7;

  strcpy((char *)this + 16, "cesPropagator");
  *((_BYTE *)this + 31) = 21;
  *((_QWORD *)this + 5) = &unk_24F9877F0;
  v4 = (char *)this + 40;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *(_QWORD *)this = &off_24F9877B0;
  *((_QWORD *)this + 1) = 0x6E65646563657250;
  *((_QWORD *)this + 6) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((_QWORD *)this + 7) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)a2);
  *((_QWORD *)this + 8) = v5;
  v6 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v5, (uint64_t)v4);
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 18) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = (char *)this + 80;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 30) = -1;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_QWORD *)this + 73) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  operations_research::sat::SatSolver::AddPropagator(v7, this);
  operations_research::sat::IntegerTrail::RegisterWatcher(*((_QWORD **)this + 7), (uint64_t)this + 80);
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(*((operations_research::sat::GenericLiteralWatcher **)this + 8), *((_DWORD *)this + 18), 0);
  return this;
}

void sub_22DAAFC34(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v10 = *(void **)(v1 + 568);
  if (v10)
  {
    *(_QWORD *)(v1 + 576) = v10;
    operator delete(v10);
    v11 = *(void **)(v1 + 544);
    if (!v11)
    {
LABEL_3:
      v12 = *(void **)(v1 + 520);
      if (!v12)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = *(void **)(v1 + 544);
    if (!v11)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 552) = v11;
  operator delete(v11);
  v12 = *(void **)(v1 + 520);
  if (!v12)
  {
LABEL_4:
    v13 = *(void **)(v1 + 496);
    if (!v13)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v12);
  v13 = *(void **)(v1 + 496);
  if (!v13)
  {
LABEL_5:
    std::deque<int>::~deque[abi:ne180100](v8);
    v14 = *(void **)(v1 + 424);
    if (!v14)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v13);
  std::deque<int>::~deque[abi:ne180100](v8);
  v14 = *(void **)(v1 + 424);
  if (!v14)
  {
LABEL_6:
    v15 = *(void **)(v1 + 400);
    if (!v15)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v1 + 432) = v14;
  operator delete(v14);
  v15 = *(void **)(v1 + 400);
  if (!v15)
  {
LABEL_7:
    v16 = *(void **)(v1 + 376);
    if (!v16)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  *(_QWORD *)(v1 + 408) = v15;
  operator delete(v15);
  v16 = *(void **)(v1 + 376);
  if (!v16)
  {
LABEL_8:
    gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v7);
    v17 = *(void **)(v1 + 328);
    if (!v17)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  *(_QWORD *)(v1 + 384) = v16;
  operator delete(v16);
  gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v7);
  v17 = *(void **)(v1 + 328);
  if (!v17)
  {
LABEL_9:
    v18 = *(void **)(v1 + 304);
    if (!v18)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  *(_QWORD *)(v1 + 336) = v17;
  operator delete(v17);
  v18 = *(void **)(v1 + 304);
  if (!v18)
  {
LABEL_10:
    v19 = *(void **)(v1 + 280);
    if (!v19)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  *(_QWORD *)(v1 + 312) = v18;
  operator delete(v18);
  v19 = *(void **)(v1 + 280);
  if (!v19)
  {
LABEL_11:
    v20 = *(void **)(v1 + 256);
    if (!v20)
    {
LABEL_13:
      gtl::ITIVector<gtl::IntType<operations_research::sat::PrecedencesPropagator::OptionalArcIndex_tag_,int>,operations_research::sat::PrecedencesPropagator::ArcInfo,std::allocator<operations_research::sat::PrecedencesPropagator::ArcInfo>>::~ITIVector(v6);
      gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v5);
      gtl::ITIVector<gtl::IntType<operations_research::sat::PrecedencesPropagator::OptionalArcIndex_tag_,int>,operations_research::sat::PrecedencesPropagator::ArcInfo,std::allocator<operations_research::sat::PrecedencesPropagator::ArcInfo>>::~ITIVector(v4);
      gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v3);
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v2);
      *(_QWORD *)v1 = off_24F980668;
      if (*(char *)(v1 + 31) < 0)
        operator delete(*(void **)(v1 + 8));
      _Unwind_Resume(a1);
    }
LABEL_12:
    *(_QWORD *)(v1 + 264) = v20;
    operator delete(v20);
    goto LABEL_13;
  }
LABEL_23:
  *(_QWORD *)(v1 + 288) = v19;
  operator delete(v19);
  v20 = *(void **)(v1 + 256);
  if (!v20)
    goto LABEL_13;
  goto LABEL_12;
}

void operations_research::sat::IntegerTrail::RegisterWatcher(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a2, -1431655765 * ((a1[6] - a1[5]) >> 2));
  v4 = (uint64_t *)a1[110];
  v5 = v4;
  v6 = a1[111];
  if ((unint64_t)v4 < v6)
  {
    *v4 = a2;
    v7 = (uint64_t)(v4 + 1);
    goto LABEL_23;
  }
  v8 = (char *)a1[109];
  v9 = ((char *)v4 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v11 = v6 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = (char *)((char *)v4 - v8);
    if (v4 == (uint64_t *)v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (uint64_t *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = (char *)((char *)v4 - v8);
  if (v4 != (uint64_t *)v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v5 = &v4[v19 / 0xFFFFFFFFFFFFFFF8];
    v14 = (uint64_t *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v4 - 2;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v24 = *--v5;
        *--v14 = v24;
      }
      while (v5 != (uint64_t *)v8);
    }
    v5 = (uint64_t *)a1[109];
  }
LABEL_21:
  a1[109] = v14;
  a1[110] = v7;
  a1[111] = v15;
  if (v5)
    operator delete(v5);
LABEL_23:
  a1[110] = v7;
}

void **gtl::ITIVector<gtl::IntType<operations_research::sat::PrecedencesPropagator::OptionalArcIndex_tag_,int>,operations_research::sat::PrecedencesPropagator::ArcInfo,std::allocator<operations_research::sat::PrecedencesPropagator::ArcInfo>>::~ITIVector(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if ((*(_BYTE *)(v3 - 5) & 1) != 0)
          operator delete(*(v3 - 4));
        v3 -= 8;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::PrecedencesPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F982BC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PrecedencesPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F982BC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::IntervalsRepository>::~Delete(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24F982BF8;
  v4 = (_QWORD *)a1[1];
  v2 = a1 + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<operations_research::sat::IntervalsRepository>::operator()[abi:ne180100]((uint64_t)v2, v3);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntervalsRepository>::~Delete(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24F982BF8;
  v3 = (_QWORD *)a1[1];
  v1 = a1 + 1;
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<operations_research::sat::IntervalsRepository>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x22E31DF78);
}

void std::default_delete<operations_research::sat::IntervalsRepository>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = (void *)a2[14];
    if (v3)
    {
      a2[15] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[8];
    if (v5)
    {
      a2[9] = v5;
      operator delete(v5);
    }
    v6 = (void *)a2[5];
    if (v6)
    {
      a2[6] = v6;
      operator delete(v6);
    }
    v7 = (void *)a2[2];
    if (v7)
    {
      a2[3] = v7;
      operator delete(v7);
    }
    JUMPOUT(0x22E31DF78);
  }
}

void std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F982C40;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_24F982C40;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(int *a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(*a2);
  return operations_research::sat::IntervalsRepository::CreateInterval(v3, a1[2], a1[3], a1[4], 0, -1);
}

uint64_t std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat11NewIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat11NewIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_"
                                "S4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat11NewIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat11NewIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DAB02F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F982CC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24F982CC0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::SatSolver *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  return operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v3, *(_DWORD *)(a1 + 8) ^ 1u, *(_DWORD *)(a1 + 12));
}

uint64_t std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat11ImplicationENS0_7LiteralES1_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat11ImplicationENS0_7LiteralES1_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat11ImplicationENS0_7LiteralES1_EUlPNS0_5ModelEE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat11ImplicationENS0_7LiteralES1_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  if (a2 != a3)
  {
    v19[7] = v3;
    v19[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>>>::__find_equal<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(v7, v8, v19, &v18, (_QWORD *)((char *)v6 + 28));
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (char *)operator new(0x28uLL);
        v12 = *((_DWORD *)v6 + 9);
        *(_QWORD *)(v11 + 28) = *(_QWORD *)((char *)v6 + 28);
        *((_DWORD *)v11 + 9) = v12;
        v13 = v19[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t *)v11;
        v14 = (_QWORD *)**v7;
        if (v14)
        {
          *v7 = v14;
          v15 = *v10;
        }
        else
        {
          v15 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v7[1], v15);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v16 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v16 = (_QWORD *)v6[2];
        v17 = *v16 == (_QWORD)v6;
        v6 = v16;
      }
      while (!v17);
LABEL_3:
      v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>>>::__find_equal<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *(_QWORD *)((char *)a2 + 28), *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*(_QWORD *)((char *)v10 + 28) < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = *(_QWORD *)((char *)v18 + 28);
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *(_QWORD *)((char *)v13 + 28))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = *(_QWORD *)((char *)v22 + 28);
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void operations_research::sat::FullEncodingFixedPointComputer::~FullEncodingFixedPointComputer(operations_research::sat::FullEncodingFixedPointComputer *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)this + 168);
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    v5 = *((_QWORD *)this + 13);
    v6 = (void *)*((_QWORD *)this + 12);
    if (v5 != v4)
    {
      v7 = *((_QWORD *)this + 13);
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v4;
    operator delete(v6);
  }
  v10 = (void *)*((_QWORD *)this + 9);
  if (v10)
  {
    *((_QWORD *)this + 10) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 6);
  if (v11)
    operator delete(v11);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = 0;
    v4 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v3) & 0x80000000) == 0)
      {
        v6 = *v4 + v2;
        if (*(_QWORD *)(v6 + 32))
        {
          operator delete(*(void **)(v6 + 8));
          *(_QWORD *)(v6 + 48) = 0;
          *(_QWORD *)(v6 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 32) = 0;
        }
        v5 = *(_QWORD **)(v6 + 40);
        if (v5)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
      }
      ++v3;
      v2 += 56;
    }
    while (v3 != *(_QWORD *)(a1 + 24));
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v4 = 0;
  }
  v7 = *(_QWORD **)(a1 + 32);
  if (v7)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  return a1;
}

_QWORD *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F982D40;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F982D40;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[1] = 0;
  *v2 = &off_24F982D40;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_BYTE *)v2 + 32) = *(_BYTE *)(a1 + 32);
  return v2;
}

void sub_22DAB0988(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = &off_24F982D40;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_BYTE *)result[1];
  v4 = (_BYTE *)result[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a2 + 24) = v8;
    result = memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  *(_BYTE *)(a2 + 32) = *((_BYTE *)v3 + 32);
  return result;
}

void sub_22DAB0A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12LiteralXorIsERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEbEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12LiteralXorIsERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS"
                                "3_EEEEbEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12LiteralXorIsERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEbEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12LiteralXorIsERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEbEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

char *operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  operations_research::sat::IntegerTrail *v5;
  uint64_t v6;
  char v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  operations_research::sat::GenericLiteralWatcher *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *result;
  _QWORD *v16;

  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a2);
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v6 = operator new();
  v7 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)v6 = &off_24F981148;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  v8 = *(const void **)a1;
  v9 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v9)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    *(_QWORD *)(v6 + 8) = v10;
    v11 = &v10[4 * (v9 >> 2)];
    *(_QWORD *)(v6 + 24) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(v6 + 16) = v11;
  }
  *(_BYTE *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 72) = v5;
  v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  operations_research::sat::BooleanXorPropagator::RegisterWith((operations_research::sat::BooleanXorPropagator *)v6, v12);
  v13 = (_QWORD *)operator new();
  *v13 = &off_24F982DB0;
  v13[1] = v6;
  v16 = v13;
  v14 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v14 >= *(_QWORD *)(a2 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v16);
  }
  else
  {
    *v14 = v13;
    result = (char *)(v14 + 1);
  }
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void sub_22DAB0C74(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x22E31DF78](v1, 0x10A1C4049CBD120);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::BooleanXorPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F982DB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::BooleanXorPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F982DB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::erase<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v5 = *a1;
  v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v9 = v6 & v7;
    v10 = *(_QWORD *)(v5 + (v6 & v7));
    v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11)
      break;
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return 0;
    v2 += 8;
    v6 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_QWORD *)(a1[1] + 12 * v12) == v3)
      break;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_5;
  }
  if (v12 == v7)
    return 0;
  --a1[2];
  v14 = *(_QWORD *)(v5 + ((v12 - 8) & v7));
  v15 = *(_QWORD *)(v5 + v12) & (~*(_QWORD *)(v5 + v12) << 6) & 0x8080808080808080;
  v16 = v14 & (~v14 << 6) & 0x8080808080808080;
  if (v16)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
  {
    v21 = 0;
    v18 = -2;
  }
  else
  {
    v19 = (__clz(v16) >> 3) + (__clz(__rbit64(v15)) >> 3);
    v20 = v19 >= 8;
    v21 = v19 < 8;
    if (v20)
      v18 = -2;
    else
      v18 = 0x80;
  }
  *(_BYTE *)(v5 + v12) = v18;
  *(_BYTE *)((a1[3] & (v12 - 8)) + (a1[3] & 7) + *a1 + 1) = v18;
  v22 = a1[4];
  a1[5] += v21;
  if (!v22)
    return 1;
  v23 = (unint64_t *)(v22 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 - 1, v23));
  v25 = (unint64_t *)(v22 + 16);
  result = 1;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 12 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v26 = a1[4];
    if (!v26)
      return;
LABEL_21:
    *((_QWORD *)v26 + 4) = v14 >> 3;
    *((_QWORD *)v26 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v20 = &v5[12 * (_QWORD)v13];
      v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v20)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v20));
      v22 = *a1;
      v23 = a1[3];
      v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      v25 = *(_QWORD *)&(*a1)[v24] & (~*(_QWORD *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v24 = (v15 + v24) & (unint64_t)v23;
          v25 = *(_QWORD *)&v22[v24] & (~*(_QWORD *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = *(_QWORD *)v20;
      v19 = (uint64_t)&a1[1][12 * v16];
      *(_DWORD *)(v19 + 8) = *((_DWORD *)v20 + 2);
      *(_QWORD *)v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v26 = a1[4];
  if (v26)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v39 = *(_QWORD *)(result + 32);
    if (!v39)
      return result;
LABEL_26:
    *(_QWORD *)(v39 + 32) = v15 >> 3;
    *(_QWORD *)(v39 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(_QWORD *)(*(_QWORD *)(result + 8) + 12 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          v26 = v25 + 12 * v18;
          v27 = (uint64_t *)(v25 + 12 * v14);
          v28 = *v27;
          *(_DWORD *)(v26 + 8) = *((_DWORD *)v27 + 2);
          *(_QWORD *)v26 = v28;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v29 = (uint64_t *)(v25 + 12 * v14);
          v30 = *v29;
          v31 = *((_DWORD *)v29 + 2);
          v32 = 12 * v18;
          v33 = (uint64_t *)(v25 + 12 * v18);
          v34 = *((_DWORD *)v33 + 2);
          *v29 = *v33;
          *((_DWORD *)v29 + 2) = v34;
          v35 = *(_QWORD *)(result + 8) + v32;
          *(_QWORD *)v35 = v30;
          *(_DWORD *)(v35 + 8) = v31;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v36 = v14 - (v14 >> 3);
  v37 = v14 == 7;
  v38 = 6;
  if (!v37)
    v38 = v36;
  *(_QWORD *)(result + 40) = v38 - *(_QWORD *)(result + 16);
  v39 = *(_QWORD *)(result + 32);
  if (v39)
    goto LABEL_26;
  return result;
}

void std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F982DF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F982DF8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14EnforcedClauseEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEES6_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14EnforcedClauseEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEE"
                                "S6_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14EnforcedClauseEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEES6_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14EnforcedClauseEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEES6_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  int *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  int *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  int *v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  int *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t v45;
  _DWORD *v47;
  int *v48;
  uint64_t (**v49)();
  int *v50[2];
  uint64_t (***v51)();
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v24 = *(_QWORD *)(a1 + 24);
    if (!v24)
      goto LABEL_67;
    goto LABEL_36;
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v45 = a1;
  v6 = *(_DWORD **)a1;
  v7 = *(_QWORD *)a1 + 4 * v2;
  v47 = (_DWORD *)v7;
  do
  {
    while (1)
    {
      v8 = *v6 ^ 1;
      if (v3 >= v4)
        break;
      *v3++ = v8;
      if (++v6 == (_DWORD *)v7)
        goto LABEL_33;
    }
    v9 = v3 - v5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (((char *)v4 - (char *)v5) >> 1 > v10)
      v10 = ((char *)v4 - (char *)v5) >> 1;
    if ((unint64_t)((char *)v4 - (char *)v5) >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = operator new(4 * v11);
      v13 = (int *)&v12[4 * v9];
      *v13 = v8;
      v14 = (uint64_t)(v13 + 1);
      if (v3 == v5)
        goto LABEL_19;
    }
    else
    {
      v12 = 0;
      v13 = (int *)(4 * v9);
      *(_DWORD *)(4 * v9) = v8;
      v14 = 4 * v9 + 4;
      if (v3 == v5)
        goto LABEL_19;
    }
    v15 = (char *)(v3 - 1) - (char *)v5;
    if (v15 < 0xBC)
    {
      v16 = v3;
      goto LABEL_18;
    }
    if (&v12[(char *)v3 - (char *)v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[(char *)v3 - (char *)v5 - 4])
    {
      v16 = v3;
      do
      {
LABEL_18:
        v17 = *--v16;
        *--v13 = v17;
      }
      while (v16 != v5);
      goto LABEL_19;
    }
    if ((int *)((char *)v3 - (v15 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v3 - 1)
    {
      v16 = v3;
      goto LABEL_18;
    }
    if ((unint64_t)((char *)v5 - v12) < 0x20)
    {
      v16 = v3;
      goto LABEL_18;
    }
    v18 = (v15 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v16 = &v3[v19 / 0xFFFFFFFFFFFFFFFCLL];
    v13 = (int *)((char *)v13 - v19);
    v20 = &v12[4 * v9 - 16];
    v21 = v3 - 4;
    v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 8;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_18;
LABEL_19:
    v4 = (int *)&v12[4 * v11];
    if (v5)
      operator delete(v5);
    v5 = v13;
    v3 = (int *)v14;
    v7 = (uint64_t)v47;
    ++v6;
  }
  while (v6 != v47);
LABEL_33:
  a1 = v45;
  v24 = *(_QWORD *)(v45 + 24);
  if (v24)
  {
LABEL_36:
    v25 = *(int **)(a1 + 16);
    v26 = &v25[v24];
    v48 = v26;
    do
    {
      while (1)
      {
        v27 = *v25;
        if (v3 >= v4)
          break;
        *v3++ = v27;
        if (++v25 == v26)
          goto LABEL_67;
      }
      v28 = v3 - v5;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (((char *)v4 - (char *)v5) >> 1 > v29)
        v29 = ((char *)v4 - (char *)v5) >> 1;
      if ((unint64_t)((char *)v4 - (char *)v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v30 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
      {
        if (v30 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v31 = operator new(4 * v30);
        v32 = (int *)&v31[4 * v28];
        *v32 = v27;
        v33 = (uint64_t)(v32 + 1);
        if (v3 == v5)
          goto LABEL_53;
      }
      else
      {
        v31 = 0;
        v32 = (int *)(4 * v28);
        *(_DWORD *)(4 * v28) = v27;
        v33 = 4 * v28 + 4;
        if (v3 == v5)
          goto LABEL_53;
      }
      v34 = (char *)(v3 - 1) - (char *)v5;
      if (v34 >= 0xBC)
      {
        if (&v31[(char *)v3 - (char *)v5 - 4 - (v34 & 0xFFFFFFFFFFFFFFFCLL)] > &v31[(char *)v3 - (char *)v5 - 4])
        {
          v35 = v3;
        }
        else if ((int *)((char *)v3 - (v34 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v3 - 1)
        {
          v35 = v3;
        }
        else if ((unint64_t)((char *)v5 - v31) >= 0x20)
        {
          v37 = (v34 >> 2) + 1;
          v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
          v35 = &v3[v38 / 0xFFFFFFFFFFFFFFFCLL];
          v32 = (int *)((char *)v32 - v38);
          v39 = &v31[4 * v28 - 16];
          v40 = v3 - 4;
          v41 = v37 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *v39 = v42;
            v39 -= 2;
            v40 -= 8;
            v41 -= 8;
          }
          while (v41);
          if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_53;
        }
        else
        {
          v35 = v3;
        }
      }
      else
      {
        v35 = v3;
      }
      do
      {
        v36 = *--v35;
        *--v32 = v36;
      }
      while (v35 != v5);
LABEL_53:
      v4 = (int *)&v31[4 * v30];
      if (v5)
        operator delete(v5);
      v5 = v32;
      v3 = (int *)v33;
      v26 = v48;
      ++v25;
    }
    while (v25 != v48);
  }
LABEL_67:
  v49 = &off_24F980568;
  v50[0] = v5;
  v50[1] = (int *)(v3 - v5);
  v51 = &v49;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v50, a2);
  v43 = v51;
  if (v51 == &v49)
  {
    v44 = 4;
    v43 = &v49;
LABEL_71:
    (*v43)[v44]();
  }
  else if (v51)
  {
    v44 = 5;
    goto LABEL_71;
  }
  if (v5)
    operator delete(v5);
}

void sub_22DAB1B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F982E78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F982E78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::SatSolver *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  return operations_research::sat::SatSolver::AddLinearConstraint((uint64_t)v3, 1, *(_QWORD *)(a1 + 8), 1, *(_QWORD *)(a1 + 16), *(void ***)(a1 + 24));
}

uint64_t std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23BooleanLinearConstraintExxPNSt3__16vectorINS0_16LiteralWithCoeffENS1_9"
                     "allocatorIS3_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23BooleanLinearConstraintExxPNSt3__16vectorINS0_16LiteralWith"
                                "CoeffENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23BooleanLinearConstraintExxPNSt3__16vectorINS0_16LiteralWithCoeffENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23BooleanLinearConstraintExxPNSt3__16vectorINS0_16LiteralWithCoeffENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24F982EF8;
  return result;
}

void std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F982EF8;
}

uint64_t std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  v3 = v2[4];
  operations_research::sat::SatSolver::SetNumVariables((operations_research::sat::SatSolver *)v2, v3 + 1);
  return v3;
}

uint64_t std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18NewBooleanVariableEvEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat18NewBooleanVariableEvEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18NewBooleanVariableEvEUlPNS0_5ModelEE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18NewBooleanVariableEvEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F982F88;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_24F982F88;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

_QWORD *std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat17ProductConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat17ProductConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_E"
                                "iEES4_S4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat17ProductConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat17ProductConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  operations_research::sat::IntegerTrail *v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  operations_research::sat::SquarePropagator *v15;
  operations_research::sat::GenericLiteralWatcher *v16;
  _QWORD *result;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  operations_research::sat::PositiveProductPropagator *v30;
  operations_research::sat::GenericLiteralWatcher *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  BOOL v40;
  _QWORD *v41;
  operations_research::sat::PositiveProductPropagator *v42;
  operations_research::sat::GenericLiteralWatcher *v43;
  unint64_t v44;
  BOOL v45;
  _QWORD *v46;
  operations_research::sat::SquarePropagator *v47;
  operations_research::sat::GenericLiteralWatcher *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  BOOL v57;
  _QWORD *v58;
  operations_research::sat::PositiveProductPropagator *v59;
  operations_research::sat::GenericLiteralWatcher *v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  unint64_t v67;
  BOOL v68;
  _QWORD *v69;
  operations_research::sat::PositiveProductPropagator *v70;
  operations_research::sat::GenericLiteralWatcher *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD v74[2];
  uint64_t (**v75)();
  int v76;
  uint64_t (***v77)();
  uint64_t (**v78)();
  int v79;
  uint64_t (***v80)();
  uint64_t (**v81)();
  int v82;
  uint64_t (***v83)();
  uint64_t (**v84)();
  int v85;
  uint64_t (***v86)();
  uint64_t (**v87)();
  int v88;
  uint64_t (***v89)();
  uint64_t (**v90)();
  int v91;
  uint64_t (***v92)();
  uint64_t (**v93)();
  int v94;
  uint64_t (***v95)();
  uint64_t (**v96)();
  int v97;
  uint64_t (***v98)();
  uint64_t (**v99)();
  int v100;
  uint64_t (***v101)();
  uint64_t (**v102)();
  int v103;
  uint64_t (***v104)();
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v5 = *a1;
  v6 = a1[1];
  v7 = *a1;
  v8 = (_QWORD *)(a2 + 32);
  if (*a1 == v6)
  {
    v102 = &off_24F982FF8;
    v103 = v5;
    v104 = &v102;
    v9 = (_QWORD *)*v8;
    v10 = a2 + 32;
    v11 = (_QWORD *)*v8;
    do
    {
      v12 = v11[4];
      v13 = v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v14 = v11;
      else
        v14 = v11 + 1;
      if (v13)
        v10 = (uint64_t)v11;
      v11 = (_QWORD *)*v14;
    }
    while (*v14);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 40) + 12 * v7) & 0x8000000000000000) == 0)
    {
      v15 = (operations_research::sat::SquarePropagator *)operator new();
      operations_research::sat::SquarePropagator::SquarePropagator((uint64_t)v15, *a1, a1[2], (uint64_t)v4);
      v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
      operations_research::sat::SquarePropagator::RegisterWith(v15, v16);
      result = (_QWORD *)operator new();
      *result = &off_24F983088;
      result[1] = v15;
      v74[0] = result;
      v18 = *(_QWORD **)(a2 + 56);
      if ((unint64_t)v18 >= *(_QWORD *)(a2 + 64))
        goto LABEL_104;
LABEL_103:
      *v18 = result;
      *(_QWORD *)(a2 + 56) = v18 + 1;
      return result;
    }
    v99 = &off_24F9830C0;
    v100 = v5;
    v101 = &v99;
    do
    {
      v44 = v9[4];
      v45 = v44 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v44 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v46 = v9;
      else
        v46 = v9 + 1;
      if (v45)
        v8 = v9;
      v9 = (_QWORD *)*v46;
    }
    while (*v46);
    if ((*(_QWORD *)(*(_QWORD *)(v8[5] + 40) + 12 * (v5 ^ 1)) & 0x8000000000000000) == 0)
    {
      v47 = (operations_research::sat::SquarePropagator *)operator new();
      operations_research::sat::SquarePropagator::SquarePropagator((uint64_t)v47, *a1 ^ 1, a1[2], (uint64_t)v4);
      v48 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
      operations_research::sat::SquarePropagator::RegisterWith(v47, v48);
      result = (_QWORD *)operator new();
      *result = &off_24F983088;
      result[1] = v47;
      v74[0] = result;
      v18 = *(_QWORD **)(a2 + 56);
      if ((unint64_t)v18 >= *(_QWORD *)(a2 + 64))
        goto LABEL_104;
      goto LABEL_103;
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v74, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.h", 764);
    v73 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v73, "Not supported");
LABEL_107:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v74);
  }
  v96 = &off_24F982FF8;
  v97 = v5;
  v98 = &v96;
  v19 = (_QWORD *)*v8;
  v20 = a2 + 32;
  v21 = (_QWORD *)*v8;
  do
  {
    v22 = v21[4];
    v23 = v22 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v22 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v24 = v21;
    else
      v24 = v21 + 1;
    if (v23)
      v20 = (uint64_t)v21;
    v21 = (_QWORD *)*v24;
  }
  while (*v24);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 40) + 12 * v7) & 0x8000000000000000) == 0)
  {
    v93 = &off_24F982FF8;
    v94 = v6;
    v95 = &v93;
    v25 = a2 + 32;
    v26 = v19;
    do
    {
      v27 = v26[4];
      v28 = v27 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v27 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v29 = v26;
      else
        v29 = v26 + 1;
      if (v28)
        v25 = (uint64_t)v26;
      v26 = (_QWORD *)*v29;
    }
    while (*v29);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 40) + 12 * v6) & 0x8000000000000000) == 0)
    {
      v30 = (operations_research::sat::PositiveProductPropagator *)operator new();
      operations_research::sat::PositiveProductPropagator::PositiveProductPropagator((uint64_t)v30, *a1, a1[1], a1[2], (uint64_t)v4);
      v31 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
      operations_research::sat::PositiveProductPropagator::RegisterWith(v30, v31);
      result = (_QWORD *)operator new();
      *result = &off_24F983140;
      result[1] = v30;
      v74[0] = result;
      v18 = *(_QWORD **)(a2 + 56);
      if ((unint64_t)v18 >= *(_QWORD *)(a2 + 64))
        goto LABEL_104;
      goto LABEL_103;
    }
  }
  v90 = &off_24F982FF8;
  v91 = v5;
  v92 = &v90;
  v32 = a2 + 32;
  v33 = v19;
  do
  {
    v34 = v33[4];
    v35 = v34 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v34 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v36 = v33;
    else
      v36 = v33 + 1;
    if (v35)
      v32 = (uint64_t)v33;
    v33 = (_QWORD *)*v36;
  }
  while (*v36);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 40) + 12 * v7) & 0x8000000000000000) == 0)
  {
    v87 = &off_24F9830C0;
    v88 = v6;
    v89 = &v87;
    v37 = a2 + 32;
    v38 = v19;
    do
    {
      v39 = v38[4];
      v40 = v39 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v39 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v41 = v38;
      else
        v41 = v38 + 1;
      if (v40)
        v37 = (uint64_t)v38;
      v38 = (_QWORD *)*v41;
    }
    while (*v41);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 40) + 40) + 12 * (v6 ^ 1)) & 0x8000000000000000) == 0)
    {
      v42 = (operations_research::sat::PositiveProductPropagator *)operator new();
      operations_research::sat::PositiveProductPropagator::PositiveProductPropagator((uint64_t)v42, *a1, a1[1] ^ 1, a1[2] ^ 1, (uint64_t)v4);
      v43 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
      operations_research::sat::PositiveProductPropagator::RegisterWith(v42, v43);
      result = (_QWORD *)operator new();
      *result = &off_24F983140;
      result[1] = v42;
      v74[0] = result;
      v18 = *(_QWORD **)(a2 + 56);
      if ((unint64_t)v18 >= *(_QWORD *)(a2 + 64))
        goto LABEL_104;
      goto LABEL_103;
    }
  }
  v84 = &off_24F9830C0;
  v85 = v5;
  v86 = &v84;
  v49 = a2 + 32;
  v50 = v19;
  do
  {
    v51 = v50[4];
    v52 = v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v53 = v50;
    else
      v53 = v50 + 1;
    if (v52)
      v49 = (uint64_t)v50;
    v50 = (_QWORD *)*v53;
  }
  while (*v53);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 40) + 12 * (v5 ^ 1)) & 0x8000000000000000) == 0)
  {
    v81 = &off_24F982FF8;
    v82 = v6;
    v83 = &v81;
    v54 = a2 + 32;
    v55 = v19;
    do
    {
      v56 = v55[4];
      v57 = v56 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v56 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v58 = v55;
      else
        v58 = v55 + 1;
      if (v57)
        v54 = (uint64_t)v55;
      v55 = (_QWORD *)*v58;
    }
    while (*v58);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 40) + 40) + 12 * v6) & 0x8000000000000000) == 0)
    {
      v59 = (operations_research::sat::PositiveProductPropagator *)operator new();
      operations_research::sat::PositiveProductPropagator::PositiveProductPropagator((uint64_t)v59, *a1 ^ 1, a1[1], a1[2] ^ 1, (uint64_t)v4);
      v60 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
      operations_research::sat::PositiveProductPropagator::RegisterWith(v59, v60);
      result = (_QWORD *)operator new();
      *result = &off_24F983140;
      result[1] = v59;
      v74[0] = result;
      v18 = *(_QWORD **)(a2 + 56);
      if ((unint64_t)v18 >= *(_QWORD *)(a2 + 64))
        goto LABEL_104;
      goto LABEL_103;
    }
  }
  v61 = v5 ^ 1;
  v78 = &off_24F9830C0;
  v79 = v5;
  v80 = &v78;
  v62 = a2 + 32;
  v63 = v19;
  do
  {
    v64 = v63[4];
    v65 = v64 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v64 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v66 = v63;
    else
      v66 = v63 + 1;
    if (v65)
      v62 = (uint64_t)v63;
    v63 = (_QWORD *)*v66;
  }
  while (*v66);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 40) + 40) + 12 * v61) & 0x8000000000000000) != 0)
    goto LABEL_105;
  v75 = &off_24F9830C0;
  v76 = v6;
  v77 = &v75;
  do
  {
    v67 = v19[4];
    v68 = v67 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v67 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v69 = v19;
    else
      v69 = v19 + 1;
    if (v68)
      v8 = v19;
    v19 = (_QWORD *)*v69;
  }
  while (*v69);
  if ((*(_QWORD *)(*(_QWORD *)(v8[5] + 40) + 12 * (v6 ^ 1)) & 0x8000000000000000) != 0)
  {
LABEL_105:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v74, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.h", 786);
    v72 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v72, "Not supported");
    goto LABEL_107;
  }
  v70 = (operations_research::sat::PositiveProductPropagator *)operator new();
  operations_research::sat::PositiveProductPropagator::PositiveProductPropagator((uint64_t)v70, *a1 ^ 1, a1[1] ^ 1, a1[2], (uint64_t)v4);
  v71 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  operations_research::sat::PositiveProductPropagator::RegisterWith(v70, v71);
  result = (_QWORD *)operator new();
  *result = &off_24F983140;
  result[1] = v70;
  v74[0] = result;
  v18 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v18 < *(_QWORD *)(a2 + 64))
    goto LABEL_103;
LABEL_104:
  result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), v74);
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void sub_22DAB2634(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAB263C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C40E78A96FALL);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_DWORD *std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F982FF8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24F982FF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v4 = *(_QWORD **)(a2 + 32);
  v2 = (_QWORD *)(a2 + 32);
  v3 = v4;
  do
  {
    v5 = v3[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v2 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  return *(_QWORD *)(*(_QWORD *)(v2[5] + 40) + 12 * *(int *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10LowerBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat10LowerBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10LowerBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10LowerBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target_type()
{
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::SquarePropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983088;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SquarePropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983088;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_DWORD *std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F9830C0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24F9830C0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v4 = *(_QWORD **)(a2 + 32);
  v2 = (_QWORD *)(a2 + 32);
  v3 = v4;
  do
  {
    v5 = v3[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v2 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  return -*(_QWORD *)(*(_QWORD *)(v2[5] + 40) + 12 * (*(_DWORD *)(a1 + 8) ^ 1));
}

uint64_t std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10UpperBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat10UpperBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10UpperBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10UpperBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target_type()
{
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::PositiveProductPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983140;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PositiveProductPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983140;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_DWORD *std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F983188;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24F983188;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v4 = *(_QWORD **)(a2 + 32);
  v2 = (_QWORD *)(a2 + 32);
  v3 = v4;
  do
  {
    v5 = v3[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v2 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  return *(_QWORD *)(*(_QWORD *)(v2[5] + 40) + 12 * *(int *)(a1 + 8))
       + *(_QWORD *)(*(_QWORD *)(v2[5] + 40) + 12 * (*(_DWORD *)(a1 + 8) ^ 1)) == 0;
}

uint64_t std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat7IsFixedEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat7IsFixedEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat7IsFixedEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat7IsFixedEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::target_type()
{
}

void std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_DWORD *std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F983218;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24F983218;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()((unsigned int *)(a1 + 8), a2);
}

uint64_t std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat5ValueEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat5ValueEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat5ValueEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat5ValueEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target_type()
{
}

unint64_t operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(unsigned int *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16[2];
  uint64_t v17;
  uint64_t *v18;

  v5 = *(_QWORD **)(a2 + 32);
  v3 = (_QWORD *)(a2 + 32);
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v3 && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
    v10 = v6[5];
  else
LABEL_12:
    v10 = 0;
  v11 = *a1;
  v12 = *(_QWORD *)(v10 + 40);
  result = *(_QWORD *)(v12 + 12 * (int)*a1);
  v16[0] = result;
  v14 = *(_QWORD *)(v12 + 12 * (int)(v11 ^ 1));
  v17 = -v14;
  if (result + v14)
  {
    v18 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)v16, (int)&v17, "trail->LowerBound(v) == trail->UpperBound(v)");
    if (v18)
    {
      google::LogMessageFatal::LogMessageFatal(v16, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1399, &v18);
      v15 = google::LogMessage::stream((google::LogMessage *)v16);
      gtl::operator<<<operations_research::sat::IntegerVariable_tag_,int>(v15, *a1);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v16);
    }
    return *(_QWORD *)(*(_QWORD *)(v10 + 40) + 12 * (int)*a1);
  }
  return result;
}

void sub_22DAB2D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F983298;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24F983298;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t (***std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2))()
{
  return operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat8EqualityEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat8EqualityEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat8EqualityEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat8EqualityEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t (***operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int *a1, uint64_t a2))()
{
  uint64_t v4;
  operations_research::sat::PrecedencesPropagator *v5;
  uint64_t (***v6)();
  uint64_t v7;
  unint64_t v8;
  operations_research::sat::PrecedencesPropagator *v9;
  uint64_t (***result)();
  uint64_t v11;
  uint64_t (**v12)();
  unint64_t v13;
  uint64_t (***v14)();
  uint64_t (**v15)();
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  v15 = &off_24F983308;
  v16 = v4;
  v17 = &v15;
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a2);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v5, v16, SHIDWORD(v16), 0, -1, 0, 0);
  v6 = v17;
  if (v17 == &v15)
  {
    v7 = 4;
    v6 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v7 = 5;
  }
  (*v6)[v7]();
LABEL_6:
  v8 = a1[1] | ((unint64_t)*a1 << 32);
  v12 = &off_24F983308;
  v13 = v8;
  v14 = &v12;
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a2);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v9, v13, SHIDWORD(v13), 0, -1, 0, 0);
  result = v14;
  if (v14 == &v12)
  {
    v11 = 4;
    result = &v12;
  }
  else
  {
    if (!v14)
      return result;
    v11 = 5;
  }
  return (uint64_t (***)())(*result)[v11]();
}

void sub_22DAB2F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F983308;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24F983308;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::PrecedencesPropagator *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), 0, -1, 0, 0);
}

uint64_t std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4"
                                "_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F983398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F983398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

char *std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23FixedDivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS"
                     "2_INS0_17IntegerValue_tag_ExEES4_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23FixedDivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable"
                                "_tag_EiEENS2_INS0_17IntegerValue_tag_ExEES4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23FixedDivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_INS0_17IntegerValue_tag_ExEES4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23FixedDivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_INS0_17IntegerValue_tag_ExEES4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

char *operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  operations_research::sat::IntegerTrail *v4;
  uint64_t v5;
  uint64_t v6;
  operations_research::sat::FixedDivisionPropagator *v7;
  int v8;
  operations_research::sat::GenericLiteralWatcher *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *result;
  _QWORD *v13;

  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v5 = *(_QWORD *)a1;
  v6 = operator new();
  v7 = (operations_research::sat::FixedDivisionPropagator *)v6;
  v8 = *(_DWORD *)(a1 + 8);
  if (v5 < 1)
    operations_research::sat::FixedDivisionPropagator::FixedDivisionPropagator(v6, v8 ^ 1, -*(_QWORD *)a1, *(_DWORD *)(a1 + 12), (uint64_t)v4);
  else
    operations_research::sat::FixedDivisionPropagator::FixedDivisionPropagator(v6, v8, *(_QWORD *)a1, *(_DWORD *)(a1 + 12), (uint64_t)v4);
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  operations_research::sat::FixedDivisionPropagator::RegisterWith(v7, v9);
  v10 = (_QWORD *)operator new();
  *v10 = &off_24F983408;
  v10[1] = v7;
  v13 = v10;
  v11 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v11 >= *(_QWORD *)(a2 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v13);
  }
  else
  {
    *v11 = v10;
    result = (char *)(v11 + 1);
  }
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void sub_22DAB32F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C4064A2AE3FLL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::FixedDivisionPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983408;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::FixedDivisionPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983408;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F983450;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_24F983450;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

char *std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18DivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_E"
                     "UlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat18DivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_"
                                "EiEES4_S4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18DivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18DivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

char *operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  operations_research::sat::IntegerTrail *v4;
  operations_research::sat::PositiveProductPropagator *v5;
  operations_research::sat::GenericLiteralWatcher *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *result;
  _QWORD *v10;

  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v5 = (operations_research::sat::PositiveProductPropagator *)operator new();
  operations_research::sat::DivisionPropagator::DivisionPropagator((uint64_t)v5, *a1, a1[1], a1[2], (uint64_t)v4);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  operations_research::sat::PositiveProductPropagator::RegisterWith(v5, v6);
  v7 = (_QWORD *)operator new();
  *v7 = &off_24F9834C0;
  v7[1] = v5;
  v10 = v7;
  v8 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v10);
  }
  else
  {
    *v8 = v7;
    result = (char *)(v8 + 1);
  }
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void sub_22DAB3590(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C40E78A96FALL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::DivisionPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9834C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DivisionPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9834C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F983508;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F983508;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[1] = 0;
  *v2 = &off_24F983508;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_22DAB376C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = &off_24F983508;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_BYTE *)result[1];
  v4 = (_BYTE *)result[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a2 + 24) = v8;
    result = memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
  return result;
}

void sub_22DAB3824(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14IsEqualToMinOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16v"
                     "ectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14IsEqualToMinOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEE"
                                "RKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14IsEqualToMinOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14IsEqualToMinOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

char *operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t (***v6)();
  uint64_t v7;
  unint64_t v8;
  operations_research::sat::PrecedencesPropagator *v9;
  operations_research::sat::MinPropagator *v10;
  int v11;
  operations_research::sat::IntegerTrail *v12;
  operations_research::sat::GenericLiteralWatcher *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *result;
  _QWORD *v17;
  uint64_t (**v18)();
  unint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int **)a1;
  v5 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 != v5)
  {
    do
    {
      v8 = *(unsigned int *)(a1 + 24) | ((unint64_t)*v4 << 32);
      v18 = &off_24F983308;
      v19 = v8;
      v20 = &v18;
      v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a2);
      operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v9, v19, SHIDWORD(v19), 0, -1, 0, 0);
      v6 = v20;
      if (v20 == &v18)
      {
        v6 = &v18;
        v7 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_5;
        v7 = 5;
      }
      (*v6)[v7]();
LABEL_5:
      ++v4;
    }
    while (v4 != v5);
  }
  v10 = (operations_research::sat::MinPropagator *)operator new();
  v11 = *(_DWORD *)(a1 + 24);
  v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  operations_research::sat::MinPropagator::MinPropagator((uint64_t)v10, a1, v11, (uint64_t)v12);
  v13 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  operations_research::sat::MinPropagator::RegisterWith(v10, v13);
  v14 = (_QWORD *)operator new();
  *v14 = &off_24F983578;
  v14[1] = v10;
  v17 = v14;
  v15 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v15 >= *(_QWORD *)(a2 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v17);
  }
  else
  {
    *v15 = v14;
    result = (char *)(v15 + 1);
  }
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void sub_22DAB3A9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C40C7DE62E2);
  _Unwind_Resume(a1);
}

void sub_22DAB3AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::MinPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983578;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::MinPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983578;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::~Model(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

_QWORD *operations_research::sat::LinearExpression::LinearExpression(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

void sub_22DAB3D20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x492492492492493)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    result = operator new(56 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[7 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = operations_research::sat::LinearExpression::LinearExpression(&v8[v9 / 8], a2 + v9);
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_22DAB3E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearExpression>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DAB3E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v11)
    std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(v10 + v11, v10);
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearExpression>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearExpression>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 4);
          if (v6)
          {
            *((_QWORD *)v4 - 3) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 7);
          if (v7)
          {
            *((_QWORD *)v4 - 6) = v7;
            operator delete(v7);
          }
          v4 -= 56;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x58uLL);
  *v4 = &off_24F9835C0;
  operations_research::sat::LinearExpression::LinearExpression(v4 + 1, a2);
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(v4 + 8, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_22DAB3F80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[2] = v5;
  operator delete(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DAB3FCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24F9835C0;
  v2 = a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24F9835C0;
  v2 = a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x58uLL);
  *v3 = &off_24F9835C0;
  operations_research::sat::LinearExpression::LinearExpression(v3 + 1, v2);
  v3[8] = 0;
  v3[9] = 0;
  v3[10] = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(v3 + 8, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3));
  return v3;
}

void sub_22DAB41CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[2] = v5;
  operator delete(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DAB4218(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9835C0;
  operations_research::sat::LinearExpression::LinearExpression(a2 + 1, a1 + 8);
  a2[8] = 0;
  a2[9] = 0;
  a2[10] = 0;
  return std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(a2 + 8, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3));
}

void sub_22DAB42A0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[2] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

char *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14IsEqualToMinOfERKNS0_16LinearExpressionERKNSt3__16vectorIS1_NS4_9alloc"
                     "atorIS1_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14IsEqualToMinOfERKNS0_16LinearExpressionERKNSt3__16vectorIS1"
                                "_NS4_9allocatorIS1_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14IsEqualToMinOfERKNS0_16LinearExpressionERKNSt3__16vectorIS1_NS4_9allocatorIS1_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14IsEqualToMinOfERKNS0_16LinearExpressionERKNSt3__16vectorIS1_NS4_9allocatorIS1_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__alloc_func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
}

char *operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  operations_research::sat::IntegerTrail *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  int *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  const void *v75;
  int64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  __int128 *v97;
  uint64_t v98;
  __int128 v99;
  char *v100;
  uint64_t v101;
  char *v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  int *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  char *v115;
  uint64_t v116;
  __int128 v117;
  int v118;
  uint64_t v119;
  char *v120;
  int64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  _QWORD *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  operations_research::sat::LinMinPropagator *v139;
  operations_research::sat::GenericLiteralWatcher *v140;
  _QWORD *v141;
  _QWORD *v142;
  char *result;
  char *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  void *__p;
  char *v151;
  char *v152;
  void *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  uint64_t v161;

  v2 = a2;
  v161 = *MEMORY[0x24BDAC8D0];
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v148 = v2;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 4)
  {
    v5 = **(_QWORD **)(a1 + 24);
    v6 = v5 >= 0 ? **(_QWORD **)(a1 + 24) : -v5;
    if (v6 == 1)
    {
      v149 = **(_DWORD **)a1 ^ (v5 != 1);
      goto LABEL_93;
    }
  }
  v7 = operations_research::sat::LinExprLowerBound((uint64_t *)a1, (uint64_t)v4);
  v8 = operations_research::sat::LinExprUpperBound((uint64_t *)a1, (uint64_t)v4);
  v149 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v4, v7, v8);
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v10 = *(const void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = v9 - *(_QWORD *)a1;
  if (v9 == *(_QWORD *)a1)
  {
    v144 = 0;
    __p = 0;
    v151 = 0;
    v152 = 0;
    v15 = *(uint64_t **)(a1 + 24);
    v14 = *(uint64_t **)(a1 + 32);
    if (v15 != v14)
    {
LABEL_10:
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v146 = v14;
      while (1)
      {
        while (1)
        {
          v20 = *v15;
          if (v16 >= v17)
            break;
          *(_QWORD *)v16 = v20;
          v16 += 8;
          v19 = v16;
          v151 = v16;
          if (++v15 == v14)
            goto LABEL_41;
        }
        v21 = (v16 - v18) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v17 - v18) >> 2 > v22)
          v22 = (v17 - v18) >> 2;
        v23 = (unint64_t)(v17 - v18) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v22;
        if (v23)
        {
          if (v23 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * v23);
          v25 = &v24[8 * v21];
          *(_QWORD *)v25 = v20;
          v19 = v25 + 8;
          if (v16 == v18)
          {
LABEL_30:
            v17 = &v24[8 * v23];
            __p = v25;
            v152 = v17;
            if (!v18)
              goto LABEL_27;
LABEL_26:
            operator delete(v18);
            goto LABEL_27;
          }
        }
        else
        {
          v24 = 0;
          v25 = (char *)(8 * v21);
          *(_QWORD *)(8 * v21) = v20;
          v19 = (char *)(8 * v21 + 8);
          if (v16 == v18)
            goto LABEL_30;
        }
        v26 = v16 - 8 - v18;
        if (v26 < 0x168
          || &v24[v16 - v18 - 8 - (v26 & 0xFFFFFFFFFFFFFFF8)] > &v24[v16 - v18 - 8]
          || &v16[-(v26 & 0xFFFFFFFFFFFFFFF8) - 8] > v16 - 8
          || (unint64_t)(v18 - v24) < 0x20)
        {
          break;
        }
        v29 = (v26 >> 3) + 1;
        v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = &v16[-v30];
        v25 -= v30;
        v31 = &v24[8 * v21 - 16];
        v32 = (__int128 *)(v16 - 16);
        v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *v32;
          *(v31 - 1) = *(v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_24;
LABEL_25:
        v17 = &v24[8 * v23];
        __p = v25;
        v152 = v17;
        if (v18)
          goto LABEL_26;
LABEL_27:
        v18 = v25;
        v14 = v146;
        v151 = v19;
        ++v15;
        v16 = v19;
        if (v15 == v146)
          goto LABEL_41;
      }
      v27 = v16;
      do
      {
LABEL_24:
        v28 = *((_QWORD *)v27 - 1);
        v27 -= 8;
        *((_QWORD *)v25 - 1) = v28;
        v25 -= 8;
      }
      while (v27 != v18);
      goto LABEL_25;
    }
  }
  else
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - *(_QWORD *)a1);
    v13 = &v12[4 * (v11 >> 2)];
    v153 = v12;
    v155 = v13;
    memcpy(v12, v10, v11);
    v144 = v13;
    v154 = v13;
    __p = 0;
    v151 = 0;
    v152 = 0;
    v15 = *(uint64_t **)(a1 + 24);
    v14 = *(uint64_t **)(a1 + 32);
    if (v15 != v14)
      goto LABEL_10;
  }
  v18 = 0;
  v17 = 0;
  v19 = 0;
LABEL_41:
  v35 = (char *)v153;
  v36 = v144 - (_BYTE *)v153;
  v37 = (v144 - (_BYTE *)v153) >> 2;
  v38 = v37 + 1;
  if ((unint64_t)(v37 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (v36 >> 1 > v38)
    v38 = v36 >> 1;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
    v39 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v39 = v38;
  if (v39)
  {
    if (v39 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v40 = (char *)operator new(4 * v39);
  }
  else
  {
    v40 = 0;
  }
  v41 = (int *)&v40[4 * v37];
  v42 = &v40[4 * v39];
  *v41 = v149;
  v43 = (char *)(v41 + 1);
  if (v144 != v35)
  {
    v44 = v144 - v35 - 4;
    if (v44 < 0x1C)
    {
      v45 = v144;
      do
      {
LABEL_57:
        v52 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--v41 = v52;
      }
      while (v45 != v35);
      goto LABEL_58;
    }
    v46 = (v44 >> 2) + 1;
    v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v144[-v47];
    v41 = (int *)((char *)v41 - v47);
    v48 = &v40[4 * v37 - 16];
    v49 = (__int128 *)(v144 - 16);
    v50 = v46 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v51 = *v49;
      *((_OWORD *)v48 - 1) = *(v49 - 1);
      *(_OWORD *)v48 = v51;
      v48 -= 32;
      v49 -= 2;
      v50 -= 8;
    }
    while (v50);
    if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_57;
  }
LABEL_58:
  v153 = v41;
  v155 = v42;
  if (v35)
    operator delete(v35);
  v154 = v43;
  if (v19 < v17)
  {
    *(_QWORD *)v19 = -1;
    v53 = v19 + 8;
    goto LABEL_83;
  }
  v54 = (v19 - v18) >> 3;
  v55 = v54 + 1;
  if ((unint64_t)(v54 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if ((v17 - v18) >> 2 > v55)
    v55 = (v17 - v18) >> 2;
  if ((unint64_t)(v17 - v18) >= 0x7FFFFFFFFFFFFFF8)
    v56 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v56 = v55;
  if (v56)
  {
    if (v56 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v57 = operator new(8 * v56);
  }
  else
  {
    v57 = 0;
  }
  v58 = &v57[8 * v54];
  v59 = &v57[8 * v56];
  *(_QWORD *)v58 = -1;
  v53 = v58 + 8;
  if (v19 != v18)
  {
    v60 = v19 - v18 - 8;
    if (v60 < 0x58)
    {
      v61 = v19;
      goto LABEL_80;
    }
    if ((unint64_t)(v18 - v57) < 0x20)
    {
      v61 = v19;
      do
      {
LABEL_80:
        v68 = *((_QWORD *)v61 - 1);
        v61 -= 8;
        *((_QWORD *)v58 - 1) = v68;
        v58 -= 8;
      }
      while (v61 != v18);
      goto LABEL_81;
    }
    v62 = (v60 >> 3) + 1;
    v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
    v61 = &v19[-v63];
    v58 -= v63;
    v64 = &v57[8 * v54 - 16];
    v65 = (__int128 *)(v19 - 16);
    v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *v65;
      *(v64 - 1) = *(v65 - 1);
      *v64 = v67;
      v64 -= 2;
      v65 -= 2;
      v66 -= 4;
    }
    while (v66);
    if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_80;
  }
LABEL_81:
  __p = v58;
  v152 = v59;
  if (v18)
    operator delete(v18);
LABEL_83:
  v151 = v53;
  operations_research::sat::FixedWeightedSum<std::vector<long long>>((uint64_t)&v153, (uint64_t)&__p, -*(_QWORD *)(a1 + 48), (uint64_t)v159);
  v2 = v148;
  v156 = v148;
  if (!v160)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v160 + 48))(v160, &v156);
  v69 = v160;
  if (v160 == v159)
  {
    v70 = 4;
    v69 = v159;
    goto LABEL_88;
  }
  if (v160)
  {
    v70 = 5;
LABEL_88:
    (*(void (**)(void))(*v69 + 8 * v70))();
  }
  if (__p)
  {
    v151 = (char *)__p;
    operator delete(__p);
  }
  if (v153)
  {
    v154 = (char *)v153;
    operator delete(v153);
  }
LABEL_93:
  v72 = *(_QWORD *)(a1 + 56);
  v71 = *(_QWORD *)(a1 + 64);
  v73 = (uint64_t *)(a1 + 56);
  v147 = v71;
  if (v72 != v71)
  {
    v145 = v73;
    do
    {
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v75 = *(const void **)v72;
      v74 = *(_QWORD *)(v72 + 8);
      v76 = v74 - *(_QWORD *)v72;
      if (v74 == *(_QWORD *)v72)
      {
        v77 = 0;
        __p = 0;
        v151 = 0;
        v152 = 0;
        v78 = *(uint64_t **)(v72 + 24);
        v79 = *(uint64_t **)(v72 + 32);
        if (v78 == v79)
          goto LABEL_133;
      }
      else
      {
        if (v76 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v153 = operator new(v74 - *(_QWORD *)v72);
        v154 = (char *)v153;
        v77 = (char *)v153 + 4 * (v76 >> 2);
        v155 = v77;
        memcpy(v153, v75, v76);
        v154 = v77;
        __p = 0;
        v151 = 0;
        v152 = 0;
        v78 = *(uint64_t **)(v72 + 24);
        v79 = *(uint64_t **)(v72 + 32);
        if (v78 == v79)
        {
LABEL_133:
          v80 = 0;
          v100 = v77;
          goto LABEL_134;
        }
      }
      v80 = 0;
      do
      {
        while (1)
        {
          v81 = *v78;
          if (v80 >= v152)
            break;
          *(_QWORD *)v80 = v81;
          v80 += 8;
          v151 = v80;
          if (++v78 == v79)
            goto LABEL_130;
        }
        v82 = (char *)__p;
        v83 = v80 - (_BYTE *)__p;
        v84 = (v80 - (_BYTE *)__p) >> 3;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v86 = v152 - (_BYTE *)__p;
        if ((v152 - (_BYTE *)__p) >> 2 > v85)
          v85 = v86 >> 2;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
          v87 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87)
        {
          if (v87 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v88 = operator new(8 * v87);
          v89 = &v88[8 * v84];
          *v89 = v81;
          v90 = (uint64_t)(v89 + 1);
          if (v80 == v82)
            goto LABEL_116;
        }
        else
        {
          v88 = 0;
          v89 = (_QWORD *)(8 * v84);
          *(_QWORD *)(8 * v84) = v81;
          v90 = 8 * v84 + 8;
          if (v80 == v82)
            goto LABEL_116;
        }
        v91 = v80 - 8 - v82;
        if (v91 < 0x168)
        {
          v92 = v80;
          goto LABEL_115;
        }
        if (&v88[v83 - 8 - (v91 & 0xFFFFFFFFFFFFFFF8)] > &v88[v83 - 8])
        {
          v92 = v80;
          do
          {
LABEL_115:
            v93 = *((_QWORD *)v92 - 1);
            v92 -= 8;
            *--v89 = v93;
          }
          while (v92 != v82);
          goto LABEL_116;
        }
        if (&v80[-(v91 & 0xFFFFFFFFFFFFFFF8) - 8] > v80 - 8)
        {
          v92 = v80;
          goto LABEL_115;
        }
        if ((unint64_t)(v80 - v88 - v83) < 0x20)
        {
          v92 = v80;
          goto LABEL_115;
        }
        v94 = (v91 >> 3) + 1;
        v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
        v92 = &v80[-v95];
        v89 = (_QWORD *)((char *)v89 - v95);
        v96 = &v88[8 * v84 - 16];
        v97 = (__int128 *)(v80 - 16);
        v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v99 = *v97;
          *(v96 - 1) = *(v97 - 1);
          *v96 = v99;
          v96 -= 2;
          v97 -= 2;
          v98 -= 4;
        }
        while (v98);
        if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_115;
LABEL_116:
        __p = v89;
        v151 = (char *)v90;
        v152 = &v88[8 * v87];
        if (v82)
          operator delete(v82);
        v80 = (char *)v90;
        v151 = (char *)v90;
        ++v78;
      }
      while (v78 != v79);
LABEL_130:
      v77 = v154;
      v100 = v155;
      if (v154 < v155)
      {
        *(_DWORD *)v154 = v149;
        v101 = (uint64_t)(v77 + 4);
        v73 = v145;
        goto LABEL_155;
      }
LABEL_134:
      v73 = v145;
      v102 = (char *)v153;
      v103 = v77 - (_BYTE *)v153;
      v104 = (v77 - (_BYTE *)v153) >> 2;
      v105 = v104 + 1;
      if ((unint64_t)(v104 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v106 = v100 - (_BYTE *)v153;
      if (v106 >> 1 > v105)
        v105 = v106 >> 1;
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
        v107 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v107 = v105;
      if (v107)
      {
        if (v107 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v108 = operator new(4 * v107);
        v109 = (int *)&v108[4 * v104];
        *v109 = v149;
        v101 = (uint64_t)(v109 + 1);
        if (v77 == v102)
          goto LABEL_153;
LABEL_145:
        v110 = v77 - 4 - v102;
        if (v110 < 0x2C)
        {
          v111 = v77;
          goto LABEL_152;
        }
        if ((unint64_t)(v77 - v108 - v103) < 0x20)
        {
          v111 = v77;
          goto LABEL_152;
        }
        v112 = (v110 >> 2) + 1;
        v113 = 4 * (v112 & 0x7FFFFFFFFFFFFFF8);
        v111 = &v77[-v113];
        v109 = (int *)((char *)v109 - v113);
        v114 = &v108[4 * v104 - 16];
        v115 = v77 - 16;
        v116 = v112 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v117 = *(_OWORD *)v115;
          *(v114 - 1) = *((_OWORD *)v115 - 1);
          *v114 = v117;
          v114 -= 2;
          v115 -= 32;
          v116 -= 8;
        }
        while (v116);
        if (v112 != (v112 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_152:
            v118 = *((_DWORD *)v111 - 1);
            v111 -= 4;
            *--v109 = v118;
          }
          while (v111 != v102);
        }
      }
      else
      {
        v108 = 0;
        v109 = (int *)(4 * v104);
        *(_DWORD *)(4 * v104) = v149;
        v101 = 4 * v104 + 4;
        if (v77 != v102)
          goto LABEL_145;
      }
LABEL_153:
      v153 = v109;
      v154 = (char *)v101;
      v155 = &v108[4 * v107];
      if (v102)
      {
        operator delete(v102);
        v80 = v151;
      }
LABEL_155:
      v154 = (char *)v101;
      if (v80 < v152)
      {
        *(_QWORD *)v80 = -1;
        v119 = (uint64_t)(v80 + 8);
        goto LABEL_178;
      }
      v120 = (char *)__p;
      v121 = v80 - (_BYTE *)__p;
      v122 = (v80 - (_BYTE *)__p) >> 3;
      v123 = v122 + 1;
      if ((unint64_t)(v122 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v124 = v152 - (_BYTE *)__p;
      if ((v152 - (_BYTE *)__p) >> 2 > v123)
        v123 = v124 >> 2;
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
        v125 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v125 = v123;
      if (v125)
      {
        if (v125 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v126 = operator new(8 * v125);
        v127 = &v126[8 * v122];
        *v127 = -1;
        v119 = (uint64_t)(v127 + 1);
        if (v80 == v120)
          goto LABEL_176;
LABEL_168:
        v128 = v80 - 8 - v120;
        if (v128 < 0x58)
        {
          v129 = v80;
          goto LABEL_175;
        }
        if ((unint64_t)(v80 - v126 - v121) < 0x20)
        {
          v129 = v80;
          goto LABEL_175;
        }
        v130 = (v128 >> 3) + 1;
        v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
        v129 = &v80[-v131];
        v127 = (_QWORD *)((char *)v127 - v131);
        v132 = &v126[8 * v122 - 16];
        v133 = (__int128 *)(v80 - 16);
        v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v135 = *v133;
          *(v132 - 1) = *(v133 - 1);
          *v132 = v135;
          v132 -= 2;
          v133 -= 2;
          v134 -= 4;
        }
        while (v134);
        if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_175:
            v136 = *((_QWORD *)v129 - 1);
            v129 -= 8;
            *--v127 = v136;
          }
          while (v129 != v120);
        }
      }
      else
      {
        v126 = 0;
        v127 = (_QWORD *)(8 * v122);
        *(_QWORD *)(8 * v122) = -1;
        v119 = 8 * v122 + 8;
        if (v80 != v120)
          goto LABEL_168;
      }
LABEL_176:
      __p = v127;
      v151 = (char *)v119;
      v152 = &v126[8 * v125];
      if (v120)
        operator delete(v120);
LABEL_178:
      v151 = (char *)v119;
      operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)&v153, (uint64_t)&__p, -*(_QWORD *)(v72 + 48), v157);
      v2 = v148;
      v156 = v148;
      if (!v158)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, uint64_t *))(*v158 + 48))(v158, &v156);
      v137 = v158;
      if (v158 == v157)
      {
        v137 = v157;
        v138 = 4;
LABEL_183:
        (*(void (**)(void))(*v137 + 8 * v138))();
      }
      else if (v158)
      {
        v138 = 5;
        goto LABEL_183;
      }
      if (__p)
      {
        v151 = (char *)__p;
        operator delete(__p);
      }
      if (v153)
      {
        v154 = (char *)v153;
        operator delete(v153);
      }
      v72 += 56;
    }
    while (v72 != v147);
  }
  v139 = (operations_research::sat::LinMinPropagator *)operator new();
  operations_research::sat::LinMinPropagator::LinMinPropagator((uint64_t)v139, v73, v149, v2);
  v140 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v2);
  operations_research::sat::LinMinPropagator::RegisterWith(v139, v140);
  v141 = (_QWORD *)operator new();
  *v141 = &off_24F9836B0;
  v141[1] = v139;
  v153 = v141;
  v142 = *(_QWORD **)(v2 + 56);
  if ((unint64_t)v142 >= *(_QWORD *)(v2 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v2 + 48), &v153);
  }
  else
  {
    *v142 = v141;
    result = (char *)(v142 + 1);
  }
  *(_QWORD *)(v2 + 56) = result;
  return result;
}

