uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::func::ReturnOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::func::ReturnOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::func::ReturnOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::func::ReturnOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::func::ReturnOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::func::ReturnOp>::getSuccessorRegions;
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_254519000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[393], v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::func::ReturnOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::func::ReturnOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Block *v6;
  uint64_t ParentOp;
  uint64_t v9;
  mlir::Block *v10;
  unint64_t Parent;
  uint64_t v13;
  uint64_t v14;

  v6 = *(mlir::Block **)(a2 + 16);
  if (v6)
  {
    ParentOp = mlir::Block::getParentOp(v6);
    v9 = ParentOp;
    if (ParentOp)
      ParentOp = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp);
    v10 = *(mlir::Block **)(a2 + 16);
    v13 = v9;
    v14 = ParentOp;
    if (v10)
      Parent = mlir::Block::getParent(v10);
    else
      Parent = 0;
  }
  else
  {
    Parent = 0;
    v13 = 0;
    v14 = 0;
  }
  return mlir::BranchOpInterface::getSuccessorForOperands(&v13, Parent, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::func::ReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::func::ReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  const char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  const char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  const char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  unint64_t v261;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v247 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v53 = v52;
    a1 = v247;
    if (v53)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v261 = 83;
      v54 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v54)
        v55 = v54;
      else
        v55 = v261;
      v56 = &v260[v55];
      v57 = v261 - v55;
      if (v261 - v55 >= 0x12)
        v58 = 18;
      else
        v58 = v261 - v55;
      v59 = v57 - v58;
      if (v59 >= v59 - 1)
        v60 = v59 - 1;
      else
        v60 = v59;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v247;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v235 = v3;
    v248 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v62 = v61;
    v3 = v235;
    a1 = v248;
    if (v62)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v261 = 83;
      v63 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v63)
        v64 = v63;
      else
        v64 = v261;
      v65 = &v260[v64];
      v66 = v261 - v64;
      if (v261 - v64 >= 0x12)
        v67 = 18;
      else
        v67 = v261 - v64;
      v68 = v66 - v67;
      if (v68 >= v68 - 1)
        v69 = v68 - 1;
      else
        v69 = v68;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v235;
      a1 = v248;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v236 = v3;
    v249 = a1;
    v224 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v224;
    v3 = v236;
    v71 = v70;
    a1 = v249;
    if (v71)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v261 = 86;
      v72 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v72)
        v73 = v72;
      else
        v73 = v261;
      v74 = &v260[v73];
      v75 = v261 - v73;
      if (v261 - v73 >= 0x12)
        v76 = 18;
      else
        v76 = v261 - v73;
      v77 = v75 - v76;
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v224;
      v3 = v236;
      a1 = v249;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v237 = v3;
    v250 = a1;
    v214 = v9;
    v225 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v214;
    v6 = v225;
    v80 = v79;
    v3 = v237;
    a1 = v250;
    if (v80)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v261 = 88;
      v81 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v81)
        v82 = v81;
      else
        v82 = v261;
      v83 = &v260[v82];
      v84 = v261 - v82;
      if (v261 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v261 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v214;
      v6 = v225;
      v3 = v237;
      a1 = v250;
    }
  }
  v12 = v11[73];
  v14 = &unk_25451B000;
  if ((v13 & 1) == 0)
  {
    v238 = v3;
    v251 = a1;
    v215 = v9;
    v226 = v6;
    v205 = v12;
    v14 = (_QWORD *)&unk_25451B000;
    v12 = v205;
    v9 = v215;
    v6 = v226;
    v89 = v88;
    v3 = v238;
    a1 = v251;
    if (v89)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl<Empty>]";
      v261 = 107;
      v90 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v90)
        v91 = v90;
      else
        v91 = v261;
      v92 = &v260[v91];
      v93 = v261 - v91;
      if (v261 - v91 >= 0x12)
        v94 = 18;
      else
        v94 = v261 - v91;
      v95 = v93 - v94;
      if (v95 >= v95 - 1)
        v96 = v95 - 1;
      else
        v96 = v95;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      v14 = (_QWORD *)&unk_25451B000;
      v12 = v205;
      v9 = v215;
      v6 = v226;
      v3 = v238;
      a1 = v251;
    }
  }
  v15 = v14[67];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v239 = v3;
    v252 = a1;
    v216 = v9;
    v227 = v6;
    v197 = v15;
    v206 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v197;
    v12 = v206;
    v9 = v216;
    v6 = v227;
    v98 = v97;
    v3 = v239;
    a1 = v252;
    if (v98)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v261 = 84;
      v99 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v99)
        v100 = v99;
      else
        v100 = v261;
      v101 = &v260[v100];
      v102 = v261 - v100;
      if (v261 - v100 >= 0x12)
        v103 = 18;
      else
        v103 = v261 - v100;
      v104 = v102 - v103;
      if (v104 >= v104 - 1)
        v105 = v104 - 1;
      else
        v105 = v104;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v197;
      v12 = v206;
      v9 = v216;
      v6 = v227;
      v3 = v239;
      a1 = v252;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v240 = v3;
    v253 = a1;
    v217 = v9;
    v228 = v6;
    v198 = v15;
    v207 = v12;
    v190 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v190;
    v15 = v198;
    v12 = v207;
    v9 = v217;
    v6 = v228;
    v107 = v106;
    v3 = v240;
    a1 = v253;
    if (v107)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v261 = 95;
      v108 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v108)
        v109 = v108;
      else
        v109 = v261;
      v110 = &v260[v109];
      v111 = v261 - v109;
      if (v261 - v109 >= 0x12)
        v112 = 18;
      else
        v112 = v261 - v109;
      v113 = v111 - v112;
      if (v113 >= v113 - 1)
        v114 = v113 - 1;
      else
        v114 = v113;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v190;
      v15 = v198;
      v12 = v207;
      v9 = v217;
      v6 = v228;
      v3 = v240;
      a1 = v253;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v241 = v3;
    v254 = a1;
    v218 = v9;
    v229 = v6;
    v199 = v15;
    v208 = v12;
    v184 = v21;
    v191 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v184;
    v18 = v191;
    v15 = v199;
    v12 = v208;
    v9 = v218;
    v6 = v229;
    v116 = v115;
    v3 = v241;
    a1 = v254;
    if (v116)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v261 = 99;
      v117 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v117)
        v118 = v117;
      else
        v118 = v261;
      v119 = &v260[v118];
      v120 = v261 - v118;
      if (v261 - v118 >= 0x12)
        v121 = 18;
      else
        v121 = v261 - v118;
      v122 = v120 - v121;
      if (v122 >= v122 - 1)
        v123 = v122 - 1;
      else
        v123 = v122;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v184;
      v18 = v191;
      v15 = v199;
      v12 = v208;
      v9 = v218;
      v6 = v229;
      v3 = v241;
      a1 = v254;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v242 = v3;
    v255 = a1;
    v219 = v9;
    v230 = v6;
    v200 = v15;
    v209 = v12;
    v185 = v21;
    v192 = v18;
    v179 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v179;
    v21 = v185;
    v18 = v192;
    v15 = v200;
    v12 = v209;
    v9 = v219;
    v6 = v230;
    v125 = v124;
    v3 = v242;
    a1 = v255;
    if (v125)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v261 = 93;
      v126 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v126)
        v127 = v126;
      else
        v127 = v261;
      v128 = &v260[v127];
      v129 = v261 - v127;
      if (v261 - v127 >= 0x12)
        v130 = 18;
      else
        v130 = v261 - v127;
      v131 = v129 - v130;
      if (v131 >= v131 - 1)
        v132 = v131 - 1;
      else
        v132 = v131;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v179;
      v21 = v185;
      v18 = v192;
      v15 = v200;
      v12 = v209;
      v9 = v219;
      v6 = v230;
      v3 = v242;
      a1 = v255;
    }
  }
  v27 = v26[21];
  v29 = &unk_25451B000;
  if ((v28 & 1) == 0)
  {
    v243 = v3;
    v256 = a1;
    v220 = v9;
    v231 = v6;
    v201 = v15;
    v210 = v12;
    v186 = v21;
    v193 = v18;
    v175 = v27;
    v180 = v24;
    v29 = (_QWORD *)&unk_25451B000;
    v27 = v175;
    v24 = v180;
    v21 = v186;
    v18 = v193;
    v15 = v201;
    v12 = v210;
    v9 = v220;
    v6 = v231;
    v134 = v133;
    v3 = v243;
    a1 = v256;
    if (v134)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v261 = 91;
      v135 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v135)
        v136 = v135;
      else
        v136 = v261;
      v137 = &v260[v136];
      v138 = v261 - v136;
      if (v261 - v136 >= 0x12)
        v139 = 18;
      else
        v139 = v261 - v136;
      v140 = v138 - v139;
      if (v140 >= v140 - 1)
        v141 = v140 - 1;
      else
        v141 = v140;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      v29 = (_QWORD *)&unk_25451B000;
      v27 = v175;
      v24 = v180;
      v21 = v186;
      v18 = v193;
      v15 = v201;
      v12 = v210;
      v9 = v220;
      v6 = v231;
      v3 = v243;
      a1 = v256;
    }
  }
  v30 = v29[45];
  v32 = &unk_25451B000;
  if ((v31 & 1) == 0)
  {
    v244 = v3;
    v257 = a1;
    v221 = v9;
    v232 = v6;
    v202 = v15;
    v211 = v12;
    v187 = v21;
    v194 = v18;
    v176 = v27;
    v181 = v24;
    v172 = v30;
    v32 = (_QWORD *)&unk_25451B000;
    v30 = v172;
    v27 = v176;
    v24 = v181;
    v21 = v187;
    v18 = v194;
    v15 = v202;
    v12 = v211;
    v9 = v221;
    v6 = v232;
    v143 = v142;
    v3 = v244;
    a1 = v257;
    if (v143)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      v261 = 103;
      v144 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v144)
        v145 = v144;
      else
        v145 = v261;
      v146 = &v260[v145];
      v147 = v261 - v145;
      if (v261 - v145 >= 0x12)
        v148 = 18;
      else
        v148 = v261 - v145;
      v149 = v147 - v148;
      if (v149 >= v149 - 1)
        v150 = v149 - 1;
      else
        v150 = v149;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      v32 = (_QWORD *)&unk_25451B000;
      v30 = v172;
      v27 = v176;
      v24 = v181;
      v21 = v187;
      v18 = v194;
      v15 = v202;
      v12 = v211;
      v9 = v221;
      v6 = v232;
      v3 = v244;
      a1 = v257;
    }
  }
  v33 = v32[69];
  v35 = &unk_254519000;
  if ((v34 & 1) == 0)
  {
    v245 = v3;
    v258 = a1;
    v222 = v9;
    v233 = v6;
    v203 = v15;
    v212 = v12;
    v188 = v21;
    v195 = v18;
    v177 = v27;
    v182 = v24;
    v170 = v33;
    v173 = v30;
    v35 = (_QWORD *)&unk_254519000;
    v33 = v170;
    v30 = v173;
    v27 = v177;
    v24 = v182;
    v21 = v188;
    v18 = v195;
    v15 = v203;
    v12 = v212;
    v9 = v222;
    v6 = v233;
    v152 = v151;
    v3 = v245;
    a1 = v258;
    if (v152)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      v261 = 82;
      v153 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v153)
        v154 = v153;
      else
        v154 = v261;
      v155 = &v260[v154];
      v156 = v261 - v154;
      if (v261 - v154 >= 0x12)
        v157 = 18;
      else
        v157 = v261 - v154;
      v158 = v156 - v157;
      if (v158 >= v158 - 1)
        v159 = v158 - 1;
      else
        v159 = v158;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v155[v157], v159);
      v35 = (_QWORD *)&unk_254519000;
      v33 = v170;
      v30 = v173;
      v27 = v177;
      v24 = v182;
      v21 = v188;
      v18 = v195;
      v15 = v203;
      v12 = v212;
      v9 = v222;
      v6 = v233;
      v3 = v245;
      a1 = v258;
    }
  }
  v36 = v35[401];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v246 = v3;
    v259 = a1;
    v223 = v9;
    v234 = v6;
    v204 = v15;
    v213 = v12;
    v189 = v21;
    v196 = v18;
    v178 = v27;
    v183 = v24;
    v171 = v33;
    v174 = v30;
    v169 = v36;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v169;
    v33 = v171;
    v30 = v174;
    v27 = v178;
    v24 = v183;
    v21 = v189;
    v18 = v196;
    v15 = v204;
    v12 = v213;
    v9 = v223;
    v6 = v234;
    v161 = v160;
    v3 = v246;
    a1 = v259;
    if (v161)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v261 = 84;
      v162 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v162)
        v163 = v162;
      else
        v163 = v261;
      v164 = &v260[v163];
      v165 = v261 - v163;
      if (v261 - v163 >= 0x12)
        v166 = 18;
      else
        v166 = v261 - v163;
      v167 = v165 - v166;
      if (v167 >= v167 - 1)
        v168 = v167 - 1;
      else
        v168 = v167;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v164[v166], v168);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v169;
      v33 = v171;
      v30 = v174;
      v27 = v178;
      v24 = v183;
      v21 = v189;
      v18 = v196;
      v15 = v204;
      v12 = v213;
      v9 = v223;
      v6 = v234;
      v3 = v246;
      a1 = v259;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v38[223] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::func::ReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::func::ReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl<mlir::func::ReturnOp>::verifyTrait((uint64_t *)a1)
    || !mlir::OpTrait::impl::verifyIsTerminator(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::func::ReturnOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl<mlir::func::ReturnOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "func.func";
  v37[1] = 9;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = __p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = *--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t *v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  const void ***v19;
  uint64_t v20;
  __int128 v21;
  const void **v22;
  const char *v23;
  unint64_t v24;
  BOOL v25;
  char *v26;
  void *v27;
  const void **v28;
  const char *v29;
  size_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  if (result != a2)
  {
    v32 = v5;
    v33 = v6;
    v11 = result;
    v31 = 262;
    v12 = *(const char **)(result + 8);
    v28 = *(const void ***)result;
    v29 = v12;
    result = mlir::Diagnostic::operator<<(a3, &v28);
    v13 = v11 + 16;
    if (v11 + 16 != a2)
    {
      v14 = (unint64_t *)(a4 + 16);
      v27 = (void *)(a4 + 32);
      do
      {
        v15 = *a5;
        if (*a5)
        {
          v16 = strlen(*a5);
          LODWORD(v28) = 3;
          v29 = v15;
          v30 = v16;
          v17 = *(unsigned int *)(a4 + 24);
          v18 = *(_QWORD *)(a4 + 16);
          if (v17 < *(_DWORD *)(a4 + 28))
            goto LABEL_8;
        }
        else
        {
          LODWORD(v28) = 3;
          v29 = 0;
          v30 = 0;
          v17 = *(unsigned int *)(a4 + 24);
          v18 = *(_QWORD *)(a4 + 16);
          if (v17 < *(_DWORD *)(a4 + 28))
            goto LABEL_8;
        }
        v24 = v17 + 1;
        v25 = v18 + 24 * v17 > (unint64_t)&v28;
        if (v18 <= (unint64_t)&v28 && v25)
        {
          v26 = (char *)&v28 - v18;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 16, v27, v24, 24);
          v18 = *v14;
          v19 = (const void ***)&v26[*v14];
          goto LABEL_9;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 16, v27, v24, 24);
        v18 = *v14;
LABEL_8:
        v19 = &v28;
LABEL_9:
        v20 = v18 + 24 * *(unsigned int *)(a4 + 24);
        v21 = *(_OWORD *)v19;
        *(_QWORD *)(v20 + 16) = v19[2];
        *(_OWORD *)v20 = v21;
        ++*(_DWORD *)(a4 + 24);
        v31 = 262;
        v22 = *(const void ***)v13;
        v23 = *(const char **)(v13 + 8);
        v13 += 16;
        v28 = v22;
        v29 = v23;
        result = mlir::Diagnostic::operator<<(a3, &v28);
      }
      while (v13 != a2);
    }
  }
  return result;
}

uint64_t mlir::Op<mlir::func::ReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    if (*a2 == *v13 && v6 == v15)
    {
      result = 1;
      *a3 = v13;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v14 != -4096 || v15 != -4096)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v15 == -8192;
        if (v20 && v14 == -8192)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_QWORD *)(v4 + 16 * (v22 & v11));
        v14 = *v13;
        v15 = v13[1];
        if (v5 == *v13 && v6 == v15)
        {
          *a3 = v13;
          return result;
        }
      }
      result = 0;
      if (v17)
        v13 = v17;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::InsertIntoBucketImpl<std::pair<mlir::TypeID,mlir::TypeID>>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    ++*(_DWORD *)(a1 + 8);
    if (*a4 != -4096)
      goto LABEL_8;
    goto LABEL_4;
  }
  llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    goto LABEL_8;
LABEL_4:
  if (a4[1] == -4096)
    return a4;
LABEL_8:
  --*(_DWORD *)(a1 + 12);
  return a4;
}

void llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *buffer;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      memset_pattern16(buffer, &unk_207AB5160, 16 * v10);
    v11 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v15 = v13[1];
        if ((*v13 != -4096 || v15 != -4096) && (*v13 != -8192 || v15 != -8192))
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>((uint64_t *)a1, v13, &v17);
          v14 = v17;
          *v17 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    llvm::deallocate_buffer(v4, v11);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
    memset_pattern16(buffer, &unk_207AB5160, 16 * v16);
}

__n128 llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::ResultRange>>(mlir::ValueTypeRange<mlir::ResultRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::ResultRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::ResultRange>>(mlir::ValueTypeRange<mlir::ResultRange> const&,char const*)::{lambda(void)#1},void>(mlir::detail::OpResultImpl *this, uint64_t a2, mlir::detail::OpResultImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char **a7)
{
  uint64_t NextResultAtOffset;
  __n128 *v15;
  unint64_t v16;
  uint64_t v17;
  __n128 *v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t v31;
  unint64_t v32;
  __n128 *v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  char *v40;
  char *v41;
  char *v42;
  void *v43;
  void *v44;
  unint64_t *v45;
  unint64_t *v46;
  int v47;
  const char *v48;
  size_t v49;

  if (this != a3 || a2 != a4)
  {
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, a2);
    v15 = (__n128 *)&v47;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    v16 = *(_QWORD *)(a5 + 16);
    v46 = (unint64_t *)(a5 + 16);
    v17 = *(unsigned int *)(a5 + 24);
    if (v17 >= *(_DWORD *)(a5 + 28))
    {
      v38 = v17 + 1;
      v39 = v16 + 24 * v17 > (unint64_t)&v47;
      if (v16 <= (unint64_t)&v47 && v39)
      {
        v40 = (char *)&v47 - v16;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, (void *)(a5 + 32), v38, 24);
        v16 = *(_QWORD *)(a5 + 16);
        v15 = (__n128 *)&v40[v16];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, (void *)(a5 + 32), v38, 24);
        v16 = *(_QWORD *)(a5 + 16);
        v15 = (__n128 *)&v47;
      }
    }
    v18 = (__n128 *)(v16 + 24 * *(unsigned int *)(a5 + 24));
    result = *v15;
    v18[1].n128_u64[0] = v15[1].n128_u64[0];
    *v18 = result;
    ++*(_DWORD *)(a5 + 24);
    if (this != a3 || a2 + 1 != a4)
    {
      v44 = (void *)(a6 + 32);
      v45 = (unint64_t *)(a6 + 16);
      v43 = (void *)(a5 + 32);
      v20 = a2 + 2;
      do
      {
        v21 = v20;
        v22 = *a7;
        if (*a7)
        {
          v23 = strlen(*a7);
          v47 = 3;
          v48 = v22;
          v49 = v23;
          v24 = *(unsigned int *)(a6 + 24);
          v25 = *(_QWORD *)(a6 + 16);
          if (v24 < *(_DWORD *)(a6 + 28))
            goto LABEL_12;
        }
        else
        {
          v47 = 3;
          v48 = 0;
          v49 = 0;
          v24 = *(unsigned int *)(a6 + 24);
          v25 = *(_QWORD *)(a6 + 16);
          if (v24 < *(_DWORD *)(a6 + 28))
            goto LABEL_12;
        }
        v34 = v24 + 1;
        v35 = v25 + 24 * v24 > (unint64_t)&v47;
        if (v25 <= (unint64_t)&v47 && v35)
        {
          v41 = (char *)&v47 - v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v45, v44, v34, 24);
          v25 = *v45;
          v26 = (int *)&v41[*v45];
          goto LABEL_13;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v45, v44, v34, 24);
        v25 = *v45;
LABEL_12:
        v26 = &v47;
LABEL_13:
        v27 = v25 + 24 * *(unsigned int *)(a6 + 24);
        v28 = *(_OWORD *)v26;
        *(_QWORD *)(v27 + 16) = *((_QWORD *)v26 + 2);
        *(_OWORD *)v27 = v28;
        ++*(_DWORD *)(a6 + 24);
        v29 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v21 - 1);
        v30 = (__n128 *)&v47;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8);
        v31 = *(unsigned int *)(a5 + 24);
        v32 = *(_QWORD *)(a5 + 16);
        if (v31 >= *(_DWORD *)(a5 + 28))
        {
          v36 = v31 + 1;
          v37 = v32 + 24 * v31 > (unint64_t)&v47;
          if (v32 <= (unint64_t)&v47 && v37)
          {
            v42 = (char *)&v47 - v32;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v43, v36, 24);
            v32 = *v46;
            v30 = (__n128 *)&v42[*v46];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v43, v36, 24);
            v32 = *v46;
            v30 = (__n128 *)&v47;
          }
        }
        v33 = (__n128 *)(v32 + 24 * *(unsigned int *)(a5 + 24));
        result = *v30;
        v33[1].n128_u64[0] = v30[1].n128_u64[0];
        *v33 = result;
        ++*(_DWORD *)(a5 + 24);
        v20 = v21 + 1;
      }
      while (this != a3 || a4 != v21);
    }
  }
  return result;
}

__n128 llvm::interleave<mlir::Type const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<mlir::Type>>(llvm::ArrayRef<mlir::Type> const&,char const*)::{lambda(llvm::ArrayRef<mlir::Type> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<mlir::Type>>(llvm::ArrayRef<mlir::Type> const&,char const*)::{lambda(void)#1},void>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v5;
  uint64_t v6;
  __n128 *v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 result;
  uint64_t *v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  __int128 v25;
  __n128 *v26;
  uint64_t v27;
  unint64_t v28;
  __n128 *v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  BOOL v33;
  char *v34;
  unint64_t v35;
  BOOL v36;
  char *v37;
  char *v38;
  void *v39;
  unint64_t *v40;
  int v41;
  const char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;

  if (a1 != a2)
  {
    v44 = v5;
    v45 = v6;
    v12 = (__n128 *)&v41;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v41, *a1);
    v14 = (unint64_t *)(a3 + 16);
    v13 = *(_QWORD *)(a3 + 16);
    v15 = *(unsigned int *)(a3 + 24);
    if (v15 >= *(_DWORD *)(a3 + 28))
    {
      v35 = v15 + 1;
      v36 = v13 + 24 * v15 > (unint64_t)&v41;
      if (v13 <= (unint64_t)&v41 && v36)
      {
        v37 = (char *)&v41 - v13;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 16, (void *)(a3 + 32), v35, 24);
        v13 = *(_QWORD *)(a3 + 16);
        v12 = (__n128 *)&v37[v13];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 16, (void *)(a3 + 32), v35, 24);
        v13 = *(_QWORD *)(a3 + 16);
        v12 = (__n128 *)&v41;
      }
    }
    v16 = (__n128 *)(v13 + 24 * *(unsigned int *)(a3 + 24));
    result = *v12;
    v16[1].n128_u64[0] = v12[1].n128_u64[0];
    *v16 = result;
    ++*(_DWORD *)(a3 + 24);
    v18 = a1 + 1;
    if (a1 + 1 != a2)
    {
      v39 = (void *)(a4 + 32);
      v40 = (unint64_t *)(a4 + 16);
      do
      {
        v19 = *a5;
        if (*a5)
        {
          v20 = strlen(*a5);
          v41 = 3;
          v42 = v19;
          v43 = v20;
          v21 = *(unsigned int *)(a4 + 24);
          v22 = *(_QWORD *)(a4 + 16);
          if (v21 < *(_DWORD *)(a4 + 28))
            goto LABEL_9;
        }
        else
        {
          v41 = 3;
          v42 = 0;
          v43 = 0;
          v21 = *(unsigned int *)(a4 + 24);
          v22 = *(_QWORD *)(a4 + 16);
          if (v21 < *(_DWORD *)(a4 + 28))
            goto LABEL_9;
        }
        v30 = v21 + 1;
        v31 = v22 + 24 * v21 > (unint64_t)&v41;
        if (v22 <= (unint64_t)&v41 && v31)
        {
          v38 = (char *)&v41 - v22;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v40, v39, v30, 24);
          v22 = *v40;
          v23 = (int *)&v38[*v40];
          goto LABEL_10;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v40, v39, v30, 24);
        v22 = *v40;
LABEL_9:
        v23 = &v41;
LABEL_10:
        v24 = v22 + 24 * *(unsigned int *)(a4 + 24);
        v25 = *(_OWORD *)v23;
        *(_QWORD *)(v24 + 16) = *((_QWORD *)v23 + 2);
        *(_OWORD *)v24 = v25;
        ++*(_DWORD *)(a4 + 24);
        v26 = (__n128 *)&v41;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v41, *v18);
        v27 = *(unsigned int *)(a3 + 24);
        v28 = *(_QWORD *)(a3 + 16);
        if (v27 >= *(_DWORD *)(a3 + 28))
        {
          v32 = v27 + 1;
          v33 = v28 + 24 * v27 > (unint64_t)&v41;
          if (v28 <= (unint64_t)&v41 && v33)
          {
            v34 = (char *)&v41 - v28;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 16, (void *)(a3 + 32), v32, 24);
            v28 = *v14;
            v26 = (__n128 *)&v34[*v14];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 16, (void *)(a3 + 32), v32, 24);
            v28 = *v14;
            v26 = (__n128 *)&v41;
          }
        }
        v29 = (__n128 *)(v28 + 24 * *(unsigned int *)(a3 + 24));
        result = *v26;
        v29[1].n128_u64[0] = v26[1].n128_u64[0];
        *v29 = result;
        ++*(_DWORD *)(a3 + 24);
        ++v18;
      }
      while (v18 != a2);
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::func::CallOp,mlir::SymbolRefAttr &,mlir::ValueTypeRange<mlir::ResultRange>,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t NextResultAtOffset;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  unint64_t v24[2];
  unint64_t v25[2];
  _QWORD v26[38];
  uint64_t v27[4];
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"func.call", (const unsigned __int8 *)9, Context);
  if (!v12)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"func.call";
    v27[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v27, (uint64_t *)&v22, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v11);
  v13 = *a3;
  NextResultAtOffset = *a4;
  v15 = a4[1];
  v16 = a4[3];
  if (v15)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v15);
  mlir::ValueRange::ValueRange((unint64_t *)v27, NextResultAtOffset, v16 - v15);
  mlir::TypeRange::TypeRange(v25, v27[0], v27[1]);
  v17 = mlir::ValueRange::ValueRange(v24, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  mlir::func::CallOp::build((uint64_t)v17, (uint64_t)v26, v13, v25[0], v25[1], v24[0], v24[1]);
  v18 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::CallOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v19;
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::func::FuncOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

_QWORD *mlir::RewritePatternSet::add<mlir::func::CallIndirectOp>(mlir::LogicalResult (*)(mlir::func::CallIndirectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::func::CallIndirectOp>(mlir::LogicalResult (*)(mlir::func::CallIndirectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::func::CallIndirectOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::func::CallIndirectOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::func::CallIndirectOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::func::CallIndirectOp>(mlir::LogicalResult (*)(mlir::func::CallIndirectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::func::detail::CallOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::func::detail::CallOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::func::detail::CallOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::func::detail::CallOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::FlatSymbolRefAttr>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v23 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v23, a3))
    return 0;
  v7 = v23;
  if (*(_UNKNOWN **)(*(_QWORD *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    v8 = v23;
  else
    v8 = 0;
  v24[0] = v8;
  if (v8)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v24);
    if (v9)
      v10 = 0;
    else
      v10 = v7;
    *a2 = v10;
    if (!v9)
      return 1;
  }
  else
  {
    *a2 = 0;
  }
  v21 = "invalid kind of attribute specified";
  v22 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v24, a1, v6, &v21);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  if (v31)
  {
    v12 = __p;
    if (__p)
    {
      v13 = v30;
      v14 = __p;
      if (v30 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v30 = v12;
      operator delete(v14);
    }
    v15 = v27;
    if (v27)
    {
      v16 = v28;
      v17 = v27;
      if (v28 != v27)
      {
        do
        {
          v19 = *--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            MEMORY[0x20BD002D4](v18, 0x1000C8077774924);
        }
        while (v16 != v15);
        v17 = v27;
      }
      v28 = v15;
      operator delete(v17);
    }
    if (v25 != &v26)
      free(v25);
  }
  return v11;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::func::CallOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::func::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::func::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::func::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::func::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::func::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::func::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::func::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::func::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::func::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t mlir::FunctionOpInterface::getArgumentTypes(mlir::FunctionOpInterface *this)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*((_QWORD *)this + 1) + 48) + 8))();
}

uint64_t mlir::FunctionOpInterface::getResultTypes(mlir::FunctionOpInterface *this)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*((_QWORD *)this + 1) + 48) + 16))();
}

uint64_t mlir::FunctionOpInterface::getArgAttrsAttr(mlir::FunctionOpInterface *this)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*((_QWORD *)this + 1) + 48) + 24))();
}

uint64_t mlir::FunctionOpInterface::getResAttrsAttr(mlir::FunctionOpInterface *this)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*((_QWORD *)this + 1) + 48) + 32))();
}

void mlir::function_interface_impl::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  mlir::DictionaryAttr *Context;
  unint64_t v16;
  uint64_t Value;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t *v49;
  void *v50;
  mlir::MLIRContext *v51;
  mlir::MLIRContext *v52;
  mlir::MLIRContext *v53;
  mlir::MLIRContext *v54;
  unint64_t v55;
  int64x2_t *v56;
  unint64_t *v57;
  unint64_t v58;
  int64x2_t v59;
  int64x2_t *v60;
  unint64_t v61;
  unint64_t v62;
  int64x2_t *v63;
  unint64_t *v64;
  unint64_t v65;
  int64x2_t v66;
  int64x2_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[7];

  v73[6] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 8))();
  v7 = v6;
  (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 16))();
  v9 = v8;
  v10 = mlir::TypeAttr::get(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(a2, a1, v10);
  (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 8))();
  LODWORD(v12) = v11;
  (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 16))();
  LODWORD(v14) = v13;
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  v16 = mlir::DictionaryAttr::get(Context, 0, 0);
  if (v7 == (_DWORD)v12)
    goto LABEL_13;
  if (!(_DWORD)v12)
    goto LABEL_12;
  v69 = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 48) + 24))();
  if (!v69)
    goto LABEL_13;
  if (v12 < v7)
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69);
    if (v18 >= v12)
      v12 = v12;
    else
      v12 = v18;
    if (v12)
    {
      v19 = Value;
      v20 = 8 * v12;
      v21 = (void **)Value;
      while (1)
      {
        v71 = *v21;
        if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v71))
          break;
        ++v21;
        v20 -= 8;
        if (!v20)
          goto LABEL_12;
      }
      v53 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
      mlir::ArrayAttr::get(v53, v19, v12);
      (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 40))();
      goto LABEL_13;
    }
LABEL_12:
    (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 56))();
    goto LABEL_13;
  }
  v27 = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69);
  v28 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69);
  v30 = (_BYTE *)(v28 + 8 * v29);
  v71 = v73;
  v72 = 0x600000000;
  v31 = v30 - v27;
  if ((unint64_t)(v30 - v27) < 0x31)
  {
    v32 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v31 >> 3, 8);
    v32 = v72;
  }
  if (v30 != v27)
  {
    memcpy((char *)v71 + 8 * v32, v27, v30 - v27);
    v32 = v72;
  }
  v39 = v32 + ((unint64_t)v31 >> 3);
  LODWORD(v72) = v39;
  v40 = v12;
  if ((_DWORD)v39 == (_DWORD)v12)
  {
LABEL_36:
    v41 = v71;
    v42 = (char *)v71 + 8 * v40;
    v43 = (uint64_t *)v71;
    goto LABEL_37;
  }
  if (v39 > v12)
  {
    LODWORD(v72) = v12;
    goto LABEL_36;
  }
  v55 = v12 - v39;
  if (HIDWORD(v72) < v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v12, 8);
    v39 = v72;
    if (!v55)
      goto LABEL_65;
  }
  else if (!v55)
  {
    goto LABEL_65;
  }
  v56 = (int64x2_t *)((char *)v71 + 8 * v39);
  v57 = (unint64_t *)v56;
  v58 = v55;
  if (v55 < 4)
    goto LABEL_82;
  v57 = (unint64_t *)v56 + (v55 & 0xFFFFFFFFFFFFFFFCLL);
  v58 = v55 & 3;
  v59 = vdupq_n_s64(v16);
  v60 = v56 + 1;
  v61 = v55 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v60[-1] = v59;
    *v60 = v59;
    v60 += 2;
    v61 -= 4;
  }
  while (v61);
  if (v55 != (v55 & 0xFFFFFFFFFFFFFFFCLL))
  {
LABEL_82:
    do
    {
      *v57++ = v16;
      --v58;
    }
    while (v58);
  }
LABEL_65:
  v40 = (v39 + v55);
  LODWORD(v72) = v39 + v55;
  if (!((_DWORD)v39 + (_DWORD)v55))
  {
LABEL_39:
    (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 56))();
    v44 = v71;
    if (v71 == v73)
      goto LABEL_13;
LABEL_53:
    free(v44);
    goto LABEL_13;
  }
  v41 = v71;
  v42 = (char *)v71 + 8 * v40;
  v43 = (uint64_t *)v71;
LABEL_37:
  while (1)
  {
    v70 = *v43;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v70))
      break;
    if (++v43 == (uint64_t *)v42)
      goto LABEL_39;
  }
  v51 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  mlir::ArrayAttr::get(v51, (uint64_t)v41, v40);
  (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 40))();
  v44 = v71;
  if (v71 != v73)
    goto LABEL_53;
LABEL_13:
  if (v9 == (_DWORD)v14)
    return;
  if (!(_DWORD)v14)
    goto LABEL_24;
  v69 = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 48) + 32))();
  if (!v69)
    return;
  if (v14 < v9)
  {
    v22 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69);
    if (v23 >= v14)
      v14 = v14;
    else
      v14 = v23;
    if (v14)
    {
      v24 = v22;
      v25 = 8 * v14;
      v26 = (void **)v22;
      while (1)
      {
        v71 = *v26;
        if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v71))
          break;
        ++v26;
        v25 -= 8;
        if (!v25)
          goto LABEL_24;
      }
      v54 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
      mlir::ArrayAttr::get(v54, v24, v14);
      (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 48))();
      return;
    }
LABEL_24:
    (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 64))();
    return;
  }
  v33 = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69);
  v34 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69);
  v36 = (_BYTE *)(v34 + 8 * v35);
  v71 = v73;
  v72 = 0x600000000;
  v37 = v36 - v33;
  if ((unint64_t)(v36 - v33) < 0x31)
  {
    v38 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v37 >> 3, 8);
    v38 = v72;
  }
  if (v36 != v33)
  {
    memcpy((char *)v71 + 8 * v38, v33, v36 - v33);
    v38 = v72;
  }
  v45 = v38 + ((unint64_t)v37 >> 3);
  LODWORD(v72) = v45;
  v46 = v14;
  if ((_DWORD)v45 == (_DWORD)v14)
  {
LABEL_47:
    v47 = v71;
    v48 = (char *)v71 + 8 * v14;
    v49 = (uint64_t *)v71;
    goto LABEL_48;
  }
  if (v45 > v14)
  {
    LODWORD(v72) = v14;
    goto LABEL_47;
  }
  v62 = v14 - v45;
  if (HIDWORD(v72) < v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v14, 8);
    v45 = v72;
    if (!v62)
      goto LABEL_74;
  }
  else if (!v62)
  {
    goto LABEL_74;
  }
  v63 = (int64x2_t *)((char *)v71 + 8 * v45);
  v64 = (unint64_t *)v63;
  v65 = v62;
  if (v62 < 4)
    goto LABEL_83;
  v64 = (unint64_t *)v63 + (v62 & 0xFFFFFFFFFFFFFFFCLL);
  v65 = v62 & 3;
  v66 = vdupq_n_s64(v16);
  v67 = v63 + 1;
  v68 = v62 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v67[-1] = v66;
    *v67 = v66;
    v67 += 2;
    v68 -= 4;
  }
  while (v68);
  if (v62 != (v62 & 0xFFFFFFFFFFFFFFFCLL))
  {
LABEL_83:
    do
    {
      *v64++ = v16;
      --v65;
    }
    while (v65);
  }
LABEL_74:
  v46 = (v45 + v62);
  LODWORD(v72) = v45 + v62;
  if (!((_DWORD)v45 + (_DWORD)v62))
  {
LABEL_50:
    (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 64))();
    v50 = v71;
    if (v71 == v73)
      return;
LABEL_55:
    free(v50);
    return;
  }
  v47 = v71;
  v48 = (char *)v71 + 8 * v46;
  v49 = (uint64_t *)v71;
LABEL_48:
  while (1)
  {
    v70 = *v49;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v70))
      break;
    if (++v49 == (uint64_t *)v48)
      goto LABEL_50;
  }
  v52 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  mlir::ArrayAttr::get(v52, (uint64_t)v47, v46);
  (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 48))();
  v50 = v71;
  if (v71 != v73)
    goto LABEL_55;
}

uint64_t mlir::function_interface_impl::parseFunctionSignature(char *a1, char a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;

  v17 = a2;
  *a4 = 0;
  v13 = a4;
  v14 = (uint64_t)a1;
  v15 = &v17;
  v16 = a3;
  if (!(*(unsigned __int8 (**)(char *, uint64_t, uint64_t (*)(uint64_t), _BYTE **, _QWORD, _QWORD))(*(_QWORD *)a1 + 360))(a1, 1, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseFunctionArgumentList(mlir::OpAsmParser &,BOOL,llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,BOOL &)::$_0>, &v13, 0, 0))return 0;
  if (!(*(unsigned __int8 (**)(char *))(*(_QWORD *)a1 + 64))(a1))
    return 1;
  if ((*(unsigned __int8 (**)(char *))(*(_QWORD *)a1 + 272))(a1))
  {
    if ((*(unsigned __int8 (**)(char *))(*(_QWORD *)a1 + 288))(a1))
      return 1;
    v13 = (_BYTE *)a5;
    v14 = a6;
    v15 = a1;
    if ((*(unsigned __int8 (**)(char *, _QWORD, uint64_t (*)(uint64_t *), _BYTE **, _QWORD, _QWORD))(*(_QWORD *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseFunctionResultList(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::Type> &,llvm::SmallVectorImpl<mlir::DictionaryAttr> &)::$_0>, &v13, 0, 0))
    {
      return (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 280))(a1);
    }
    return 0;
  }
  v13 = 0;
  if (!(*(unsigned __int8 (**)(char *, _BYTE **))(*(_QWORD *)a1 + 504))(a1, &v13))
    return 0;
  v10 = v13;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  v12 = *(unsigned int *)(a6 + 8);
  if (v12 >= *(_DWORD *)(a6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), v12 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a6 + 8 * *(unsigned int *)(a6 + 8)) = 0;
    LODWORD(v12) = *(_DWORD *)(a6 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v12) = 0;
  }
  *(_DWORD *)(a6 + 8) = v12 + 1;
  return 1;
}

void mlir::function_interface_impl::addArgAndResultAttrs(mlir::DictionaryAttr **a1, uint64_t a2, uint64_t *a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t DictionaryAttr;
  uint64_t ArrayAttr;
  uint64_t v21;
  uint64_t v22;
  void **i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[7];

  v29[6] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v14 = a3;
    v15 = 8 * a4;
    v16 = 8 * a4;
    v17 = (void **)a3;
    while (1)
    {
      v27 = *v17;
      if (v27)
      {
        if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v27))
          break;
      }
      ++v17;
      v16 -= 8;
      if (!v16)
        goto LABEL_15;
    }
    LODWORD(v18) = 0;
    v27 = v29;
    v28 = 0x600000000;
    do
    {
      DictionaryAttr = *v14;
      if (!*v14)
      {
        DictionaryAttr = mlir::Builder::getDictionaryAttr(a1, 0, 0);
        LODWORD(v18) = v28;
      }
      if (v18 >= HIDWORD(v28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v18 + 1, 8);
        LODWORD(v18) = v28;
      }
      *((_QWORD *)v27 + v18) = DictionaryAttr;
      v18 = (v28 + 1);
      LODWORD(v28) = v28 + 1;
      ++v14;
      v15 -= 8;
    }
    while (v15);
    ArrayAttr = mlir::Builder::getArrayAttr(a1, (uint64_t)v27, v18);
    if (v27 != v29)
      free(v27);
    ZinMirCacheTensors::ZinMirCacheTensors(&v27, a7, ArrayAttr);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v27, v28);
  }
LABEL_15:
  if (a6)
  {
    v21 = 8 * a6;
    v22 = 8 * a6;
    for (i = a5; ; ++i)
    {
      v27 = *i;
      if (v27)
      {
        if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v27))
          break;
      }
      v22 -= 8;
      if (!v22)
        return;
    }
    LODWORD(v24) = 0;
    v27 = v29;
    v28 = 0x600000000;
    do
    {
      v25 = (uint64_t)*a5;
      if (!*a5)
      {
        v25 = mlir::Builder::getDictionaryAttr(a1, 0, 0);
        LODWORD(v24) = v28;
      }
      if (v24 >= HIDWORD(v28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v24 + 1, 8);
        LODWORD(v24) = v28;
      }
      *((_QWORD *)v27 + v24) = v25;
      v24 = (v28 + 1);
      LODWORD(v28) = v28 + 1;
      ++a5;
      v21 -= 8;
    }
    while (v21);
    v26 = mlir::Builder::getArrayAttr(a1, (uint64_t)v27, v24);
    if (v27 != v29)
      free(v27);
    ZinMirCacheTensors::ZinMirCacheTensors(&v27, a8, v26);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v27, v28);
  }
}

uint64_t mlir::function_interface_impl::parseFunctionOp(mlir::AsmParser *a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **), uint64_t a6, uint64_t a7, uint64_t a8)
{
  mlir::DictionaryAttr **v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  const char *v27;
  uint64_t v28;
  const void ***v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void **p_src;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  const char *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned __int16 v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  int64_t v75;
  const char *AttrData;
  const char *v79[4];
  __int16 v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  const void **v87;
  const char *v88;
  uint64_t v89;
  __int16 v90;
  void *__src;
  uint64_t v92;
  _QWORD v93[2];
  __int16 v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unsigned int v100;
  unsigned int v101;
  _BYTE v102[96];
  void *v103;
  _QWORD *v104;
  void *__p;
  _QWORD *v106;
  char v107;
  void *v108;
  uint64_t v109;
  _BYTE v110[48];
  void *v111;
  uint64_t v112;
  _BYTE v113[48];
  void **v114;
  uint64_t v115;
  _BYTE v116[48];
  char *v117;
  uint64_t v118;
  _QWORD v119[10];

  v119[8] = *MEMORY[0x24BDAC8D0];
  v86 = a4;
  v117 = (char *)v119;
  v118 = 0x100000000;
  v114 = (void **)v116;
  v115 = 0x600000000;
  v111 = v113;
  v112 = 0x600000000;
  v13 = (mlir::DictionaryAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  mlir::impl::parseOptionalVisibilityKeyword((uint64_t)a1, a2 + 112);
  v85 = 0;
  if (!mlir::AsmParser::parseSymbolName(a1, (mlir::StringAttr *)&v85))
  {
    v17 = 0;
    goto LABEL_77;
  }
  mlir::NamedAttrList::append(a2 + 112, (uint64_t)"sym_name", 8, v85);
  v14 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  v84 = 0;
  if (!mlir::function_interface_impl::parseFunctionSignature((char *)a1, a3, (uint64_t)&v117, &v84, (uint64_t)&v111, (uint64_t)&v114))
  {
    v17 = 0;
    goto LABEL_77;
  }
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v108 = v110;
  v109 = 0x600000000;
  v15 = v118;
  if (v118 < 7)
  {
    v16 = 0;
    if (!(_DWORD)v118)
      goto LABEL_13;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v110, v118, 8);
    v15 = v118;
    v16 = v109;
    if (!(_DWORD)v118)
      goto LABEL_13;
  }
  v18 = (unint64_t)v15 << 6;
  v19 = (uint64_t *)(v117 + 32);
  do
  {
    v20 = *v19;
    if (v16 >= HIDWORD(v109))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v110, v16 + 1, 8);
      v16 = v109;
    }
    *((_QWORD *)v108 + v16) = v20;
    v16 = v109 + 1;
    LODWORD(v109) = v109 + 1;
    v19 += 8;
    v18 -= 64;
  }
  while (v18);
LABEL_13:
  v21 = a5(a6, v13, v108, v16, v111, v112, v84, &v81);
  if (!v21)
  {
    v90 = 257;
    (*(void (**)(void **__return_ptr, mlir::AsmParser *, uint64_t, const void ***))(*(_QWORD *)a1 + 24))(&v96, a1, v14, &v87);
    if (v96)
    {
      LODWORD(__src) = 3;
      v92 = (uint64_t)"failed to construct function type";
      v93[0] = 33;
      p_src = &__src;
      v42 = (char *)v99;
      if (v100 >= v101)
      {
        v72 = v100 + 1;
        if (v99 <= &__src && (char *)v99 + 24 * v100 > (char *)&__src)
        {
          v74 = (char *)&__src - (_BYTE *)v99;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v72, 24);
          v42 = (char *)v99;
          p_src = (void **)((char *)v99 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v72, 24);
          p_src = &__src;
          v42 = (char *)v99;
        }
      }
      v43 = &v42[24 * v100];
      v44 = *(_OWORD *)p_src;
      *((_QWORD *)v43 + 2) = p_src[2];
      *(_OWORD *)v43 = v44;
      ++v100;
    }
    v45 = HIBYTE(v83);
    if (v83 < 0)
      v45 = v82;
    if (v45)
      v46 = ": ";
    else
      v46 = &byte_207AF6795;
    v79[0] = v46;
    v47 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)&v96, v79);
    v48 = (uint64_t)v47;
    if (*v47)
    {
      v94 = 260;
      __src = &v81;
      mlir::Diagnostic::operator<<((uint64_t)(v47 + 1), (const void ***)&__src);
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v48);
    if (v96)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v96);
    if (!v107)
      goto LABEL_73;
    v49 = __p;
    if (__p)
    {
      v50 = v106;
      v51 = __p;
      if (v106 != __p)
      {
        do
          v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
        while (v50 != v49);
        v51 = __p;
      }
      v106 = v49;
      operator delete(v51);
    }
    v52 = v103;
    if (v103)
    {
      v53 = v104;
      v54 = v103;
      if (v104 != v103)
      {
        do
        {
          v56 = *--v53;
          v55 = v56;
          *v53 = 0;
          if (v56)
            MEMORY[0x20BD002D4](v55, 0x1000C8077774924);
        }
        while (v53 != v52);
        v54 = v103;
      }
      v104 = v52;
      operator delete(v54);
    }
    v57 = v99;
    if (v99 == v102)
      goto LABEL_73;
    goto LABEL_72;
  }
  v22 = v86;
  v23 = mlir::TypeAttr::get(v21);
  ZinMirCacheTensors::ZinMirCacheTensors(&v96, v22, v23);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v96, v97);
  __src = v93;
  v92 = 0x400000000;
  v95 = 4;
  v24 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **))(*(_QWORD *)a1 + 464))(a1, &__src))
  {
    v17 = 0;
    v57 = __src;
    if (__src == v93)
      goto LABEL_73;
    goto LABEL_72;
  }
  AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v86);
  v26 = v25;
  v27 = "sym_visibility";
  v28 = 14;
  if (mlir::NamedAttrList::get((uint64_t)&__src, "sym_visibility", 0xEuLL))
    goto LABEL_19;
  v27 = "sym_name";
  v28 = 8;
  if (mlir::NamedAttrList::get((uint64_t)&__src, "sym_name", 8uLL))
    goto LABEL_19;
  v27 = AttrData;
  if (mlir::NamedAttrList::get((uint64_t)&__src, AttrData, v26))
  {
    v28 = v26;
LABEL_19:
    v79[0] = "'";
    v80 = 259;
    (*(void (**)(void **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v96, a1, v24, v79);
    if (v96)
    {
      v90 = 261;
      v87 = (const void **)v27;
      v88 = (const char *)v28;
      mlir::Diagnostic::operator<<((uint64_t)&v97, &v87);
      if (v96)
      {
        LODWORD(v87) = 3;
        v88 = "' is an inferred attribute and should not be specified in the explicit attribute dictionary";
        v89 = 91;
        v29 = &v87;
        v30 = (char *)v99;
        if (v100 >= v101)
        {
          v73 = v100 + 1;
          if (v99 <= &v87 && (char *)v99 + 24 * v100 > (char *)&v87)
          {
            v75 = (char *)&v87 - (_BYTE *)v99;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v73, 24);
            v30 = (char *)v99;
            v29 = (const void ***)((char *)v99 + v75);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v73, 24);
            v29 = &v87;
            v30 = (char *)v99;
          }
        }
        v31 = &v30[24 * v100];
        v32 = *(_OWORD *)v29;
        *((_QWORD *)v31 + 2) = v29[2];
        *(_OWORD *)v31 = v32;
        ++v100;
      }
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v96);
    if (v96)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v96);
    if (v107)
    {
      v33 = __p;
      if (__p)
      {
        v34 = v106;
        v35 = __p;
        if (v106 != __p)
        {
          do
            v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          v35 = __p;
        }
        v106 = v33;
        operator delete(v35);
      }
      v36 = v103;
      if (v103)
      {
        v37 = v104;
        v38 = v103;
        if (v104 != v103)
        {
          do
          {
            v40 = *--v37;
            v39 = v40;
            *v37 = 0;
            if (v40)
              MEMORY[0x20BD002D4](v39, 0x1000C8077774924);
          }
          while (v37 != v36);
          v38 = v103;
        }
        v104 = v36;
        operator delete(v38);
      }
      if (v99 != v102)
        free(v99);
    }
    goto LABEL_71;
  }
  v59 = __src;
  v60 = v92;
  *(_QWORD *)(a2 + 192) = 0;
  v61 = *(unsigned int *)(a2 + 120);
  if (v61 + v60 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), v61 + v60, 16);
    LODWORD(v61) = *(_DWORD *)(a2 + 120);
  }
  if ((_DWORD)v60)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v61), v59, 16 * v60);
    LODWORD(v61) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v61 + v60;
  v62 = v114;
  v63 = v115;
  v96 = &v98;
  v97 = 0x600000000;
  if ((_DWORD)v118)
  {
    LODWORD(v64) = 0;
    v65 = (unint64_t)v118 << 6;
    v66 = (uint64_t *)(v117 + 40);
    do
    {
      v67 = *v66;
      if (v64 >= HIDWORD(v97))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, &v98, v64 + 1, 8);
        LODWORD(v64) = v97;
      }
      *((_QWORD *)v96 + v64) = v67;
      v64 = (v97 + 1);
      LODWORD(v97) = v97 + 1;
      v66 += 8;
      v65 -= 64;
    }
    while (v65);
    v68 = (uint64_t *)v96;
  }
  else
  {
    v64 = 0;
    v68 = &v98;
  }
  mlir::function_interface_impl::addArgAndResultAttrs(v13, a2, v68, v64, v62, v63, a7, a8);
  if (v96 != &v98)
    free(v96);
  v69 = (_QWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v70 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  v71 = (*(uint64_t (**)(mlir::AsmParser *, _QWORD *, char *, _QWORD, _QWORD))(*(_QWORD *)a1 + 752))(a1, v69, v117, v118, 0);
  if (v71 < 0x100u)
    goto LABEL_100;
  if (!(_BYTE)v71)
  {
    v17 = 0;
    goto LABEL_71;
  }
  if ((_QWORD *)*v69 != v69)
  {
LABEL_100:
    v17 = 1;
    goto LABEL_71;
  }
  v87 = (const void **)"expected non-empty function body";
  v90 = 259;
  (*(void (**)(void **__return_ptr, mlir::AsmParser *, uint64_t, const void ***))(*(_QWORD *)a1 + 24))(&v96, a1, v70, &v87);
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v96);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v96);
LABEL_71:
  v57 = __src;
  if (__src != v93)
LABEL_72:
    free(v57);
LABEL_73:
  if (v108 != v110)
    free(v108);
  if (SHIBYTE(v83) < 0)
    operator delete(v81);
LABEL_77:
  if (v111 != v113)
    free(v111);
  if (v114 != (void **)v116)
    free(v114);
  if (v117 != (char *)v119)
    free(v117);
  return v17;
}

llvm::raw_ostream *mlir::function_interface_impl::printFunctionSignature(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, char a6, _QWORD *a7, unint64_t a8)
{
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  uint64_t ArgAttrsAttr;
  uint64_t v20;
  uint64_t Value;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  llvm::raw_ostream *v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::raw_ostream *v41;
  _WORD *v42;
  llvm::raw_ostream *v43;
  uint64_t v44;
  llvm::raw_ostream *result;
  _BYTE *v46;
  llvm::raw_ostream *v47;
  _DWORD *v48;
  uint64_t ResAttrsAttr;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;

  v61[0] = a2;
  v61[1] = a3;
  v14 = *(unsigned int *)(a2 + 44);
  if ((v14 & 0x7FFFFF) != 0)
    v15 = (_QWORD *)(((a2 + 16 * ((v14 >> 23) & 1) + ((v14 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *(unsigned int *)(a2 + 40));
  else
    v15 = 0;
  v16 = (_QWORD *)*v15;
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 40);
    ArgAttrsAttr = mlir::FunctionOpInterface::getArgAttrsAttr((mlir::FunctionOpInterface *)v61);
    v60 = ArgAttrsAttr;
    v20 = a5;
    if (!(_DWORD)a5)
      goto LABEL_26;
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = 40;
    ArgAttrsAttr = mlir::FunctionOpInterface::getArgAttrsAttr((mlir::FunctionOpInterface *)v61);
    v60 = ArgAttrsAttr;
    v20 = a5;
    if (!(_DWORD)a5)
      goto LABEL_26;
  }
  if (v16 != v15)
  {
    if (ArgAttrsAttr)
    {
      v63 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
      v23 = v22;
    }
    else
    {
      v23 = 0;
      Value = 0;
    }
    v31 = v15[1];
    if (v31)
      v32 = v31 - 8;
    else
      v32 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, **(_QWORD **)(v32 + 48), Value, v23, 0);
    if (v20 == 1)
      goto LABEL_26;
    v35 = 1;
    while (1)
    {
      v41 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v42 = (_WORD *)*((_QWORD *)v41 + 4);
      if (*((_QWORD *)v41 + 3) - (_QWORD)v42 > 1uLL)
      {
        *v42 = 8236;
        *((_QWORD *)v41 + 4) += 2;
        if (!v60)
          goto LABEL_39;
      }
      else
      {
        llvm::raw_ostream::write(v41, ", ", 2uLL);
        if (!v60)
        {
LABEL_39:
          v38 = 0;
          v36 = 0;
          goto LABEL_33;
        }
      }
      v63 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60) + 8 * v35);
      v36 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
      v38 = v37;
LABEL_33:
      v39 = v15[1];
      if (v39)
        v40 = v39 - 8;
      else
        v40 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, *(_QWORD *)(*(_QWORD *)(v40 + 48) + 8 * v35++), v36, v38, 0);
      if (v20 == v35)
        goto LABEL_26;
    }
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *a4);
  if (v60)
  {
    v63 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
    v24 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 192))(a1, v24, v25, 0, 0);
  }
  if (v20 != 1)
  {
    for (i = 1; i != v20; ++i)
    {
      v27 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 >= 2uLL)
      {
        *v28 = 8236;
        *((_QWORD *)v27 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v27, ", ", 2uLL);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a4[i]);
      if (v60)
      {
        v63 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60) + 8 * i);
        v29 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 192))(a1, v29, v30, 0, 0);
      }
    }
  }
LABEL_26:
  if ((a6 & 1) != 0)
  {
    if (a5)
    {
      v33 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v34 = (_WORD *)*((_QWORD *)v33 + 4);
      if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 1uLL)
      {
        *v34 = 8236;
        *((_QWORD *)v33 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v33, ", ", 2uLL);
      }
    }
    v43 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v44 = *((_QWORD *)v43 + 4);
    if ((unint64_t)(*((_QWORD *)v43 + 3) - v44) > 2)
    {
      *(_BYTE *)(v44 + 2) = 46;
      *(_WORD *)v44 = 11822;
      *((_QWORD *)v43 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v43, "...", 3uLL);
    }
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v46 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v46 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 41);
    if (!a8)
      return result;
  }
  else
  {
    *((_QWORD *)result + 4) = v46 + 1;
    *v46 = 41;
    if (!a8)
      return result;
  }
  v47 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v48 = (_DWORD *)*((_QWORD *)v47 + 4);
  if (*((_QWORD *)v47 + 3) - (_QWORD)v48 > 3uLL)
  {
    *v48 = 540945696;
    *((_QWORD *)v47 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v47, " -> ", 4uLL);
  }
  ResAttrsAttr = mlir::FunctionOpInterface::getResAttrsAttr((mlir::FunctionOpInterface *)v61);
  v62 = ResAttrsAttr;
  v50 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (a8 > 1
    || *(_UNKNOWN **)(*(_QWORD *)*a7 + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id
    || ResAttrsAttr
    && (v63 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
        mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v63)))
  {
    v51 = (_BYTE *)*((_QWORD *)v50 + 4);
    if ((unint64_t)v51 >= *((_QWORD *)v50 + 3))
    {
      llvm::raw_ostream::write(v50, 40);
    }
    else
    {
      *((_QWORD *)v50 + 4) = v51 + 1;
      *v51 = 40;
    }
    v52 = 1;
  }
  else
  {
    v52 = 0;
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *a7);
  if (v62)
  {
    v63 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62);
    v53 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
    result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 192))(a1, v53, v54, 0, 0);
  }
  if (a8 != 1)
  {
    v56 = 1;
    do
    {
      v57 = (_WORD *)*((_QWORD *)v50 + 4);
      if (*((_QWORD *)v50 + 3) - (_QWORD)v57 > 1uLL)
      {
        *v57 = 8236;
        *((_QWORD *)v50 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v50, ", ", 2uLL);
      }
      result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a7[v56]);
      if (v62)
      {
        v63 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62) + 8 * v56);
        v58 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
        result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 192))(a1, v58, v59, 0, 0);
      }
      ++v56;
    }
    while (a8 != v56);
  }
  if (v52)
  {
    v55 = (_BYTE *)*((_QWORD *)v50 + 4);
    if ((unint64_t)v55 >= *((_QWORD *)v50 + 3))
    {
      return llvm::raw_ostream::write(v50, 41);
    }
    else
    {
      *((_QWORD *)v50 + 4) = v55 + 1;
      *v55 = 41;
    }
  }
  return result;
}

void mlir::function_interface_impl::printFunctionAttributes(uint64_t a1, _BYTE *a2, const void *a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  size_t v10;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v13;
  unint64_t AttrDictionary;
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v17[0] = "sym_name";
  v17[1] = 8;
  v16 = 0x800000001;
  v8 = ((16 * a4) >> 4) + 1;
  if (v8 < 9)
  {
    v9 = 1;
    v10 = 16 * a4;
    if (!a4)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v8, 16);
  v9 = v16;
  v10 = 16 * a4;
  if (a4)
  {
LABEL_5:
    memcpy((char *)v15 + 16 * v9, a3, v10);
    v9 = v16;
  }
LABEL_6:
  LODWORD(v16) = v9 + (v10 >> 4);
  if (a2[47])
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 200))(a1, Value, v13, v15, v16);
  if (v15 != v17)
    free(v15);
}

void mlir::function_interface_impl::printFunctionOp(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t InherentAttr;
  char v14;
  uint64_t v15;
  uint64_t AttrData;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  uint64_t v21;
  char v22;
  void *v23;
  BOOL v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  size_t v28;
  llvm::raw_ostream *v29;
  void *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  _QWORD *ArgumentTypes;
  uint64_t v34;
  uint64_t v35;
  _QWORD *ResultTypes;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[9];

  v49[8] = *MEMORY[0x24BDAC8D0];
  v47 = a2;
  v48 = a3;
  v45 = a8;
  v46 = a7;
  if (*(_BYTE *)(a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"sym_name", 8);
    if (v14)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_8:
      v15 = 0;
      goto LABEL_9;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "sym_name", 8uLL);
  if (!InherentAttr)
    goto LABEL_8;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    v15 = InherentAttr;
  else
    v15 = 0;
LABEL_9:
  v49[0] = v15;
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v49);
  v18 = v17;
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
    if (!*(_BYTE *)(a2 + 47))
    {
LABEL_14:
      v21 = mlir::DictionaryAttr::get(a2 + 56, "sym_visibility", 0xEuLL);
      goto LABEL_15;
    }
  }
  else
  {
    *((_QWORD *)v19 + 4) = v20 + 1;
    *v20 = 32;
    if (!*(_BYTE *)(a2 + 47))
      goto LABEL_14;
  }
  v21 = mlir::Operation::getInherentAttr(a2, (uint64_t)"sym_visibility", 14);
  if (!v22)
    goto LABEL_14;
LABEL_15:
  if (v21)
  {
    v23 = *(void **)(*(_QWORD *)v21 + 136);
    v24 = v23 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
    v25 = v23 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id ? v21 : 0;
    v49[0] = v25;
    if (v24)
    {
      v26 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v49);
      v28 = v27;
      v29 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v30 = (void *)*((_QWORD *)v29 + 4);
      if (v28 <= *((_QWORD *)v29 + 3) - (_QWORD)v30)
      {
        if (v28)
        {
          memcpy(v30, v26, v28);
          *((_QWORD *)v29 + 4) += v28;
        }
      }
      else
      {
        llvm::raw_ostream::write(v29, (const char *)v26, v28);
      }
      v31 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v32 = (_BYTE *)*((_QWORD *)v31 + 4);
      if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
      {
        llvm::raw_ostream::write(v31, 32);
      }
      else
      {
        *((_QWORD *)v31 + 4) = v32 + 1;
        *v32 = 32;
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, AttrData, v18);
  ArgumentTypes = (_QWORD *)mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v47);
  v35 = v34;
  ResultTypes = (_QWORD *)mlir::FunctionOpInterface::getResultTypes((mlir::FunctionOpInterface *)&v47);
  mlir::function_interface_impl::printFunctionSignature(a1, v47, v48, ArgumentTypes, v35, a4, ResultTypes, v37);
  v38 = (_BYTE *)v47;
  v49[0] = "sym_visibility";
  v49[1] = 14;
  v49[2] = a5;
  v49[3] = a6;
  v49[4] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v46);
  v49[5] = v39;
  v49[6] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v45);
  v49[7] = v40;
  mlir::function_interface_impl::printFunctionAttributes(a1, v38, v49, 4);
  v41 = *(unsigned int *)(v47 + 44);
  if ((v41 & 0x7FFFFF) != 0)
  {
    v42 = (_QWORD *)(((v47 + 16 * ((v41 >> 23) & 1) + ((v41 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *(unsigned int *)(v47 + 40));
    if ((_QWORD *)*v42 == v42)
      return;
  }
  else
  {
    v42 = 0;
    if (!MEMORY[0])
      return;
  }
  v43 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v44 = (_BYTE *)*((_QWORD *)v43 + 4);
  if ((unint64_t)v44 >= *((_QWORD *)v43 + 3))
  {
    llvm::raw_ostream::write(v43, 32);
  }
  else
  {
    *((_QWORD *)v43 + 4) = v44 + 1;
    *v44 = 32;
  }
  (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 224))(a1, v42, 0, 1, 0);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseFunctionArgumentList(mlir::OpAsmParser &,BOOL,llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,BOOL &)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  mlir::MLIRContext *Context;
  unint64_t v36;
  char *v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t *v43;
  unint64_t v44;
  BOOL v45;
  char *v46;
  _QWORD v47[4];
  __int16 v48;
  _QWORD v49[4];
  uint64_t v50;
  unint64_t Dictionary;
  _BYTE v52[16];
  void *v53[2];
  uint64_t v54;
  void *v55;
  _QWORD v56[12];
  void *v57;
  _QWORD *v58;
  void *__p;
  _QWORD *v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (**(_BYTE **)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v49[0] = "variadic arguments must be in the end of the argument list";
    LOWORD(v50) = 259;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v2 + 24))(v53, v2, v3, v49);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (v61)
    {
      v5 = __p;
      if (__p)
      {
        v6 = v60;
        v7 = __p;
        if (v60 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v60 = v5;
        operator delete(v7);
      }
      v8 = v57;
      if (!v57)
        goto LABEL_55;
      v9 = v58;
      v10 = v57;
      if (v58 == v57)
      {
LABEL_54:
        v58 = v8;
        operator delete(v10);
LABEL_55:
        if (v55 != v56)
          free(v55);
        return v4;
      }
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x20BD002D4](v11, 0x1000C8077774924);
      }
      while (v9 != v8);
LABEL_53:
      v10 = v57;
      goto LABEL_54;
    }
    return v4;
  }
  if (**(_BYTE **)(a1 + 16)
    && (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 336))(*(_QWORD *)(a1 + 8)))
  {
    v13 = *(_BYTE **)a1;
    v4 = 1;
    *v13 = 1;
    return v4;
  }
  memset(v49, 0, 24);
  v52[8] = 0;
  v50 = 0;
  Dictionary = 0;
  v52[0] = 0;
  v14 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 728))(*(_QWORD *)(a1 + 8), v49, 1, 1);
  if (v14 >= 0x100u)
  {
    if ((_BYTE)v14)
    {
      v26 = *(_QWORD *)(a1 + 24);
      v27 = *(unsigned int *)(v26 + 8);
      if ((_DWORD)v27 && !*(_QWORD *)(*(_QWORD *)v26 + (v27 << 6) - 48))
      {
        v28 = *(_QWORD *)(a1 + 8);
        v47[0] = "expected type instead of SSA identifier";
        v48 = 259;
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v28 + 24))(v53, v28, v49[0], v47);
        v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
        if (v53[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
        if (v61)
        {
          v29 = __p;
          if (__p)
          {
            v30 = v60;
            v31 = __p;
            if (v60 != __p)
            {
              do
                v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
              while (v30 != v29);
              v31 = __p;
            }
            v60 = v29;
            operator delete(v31);
          }
          v8 = v57;
          if (!v57)
            goto LABEL_55;
          v32 = v58;
          v10 = v57;
          if (v58 == v57)
            goto LABEL_54;
          do
          {
            v34 = *--v32;
            v33 = v34;
            *v32 = 0;
            if (v34)
              MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
          }
          while (v32 != v8);
          goto LABEL_53;
        }
        return v4;
      }
LABEL_63:
      v36 = *(_QWORD *)v26;
      v37 = (char *)v49;
      if (v27 >= *(_DWORD *)(v26 + 12))
      {
        v43 = (unint64_t *)v26;
        v44 = v27 + 1;
        v45 = v36 + ((unint64_t)v27 << 6) > (unint64_t)v49;
        if (v36 <= (unint64_t)v49 && v45)
        {
          v46 = (char *)v49 - v36;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v26, (void *)(v26 + 16), v44, 64);
          v26 = (uint64_t)v43;
          v36 = *v43;
          v37 = &v46[*v43];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v26, (void *)(v26 + 16), v44, 64);
          v26 = (uint64_t)v43;
          v36 = *v43;
          v37 = (char *)v49;
        }
      }
      v38 = (_OWORD *)(v36 + ((unint64_t)*(unsigned int *)(v26 + 8) << 6));
      v39 = *(_OWORD *)v37;
      v40 = *((_OWORD *)v37 + 1);
      v41 = *((_OWORD *)v37 + 3);
      v38[2] = *((_OWORD *)v37 + 2);
      v38[3] = v41;
      *v38 = v39;
      v38[1] = v40;
      ++*(_DWORD *)(v26 + 8);
      return 1;
    }
    return 0;
  }
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v49[0] = v15;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(unsigned int *)(v16 + 8);
  if (!(_DWORD)v17 || !*(_QWORD *)(*(_QWORD *)v16 + (v17 << 6) - 48))
  {
    v53[0] = &v54;
    v53[1] = (void *)0x400000000;
    v56[5] = 4;
    if ((*(unsigned __int8 (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 504))(*(_QWORD *)(a1 + 8), &v50)&& (*(unsigned __int8 (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 456))(*(_QWORD *)(a1 + 8), v53)&& (*(unsigned __int8 (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 624))(*(_QWORD *)(a1 + 8), v52))
    {
      Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(*(mlir::AsmParser **)(a1 + 8));
      Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v53, Context);
      if (v53[0] != &v54)
        free(v53[0]);
      v26 = *(_QWORD *)(a1 + 24);
      LODWORD(v27) = *(_DWORD *)(v26 + 8);
      goto LABEL_63;
    }
    if (v53[0] != &v54)
      free(v53[0]);
    return 0;
  }
  v18 = v15;
  v19 = *(_QWORD *)(a1 + 8);
  v47[0] = "expected SSA identifier";
  v48 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v19 + 24))(v53, v19, v18, v47);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  if (v61)
  {
    v20 = __p;
    if (__p)
    {
      v21 = v60;
      v22 = __p;
      if (v60 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v60 = v20;
      operator delete(v22);
    }
    v8 = v57;
    if (!v57)
      goto LABEL_55;
    v23 = v58;
    v10 = v57;
    if (v58 == v57)
      goto LABEL_54;
    do
    {
      v25 = *--v23;
      v24 = v25;
      *v23 = 0;
      if (v25)
        MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
    }
    while (v23 != v8);
    goto LABEL_53;
  }
  return v4;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseFunctionResultList(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::Type> &,llvm::SmallVectorImpl<mlir::DictionaryAttr> &)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  mlir::MLIRContext *Context;
  uint64_t v7;
  void *v8;
  void *v10[2];
  _QWORD v11[10];

  v11[9] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(unsigned int *)(*a1 + 8);
  if (v3 >= *(_DWORD *)(*a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v2 + 16), v3 + 1, 8);
    *(_QWORD *)(*(_QWORD *)v2 + 8 * (*(_DWORD *)(v2 + 8))++) = 0;
    v4 = a1[1];
    v5 = *(unsigned int *)(v4 + 8);
    if (v5 < *(_DWORD *)(v4 + 12))
      goto LABEL_3;
LABEL_12:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v5 + 1, 8);
    *(_QWORD *)(*(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 8)) = 0;
    LODWORD(v5) = *(_DWORD *)(v4 + 8);
    goto LABEL_4;
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v3) = 0;
  *(_DWORD *)(v2 + 8) = v3 + 1;
  v4 = a1[1];
  v5 = *(unsigned int *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
    goto LABEL_12;
LABEL_3:
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = 0;
LABEL_4:
  *(_DWORD *)(v4 + 8) = v5 + 1;
  v10[0] = v11;
  v10[1] = (void *)0x400000000;
  v11[8] = 4;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 504))(a1[2], *(_QWORD *)*a1 + 8 * *(unsigned int *)(*a1 + 8) - 8)&& (*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a1[2] + 456))(a1[2], v10))
  {
    Context = (mlir::MLIRContext *)mlir::AsmParser::getContext((mlir::AsmParser *)a1[2]);
    *(_QWORD *)(*(_QWORD *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v10, Context);
    v7 = 1;
    v8 = v10[0];
    if (v10[0] == v11)
      return v7;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = v10[0];
  if (v10[0] != v11)
LABEL_9:
    free(v8);
  return v7;
}

uint64_t mlir::AsmParser::parseSymbolName(mlir::AsmParser *this, mlir::StringAttr *a2)
{
  uint64_t v3;
  uint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20[32];
  __int16 v21;
  int v22;
  const char *v23;
  uint64_t v24;
  _QWORD v25[3];
  void *v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE v29[96];
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, mlir::StringAttr *))(*(_QWORD *)this + 496))(this, a2))
    return 1;
  v5 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)this + 40))(this);
  v21 = 257;
  (*(void (**)(_QWORD *__return_ptr, mlir::AsmParser *, uint64_t, char *))(*(_QWORD *)this + 24))(v25, this, v5, v20);
  if (v25[0])
  {
    v22 = 3;
    v23 = "expected valid '@'-identifier for symbol name";
    v24 = 45;
    v6 = &v22;
    v7 = (char *)v26;
    if (v27 >= v28)
    {
      v18 = v27 + 1;
      if (v26 <= &v22 && (char *)v26 + 24 * v27 > (char *)&v22)
      {
        v19 = (char *)&v22 - (_BYTE *)v26;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v18, 24);
        v7 = (char *)v26;
        v6 = (int *)((char *)v26 + v19);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v18, 24);
        v6 = &v22;
        v7 = (char *)v26;
      }
    }
    v8 = &v7[24 * v27];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v27;
  }
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
  if (v25[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
  if (v34)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v33;
      v12 = __p;
      if (v33 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v33 = v10;
      operator delete(v12);
    }
    v13 = v30;
    if (v30)
    {
      v14 = v31;
      v15 = v30;
      if (v31 != v30)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v30;
      }
      v31 = v13;
      operator delete(v15);
    }
    if (v26 != v29)
      free(v26);
  }
  return v3;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties]";
        v15 = 106;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[77];
    return a1[32];
  }
  return result;
}

void mlir::ub::PoisonOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;

  if (a4)
  {
    v9 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v9 = a4;
    v9[1] = a5;
  }
  v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v10) = a3;
  ++*(_DWORD *)(a2 + 72);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::AttributeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::AttributeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  char *buffer;
  uint64_t v10;
  _QWORD *v11;
  void (**v12)(_QWORD, _QWORD *);
  void (*v13)(_QWORD, _QWORD *);
  _QWORD *v14;

  a2[10] += 8;
  v4 = *a2;
  v5 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v6 = v5 + 8 > a2[1] - *a2;
  else
    v6 = 1;
  if (v6)
  {
    v7 = *((_DWORD *)a2 + 6) >> 7;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    v10 = *((unsigned int *)a2 + 6);
    if (v10 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v10 + 1, 8);
      LODWORD(v10) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v10) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v8];
    v11 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *v11 = 0;
    *a2 = (uint64_t)(v11 + 1);
    v12 = *a1;
    v13 = **a1;
    if (v13)
      goto LABEL_13;
  }
  else
  {
    v11 = (_QWORD *)(v4 + v5);
    v14 = (_QWORD *)(v4 + v5);
    *v14 = 0;
    *a2 = (uint64_t)(v14 + 1);
    v12 = *a1;
    v13 = **a1;
    if (v13)
LABEL_13:
      v13(v12[1], v11);
  }
  return v11;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::ub::detail::PoisonOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t mlir::AffineExpr::getContext(mlir::AffineExpr *this)
{
  return **(_QWORD **)this;
}

uint64_t mlir::AffineExpr::getKind(mlir::AffineExpr *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 8);
}

_QWORD *mlir::AffineExpr::walk(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (!v3)
  {
    v9 = 0;
    goto LABEL_5;
  }
  if (v3 != a2)
  {
    v9 = (_QWORD *)a2[3];
    a2[3] = 0;
    goto LABEL_7;
  }
  v9 = v8;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
  v3 = v9;
  if (!v9)
  {
LABEL_5:
    v11 = 0;
    goto LABEL_10;
  }
LABEL_7:
  if (v3 == v8)
  {
    v11 = v10;
    (*(void (**)(_QWORD *, _BYTE *))(v8[0] + 24))(v8, v10);
  }
  else
  {
    v11 = v3;
    v9 = 0;
  }
LABEL_10:
  mlir::AffineExprVisitor<mlir::AffineExpr::walk(std::function<void ()(mlir::AffineExpr)>)::AffineExprWalker,void>::walkPostOrder((uint64_t)v10, *a1);
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_15:
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void mlir::AffineExprVisitor<mlir::AffineExpr::walk(std::function<void ()(mlir::AffineExpr)>)::AffineExprWalker,void>::walkPostOrder(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20729C488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  ((void (*)(uint64_t, _QWORD))mlir::AffineExprVisitor<mlir::AffineExpr::walk(std::function<void ()(mlir::AffineExpr)>)::AffineExprWalker,void>::walkPostOrder)(v1, *(_QWORD *)(v0 + 16));
  ((void (*)(uint64_t, _QWORD))mlir::AffineExprVisitor<mlir::AffineExpr::walk(std::function<void ()(mlir::AffineExpr)>)::AffineExprWalker,void>::walkPostOrder)(v1, *(_QWORD *)(v0 + 24));
  v2 = *(_QWORD *)(v1 + 24);
  v5 = v0;
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return ((uint64_t (*)(uint64_t))mlir::getAffineBinaryOpExpr)(v4);
}

uint64_t mlir::getAffineBinaryOpExpr(int a1, mlir::MLIRContext **a2, uint64_t a3)
{
  uint64_t result;
  mlir::MLIRContext **v4;

  v4 = a2;
  switch(a1)
  {
    case 0:
      result = mlir::AffineExpr::operator+((unint64_t *)&v4, a3);
      break;
    case 1:
      result = mlir::AffineExpr::operator*((unint64_t *)&v4, a3);
      break;
    case 3:
      result = mlir::AffineExpr::floorDiv(&v4, a3);
      break;
    case 4:
      result = mlir::AffineExpr::ceilDiv((unint64_t *)&v4, a3);
      break;
    default:
      result = mlir::AffineExpr::operator%((unint64_t *)&v4, a3);
      break;
  }
  return result;
}

uint64_t mlir::AffineExpr::operator+(unint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v10;
  char v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  mlir::MLIRContext **v19;
  mlir::MLIRContext **v20;
  unsigned __int8 **v21;
  uint64_t v22;
  unsigned __int8 **AffineUniquer;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  mlir::MLIRContext *v43;
  mlir::MLIRContext **v44;

  v40 = a2;
  v41 = a2;
  v3 = *a1;
  v42 = v3;
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 == 5)
    v5 = v3;
  else
    v5 = 0;
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 == 5)
    v7 = a2;
  else
    v7 = 0;
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (v4 == 5
      || (mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v42), v10)
      && (mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v41), (v11 & 1) == 0))
    {
      v3 = mlir::AffineExpr::operator+(&v41, v3);
      if (v3)
        return v3;
      goto LABEL_29;
    }
    if (v7)
    {
      v12 = *(_QWORD *)(v7 + 16);
      if (!v12)
        return v3;
      if (v4 <= 4 && v3 != 0)
      {
        v14 = *(_DWORD *)(v3 + 8);
        if (!v14)
        {
          v15 = *(_QWORD *)(v3 + 24);
          v16 = 1;
          v17 = 1;
          if (v15)
          {
            v18 = v3;
            v19 = (mlir::MLIRContext **)v3;
            if (*(_DWORD *)(v15 + 8) == 5)
            {
              v44 = *(mlir::MLIRContext ***)(v3 + 16);
              v3 = mlir::AffineExpr::operator+(&v44, v12 + *(_QWORD *)(v15 + 16));
              if (v3)
                return v3;
LABEL_29:
              v3 = *a1;
LABEL_30:
              AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(*(mlir::MLIRContext **)v3);
              LODWORD(v44) = 0;
              return mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(AffineUniquer, 0, 0, &v44, a1, &v40);
            }
LABEL_48:
            if (v6 >= 5)
              v27 = 0;
            else
              v27 = a2;
            if (!v27)
              goto LABEL_57;
LABEL_52:
            if (*(_DWORD *)(v27 + 8) == 1)
            {
              v28 = *(_QWORD *)(v27 + 24);
              if (v28 && *(_DWORD *)(v28 + 8) == 5)
              {
                v30 = *(_QWORD *)(v28 + 16);
                if (v19 != *(mlir::MLIRContext ***)(v27 + 16))
                  goto LABEL_58;
                goto LABEL_74;
              }
            }
LABEL_57:
            v30 = 1;
            if (v19 != (mlir::MLIRContext **)a2)
            {
LABEL_58:
              if (v17)
              {
                if (!*(_DWORD *)(v18 + 8))
                {
                  v37 = *(_QWORD *)(v18 + 24);
                  if (v37)
                  {
                    if (*(_DWORD *)(v37 + 8) == 5)
                    {
                      v43 = *(mlir::MLIRContext **)(v18 + 16);
                      v44 = (mlir::MLIRContext **)mlir::AffineExpr::operator+(&v43, a2);
                      v3 = mlir::AffineExpr::operator+(&v44, v37);
                      if (v3)
                        return v3;
                      goto LABEL_29;
                    }
                  }
                }
              }
              if (!v27)
                goto LABEL_30;
              v31 = *(_QWORD *)(v27 + 16);
              v32 = *(_QWORD *)(v27 + 24);
              v44 = (mlir::MLIRContext **)v32;
              if (*(int *)(v31 + 8) >= 5)
                v31 = 0;
              if (v32 && *(_DWORD *)(v32 + 8) == 5 && *(_QWORD *)(v32 + 16) == -1)
              {
                if (!v31)
                  goto LABEL_29;
                v33 = *(_DWORD *)(v31 + 8);
                if (v33 == 1)
                {
                  v38 = *(_QWORD *)(v31 + 16);
                  if (v38)
                    v39 = *(_DWORD *)(v38 + 8) == 3;
                  else
                    v39 = 0;
                  if (!v39)
                    goto LABEL_29;
                  v34 = *(_QWORD *)(v31 + 24);
                  if (*(_QWORD *)(v38 + 24) != v34 || v3 != *(_QWORD *)(v38 + 16))
                    goto LABEL_29;
                  goto LABEL_71;
                }
              }
              else
              {
                if (!v31)
                  goto LABEL_29;
                v33 = *(_DWORD *)(v31 + 8);
              }
              if (v33 != 3)
                goto LABEL_29;
              if (v3 != *(_QWORD *)(v31 + 16))
                goto LABEL_29;
              v34 = *(_QWORD *)(v31 + 24);
              if (v34 != mlir::AffineExpr::operator-((unint64_t *)&v44))
                goto LABEL_29;
LABEL_71:
              v3 = mlir::AffineExpr::operator%((unint64_t *)&v42, v34);
              if (v3)
                return v3;
              goto LABEL_29;
            }
LABEL_74:
            v43 = *(mlir::MLIRContext **)v3;
            v44 = (mlir::MLIRContext **)(v30 + v16);
            v35 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v43);
            v36 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v35, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v43, &v44);
            v44 = v19;
            v3 = mlir::AffineExpr::operator*((unint64_t *)&v44, v36);
            if (v3)
              return v3;
            goto LABEL_29;
          }
LABEL_80:
          v18 = v3;
          v19 = (mlir::MLIRContext **)v3;
          if (v6 >= 5)
            v27 = 0;
          else
            v27 = a2;
          if (!v27)
            goto LABEL_57;
          goto LABEL_52;
        }
        goto LABEL_38;
      }
    }
    else if (v4 <= 4 && v3 != 0)
    {
      v14 = *(_DWORD *)(v3 + 8);
LABEL_38:
      if (v14 == 1)
      {
        v26 = *(_QWORD *)(v3 + 24);
        v16 = 1;
        v17 = 1;
        if (v26)
        {
          v18 = v3;
          v19 = (mlir::MLIRContext **)v3;
          if (*(_DWORD *)(v26 + 8) == 5)
          {
            v16 = *(_QWORD *)(v26 + 16);
            v19 = *(mlir::MLIRContext ***)(v3 + 16);
            v17 = 1;
            v18 = v3;
            if (v6 >= 5)
              v27 = 0;
            else
              v27 = a2;
            if (!v27)
              goto LABEL_57;
            goto LABEL_52;
          }
          goto LABEL_48;
        }
        goto LABEL_80;
      }
      v17 = 1;
      v18 = v3;
LABEL_47:
      v16 = 1;
      v19 = (mlir::MLIRContext **)v3;
      goto LABEL_48;
    }
    v18 = 0;
    v17 = 0;
    goto LABEL_47;
  }
  v20 = (mlir::MLIRContext **)(*(_QWORD *)(v7 + 16) + *(_QWORD *)(v5 + 16));
  v43 = *(mlir::MLIRContext **)v3;
  v44 = v20;
  v21 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v43);
  v22 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v21, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v43, &v44);
  v3 = v22;
  if (!v22)
    goto LABEL_29;
  return v3;
}

uint64_t mlir::AffineExpr::operator*(unint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v9;
  uint64_t v10;
  uint64_t v12;
  mlir::MLIRContext **v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 **AffineUniquer;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  mlir::MLIRContext *v23;
  mlir::MLIRContext **v24;

  v21 = a2;
  v22 = a2;
  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 8);
  if (v4 == 5)
    v5 = *a1;
  else
    v5 = 0;
  if (*(_DWORD *)(a2 + 8) == 5)
    v6 = a2;
  else
    v6 = 0;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v22);
    if (v4 != 5 && (v9 & 1) != 0)
    {
      if (v6)
      {
        v10 = *(_QWORD *)(v6 + 16);
        if (!v10)
          return a2;
        if (v10 == 1)
          return v3;
        if (v4 != 1 || v3 == 0)
          goto LABEL_29;
        v12 = *(_QWORD *)(v3 + 24);
        if (v12 && *(_DWORD *)(v12 + 8) == 5)
        {
          v24 = *(mlir::MLIRContext ***)(v3 + 16);
          v3 = mlir::AffineExpr::operator*(&v24, v10 * *(_QWORD *)(v12 + 16));
          if (v3)
            return v3;
LABEL_28:
          v3 = *a1;
LABEL_29:
          AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(*(mlir::MLIRContext **)v3);
          LODWORD(v24) = 1;
          return mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(AffineUniquer, 0, 0, &v24, a1, &v21);
        }
      }
      else if (v4 != 1 || v3 == 0)
      {
        goto LABEL_29;
      }
      v19 = *(_QWORD *)(v3 + 24);
      if (v19)
        v20 = *(_DWORD *)(v19 + 8) == 5;
      else
        v20 = 0;
      if (!v20)
        goto LABEL_29;
      v23 = *(mlir::MLIRContext **)(v3 + 16);
      v24 = (mlir::MLIRContext **)mlir::AffineExpr::operator*(&v23, a2);
      v3 = mlir::AffineExpr::operator*(&v24, v19);
      if (v3)
        return v3;
      goto LABEL_28;
    }
    v3 = mlir::AffineExpr::operator*(&v22, v3);
    if (v3)
      return v3;
    goto LABEL_28;
  }
  v13 = (mlir::MLIRContext **)(*(_QWORD *)(v6 + 16) * *(_QWORD *)(v5 + 16));
  v23 = *(mlir::MLIRContext **)v3;
  v24 = v13;
  v14 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v23);
  v15 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v14, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v23, &v24);
  v3 = v15;
  if (!v15)
    goto LABEL_28;
  return v3;
}

uint64_t mlir::AffineExpr::floorDiv(mlir::MLIRContext ***a1, uint64_t a2)
{
  uint64_t v3;
  mlir::MLIRContext **v4;
  uint64_t v6;
  mlir::MLIRContext *v7;
  BOOL v8;
  uint64_t v9;
  mlir::MLIRContext **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **AffineUniquer;
  uint64_t v14;
  unsigned __int8 **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mlir::MLIRContext **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 **v25;
  uint64_t v27;
  uint64_t v28;
  mlir::MLIRContext **v29;
  mlir::MLIRContext **v30;
  uint64_t v31;

  v28 = a2;
  v3 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 2) == 5)
    v4 = *a1;
  else
    v4 = 0;
  if (!a2)
    goto LABEL_27;
  if (*(_DWORD *)(a2 + 8) != 5)
    goto LABEL_27;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 < 1)
    goto LABEL_27;
  if (v4)
  {
    v7 = v4[2];
    if (v7)
      v8 = (unint64_t)v7 >> 63 == (unint64_t)v6 >> 63;
    else
      v8 = 1;
    v9 = (uint64_t)v7 / v6;
    v10 = *(mlir::MLIRContext ***)v3;
    v11 = (uint64_t)~(unint64_t)v7 / v6;
    if (v8)
      v12 = v9;
    else
      v12 = ~v11;
    v30 = *(mlir::MLIRContext ***)v3;
    v31 = v12;
    AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer((mlir::MLIRContext *)v10);
    v14 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v30, &v31);
  }
  else
  {
    v30 = *(mlir::MLIRContext ***)a2;
    v31 = 1;
    v15 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer((mlir::MLIRContext *)v30);
    if (mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v15, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v30, &v31) == a2)return v3;
    v16 = *(_DWORD *)(v3 + 8);
    if (v16 > 4)
    {
LABEL_27:
      v25 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(**a1);
      LODWORD(v31) = 3;
      return mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(v25, 0, 0, &v31, (unint64_t *)a1, &v28);
    }
    if (v16)
    {
      if (v16 != 1)
        goto LABEL_27;
      v17 = *(_QWORD *)(v3 + 24);
      if (!v17)
        goto LABEL_27;
      if (*(_DWORD *)(v17 + 8) != 5)
        goto LABEL_27;
      v18 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(a2 + 16);
      if (v18 % v19)
        goto LABEL_27;
      v31 = *(_QWORD *)(v3 + 16);
      v14 = mlir::AffineExpr::operator*((mlir::MLIRContext ***)&v31, v18 / v19);
    }
    else
    {
      v20 = *(mlir::MLIRContext ***)(v3 + 16);
      v31 = (uint64_t)v20;
      mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v31);
      v22 = v21;
      v31 = *(_QWORD *)(v3 + 24);
      mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v31);
      v24 = *(_QWORD *)(a2 + 16);
      if (v22 % v24 && v23 % v24)
        goto LABEL_27;
      v30 = v20;
      v31 = mlir::AffineExpr::floorDiv(&v30, v24);
      v29 = *(mlir::MLIRContext ***)(v3 + 24);
      v27 = mlir::AffineExpr::floorDiv(&v29, *(_QWORD *)(a2 + 16));
      v14 = mlir::AffineExpr::operator+((unint64_t *)&v31, v27);
    }
  }
  v3 = v14;
  if (!v14)
    goto LABEL_27;
  return v3;
}

uint64_t mlir::AffineExpr::ceilDiv(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  mlir::MLIRContext *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned __int8 **AffineUniquer;
  uint64_t v21;
  mlir::MLIRContext **v22;
  mlir::MLIRContext *v23;
  uint64_t v24;

  v21 = a2;
  result = *a1;
  v4 = *(_DWORD *)(result + 8);
  if (v4 == 5)
    v5 = result;
  else
    v5 = 0;
  if (!a2)
    goto LABEL_23;
  if (*(_DWORD *)(a2 + 8) != 5)
    goto LABEL_23;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 < 1)
    goto LABEL_23;
  if (!v5)
  {
    if (v6 == 1)
      return result;
    if (v4 != 1
      || ((v15 = *(_QWORD *)(result + 24)) != 0 ? (v16 = *(_DWORD *)(v15 + 8) == 5) : (v16 = 0),
          !v16 || (v17 = *(_QWORD *)(v15 + 16), v17 % v6)))
    {
LABEL_23:
      AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(*(mlir::MLIRContext **)result);
      LODWORD(v24) = 4;
      return mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(AffineUniquer, 0, 0, &v24, a1, &v21);
    }
    v22 = *(mlir::MLIRContext ***)(result + 16);
    v23 = *v22;
    v24 = v17 / v6;
    v18 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v23);
    v19 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v18, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v23, &v24);
    result = mlir::AffineExpr::operator*((unint64_t *)&v22, v19);
    if (result)
      return result;
LABEL_22:
    result = *a1;
    goto LABEL_23;
  }
  v7 = *(_QWORD *)(v5 + 16);
  v8 = -v7;
  v9 = v7 < 1;
  v10 = (v7 - 1) / (unint64_t)v6 + 1;
  v11 = *(mlir::MLIRContext **)result;
  v12 = v8 / v6;
  if (v9)
    v13 = -(uint64_t)v12;
  else
    v13 = v10;
  v23 = v11;
  v24 = v13;
  v14 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v11);
  result = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v14, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v23, &v24);
  if (!result)
    goto LABEL_22;
  return result;
}

uint64_t mlir::AffineExpr::operator%(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  mlir::MLIRContext *v7;
  unsigned __int8 **AffineUniquer;
  uint64_t result;
  uint64_t v10;
  mlir::MLIRContext **v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unint64_t v20;
  mlir::MLIRContext *v21;
  mlir::MLIRContext **v22;

  v3 = *a1;
  v19 = a2;
  v20 = v3;
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 == 5)
    v5 = v3;
  else
    v5 = 0;
  if (!a2)
    goto LABEL_27;
  if (*(_DWORD *)(a2 + 8) != 5)
    goto LABEL_27;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 < 1)
    goto LABEL_27;
  if (v5)
  {
    v7 = *(mlir::MLIRContext **)v3;
    v22 = (mlir::MLIRContext **)((v6 & ((*(_QWORD *)(v5 + 16) % v6) >> 63)) + *(_QWORD *)(v5 + 16) % v6);
    goto LABEL_9;
  }
  mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v20);
  if (!(v10 % v6))
  {
    v7 = *(mlir::MLIRContext **)v3;
    v22 = 0;
LABEL_9:
    v21 = v7;
    AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v7);
    result = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v21, &v22);
    if (result)
      return result;
    goto LABEL_26;
  }
  if (v4 > 4)
    goto LABEL_27;
  if (v4 == 2)
  {
    v16 = *(_QWORD *)(v3 + 24);
    if (!v16)
      goto LABEL_27;
    if (*(_DWORD *)(v16 + 8) != 5)
      goto LABEL_27;
    v17 = *(_QWORD *)(v16 + 16);
    if (v17 < 1 || v17 % (unint64_t)v6)
      goto LABEL_27;
    v22 = *(mlir::MLIRContext ***)(v3 + 16);
  }
  else
  {
    if (v4)
      goto LABEL_27;
    v11 = *(mlir::MLIRContext ***)(v3 + 16);
    v22 = v11;
    mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v22);
    v13 = v12;
    v14 = *(mlir::MLIRContext ***)(v3 + 24);
    v22 = v14;
    mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v22);
    if (v13 % v6)
    {
      if (!(v15 % v6))
      {
        v22 = v11;
        goto LABEL_25;
      }
LABEL_27:
      v18 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(*(mlir::MLIRContext **)v3);
      LODWORD(v22) = 2;
      return mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(v18, 0, 0, &v22, a1, &v19);
    }
    v22 = v14;
  }
LABEL_25:
  result = mlir::AffineExpr::operator%(&v22, v6);
  if (!result)
  {
LABEL_26:
    v3 = *a1;
    goto LABEL_27;
  }
  return result;
}

void mlir::AffineExpr::replaceDimsAndSymbols(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20729CFE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  mlir::MLIRContext **v6;
  uint64_t v7;
  mlir::MLIRContext **v8;
  uint64_t v9;
  uint64_t result;
  int v12;
  uint64_t v13;
  mlir::MLIRContext **v14;
  mlir::MLIRContext **v15[11];

  v6 = *(mlir::MLIRContext ***)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v13 = v7;
  v14 = v6;
  v8 = (mlir::MLIRContext **)((uint64_t (*)(mlir::MLIRContext ***, uint64_t, uint64_t, uint64_t, uint64_t))mlir::AffineExpr::replaceDimsAndSymbols)(&v14, v5, v4, v3, v2);
  v9 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))mlir::AffineExpr::replaceDimsAndSymbols)(&v13, v5, v4, v3, v2);
  result = *v1;
  if (v6 != v8 || v7 != v9)
  {
    v12 = *(_DWORD *)(result + 8);
    v15[0] = v8;
    switch(v12)
    {
      case 0:
        result = mlir::AffineExpr::operator+((unint64_t *)v15, v9);
        break;
      case 1:
        result = mlir::AffineExpr::operator*((unint64_t *)v15, v9);
        break;
      case 3:
        result = mlir::AffineExpr::floorDiv(v15, v9);
        break;
      case 4:
        result = mlir::AffineExpr::ceilDiv((unint64_t *)v15, v9);
        break;
      default:
        result = mlir::AffineExpr::operator%((unint64_t *)v15, v9);
        break;
    }
  }
  return result;
}

uint64_t mlir::AffineDimExpr::getPosition(mlir::AffineDimExpr *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 16);
}

uint64_t mlir::AffineBinaryOpExpr::getLHS(mlir::AffineBinaryOpExpr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t mlir::AffineBinaryOpExpr::getRHS(mlir::AffineBinaryOpExpr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24);
}

uint64_t mlir::AffineExpr::shiftDims(mlir::MLIRContext ***this, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int i;
  mlir::MLIRContext *v9;
  unsigned __int8 **AffineUniquer;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  mlir::MLIRContext *v15;
  unsigned __int8 **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  mlir::MLIRContext *v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v25 = v27;
  v26 = 0x400000000;
  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      v9 = **this;
      v24 = i;
      v23 = v9;
      AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v9);
      v22 = 6;
      v11 = mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v23, &v22, &v24);
      v12 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 8);
        v12 = v26;
      }
      *((_QWORD *)v25 + v12) = v11;
      LODWORD(v26) = v26 + 1;
    }
  }
  v13 = a2 - a4;
  if (a2 > a4)
  {
    v14 = a4 + a3;
    do
    {
      v15 = **this;
      v24 = v14;
      v23 = v15;
      v16 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v15);
      v22 = 6;
      v17 = mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(v16, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v23, &v22, &v24);
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 8);
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17;
      LODWORD(v26) = v26 + 1;
      ++v14;
      --v13;
    }
    while (v13);
  }
  mlir::AffineExpr::replaceDimsAndSymbols((uint64_t)this);
  v20 = v19;
  if (v25 != v27)
    free(v25);
  return v20;
}

uint64_t mlir::getAffineDimExpr(mlir *this, mlir::MLIRContext *a2, mlir::MLIRContext *a3)
{
  unsigned __int8 **AffineUniquer;
  unsigned int v5;
  mlir::MLIRContext *v6;
  unsigned int v7;

  v7 = this;
  v6 = a2;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(a2);
  v5 = 6;
  return mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v6, &v5, &v7);
}

uint64_t mlir::AffineExpr::shiftSymbols(mlir::MLIRContext ***this, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int i;
  mlir::MLIRContext *v9;
  unsigned __int8 **AffineUniquer;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  mlir::MLIRContext *v15;
  unsigned __int8 **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  mlir::MLIRContext *v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v25 = v27;
  v26 = 0x400000000;
  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      v9 = **this;
      v24 = i;
      v23 = v9;
      AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v9);
      v22 = 7;
      v11 = mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v23, &v22, &v24);
      v12 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 8);
        v12 = v26;
      }
      *((_QWORD *)v25 + v12) = v11;
      LODWORD(v26) = v26 + 1;
    }
  }
  v13 = a2 - a4;
  if (a2 > a4)
  {
    v14 = a4 + a3;
    do
    {
      v15 = **this;
      v24 = v14;
      v23 = v15;
      v16 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v15);
      v22 = 7;
      v17 = mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(v16, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v23, &v22, &v24);
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 8);
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17;
      LODWORD(v26) = v26 + 1;
      ++v14;
      --v13;
    }
    while (v13);
  }
  mlir::AffineExpr::replaceDimsAndSymbols((uint64_t)this);
  v20 = v19;
  if (v25 != v27)
    free(v25);
  return v20;
}

uint64_t mlir::getAffineSymbolExpr(mlir *this, mlir::MLIRContext *a2, mlir::MLIRContext *a3)
{
  unsigned __int8 **AffineUniquer;
  unsigned int v5;
  mlir::MLIRContext *v6;
  unsigned int v7;

  v7 = this;
  v6 = a2;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(a2);
  v5 = 7;
  return mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v6, &v5, &v7);
}

mlir::MLIRContext *mlir::AffineExpr::replace(unint64_t *a1, uint64_t a2)
{
  mlir::MLIRContext *result;
  mlir::MLIRContext **v5;
  mlir::MLIRContext **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  mlir::MLIRContext **v10;
  mlir::MLIRContext **v11;

  v11 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, a1, &v11)&& v11 != (mlir::MLIRContext **)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16)))
  {
    return v11[1];
  }
  result = (mlir::MLIRContext *)*a1;
  if (*(_DWORD *)(*a1 + 8) <= 4u)
  {
    v5 = (mlir::MLIRContext **)*((_QWORD *)result + 2);
    v9 = *((_QWORD *)result + 3);
    v10 = v5;
    v6 = (mlir::MLIRContext **)mlir::AffineExpr::replace(&v10, a2);
    v7 = mlir::AffineExpr::replace(&v9, a2);
    result = (mlir::MLIRContext *)*a1;
    if (v10 != v6 || v9 != v7)
    {
      v8 = *((_DWORD *)result + 2);
      v11 = v6;
      switch(v8)
      {
        case 0:
          result = (mlir::MLIRContext *)mlir::AffineExpr::operator+((unint64_t *)&v11, v7);
          break;
        case 1:
          result = (mlir::MLIRContext *)mlir::AffineExpr::operator*((unint64_t *)&v11, v7);
          break;
        case 3:
          result = (mlir::MLIRContext *)mlir::AffineExpr::floorDiv(&v11, v7);
          break;
        case 4:
          result = (mlir::MLIRContext *)mlir::AffineExpr::ceilDiv((unint64_t *)&v11, v7);
          break;
        default:
          result = (mlir::MLIRContext *)mlir::AffineExpr::operator%((unint64_t *)&v11, v7);
          break;
      }
    }
  }
  return result;
}

void mlir::AffineExpr::replace(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  llvm *v7[2];
  unsigned int v8;
  _QWORD *v9;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v5 = a2;
  v6 = a3;
  v9 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)v7, &v5, &v9) & 1) == 0)
  {
    v4 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v7, (uint64_t)&v5, &v5, v9);
    *v4 = v5;
    v4[1] = v6;
  }
  mlir::AffineExpr::replace(a1, (uint64_t)v7);
  llvm::deallocate_buffer(v7[0], (void *)(16 * v8));
}

uint64_t sub_20729D750()
{
  uint64_t v0;

  return v0;
}

void mlir::AffineExpr::isSymbolicOrConstant(mlir::AffineExpr *this)
{
  __asm { BR              X10 }
}

uint64_t sub_20729D798()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v0 + 16);
  result = mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v3);
  if ((_DWORD)result)
  {
    v2 = *(_QWORD *)(v0 + 24);
    return mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v2);
  }
  return result;
}

uint64_t sub_20729D7CC()
{
  return 0;
}

void mlir::AffineExpr::isPureAffine(mlir::AffineExpr *this)
{
  __asm { BR              X10 }
}

uint64_t sub_20729D814()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  result = mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v2);
  if ((_DWORD)result)
    return *(_DWORD *)(*(_QWORD *)(v0 + 24) + 8) == 5;
  return result;
}

void sub_20729D848()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v0 + 16);
  mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v3);
  if (!v1)
    JUMPOUT(0x20729D838);
  v2 = *(_QWORD *)(v0 + 24);
  mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v2);
}

uint64_t sub_20729D87C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v6 = v1;
  mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v6);
  if (!v2 || (v5 = *(_QWORD *)(v0 + 24), mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v5), !v3))
    JUMPOUT(0x20729D838);
  if (*(_DWORD *)(v1 + 8) != 5)
    JUMPOUT(0x20729D830);
  return 1;
}

void mlir::AffineExpr::getLargestKnownDivisor(mlir::AffineExpr *this)
{
  __asm { BR              X10 }
}

unint64_t sub_20729D900()
{
  uint64_t v0;
  unint64_t LargestKnownDivisor;
  uint64_t v2;
  unint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v0 + 16);
  LargestKnownDivisor = mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v6);
  v5 = *(_QWORD *)(v0 + 24);
  v2 = mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v5);
  if (!v2)
    return LargestKnownDivisor;
  v3 = v2;
  do
  {
    result = v3;
    v3 = LargestKnownDivisor % v3;
    LargestKnownDivisor = result;
  }
  while (v3);
  return result;
}

BOOL mlir::AffineExpr::operator==(mlir::MLIRContext ***a1, uint64_t a2)
{
  unsigned __int8 **AffineUniquer;
  mlir::MLIRContext *v5;
  uint64_t v6;

  v5 = **a1;
  v6 = a2;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v5);
  return *a1 == (mlir::MLIRContext **)mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v5, &v6);
}

uint64_t mlir::getAffineConstantExpr(mlir *this, mlir::MLIRContext *a2, mlir::MLIRContext *a3)
{
  unsigned __int8 **AffineUniquer;
  mlir::MLIRContext *v5;
  mlir *v6;

  v5 = a2;
  v6 = this;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(a2);
  return mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v5, &v6);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 **v20;
  _QWORD v21[2];
  uint64_t *v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v5 = &unk_25451B000;
  if ((v4 & 1) == 0)
  {
    v19 = a4;
    v20 = a1;
    v17 = a2;
    v18 = a3;
    v5 = (_QWORD *)&unk_25451B000;
    a2 = v17;
    a3 = v18;
    v9 = v8;
    a4 = v19;
    a1 = v20;
    if (v9)
    {
      v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineConstantExprStorage]";
      v25 = 89;
      v10 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
      if (v25 >= v10)
        v11 = v10;
      else
        v11 = v25;
      v12 = &v24[v11];
      v13 = v25 - v11;
      if (v25 - v11 >= 0x12)
        v14 = 18;
      else
        v14 = v25 - v11;
      v15 = v13 - v14;
      if (v15 >= v15 - 1)
        v16 = v15 - 1;
      else
        v16 = v15;
      mlir::detail::TypeIDResolver<mlir::detail::AffineConstantExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      v5 = (_QWORD *)&unk_25451B000;
      a2 = v17;
      a3 = v18;
      a4 = v19;
      a1 = v20;
    }
  }
  v6 = v5[81];
  v24 = a2;
  v25 = a3;
  v23 = *a4;
  v21[0] = &v23;
  v21[1] = &v24;
  v22 = &v23;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, 37 * (int)v23, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineConstantExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>,mlir::TypeID,long long &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v22, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineConstantExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>,mlir::TypeID,long long &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v21);
}

uint64_t mlir::AffineExpr::operator+(mlir::MLIRContext ***a1, uint64_t a2)
{
  unsigned __int8 **AffineUniquer;
  uint64_t v4;
  mlir::MLIRContext *v6;
  uint64_t v7;

  v6 = **a1;
  v7 = a2;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v6);
  v4 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v6, &v7);
  return mlir::AffineExpr::operator+(a1, v4);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t *a5, _QWORD *a6)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int HashValue;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t *v27;
  _QWORD *v28;
  _QWORD v29[2];
  const char **v30;
  const char *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  if ((v7 & 1) == 0)
  {
    v27 = a5;
    v28 = a6;
    v25 = a3;
    v26 = a4;
    v24 = a2;
    a2 = v24;
    a3 = v25;
    a4 = v26;
    a5 = v27;
    a6 = v28;
    if (v16)
    {
      v31 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineBinaryOpExprStorage]";
      v32 = 89;
      v17 = llvm::StringRef::find((uint64_t *)&v31, "DesiredTypeName = ", 0x12uLL, 0);
      if (v32 >= v17)
        v18 = v17;
      else
        v18 = v32;
      v19 = &v31[v18];
      v20 = v32 - v18;
      if (v32 - v18 >= 0x12)
        v21 = 18;
      else
        v21 = v32 - v18;
      v22 = v20 - v21;
      if (v22 >= v22 - 1)
        v23 = v22 - 1;
      else
        v23 = v22;
      mlir::detail::TypeIDResolver<mlir::detail::AffineBinaryOpExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      a2 = v24;
      a3 = v25;
      a4 = v26;
      a5 = v27;
      a6 = v28;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::detail::AffineBinaryOpExprStorage,void>::resolveTypeID(void)::id;
  v34[0] = a2;
  v34[1] = a3;
  LODWORD(v31) = *a4;
  v9 = *a6;
  v32 = *a5;
  v33 = v9;
  v10 = (37 * (_DWORD)v31);
  HashValue = llvm::DenseMapInfo<std::tuple<unsigned int,mlir::AffineExpr,mlir::AffineExpr>,void>::getHashValueImpl<1u>((uint64_t)&v31);
  v12 = (HashValue | (unint64_t)(v10 << 32)) + ~((unint64_t)HashValue << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v29[0] = &v31;
  v29[1] = v34;
  v30 = &v31;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v8, ((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineBinaryOpExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(llvm::function_ref<void ()(mlir::detail::AffineBinaryOpExprStorage *)>,mlir::TypeID,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v30, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineBinaryOpExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(llvm::function_ref<void ()(mlir::detail::AffineBinaryOpExprStorage *)>,mlir::TypeID,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v29);
}

uint64_t mlir::AffineExpr::operator*(mlir::MLIRContext ***a1, uint64_t a2)
{
  unsigned __int8 **AffineUniquer;
  uint64_t v4;
  mlir::MLIRContext *v6;
  uint64_t v7;

  v6 = **a1;
  v7 = a2;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v6);
  v4 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v6, &v7);
  return mlir::AffineExpr::operator*(a1, v4);
}

uint64_t mlir::AffineExpr::operator-(unint64_t *a1)
{
  unsigned __int8 **AffineUniquer;
  uint64_t v3;
  mlir::MLIRContext *v5;
  uint64_t v6;

  v5 = *(mlir::MLIRContext **)*a1;
  v6 = -1;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v5);
  v3 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v5, &v6);
  return mlir::AffineExpr::operator*(a1, v3);
}

uint64_t mlir::AffineExpr::operator-(unint64_t *a1, mlir::MLIRContext **a2)
{
  unsigned __int8 **AffineUniquer;
  uint64_t v4;
  uint64_t v5;
  mlir::MLIRContext **v7;
  mlir::MLIRContext *v8;
  uint64_t v9;

  v7 = a2;
  v8 = *a2;
  v9 = -1;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v8);
  v4 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v8, &v9);
  v5 = mlir::AffineExpr::operator*((unint64_t *)&v7, v4);
  return mlir::AffineExpr::operator+(a1, v5);
}

uint64_t mlir::AffineExpr::floorDiv(mlir::MLIRContext ***this, uint64_t a2)
{
  unsigned __int8 **AffineUniquer;
  uint64_t v4;
  mlir::MLIRContext *v6;
  uint64_t v7;

  v6 = **this;
  v7 = a2;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v6);
  v4 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v6, &v7);
  return mlir::AffineExpr::floorDiv(this, v4);
}

uint64_t mlir::AffineExpr::operator%(mlir::MLIRContext ***a1, uint64_t a2)
{
  unsigned __int8 **AffineUniquer;
  uint64_t v4;
  mlir::MLIRContext *v6;
  uint64_t v7;

  v6 = **a1;
  v7 = a2;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v6);
  v4 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v6, &v7);
  return mlir::AffineExpr::operator%(a1, v4);
}

mlir::MLIRContext **mlir::getAffineExprFromFlatForm(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unint64_t *a5, int a6, mlir::MLIRContext *this)
{
  unsigned __int8 **AffineUniquer;
  mlir::MLIRContext **result;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  mlir::MLIRContext *v17;
  unsigned __int8 **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  mlir::MLIRContext *v22;
  unsigned __int8 **v23;
  uint64_t v24;
  uint64_t v25;
  mlir::MLIRContext *v26;
  unsigned __int8 **v27;
  uint64_t v28;
  mlir::MLIRContext **v30;
  mlir::MLIRContext **v31;
  mlir::MLIRContext *v32;
  mlir::MLIRContext *v33;

  v32 = this;
  v33 = 0;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(this);
  result = (mlir::MLIRContext **)mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v32, &v33);
  v31 = result;
  v14 = a4 + a3;
  if (a4 + a3)
  {
    v15 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 8 * v15))
      {
        if (v15 >= a3)
        {
          LODWORD(v32) = v15 - a3;
          v33 = this;
          v16 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(this);
          LODWORD(v30) = 7;
        }
        else
        {
          LODWORD(v32) = v15;
          v33 = this;
          v16 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(this);
          LODWORD(v30) = 6;
        }
        v30 = (mlir::MLIRContext **)mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(v16, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v33, (unsigned int *)&v30, (unsigned int *)&v32);
        v17 = *(mlir::MLIRContext **)(a1 + 8 * v15);
        v32 = *v30;
        v33 = v17;
        v18 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v32);
        v19 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v18, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v32, &v33);
        v20 = mlir::AffineExpr::operator*((unint64_t *)&v30, v19);
        result = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v31, v20);
        v31 = result;
      }
      ++v15;
    }
    while (v14 != v15);
  }
  v21 = (a2 - 1);
  if (v14 < v21)
  {
    do
    {
      v22 = *(mlir::MLIRContext **)(a1 + 8 * v14);
      if (v22)
      {
        v32 = *(mlir::MLIRContext **)*a5;
        v33 = v22;
        v23 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v32);
        v24 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v23, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v32, &v33);
        v25 = mlir::AffineExpr::operator*(a5, v24);
        result = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v31, v25);
        v31 = result;
      }
      ++v14;
      ++a5;
    }
    while (v14 < v21);
  }
  v26 = *(mlir::MLIRContext **)(a1 + 8 * a2 - 8);
  if (v26)
  {
    v32 = *result;
    v33 = v26;
    v27 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v32);
    v28 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v27, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v32, &v33);
    return (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v31, v28);
  }
  return result;
}

void std::vector<llvm::SmallVector<long long,8u>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        *(_QWORD *)&v8[v9 - 80] = &v8[v9 - 64];
        *(_QWORD *)&v8[v9 - 72] = 0x800000000;
        if (*(_DWORD *)&v4[v9 - 72])
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v8[v9 - 80], (uint64_t)&v4[v9 - 80]);
        v9 -= 80;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v10 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v10 != v2)
      {
        v12 = (char *)*((_QWORD *)v10 - 10);
        v10 -= 80;
        v11 = v12;
        if (v10 + 16 != v12)
          free(v11);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

mlir::SimpleAffineExprFlattener *mlir::SimpleAffineExprFlattener::SimpleAffineExprFlattener(mlir::SimpleAffineExprFlattener *this, int a2, int a3)
{
  *(_QWORD *)this = &off_24C04FB38;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = a2;
  *((_DWORD *)this + 9) = a3;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x400000000;
  std::vector<llvm::SmallVector<long long,8u>>::reserve((uint64_t)this + 8, 8uLL);
  return this;
}

uint64_t mlir::SimpleAffineExprFlattener::visitMulExpr(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mlir::MLIRContext *v15;
  mlir::MLIRContext **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  mlir::MLIRContext **AffineExprFromFlatForm;
  void *v35;
  int v36[2];
  _QWORD v37[9];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v35 = v37;
  *(_QWORD *)v36 = 0x800000000;
  v5 = *(_DWORD *)(v4 - 72);
  if (&v35 != (void **)(v4 - 80) && v5 != 0)
  {
    if (v5 < 9)
    {
      v8 = v37;
      v7 = *(_DWORD *)(v4 - 72);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, *(unsigned int *)(v4 - 72), 8);
      v7 = *(_DWORD *)(v4 - 72);
      if (!v7)
      {
LABEL_10:
        v36[0] = v5;
        v4 = *(_QWORD *)(a1 + 16);
        goto LABEL_11;
      }
      v8 = v35;
    }
    memcpy(v8, *(const void **)(v4 - 80), 8 * v7);
    goto LABEL_10;
  }
LABEL_11:
  v9 = *(void **)(v4 - 80);
  if (v9 != (void *)(v4 - 64))
    free(v9);
  *(_QWORD *)(a1 + 16) = v4 - 80;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) == 5)
  {
    v10 = v35;
    v11 = *(unsigned int *)(v4 - 152);
    if (!(_DWORD)v11)
      goto LABEL_38;
    v12 = *((_QWORD *)v35 + (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40)));
    v13 = *(_QWORD *)(v4 - 160);
    if ((_DWORD)v11 == 1)
    {
      v14 = 0;
LABEL_36:
      v31 = (_QWORD *)(v13 + 8 * v14);
      v32 = v11 - v14;
      do
      {
        *v31++ *= v12;
        --v32;
      }
      while (v32);
      goto LABEL_38;
    }
    v14 = v11 & 0xFFFFFFFE;
    v28 = (uint64_t *)(v13 + 8);
    v29 = v14;
    do
    {
      v30 = *v28 * v12;
      *(v28 - 1) *= v12;
      *v28 = v30;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    if (v14 != v11)
      goto LABEL_36;
  }
  else
  {
    v15 = *(mlir::MLIRContext **)a2;
    AffineExprFromFlatForm = mlir::getAffineExprFromFlatForm(*(_QWORD *)(v4 - 160), *(unsigned int *)(v4 - 152), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unint64_t **)(a1 + 48), *(_DWORD *)(a1 + 56), v15);
    v16 = mlir::getAffineExprFromFlatForm((uint64_t)v35, v36[0], *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unint64_t **)(a1 + 48), *(_DWORD *)(a1 + 56), v15);
    v17 = mlir::AffineExpr::operator*((unint64_t *)&AffineExprFromFlatForm, (uint64_t)v16);
    v18 = *(_QWORD *)(a1 + 48);
    v19 = *(unsigned int *)(a1 + 56);
    if (!(_DWORD)v19)
      goto LABEL_29;
    v20 = 8 * v19;
    v21 = *(_QWORD **)(a1 + 48);
    while (*v21 != v17)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
      {
        v21 = (_QWORD *)(v18 + 8 * v19);
        break;
      }
    }
    v22 = (uint64_t)v21 - v18;
    if (v19 == v22 >> 3 || (v23 = (unint64_t)v22 >> 3, ((unint64_t)v22 >> 3) == -1))
    {
LABEL_29:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v17);
      v25 = *(_QWORD *)(v4 - 160);
      v27 = *(unsigned int *)(v4 - 152);
      if ((_DWORD)v27)
        bzero(*(void **)(v4 - 160), 8 * v27);
      v26 = *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40) - 1;
    }
    else
    {
      v24 = *(unsigned int *)(v4 - 152);
      v25 = *(_QWORD *)(v4 - 160);
      if ((_DWORD)v24)
        bzero(*(void **)(v4 - 160), 8 * v24);
      v26 = *(_DWORD *)(a1 + 32) + v23 + *(_DWORD *)(a1 + 36);
    }
    *(_QWORD *)(v25 + 8 * v26) = 1;
    v10 = v35;
  }
LABEL_38:
  if (v10 != v37)
    free(v10);
  return 1;
}

uint64_t mlir::SimpleAffineExprFlattener::visitModExpr(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v7;
  _QWORD *v8;
  void *v9;
  void **v10;
  mlir::MLIRContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  mlir::MLIRContext **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 **AffineUniquer;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  mlir::MLIRContext **v59;
  mlir::MLIRContext *v60;
  uint64_t v61;
  void *AffineExprFromFlatForm;
  uint64_t v63;
  _BYTE v64[64];
  void *v65;
  int v66[2];
  _QWORD v67[9];

  v67[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 2);
  v65 = v67;
  *(_QWORD *)v66 = 0x800000000;
  v5 = *(_DWORD *)(v4 - 72);
  if (&v65 != (void **)(v4 - 80) && v5 != 0)
  {
    if (v5 < 9)
    {
      v8 = v67;
      v7 = *(_DWORD *)(v4 - 72);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, *(unsigned int *)(v4 - 72), 8);
      v7 = *(_DWORD *)(v4 - 72);
      if (!v7)
      {
LABEL_10:
        v66[0] = v5;
        v4 = *((_QWORD *)a1 + 2);
        goto LABEL_11;
      }
      v8 = v65;
    }
    memcpy(v8, *(const void **)(v4 - 80), 8 * v7);
    goto LABEL_10;
  }
LABEL_11:
  v9 = *(void **)(v4 - 80);
  if (v9 != (void *)(v4 - 64))
    free(v9);
  *((_QWORD *)a1 + 2) = v4 - 80;
  v10 = (void **)(v4 - 160);
  v11 = *(mlir::MLIRContext **)a2;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) != 5)
  {
    AffineExprFromFlatForm = mlir::getAffineExprFromFlatForm(*(_QWORD *)(v4 - 160), *(unsigned int *)(v4 - 152), a1[8], a1[9], *((unint64_t **)a1 + 6), a1[14], *(mlir::MLIRContext **)a2);
    v17 = mlir::getAffineExprFromFlatForm((uint64_t)v65, v66[0], a1[8], a1[9], *((unint64_t **)a1 + 6), a1[14], v11);
    v18 = mlir::AffineExpr::operator%((unint64_t *)&AffineExprFromFlatForm, (uint64_t)v17);
    v19 = *((_QWORD *)a1 + 6);
    v20 = a1[14];
    if (!(_DWORD)v20)
      goto LABEL_35;
    v21 = 8 * v20;
    v22 = (_QWORD *)*((_QWORD *)a1 + 6);
    while (*v22 != v18)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
      {
        v22 = (_QWORD *)(v19 + 8 * v20);
        break;
      }
    }
    v23 = (uint64_t)v22 - v19;
    if (v20 == v23 >> 3 || (v26 = (unint64_t)v23 >> 3, ((unint64_t)v23 >> 3) == -1))
    {
LABEL_35:
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 24))(a1, v18);
      v30 = *(_QWORD *)(v4 - 160);
      v31 = *(unsigned int *)(v4 - 152);
      if ((_DWORD)v31)
        bzero(*(void **)(v4 - 160), 8 * v31);
      v32 = a1[8] + a1[9] + a1[10] - 1;
      v24 = 1;
      *(_QWORD *)(v30 + 8 * v32) = 1;
      v25 = v65;
      if (v65 != v67)
        goto LABEL_82;
    }
    else
    {
      v27 = *(unsigned int *)(v4 - 152);
      v28 = *v10;
      if ((_DWORD)v27)
        bzero(*v10, 8 * v27);
      v29 = a1[8] + v26 + a1[9];
      v24 = 1;
      v28[v29] = 1;
      v25 = v65;
      if (v65 != v67)
        goto LABEL_82;
    }
    return v24;
  }
  v12 = *((_QWORD *)v65 + (a1[9] + a1[8] + a1[10]));
  if (v12 < 1)
  {
    v24 = 0;
    v25 = v65;
    if (v65 == v67)
      return v24;
    goto LABEL_82;
  }
  v13 = *(unsigned int *)(v4 - 152);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)*v10;
    v15 = *(unsigned int *)(v4 - 152);
    while (1)
    {
      v16 = *v14++;
      if (v16 % v12)
        break;
      if (!--v15)
        goto LABEL_45;
    }
    if (!(_DWORD)v15)
    {
LABEL_45:
      bzero(*v10, 8 * v13);
      goto LABEL_81;
    }
    v33 = 0;
    AffineExprFromFlatForm = v64;
    v63 = 0x800000000;
    v34 = *(_DWORD *)(v4 - 152);
    if (&AffineExprFromFlatForm == v10 || !v34)
    {
LABEL_49:
      if (v34)
      {
        v37 = 0;
        v38 = v12;
        do
        {
          v40 = *((_QWORD *)*v10 + v37);
          if (v40)
          {
            if (v40 >= 0)
              v41 = *((_QWORD *)*v10 + v37);
            else
              v41 = -v40;
            do
            {
              v39 = v41;
              v41 = v38 % v41;
              v38 = v39;
            }
            while (v41);
          }
          else
          {
            v39 = v38;
          }
          ++v37;
          v38 = v39;
        }
        while (v37 != v34);
      }
      else
      {
        v39 = v12;
      }
      if (v39 == 1)
      {
        v42 = (uint64_t *)AffineExprFromFlatForm;
      }
      else
      {
        v42 = (uint64_t *)AffineExprFromFlatForm;
        if (v33)
        {
          if (v33 == 1)
          {
            v43 = 0;
          }
          else
          {
            v44 = 0;
            v43 = v33 & 0xFFFFFFFE;
            do
            {
              v45 = &v42[v44];
              v46 = v45[1] / v39;
              *v45 /= v39;
              v45[1] = v46;
              v44 += 2;
            }
            while (v43 != v44);
            if (v43 == v33)
              goto LABEL_69;
          }
          do
            v42[v43++] /= v39;
          while (v33 != v43);
        }
      }
LABEL_69:
      v47 = v12 / v39;
      v59 = mlir::getAffineExprFromFlatForm((uint64_t)v42, v33, a1[8], a1[9], *((unint64_t **)a1 + 6), a1[14], v11);
      v60 = v11;
      v61 = v47;
      AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v11);
      v49 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v60, &v61);
      v50 = mlir::AffineExpr::floorDiv(&v59, v49);
      v51 = *((_QWORD *)a1 + 6);
      v52 = a1[14];
      if ((_DWORD)v52)
      {
        v53 = 8 * v52;
        v54 = (_QWORD *)*((_QWORD *)a1 + 6);
        while (*v54 != v50)
        {
          ++v54;
          v53 -= 8;
          if (!v53)
          {
            v54 = (_QWORD *)(v51 + 8 * v52);
            break;
          }
        }
      }
      else
      {
        v54 = (_QWORD *)*((_QWORD *)a1 + 6);
      }
      v55 = (uint64_t)v54 - v51;
      if (v52 == v55 >> 3 || (v56 = (unint64_t)v55 >> 3, (_DWORD)v56 == -1))
      {
        (*(void (**)(_DWORD *, void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, AffineExprFromFlatForm, v63, v47, v50);
        v57 = a1[8] + a1[9] + a1[10] - 1;
      }
      else
      {
        v57 = a1[8] + v56 + a1[9];
      }
      *((_QWORD *)*v10 + v57) = -v12;
      if (AffineExprFromFlatForm != v64)
        free(AffineExprFromFlatForm);
      goto LABEL_81;
    }
    if (v34 < 9)
    {
      v36 = v64;
      v35 = *(_DWORD *)(v4 - 152);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&AffineExprFromFlatForm, v64, *(unsigned int *)(v4 - 152), 8);
      v35 = *(_DWORD *)(v4 - 152);
      if (!v35)
      {
LABEL_48:
        LODWORD(v63) = v34;
        v33 = v34;
        v34 = *(_DWORD *)(v4 - 152);
        goto LABEL_49;
      }
      v36 = AffineExprFromFlatForm;
    }
    memcpy(v36, *v10, 8 * v35);
    goto LABEL_48;
  }
LABEL_81:
  v24 = 1;
  v25 = v65;
  if (v65 != v67)
LABEL_82:
    free(v25);
  return v24;
}

uint64_t mlir::SimpleAffineExprFlattener::visitDivExpr(_DWORD *a1, uint64_t a2, int a3)
{
  mlir::MLIRContext *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v10;
  _QWORD *v11;
  void *v12;
  void **v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  mlir::MLIRContext **v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 **AffineUniquer;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _BYTE *v62;
  uint64_t v63;
  unsigned int v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  mlir::MLIRContext **v70;
  mlir::MLIRContext *v71;
  void *AffineExprFromFlatForm;
  uint64_t v73;
  _BYTE v74[64];
  void *v75;
  int v76[2];
  _QWORD v77[9];

  v77[8] = *MEMORY[0x24BDAC8D0];
  v6 = *(mlir::MLIRContext **)a2;
  v7 = *((_QWORD *)a1 + 2);
  v75 = v77;
  *(_QWORD *)v76 = 0x800000000;
  v8 = *(_DWORD *)(v7 - 72);
  if (&v75 != (void **)(v7 - 80) && v8 != 0)
  {
    if (v8 < 9)
    {
      v11 = v77;
      v10 = *(_DWORD *)(v7 - 72);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v77, *(unsigned int *)(v7 - 72), 8);
      v10 = *(_DWORD *)(v7 - 72);
      if (!v10)
      {
LABEL_10:
        v76[0] = v8;
        v7 = *((_QWORD *)a1 + 2);
        goto LABEL_11;
      }
      v11 = v75;
    }
    memcpy(v11, *(const void **)(v7 - 80), 8 * v10);
    goto LABEL_10;
  }
LABEL_11:
  v12 = *(void **)(v7 - 80);
  if (v12 != (void *)(v7 - 64))
    free(v12);
  *((_QWORD *)a1 + 2) = v7 - 80;
  v13 = (void **)(v7 - 160);
  if (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) != 5)
  {
    AffineExprFromFlatForm = mlir::getAffineExprFromFlatForm(*(_QWORD *)(v7 - 160), *(unsigned int *)(v7 - 152), a1[8], a1[9], *((unint64_t **)a1 + 6), a1[14], v6);
    v22 = mlir::getAffineExprFromFlatForm((uint64_t)v75, v76[0], a1[8], a1[9], *((unint64_t **)a1 + 6), a1[14], v6);
    if (a3)
    {
      v23 = mlir::AffineExpr::ceilDiv((unint64_t *)&AffineExprFromFlatForm, (uint64_t)v22);
      v24 = (char *)*((_QWORD *)a1 + 6);
      v25 = a1[14];
      if (!(_DWORD)v25)
        goto LABEL_39;
    }
    else
    {
      v23 = mlir::AffineExpr::floorDiv((mlir::MLIRContext ***)&AffineExprFromFlatForm, (uint64_t)v22);
      v24 = (char *)*((_QWORD *)a1 + 6);
      v25 = a1[14];
      if (!(_DWORD)v25)
        goto LABEL_39;
    }
    v26 = 8 * v25;
    v27 = v24;
    while (*(_QWORD *)v27 != v23)
    {
      v27 += 8;
      v26 -= 8;
      if (!v26)
      {
        v27 = &v24[8 * v25];
        break;
      }
    }
    v28 = v27 - v24;
    if (v25 != v28 >> 3)
    {
      v29 = (unint64_t)v28 >> 3;
      if (((unint64_t)v28 >> 3) != -1)
      {
        v30 = *(unsigned int *)(v7 - 152);
        v31 = *v13;
        if ((_DWORD)v30)
          bzero(*v13, 8 * v30);
        v32 = a1[8] + v29 + a1[9];
        v33 = 1;
        v31[v32] = 1;
        v34 = v75;
        if (v75 != v77)
          goto LABEL_42;
        return v33;
      }
    }
LABEL_39:
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    v35 = *(_QWORD *)(v7 - 160);
    v36 = *(unsigned int *)(v7 - 152);
    if ((_DWORD)v36)
      bzero(*(void **)(v7 - 160), 8 * v36);
    v37 = a1[8] + a1[9] + a1[10] - 1;
    v33 = 1;
    *(_QWORD *)(v35 + 8 * v37) = 1;
    v34 = v75;
    if (v75 != v77)
      goto LABEL_42;
    return v33;
  }
  v14 = a1[8];
  v15 = a1[9];
  v16 = *((_QWORD *)v75 + v15 + v14 + a1[10]);
  if (v16 < 1)
  {
    v33 = 0;
    v34 = v75;
    if (v75 == v77)
      return v33;
    goto LABEL_42;
  }
  v17 = *(unsigned int *)(v7 - 152);
  if (!(_DWORD)v17)
  {
    v19 = *((_QWORD *)v75 + v15 + v14 + a1[10]);
    goto LABEL_55;
  }
  v18 = 0;
  v19 = *((_QWORD *)v75 + v15 + v14 + a1[10]);
  do
  {
    v20 = *((_QWORD *)*v13 + v18);
    if (v20)
    {
      if (v20 < 0)
        v20 = -v20;
      v21 = v19;
      do
      {
        v19 = v20;
        v20 = v21 % v20;
        v21 = v19;
      }
      while (v20);
    }
    ++v18;
  }
  while (v18 != v17);
  if (v19 != 1)
  {
    v39 = (char *)*v13;
    if (v17 < 2)
    {
      v40 = 0;
LABEL_53:
      v44 = (uint64_t *)&v39[8 * v40];
      v45 = v17 - v40;
      do
      {
        *v44++ /= v19;
        --v45;
      }
      while (v45);
      goto LABEL_55;
    }
    v40 = v17 & 0xFFFFFFFE;
    v41 = (uint64_t *)(v39 + 8);
    v42 = v40;
    do
    {
      v43 = *v41;
      *(v41 - 1) /= v19;
      *v41 = v43 / v19;
      v41 += 2;
      v42 -= 2;
    }
    while (v42);
    if (v40 != v17)
      goto LABEL_53;
  }
LABEL_55:
  v46 = v16 / v19;
  if (v16 / v19 == 1)
  {
    v33 = 1;
    v34 = v75;
    if (v75 == v77)
      return v33;
    goto LABEL_42;
  }
  v70 = mlir::getAffineExprFromFlatForm((uint64_t)*v13, v17, v14, v15, *((unint64_t **)a1 + 6), a1[14], v6);
  v71 = v6;
  AffineExprFromFlatForm = (void *)v46;
  AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v6);
  v48 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v71, &AffineExprFromFlatForm);
  if (a3)
  {
    v49 = mlir::AffineExpr::ceilDiv((unint64_t *)&v70, v48);
    v50 = (char *)*((_QWORD *)a1 + 6);
    v51 = a1[14];
    if ((_DWORD)v51)
      goto LABEL_60;
LABEL_65:
    v53 = v50;
    goto LABEL_66;
  }
  v49 = mlir::AffineExpr::floorDiv(&v70, v48);
  v50 = (char *)*((_QWORD *)a1 + 6);
  v51 = a1[14];
  if (!(_DWORD)v51)
    goto LABEL_65;
LABEL_60:
  v52 = 8 * v51;
  v53 = v50;
  while (*(_QWORD *)v53 != v49)
  {
    v53 += 8;
    v52 -= 8;
    if (!v52)
    {
      v53 = &v50[8 * v51];
      break;
    }
  }
LABEL_66:
  v54 = v53 - v50;
  if (v51 != v54 >> 3)
  {
    v55 = (unint64_t)v54 >> 3;
    if (((unint64_t)v54 >> 3) != -1)
    {
      v56 = *(unsigned int *)(v7 - 152);
      v57 = *(_QWORD *)(v7 - 160);
      if ((_DWORD)v56)
        bzero(*(void **)(v7 - 160), 8 * v56);
      v58 = a1[8] + v55 + a1[9];
      v33 = 1;
      *(_QWORD *)(v57 + 8 * v58) = 1;
      v34 = v75;
      if (v75 == v77)
        return v33;
LABEL_42:
      free(v34);
      return v33;
    }
  }
  v59 = 0;
  if ((a3 & 1) != 0)
  {
    AffineExprFromFlatForm = v74;
    v73 = 0x800000000;
    if (&AffineExprFromFlatForm == v13 || (v60 = *(unsigned int *)(v7 - 152), !(_DWORD)v60))
    {
      v66 = v74;
LABEL_88:
      *(_QWORD *)&v66[8 * v59 - 8] = v46 + *(_QWORD *)&v66[8 * v59 - 8] - 1;
      goto LABEL_92;
    }
    if (v60 < 9)
    {
      v62 = v74;
      v61 = *(_DWORD *)(v7 - 152);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&AffineExprFromFlatForm, v74, *(unsigned int *)(v7 - 152), 8);
      v61 = *(_DWORD *)(v7 - 152);
      if (!v61)
      {
LABEL_87:
        LODWORD(v73) = v60;
        v66 = AffineExprFromFlatForm;
        v59 = v60;
        goto LABEL_88;
      }
      v62 = AffineExprFromFlatForm;
    }
    memcpy(v62, *v13, 8 * v61);
    goto LABEL_87;
  }
  AffineExprFromFlatForm = v74;
  v73 = 0x800000000;
  if (&AffineExprFromFlatForm == v13 || (v63 = *(unsigned int *)(v7 - 152), !(_DWORD)v63))
  {
    v66 = v74;
    goto LABEL_92;
  }
  if (v63 < 9)
  {
    v65 = v74;
    v64 = *(_DWORD *)(v7 - 152);
    goto LABEL_90;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&AffineExprFromFlatForm, v74, *(unsigned int *)(v7 - 152), 8);
  v64 = *(_DWORD *)(v7 - 152);
  if (v64)
  {
    v65 = AffineExprFromFlatForm;
LABEL_90:
    memcpy(v65, *v13, 8 * v64);
  }
  LODWORD(v73) = v63;
  v66 = AffineExprFromFlatForm;
  v59 = v63;
LABEL_92:
  (*(void (**)(_DWORD *, _BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v66, v59, v46, v49);
  if (AffineExprFromFlatForm != v74)
    free(AffineExprFromFlatForm);
  v67 = *(_QWORD *)(v7 - 160);
  v68 = *(unsigned int *)(v7 - 152);
  if ((_DWORD)v68)
    bzero(*(void **)(v7 - 160), 8 * v68);
  v69 = a1[8] + a1[9] + a1[10] - 1;
  v33 = 1;
  *(_QWORD *)(v67 + 8 * v69) = 1;
  v34 = v75;
  if (v75 != v77)
    goto LABEL_42;
  return v33;
}

uint64_t mlir::SimpleAffineExprFlattener::visitDimExpr(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  size_t v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  void *v10;
  unsigned int v11;
  void *__src;
  unsigned int v14;
  int v15;
  _QWORD v16[33];

  v16[32] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40) + 1);
  __src = v16;
  v15 = 32;
  if (v4 < 0x21)
  {
    if (!(_DWORD)v4)
      goto LABEL_6;
    v6 = 8 * v4;
    v5 = v16;
  }
  else
  {
    v14 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v16, v4, 8);
    v5 = __src;
    v6 = 8 * v4;
  }
  bzero(v5, v6);
LABEL_6:
  v14 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 >= *(_QWORD *)(a1 + 24))
  {
    v9 = std::vector<llvm::SmallVector<long long,8u>>::__emplace_back_slow_path<llvm::SmallVector<long long,32u>>((char **)(a1 + 8), (uint64_t)&__src);
    *(_QWORD *)(a1 + 16) = v9;
    v10 = __src;
    if (__src == v16)
      goto LABEL_20;
    goto LABEL_19;
  }
  *(_QWORD *)v7 = v7 + 16;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if ((void **)v7 != &__src)
  {
    v8 = v14;
    if (v14)
    {
      if (__src == v16)
      {
        v11 = v14;
        if (v14 < 9
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v14, 8), (v11 = v14) != 0))
        {
          memcpy(*(void **)v7, __src, 8 * v11);
        }
        *(_DWORD *)(v7 + 8) = v8;
      }
      else
      {
        *(_QWORD *)v7 = __src;
        *(_DWORD *)(v7 + 8) = v8;
        *(_DWORD *)(v7 + 12) = v15;
        __src = v16;
        v15 = 0;
      }
      v14 = 0;
    }
  }
  v9 = (char *)(v7 + 80);
  *(_QWORD *)(a1 + 16) = v7 + 80;
  v10 = __src;
  if (__src != v16)
  {
LABEL_19:
    free(v10);
    v9 = *(char **)(a1 + 16);
  }
LABEL_20:
  *(_QWORD *)(*((_QWORD *)v9 - 10) + 8 * *(unsigned int *)(a2 + 16)) = 1;
  return 1;
}

uint64_t mlir::SimpleAffineExprFlattener::visitSymbolExpr(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  size_t v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  void *v10;
  unsigned int v11;
  void *__src;
  unsigned int v14;
  int v15;
  _QWORD v16[33];

  v16[32] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40) + 1);
  __src = v16;
  v15 = 32;
  if (v4 < 0x21)
  {
    if (!(_DWORD)v4)
      goto LABEL_6;
    v6 = 8 * v4;
    v5 = v16;
  }
  else
  {
    v14 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v16, v4, 8);
    v5 = __src;
    v6 = 8 * v4;
  }
  bzero(v5, v6);
LABEL_6:
  v14 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 >= *(_QWORD *)(a1 + 24))
  {
    v9 = std::vector<llvm::SmallVector<long long,8u>>::__emplace_back_slow_path<llvm::SmallVector<long long,32u>>((char **)(a1 + 8), (uint64_t)&__src);
    *(_QWORD *)(a1 + 16) = v9;
    v10 = __src;
    if (__src == v16)
      goto LABEL_20;
    goto LABEL_19;
  }
  *(_QWORD *)v7 = v7 + 16;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if ((void **)v7 != &__src)
  {
    v8 = v14;
    if (v14)
    {
      if (__src == v16)
      {
        v11 = v14;
        if (v14 < 9
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v14, 8), (v11 = v14) != 0))
        {
          memcpy(*(void **)v7, __src, 8 * v11);
        }
        *(_DWORD *)(v7 + 8) = v8;
      }
      else
      {
        *(_QWORD *)v7 = __src;
        *(_DWORD *)(v7 + 8) = v8;
        *(_DWORD *)(v7 + 12) = v15;
        __src = v16;
        v15 = 0;
      }
      v14 = 0;
    }
  }
  v9 = (char *)(v7 + 80);
  *(_QWORD *)(a1 + 16) = v7 + 80;
  v10 = __src;
  if (__src != v16)
  {
LABEL_19:
    free(v10);
    v9 = *(char **)(a1 + 16);
  }
LABEL_20:
  *(_QWORD *)(*((_QWORD *)v9 - 10) + 8 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 32))) = 1;
  return 1;
}

uint64_t mlir::SimpleAffineExprFlattener::visitConstantExpr(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  size_t v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  void *v10;
  unsigned int v11;
  void *__src;
  unsigned int v14;
  int v15;
  _QWORD v16[33];

  v16[32] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40) + 1);
  __src = v16;
  v15 = 32;
  if (v4 < 0x21)
  {
    if (!(_DWORD)v4)
      goto LABEL_6;
    v6 = 8 * v4;
    v5 = v16;
  }
  else
  {
    v14 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v16, v4, 8);
    v5 = __src;
    v6 = 8 * v4;
  }
  bzero(v5, v6);
LABEL_6:
  v14 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 >= *(_QWORD *)(a1 + 24))
  {
    v9 = std::vector<llvm::SmallVector<long long,8u>>::__emplace_back_slow_path<llvm::SmallVector<long long,32u>>((char **)(a1 + 8), (uint64_t)&__src);
    *(_QWORD *)(a1 + 16) = v9;
    v10 = __src;
    if (__src == v16)
      goto LABEL_20;
    goto LABEL_19;
  }
  *(_QWORD *)v7 = v7 + 16;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if ((void **)v7 != &__src)
  {
    v8 = v14;
    if (v14)
    {
      if (__src == v16)
      {
        v11 = v14;
        if (v14 < 9
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v14, 8), (v11 = v14) != 0))
        {
          memcpy(*(void **)v7, __src, 8 * v11);
        }
        *(_DWORD *)(v7 + 8) = v8;
      }
      else
      {
        *(_QWORD *)v7 = __src;
        *(_DWORD *)(v7 + 8) = v8;
        *(_DWORD *)(v7 + 12) = v15;
        __src = v16;
        v15 = 0;
      }
      v14 = 0;
    }
  }
  v9 = (char *)(v7 + 80);
  *(_QWORD *)(a1 + 16) = v7 + 80;
  v10 = __src;
  if (__src != v16)
  {
LABEL_19:
    free(v10);
    v9 = *(char **)(a1 + 16);
  }
LABEL_20:
  *(_QWORD *)(*((_QWORD *)v9 - 10)
            + 8 * (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) = *(_QWORD *)(a2 + 16);
  return 1;
}

void mlir::SimpleAffineExprFlattener::addLocalFloorDivId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v7 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); v7 != i; v7 += 80)
  {
    while (1)
    {
      v10 = *(_QWORD *)v7;
      v11 = *(_QWORD *)v7
          + 8 * (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32))
          + 8 * *(unsigned int *)(a1 + 40);
      v12 = *(unsigned int *)(v7 + 8);
      if (*(_QWORD *)v7 + 8 * v12 == v11)
        break;
      if (v12 >= *(_DWORD *)(v7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v12 + 1, 8);
        v13 = *(_QWORD *)v7;
        v12 = *(unsigned int *)(v7 + 8);
      }
      else
      {
        v13 = *(_QWORD *)v7;
      }
      v14 = (_QWORD *)(v13 + 8 * ((v11 - v10) >> 3));
      v15 = (_QWORD *)(v13 + 8 * v12);
      *v15 = *(v15 - 1);
      if (v15 - 1 != v14)
      {
        memmove(v14 + 1, v14, (char *)(v15 - 1) - (char *)v14);
        LODWORD(v12) = *(_DWORD *)(v7 + 8);
      }
      *(_DWORD *)(v7 + 8) = v12 + 1;
      *v14 = 0;
      v7 += 80;
      if (v7 == i)
        goto LABEL_2;
    }
    if (v12 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v12 + 1, 8);
      v12 = *(unsigned int *)(v7 + 8);
      v10 = *(_QWORD *)v7;
    }
    *(_QWORD *)(v10 + 8 * v12) = 0;
    ++*(_DWORD *)(v7 + 8);
  }
LABEL_2:
  v9 = *(unsigned int *)(a1 + 56);
  if (v9 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, (void *)(a1 + 64), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9) = a5;
  ++*(_DWORD *)(a1 + 56);
  ++*(_DWORD *)(a1 + 40);
}

void mlir::SimpleAffineExprFlattener::addLocalIdSemiAffine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); v4 != i; v4 += 80)
  {
    while (1)
    {
      v7 = *(_QWORD *)v4;
      v8 = *(_QWORD *)v4
         + 8 * (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32))
         + 8 * *(unsigned int *)(a1 + 40);
      v9 = *(unsigned int *)(v4 + 8);
      if (*(_QWORD *)v4 + 8 * v9 == v8)
        break;
      if (v9 >= *(_DWORD *)(v4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v9 + 1, 8);
        v10 = *(_QWORD *)v4;
        v9 = *(unsigned int *)(v4 + 8);
      }
      else
      {
        v10 = *(_QWORD *)v4;
      }
      v11 = (_QWORD *)(v10 + 8 * ((v8 - v7) >> 3));
      v12 = (_QWORD *)(v10 + 8 * v9);
      *v12 = *(v12 - 1);
      if (v12 - 1 != v11)
      {
        memmove(v11 + 1, v11, (char *)(v12 - 1) - (char *)v11);
        LODWORD(v9) = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(v4 + 8) = v9 + 1;
      *v11 = 0;
      v4 += 80;
      if (v4 == i)
        goto LABEL_2;
    }
    if (v9 >= *(_DWORD *)(v4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v9 + 1, 8);
      v9 = *(unsigned int *)(v4 + 8);
      v7 = *(_QWORD *)v4;
    }
    *(_QWORD *)(v7 + 8 * v9) = 0;
    ++*(_DWORD *)(v4 + 8);
  }
LABEL_2:
  v6 = *(unsigned int *)(a1 + 56);
  if (v6 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, (void *)(a1 + 64), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v6) = a2;
  ++*(_DWORD *)(a1 + 56);
  ++*(_DWORD *)(a1 + 40);
}

mlir::MLIRContext **mlir::simplifyAffineExpr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext **AffineExprFromFlatForm;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  mlir::MLIRContext *v15;
  unsigned __int8 **AffineUniquer;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int8 **v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  int *v65;
  int v66;
  int v67;
  unint64_t v69;
  mlir::MLIRContext *v70;
  unsigned __int8 **v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int *v80;
  int v81;
  int v82;
  mlir::MLIRContext **v84;
  unsigned int v85;
  int v86;
  int v87;
  int *v88;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  int *v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  mlir::MLIRContext *v100;
  unsigned __int8 **v101;
  uint64_t v102;
  uint64_t v103;
  mlir::MLIRContext *v104;
  unsigned __int8 **v105;
  uint64_t v106;
  char *v107;
  char *v108;
  void *v109;
  char *v110;
  char *v111;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  mlir::MLIRContext *v124;
  mlir::MLIRContext **v125;
  mlir::MLIRContext **v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm *v131[2];
  unsigned int v132;
  llvm *v133[2];
  int v134;
  mlir::MLIRContext **v135;
  unint64_t v136;
  _QWORD v137[2];
  unint64_t v138;
  uint64_t v139;
  void (**v140)(mlir::SimpleAffineExprFlattener *__hidden);
  void *__p;
  char *v142;
  char *v143;
  int v144;
  int v145;
  int v146;
  void *v147;
  int v148[2];
  _BYTE v149[32];
  _QWORD *v150;
  uint64_t v151;
  _QWORD v152[10];

  AffineExprFromFlatForm = a1;
  v152[8] = *MEMORY[0x24BDAC8D0];
  v125 = a1;
  mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v125);
  if ((v6 & 1) == 0)
  {
    AffineExprFromFlatForm = (mlir::MLIRContext **)simplifySemiAffine((uint64_t)AffineExprFromFlatForm, a2, a3);
    v125 = AffineExprFromFlatForm;
  }
  v140 = &off_24C04FB38;
  v144 = a2;
  v145 = a3;
  v146 = 0;
  v147 = v149;
  *(_QWORD *)v148 = 0x400000000;
  __p = operator new(0x280uLL);
  v142 = (char *)__p;
  v143 = (char *)__p + 640;
  mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder((uint64_t)&v140, (uint64_t)AffineExprFromFlatForm);
  if (v7)
  {
    v8 = *((_QWORD *)v142 - 10);
    v9 = *((unsigned int *)v142 - 18);
    mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v125);
    if ((v10 & 1) != 0
      || AffineExprFromFlatForm != mlir::getAffineExprFromFlatForm(v8, v9, a2, a3, (unint64_t *)v147, v148[0], *AffineExprFromFlatForm))
    {
      mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v125);
      if (v11)
      {
        AffineExprFromFlatForm = mlir::getAffineExprFromFlatForm(v8, v9, a2, a3, (unint64_t *)v147, v148[0], *AffineExprFromFlatForm);
        v13 = v142 - 80;
        v12 = (char *)*((_QWORD *)v142 - 10);
        if (v12 != v142 - 64)
          free(v12);
        v142 = v13;
        goto LABEL_106;
      }
      v14 = (unint64_t *)v147;
      v119 = v148[0];
      v15 = *AffineExprFromFlatForm;
      v150 = 0;
      v127 = v15;
      v124 = v15;
      AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v15);
      v135 = (mlir::MLIRContext **)mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v127, &v150);
      v133[0] = 0;
      v133[1] = 0;
      v134 = 0;
      v131[0] = 0;
      v131[1] = 0;
      v132 = 0;
      v150 = v152;
      v151 = 0x800000000;
      v17 = a3 + a2;
      v123 = v8;
      v116 = a2;
      v115 = v9;
      v114 = a3 + a2;
      if ((int)a3 + (int)a2 <= a2)
      {
        v19 = 0;
        v28 = a2;
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = a3;
        if (a2 > a3)
          LODWORD(a3) = a2;
        v121 = a2;
        v117 = v20;
        v21 = v20;
        v22 = v8 + 8 * a2;
        do
        {
          v24 = *(_QWORD *)(v22 + 8 * v18);
          if (v24)
          {
            LODWORD(v136) = v18;
            v127 = v124;
            v25 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v124);
            LODWORD(v138) = 7;
            v26 = mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(v25, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v127, (unsigned int *)&v138, (unsigned int *)&v136);
            v27 = v151;
            if (v151 >= (unint64_t)HIDWORD(v151))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v152, v151 + 1, 8);
              v27 = v151;
            }
            v23 = v18 | ((unint64_t)(v19 + a3) << 32);
            v150[v27] = v23;
            ++v19;
            LODWORD(v151) = v151 + 1;
            v136 = v23;
            v137[0] = v24;
            llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v131, (int *)&v136, v137, (uint64_t)&v127);
            v136 = v23;
            v137[0] = v26;
            llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v133, (int *)&v136, v137, (uint64_t)&v127);
          }
          ++v18;
        }
        while (v21 != (_DWORD)v18);
        v17 = v114;
        v28 = v121;
        LODWORD(a3) = v117;
      }
      v29 = ~(v28 + a3) + v9;
      v127 = &v130;
      v129 = 4;
      if (v29 < 5)
      {
        if (!v29)
        {
LABEL_25:
          v128 = ~(v28 + a3) + v9;
          v31 = v123 + 8 * v17;
          v122 = v28;
          if ((_DWORD)v119)
          {
            v32 = 0;
            v33 = v116;
            if (v116 <= a3)
              v33 = a3;
            v118 = v33;
            v34 = &v139;
            v35 = 8 * v119;
            v120 = 0xFFFFFFFFLL;
            v113 = v123 + 8 * v17;
            while (1)
            {
              v37 = *(_QWORD *)(v31 + 8 * v32);
              if (!v37)
                goto LABEL_32;
              v38 = v14[v32];
              v39 = *(_QWORD *)(v38 + 16);
              v40 = *(_DWORD *)(v39 + 8);
              if ((v40 & 0xFFFFFFFE) != 6)
                goto LABEL_32;
              v41 = *(_QWORD *)(v38 + 24);
              v42 = *(_DWORD *)(v41 + 8);
              if ((v42 - 6) >= 2)
                break;
              v43 = *(unsigned int *)(v39 + 16);
              v44 = v151;
              if (v40 == 6)
              {
                v45 = v34;
                v46 = *(unsigned int *)(v41 + 16);
                if (v151 >= (unint64_t)HIDWORD(v151))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v152, v151 + 1, 8);
                  v44 = v151;
                }
                v47 = v43 | (v46 << 32);
                v150[v44] = v47;
                LODWORD(v151) = v151 + 1;
                v138 = v47;
                v139 = v37;
                v34 = v45;
                llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v131, (int *)&v138, v45, (uint64_t)&v136);
                v138 = v47;
                v139 = v38;
                llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v133, (int *)&v138, v45, (uint64_t)&v136);
                v31 = v113;
                goto LABEL_31;
              }
              if (v151 >= (unint64_t)HIDWORD(v151))
                goto LABEL_46;
LABEL_30:
              v36 = v43 | ((unint64_t)(v19 + v118) << 32);
              v150[v44] = v36;
              ++v19;
              LODWORD(v151) = v151 + 1;
              v138 = v36;
              v139 = v37;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v131, (int *)&v138, v34, (uint64_t)&v136);
              v138 = v36;
              v139 = v38;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v133, (int *)&v138, v34, (uint64_t)&v136);
LABEL_31:
              *((_BYTE *)v127 + v32) = 1;
LABEL_32:
              ++v32;
              v35 -= 8;
              if (!v35)
                goto LABEL_48;
            }
            if (v42 != 5)
              goto LABEL_32;
            v43 = *(unsigned int *)(v39 + 16);
            if (v40 == 6)
            {
              v48 = v151;
              if (v151 >= (unint64_t)HIDWORD(v151))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v152, v151 + 1, 8);
                v48 = v151;
              }
              v49 = v43 | (v120 << 32);
              v150[v48] = v49;
              LODWORD(v151) = v151 + 1;
              v138 = v49;
              v139 = v37;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v131, (int *)&v138, v34, (uint64_t)&v136);
              v138 = v49;
              v139 = v38;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v133, (int *)&v138, v34, (uint64_t)&v136);
              v120 = (v120 - 1);
              v28 = v122;
              goto LABEL_31;
            }
            v44 = v151;
            if (v151 < (unint64_t)HIDWORD(v151))
              goto LABEL_30;
LABEL_46:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v152, v44 + 1, 8);
            v44 = v151;
            goto LABEL_30;
          }
          v120 = 0xFFFFFFFFLL;
LABEL_48:
          v50 = v123;
          if (v116)
          {
            v51 = 0;
            v52 = v120;
            do
            {
              v54 = *(_QWORD *)(v50 + 8 * v51);
              if (v54)
              {
                LODWORD(v138) = v51;
                v136 = (unint64_t)v124;
                v55 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v124);
                LODWORD(v126) = 6;
                v56 = mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(v55, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v136, (unsigned int *)&v126, (unsigned int *)&v138);
                v57 = v151;
                if (v151 >= (unint64_t)HIDWORD(v151))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v152, v151 + 1, 8);
                  v57 = v151;
                }
                v53 = v51 | (v52 << 32);
                v150[v57] = v53;
                v52 = (v52 - 1);
                LODWORD(v151) = v151 + 1;
                v138 = v53;
                v139 = v54;
                llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v131, (int *)&v138, &v139, (uint64_t)&v136);
                v138 = v53;
                v139 = v56;
                llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v133, (int *)&v138, &v139, (uint64_t)&v136);
                v28 = v122;
                v50 = v123;
              }
              ++v51;
            }
            while (v28 != v51);
          }
          v58 = 126 - 2 * __clz(v151);
          if ((_DWORD)v151)
            v59 = v58;
          else
            v59 = 0;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *,false>((uint64_t)v150, (unsigned int *)&v150[v151], (uint64_t)&v136, v59, 1);
          if (!(_DWORD)v151)
          {
LABEL_91:
            v97 = (v115 - 1);
            if (v114 < v97)
            {
              v98 = 0;
              v99 = v97 - v114;
              do
              {
                if (*(_QWORD *)(v31 + 8 * v98) && !*((_BYTE *)v127 + v98))
                {
                  v100 = *(mlir::MLIRContext **)*v14;
                  v136 = *(_QWORD *)(v31 + 8 * v98);
                  v138 = (unint64_t)v100;
                  v101 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v100);
                  v102 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v101, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v138, &v136);
                  v103 = mlir::AffineExpr::operator*(v14, v102);
                  v135 = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v135, v103);
                }
                ++v98;
                ++v14;
              }
              while (v99 != v98);
            }
            if (*(_QWORD *)(v50 + 8 * v115 - 8))
            {
              v104 = *v135;
              v136 = *(_QWORD *)(v50 + 8 * v115 - 8);
              v138 = (unint64_t)v104;
              v105 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v104);
              v106 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v105, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v138, &v136);
              v135 = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v135, v106);
            }
            if (v127 != &v130)
              free(v127);
            if (v150 != v152)
              free(v150);
            llvm::deallocate_buffer(v131[0], (void *)(16 * v132));
          }
          v60 = (char *)v150;
          v61 = (char *)&v150[v151];
          while (1)
          {
            v74 = *(_DWORD *)v60;
            v75 = *((_DWORD *)v60 + 1);
            if (!v134)
              goto LABEL_84;
            v76 = ((37 * v75) | ((unint64_t)(37 * v74) << 32))
                + ~((unint64_t)(37 * v75) << 32);
            v77 = (v76 ^ (v76 >> 22)) + ~((v76 ^ (v76 >> 22)) << 13);
            v78 = (9 * (v77 ^ (v77 >> 8))) ^ ((9 * (v77 ^ (v77 >> 8))) >> 15);
            v79 = (v134 - 1) & (((v78 + ~(v78 << 27)) >> 31) ^ ((_DWORD)v78 + ~((_DWORD)v78 << 27)));
            v80 = (int *)((char *)v133[0] + 16 * v79);
            v82 = *v80;
            v81 = v80[1];
            if (v74 != v82 || v75 != v81)
              break;
LABEL_75:
            v84 = (mlir::MLIRContext **)*((_QWORD *)v133[0] + 2 * v79 + 1);
            v126 = v84;
            v85 = v132;
            if (!v132)
              goto LABEL_67;
LABEL_85:
            v90 = ((37 * v75) | ((unint64_t)(37 * v74) << 32))
                + ~((unint64_t)(37 * v75) << 32);
            v91 = (v90 ^ (v90 >> 22)) + ~((v90 ^ (v90 >> 22)) << 13);
            v92 = (9 * (v91 ^ (v91 >> 8))) ^ ((9 * (v91 ^ (v91 >> 8))) >> 15);
            v93 = ((v92 + ~(v92 << 27)) >> 31) ^ (v92 + ~((_DWORD)v92 << 27));
            v94 = v85 - 1;
            v64 = (v85 - 1) & v93;
            v95 = (int *)((char *)v131[0] + 16 * v64);
            v67 = *v95;
            v66 = v95[1];
            if (v74 == v67 && v75 == v66)
            {
LABEL_90:
              v69 = *((_QWORD *)v131[0] + 2 * v64 + 1);
              goto LABEL_68;
            }
            v63 = 1;
            while (v67 != -1 || v66 != 0x7FFFFFFF)
            {
              v62 = v64 + v63++;
              v64 = v62 & v94;
              v65 = (int *)((char *)v131[0] + 16 * v64);
              v67 = *v65;
              v66 = v65[1];
              if (v74 == v67 && v75 == v66)
                goto LABEL_90;
            }
LABEL_67:
            v69 = 0;
LABEL_68:
            v70 = *v84;
            v136 = v69;
            v138 = (unint64_t)v70;
            v71 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v70);
            v72 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v71, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v138, &v136);
            v73 = mlir::AffineExpr::operator*((unint64_t *)&v126, v72);
            v135 = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v135, v73);
            v60 += 8;
            if (v60 == v61)
              goto LABEL_91;
          }
          v86 = 1;
          while (v82 != -1 || v81 != 0x7FFFFFFF)
          {
            v87 = v79 + v86++;
            v79 = v87 & (v134 - 1);
            v88 = (int *)((char *)v133[0] + 16 * v79);
            v82 = *v88;
            v81 = v88[1];
            if (v74 == v82 && v75 == v81)
              goto LABEL_75;
          }
LABEL_84:
          v84 = 0;
          v126 = 0;
          v85 = v132;
          if (!v132)
            goto LABEL_67;
          goto LABEL_85;
        }
        v30 = &v130;
      }
      else
      {
        v128 = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v127, &v130, ~(v28 + a3) + v9, 1);
        v30 = (uint64_t *)v127;
      }
      bzero(v30, ~(v28 + a3) + v9);
      goto LABEL_25;
    }
  }
LABEL_106:
  v140 = &off_24C04FB38;
  if (v147 != v149)
    free(v147);
  v107 = (char *)__p;
  if (__p)
  {
    v108 = v142;
    v109 = __p;
    if (v142 != __p)
    {
      do
      {
        v111 = (char *)*((_QWORD *)v108 - 10);
        v108 -= 80;
        v110 = v111;
        if (v108 + 16 != v111)
          free(v110);
      }
      while (v108 != v107);
      v109 = __p;
    }
    v142 = v107;
    operator delete(v109);
  }
  return AffineExprFromFlatForm;
}

uint64_t simplifySemiAffine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 **v23;
  uint64_t v24;
  unsigned __int8 **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned __int8 **AffineUniquer;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  mlir::MLIRContext **v36;
  uint64_t v37;
  mlir::MLIRContext **v38;
  mlir::MLIRContext *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[7];

  v43[6] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 8);
  v6 = a1;
  if (((1 << v3) & 0x1C) != 0)
  {
    v10 = simplifySemiAffine(*(_QWORD *)(a1 + 16), a2, a3);
    v11 = simplifySemiAffine(*(_QWORD *)(v6 + 24), a2, a3);
    v41 = v43;
    v42 = 0x600000000;
    v36 = (mlir::MLIRContext **)v10;
    getSummandExprs(v10, (uint64_t)&v41);
    v12 = v42;
    if (!(_DWORD)v42)
    {
LABEL_42:
      v14 = 0;
LABEL_43:
      if (v41 != v43)
        free(v41);
      if (v14)
        goto LABEL_46;
      v31 = simplifySemiAffine(*(_QWORD *)(v6 + 24), a2, a3);
      if (!v31 || *(_DWORD *)(v31 + 8) != 7)
      {
        v34 = *(_DWORD *)(v6 + 8);
        v41 = v36;
        switch(v34)
        {
          case 0:
LABEL_54:
            v9 = mlir::AffineExpr::operator+((unint64_t *)&v41, v11);
            break;
          case 1:
LABEL_55:
            v8 = v11;
            return mlir::AffineExpr::operator*((unint64_t *)&v41, v8);
          case 3:
LABEL_59:
            v9 = mlir::AffineExpr::floorDiv((mlir::MLIRContext ***)&v41, v11);
            break;
          case 4:
LABEL_60:
            v9 = mlir::AffineExpr::ceilDiv((unint64_t *)&v41, v11);
            break;
          default:
LABEL_57:
            v8 = v11;
            return mlir::AffineExpr::operator%((unint64_t *)&v41, v8);
        }
        return v9;
      }
      v32 = *(_DWORD *)(v6 + 8);
      isDivisibleBySymbol(*(_QWORD *)(v6 + 16));
      if ((v33 & 1) == 0)
      {
        v41 = v36;
        switch(v32)
        {
          case 0:
            goto LABEL_54;
          case 1:
            goto LABEL_55;
          case 3:
            goto LABEL_59;
          case 4:
            goto LABEL_60;
          default:
            goto LABEL_57;
        }
      }
      if (v32 == 2)
      {
LABEL_46:
        v40 = *(_QWORD *)v6;
        v41 = 0;
        AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer((mlir::MLIRContext *)v40);
        return mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v40, &v41);
      }
      else
      {
        symbolicDivide((uint64_t)v36);
      }
      return v9;
    }
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v15 = *((_QWORD *)v41 + v13);
      if (v15)
        v16 = *(_DWORD *)(v15 + 8) == 1;
      else
        v16 = 0;
      if (!v16)
        goto LABEL_9;
      v17 = *(_QWORD *)(v15 + 16);
      v18 = *(_DWORD *)(v17 + 8);
      if (v17)
        v19 = v18 == 5;
      else
        v19 = 0;
      if (v19 && *(_QWORD *)(v17 + 16) == -1)
      {
        v17 = *(_QWORD *)(v15 + 24);
        if (*(_DWORD *)(v17 + 8) != 2)
          goto LABEL_9;
      }
      else
      {
        v20 = *(_QWORD *)(v15 + 24);
        if (v20)
          v21 = *(_DWORD *)(v20 + 8) == 5;
        else
          v21 = 0;
        if (!v21 || *(_QWORD *)(v20 + 16) != -1 || v18 != 2)
          goto LABEL_9;
      }
      if (*(_QWORD *)(v17 + 24) == v11)
      {
        v22 = v11;
        v39 = *v36;
        v40 = 0;
        v23 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v39);
        v24 = 0;
        v37 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v23, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v39, &v40);
        do
        {
          if (v13 != v24)
            v37 = mlir::AffineExpr::operator+((unint64_t *)&v37, *((_QWORD *)v41 + v24));
          ++v24;
        }
        while (v12 != v24);
        v38 = *(mlir::MLIRContext ***)(v17 + 16);
        v39 = *v38;
        v40 = -1;
        v25 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v39);
        v26 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v25, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v39, &v40);
        v27 = mlir::AffineExpr::operator*((unint64_t *)&v38, v26);
        v37 = mlir::AffineExpr::operator+((unint64_t *)&v37, v27);
        v28 = mlir::simplifyAffineExpr(v37, a2, a3);
        if (v28)
          v29 = *(_DWORD *)(v28 + 8) == 5;
        else
          v29 = 0;
        if (v29 && !*(_QWORD *)(v28 + 16))
        {
          v11 = v22;
          goto LABEL_43;
        }
        v11 = v22;
      }
LABEL_9:
      v14 = ++v13 < v12;
      if (v13 == v12)
        goto LABEL_42;
    }
  }
  if (((1 << v3) & 0xE0) == 0)
  {
    v7 = (void *)simplifySemiAffine(*(_QWORD *)(a1 + 16), a2, a3);
    v8 = simplifySemiAffine(*(_QWORD *)(v6 + 24), a2, a3);
    v41 = v7;
    if (v3 == 1)
      return mlir::AffineExpr::operator*((unint64_t *)&v41, v8);
    if (v3)
      return mlir::AffineExpr::operator%((unint64_t *)&v41, v8);
    return mlir::AffineExpr::operator+((unint64_t *)&v41, v8);
  }
  return v6;
}

void mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2072A0764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int64x2_t *v9;
  int64x2_t *v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;

  if (!mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkOperandsPostOrder(v0, v1))
    return 0;
  v2 = *(_QWORD *)(v0 + 16);
  v4 = v2 - 80;
  v3 = *(int64x2_t **)(v2 - 80);
  v5 = *(unsigned int *)(v2 - 72);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v2 - 160);
    if (v5 < 6
      || (v6 < (unint64_t)v3 + 8 * v5 ? (v7 = (unint64_t)v3 >= v6 + 8 * v5) : (v7 = 1), !v7))
    {
      v8 = 0;
LABEL_15:
      v14 = v5 - v8;
      v15 = v8;
      v16 = (_QWORD *)(v6 + v15 * 8);
      v17 = &v3->i64[v15];
      do
      {
        v18 = *v17++;
        *v16++ += v18;
        --v14;
      }
      while (v14);
      goto LABEL_17;
    }
    v8 = v5 & 0xFFFFFFFC;
    v9 = v3 + 1;
    v10 = (int64x2_t *)(v6 + 16);
    v11 = v8;
    do
    {
      v12 = vaddq_s64(*v10, *v9);
      v10[-1] = vaddq_s64(v10[-1], v9[-1]);
      *v10 = v12;
      v9 += 2;
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v8 != v5)
      goto LABEL_15;
  }
LABEL_17:
  if (v3 != (int64x2_t *)(v2 - 64))
    free(v3);
  *(_QWORD *)(v0 + 16) = v4;
  return 1;
}

void mlir::SimpleAffineExprFlattener::~SimpleAffineExprFlattener(mlir::SimpleAffineExprFlattener *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24C04FB38;
  v2 = (char *)*((_QWORD *)this + 6);
  if (v2 != (char *)this + 64)
    free(v2);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v7 = *(void **)(v4 - 80);
        v4 -= 80;
        v6 = v7;
        if ((void *)(v4 + 16) != v7)
          free(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24C04FB38;
  v2 = (char *)*((_QWORD *)this + 6);
  if (v2 != (char *)this + 64)
    free(v2);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v7 = *(void **)(v4 - 80);
        v4 -= 80;
        v6 = v7;
        if ((void *)(v4 + 16) != v7)
          free(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x20BD002F8);
}

unint64_t mlir::getBoundForAffineExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t BoundForAffineExpr;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  void *v42;
  char *v43;
  char *v44;
  void *v45;
  char *v46;
  char *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (**v61)(mlir::SimpleAffineExprFlattener *__hidden);
  void *__p;
  char *v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[5];

  v70[4] = *MEMORY[0x24BDAC8D0];
  if (!a1 || (v14 = *(_DWORD *)(a1 + 8), v14 > 4))
  {
LABEL_32:
    v61 = &off_24C04FB38;
    v65 = a2;
    v66 = a3;
    v67 = 0;
    v68 = v70;
    v69 = 0x400000000;
    __p = operator new(0x280uLL);
    v63 = (char *)__p;
    v64 = (char *)__p + 640;
    mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder((uint64_t)&v61, a1);
    if (!v41 || v67)
    {
LABEL_34:
      LOBYTE(v17) = 0;
      v19 = 0;
      v61 = &off_24C04FB38;
      v42 = v68;
      if (v68 == v70)
        goto LABEL_36;
      goto LABEL_35;
    }
    v49 = (a3 + a2);
    if (!((_DWORD)a3 + (_DWORD)a2))
    {
      v51 = 0;
LABEL_64:
      v17 = *(_QWORD *)(*((_QWORD *)v63 - 10) + 8 * *((unsigned int *)v63 - 18) - 8) + v51;
      v19 = v17 & 0xFFFFFFFFFFFFFF00;
      v61 = &off_24C04FB38;
      v42 = v68;
      if (v68 == v70)
        goto LABEL_36;
LABEL_35:
      free(v42);
LABEL_36:
      v43 = (char *)__p;
      if (__p)
      {
        v44 = v63;
        v45 = __p;
        if (v63 != __p)
        {
          do
          {
            v47 = (char *)*((_QWORD *)v44 - 10);
            v44 -= 80;
            v46 = v47;
            if (v44 + 16 != v47)
              free(v46);
          }
          while (v44 != v43);
          v45 = __p;
        }
        v63 = v43;
        operator delete(v45);
      }
      return v19 & 0xFFFFFFFFFFFFFF00 | v17;
    }
    v50 = 0;
    v51 = 0;
    if ((_DWORD)a8)
      v52 = a4;
    else
      v52 = a6;
    if ((_DWORD)a8)
      v53 = a6;
    else
      v53 = a4;
    v54 = (_BYTE *)(v53 + 8);
    v55 = (uint64_t *)*((_QWORD *)v63 - 10);
    while (1)
    {
      v57 = *v55++;
      v56 = v57;
      if (v57 < 1)
      {
        if ((v56 & 0x8000000000000000) == 0)
          goto LABEL_54;
        v58 = (_QWORD *)v52;
        if (!*(_BYTE *)(v52 + 8))
          goto LABEL_34;
      }
      else
      {
        if (!*v54)
          goto LABEL_34;
        v58 = (_QWORD *)(v53 + 16 * v50);
      }
      v51 += *v58 * v56;
LABEL_54:
      ++v50;
      v52 += 16;
      v54 += 16;
      if (!--v49)
        goto LABEL_64;
    }
  }
  if (v14 == 2)
  {
    v29 = *(_QWORD *)(a1 + 24);
    if (v29)
    {
      if (*(_DWORD *)(v29 + 8) == 5)
      {
        v30 = *(_QWORD *)(v29 + 16);
        if (v30 >= 1)
        {
          BoundForAffineExpr = mlir::getBoundForAffineExpr(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, 0);
          v32 = a8;
          v34 = v33;
          v35 = a6;
          v36 = v32;
          v37 = mlir::getBoundForAffineExpr(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, v35, a7, v32);
          if (v38
            && v34
            && ((v39 = (unint64_t)v30 >> 63, BoundForAffineExpr)
             && (unint64_t)BoundForAffineExpr >> 63 != (_DWORD)v39
              ? (v40 = ~(~BoundForAffineExpr / v30))
              : (v40 = BoundForAffineExpr / v30),
                v37 && (unint64_t)v37 >> 63 != (_DWORD)v39 ? (v59 = ~(~v37 / v30)) : (v59 = v37 / v30),
                v40 == v59))
          {
            if (v36)
              v60 = v37;
            else
              v60 = BoundForAffineExpr;
            v17 = (v30 & ((v60 % v30) >> 63)) + v60 % v30;
          }
          else if (v36)
          {
            v17 = v30 - 1;
          }
          else
          {
            v17 = 0;
          }
          goto LABEL_80;
        }
      }
    }
    goto LABEL_32;
  }
  if (v14 != 4)
  {
    if (v14 == 3)
    {
      LOBYTE(v17) = 0;
      v18 = *(_QWORD *)(a1 + 24);
      if (v18)
      {
        v19 = 0;
        if (*(_DWORD *)(v18 + 8) == 5)
        {
          if (*(uint64_t *)(v18 + 16) >= 1)
          {
            v20 = *(_QWORD *)(a1 + 24);
            v21 = mlir::getBoundForAffineExpr(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
            if (v22)
            {
              v23 = *(_QWORD *)(v20 + 16);
              v24 = -1;
              if (v23 < 0)
                v24 = 1;
              if (v21 && (unint64_t)v21 >> 63 != (unint64_t)v23 >> 63)
              {
                v17 = ~((v24 - v21) / v23);
LABEL_80:
                v19 = v17 & 0xFFFFFFFFFFFFFF00;
                return v19 & 0xFFFFFFFFFFFFFF00 | v17;
              }
LABEL_66:
              v17 = v21 / v23;
              goto LABEL_80;
            }
          }
LABEL_61:
          LOBYTE(v17) = 0;
          v19 = 0;
          return v19 & 0xFFFFFFFFFFFFFF00 | v17;
        }
        return v19 & 0xFFFFFFFFFFFFFF00 | v17;
      }
LABEL_62:
      v19 = 0;
      return v19 & 0xFFFFFFFFFFFFFF00 | v17;
    }
    goto LABEL_32;
  }
  LOBYTE(v17) = 0;
  v25 = *(_QWORD *)(a1 + 24);
  if (!v25)
    goto LABEL_62;
  v19 = 0;
  if (*(_DWORD *)(v25 + 8) == 5)
  {
    if (*(uint64_t *)(v25 + 16) >= 1)
    {
      v26 = *(_QWORD *)(a1 + 24);
      v21 = mlir::getBoundForAffineExpr(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
      if (v27)
      {
        v23 = *(_QWORD *)(v26 + 16);
        v28 = v21 - 1;
        if (v21 && v21 < 1 != v23 > 0)
        {
          if (v23 <= 0)
            v28 = v21 + 1;
          v17 = v28 / v23 + 1;
          goto LABEL_80;
        }
        goto LABEL_66;
      }
    }
    goto LABEL_61;
  }
  return v19 & 0xFFFFFFFFFFFFFF00 | v17;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned __int8 **v28;
  _QWORD v29[2];
  uint64_t *v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;

  v5 = &unk_25451B000;
  if ((v6 & 1) == 0)
  {
    v27 = a5;
    v28 = a1;
    v25 = a3;
    v26 = a4;
    v24 = a2;
    v5 = (_QWORD *)&unk_25451B000;
    a2 = v24;
    a3 = v25;
    a4 = v26;
    a5 = v27;
    v16 = v15;
    a1 = v28;
    if (v16)
    {
      v32 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineDimExprStorage]";
      v33 = 84;
      v17 = llvm::StringRef::find((uint64_t *)&v32, "DesiredTypeName = ", 0x12uLL, 0);
      if (v33 >= v17)
        v18 = v17;
      else
        v18 = v33;
      v19 = &v32[v18];
      v20 = v33 - v18;
      if (v33 - v18 >= 0x12)
        v21 = 18;
      else
        v21 = v33 - v18;
      v22 = v20 - v21;
      if (v22 >= v22 - 1)
        v23 = v22 - 1;
      else
        v23 = v22;
      mlir::detail::TypeIDResolver<mlir::detail::AffineDimExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      v5 = (_QWORD *)&unk_25451B000;
      a2 = v24;
      a3 = v25;
      a4 = v26;
      a5 = v27;
      a1 = v28;
    }
  }
  v7 = v5[79];
  v32 = a2;
  v33 = a3;
  v8 = *a4;
  v9 = *a5;
  v10 = v8 | (v9 << 32);
  v11 = ((37 * v9) | ((unint64_t)(37 * v8) << 32))
      + ~((unint64_t)(37 * v9) << 32);
  v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
  v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  v30 = &v31;
  v31 = v10;
  v29[0] = &v31;
  v29[1] = &v32;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v7, ((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineDimExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>,mlir::TypeID,unsigned int,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v30, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineDimExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>,mlir::TypeID,unsigned int,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v29);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineDimExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>,mlir::TypeID,unsigned int,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **(_DWORD **)a1 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(*(_QWORD *)a1 + 4);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineDimExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>,mlir::TypeID,unsigned int,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;

  v4 = *(_DWORD **)a1;
  *(_QWORD *)(a2 + 80) += 24;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 24 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 24;
  v11 = v4[1];
  *(_DWORD *)(v10 + 8) = *v4;
  *(_DWORD *)(v10 + 16) = v11;
  v12 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v12)
    (*(void (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 8), v10);
  return v10;
}

_QWORD *llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void isDivisibleBySymbol(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_2072A1208()
{
  uint64_t v0;
  char v1;

  isDivisibleBySymbol(*(_QWORD *)(v0 + 16));
  if ((v1 & 1) == 0)
    JUMPOUT(0x2072A11ECLL);
  return 1;
}

void symbolicDivide(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_2072A12E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  mlir::MLIRContext **v3;
  uint64_t v4;
  mlir::MLIRContext **v6[23];

  v3 = (mlir::MLIRContext **)((uint64_t (*)(_QWORD, uint64_t, uint64_t))symbolicDivide)(*(_QWORD *)(v0 + 16), v1, v2);
  v4 = *(_QWORD *)(v0 + 24);
  v6[0] = v3;
  if ((_DWORD)v2 == 4)
    return mlir::AffineExpr::ceilDiv((unint64_t *)v6, v4);
  if ((_DWORD)v2 == 3)
    return mlir::AffineExpr::floorDiv(v6, v4);
  return mlir::AffineExpr::operator%((unint64_t *)v6, v4);
}

void getSummandExprs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v3 = a1;
  if (a1 && !*(_DWORD *)(a1 + 8))
  {
    do
    {
      getSummandExprs(*(_QWORD *)(v3 + 16), a2);
      v3 = *(_QWORD *)(v3 + 24);
      if (v3)
        v4 = *(_DWORD *)(v3 + 8) == 0;
      else
        v4 = 0;
    }
    while (v4);
  }
  v5 = *(unsigned int *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v3;
  ++*(_DWORD *)(a2 + 8);
}

char *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  char *result;
  int v17;
  int v18;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  BOOL v24;
  unsigned int v26;

  v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a1;
    v10 = *a2;
    v11 = a2[1];
    v12 = ((37 * v11) | ((unint64_t)(37 * *a2) << 32))
        + ~((unint64_t)(37 * v11) << 32);
    v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
    v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
    v15 = (v8 - 1) & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
    result = (char *)(*(_QWORD *)a1 + 16 * v15);
    v18 = *(_DWORD *)result;
    v17 = *((_DWORD *)result + 1);
    if (v10 == *(_DWORD *)result && v11 == v17)
    {
LABEL_7:
      *(_QWORD *)a4 = result;
      *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
      *(_BYTE *)(a4 + 16) = 0;
      return result;
    }
    v22 = 0;
    v23 = 1;
    while (v18 != -1 || v17 != 0x7FFFFFFF)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v17 == 0x80000000;
      if (v24 && v18 == -2)
        v22 = result;
      v26 = v15 + v23++;
      v15 = v26 & (v8 - 1);
      result = (char *)(v9 + 16 * v15);
      v18 = *(_DWORD *)result;
      v17 = *((_DWORD *)result + 1);
      if (v10 == *(_DWORD *)result && v11 == v17)
        goto LABEL_7;
    }
    if (v22)
      v20 = v22;
    else
      v20 = result;
  }
  else
  {
    v20 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::InsertIntoBucket<std::pair<unsigned int,int>,long long>(a1, v20, a2, a3);
  v21 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v21;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::InsertIntoBucket<std::pair<unsigned int,int>,long long>(uint64_t a1, char *a2, _DWORD *a3, _QWORD *a4)
{
  int v7;
  uint64_t v8;
  int v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *buffer;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  char *v33;
  int v34;
  BOOL v35;
  unsigned int v37;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v11 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
      goto LABEL_3;
    v11 = *(_DWORD *)(a1 + 16);
  }
  v12 = *(int **)a1;
  v13 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
  v14 = v13 | (v13 >> 2) | ((v13 | (v13 >> 2)) >> 4);
  v15 = ((v14 | (v14 >> 8)) >> 16) | v14 | (v14 >> 8);
  if ((v15 + 1) > 0x40)
    v16 = v15 + 1;
  else
    v16 = 64;
  *(_DWORD *)(a1 + 16) = v16;
  buffer = llvm::allocate_buffer(16 * v16, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v12)
  {
    v18 = (char *)(16 * v8);
    llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::moveFromOldBuckets(a1, v12, (int *)&v18[(_QWORD)v12]);
    llvm::deallocate_buffer((llvm *)v12, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = buffer;
    if (((v19 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_48;
    v21 = ((v19 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v20 = &buffer[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = buffer + 2;
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = 0x7FFFFFFFFFFFFFFFLL;
      *v22 = 0x7FFFFFFFFFFFFFFFLL;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_48:
      do
      {
        *v20 = 0x7FFFFFFFFFFFFFFFLL;
        v20 += 2;
      }
      while (v20 != &buffer[2 * v19]);
    }
    v24 = a3[1];
    v25 = ((37 * v24) | ((unint64_t)(37 * *a3) << 32))
        + ~((unint64_t)(37 * v24) << 32);
    v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
    v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
    v28 = v19 - 1;
    v29 = v28 & (((v27 + ~(v27 << 27)) >> 31) ^ (v27 + ~((_DWORD)v27 << 27)));
    a2 = (char *)&buffer[2 * v29];
    v30 = *(_DWORD *)a2;
    v31 = *((_DWORD *)a2 + 1);
    if (*a3 != *(_DWORD *)a2 || v24 != v31)
    {
      v33 = 0;
      v34 = 1;
      while (v30 != -1 || v31 != 0x7FFFFFFF)
      {
        if (v33)
          v35 = 0;
        else
          v35 = v31 == 0x80000000;
        if (v35 && v30 == -2)
          v33 = a2;
        v37 = v29 + v34++;
        v29 = v37 & v28;
        a2 = (char *)&buffer[2 * v29];
        v30 = *(_DWORD *)a2;
        v31 = *((_DWORD *)a2 + 1);
        if (*a3 == *(_DWORD *)a2 && v24 == v31)
          goto LABEL_3;
      }
      if (v33)
        a2 = v33;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1 || *((_DWORD *)a2 + 1) != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = *a3;
  *((_DWORD *)a2 + 1) = a3[1];
  *((_QWORD *)a2 + 1) = *a4;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::moveFromOldBuckets(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v22;
  int v23;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v5)
    {
      v6 = v5 + 1;
      v7 = (v5 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v8 = &v4[2 * v7];
      v9 = v4 + 2;
      v10 = v7;
      do
      {
        *(v9 - 2) = 0x7FFFFFFFFFFFFFFFLL;
        *v9 = 0x7FFFFFFFFFFFFFFFLL;
        v9 += 4;
        v10 -= 2;
      }
      while (v10);
      if (v6 == v7)
        goto LABEL_10;
    }
    else
    {
      v8 = *(_QWORD **)result;
    }
    v11 = &v4[2 * v3];
    do
    {
      *v8 = 0x7FFFFFFFFFFFFFFFLL;
      v8 += 2;
    }
    while (v8 != v11);
  }
LABEL_10:
  while (a2 != a3)
  {
    v22 = *a2;
    v23 = a2[1];
    if ((*a2 != -1 || v23 != 0x7FFFFFFF) && (v22 != -2 || v23 != 0x80000000))
    {
      v26 = ((37 * v23) | ((unint64_t)(37 * v22) << 32))
          + ~((unint64_t)(37 * v23) << 32);
      v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
      v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
      v29 = ((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~((_DWORD)v28 << 27));
      v30 = *(_DWORD *)(result + 16) - 1;
      v17 = v30 & v29;
      v18 = *(_QWORD *)result + 16 * v17;
      v19 = *(_DWORD *)v18;
      v20 = *(_DWORD *)(v18 + 4);
      if (v22 != *(_DWORD *)v18 || v23 != v20)
      {
        v14 = 0;
        v16 = 1;
        while (v19 != -1 || v20 != 0x7FFFFFFF)
        {
          if (v14)
            v12 = 0;
          else
            v12 = v20 == 0x80000000;
          if (v12 && v19 == -2)
            v14 = v18;
          v15 = v17 + v16++;
          v17 = v15 & v30;
          v18 = *(_QWORD *)result + 16 * (v15 & v30);
          v19 = *(_DWORD *)v18;
          v20 = *(_DWORD *)(v18 + 4);
          if (v22 == *(_DWORD *)v18 && v23 == v20)
            goto LABEL_29;
        }
        if (v14)
          v18 = v14;
      }
LABEL_29:
      *(_DWORD *)v18 = v22;
      *(_DWORD *)(v18 + 4) = a2[1];
      *(_QWORD *)(v18 + 8) = *((_QWORD *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
    a2 += 4;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  char v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  signed int v32;
  signed int v33;
  unsigned int v34;
  signed int v35;
  unsigned int *v36;
  BOOL v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  signed int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  signed int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  unint64_t v55;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  signed int v62;
  int *i;
  int v64;
  int v65;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = a2 - 2;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  v65 = a5;
  while (2)
  {
    v8 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = v12 >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v24 = *(a2 - 2);
        v25 = *v8;
        if (v24 < *v8 || v25 >= v24 && (int)*(a2 - 1) < (int)v8[1])
        {
          *v8 = v24;
          *(a2 - 2) = v25;
          v26 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v26;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v8, v8 + 2, v9);
      case 4uLL:
        result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v8, v8 + 2, v8 + 4);
        v27 = *(a2 - 2);
        v28 = v8[4];
        if (v27 >= v28 && (v28 < v27 || (int)*(a2 - 1) >= (int)v8[5]))
          return result;
        v8[4] = v27;
        *(a2 - 2) = v28;
        v29 = v8[5];
        v8[5] = *(a2 - 1);
        *(a2 - 1) = v29;
        v30 = v8[4];
        v31 = v8[2];
        if (v30 >= v31)
        {
          if (v31 < v30)
            return result;
          v33 = v8[5];
          v32 = v8[3];
          if (v33 >= v32)
            return result;
        }
        else
        {
          v32 = v8[3];
          v33 = v8[5];
        }
        v8[2] = v30;
        v8[3] = v33;
        v8[4] = v31;
        v8[5] = v32;
        v34 = *v8;
        if (v30 >= *v8)
        {
          if (v34 < v30)
            return result;
          v35 = v8[1];
          if (v33 >= v35)
            return result;
        }
        else
        {
          v35 = v8[1];
        }
        *v8 = v30;
        v8[1] = v33;
        v8[2] = v34;
        v8[3] = v35;
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v8, v8 + 2, v8 + 4, v8 + 6, v9);
      default:
        if (v12 > 191)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if (v8 != a2)
            {
              v52 = (v13 - 2) >> 1;
              v53 = v52 + 1;
              v54 = &v8[2 * v52];
              do
              {
                std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>((uint64_t)v8, a3, v12 >> 3, v54);
                v54 -= 2;
                --v53;
              }
              while (v53);
              v55 = (unint64_t)v12 >> 3;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<unsigned int,int> *>(v8, (uint64_t)a2, a3, v55);
                a2 -= 2;
              }
              while (v55-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = &v8[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v8, v16, v9);
            v17 = v9;
            v18 = &v8[2 * v15];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v8 + 2, v18 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v8 + 4, &v8[2 * v15 + 2], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v18 - 2, v16, &v8[2 * v15 + 2]);
            v19 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v18;
            *(_QWORD *)v18 = v19;
            v9 = v17;
            a5 = v65;
            if ((v65 & 1) != 0)
              goto LABEL_14;
          }
          v20 = *(v8 - 2);
          if (v20 >= *v8 && (*v8 < v20 || (int)*(v8 - 1) >= (int)v8[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,int> *,std::__less<void,void> &>(v8, a2);
            v10 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v21 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,int> *,std::__less<void,void> &>(v8, a2);
          if ((v22 & 1) == 0)
            goto LABEL_17;
          v23 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v8, v21);
          v10 = v21 + 2;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v21 + 2, a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v23)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *,false>(v8, v21, a3, -v14, a5 & 1);
            v10 = v21 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v21;
          if (v23)
            return result;
          goto LABEL_2;
        }
        v36 = v8 + 2;
        v38 = v8 == a2 || v36 == a2;
        if ((a5 & 1) == 0)
        {
          if (!v38)
          {
            v57 = v8 + 1;
            do
            {
              v58 = v8;
              v8 = v36;
              v59 = v58[2];
              v60 = *v58;
              if (v59 < *v58 || v60 >= v59 && (int)v58[3] < (int)v58[1])
              {
                v61 = *v8;
                v62 = v8[1];
                for (i = (int *)v57; ; i -= 2)
                {
                  v64 = *i;
                  i[1] = v60;
                  i[2] = v64;
                  v60 = *(i - 3);
                  if (v60 <= v61 && (v60 < v61 || *(i - 2) <= v62))
                    break;
                }
                *(i - 1) = v61;
                *i = v62;
              }
              v36 = v8 + 2;
              v57 += 2;
            }
            while (v8 + 2 != a2);
          }
          return result;
        }
        if (v38)
          return result;
        v39 = 0;
        v40 = v8;
        while (2)
        {
          v42 = v40;
          v40 = v36;
          v43 = v42[2];
          v44 = *v42;
          if (v43 >= *v42 && (v44 < v43 || (int)v42[3] >= (int)v42[1]))
            goto LABEL_43;
          v46 = v42[2];
          v45 = v42[3];
          v47 = v42[1];
          v42[2] = v44;
          v40[1] = v47;
          v41 = v8;
          if (v42 == v8)
            goto LABEL_42;
          v48 = v39;
          while (1)
          {
            v51 = *(unsigned int *)((char *)v8 + v48 - 8);
            if (v51 > v46)
            {
              v49 = *(unsigned int *)((char *)v8 + v48 - 4);
              goto LABEL_50;
            }
            if (v51 < v46)
            {
              v41 = (unsigned int *)((char *)v8 + v48);
              goto LABEL_42;
            }
            v49 = *(unsigned int *)((char *)v8 + v48 - 4);
            if (v49 <= v45)
              break;
LABEL_50:
            v42 -= 2;
            v50 = (unsigned int *)((char *)v8 + v48);
            *v50 = v51;
            v50[1] = v49;
            v48 -= 8;
            if (!v48)
            {
              v41 = v8;
              goto LABEL_42;
            }
          }
          v41 = v42;
LABEL_42:
          *v41 = v46;
          v41[1] = v45;
LABEL_43:
          v36 = v40 + 2;
          v39 += 8;
          if (v40 + 2 != a2)
            continue;
          return result;
        }
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  int *v14;
  int v15;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || (int)a2[1] >= (int)a1[1]))
  {
    v9 = *a3;
    if (*a3 < v3)
      goto LABEL_7;
    if (v3 < v9)
      return 0;
    if ((int)a3[1] < (int)a2[1])
    {
LABEL_7:
      *a2 = v9;
      *a3 = v3;
      v11 = (int *)(a2 + 1);
      v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      v12 = *a2;
      v13 = *a1;
      if (*a2 < *a1)
        goto LABEL_8;
      if (v13 < v12)
        return 1;
      if (*v11 < (int)a1[1])
      {
LABEL_8:
        *a1 = v12;
        v14 = (int *)(a1 + 1);
        *a2 = v13;
        v15 = *v14;
        *v14 = *v11;
        *v11 = v15;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && (int)a3[1] < (int)a2[1])
    {
      *a1 = v5;
      v6 = (int *)(a1 + 1);
      *a3 = v4;
      v7 = (int *)(a3 + 1);
      v8 = 1;
LABEL_13:
      v20 = *v6;
      *v6 = *v7;
      *v7 = v20;
      return v8;
    }
    *a1 = v3;
    *a2 = v4;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    v18 = *a3;
    v19 = *a2;
    if (*a3 < *a2)
    {
LABEL_12:
      *a2 = v18;
      *a3 = v19;
      v7 = (int *)(a3 + 1);
      v8 = 2;
      v6 = (int *)(a2 + 1);
      goto LABEL_13;
    }
    if (v19 >= v18)
    {
      if ((int)a3[1] < v17)
        goto LABEL_12;
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

unsigned int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || (int)*(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || (int)i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || (int)i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && (int)a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || (int)i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && (int)a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || (int)a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || (int)a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while ((int)a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unsigned int *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unsigned int *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && (int)v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || (int)v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  signed int v13;
  uint64_t v14;
  signed int v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  signed int v26;
  signed int v27;
  unsigned int v28;
  signed int v29;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = *(a2 - 2);
      v19 = *a1;
      if (v18 < *a1 || v19 >= v18 && (int)*(a2 - 1) < (int)a1[1])
      {
        *a1 = v18;
        *(a2 - 2) = v19;
        v20 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v20;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a1 + 2, a1 + 4);
      v21 = *(a2 - 2);
      v22 = a1[4];
      if (v21 >= v22 && (v22 < v21 || (int)*(a2 - 1) >= (int)a1[5]))
        return 1;
      a1[4] = v21;
      *(a2 - 2) = v22;
      v23 = a1[5];
      a1[5] = *(a2 - 1);
      *(a2 - 1) = v23;
      v24 = a1[4];
      v25 = a1[2];
      if (v24 >= v25)
      {
        if (v25 < v24)
          return 1;
        v27 = a1[5];
        v26 = a1[3];
        if (v27 >= v26)
          return 1;
      }
      else
      {
        v26 = a1[3];
        v27 = a1[5];
      }
      a1[2] = v24;
      a1[3] = v27;
      a1[4] = v25;
      a1[5] = v26;
      v28 = *a1;
      if (v24 < *a1)
      {
        v29 = a1[1];
LABEL_43:
        *a1 = v24;
        a1[1] = v27;
        result = 1;
        a1[2] = v28;
        a1[3] = v29;
        return result;
      }
      if (v28 >= v24)
      {
        v29 = a1[1];
        if (v27 < v29)
          goto LABEL_43;
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v6 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a1 + 2, a1 + 4);
      v7 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *v6;
        if (*v7 >= *v6 && (v11 < *v7 || (int)v7[1] >= (int)v6[1]))
          goto LABEL_7;
        v12 = *v7;
        v13 = v7[1];
        *v7 = v11;
        v7[1] = v6[1];
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v14 = v8;
        while (2)
        {
          v16 = (char *)a1 + v14;
          v17 = *(unsigned int *)((char *)a1 + v14 + 8);
          if (v17 > v12)
          {
            v15 = *((_DWORD *)v16 + 3);
LABEL_12:
            v6 -= 2;
            *((_DWORD *)v16 + 4) = v17;
            *(unsigned int *)((char *)a1 + v14 + 20) = v15;
            v14 -= 8;
            if (v14 == -16)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v17 < v12)
        {
          v10 = v6;
          goto LABEL_6;
        }
        v15 = *(unsigned int *)((char *)a1 + v14 + 12);
        if (v15 > v13)
          goto LABEL_12;
        v10 = (unsigned int *)((char *)a1 + v14 + 16);
LABEL_6:
        *v10 = v12;
        v10[1] = v13;
        if (++v9 == 8)
          return v7 + 2 == a2;
LABEL_7:
        v6 = v7;
        v8 += 8;
        v7 += 2;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  if (*a4 < *a3 || v12 >= v11 && (int)a4[1] < (int)a3[1])
  {
    *a3 = v11;
    *a4 = v12;
    v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    v14 = *a3;
    v15 = *a2;
    if (*a3 < *a2 || v15 >= v14 && (int)a3[1] < (int)a2[1])
    {
      *a2 = v14;
      *a3 = v15;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *a2;
      v18 = *a1;
      if (*a2 < *a1 || v18 >= v17 && (int)a2[1] < (int)a1[1])
      {
        *a1 = v17;
        *a2 = v18;
        v19 = a1[1];
        a1[1] = a2[1];
        a2[1] = v19;
      }
    }
  }
  v20 = *a5;
  v21 = *a4;
  if (*a5 < *a4 || v21 >= v20 && (int)a5[1] < (int)a4[1])
  {
    *a4 = v20;
    *a5 = v21;
    v22 = a4[1];
    a4[1] = a5[1];
    a5[1] = v22;
    v23 = *a4;
    v24 = *a3;
    if (*a4 < *a3 || v24 >= v23 && (int)a4[1] < (int)a3[1])
    {
      *a3 = v23;
      *a4 = v24;
      v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      v26 = *a3;
      v27 = *a2;
      if (*a3 < *a2 || v27 >= v26 && (int)a3[1] < (int)a2[1])
      {
        *a2 = v26;
        *a3 = v27;
        v28 = a2[1];
        a2[1] = a3[1];
        a3[1] = v28;
        v29 = *a2;
        v30 = *a1;
        if (*a2 < *a1 || v30 >= v29 && (int)a2[1] < (int)a1[1])
        {
          *a1 = v29;
          *a2 = v30;
          v31 = a1[1];
          a1[1] = a2[1];
          a2[1] = v31;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unsigned int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < (signed int)v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || (int)v8[1] >= (int)a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unsigned int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < (signed int)v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && (int)v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_13;
          }
        }
        v14 = v8;
LABEL_13:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<unsigned int,int> *>(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  int v20;
  unint64_t v21;
  unsigned int v22;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *(_QWORD *)result;
    v6 = result;
    do
    {
      v7 = v6;
      v8 = v4 + 1;
      v6 += 2 * v4 + 2;
      v9 = 2 * v4;
      v4 = (2 * v4) | 1;
      v10 = v9 + 2;
      if (v10 < a4)
      {
        v11 = v6[2];
        if (*v6 < v11 || v11 >= *v6 && (int)v7[2 * v8 + 1] < (int)v6[3])
        {
          v6 += 2;
          v4 = v10;
        }
      }
      *v7 = *v6;
      v7[1] = v6[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v6 == (unsigned int *)(a2 - 8))
    {
      *(_QWORD *)v6 = v5;
    }
    else
    {
      *v6 = *(_DWORD *)(a2 - 8);
      v6[1] = *(_DWORD *)(a2 - 4);
      *(_QWORD *)(a2 - 8) = v5;
      v12 = (char *)v6 - (char *)result + 8;
      if (v12 >= 9)
      {
        v13 = ((unint64_t)v12 >> 3) - 2;
        v14 = v13 >> 1;
        v15 = &result[2 * (v13 >> 1)];
        v16 = *v15;
        if (*v15 < *v6 || *v6 >= v16 && (int)result[2 * v14 + 1] < (int)v6[1])
        {
          v17 = *v6;
          v18 = v6[1];
          *v6 = v16;
          v6[1] = v15[1];
          if (v13 >= 2)
          {
            while (1)
            {
              v21 = v14 - 1;
              v14 = (v14 - 1) >> 1;
              v19 = &result[2 * v14];
              v22 = *v19;
              if (*v19 < v17)
              {
                v20 = v19[1];
              }
              else
              {
                if (v22 > v17)
                  break;
                v20 = result[2 * v14 + 1];
                if (v20 >= v18)
                  break;
              }
              *v15 = v22;
              v15[1] = v20;
              v15 = &result[2 * v14];
              if (v21 <= 1)
                goto LABEL_17;
            }
          }
          v19 = v15;
LABEL_17:
          *v19 = v17;
          v19[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineConstantExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>,mlir::TypeID,long long &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineConstantExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>,mlir::TypeID,long long &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 24;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 24 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 24;
  *(_DWORD *)(v10 + 8) = 5;
  *(_QWORD *)(v10 + 16) = *v4;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

_QWORD *llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t llvm::DenseMapInfo<std::tuple<unsigned int,mlir::AffineExpr,mlir::AffineExpr>,void>::getHashValueImpl<1u>(uint64_t a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v1 = *(_QWORD *)(a1 + 8);
  v3 = &unk_254519000;
  if ((v2 & 1) == 0)
  {
    v25 = a1;
    v27 = *(_QWORD *)(a1 + 8);
    v1 = v27;
    v3 = &unk_254519000;
    v20 = v19;
    a1 = v25;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v1 = v27;
      v3 = (_QWORD *)&unk_254519000;
      a1 = v25;
    }
  }
  v4 = v3[373];
  v5 = *(_QWORD *)(a1 + 16);
  if ((v6 & 1) == 0)
  {
    v28 = v1;
    v24 = v3[373];
    v26 = *(_QWORD *)(a1 + 16);
    v4 = v24;
    v5 = v26;
    v1 = v28;
    v3 = &unk_254519000;
    if (v22)
    {
      v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v23 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      v4 = v24;
      v5 = v26;
      v1 = v28;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v7 = HIDWORD(v1);
  v8 = (v4 + 8 * v1) ^ HIDWORD(v1);
  v9 = 0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
  v10 = HIDWORD(v5);
  v11 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v5) ^ HIDWORD(v5));
  v12 = 0xEB382D6900000000
      * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47))
      - 1;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27)) | (0xEB382D6900000000
                                                                                            * (v9 ^ (v9 >> 47))))
      + ~((unint64_t)(((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27))) << 32);
  v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
  v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
  return ((v17 + ~(v17 << 27)) >> 31) ^ ((_DWORD)v17 + ~((_DWORD)v17 << 27));
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineBinaryOpExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(llvm::function_ref<void ()(mlir::detail::AffineBinaryOpExprStorage *)>,mlir::TypeID,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *(_DWORD *)(a2 + 8)
      && *((_QWORD *)v2 + 1) == *(_QWORD *)(a2 + 16)
      && *((_QWORD *)v2 + 2) == *(_QWORD *)(a2 + 24);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineBinaryOpExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(llvm::function_ref<void ()(mlir::detail::AffineBinaryOpExprStorage *)>,mlir::TypeID,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::AffineBinaryOpExprStorage::construct(a2, *a1);
  v4 = a1[1];
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::detail::AffineBinaryOpExprStorage::construct(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t result;
  _QWORD *v10;

  *(_QWORD *)(a1 + 80) += 32;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 32 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 32;
  *(_DWORD *)(result + 8) = *(_DWORD *)a2;
  v10 = *(_QWORD **)(a2 + 8);
  *(_QWORD *)(result + 16) = v10;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)result = *v10;
  return result;
}

char *std::vector<llvm::SmallVector<long long,8u>>::__emplace_back_slow_path<llvm::SmallVector<long long,32u>>(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  v2 = *a1;
  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((a1[2] - v2) >> 4) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - v2) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 4) >= 0x199999999999999)
    v8 = 0x333333333333333;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(80 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[80 * v4];
  *(_QWORD *)v10 = v10 + 16;
  *((_QWORD *)v10 + 1) = 0x800000000;
  if (*(_DWORD *)(a2 + 8))
  {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v10, a2);
    v2 = *a1;
    v3 = a1[1];
  }
  v11 = &v9[80 * v8];
  v12 = v10 + 80;
  if (v3 == v2)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    v13 = 0;
    do
    {
      *(_QWORD *)&v10[v13 - 80] = &v10[v13 - 64];
      *(_QWORD *)&v10[v13 - 72] = 0x800000000;
      if (*(_DWORD *)&v3[v13 - 72])
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v10[v13 - 80], (uint64_t)&v3[v13 - 80]);
      v13 -= 80;
    }
    while (&v3[v13] != v2);
    v2 = *a1;
    v14 = a1[1];
    *a1 = &v10[v13];
    a1[1] = v12;
    a1[2] = v11;
    while (v14 != v2)
    {
      v16 = (char *)*((_QWORD *)v14 - 10);
      v14 -= 80;
      v15 = v16;
      if (v14 + 16 != v16)
        free(v15);
    }
  }
  if (v2)
    operator delete(v2);
  return v10 + 80;
}

BOOL mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkOperandsPostOrder(uint64_t a1, uint64_t a2)
{
  return mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder(a1, *(_QWORD *)(a2 + 16))&& mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder(a1, *(_QWORD *)(a2 + 24)) != 0;
}

uint64_t mlir::AffineMap::getConstantMap(mlir::AffineMap *this, mlir::MLIRContext *a2, mlir::MLIRContext *a3)
{
  uint64_t AffineConstantExpr;

  AffineConstantExpr = mlir::getAffineConstantExpr(this, a2, a3);
  return mlir::AffineMap::get(0, 0, AffineConstantExpr);
}

uint64_t mlir::AffineMap::getMultiDimIdentityMap(mlir::AffineMap *this, mlir::MLIRContext *a2, mlir::MLIRContext *a3)
{
  int v4;
  mlir *v5;
  uint64_t AffineDimExpr;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v4 = (int)this;
  v13[4] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = *(_QWORD *)"";
  if (this < 5)
  {
    if (!(_DWORD)this)
    {
      v8 = v12;
      goto LABEL_10;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, this, 8);
  }
  v5 = 0;
  do
  {
    AffineDimExpr = mlir::getAffineDimExpr(v5, a2, a3);
    v7 = v12;
    if (v12 >= (unint64_t)HIDWORD(v12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, v12 + 1, 8);
      v7 = v12;
    }
    *((_QWORD *)v11 + v7) = AffineDimExpr;
    v8 = v12 + 1;
    LODWORD(v12) = v12 + 1;
    v5 = (mlir *)((_DWORD)v5 + 1);
  }
  while (v4 != (_DWORD)v5);
LABEL_10:
  v9 = mlir::AffineMap::get(v4, 0, (uint64_t)v11, v8, a2);
  if (v11 != v13)
    free(v11);
  return v9;
}

uint64_t mlir::AffineMap::getResults(mlir::AffineMap *this)
{
  return *(_QWORD *)this + 24;
}

uint64_t mlir::AffineMap::getNumDims(mlir::AffineMap *this)
{
  return **(unsigned int **)this;
}

uint64_t mlir::AffineMap::getNumInputs(mlir::AffineMap *this)
{
  return (*(_DWORD *)(*(_QWORD *)this + 4) + **(_DWORD **)this);
}

double mlir::AffineMap::inferFromExprList@<D0>(mlir::AffineExpr **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t Context;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v4 = (uint64_t *)a1;
  v23 = *MEMORY[0x24BDAC8D0];
  Context = mlir::AffineExpr::getContext(*a1);
  v18 = -1;
  v19 = -1;
  if (!a2)
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)&result = 0x400000000;
    *(_QWORD *)(a3 + 8) = 0x400000000;
    return result;
  }
  v17 = (_QWORD *)Context;
  v7 = &v4[2 * a2];
  v8 = v4;
  do
  {
    v9 = v8[1];
    if (v9)
    {
      v10 = (uint64_t *)*v8;
      for (i = 8 * v9; i; i -= 8)
      {
        v20 = *v10;
        v21[0] = &off_24C05A5A8;
        v21[1] = &v19;
        v21[2] = &v18;
        v22 = v21;
        mlir::AffineExpr::walk(&v20, v21);
        v12 = v22;
        if (v22 == v21)
        {
          v12 = v21;
          v13 = 4;
        }
        else
        {
          if (!v22)
            goto LABEL_8;
          v13 = 5;
        }
        (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_8:
        ++v10;
      }
    }
    v8 += 2;
  }
  while (v8 != v7);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  if (a2 >= 5)
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), a2, 8);
  do
  {
    v14 = mlir::AffineMap::get((int)v19 + 1, (int)v18 + 1, *v4, v4[1], v17);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16 + 1, 8);
      v16 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v14;
    ++*(_DWORD *)(a3 + 8);
    v4 += 2;
  }
  while (v4 != v7);
  return result;
}

unint64_t mlir::AffineMap::getLargestKnownDivisorOfMapExprs(mlir::AffineMap *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)this;
  v2 = *(unsigned int *)(*(_QWORD *)this + 8);
  if (!(_DWORD)v2)
    return -1;
  v3 = 0;
  v4 = (uint64_t *)(v1 + 24);
  v5 = v1 + 24 + 8 * v2;
  do
  {
    v9 = *v4;
    mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v9);
    if (v7)
    {
      do
      {
        v6 = v7;
        v7 = v3 % v7;
        v3 = v6;
      }
      while (v7);
    }
    else
    {
      v6 = v3;
    }
    v3 = v6;
    ++v4;
  }
  while (v4 != (uint64_t *)v5);
  if (v6)
    return v6;
  else
    return -1;
}

uint64_t mlir::AffineMap::isIdentity(mlir::AffineMap *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v1 = **(unsigned int **)this;
  if ((_DWORD)v1 == *(_DWORD *)(*(_QWORD *)this + 8))
  {
    if (!(_DWORD)v1)
      return 1;
    v2 = 0;
    v3 = *(_QWORD *)this + 24;
    while (1)
    {
      v4 = *(_QWORD *)(v3 + 8 * v2);
      v7 = v4;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v7) == 6)
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v7, v4);
        v6 = v7;
        if (!v7)
          return 0;
      }
      else
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v7, 0);
        v6 = v7;
        if (!v7)
          return 0;
      }
      if (v2 != mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v6))
        break;
      if (v1 == ++v2)
        return 1;
    }
  }
  return 0;
}

uint64_t mlir::AffineMap::isSymbolIdentity(mlir::AffineMap *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(*(_QWORD *)this + 4);
  if ((_DWORD)v1 == *(_DWORD *)(*(_QWORD *)this + 8))
  {
    if (!(_DWORD)v1)
      return 1;
    v2 = 0;
    v3 = *(_QWORD *)this + 24;
    while (1)
    {
      v4 = *(_QWORD *)(v3 + 8 * v2);
      v7 = v4;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v7) == 6)
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v7, v4);
        v6 = v7;
        if (!v7)
          return 0;
      }
      else
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v7, 0);
        v6 = v7;
        if (!v7)
          return 0;
      }
      if (v2 != mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v6))
        break;
      if (v1 == ++v2)
        return 1;
    }
  }
  return 0;
}

uint64_t mlir::AffineMap::getNumSymbols(mlir::AffineMap *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 4);
}

BOOL mlir::AffineMap::isSingleConstant(mlir::AffineMap *this)
{
  uint64_t v2;

  if (*(_DWORD *)(*(_QWORD *)this + 8) != 1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 24);
  return mlir::AffineExpr::getKind((mlir::AffineExpr *)&v2) == 5;
}

uint64_t mlir::AffineMap::getResult(mlir::AffineMap *this, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 8 * a2 + 24);
}

BOOL mlir::AffineMap::isConstant(mlir::AffineMap *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  BOOL v6;
  uint64_t v7;

  v1 = *(unsigned int *)(*(_QWORD *)this + 8);
  if (!(_DWORD)v1)
    return 1;
  v2 = (uint64_t *)(*(_QWORD *)this + 24);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    v7 = v4;
    v6 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v7) == 5;
    result = v6;
    v6 = !v6 || v3 == 0;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t mlir::AffineMap::getSingleConstantResult(mlir::AffineMap *this)
{
  uint64_t v2;

  ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v2, *(_QWORD *)(*(_QWORD *)this + 24));
  return mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v2);
}

void mlir::AffineMap::getConstantResults(mlir::AffineMap *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t LHS;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v4 = *(unsigned int *)(*(_QWORD *)this + 8);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(*(_QWORD *)this + 24);
    v6 = 8 * v4;
    do
    {
      while (1)
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v10, *v5);
        LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v10);
        v8 = LHS;
        v9 = *(unsigned int *)(a2 + 8);
        if (v9 >= *(_DWORD *)(a2 + 12))
          break;
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = LHS;
        *(_DWORD *)(a2 + 8) = v9 + 1;
        ++v5;
        v6 -= 8;
        if (!v6)
          return;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v9 + 1, 8);
      *(_QWORD *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v8;
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t mlir::AffineMap::constantFold(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  mlir::MLIRContext *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v17 = v19;
  v18 = 0x200000000;
  mlir::AffineMap::partialConstantFold(a1, a2, a3, (uint64_t)&v17, a5);
  v8 = v18;
  v9 = (uint64_t *)v17;
  if (!(_DWORD)v18)
  {
    v15 = 0;
    if (v17 == v19)
      return v15;
    goto LABEL_7;
  }
  v10 = *(unsigned int *)(a4 + 8);
  if (v10 + (unint64_t)v18 > *(unsigned int *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + v18, 8);
    v10 = *(unsigned int *)(a4 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a4 + 8 * v10);
  v12 = 8 * v8;
  do
  {
    v13 = *v9++;
    v14 = mlir::IndexType::get(*((mlir::IndexType **)*a1 + 2), v7);
    *v11++ = mlir::IntegerAttr::get(v14, v13);
    v12 -= 8;
  }
  while (v12);
  *(_DWORD *)(a4 + 8) += v8;
  v15 = 1;
  v9 = (uint64_t *)v17;
  if (v17 != v19)
LABEL_7:
    free(v9);
  return v15;
}

uint64_t mlir::AffineMap::partialConstantFold(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  int *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  mlir::IndexType *Context;
  mlir::MLIRContext *v17;
  uint64_t v18;
  uint64_t v19;
  mlir *Int;
  mlir::MLIRContext *v21;
  mlir::MLIRContext *v22;
  uint64_t AffineConstantExpr;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v31 = **a1;
  v32 = a2;
  v33 = a3;
  v34 = 0;
  v36 = v38;
  v37 = 0x400000000;
  v9 = v8[2];
  if (v9 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v9, 8);
    v8 = *a1;
    LODWORD(v9) = (*a1)[2];
  }
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)(v8 + 6);
    v11 = 8 * v9;
    while (1)
    {
      v12 = *v10;
      v35 = v12;
      if (v14)
      {
        v15 = v13;
        Context = (mlir::IndexType *)mlir::AffineExpr::getContext((mlir::AffineExpr *)&v35);
        v18 = mlir::IndexType::get(Context, v17);
        v19 = mlir::IntegerAttr::get(v18, v15);
        v30 = v19;
        if (a5 && v34)
          goto LABEL_24;
        if (v19)
        {
          Int = (mlir *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30);
          v21 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v30);
          AffineConstantExpr = mlir::getAffineConstantExpr(Int, v21, v22);
          v24 = AffineConstantExpr;
          if (v37 >= (unint64_t)HIDWORD(v37))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v37 + 1, 8);
            *((_QWORD *)v36 + v37) = v24;
            LODWORD(v37) = v37 + 1;
            if (a4)
            {
LABEL_13:
              v25 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30);
              v26 = *(unsigned int *)(a4 + 8);
              if (v26 >= *(unsigned int *)(a4 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v26 + 1, 8);
                v26 = *(unsigned int *)(a4 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a4 + 8 * v26) = v25;
              ++*(_DWORD *)(a4 + 8);
              goto LABEL_6;
            }
          }
          else
          {
            *((_QWORD *)v36 + v37) = AffineConstantExpr;
            LODWORD(v37) = v37 + 1;
            if (a4)
              goto LABEL_13;
          }
          goto LABEL_6;
        }
      }
      else
      {
        v30 = 0;
        if (a5 && v34)
        {
LABEL_24:
          v27 = 0;
          *a5 = 1;
          v28 = v36;
          if (v36 != v38)
            goto LABEL_28;
          return v27;
        }
      }
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v37 + 1, 8);
        *((_QWORD *)v36 + v37) = v12;
        LODWORD(v37) = v37 + 1;
        if (!a4)
          goto LABEL_6;
LABEL_19:
        *(_DWORD *)(a4 + 8) = 0;
        a4 = 0;
        goto LABEL_6;
      }
      *((_QWORD *)v36 + v37) = v12;
      LODWORD(v37) = v37 + 1;
      if (a4)
        goto LABEL_19;
LABEL_6:
      ++v10;
      v11 -= 8;
      if (!v11)
      {
        v8 = *a1;
        break;
      }
    }
  }
  v27 = mlir::AffineMap::get(*v8, v8[1], (uint64_t)v36, v37, *((_QWORD **)v8 + 2));
  v28 = v36;
  if (v36 != v38)
LABEL_28:
    free(v28);
  return v27;
}

_QWORD *mlir::AffineMap::walkExprs(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(*result + 8);
  if ((_DWORD)v3)
  {
    v6 = (uint64_t *)(*result + 24);
    for (i = 8 * v3; i; i -= 8)
    {
      v9 = *v6;
      v10[0] = &unk_24C0534E8;
      v10[1] = a2;
      v10[2] = a3;
      v11 = v10;
      mlir::AffineExpr::walk(&v9, v10);
      result = v11;
      if (v11 == v10)
      {
        result = v10;
        v8 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_5;
        v8 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_5:
      ++v6;
    }
  }
  return result;
}

uint64_t mlir::AffineMap::replaceDimsAndSymbols(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x24BDAC8D0];
  v23 = v25;
  v24 = 0x800000000;
  v10 = *a1;
  v11 = *(unsigned int *)(*a1 + 8);
  if (v11 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v11, 8);
    v10 = *a1;
    LODWORD(v11) = *(_DWORD *)(*a1 + 8);
  }
  if ((_DWORD)v11)
  {
    v21 = a6;
    v12 = a7;
    v13 = (uint64_t *)(v10 + 24);
    v14 = 8 * v11;
    do
    {
      v22 = *v13;
      mlir::AffineExpr::replaceDimsAndSymbols((uint64_t)&v22);
      v16 = v15;
      v17 = v24;
      if (v24 >= (unint64_t)HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
        v17 = v24;
      }
      *((_QWORD *)v23 + v17) = v16;
      v18 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v10 = *a1;
    a7 = v12;
    a6 = v21;
  }
  else
  {
    v18 = v24;
  }
  v19 = mlir::AffineMap::get(a6, a7, (uint64_t)v23, v18, *(_QWORD **)(v10 + 16));
  if (v23 != v25)
    free(v23);
  return v19;
}

uint64_t mlir::AffineMap::replace(uint64_t *a1, unint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x400000000;
  v10 = *a1;
  v11 = *(unsigned int *)(*a1 + 8);
  if (v11 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v11, 8);
    v10 = *a1;
    LODWORD(v11) = *(_DWORD *)(*a1 + 8);
  }
  if ((_DWORD)v11)
  {
    v14 = *(_QWORD *)(v10 + 24);
    mlir::AffineExpr::replace(&v14, a2, a3);
  }
  v12 = mlir::AffineMap::get(a4, a5, (uint64_t)v15, v16, *(_QWORD **)(v10 + 16));
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t mlir::AffineMap::isProjectedPermutation(mlir::AffineMap *this, int a2)
{
  unsigned int *v2;
  unsigned int v3;
  size_t v4;
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  unsigned int Position;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  size_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int **)this;
  if (*(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  v3 = v2[2];
  v4 = *v2;
  if (v3 > v4)
    return 0;
  v19 = v22;
  v21 = 8;
  if (v4 < 9)
  {
    if ((_DWORD)v4)
      bzero(v22, v4);
  }
  else
  {
    v20 = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v19, v22, v4, 1);
    bzero(v19, v4);
    v2 = *(unsigned int **)this;
    v3 = *(_DWORD *)(*(_QWORD *)this + 8);
  }
  v20 = v4;
  v5 = 1;
  if (!v3)
  {
LABEL_24:
    v15 = v19;
    if (v19 != v22)
      goto LABEL_27;
    return v5;
  }
  v9 = (uint64_t *)(v2 + 6);
  v10 = 8 * v3;
  do
  {
    v13 = *v9;
    v18 = *v9;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v18) == 6)
    {
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v18, v13);
      v17 = v18;
      if (!v18)
      {
LABEL_17:
        v18 = v13;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v18) == 5)
          v14 = v13;
        else
          v14 = 0;
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v18, v14);
        v16 = v18;
        if (!a2 || !v18 || mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v16))
        {
LABEL_23:
          v5 = 0;
          goto LABEL_24;
        }
        goto LABEL_14;
      }
    }
    else
    {
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v18, 0);
      v17 = v18;
      if (!v18)
        goto LABEL_17;
    }
    Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v17);
    if (*((_BYTE *)v19 + Position))
      goto LABEL_23;
    v12 = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v17);
    *((_BYTE *)v19 + v12) = 1;
LABEL_14:
    ++v9;
    v10 -= 8;
  }
  while (v10);
  v5 = 1;
  v15 = v19;
  if (v19 != v22)
LABEL_27:
    free(v15);
  return v5;
}

uint64_t mlir::AffineMap::isPermutation(mlir::AffineMap *this)
{
  if (**(_DWORD **)this == *(_DWORD *)(*(_QWORD *)this + 8))
    return mlir::AffineMap::isProjectedPermutation(this, 0);
  else
    return 0;
}

uint64_t mlir::AffineMap::getSliceMap(int **this, int a2, unsigned int a3)
{
  return mlir::AffineMap::get(**this, (*this)[1], (uint64_t)&(*this)[2 * a2 + 6], a3, *((_QWORD **)*this + 2));
}

uint64_t mlir::simplifyAffineMap(int *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  mlir::MLIRContext **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x800000000;
  v2 = a1[2];
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8 * v2;
    do
    {
      v5 = mlir::simplifyAffineExpr(*(mlir::MLIRContext ***)&a1[v3 / 4 + 6], *a1, a1[1]);
      v6 = v12;
      if (v12 >= (unint64_t)HIDWORD(v12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, v12 + 1, 8);
        v6 = v12;
      }
      *((_QWORD *)v11 + v6) = v5;
      v7 = (v12 + 1);
      LODWORD(v12) = v12 + 1;
      v3 += 8;
    }
    while (v4 != v3);
    v8 = v11;
  }
  else
  {
    v7 = 0;
    v8 = v13;
  }
  v9 = mlir::AffineMap::get(*a1, a1[1], (uint64_t)v8, v7, *((_QWORD **)a1 + 2));
  if (v11 != v13)
    free(v11);
  return v9;
}

uint64_t mlir::removeDuplicateExprs(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int *)(a1 + 8);
  v17 = v19;
  v18 = 0x400000000;
  if (v2 < 5)
  {
    if (!(_DWORD)v2)
    {
      v5 = (char *)v19;
      v6 = (char *)v19;
      LODWORD(v18) = 0;
      goto LABEL_15;
    }
    v3 = 0;
    v4 = v19;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v2, 8);
    v3 = v18;
    v4 = v17;
  }
  memcpy(&v4[v3], (const void *)(a1 + 24), 8 * v2);
  v5 = (char *)v17;
  v6 = (char *)v17;
  v7 = (v18 + v2);
  LODWORD(v18) = v18 + v2;
  if ((_DWORD)v18)
  {
    v6 = (char *)v17 + 8 * v7;
    v8 = 8 * v7 - 16;
    v9 = (char *)v17;
    while (1)
    {
      v10 = v9;
      v9 += 8;
      if (v9 == v6)
        break;
      v11 = v8;
      v12 = v10[1];
      v8 -= 8;
      if (*v10 == v12)
      {
        if (v10 + 2 != (_QWORD *)v6)
        {
          v13 = 8;
          do
          {
            v14 = v12;
            v12 = *(_QWORD *)&v9[v13];
            if (v14 != v12)
            {
              v10[1] = v12;
              ++v10;
            }
            v13 += 8;
            v11 -= 8;
          }
          while (v11);
        }
        v6 = (char *)(v10 + 1);
        break;
      }
    }
  }
LABEL_15:
  LODWORD(v18) = (unint64_t)(v6 - v5) >> 3;
  v15 = mlir::AffineMap::get(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), (uint64_t)v5, v18, *(_QWORD **)(a1 + 16));
  if (v17 != v19)
    free(v17);
  return v15;
}

_QWORD *mlir::MutableAffineMap::MutableAffineMap(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;

  v4 = *(unsigned int *)(a2 + 8);
  v5 = (char *)(a1 + 2);
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (v4 < 9)
  {
    if (!(_DWORD)v4)
    {
      v7 = 0;
      goto LABEL_7;
    }
    v6 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, v5, v4, 8);
    v6 = *((unsigned int *)a1 + 2);
    v5 = (char *)*a1;
  }
  memcpy(&v5[8 * v6], (const void *)(a2 + 24), 8 * v4);
  v7 = *((_DWORD *)a1 + 2);
LABEL_7:
  *((_DWORD *)a1 + 2) = v7 + v4;
  a1[10] = *(_QWORD *)a2;
  a1[11] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t mlir::MutableAffineMap::reset(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 16);
  return llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(a1, *(_QWORD *)a1, (char *)(a2 + 24), (char *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 8)));
}

uint64_t mlir::MutableAffineMap::getAffineMap(mlir::MutableAffineMap *this)
{
  return mlir::AffineMap::get(*((_DWORD *)this + 20), *((_DWORD *)this + 21), *(_QWORD *)this, *((unsigned int *)this + 2), *((_QWORD **)this + 11));
}

void `anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;

  v3 = a2;
  v2 = (char *)sub_2072A4780 + 4 * byte_207AB832C[mlir::AffineExpr::getKind((mlir::AffineExpr *)&v3)];
  __asm { BR              X10 }
}

unint64_t sub_2072A4780()
{
  uint64_t v0;
  uint64_t v2[6];

}

unint64_t `anonymous namespace'::AffineExprConstantFolder::constantFoldBinExpr(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t LHS;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t RHS;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v18, a2);
  LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v18);
  if (v9
    && (v10 = v8,
        RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v18),
        v13))
  {
    v14 = a3(a4, v10, v12);
    v15 = v14 & 0xFFFFFFFFFFFFFF00;
    v16 = v14;
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  return v15 | v16;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<`anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 + a2;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<`anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#2}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 * a2;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<`anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#3}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 > 0)
    return (a3 & ((a2 % a3) >> 63)) + a2 % a3;
  result = 0;
  *(_BYTE *)(*(_QWORD *)a1 + 24) = 1;
  return result;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<`anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#4}>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  if (a3)
  {
    v3 = -1;
    if (a3 < 0)
      v3 = 1;
    if (a2 && a2 >> 63 != (unint64_t)a3 >> 63)
      return ~((uint64_t)(v3 - a2) / a3);
    else
      return (uint64_t)a2 / a3;
  }
  else
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)a1 + 24) = 1;
  }
  return result;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<`anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#5}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  if (a3)
  {
    if (a2 && a2 < 1 != a3 > 0)
    {
      if (a3 <= 0)
        v3 = a2 + 1;
      else
        v3 = a2 - 1;
      return v3 / a3 + 1;
    }
    else
    {
      return a2 / a3;
    }
  }
  else
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)a1 + 24) = 1;
  }
  return result;
}

void std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C05A5A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C05A5A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t Position;
  _QWORD *result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v9 = *a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v9) == 6)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v9, v3);
    if (!v9)
      goto LABEL_8;
  }
  else
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v9, 0);
    if (!v9)
      goto LABEL_8;
  }
  v4 = *(uint64_t **)(a1 + 8);
  Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v9);
  if (*v4 > Position)
    Position = *v4;
  **(_QWORD **)(a1 + 8) = Position;
LABEL_8:
  v9 = v3;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v9) == 7)
  {
    result = ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v9, v3);
    if (!v9)
      return result;
  }
  else
  {
    result = ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v9, 0);
    if (!v9)
      return result;
  }
  v7 = *(uint64_t **)(a1 + 16);
  result = (_QWORD *)mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v9);
  v8 = result;
  if (*v7 > result)
    v8 = *v7;
  **(_QWORD **)(a1 + 16) = v8;
  return result;
}

uint64_t std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlirL18getMaxDimAndSymbolIN4llvm8ArrayRefINS_10AffineExprEEEEEvNS2_IT_EERxS7_EUlS3_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlirL18getMaxDimAndSymbolIN4llvm8ArrayRefINS_10AffineExprEEEEEvNS2_IT_EERxS7_EUlS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlirL18getMaxDimAndSymbolIN4llvm8ArrayRefINS_10AffineExprEEEEEvNS2_IT_EERxS7_EUlS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlirL18getMaxDimAndSymbolIN4llvm8ArrayRefINS_10AffineExprEEEEEvNS2_IT_EERxS7_EUlS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::target_type()
{
}

void std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C0534E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C0534E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *a2);
}

uint64_t std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207AB847ELL)
    return a1 + 8;
  if (((v3 & 0x8000000207AB847ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207AB847ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207AB847ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::target_type()
{
}

llvm::raw_ostream *mlir::OperationName::print(mlir::OperationName *this, llvm::raw_ostream *a2)
{
  size_t v3;
  const char *AttrData;
  size_t v5;
  llvm::raw_ostream *result;
  uint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)this + 8);
  AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v7);
  v5 = v3;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v3 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, AttrData, v3);
  if (v3)
  {
    result = (llvm::raw_ostream *)memcpy(result, AttrData, v3);
    *((_QWORD *)a2 + 4) += v5;
  }
  return result;
}

uint64_t mlir::AsmParser::getContext(mlir::AsmParser *this)
{
  return *(_QWORD *)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)this + 32))(this);
}

uint64_t mlir::AsmParser::parseTypeList(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(uint64_t *), _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::AsmParser::parseTypeList(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, v3, 0, 0);
}

void mlir::DialectAsmPrinter::~DialectAsmPrinter(mlir::DialectAsmPrinter *this)
{
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *mlir::OpAsmPrinter::printFunctionalType(mlir::OpAsmPrinter *this, mlir::Operation *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  llvm::raw_ostream *result;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  _BYTE *v23;
  uint64_t i;
  unint64_t v25;
  _WORD *v26;
  uint64_t v27;

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)this + 16))(this);
  v5 = v4;
  v6 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 40);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v6 + 1;
    *v6 = 40;
  }
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v7 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v7)
    {
      v8 = *((_QWORD *)a2 + 9);
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
        if ((_DWORD)v7 != 1)
          goto LABEL_24;
      }
      else
      {
        (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)this + 32))(this, 0);
        if ((_DWORD)v7 != 1)
        {
LABEL_24:
          v17 = v7 - 1;
          v18 = (uint64_t *)(v8 + 56);
          do
          {
            v20 = (_WORD *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v20 > 1uLL)
            {
              *v20 = 8236;
              *((_QWORD *)v5 + 4) += 2;
              v21 = *v18;
              if (!*v18)
              {
LABEL_31:
                v19 = 0;
                goto LABEL_26;
              }
            }
            else
            {
              llvm::raw_ostream::write(v5, ", ", 2uLL);
              v21 = *v18;
              if (!*v18)
                goto LABEL_31;
            }
            v19 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
            (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, v19);
            v18 += 4;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  v10 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v10) > 4)
  {
    *(_BYTE *)(v10 + 4) = 32;
    *(_DWORD *)v10 = 1043144745;
    *((_QWORD *)v5 + 4) += 5;
    if (*((_DWORD *)a2 + 9) != 1)
      goto LABEL_18;
  }
  else
  {
    llvm::raw_ostream::write(v5, ") -> ", 5uLL);
    if (*((_DWORD *)a2 + 9) != 1)
      goto LABEL_18;
  }
  if ((*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0
    && *(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
LABEL_18:
    v13 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 40);
      v14 = *((unsigned int *)a2 + 9);
      result = (mlir::Operation *)((char *)a2 - 16);
      if ((_DWORD)v14)
        v16 = (char *)a2 - 16;
      else
        v16 = 0;
      if (!(_DWORD)v14)
        goto LABEL_42;
    }
    else
    {
      *((_QWORD *)v5 + 4) = v13 + 1;
      *v13 = 40;
      v14 = *((unsigned int *)a2 + 9);
      result = (mlir::Operation *)((char *)a2 - 16);
      if ((_DWORD)v14)
        v16 = (char *)a2 - 16;
      else
        v16 = 0;
      if (!(_DWORD)v14)
        goto LABEL_42;
    }
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)result, 0);
    if (NextResultAtOffset)
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
      if ((_DWORD)v14 != 1)
        goto LABEL_45;
    }
    else
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)this + 32))(this, 0);
      if ((_DWORD)v14 != 1)
      {
LABEL_45:
        for (i = 1; v14 != i; ++i)
        {
          v26 = (_WORD *)*((_QWORD *)v5 + 4);
          if (*((_QWORD *)v5 + 3) - (_QWORD)v26 > 1uLL)
          {
            *v26 = 8236;
            *((_QWORD *)v5 + 4) += 2;
            v27 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v16, i);
            if (!v27)
            {
LABEL_52:
              v25 = 0;
              goto LABEL_47;
            }
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
            v27 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v16, i);
            if (!v27)
              goto LABEL_52;
          }
          v25 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
LABEL_47:
          result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, v25);
        }
      }
    }
LABEL_42:
    v23 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v23 >= *((_QWORD *)v5 + 3))
      return llvm::raw_ostream::write(v5, 41);
    *((_QWORD *)v5 + 4) = v23 + 1;
    *v23 = 41;
    return result;
  }
  v11 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, 0);
  if (v11)
    v12 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  else
    v12 = 0;
  return (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, v12);
}

mlir::OpPrintingFlags *mlir::OpPrintingFlags::OpPrintingFlags(mlir::OpPrintingFlags *this)
{
  uint64_t v5;
  uint64_t v8;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 32) &= 0x80u;
  if (!atomic_load((unint64_t *)&clOptions))
    return this;
  if (!atomic_load((unint64_t *)&clOptions))
  if (*(_WORD *)(clOptions + 208))
  {
    if (atomic_load((unint64_t *)&clOptions))
    {
      v5 = *(unsigned int *)(clOptions + 328);
      if (*((_BYTE *)this + 8))
      {
LABEL_7:
        *(_QWORD *)this = v5;
        goto LABEL_8;
      }
    }
    else
    {
      v5 = *(unsigned int *)(clOptions + 328);
      if (*((_BYTE *)this + 8))
        goto LABEL_7;
    }
    *((_BYTE *)this + 8) = 1;
    goto LABEL_7;
  }
LABEL_8:
  if (!atomic_load((unint64_t *)&clOptions))
  if (!*(_WORD *)(clOptions + 400))
    goto LABEL_14;
  if (!atomic_load((unint64_t *)&clOptions))
  {
    v8 = *(unsigned int *)(clOptions + 520);
    if (*((_BYTE *)this + 24))
      goto LABEL_13;
LABEL_31:
    *((_BYTE *)this + 24) = 1;
    goto LABEL_13;
  }
  v8 = *(unsigned int *)(clOptions + 520);
  if (!*((_BYTE *)this + 24))
    goto LABEL_31;
LABEL_13:
  *((_QWORD *)this + 2) = v8;
LABEL_14:
  if (!atomic_load((unint64_t *)&clOptions))
  *((_BYTE *)this + 32) = *((_BYTE *)this + 32) & 0xFE | *(_BYTE *)(clOptions + 712);
  if (!atomic_load((unint64_t *)&clOptions))
  *((_BYTE *)this + 32) = *((_BYTE *)this + 32) & 0xFD | (2 * *(_BYTE *)(clOptions + 904));
  if (!atomic_load((unint64_t *)&clOptions))
  *((_BYTE *)this + 32) = *((_BYTE *)this + 32) & 0xFB | (4 * *(_BYTE *)(clOptions + 1096));
  if (!atomic_load((unint64_t *)&clOptions))
  *((_BYTE *)this + 32) = *((_BYTE *)this + 32) & 0xEF | (16 * *(_BYTE *)(clOptions + 1288));
  if (!atomic_load((unint64_t *)&clOptions))
  *((_BYTE *)this + 32) = *((_BYTE *)this + 32) & 0xDF | (32 * *(_BYTE *)(clOptions + 1480));
  if (!atomic_load((unint64_t *)&clOptions))
  *((_BYTE *)this + 32) = *((_BYTE *)this + 32) & 0xBF | (*(_BYTE *)(clOptions + 1672) << 6);
  return this;
}

uint64_t mlir::OpPrintingFlags::printGenericOpForm(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_BYTE *)(this + 32) = *(_BYTE *)(this + 32) & 0xFB | v2;
  return this;
}

uint64_t mlir::OpPrintingFlags::useLocalScope(uint64_t this)
{
  *(_BYTE *)(this + 32) |= 0x20u;
  return this;
}

uint64_t mlir::OpPrintingFlags::shouldElideElementsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v4 = *(_QWORD *)a1;
  if (v4 >= mlir::ElementsAttr::getNumElements(a2, a3))
    return 0;
  if (mlir::DenseElementsAttr::classof(a2))
    v5 = a2;
  else
    v5 = 0;
  v7 = v5;
  if (v5)
    return mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v7) ^ 1;
  else
    return 1;
}

void mlir::AsmResourcePrinter::~AsmResourcePrinter(void **this)
{
  *this = off_24C0346B8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

char *mlir::toString(int a1)
{
  return (&off_24C060ED8)[a1];
}

_QWORD *mlir::FallbackAsmResourceMap::getParserFor(uint64_t a1, const void *a2, size_t a3)
{
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void **__dst;
  size_t v18;
  unint64_t v19;

  if (!a2)
  {
    __dst = 0;
    v18 = 0;
    v19 = 0;
    v7 = llvm::MapVector<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>,llvm::StringMap<unsigned int,llvm::MallocAllocator>,llvm::SmallVector<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,0u>>::operator[](a1, (uint64_t)&__dst);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_15:
    operator delete(__dst);
    v10 = *(_QWORD **)v7;
    if (*(_QWORD *)v7)
      return v10;
    goto LABEL_16;
  }
  if (a3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_30;
  if (a3 >= 0x17)
  {
    v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v8 = a3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = a3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v19) = a3;
  p_dst = (void **)&__dst;
  if (a3)
LABEL_11:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v7 = llvm::MapVector<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>,llvm::StringMap<unsigned int,llvm::MallocAllocator>,llvm::SmallVector<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,0u>>::operator[](a1, (uint64_t)&__dst);
  if (SHIBYTE(v19) < 0)
    goto LABEL_15;
LABEL_13:
  v10 = *(_QWORD **)v7;
  if (*(_QWORD *)v7)
    return v10;
LABEL_16:
  v11 = operator new();
  v10 = (_QWORD *)v11;
  v12 = (_QWORD *)(v11 + 8);
  if (!a2)
  {
    *v12 = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    goto LABEL_27;
  }
  if (a3 > 0x7FFFFFFFFFFFFFF7)
LABEL_30:
    abort();
  if (a3 >= 0x17)
  {
    v13 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v13 = a3 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    v10[2] = a3;
    v10[3] = v14 | 0x8000000000000000;
    v10[1] = v12;
  }
  else
  {
    *(_BYTE *)(v11 + 31) = a3;
    if (!a3)
      goto LABEL_26;
  }
  memmove(v12, a2, a3);
LABEL_26:
  *((_BYTE *)v12 + a3) = 0;
LABEL_27:
  *v10 = off_24C034808;
  v10[4] = v10 + 6;
  v10[5] = 0x100000000;
  v15 = *(_QWORD **)v7;
  *(_QWORD *)v7 = v10;
  if (v15)
  {
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    return *(_QWORD **)v7;
  }
  return v10;
}

uint64_t llvm::MapVector<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>,llvm::StringMap<unsigned int,llvm::MallocAllocator>,llvm::SmallVector<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,0u>>::operator[](uint64_t a1, uint64_t a2)
{
  int8x16_t *p_p;
  std::string::size_type size;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::string::pointer data;
  uint64_t v16;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  int v22;
  std::string v23;
  uint64_t v24;
  std::string __p;
  int v26;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v23 = *(std::string *)a2;
  __p = v23;
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (int8x16_t *)&__p;
  else
    p_p = (int8x16_t *)v23.__r_.__value_.__r.__words[0];
  v26 = 0;
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v22 = 0;
  v6 = *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(a1, p_p, (const unsigned __int8 *)size, &v22);
  if (v7)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v24 = 0;
      v8 = *(unsigned int *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 24);
      v10 = &v23;
      if (v8 < *(_DWORD *)(a1 + 36))
        goto LABEL_17;
    }
    else
    {
      v23 = *(std::string *)a2;
      v24 = 0;
      v8 = *(unsigned int *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 24);
      v10 = &v23;
      if (v8 < *(_DWORD *)(a1 + 36))
        goto LABEL_17;
    }
    v18 = (unint64_t *)(a1 + 24);
    v19 = v8 + 1;
    v20 = v9 + 32 * v8 > (unint64_t)&v23;
    if (v9 <= (unint64_t)&v23 && v20)
    {
      v21 = (char *)&v23 - v9;
      llvm::SmallVectorTemplateBase<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,false>::grow(a1 + 24, v19);
      v9 = *v18;
      v10 = (std::string *)&v21[*v18];
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,false>::grow(a1 + 24, v19);
      v9 = *v18;
      v10 = &v23;
    }
LABEL_17:
    v13 = v9 + 32 * *(unsigned int *)(a1 + 32);
    v14 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)v13 = v14;
    v10->__r_.__value_.__r.__words[0] = 0;
    v10->__r_.__value_.__l.__size_ = 0;
    data = v10[1].__r_.__value_.__l.__data_;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10[1].__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v13 + 24) = data;
    ++*(_DWORD *)(a1 + 32);
    v16 = v24;
    v24 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v11 = *(_DWORD *)(a1 + 32) - 1;
    *(_DWORD *)(v6 + 8) = v11;
    v12 = *(_QWORD *)(a1 + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_22;
    return v12 + 32 * v11 + 24;
  }
  v11 = *(_DWORD *)(v6 + 8);
  v12 = *(_QWORD *)(a1 + 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_22:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12 + 32 * v11 + 24;
}

_QWORD *mlir::FallbackAsmResourceMap::getPrinters@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    for (i = this[3] + 24; ; i += 32)
    {
      v6 = *(_QWORD *)i;
      v7 = *(char *)(*(_QWORD *)i + 31);
      if (v7 >= 0)
        v8 = (const void *)(*(_QWORD *)i + 8);
      else
        v8 = *(const void **)(*(_QWORD *)i + 8);
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(*(_QWORD *)i + 31);
      else
        v9 = *(_QWORD *)(v6 + 16);
      v10 = operator new();
      v11 = (_QWORD *)v10;
      v12 = (_QWORD *)(v10 + 8);
      if (!v8)
      {
        *v12 = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        *(_QWORD *)v10 = off_24C05E2D8;
        *(_QWORD *)(v10 + 32) = v6;
        v16 = (_QWORD *)v10;
        v13 = (_QWORD *)a2[1];
        if ((unint64_t)v13 >= a2[2])
          goto LABEL_16;
        goto LABEL_23;
      }
      if (v9 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v9 >= 0x17)
        break;
      *(_BYTE *)(v10 + 31) = v9;
      if (v9)
        goto LABEL_21;
LABEL_22:
      *((_BYTE *)v12 + v9) = 0;
      *v11 = off_24C05E2D8;
      v11[4] = v6;
      v16 = v11;
      v13 = (_QWORD *)a2[1];
      if ((unint64_t)v13 >= a2[2])
      {
LABEL_16:
        a2[1] = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a2, (uint64_t *)&v16);
        this = v16;
        v16 = 0;
        if (!this)
          goto LABEL_3;
LABEL_24:
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        goto LABEL_3;
      }
LABEL_23:
      v16 = 0;
      *v13 = v11;
      a2[1] = v13 + 1;
      this = v16;
      v16 = 0;
      if (this)
        goto LABEL_24;
LABEL_3:
      v4 -= 32;
      if (!v4)
        return this;
    }
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v12 = operator new(v14 + 1);
    v11[2] = v9;
    v11[3] = v15 | 0x8000000000000000;
    v11[1] = v12;
LABEL_21:
    memmove(v12, v8, v9);
    goto LABEL_22;
  }
  return this;
}

uint64_t mlir::FallbackAsmResourceMap::ResourceCollection::parseResource(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  llvm **v6;
  char v7;
  llvm **v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  uint64_t v15;
  uint64_t v16;
  llvm *v17[2];
  unint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  switch(v4)
  {
    case 2:
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&__p, a2);
      if (LOBYTE(v17[0]))
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
        v13 = v9;
        llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,std::string>(a1 + 32, (const void **)&v12, (uint64_t)&__p);
        if (LOBYTE(v17[0]) && SHIBYTE(v16) < 0)
          operator delete(__p);
        return 1;
      }
      return 0;
    case 1:
      LOWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      if ((unsigned __int16)v12 <= 0xFFu)
        return 0;
      __p = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v15 = v11;
      llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,BOOL &>(a1 + 32, (const void **)&__p, &v12);
      break;
    case 0:
      (*(void (**)(void **__return_ptr, uint64_t, void *(*)@<X0>(size_t@<X1>, std::align_val_t@<X2>, uint64_t@<X8>), uint64_t *))(*(_QWORD *)a2 + 56))(&__p, a2, llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>::callback_fn<mlir::AsmParsedResourceEntry::parseAsBlob(void)::{lambda(unsigned long,unsigned long)#1}>, &v12);
      if (v19)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
        v13 = v5;
        llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,mlir::AsmResourceBlob>(a1 + 32, (const void **)&v12, (uint64_t)&__p);
        if (v19 && v18 >= 8)
        {
          v6 = (v18 & 2) != 0 ? v17 : (llvm **)v17[0];
          (*(void (**)(llvm **, void *, uint64_t, uint64_t))(v18 & 0xFFFFFFFFFFFFFFF8))(v6, __p, v15, v16);
          v7 = v18;
          if (v18 >= 8)
          {
            if ((v18 & 4) != 0)
            {
              if ((v18 & 2) != 0)
                v8 = v17;
              else
                v8 = (llvm **)v17[0];
              (*(void (**)(llvm **))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
            }
            if ((v7 & 2) == 0)
              llvm::deallocate_buffer(v17[0], v17[1]);
          }
        }
        return 1;
      }
      return 0;
  }
  return 1;
}

uint64_t llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,mlir::AsmResourceBlob>(uint64_t a1, const void **a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  unint64_t v10;
  __int128 *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 < *(_DWORD *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1;
    v7 = (_QWORD *)(*(_QWORD *)a1 + 96 * v5);
    v9 = *a2;
    v8 = (size_t)a2[1];
    v23 = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 48);
    v24 = *(_QWORD *)(a3 + 16);
    v27 = v10;
    if (v10 >= 8)
    {
      v11 = (__int128 *)(a3 + 24);
      if ((v10 & 2) != 0 && (v10 & 4) != 0)
      {
        (*(void (**)(__int128 *, __int128 *))((v10 & 0xFFFFFFFFFFFFFFF8) + 8))(&v25, v11);
      }
      else
      {
        v25 = *v11;
        v26 = *(_QWORD *)(a3 + 40);
      }
      *(_QWORD *)(a3 + 48) = 0;
    }
    v28 = *(_BYTE *)(a3 + 56);
    v29 = 0;
    if (!v9)
    {
      v12 = 0;
      v13 = v6 + 96 * v5;
      *(_DWORD *)(v13 + 88) = -1;
      v14 = (_DWORD *)(v13 + 88);
      *v7 = 0;
      v7[1] = 0;
      v15 = v14 - 16;
      *((_BYTE *)v7 + 24) = 0;
      v7[2] = 0;
      goto LABEL_19;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v8 >= 0x17)
    {
      v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v16 = v8 | 7;
      v17 = v16 + 1;
      v18 = operator new(v16 + 1);
      v7[1] = v8;
      v7[2] = v17 | 0x8000000000000000;
      *v7 = v18;
      v7 = v18;
    }
    else
    {
      *((_BYTE *)v7 + 23) = v8;
      if (!v8)
      {
LABEL_18:
        *((_BYTE *)v7 + v8) = 0;
        v12 = v29;
        v19 = v6 + 96 * v5;
        *(_BYTE *)(v19 + 24) = 0;
        v15 = (_DWORD *)(v19 + 24);
        v15[16] = -1;
        v14 = v15 + 16;
        if (v12 == -1)
        {
LABEL_21:
          v20 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v20;
          return *(_QWORD *)a1 + 96 * v20 - 96;
        }
LABEL_19:
        ((void (*)(char *, _DWORD *, __int128 *))off_24C060EC0[v12])(&v22, v15, &v23);
        *v14 = v12;
        if (v29 != -1)
          ((void (*)(char *, __int128 *))off_24C060EA8[v29])(&v22, &v23);
        goto LABEL_21;
      }
    }
    memmove(v7, v9, v8);
    goto LABEL_18;
  }
  return llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,mlir::AsmResourceBlob>(a1, (uint64_t)a2, (__int128 *)a3);
}

uint64_t llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,BOOL &>(uint64_t a1, const void **a2, _BYTE *a3)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  const void *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  char v19;
  _BYTE v20[64];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 < *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1;
    v6 = (_QWORD *)(*(_QWORD *)a1 + 96 * v4);
    v8 = *a2;
    v7 = (size_t)a2[1];
    v20[0] = *a3;
    v21 = 1;
    if (!v8)
    {
      v9 = v5 + 96 * v4;
      *(_DWORD *)(v9 + 88) = -1;
      v10 = (int *)(v9 + 88);
      v11 = v10 - 16;
      *v6 = 0;
      v6[1] = 0;
      *((_BYTE *)v6 + 24) = 0;
      v6[2] = 0;
      v12 = 1;
      goto LABEL_13;
    }
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v7 >= 0x17)
    {
      v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v13 = v7 | 7;
      v14 = v13 + 1;
      v15 = operator new(v13 + 1);
      v6[1] = v7;
      v6[2] = v14 | 0x8000000000000000;
      *v6 = v15;
      v6 = v15;
    }
    else
    {
      *((_BYTE *)v6 + 23) = v7;
      if (!v7)
      {
LABEL_12:
        *((_BYTE *)v6 + v7) = 0;
        v12 = v21;
        v16 = v5 + 96 * v4;
        *(_BYTE *)(v16 + 24) = 0;
        v11 = (int *)(v16 + 24);
        v11[16] = -1;
        v10 = v11 + 16;
        if (v12 == -1)
        {
LABEL_15:
          v17 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v17;
          return *(_QWORD *)a1 + 96 * v17 - 96;
        }
LABEL_13:
        ((void (*)(char *, int *, _BYTE *))off_24C060EC0[v12])(&v19, v11, v20);
        *v10 = v12;
        if (v21 != -1)
          ((void (*)(char *, _BYTE *))off_24C060EA8[v21])(&v19, v20);
        goto LABEL_15;
      }
    }
    memmove(v6, v8, v7);
    goto LABEL_12;
  }
  return llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,BOOL &>(a1, (uint64_t)a2, a3);
}

uint64_t llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,std::string>(uint64_t a1, const void **a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  const void *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 < *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1;
    v6 = (_QWORD *)(*(_QWORD *)a1 + 96 * v4);
    v8 = *a2;
    v7 = (size_t)a2[1];
    v20 = *(_OWORD *)a3;
    v21 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v22 = 2;
    if (!v8)
    {
      v9 = v5 + 96 * v4;
      *(_DWORD *)(v9 + 88) = -1;
      v10 = (int *)(v9 + 88);
      v11 = v10 - 16;
      *v6 = 0;
      v6[1] = 0;
      *((_BYTE *)v6 + 24) = 0;
      v6[2] = 0;
      v12 = 2;
      goto LABEL_13;
    }
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v7 >= 0x17)
    {
      v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v13 = v7 | 7;
      v14 = v13 + 1;
      v15 = operator new(v13 + 1);
      v6[1] = v7;
      v6[2] = v14 | 0x8000000000000000;
      *v6 = v15;
      v6 = v15;
    }
    else
    {
      *((_BYTE *)v6 + 23) = v7;
      if (!v7)
      {
LABEL_12:
        *((_BYTE *)v6 + v7) = 0;
        v12 = v22;
        v16 = v5 + 96 * v4;
        *(_BYTE *)(v16 + 24) = 0;
        v11 = (int *)(v16 + 24);
        v11[16] = -1;
        v10 = v11 + 16;
        if (v12 == -1)
        {
LABEL_15:
          v17 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v17;
          return *(_QWORD *)a1 + 96 * v17 - 96;
        }
LABEL_13:
        ((void (*)(char *, int *, __int128 *))off_24C060EC0[v12])(&v19, v11, &v20);
        *v10 = v12;
        if (v22 != -1)
          ((void (*)(char *, __int128 *))off_24C060EA8[v22])(&v19, &v20);
        goto LABEL_15;
      }
    }
    memmove(v6, v8, v7);
    goto LABEL_12;
  }
  return llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,std::string>(a1, (uint64_t)a2, (__int128 *)a3);
}

uint64_t mlir::FallbackAsmResourceMap::ResourceCollection::buildResources(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(result + 40);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = *(_QWORD *)(result + 32);
    v7 = 96 * v3;
    do
    {
      v15 = (uint64_t *)(v6 + v5);
      v16 = (uint64_t *)(v6 + v5 + 24);
      v17 = *(_DWORD *)(v6 + v5 + 88);
      if (v17 == 1)
      {
        v21 = *((char *)v15 + 23);
        if (v21 >= 0)
          v22 = v6 + v5;
        else
          v22 = *v15;
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)v15 + 23);
        else
          v23 = v15[1];
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v22, v23, *(unsigned __int8 *)v16);
      }
      else if (v17)
      {
        v8 = v6 + v5;
        v9 = *(char *)(v6 + v5 + 23);
        if (v9 >= 0)
          v10 = v6 + v5;
        else
          v10 = *(_QWORD *)(v6 + v5);
        if (v9 >= 0)
          v11 = *(unsigned __int8 *)(v6 + v5 + 23);
        else
          v11 = *(_QWORD *)(v6 + v5 + 8);
        v12 = *(char *)(v8 + 47);
        if (v12 >= 0)
          v13 = v6 + v5 + 24;
        else
          v13 = *v16;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(v8 + 47);
        else
          v14 = *(_QWORD *)(v8 + 32);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, v10, v11, v13, v14);
      }
      else
      {
        v18 = *(char *)(v6 + v5 + 23);
        if (v18 >= 0)
          v19 = v6 + v5;
        else
          v19 = *(_QWORD *)(v6 + v5);
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(v6 + v5 + 23);
        else
          v20 = *(_QWORD *)(v6 + v5 + 8);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, v19, v20, *v16, *(_QWORD *)(v6 + v5 + 32), *(unsigned int *)(v6 + v5 + 40));
      }
      v5 += 96;
    }
    while (v7 != v5);
  }
  return result;
}

llvm *mlir::AsmState::AsmState(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, mlir::FallbackAsmResourceMap *a5)
{
  char v9;
  __int128 v10;
  std::recursive_mutex **DiagEngine;
  BOOL v12;
  char v13;
  __int128 *v14;
  char v15;
  char v16;
  uint64_t v17;
  _BYTE v19[7];
  __int128 v20;
  __int128 v21;
  mlir::MLIRContext *v22;
  mlir::MLIRContext *Context;
  uint64_t threadid;
  __int128 v25;
  unint64_t v26[2];
  char v27;
  _BYTE v28[7];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v20 = *(_OWORD *)a3;
  v21 = *(_OWORD *)(a3 + 16);
  v9 = *(_BYTE *)(a3 + 32);
  *(_DWORD *)v19 = *(_DWORD *)(a3 + 33);
  *(_DWORD *)&v19[3] = *(_DWORD *)(a3 + 36);
  if ((v9 & 0x14) != 0)
  {
    v10 = *(_OWORD *)(a3 + 16);
    v25 = *(_OWORD *)a3;
    *(_OWORD *)v26 = v10;
    v27 = v9;
    *(_DWORD *)v28 = *(_DWORD *)(a3 + 33);
    *(_DWORD *)&v28[3] = *(_DWORD *)(a3 + 36);
  }
  else
  {
    threadid = llvm::get_threadid(a1);
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(Context);
    *(_QWORD *)&v25 = &threadid;
    v26[1] = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallbacksHolder<verifyOpAndAdjustFlags(mlir::Operation *,mlir::OpPrintingFlags)::$_0,verifyOpAndAdjustFlags(mlir::Operation *,mlir::OpPrintingFlags)::$_0,void>::Callbacks
           + 2;
    v22 = (mlir::MLIRContext *)mlir::DiagnosticEngine::registerHandler(DiagEngine, &v25);
    v13 = v26[1];
    if (v26[1] >= 8)
    {
      if ((v26[1] & 4) != 0)
      {
        if ((v26[1] & 2) != 0)
          v14 = &v25;
        else
          v14 = (__int128 *)v25;
        (*(void (**)(__int128 *))((v26[1] & 0xFFFFFFFFFFFFFFF8) + 16))(v14);
      }
      if ((v13 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v25, *((void **)&v25 + 1));
    }
    v15 = mlir::verify((mlir *)a2, (mlir::Operation *)1, v12);
    v16 = v9 | 4;
    if (v15)
      v16 = v9;
    v25 = v20;
    *(_OWORD *)v26 = v21;
    v27 = v16;
    *(_DWORD *)v28 = *(_DWORD *)v19;
    *(_DWORD *)&v28[3] = *(_DWORD *)&v19[3];
    mlir::ScopedDiagnosticHandler::~ScopedDiagnosticHandler(&v22);
  }
  v17 = operator new();
  *(_QWORD *)a1 = mlir::detail::AsmStateImpl::AsmStateImpl(v17, (unsigned int *)a2, &v25, a4);
  if (a5)
    mlir::AsmState::attachFallbackResourcePrinter(a1, a5);
  return a1;
}

void mlir::AsmState::attachFallbackResourcePrinter(mlir::AsmState *this, mlir::FallbackAsmResourceMap *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  uint64_t *v13;

  mlir::FallbackAsmResourceMap::getPrinters(a2, &__p);
  v3 = (uint64_t *)__p;
  v4 = v13;
  if (__p == v13)
  {
    if (!__p)
      return;
    goto LABEL_8;
  }
  do
  {
    v5 = *v3;
    *v3 = 0;
    v11 = v5;
    mlir::AsmState::attachResourcePrinter((uint64_t *)this, &v11);
    v6 = v11;
    v11 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    ++v3;
  }
  while (v3 != v4);
  v3 = (uint64_t *)__p;
  if (__p)
  {
LABEL_8:
    v7 = v13;
    v8 = v3;
    if (v13 != v3)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      while (v7 != v3);
      v8 = __p;
    }
    v13 = v3;
    operator delete(v8);
  }
}

void mlir::AsmState::~AsmState(mlir::detail::AsmStateImpl **this)
{
  mlir::detail::AsmStateImpl *v2;

  v2 = *this;
  *this = 0;
  if (v2)
    mlir::detail::AsmStateImpl::~AsmStateImpl(v2);
}

void mlir::AsmState::attachResourcePrinter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;

  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 64);
  if (v4 < *(_DWORD *)(*a1 + 68))
  {
    v5 = *(_QWORD *)(v3 + 56);
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)(v5 + 8 * v4) = v6;
    v7 = v4 + 1;
    goto LABEL_3;
  }
  v8 = (char **)(v3 + 56);
  v29 = 0;
  v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v3 + 56, (void *)(v3 + 72), 0, 8, &v29);
  v10 = *(unsigned int *)(v3 + 64);
  v11 = 8 * v10;
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)&v9[8 * v10] = v12;
  v13 = *(char **)(v3 + 56);
  if ((_DWORD)v10)
  {
    v14 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v14 >= 0xB)
    {
      v17 = v13 >= &v9[v11] || v9 >= &v13[v11];
      v15 = v9;
      v16 = *(char **)(v3 + 56);
      if (v17)
      {
        v18 = v14 + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v15 = &v9[v19];
        v16 = &v13[v19];
        v20 = (__int128 *)(v13 + 16);
        v21 = v9 + 16;
        v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *(v20 - 1);
          v24 = *v20;
          *(v20 - 1) = 0uLL;
          *v20 = 0uLL;
          *(v21 - 1) = v23;
          *v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          v26 = (uint64_t)(*v8 - 8);
          do
          {
            v27 = *(_QWORD *)(v26 + v11);
            *(_QWORD *)(v26 + v11) = 0;
            if (v27)
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v11 -= 8;
          }
          while (v11);
          v13 = *v8;
          goto LABEL_21;
        }
      }
    }
    else
    {
      v15 = v9;
      v16 = *(char **)(v3 + 56);
    }
    do
    {
      v25 = *(_QWORD *)v16;
      *(_QWORD *)v16 = 0;
      v16 += 8;
      *(_QWORD *)v15 = v25;
      v15 += 8;
    }
    while (v16 != &v13[v11]);
    goto LABEL_16;
  }
LABEL_21:
  v28 = v29;
  if (v13 != (char *)(v3 + 72))
    free(v13);
  *(_QWORD *)(v3 + 56) = v9;
  v7 = *(_DWORD *)(v3 + 64) + 1;
  *(_DWORD *)(v3 + 68) = v28;
LABEL_3:
  *(_DWORD *)(v3 + 64) = v7;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printLocation(uint64_t a1, uint64_t a2, int a3)
{
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    return mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)a1, a2, 1, 1);
  v6 = *(llvm::raw_ostream **)a1;
  v7 = *(_DWORD **)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v7 > 3uLL)
  {
    *v7 = 677605228;
    *((_QWORD *)v6 + 4) += 4;
    if (!a3)
      goto LABEL_10;
  }
  else
  {
    llvm::raw_ostream::write(v6, "loc(", 4uLL);
    if (!a3)
    {
LABEL_10:
      mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)a1, a2, 0, 1);
      result = *(llvm::raw_ostream **)a1;
      v9 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v9 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
        return llvm::raw_ostream::write(result, 41);
LABEL_9:
      *((_QWORD *)result + 4) = v9 + 1;
      *v9 = 41;
      return result;
    }
  }
  result = *(llvm::raw_ostream **)a1;
  v9 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if ((unint64_t)v9 < *(_QWORD *)(*(_QWORD *)a1 + 24))
    goto LABEL_9;
  return llvm::raw_ostream::write(result, 41);
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printLocationInternal(llvm::raw_ostream *result, uint64_t a2, uint64_t a3, char a4)
{
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v12;
  uint64_t v13;
  uint64_t RHS;
  llvm::raw_ostream *v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  size_t v19;
  llvm::raw_ostream *v20;
  size_t v21;
  const char *AttrData;
  size_t v23;
  void *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  uint64_t LHS;
  uint64_t v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  char *v46;
  char v47;
  llvm::raw_ostream *v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  unsigned int Position;
  llvm::raw_ostream *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  unsigned int Column;
  llvm::raw_ostream *v57;
  _DWORD *v58;
  _BYTE *v59;
  _BYTE *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::raw_ostream *v64;
  _BYTE *v65;
  llvm::raw_ostream *v66;
  _BYTE *v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  llvm::raw_ostream *v77;
  _WORD *v78;
  uint64_t Value;
  uint64_t v80;

  v6 = result;
  if ((a4 & 1) == 0)
  {
    if ((_BYTE)result)
      return result;
  }
  v7 = *(void **)(*(_QWORD *)a2 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id && a2 != 0)
  {
    v80 = a2;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
    v15 = v6;
    return (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printLocationInternal(v15, RHS, a3, 0);
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
  {
    result = *(llvm::raw_ostream **)v6;
    v16 = *(_QWORD *)(*(_QWORD *)v6 + 32);
    v17 = *(_QWORD *)(*(_QWORD *)v6 + 24) - v16;
    if ((_DWORD)a3)
    {
      if (v17 > 8)
      {
        *(_BYTE *)(v16 + 8) = 93;
        *(_QWORD *)v16 = *(_QWORD *)"[unknown]";
        *((_QWORD *)result + 4) += 9;
        return result;
      }
      v18 = "[unknown]";
      v19 = 9;
    }
    else
    {
      if (v17 > 6)
      {
        *(_DWORD *)(v16 + 3) = 1853321070;
        *(_DWORD *)v16 = 1852534389;
        *((_QWORD *)result + 4) += 7;
        return result;
      }
      v18 = "unknown";
      v19 = 7;
    }
    return llvm::raw_ostream::write(result, v18, v19);
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
  {
    v80 = a2;
    if ((_DWORD)a3)
    {
      v20 = *(llvm::raw_ostream **)v6;
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
      AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
      v23 = v21;
      v24 = (void *)*((_QWORD *)v20 + 4);
      if (v21 > *((_QWORD *)v20 + 3) - (_QWORD)v24)
      {
        llvm::raw_ostream::write(v20, AttrData, v21);
        v25 = *(llvm::raw_ostream **)v6;
        v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
          goto LABEL_70;
LABEL_68:
        *((_QWORD *)v25 + 4) = v26 + 1;
        *v26 = 58;
LABEL_71:
        Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v80);
        v53 = llvm::raw_ostream::operator<<(v25, Position);
        v54 = v53;
        v55 = (_BYTE *)*((_QWORD *)v53 + 4);
        if ((unint64_t)v55 >= *((_QWORD *)v53 + 3))
        {
          v54 = llvm::raw_ostream::write(v53, 58);
        }
        else
        {
          *((_QWORD *)v53 + 4) = v55 + 1;
          *v55 = 58;
        }
        Column = mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)&v80);
        return llvm::raw_ostream::operator<<(v54, Column);
      }
      if (v21)
      {
        memcpy(v24, AttrData, v21);
        *((_QWORD *)v20 + 4) += v23;
        v25 = *(llvm::raw_ostream **)v6;
        v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
          goto LABEL_70;
        goto LABEL_68;
      }
    }
    else
    {
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
      v32 = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
      v34 = v33;
      v35 = *(llvm::raw_ostream **)v6;
      v36 = *(_BYTE **)(*(_QWORD *)v6 + 32);
      if (*(_BYTE **)(*(_QWORD *)v6 + 24) == v36)
      {
        llvm::raw_ostream::write(v35, "\"", 1uLL);
      }
      else
      {
        *v36 = 34;
        ++*((_QWORD *)v35 + 4);
      }
      llvm::printEscapedString(v32, v34, *(llvm::raw_ostream **)v6);
      v50 = *(llvm::raw_ostream **)v6;
      v51 = *(_BYTE **)(*(_QWORD *)v6 + 32);
      if (*(_BYTE **)(*(_QWORD *)v6 + 24) == v51)
      {
        llvm::raw_ostream::write(v50, "\"", 1uLL);
        v25 = *(llvm::raw_ostream **)v6;
        v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        if ((unint64_t)v26 < *((_QWORD *)v25 + 3))
          goto LABEL_68;
        goto LABEL_70;
      }
      *v51 = 34;
      ++*((_QWORD *)v50 + 4);
    }
    v25 = *(llvm::raw_ostream **)v6;
    v26 = (_BYTE *)*((_QWORD *)v25 + 4);
    if ((unint64_t)v26 < *((_QWORD *)v25 + 3))
      goto LABEL_68;
LABEL_70:
    v25 = llvm::raw_ostream::write(v25, 58);
    goto LABEL_71;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id && a2 != 0)
  {
    v80 = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
    v27 = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    v29 = v28;
    v30 = *(llvm::raw_ostream **)v6;
    v31 = *(_BYTE **)(*(_QWORD *)v6 + 32);
    if (*(_BYTE **)(*(_QWORD *)v6 + 24) == v31)
    {
      llvm::raw_ostream::write(v30, "\"", 1uLL);
    }
    else
    {
      *v31 = 34;
      ++*((_QWORD *)v30 + 4);
    }
    llvm::printEscapedString(v27, v29, *(llvm::raw_ostream **)v6);
    v41 = *(llvm::raw_ostream **)v6;
    v42 = *(_BYTE **)(*(_QWORD *)v6 + 32);
    if (*(_BYTE **)(*(_QWORD *)v6 + 24) == v42)
    {
      llvm::raw_ostream::write(v41, "\"", 1uLL);
      result = (llvm::raw_ostream *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80);
      if (*(_UNKNOWN **)(*(_QWORD *)result + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
        return result;
    }
    else
    {
      *v42 = 34;
      ++*((_QWORD *)v41 + 4);
      result = (llvm::raw_ostream *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80);
      if (*(_UNKNOWN **)(*(_QWORD *)result + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
        return result;
    }
    v43 = result;
    v44 = *(llvm::raw_ostream **)v6;
    v45 = *(_BYTE **)(*(_QWORD *)v6 + 32);
    if ((unint64_t)v45 >= *(_QWORD *)(*(_QWORD *)v6 + 24))
    {
      llvm::raw_ostream::write(v44, 40);
    }
    else
    {
      *((_QWORD *)v44 + 4) = v45 + 1;
      *v45 = 40;
    }
    mlir::AsmPrinter::Impl::printLocationInternal(v6, v43, a3, 0);
    result = *(llvm::raw_ostream **)v6;
    v46 = *(char **)(*(_QWORD *)v6 + 32);
    if ((unint64_t)v46 >= *(_QWORD *)(*(_QWORD *)v6 + 24))
      return llvm::raw_ostream::write(result, 41);
    *((_QWORD *)result + 4) = v46 + 1;
    v47 = 41;
LABEL_107:
    *v46 = v47;
    return result;
  }
  if (v7 != &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id || a2 == 0)
  {
    if (v7 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id && a2 != 0)
    {
      v80 = a2;
      if ((a3 & 1) == 0)
      {
        v12 = *(llvm::raw_ostream **)v6;
        v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) > 4)
        {
          *(_BYTE *)(v13 + 4) = 100;
          *(_DWORD *)v13 = 1702065510;
          *((_QWORD *)v12 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v12, "fused", 5uLL);
        }
      }
      v62 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
      if (v62)
      {
        v63 = v62;
        v64 = *(llvm::raw_ostream **)v6;
        v65 = *(_BYTE **)(*(_QWORD *)v6 + 32);
        if ((unint64_t)v65 >= *(_QWORD *)(*(_QWORD *)v6 + 24))
        {
          llvm::raw_ostream::write(v64, 60);
        }
        else
        {
          *((_QWORD *)v64 + 4) = v65 + 1;
          *v65 = 60;
        }
        v66 = *(llvm::raw_ostream **)v6;
        v67 = *(_BYTE **)(*(_QWORD *)v6 + 32);
        if ((unint64_t)v67 >= *(_QWORD *)(*(_QWORD *)v6 + 24))
        {
          llvm::raw_ostream::write(v66, 62);
        }
        else
        {
          *((_QWORD *)v66 + 4) = v67 + 1;
          *v67 = 62;
        }
      }
      v68 = *(llvm::raw_ostream **)v6;
      v69 = *(_BYTE **)(*(_QWORD *)v6 + 32);
      if ((unint64_t)v69 >= *(_QWORD *)(*(_QWORD *)v6 + 24))
      {
        llvm::raw_ostream::write(v68, 91);
      }
      else
      {
        *((_QWORD *)v68 + 4) = v69 + 1;
        *v69 = 91;
      }
      v70 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
      if (v71)
      {
        v72 = v70;
        v73 = v71;
        mlir::AsmPrinter::Impl::printLocationInternal(v6, *v70, a3, 0);
        if (v73 != 1)
        {
          v74 = v72 + 1;
          v75 = 8 * v73 - 8;
          do
          {
            v77 = *(llvm::raw_ostream **)v6;
            v78 = *(_WORD **)(*(_QWORD *)v6 + 32);
            if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v78 > 1uLL)
            {
              *v78 = 8236;
              *((_QWORD *)v77 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v77, ", ", 2uLL);
            }
            v76 = *v74++;
            mlir::AsmPrinter::Impl::printLocationInternal(v6, v76, a3, 0);
            v75 -= 8;
          }
          while (v75);
        }
      }
      result = *(llvm::raw_ostream **)v6;
      v46 = *(char **)(*(_QWORD *)v6 + 32);
      if ((unint64_t)v46 >= *(_QWORD *)(*(_QWORD *)v6 + 24))
        return llvm::raw_ostream::write(result, 93);
      *((_QWORD *)result + 4) = v46 + 1;
      v47 = 93;
      goto LABEL_107;
    }
  }
  else
  {
    v80 = a2;
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80);
    v38 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
    v39 = v38;
    if ((a3 & 1) != 0)
    {
      mlir::AsmPrinter::Impl::printLocationInternal(v6, v38, a3, 0);
      if (*(_UNKNOWN **)(*(_QWORD *)v39 + 136) == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
      {
        v40 = *(llvm::raw_ostream **)v6;
        if (*(_UNKNOWN **)(*(_QWORD *)LHS + 136) == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
          goto LABEL_85;
      }
      else
      {
        v40 = *(llvm::raw_ostream **)v6;
      }
      ++*((_DWORD *)v6 + 14);
      v60 = (_BYTE *)*((_QWORD *)v40 + 4);
      if ((unint64_t)v60 >= *((_QWORD *)v40 + 3))
      {
        v40 = llvm::raw_ostream::write(v40, 10);
      }
      else
      {
        *((_QWORD *)v40 + 4) = v60 + 1;
        *v60 = 10;
      }
LABEL_85:
      v61 = (_DWORD *)*((_QWORD *)v40 + 4);
      if (*((_QWORD *)v40 + 3) - (_QWORD)v61 > 3uLL)
      {
        *v61 = 544497952;
        *((_QWORD *)v40 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v40, " at ", 4uLL);
      }
      v15 = v6;
      RHS = LHS;
      return (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printLocationInternal(v15, RHS, a3, 0);
    }
    v48 = *(llvm::raw_ostream **)v6;
    v49 = *(_QWORD *)(*(_QWORD *)v6 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v49) > 8)
    {
      *(_BYTE *)(v49 + 8) = 40;
      *(_QWORD *)v49 = *(_QWORD *)"callsite(";
      *((_QWORD *)v48 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v48, "callsite(", 9uLL);
    }
    mlir::AsmPrinter::Impl::printLocationInternal(v6, v39, a3, 0);
    v57 = *(llvm::raw_ostream **)v6;
    v58 = *(_DWORD **)(*(_QWORD *)v6 + 32);
    if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v58 > 3uLL)
    {
      *v58 = 544497952;
      *((_QWORD *)v57 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v57, " at ", 4uLL);
    }
    mlir::AsmPrinter::Impl::printLocationInternal(v6, LHS, a3, 0);
    result = *(llvm::raw_ostream **)v6;
    v59 = *(_BYTE **)(*(_QWORD *)v6 + 32);
    if (*(_BYTE **)(*(_QWORD *)v6 + 24) == v59)
    {
      return llvm::raw_ostream::write(result, ")", 1uLL);
    }
    else
    {
      *v59 = 41;
      ++*((_QWORD *)result + 4);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AliasState::getAlias(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  void *v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  const void *v22;
  size_t v23;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (_QWORD *)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (_QWORD *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (_QWORD *)(v4 + 16 * v5);
LABEL_8:
  v11 = v7 == (_QWORD *)(v4 + 16 * v5);
  v12 = (unsigned int *)(a1 + 4);
  if (!v11)
    v12 = (unsigned int *)(v7 + 1);
  v13 = *v12;
  if ((_DWORD)v13 == *((_DWORD *)a1 + 8))
    return 0;
  v15 = a1[3] + 32 * v13;
  v16 = v15 + 8;
  if ((*(_BYTE *)(v15 + 27) & 0x40) != 0)
    v17 = "!";
  else
    v17 = "#";
  v18 = (char *)*((_QWORD *)a3 + 4);
  if (*((char **)a3 + 3) == v18)
  {
    v20 = llvm::raw_ostream::write(a3, v17, 1uLL);
    v19 = (void *)*((_QWORD *)v20 + 4);
    v21 = (_DWORD *)(v15 + 24);
    v22 = *(const void **)v16;
    v23 = *(_QWORD *)(v16 + 8);
    if (v23 > *((_QWORD *)v20 + 3) - (_QWORD)v19)
      goto LABEL_17;
LABEL_19:
    if (v23)
    {
      memcpy(v19, v22, v23);
      *((_QWORD *)v20 + 4) += v23;
    }
    goto LABEL_21;
  }
  *v18 = *v17;
  v19 = (void *)(*((_QWORD *)a3 + 4) + 1);
  *((_QWORD *)a3 + 4) = v19;
  v20 = a3;
  v21 = (_DWORD *)(v15 + 24);
  v22 = *(const void **)v16;
  v23 = *(_QWORD *)(v16 + 8);
  if (v23 <= *((_QWORD *)a3 + 3) - (_QWORD)v19)
    goto LABEL_19;
LABEL_17:
  llvm::raw_ostream::write(v20, (const char *)v22, v23);
LABEL_21:
  if ((*v21 & 0x3FFFFFFF) != 0)
    llvm::raw_ostream::operator<<(a3, *v21 & 0x3FFFFFFF);
  return 1;
}

uint64_t mlir::AsmPrinter::Impl::printResourceHandle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  void **v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *__p[2];
  unsigned __int8 v27;

  v4 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2[2]);
  v5 = *(llvm::raw_ostream **)a1;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(__p, v4, a2);
  if ((v27 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v7 = v27;
  else
    v7 = (size_t)__p[1];
  llvm::raw_ostream::write(v5, (const char *)v6, v7);
  if (((char)v27 & 0x80000000) == 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v8 + 120);
    v9 = v8 + 120;
    v10 = v11;
    v12 = (void *)a2[2];
    __p[0] = v12;
    v13 = *(_DWORD *)(v9 + 16);
    if (v13)
      goto LABEL_9;
LABEL_20:
    v24 = 0;
LABEL_21:
    v16 = llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::InsertIntoBucket<mlir::Dialect *>(v9, v24, (uint64_t *)__p);
    return llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert((uint64_t)(v16 + 1), a2);
  }
  operator delete(__p[0]);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_QWORD *)(v22 + 120);
  v9 = v22 + 120;
  v10 = v23;
  v12 = (void *)a2[2];
  __p[0] = v12;
  v13 = *(_DWORD *)(v9 + 16);
  if (!v13)
    goto LABEL_20;
LABEL_9:
  v14 = v13 - 1;
  v15 = ((v12 >> 4) ^ (v12 >> 9)) & (v13 - 1);
  v16 = (uint64_t *)(v10 + 48 * v15);
  v17 = *v16;
  if (v12 != (void *)*v16)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = v16;
      v21 = v15 + v19++;
      v15 = v21 & v14;
      v16 = (uint64_t *)(v10 + 48 * (v21 & v14));
      v17 = *v16;
      if (v12 == (void *)*v16)
        return llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert((uint64_t)(v16 + 1), a2);
    }
    if (v18)
      v24 = v18;
    else
      v24 = v16;
    goto LABEL_21;
  }
  return llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert((uint64_t)(v16 + 1), a2);
}

uint64_t mlir::AsmPrinter::Impl::printAlias(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int *v11;
  uint64_t v12;
  llvm::raw_ostream *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  void *v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  const void *v22;
  size_t v23;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 144);
  v4 = *(unsigned int *)(v2 + 160);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (_QWORD *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (_QWORD *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (_QWORD *)(v3 + 16 * v4);
LABEL_8:
  v10 = v6 == (_QWORD *)(v3 + 16 * v4);
  v11 = (unsigned int *)(v2 + 176);
  if (!v10)
    v11 = (unsigned int *)(v6 + 1);
  v12 = *v11;
  if ((_DWORD)v12 == *(_DWORD *)(v2 + 176))
    return 0;
  v14 = *(llvm::raw_ostream **)a1;
  v15 = *(_QWORD *)(v2 + 168) + 32 * v12;
  v16 = v15 + 8;
  if ((*(_BYTE *)(v15 + 27) & 0x40) != 0)
    v17 = "!";
  else
    v17 = "#";
  v18 = (char *)*((_QWORD *)v14 + 4);
  if (*((char **)v14 + 3) == v18)
  {
    v20 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v17, 1uLL);
    v19 = (void *)*((_QWORD *)v20 + 4);
    v21 = (_DWORD *)(v15 + 24);
    v22 = *(const void **)v16;
    v23 = *(_QWORD *)(v16 + 8);
    if (v23 > *((_QWORD *)v20 + 3) - (_QWORD)v19)
      goto LABEL_17;
LABEL_19:
    if (v23)
    {
      memcpy(v19, v22, v23);
      *((_QWORD *)v20 + 4) += v23;
    }
    goto LABEL_21;
  }
  *v18 = *v17;
  v19 = (void *)(*((_QWORD *)v14 + 4) + 1);
  *((_QWORD *)v14 + 4) = v19;
  v20 = v14;
  v21 = (_DWORD *)(v15 + 24);
  v22 = *(const void **)v16;
  v23 = *(_QWORD *)(v16 + 8);
  if (v23 <= *((_QWORD *)v14 + 3) - (_QWORD)v19)
    goto LABEL_19;
LABEL_17:
  llvm::raw_ostream::write(v20, (const char *)v22, v23);
LABEL_21:
  if ((*v21 & 0x3FFFFFFF) != 0)
    llvm::raw_ostream::operator<<(v14, *v21 & 0x3FFFFFFF);
  return 1;
}

void mlir::AsmPrinter::Impl::printAttributeImpl(llvm::raw_ostream **a1, uint64_t **a2, int a3)
{
  void *v6;
  uint64_t **v7;
  llvm::raw_ostream *v8;
  const char *AttrData;
  size_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t canMapOperands;
  uint64_t **v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t **v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t ***v28;
  uint64_t **v29;
  uint64_t ***v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  llvm::raw_ostream *v34;
  _DWORD *v35;
  uint64_t *v36;
  void *v37;
  uint64_t **v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  int v41;
  uint64_t **v42;
  llvm::raw_ostream *v43;
  _WORD *v44;
  uint64_t Value;
  uint64_t v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  uint64_t **v49;
  llvm::raw_ostream *v50;
  unsigned __int32 v51;
  BOOL v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  llvm::raw_ostream *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  llvm::raw_ostream *v65;
  char *v66;
  char v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  uint64_t **v70;
  char v71;
  char *v73;
  uint64_t **v74;
  llvm::raw_ostream *v75;
  uint64_t v76;
  uint64_t **v77;
  llvm::raw_ostream *v78;
  _BYTE *v79;
  uint64_t **v80;
  unint64_t v81;
  llvm::raw_ostream *v82;
  uint64_t **v83;
  uint64_t **v84;
  uint64_t **v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t **v89;
  uint64_t **v90;
  char *v91;
  size_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  size_t v99;
  uint64_t v100;
  int shouldElideElementsAttr;
  llvm::raw_ostream *v102;
  uint64_t v103;
  int v104;
  uint64_t **v105;
  _QWORD *RHS;
  uint64_t v107;
  uint64_t v108;
  llvm::raw_ostream *v109;
  uint64_t **v110;
  _QWORD *Values;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t **v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t **v124;
  uint64_t ***v125;
  int v126;
  BOOL v127;
  unsigned int v128;
  uint64_t **v129;
  uint64_t **v130;
  uint64_t v131;
  uint64_t **v132;
  uint64_t **v133;
  uint64_t **v134;
  uint64_t **v135;
  uint64_t **v136;
  uint64_t **v137;
  uint64_t **v138;
  uint64_t **v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t **v142;
  uint64_t **v143;
  uint64_t **v144;
  __n128 v145[2];
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  if (*(uint64_t **)(**a2 + 24) != &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
  {
    mlir::AsmPrinter::Impl::printDialectAttribute((uint64_t)a1, a2);
LABEL_8:
    if (a3 != 2)
    {
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>((uint64_t)(*a2 + 1)))
      {
        v145[0] = 0uLL;
        return;
      }
      v14 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>((uint64_t)(*a2 + 1));
      v145[0].n128_u64[0] = (unint64_t)a2;
      v145[0].n128_u64[1] = v14;
      if (a2)
      {
        canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v145);
        if (*(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) != &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
        {
          v16 = (uint64_t **)canMapOperands;
          v17 = *a1;
          v18 = *((_QWORD *)*a1 + 4);
          if ((unint64_t)(*((_QWORD *)*a1 + 3) - v18) > 2)
          {
            *(_BYTE *)(v18 + 2) = 32;
            *(_WORD *)v18 = 14880;
            *((_QWORD *)v17 + 4) += 3;
            if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)a1, (uint64_t)v16))
            {
LABEL_37:
              mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)a1, v16);
              return;
            }
          }
          else
          {
            llvm::raw_ostream::write(v17, " : ", 3uLL);
            if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)a1, (uint64_t)v16))
              goto LABEL_37;
          }
        }
      }
    }
    return;
  }
  v6 = (void *)(*a2)[17];
  if (v6 == &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id)
    v7 = a2;
  else
    v7 = 0;
  v144 = v7;
  if (v7)
  {
    v8 = *a1;
    v145[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v144);
    AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v145);
    v11 = v10;
    v12 = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v144);
    printDialectSymbol(v8, "#", 1uLL, AttrData, v11, v12, v13);
    goto LABEL_8;
  }
  if (v6 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    v34 = *a1;
    v35 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v35 > 3uLL)
    {
      *v35 = 1953066613;
      *((_QWORD *)v34 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v34, "unit", 4uLL);
    }
    return;
  }
  if ((v19 & 1) == 0
  {
    v145[0].n128_u64[0] = (unint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
    v145[0].n128_u64[1] = 68;
    v117 = llvm::StringRef::find((uint64_t *)v145, "DesiredTypeName = ", 0x12uLL, 0);
    if (v145[0].n128_u64[1] >= v117)
      v118 = v117;
    else
      v118 = v145[0].n128_u64[1];
    v119 = v145[0].n128_u64[0] + v118;
    v120 = v145[0].n128_u64[1] - v118;
    if (v145[0].n128_u64[1] - v118 >= 0x12)
      v121 = 18;
    else
      v121 = v145[0].n128_u64[1] - v118;
    v122 = v120 - v121;
    if (v122 >= v122 - 1)
      v123 = v122 - 1;
    else
      v123 = v122;
    mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v119 + v121, v123);
  }
  if (v6 == (void *)mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id)
    v20 = a2;
  else
    v20 = 0;
  v143 = v20;
  if (v20)
  {
    v21 = *a1;
    v22 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v22) > 8)
    {
      *(_BYTE *)(v22 + 8) = 91;
      *(_QWORD *)v22 = *(_QWORD *)"distinct[";
      *((_QWORD *)v21 + 4) += 9;
      v23 = a1[1];
      v24 = *((_DWORD *)v23 + 152);
      if (v24)
      {
LABEL_26:
        v25 = *((_QWORD *)v23 + 74);
        v26 = v24 - 1;
        v27 = ((v20 >> 4) ^ (v20 >> 9)) & (v24 - 1);
        v28 = (uint64_t ***)(v25 + 16 * v27);
        v29 = *v28;
        if (*v28 == v20)
          goto LABEL_52;
        v30 = 0;
        v31 = 1;
        while (v29 != (uint64_t **)-4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == (uint64_t **)-8192;
          if (v32)
            v30 = v28;
          v33 = v27 + v31++;
          v27 = v33 & v26;
          v28 = (uint64_t ***)(v25 + 16 * (v33 & v26));
          v29 = *v28;
          if (*v28 == v20)
            goto LABEL_52;
        }
        if (v30)
          v28 = v30;
        v41 = *((_DWORD *)v23 + 150);
        if (4 * v41 + 4 >= 3 * v24)
          goto LABEL_143;
        goto LABEL_48;
      }
    }
    else
    {
      v21 = llvm::raw_ostream::write(*a1, "distinct[", 9uLL);
      v23 = a1[1];
      v24 = *((_DWORD *)v23 + 152);
      if (v24)
        goto LABEL_26;
    }
    v28 = 0;
    v41 = *((_DWORD *)v23 + 150);
    if (4 * v41 + 4 >= 3 * v24)
    {
LABEL_143:
      v24 *= 2;
      goto LABEL_144;
    }
LABEL_48:
    if (v24 + ~v41 - *((_DWORD *)v23 + 151) > v24 >> 3)
    {
      v42 = *v28;
      ++*((_DWORD *)v23 + 150);
      if (v42 == (uint64_t **)-4096)
      {
LABEL_51:
        *v28 = v20;
        v28[1] = (uint64_t **)(*((_QWORD *)v23 + 73))++;
LABEL_52:
        v43 = llvm::raw_ostream::operator<<(v21, (unint64_t)v28[1]);
        v44 = (_WORD *)*((_QWORD *)v43 + 4);
        if (*((_QWORD *)v43 + 3) - (_QWORD)v44 > 1uLL)
        {
          *v44 = 15453;
          *((_QWORD *)v43 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v43, "]<", 2uLL);
        }
        if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v143) + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
        {
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v143);
          if (Value)
          {
            v46 = Value;
              mlir::AsmPrinter::Impl::printAttributeImpl(a1, v46, 0);
          }
          else
          {
            v47 = *a1;
            v48 = *((_QWORD *)*a1 + 4);
            if ((unint64_t)(*((_QWORD *)*a1 + 3) - v48) > 0x11)
            {
              *(_WORD *)(v48 + 16) = 15934;
              *(_OWORD *)v48 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
              *((_QWORD *)v47 + 4) += 18;
            }
            else
            {
              llvm::raw_ostream::write(v47, "<<NULL ATTRIBUTE>>", 0x12uLL);
            }
          }
        }
        goto LABEL_81;
      }
LABEL_50:
      --*((_DWORD *)v23 + 151);
      goto LABEL_51;
    }
LABEL_144:
    llvm::DenseMap<mlir::DistinctAttr,unsigned long long,llvm::DenseMapInfo<mlir::DistinctAttr,void>,llvm::detail::DenseMapPair<mlir::DistinctAttr,unsigned long long>>::grow((uint64_t)v23 + 592, v24);
    v86 = *((_QWORD *)v23 + 74);
    v87 = *((_DWORD *)v23 + 152) - 1;
    v88 = v87 & ((v20 >> 4) ^ (v20 >> 9));
    v28 = (uint64_t ***)(v86 + 16 * v88);
    v89 = *v28;
    if (*v28 == v20)
    {
LABEL_145:
      ++*((_DWORD *)v23 + 150);
      if (v20 == (uint64_t **)-4096)
        goto LABEL_51;
    }
    else
    {
      v125 = 0;
      v126 = 1;
      while (v89 != (uint64_t **)-4096)
      {
        if (v125)
          v127 = 0;
        else
          v127 = v89 == (uint64_t **)-8192;
        if (v127)
          v125 = v28;
        v128 = v88 + v126++;
        v88 = v128 & v87;
        v28 = (uint64_t ***)(v86 + 16 * (v128 & v87));
        v89 = *v28;
        if (*v28 == v20)
          goto LABEL_145;
      }
      if (v125)
        v28 = v125;
      v129 = *v28;
      ++*((_DWORD *)v23 + 150);
      if (v129 == (uint64_t **)-4096)
        goto LABEL_51;
    }
    goto LABEL_50;
  }
  v36 = *a2;
  v37 = (void *)(*a2)[17];
  if (v37 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v38 = a2;
  else
    v38 = 0;
  v142 = v38;
  if (v38)
  {
    v39 = *a1;
    v40 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v40 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v39, 123);
    }
    else
    {
      *((_QWORD *)v39 + 4) = v40 + 1;
      *v40 = 123;
    }
    v53 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v142);
    if (v54)
    {
      v55 = v53;
      v56 = v54;
      v57 = *a1;
      mlir::AsmPrinter::Impl::printNamedAttribute(a1, *v53, v53[1]);
      if (v56 != 1)
      {
        v58 = &v55[2 * v56];
        v59 = v55 + 2;
        do
        {
          while (1)
          {
            v62 = (_WORD *)*((_QWORD *)v57 + 4);
            if (*((_QWORD *)v57 + 3) - (_QWORD)v62 <= 1uLL)
              break;
            *v62 = 8236;
            *((_QWORD *)v57 + 4) += 2;
            v60 = *v59;
            v61 = v59[1];
            v59 += 2;
            mlir::AsmPrinter::Impl::printNamedAttribute(a1, v60, v61);
            if (v59 == v58)
              goto LABEL_76;
          }
          llvm::raw_ostream::write(v57, ", ", 2uLL);
          v63 = *v59;
          v64 = v59[1];
          v59 += 2;
          mlir::AsmPrinter::Impl::printNamedAttribute(a1, v63, v64);
        }
        while (v59 != v58);
      }
    }
LABEL_76:
    v65 = *a1;
    v66 = (char *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v66 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v65, 125);
      goto LABEL_8;
    }
    *((_QWORD *)v65 + 4) = v66 + 1;
    v67 = 125;
    goto LABEL_78;
  }
  if (v37 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v49 = a2;
  else
    v49 = 0;
  v141 = v49;
  if (!v49)
  {
    if (v37 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      v70 = a2;
    else
      v70 = 0;
    v140 = (uint64_t)v70;
    if (v70)
    {
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v140, (uint64_t)v145);
      printFloatValue((const llvm::APFloat *)v145, *a1);
      llvm::APFloat::~APFloat((llvm::APFloat *)v145);
      if (a3 == 1)
      {
        v145[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v140);
        if (mlir::Type::isF64((mlir::Type *)v145))
          return;
      }
      goto LABEL_8;
    }
    if (v37 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
      v74 = a2;
    else
      v74 = 0;
    v139 = v74;
    if (v74)
    {
      v75 = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v139);
      mlir::AsmPrinter::Impl::printEscapedString(a1, v75, v76);
      goto LABEL_8;
    }
    if (v37 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      v77 = a2;
    else
      v77 = 0;
    v138 = v77;
    if (v77)
    {
      v78 = *a1;
      v79 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v79 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v78, 91);
      }
      else
      {
        *((_QWORD *)v78 + 4) = v79 + 1;
        *v79 = 91;
      }
      v145[0].n128_u64[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v138);
      v145[0].n128_u64[1] = v81;
      llvm::interleaveComma<llvm::ArrayRef<mlir::Attribute>,mlir::AsmPrinter::Impl::printAttributeImpl(mlir::Attribute,mlir::AsmPrinter::Impl::AttrTypeElision)::$_1,llvm::raw_ostream,mlir::Attribute const>((llvm::raw_ostream *)v145, *a1, a1);
      v82 = *a1;
      v66 = (char *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v66 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v82, 93);
        goto LABEL_8;
      }
      *((_QWORD *)v82 + 4) = v66 + 1;
      v67 = 93;
      goto LABEL_78;
    }
    if (v37 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
      v80 = a2;
    else
      v80 = 0;
    v137 = v80;
    if (v80)
    {
      llvm::raw_ostream::operator<<(*a1, "affine_map<");
      v145[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v137);
      mlir::AffineMap::print((mlir::AffineMap *)v145, *a1);
LABEL_81:
      v68 = *a1;
      v69 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v69 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v68, 62);
      }
      else
      {
        *((_QWORD *)v68 + 4) = v69 + 1;
        *v69 = 62;
      }
      return;
    }
    if (v37 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
      v83 = a2;
    else
      v83 = 0;
    v136 = v83;
    if (v83)
    {
      llvm::raw_ostream::operator<<(*a1, "affine_set<");
      v145[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v136);
      mlir::IntegerSet::print((mlir::IntegerSet *)v145, *a1);
    }
    if (v37 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
      v84 = a2;
    else
      v84 = 0;
    v135 = v84;
    if (v84)
    {
      v85 = (uint64_t **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v135);
      mlir::AsmPrinter::Impl::printType((uint64_t)a1, v85);
      goto LABEL_8;
    }
    if (v37 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
      v90 = a2;
    else
      v90 = 0;
    v134 = v90;
    if (v90)
    {
      v145[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v134);
      v91 = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v145);
      printSymbolReference(v91, v92, *a1);
      v93 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v134);
      if (v94)
      {
        v95 = (unint64_t *)v93;
        v96 = 8 * v94;
        do
        {
          v97 = *v95++;
          v145[0].n128_u64[0] = v97;
          llvm::raw_ostream::operator<<(*a1, "::");
          v98 = (char *)mlir::FlatSymbolRefAttr::getValue((mlir::FlatSymbolRefAttr *)v145);
          printSymbolReference(v98, v99, *a1);
          v96 -= 8;
        }
        while (v96);
      }
      goto LABEL_8;
    }
    if (v37 == &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id && a2)
    {
      v100 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>((uint64_t)(v36 + 1));
      shouldElideElementsAttr = mlir::OpPrintingFlags::shouldElideElementsAttr((uint64_t)(a1 + 2), (uint64_t)a2, v100);
      v102 = *a1;
      if (!shouldElideElementsAttr)
      {
        llvm::raw_ostream::operator<<(v102, "dense<");
        mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(a1, (uint64_t)a2, 1);
LABEL_170:
        v109 = *a1;
        v66 = (char *)*((_QWORD *)*a1 + 4);
        if ((unint64_t)v66 >= *((_QWORD *)*a1 + 3))
        {
          llvm::raw_ostream::write(v109, 62);
          goto LABEL_8;
        }
        *((_QWORD *)v109 + 4) = v66 + 1;
        v67 = 62;
LABEL_78:
        *v66 = v67;
        goto LABEL_8;
      }
    }
    else
    {
      if (v37 != &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id || !a2)
      {
        if (v37 == &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id)
          v105 = a2;
        else
          v105 = 0;
        v133 = v105;
        if (!v105)
        {
          if (v37 == &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id)
            v110 = a2;
          else
            v110 = 0;
          v132 = v110;
          if (v110)
          {
            mlir::StridedLayoutAttr::print((llvm::raw_ostream *)&v132, *a1);
          }
          else
          {
            if (v37 == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
              v114 = (uint64_t)a2;
            else
              v114 = 0;
            v131 = v114;
            if (v114)
            {
              llvm::raw_ostream::operator<<(*a1, "array<");
              v115 = (uint64_t **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v131);
              mlir::AsmPrinter::Impl::printType((uint64_t)a1, v115);
              if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v131))
              {
                llvm::raw_ostream::operator<<(*a1, ": ");
                mlir::AsmPrinter::Impl::printDenseArrayAttr(a1, v131);
              }
              llvm::raw_ostream::operator<<(*a1, ">");
              return;
            }
            if (v37 == &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id)
              v124 = a2;
            else
              v124 = 0;
            v130 = v124;
            if (v124)
            {
              llvm::raw_ostream::operator<<(*a1, "dense_resource<");
              mlir::DenseResourceElementsAttr::getRawHandle((mlir::DenseResourceElementsAttr *)&v130, v145);
              mlir::AsmPrinter::Impl::printResourceHandle((uint64_t)a1, (uint64_t *)v145);
              llvm::raw_ostream::operator<<(*a1, ">");
            }
            else
            {
              if (!mlir::LocationAttr::classof((uint64_t)a2) || !a2)
                llvm::report_fatal_error((llvm *)"Unknown builtin attribute", (const char *)1);
              mlir::AsmPrinter::Impl::printLocation((uint64_t)a1, (uint64_t)a2, 0);
            }
          }
          goto LABEL_8;
        }
        RHS = (_QWORD *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v133);
        v107 = (uint64_t)RHS;
        if (RHS)
          v108 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*RHS + 8);
        else
          v108 = 0;
        if ((mlir::OpPrintingFlags::shouldElideElementsAttr((uint64_t)(a1 + 2), v107, v108) & 1) != 0
          || ((Values = (_QWORD *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v133),
               (v112 = (uint64_t)Values) == 0)
            ? (v113 = 0)
            : (v113 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*Values + 8)),
              mlir::OpPrintingFlags::shouldElideElementsAttr((uint64_t)(a1 + 2), v112, v113)))
        {
          printElidedElementsAttr(*a1);
          goto LABEL_8;
        }
        llvm::raw_ostream::operator<<(*a1, "sparse<");
        v145[0].n128_u64[0] = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v133);
        if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v145))
        {
          mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(a1, v145[0].n128_i64[0], 0);
          llvm::raw_ostream::operator<<(*a1, ", ");
          v116 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v133);
          mlir::AsmPrinter::Impl::printDenseElementsAttr(a1, v116, 1);
        }
        goto LABEL_170;
      }
      v103 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>((uint64_t)(v36 + 1));
      v104 = mlir::OpPrintingFlags::shouldElideElementsAttr((uint64_t)(a1 + 2), (uint64_t)a2, v103);
      v102 = *a1;
      if (!v104)
      {
        llvm::raw_ostream::operator<<(v102, "dense<");
        mlir::AsmPrinter::Impl::printDenseStringElementsAttr(a1, (uint64_t)a2);
        goto LABEL_170;
      }
    }
    printElidedElementsAttr(v102);
    goto LABEL_8;
  }
  v140 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v141);
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v140, 1))
  {
    v50 = *a1;
    mlir::IntegerAttr::getValue(&v141, (llvm::APInt *)v145);
    v51 = v145[0].n128_u32[2];
    if (v145[0].n128_u32[2] > 0x40)
      v52 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v145) == v51;
    else
      v52 = v145[0].n128_u64[0] == 0;
    if (v52)
      v73 = "false";
    else
      v73 = "true";
    llvm::raw_ostream::operator<<(v50, v73);
    if (v145[0].n128_u32[2] >= 0x41 && v145[0].n128_u64[0])
      MEMORY[0x20BD002D4](v145[0].n128_u64[0], 0x1000C8000313F17);
    return;
  }
  v71 = !mlir::Type::isUnsignedInteger((mlir::Type *)&v140) && !mlir::Type::isSignlessInteger((mlir::Type *)&v140, 1);
  mlir::IntegerAttr::getValue(&v141, (llvm::APInt *)v145);
  llvm::APInt::print((llvm::APInt *)v145, *a1, v71);
  if (v145[0].n128_u32[2] >= 0x41 && v145[0].n128_u64[0])
    MEMORY[0x20BD002D4](v145[0].n128_u64[0], 0x1000C8000313F17);
  if (a3 != 1 || !mlir::Type::isSignlessInteger((mlir::Type *)&v140, 64))
    goto LABEL_8;
}

void mlir::AsmPrinter::Impl::printDialectAttribute(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  size_t v8;
  _QWORD v9[2];
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  char *v24;
  size_t v25;
  uint64_t v26;

  v4 = **a2;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v15 = &unk_24C02DC40;
  v23 = (void **)&v24;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v15, 0, 0, 0);
  v5 = *(_QWORD *)(a1 + 8);
  v10[0] = &v15;
  v10[1] = v5;
  v13 = *(_QWORD *)(v5 + 648);
  v6 = *(_OWORD *)(v5 + 632);
  v11 = *(_OWORD *)(v5 + 616);
  v12 = v6;
  v14 = 1;
  v9[0] = &off_24C0342F8;
  v9[1] = v10;
  (*(void (**)(uint64_t, uint64_t **, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2, v9);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
  if (v26 >= 0)
    v7 = (char *)&v24;
  else
    v7 = v24;
  if (v26 >= 0)
    v8 = HIBYTE(v26);
  else
    v8 = v25;
  printDialectSymbol(*(llvm::raw_ostream **)a1, "#", 1uLL, *(const char **)(v4 + 8), *(_QWORD *)(v4 + 16), v7, v8);
  if (SHIBYTE(v26) < 0)
    operator delete(v24);
}

llvm::raw_ostream *printDialectSymbol(llvm::raw_ostream *a1, const char *a2, size_t a3, const char *a4, size_t a5, char *a6, size_t a7)
{
  llvm::raw_ostream *v12;
  void *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  unsigned int v16;
  size_t v17;
  int v18;
  BOOL v19;
  BOOL v21;
  _BYTE *v22;
  void *v23;
  llvm::raw_ostream *result;
  _BYTE *v25;

  v12 = a1;
  v14 = *((_QWORD *)a1 + 3);
  v13 = (void *)*((_QWORD *)a1 + 4);
  if (a3 > v14 - (uint64_t)v13)
  {
    v15 = llvm::raw_ostream::write(v12, a2, a3);
    v13 = (void *)*((_QWORD *)v15 + 4);
    if (a5 <= *((_QWORD *)v15 + 3) - (_QWORD)v13)
      goto LABEL_3;
LABEL_10:
    llvm::raw_ostream::write(v15, a4, a5);
    if (!a7)
      goto LABEL_35;
    goto LABEL_11;
  }
  if (a3)
  {
    memcpy(v13, a2, a3);
    v13 = (void *)(*((_QWORD *)v12 + 4) + a3);
    *((_QWORD *)v12 + 4) = v13;
  }
  v15 = v12;
  if (a5 > *((_QWORD *)v12 + 3) - (_QWORD)v13)
    goto LABEL_10;
LABEL_3:
  if (a5)
  {
    memcpy(v13, a4, a5);
    *((_QWORD *)v15 + 4) += a5;
  }
  if (!a7)
    goto LABEL_35;
LABEL_11:
  v16 = *a6;
  if ((v16 & 0x80000000) != 0)
  {
    if (!__maskrune(v16, 0x100uLL))
      goto LABEL_35;
  }
  else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v16 + 60) & 0x100) == 0)
  {
    goto LABEL_35;
  }
  v17 = 0;
  while (1)
  {
    v18 = a6[v17];
    if (v18 != 95)
    {
      v19 = v18 != 46 && (v18 - 48) >= 0xA;
      if (v19 && (v18 & 0xFFFFFFDF) - 65 > 0x19)
        break;
    }
    if (a7 == ++v17)
      goto LABEL_32;
  }
  v21 = a7 > v17;
  if (a7 < v17)
    v17 = a7;
  if (v21 && (a6[v17] != 60 || a6[v17 + a7 + ~v17] != 62))
  {
LABEL_35:
    v25 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)v12 + 3))
    {
      v12 = llvm::raw_ostream::write(v12, 60);
      result = (llvm::raw_ostream *)*((_QWORD *)v12 + 4);
      if (a7 <= *((_QWORD *)v12 + 3) - (_QWORD)result)
      {
LABEL_37:
        if (a7)
        {
          memcpy(result, a6, a7);
          result = (llvm::raw_ostream *)(*((_QWORD *)v12 + 4) + a7);
          *((_QWORD *)v12 + 4) = result;
        }
        if ((unint64_t)result < *((_QWORD *)v12 + 3))
          goto LABEL_40;
        return llvm::raw_ostream::write(v12, 62);
      }
    }
    else
    {
      *((_QWORD *)v12 + 4) = v25 + 1;
      *v25 = 60;
      result = (llvm::raw_ostream *)*((_QWORD *)v12 + 4);
      if (a7 <= *((_QWORD *)v12 + 3) - (_QWORD)result)
        goto LABEL_37;
    }
    v12 = llvm::raw_ostream::write(v12, a6, a7);
    result = (llvm::raw_ostream *)*((_QWORD *)v12 + 4);
    if ((unint64_t)result < *((_QWORD *)v12 + 3))
    {
LABEL_40:
      *((_QWORD *)v12 + 4) = (char *)result + 1;
      *(_BYTE *)result = 62;
      return result;
    }
    return llvm::raw_ostream::write(v12, 62);
  }
LABEL_32:
  v22 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v12 + 3))
  {
    v12 = llvm::raw_ostream::write(v12, 46);
    v23 = (void *)*((_QWORD *)v12 + 4);
    if (a7 <= *((_QWORD *)v12 + 3) - (_QWORD)v23)
      goto LABEL_34;
  }
  else
  {
    *((_QWORD *)v12 + 4) = v22 + 1;
    *v22 = 46;
    v23 = (void *)*((_QWORD *)v12 + 4);
    if (a7 <= *((_QWORD *)v12 + 3) - (_QWORD)v23)
    {
LABEL_34:
      result = (llvm::raw_ostream *)memcpy(v23, a6, a7);
      *((_QWORD *)v12 + 4) += a7;
      return result;
    }
  }
  return llvm::raw_ostream::write(v12, a6, a7);
}

void printFloatValue(const llvm::APFloat *a1, llvm::raw_ostream *a2)
{
  llvm::detail::DoubleAPFloat *v4;
  void *v5;
  void *v6;
  const llvm::APFloat *v7;
  int IsEqual;
  void *v9;
  _QWORD *v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD v14[3];
  void *v15;
  __int128 v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v4 = (const llvm::APFloat *)((char *)a1 + 8);
  v5 = (void *)*((_QWORD *)a1 + 1);
  v6 = llvm::APFloatBase::PPCDoubleDouble(a1);
  v7 = (const llvm::APFloat *)*((_QWORD *)a1 + 2);
  if (v6 != v5)
    v7 = a1;
  if ((*((_BYTE *)v7 + 28) & 6) == 0)
  {
LABEL_28:
    v15 = v17;
    v16 = xmmword_207AB84C0;
    if (v6 == v5)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v4, (llvm::APInt *)&v13);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt(v4, (uint64_t)&v13);
    llvm::APInt::toString((uint64_t)&v13, &v15, 0x10u, 0, 1, 1);
    llvm::raw_ostream::write(a2, (const char *)v15, v16);
    if (LODWORD(v14[0]) >= 0x41)
    {
      if (v13)
        MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
    }
    v9 = v15;
    if (v15 != v17)
      goto LABEL_35;
    return;
  }
  v15 = v17;
  v16 = xmmword_207AB84B0;
  if (v6 == v5)
    llvm::detail::DoubleAPFloat::toString(v4, (uint64_t *)&v15, 6, 0, 0);
  else
    llvm::detail::IEEEFloat::toString((uint64_t)v4, (uint64_t *)&v15, 6u, 0, 0);
  llvm::APFloat::APFloat((llvm::APFloatBase *)&v13, *(void **)v4, (unsigned __int8 *)v15, v16);
  if (v14[0] == *(_QWORD *)v4)
  {
    if (v6 == (void *)v14[0])
    {
      IsEqual = llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)v14, v4);
      if (v6 == (void *)v14[0])
        goto LABEL_16;
    }
    else
    {
      IsEqual = llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)v14, v4);
      if (v6 == (void *)v14[0])
        goto LABEL_16;
    }
LABEL_9:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
    if (IsEqual)
      goto LABEL_10;
    goto LABEL_17;
  }
  IsEqual = 0;
  if (v6 != (void *)v14[0])
    goto LABEL_9;
LABEL_16:
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14);
  if (IsEqual)
  {
LABEL_10:
    llvm::raw_ostream::write(a2, (const char *)v15, v16);
    v9 = v15;
    if (v15 == v17)
      return;
LABEL_35:
    free(v9);
    return;
  }
LABEL_17:
  *(_QWORD *)&v16 = 0;
  if (v6 == *(void **)v4)
  {
    llvm::detail::DoubleAPFloat::toString(v4, (uint64_t *)&v15, 0, 3, 1);
    v10 = v15;
    v11 = v16;
    if (!(_QWORD)v16)
    {
LABEL_25:
      if (v10 != v17)
        free(v10);
      v5 = *(void **)v4;
      goto LABEL_28;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::toString((uint64_t)v4, (uint64_t *)&v15, 0, 3u, 1);
    v10 = v15;
    v11 = v16;
    if (!(_QWORD)v16)
      goto LABEL_25;
  }
  v12 = memchr(v10, 46, v11);
  if (!v12 || v12 - (_BYTE *)v10 == -1)
    goto LABEL_25;
  llvm::raw_ostream::write(a2, (const char *)v10, v11);
  v9 = v15;
  if (v15 != v17)
    goto LABEL_35;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printEscapedString(llvm::raw_ostream **a1, llvm::raw_ostream *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  v6 = *a1;
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\"", 1uLL);
  }
  else
  {
    *v7 = 34;
    ++*((_QWORD *)v6 + 4);
  }
  llvm::printEscapedString(a2, a3, *a1);
  result = *a1;
  v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v9)
    return llvm::raw_ostream::write(result, "\"", 1uLL);
  *v9 = 34;
  ++*((_QWORD *)result + 4);
  return result;
}

double mlir::AffineMap::print(mlir::AffineMap *this, llvm::raw_ostream *a2)
{
  mlir::MLIRContext *LHS;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  if (*(_QWORD *)this)
  {
    LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS(this);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v11);
    v5 = operator new();
    v6 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection((_QWORD *)v5, LHS);
    *(_QWORD *)(v6 + 56) = v6 + 72;
    *(_QWORD *)(v6 + 64) = 0x600000000;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_DWORD *)(v6 + 136) = 0;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_DWORD *)(v6 + 160) = 0;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_QWORD *)(v6 + 168) = v6 + 184;
    *(_QWORD *)(v6 + 176) = 0;
    *(_QWORD *)(v6 + 200) = v6 + 216;
    *(_QWORD *)(v6 + 208) = *(_QWORD *)"";
    *(_QWORD *)(v6 + 248) = v6 + 264;
    *(_OWORD *)(v6 + 256) = 0u;
    *(_QWORD *)(v6 + 272) = 1;
    *(_OWORD *)(v6 + 280) = 0u;
    *(_DWORD *)(v6 + 296) = 0;
    *(_DWORD *)(v6 + 320) = 0;
    *(_OWORD *)(v6 + 304) = 0u;
    *(_DWORD *)(v6 + 344) = 0;
    *(_OWORD *)(v6 + 328) = 0u;
    *(_DWORD *)(v6 + 368) = 0;
    *(_OWORD *)(v6 + 352) = 0u;
    *(_DWORD *)(v6 + 392) = 0;
    *(_OWORD *)(v6 + 376) = 0u;
    *(_DWORD *)(v6 + 416) = 0;
    *(_OWORD *)(v6 + 400) = 0u;
    *(_OWORD *)(v6 + 424) = 0u;
    *(_QWORD *)(v6 + 440) = 0;
    *(_QWORD *)(v6 + 448) = v6 + 464;
    *(_QWORD *)(v6 + 456) = *(_QWORD *)"";
    *(_QWORD *)(v6 + 496) = v6 + 512;
    *(_OWORD *)(v6 + 504) = 0u;
    *(_QWORD *)(v6 + 520) = 1;
    *(_QWORD *)(v6 + 528) = 0;
    *(_DWORD *)(v5 + 536) = 0;
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v6 + 544));
    *(_DWORD *)(v5 + 608) = 0;
    *(_QWORD *)(v5 + 600) = 0;
    *(_OWORD *)(v5 + 584) = 0u;
    v7 = v12;
    *(_OWORD *)(v5 + 616) = v11;
    *(_OWORD *)(v5 + 632) = v7;
    *(_QWORD *)(v5 + 648) = v13;
    *(_QWORD *)(v5 + 656) = 0;
    *(_OWORD *)(v5 + 664) = 0u;
    *(_DWORD *)(v5 + 680) = 0;
    *(_QWORD *)(v5 + 688) = v5 + 704;
    *(_QWORD *)(v5 + 696) = 0;
    *(_QWORD *)&v11 = a2;
    *((_QWORD *)&v11 + 1) = v5;
    v8 = *(_OWORD *)(v5 + 632);
    v12 = *(_OWORD *)(v5 + 616);
    v13 = v8;
    v14 = *(_QWORD *)(v5 + 648);
    v15 = 1;
    mlir::AsmPrinter::Impl::printAffineMap((llvm::raw_ostream **)&v11, *(_QWORD *)this);
    mlir::detail::AsmStateImpl::~AsmStateImpl((mlir::detail::AsmStateImpl *)v5);
  }
  v9 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 0x12)
  {
    *(_DWORD *)(v9 + 15) = 1044271169;
    result = *(double *)"<<NULL AFFINE MAP>>";
    *(_OWORD *)v9 = *(_OWORD *)"<<NULL AFFINE MAP>>";
    *((_QWORD *)a2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(a2, "<<NULL AFFINE MAP>>", 0x13uLL);
  }
  return result;
}

void mlir::IntegerSet::print(mlir::IntegerSet *this, llvm::raw_ostream *a2)
{
  mlir::MLIRContext *Context;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext(this);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v9);
  v5 = operator new();
  v6 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection((_QWORD *)v5, Context);
  *(_QWORD *)(v6 + 56) = v6 + 72;
  *(_QWORD *)(v6 + 64) = 0x600000000;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_DWORD *)(v6 + 136) = 0;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_DWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_QWORD *)(v6 + 168) = v6 + 184;
  *(_QWORD *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 200) = v6 + 216;
  *(_QWORD *)(v6 + 208) = *(_QWORD *)"";
  *(_QWORD *)(v6 + 248) = v6 + 264;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_QWORD *)(v6 + 272) = 1;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_DWORD *)(v6 + 296) = 0;
  *(_DWORD *)(v6 + 320) = 0;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_DWORD *)(v6 + 344) = 0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 392) = 0;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_DWORD *)(v6 + 416) = 0;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_QWORD *)(v6 + 440) = 0;
  *(_QWORD *)(v6 + 448) = v6 + 464;
  *(_QWORD *)(v6 + 456) = *(_QWORD *)"";
  *(_QWORD *)(v6 + 496) = v6 + 512;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_QWORD *)(v6 + 520) = 1;
  *(_QWORD *)(v6 + 528) = 0;
  *(_DWORD *)(v5 + 536) = 0;
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v6 + 544));
  *(_DWORD *)(v5 + 608) = 0;
  *(_QWORD *)(v5 + 600) = 0;
  *(_OWORD *)(v5 + 584) = 0u;
  v7 = v10;
  *(_OWORD *)(v5 + 616) = v9;
  *(_OWORD *)(v5 + 632) = v7;
  *(_QWORD *)(v5 + 648) = v11;
  *(_QWORD *)(v5 + 656) = 0;
  *(_OWORD *)(v5 + 664) = 0u;
  *(_DWORD *)(v5 + 680) = 0;
  *(_QWORD *)(v5 + 688) = v5 + 704;
  *(_QWORD *)(v5 + 696) = 0;
  *(_QWORD *)&v9 = a2;
  *((_QWORD *)&v9 + 1) = v5;
  v8 = *(_OWORD *)(v5 + 632);
  v10 = *(_OWORD *)(v5 + 616);
  v11 = v8;
  v12 = *(_QWORD *)(v5 + 648);
  v13 = 1;
  mlir::AsmPrinter::Impl::printIntegerSet((llvm::raw_ostream **)&v9, *(_QWORD *)this);
  mlir::detail::AsmStateImpl::~AsmStateImpl((mlir::detail::AsmStateImpl *)v5);
}

uint64_t sub_2072A8FCC(uint64_t a1)
{
  return MEMORY[0x20BD002F8](a1, 0x10B0C4070846C5ALL);
}

void mlir::AsmPrinter::Impl::printType(uint64_t a1, uint64_t **a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  if (a2)
  {
    if (!mlir::AsmPrinter::Impl::printAlias(a1, (uint64_t)a2))
      mlir::AsmPrinter::Impl::printTypeImpl(a1, a2);
  }
  else
  {
    v4 = *(llvm::raw_ostream **)a1;
    v5 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v5 > 0xCuLL)
    {
      qmemcpy(v5, "<<NULL TYPE>>", 13);
      *((_QWORD *)v4 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v4, "<<NULL TYPE>>", 0xDuLL);
    }
  }
}

double printSymbolReference(char *a1, size_t a2, llvm::raw_ostream *a3)
{
  _BYTE *v6;
  void *v7;
  double result;

  if (a2)
  {
    v6 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)a3 + 3))
    {
      llvm::raw_ostream::write(a3, 64);
    }
    else
    {
      *((_QWORD *)a3 + 4) = v6 + 1;
      *v6 = 64;
    }
    printKeywordOrString(a1, a2, a3);
  }
  else
  {
    v7 = (void *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v7 > 0x18uLL)
    {
      qmemcpy(v7, "@<<INVALID EMPTY SYMBOL>>", 25);
      result = *(double *)"D EMPTY SYMBOL>>";
      *((_QWORD *)a3 + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(a3, "@<<INVALID EMPTY SYMBOL>>", 0x19uLL);
    }
  }
  return result;
}

uint64_t mlir::FlatSymbolRefAttr::getValue(mlir::FlatSymbolRefAttr *this)
{
  uint64_t Value;

  Value = mlir::AffineMapAttr::getValue(this);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

double printElidedElementsAttr(llvm::raw_ostream *a1)
{
  void *v1;
  double result;

  v1 = (void *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v1 > 0x19uLL)
  {
    qmemcpy(v1, "dense_resource<__elided__>", 26);
    result = *(double *)"urce<__elided__>";
    *((_QWORD *)a1 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(a1, "dense_resource<__elided__>", 0x1AuLL);
  }
  return result;
}

void mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(llvm::raw_ostream **a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t *Shape;
  uint64_t v7;
  uint64_t NumElements;
  unsigned __int8 *RawStringData;
  size_t v14;
  uint64_t v15;
  void *v16;
  int isSplat;
  uint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  void (*v21)(uint64_t, uint64_t);
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OperandRange;
  uint64_t Value;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v28 = a2;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  v27 = v5;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&Value);
  NumElements = mlir::ShapedType::getNumElements(Shape, v7);
  if ((mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28) & 1) != 0 || !a3)
    goto LABEL_17;
  if (atomic_load((unint64_t *)&clOptions))
  {
    if (atomic_load((unint64_t *)&clOptions))
    {
      if (*(_WORD *)(clOptions + 8))
      {
LABEL_6:
        if (atomic_load((unint64_t *)&clOptions))
        {
          if (*(_QWORD *)(clOptions + 128) == -1)
            goto LABEL_17;
        }
        else
        {
          if (*(_QWORD *)(clOptions + 128) == -1)
            goto LABEL_17;
        }
        if (atomic_load((unint64_t *)&clOptions))
        {
          if (*(_QWORD *)(clOptions + 128) >= NumElements)
            goto LABEL_17;
        }
        else
        {
          if (*(_QWORD *)(clOptions + 128) >= NumElements)
            goto LABEL_17;
        }
LABEL_15:
        RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v28);
        mlir::AsmPrinter::Impl::printHexString(a1, RawStringData, v14);
        return;
      }
    }
    else
    {
      if (*(_WORD *)(clOptions + 8))
        goto LABEL_6;
    }
  }
  if (NumElements >= 101)
    goto LABEL_15;
LABEL_17:
  v15 = OperandRange;
  v16 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (v16 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v15 = 0;
  v24 = v15;
  if (v16 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v23 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v24);
    if (*(_UNKNOWN **)(*(_QWORD *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      mlir::DenseElementsAttr::tryGetComplexIntValues((mlir::DenseElementsAttr *)&v28, (uint64_t)&v35);
      v30 = v36;
      isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28);
      v18 = Value;
      v19 = v27;
      v20 = *a1;
      *(_QWORD *)&v29 = &v35;
      *((_QWORD *)&v29 + 1) = a1;
      v21 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_0>;
      *(_QWORD *)&v30 = &v23;
      goto LABEL_27;
    }
    mlir::DenseElementsAttr::tryGetComplexFloatValues((mlir::DenseElementsAttr *)&v28, (uint64_t)&v35);
    v29 = v35;
    v30 = v36;
    v31 = v37;
    v32 = v38;
    v33 = v39;
    v34 = v40;
    isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28);
    v18 = Value;
    v19 = v27;
    v20 = *a1;
    v21 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_1>;
LABEL_25:
    *(_QWORD *)&v29 = &v35;
    *((_QWORD *)&v29 + 1) = a1;
LABEL_27:
    v22 = &v29;
    goto LABEL_28;
  }
  if (!mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange))
  {
    mlir::DenseElementsAttr::tryGetFloatValues((mlir::DenseElementsAttr *)&v28, (uint64_t)&v35);
    v29 = v35;
    v30 = v36;
    v31 = v37;
    v32 = v38;
    v33 = v39;
    v34 = v40;
    isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28);
    v18 = Value;
    v19 = v27;
    v20 = *a1;
    v21 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_3>;
    goto LABEL_25;
  }
  mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v28, (uint64_t)&v35);
  v29 = v35;
  v30 = v36;
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28);
  v18 = Value;
  v19 = v27;
  v20 = *a1;
  *(_QWORD *)&v35 = &v29;
  *((_QWORD *)&v35 + 1) = a1;
  v21 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_2>;
  *(_QWORD *)&v36 = &OperandRange;
  v22 = &v35;
LABEL_28:
  printDenseElementsAttrImpl(isSplat, v18, v19, v20, v21, (uint64_t)v22);
}

void mlir::AsmPrinter::Impl::printDenseStringElementsAttr(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v3;
  int isSplat;
  uint64_t Value;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  uint64_t v9;

  v9 = a2;
  v8[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v9);
  v8[1] = v3;
  v7[0] = a1;
  v7[1] = v8;
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v9);
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v9);
  printDenseElementsAttrImpl(isSplat, Value, v6, *a1, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>, (uint64_t)v7);
}

void mlir::AsmPrinter::Impl::printDenseElementsAttr(llvm::raw_ostream **a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int isSplat;
  uint64_t Value;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint64_t v10;

  if (a2
    && *(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id)
  {
    v10 = a2;
    v9[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v10);
    v9[1] = v4;
    v8[0] = a1;
    v8[1] = v9;
    isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v10);
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v10);
    printDenseElementsAttrImpl(isSplat, Value, v7, *a1, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>, (uint64_t)v8);
  }
  else
  {
    mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(a1, a2, a3);
  }
}

void mlir::AsmPrinter::Impl::printDenseArrayAttr(llvm::raw_ostream **a1, uint64_t a2)
{
  unsigned int IntOrFloatBitWidth;
  uint64_t v4;
  unsigned int LHS;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t i;
  _WORD *v9;
  _QWORD v10[2];
  unsigned int v11;
  unsigned int v12;
  uint64_t Value;
  uint64_t v14;
  _QWORD v15[5];

  v14 = a2;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  if (mlir::Type::isInteger((mlir::Type *)&Value, 1))
    IntOrFloatBitWidth = 8;
  else
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value);
  v11 = IntOrFloatBitWidth >> 3;
  v12 = IntOrFloatBitWidth;
  v10[0] = mlir::DenseArrayAttr::getRawData((mlir::DenseArrayAttr *)&v14);
  v10[1] = v4;
  LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v14);
  v6 = *a1;
  v15[0] = &v12;
  v15[1] = v10;
  v15[2] = &v11;
  v15[3] = &Value;
  v15[4] = a1;
  v7 = LHS;
  if (LHS)
  {
    mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, 0);
    if (v7 != 1)
    {
      for (i = 1; i != v7; ++i)
      {
        while (1)
        {
          v9 = (_WORD *)*((_QWORD *)v6 + 4);
          if (*((_QWORD *)v6 + 3) - (_QWORD)v9 <= 1uLL)
            break;
          *v9 = 8236;
          *((_QWORD *)v6 + 4) += 2;
          mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, i++);
          if (v7 == i)
            return;
        }
        llvm::raw_ostream::write(v6, ", ", 2uLL);
        mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, i);
      }
    }
  }
}

void printDenseElementsAttrImpl(int a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t *Shape;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _WORD *v17;
  unsigned int v18;
  BOOL v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t NumElements;
  _QWORD v30[2];
  void *v31;
  uint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  v30[0] = a2;
  v30[1] = a3;
  if (a1)
  {
    a5(a6, 0);
    return;
  }
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
  NumElements = mlir::ShapedType::getNumElements(Shape, v8);
  if (NumElements)
  {
    mlir::ShapedType::getShape((mlir::ShapedType *)v30);
    v10 = v9;
    v31 = v33;
    v32 = *(_QWORD *)"";
    if (v9 < 5)
    {
      if (!v9)
      {
LABEL_9:
        LODWORD(v32) = v10;
        v13 = mlir::ShapedType::getShape((mlir::ShapedType *)v30);
        if (!(_DWORD)NumElements)
          goto LABEL_36;
        v14 = v13;
        v15 = 0;
        v16 = 0;
        while (1)
        {
          if (!(_DWORD)v15)
            goto LABEL_16;
          v17 = (_WORD *)*((_QWORD *)a4 + 4);
          if (*((_QWORD *)a4 + 3) - (_QWORD)v17 <= 1uLL)
            break;
          *v17 = 8236;
          *((_QWORD *)a4 + 4) += 2;
          if (v10 > v16)
          {
LABEL_19:
            v18 = v16 + 1;
            do
            {
              while (1)
              {
                v20 = (_BYTE *)*((_QWORD *)a4 + 4);
                if ((unint64_t)v20 >= *((_QWORD *)a4 + 3))
                  break;
                *((_QWORD *)a4 + 4) = v20 + 1;
                *v20 = 91;
                v19 = v10 <= v18++;
                if (v19)
                  goto LABEL_24;
              }
              llvm::raw_ostream::write(a4, 91);
              v19 = v10 <= v18++;
            }
            while (!v19);
          }
LABEL_24:
          a5(a6, v15);
          ++*((_DWORD *)v31 + v10 - 1);
          if ((_DWORD)v10 == 1)
          {
            v16 = 1;
          }
          else
          {
            v16 = v10;
            v21 = (v10 - 1);
            LODWORD(v22) = v10;
            do
            {
              v23 = v22;
              v22 = v21;
              v24 = v31;
              if (*(_QWORD *)(v14 + 8 * v22) <= (uint64_t)*((unsigned int *)v31 + v22))
              {
                *((_DWORD *)v31 + v22) = 0;
                ++v24[v23 - 2];
                --v16;
                v25 = (_BYTE *)*((_QWORD *)a4 + 4);
                if ((unint64_t)v25 < *((_QWORD *)a4 + 3))
                {
                  *((_QWORD *)a4 + 4) = v25 + 1;
                  *v25 = 93;
                }
                else
                {
                  llvm::raw_ostream::write(a4, 93);
                }
              }
              v21 = v22 - 1;
            }
            while ((_DWORD)v22 != 1);
          }
          v15 = (v15 + 1);
          if ((_DWORD)v15 == (_DWORD)NumElements)
          {
            for (; v16; --v16)
            {
              while (1)
              {
                v26 = (_BYTE *)*((_QWORD *)a4 + 4);
                if ((unint64_t)v26 >= *((_QWORD *)a4 + 3))
                  break;
                *((_QWORD *)a4 + 4) = v26 + 1;
                *v26 = 93;
                if (!--v16)
                  goto LABEL_36;
              }
              llvm::raw_ostream::write(a4, 93);
            }
LABEL_36:
            if (v31 != v33)
              free(v31);
            return;
          }
        }
        llvm::raw_ostream::write(a4, ", ", 2uLL);
LABEL_16:
        if (v10 > v16)
          goto LABEL_19;
        goto LABEL_24;
      }
      v12 = 4 * v9;
      v11 = v33;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v9, 4);
      v11 = v31;
      v12 = 4 * v10;
    }
    bzero(v11, v12);
    goto LABEL_9;
  }
}

void mlir::AsmPrinter::Impl::printTypeImpl(uint64_t a1, uint64_t **a2)
{
  void *v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  const char *AttrData;
  size_t v8;
  size_t v9;
  char *v10;
  size_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  int *v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  llvm::raw_ostream *v26;
  char *v27;
  char v28;
  _BYTE *RawStringData;
  uint64_t v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _DWORD *v33;
  uint64_t *Inputs;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  llvm::raw_ostream *v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  _DWORD *v41;
  char v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t *v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  llvm::raw_ostream *v53;
  uint64_t v54;
  void *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  unsigned int Width;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  _BYTE *v64;
  llvm::raw_ostream *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  llvm::raw_ostream *v69;
  _DWORD *v70;
  unint64_t v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  uint64_t RHS;
  uint64_t v75;
  llvm::raw_ostream *v76;
  uint64_t v77;
  uint64_t *Results;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  llvm::raw_ostream *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _WORD *v89;
  uint64_t v90;
  llvm::raw_ostream *v91;
  void *v92;
  void *v93;
  llvm::raw_ostream *v94;
  void *v95;
  llvm::raw_ostream *v96;
  _BYTE *v97;
  uint64_t *v98;
  uint64_t v99;
  _WORD *v100;
  uint64_t v101;
  llvm::raw_ostream *v102;
  void *v103;
  llvm::raw_ostream *v104;
  void *v105;
  uint64_t v106;
  llvm::raw_ostream *v107;
  uint64_t v108;
  llvm::raw_ostream *v109;
  _WORD *v110;
  uint64_t Values;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  llvm::raw_ostream *v117;
  _BYTE *v118;
  llvm::raw_ostream *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  llvm::raw_ostream *v123;
  _QWORD *v124;
  llvm::raw_ostream *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  llvm::raw_ostream *v129;
  uint64_t v130;
  uint64_t v131;
  llvm::raw_ostream *v132;
  _WORD *v133;
  uint64_t v134;
  uint64_t v135;
  llvm::raw_ostream *v136;
  uint64_t v137;
  llvm::raw_ostream *v138;
  void *v139;
  llvm::raw_ostream *v140;
  _WORD *v141;
  uint64_t LayerSchedule;
  uint64_t v143;
  llvm::raw_ostream *v144;
  _WORD *v145;
  uint64_t v146;
  llvm::raw_ostream *v147;
  _BYTE *v148;
  uint64_t *Types;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  llvm::raw_ostream *v153;
  uint64_t v154;
  void *v155;
  uint64_t *v156;
  uint64_t v157;
  _WORD *v158;
  uint64_t v159;
  llvm::raw_ostream *v160;
  void *v161;
  _QWORD v162[2];
  uint64_t Value;

  v3 = (void *)(*a2)[17];
  if (v3 == &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id)
  {
    v6 = *(llvm::raw_ostream **)a1;
    v162[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
    AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    v9 = v8;
    v10 = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v162);
    printDialectSymbol(v6, "!", 1uLL, AttrData, v9, v10, v11);
    return;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v13 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v13) <= 4)
    {
      v14 = "index";
      v15 = 5;
      goto LABEL_35;
    }
    *(_BYTE *)(v13 + 4) = 120;
    *(_DWORD *)v13 = 1701080681;
    v17 = *((_QWORD *)v12 + 4) + 5;
LABEL_41:
    *((_QWORD *)v12 + 4) = v17;
    return;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v16 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v16) <= 5)
    {
      v14 = "f8E5M2";
      v15 = 6;
      goto LABEL_35;
    }
    *(_WORD *)(v16 + 4) = 12877;
    *(_DWORD *)v16 = 893728870;
    v17 = *((_QWORD *)v12 + 4) + 6;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v18 <= 7uLL)
    {
      v14 = "f8E4M3FN";
      v15 = 8;
      goto LABEL_35;
    }
    *v18 = 0x4E46334D34453866;
    v17 = *((_QWORD *)v12 + 4) + 8;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v19) <= 9)
    {
      v14 = "f8E5M2FNUZ";
LABEL_34:
      v15 = 10;
      goto LABEL_35;
    }
    v20 = "f8E5M2FNUZ";
LABEL_40:
    *(_WORD *)(v19 + 8) = 23125;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v17 = *((_QWORD *)v12 + 4) + 10;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v19) <= 9)
    {
      v14 = "f8E4M3FNUZ";
      goto LABEL_34;
    }
    v20 = "f8E4M3FNUZ";
    goto LABEL_40;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v21 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v21 <= 0xCuLL)
    {
      v14 = "f8E4M3B11FNUZ";
      v15 = 13;
      goto LABEL_35;
    }
    qmemcpy(v21, "f8E4M3B11FNUZ", 13);
    v17 = *((_QWORD *)v12 + 4) + 13;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v22 = *(int **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v22 > 3uLL)
    {
      v24 = 909207138;
      goto LABEL_55;
    }
    v14 = "bf16";
    v15 = 4;
    goto LABEL_35;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 54;
      v25 = 12646;
      goto LABEL_65;
    }
    v14 = "f16";
    v15 = 3;
LABEL_35:
    llvm::raw_ostream::write(v12, v14, v15);
    return;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v22 = *(int **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v22 > 3uLL)
    {
      v24 = 842229364;
      goto LABEL_55;
    }
    v14 = "tf32";
    v15 = 4;
    goto LABEL_35;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 50;
      v25 = 13158;
      goto LABEL_65;
    }
    v14 = "f32";
    v15 = 3;
    goto LABEL_35;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 52;
      v25 = 13926;
      goto LABEL_65;
    }
    v14 = "f64";
    v15 = 3;
    goto LABEL_35;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v23) <= 2)
    {
      v14 = "f80";
      v15 = 3;
      goto LABEL_35;
    }
    *(_BYTE *)(v23 + 2) = 48;
    v25 = 14438;
LABEL_65:
    *(_WORD *)v23 = v25;
    v17 = *((_QWORD *)v12 + 4) + 3;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v22 = *(int **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v22 <= 3uLL)
    {
      v14 = "f128";
      v15 = 4;
      goto LABEL_35;
    }
    v24 = 942813542;
LABEL_55:
    *v22 = v24;
    v17 = *((_QWORD *)v12 + 4) + 4;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v162[0] = a2;
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)v162) == 1)
    {
      v26 = *(llvm::raw_ostream **)a1;
      v27 = *(char **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v27 < *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        *((_QWORD *)v26 + 4) = v27 + 1;
        v28 = 115;
LABEL_77:
        *v27 = v28;
        goto LABEL_112;
      }
      v42 = 115;
    }
    else
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)v162) != 2)
      {
LABEL_112:
        v56 = *(llvm::raw_ostream **)a1;
        v57 = (_BYTE *)*((_QWORD *)v56 + 4);
        if ((unint64_t)v57 >= *((_QWORD *)v56 + 3))
        {
          v56 = llvm::raw_ostream::write(v56, 105);
        }
        else
        {
          *((_QWORD *)v56 + 4) = v57 + 1;
          *v57 = 105;
        }
        Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v162);
        llvm::raw_ostream::operator<<(v56, Width);
        return;
      }
      v26 = *(llvm::raw_ostream **)a1;
      v27 = *(char **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v27 < *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        *((_QWORD *)v26 + 4) = v27 + 1;
        v28 = 117;
        goto LABEL_77;
      }
      v42 = 117;
    }
    llvm::raw_ostream::write(v26, v42);
    goto LABEL_112;
  }
  if (!a2 || v3 != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
    {
      v162[0] = a2;
      RawStringData = (_BYTE *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v162);
      v31 = v30;
      v32 = *(llvm::raw_ostream **)a1;
      v33 = *(_DWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v33 > 6uLL)
      {
        *(_DWORD *)((char *)v33 + 3) = 1014132596;
        *v33 = 1952671094;
        *((_QWORD *)v32 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v32, "vector<", 7uLL);
      }
      v43 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v162);
      v45 = v44;
      if (v44)
      {
        v46 = (unint64_t *)v43;
        if (v31)
        {
          do
          {
            while (1)
            {
              if (*RawStringData)
              {
                v47 = *(llvm::raw_ostream **)a1;
                v48 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if ((unint64_t)v48 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                {
                  llvm::raw_ostream::write(v47, 91);
                }
                else
                {
                  *((_QWORD *)v47 + 4) = v48 + 1;
                  *v48 = 91;
                }
              }
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, *v46);
              if (*RawStringData)
              {
                v49 = *(llvm::raw_ostream **)a1;
                v50 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if ((unint64_t)v50 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                {
                  llvm::raw_ostream::write(v49, 93);
                }
                else
                {
                  *((_QWORD *)v49 + 4) = v50 + 1;
                  *v50 = 93;
                }
              }
              v51 = *(llvm::raw_ostream **)a1;
              v52 = *(_BYTE **)(*(_QWORD *)a1 + 32);
              if ((unint64_t)v52 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                break;
              *((_QWORD *)v51 + 4) = v52 + 1;
              *v52 = 120;
              ++RawStringData;
              ++v46;
              if (!--v45)
                goto LABEL_138;
            }
            llvm::raw_ostream::write(v51, 120);
            ++RawStringData;
            ++v46;
            --v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            while (1)
            {
              v71 = *v46++;
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, v71);
              v72 = *(llvm::raw_ostream **)a1;
              v73 = *(_BYTE **)(*(_QWORD *)a1 + 32);
              if ((unint64_t)v73 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                break;
              *((_QWORD *)v72 + 4) = v73 + 1;
              *v73 = 120;
              if (!--v45)
                goto LABEL_138;
            }
            llvm::raw_ostream::write(v72, 120);
            --v45;
          }
          while (v45);
        }
      }
LABEL_138:
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v162);
      if (RHS)
        goto LABEL_139;
      goto LABEL_190;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v162[0] = a2;
      v40 = *(llvm::raw_ostream **)a1;
      v41 = *(_DWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v41 > 6uLL)
      {
        *(_DWORD *)((char *)v41 + 3) = 1014132595;
        *v41 = 1936614772;
        *((_QWORD *)v40 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v40, "tensor<", 7uLL);
      }
      v59 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v162);
      if (v60)
      {
        v61 = (unint64_t *)v59;
        v62 = 8 * v60;
        do
        {
          while (1)
          {
            v63 = *(llvm::raw_ostream **)a1;
            if (*v61 == 0x8000000000000000)
            {
              v64 = (_BYTE *)*((_QWORD *)v63 + 4);
              if ((unint64_t)v64 >= *((_QWORD *)v63 + 3))
              {
                llvm::raw_ostream::write(v63, 63);
              }
              else
              {
                *((_QWORD *)v63 + 4) = v64 + 1;
                *v64 = 63;
              }
            }
            else
            {
              llvm::raw_ostream::operator<<(v63, *v61);
            }
            v65 = *(llvm::raw_ostream **)a1;
            v66 = *(_BYTE **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v66 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
              break;
            *((_QWORD *)v65 + 4) = v66 + 1;
            *v66 = 120;
            ++v61;
            v62 -= 8;
            if (!v62)
              goto LABEL_127;
          }
          llvm::raw_ostream::write(v65, 120);
          ++v61;
          v62 -= 8;
        }
        while (v62);
      }
LABEL_127:
      v67 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v162);
      if (v67)
      {
        v68 = v67;
        if (!mlir::AsmPrinter::Impl::printAlias(a1, v67))
          mlir::AsmPrinter::Impl::printTypeImpl(a1, v68);
      }
      else
      {
        v94 = *(llvm::raw_ostream **)a1;
        v95 = *(void **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v95 > 0xCuLL)
        {
          qmemcpy(v95, "<<NULL TYPE>>", 13);
          *((_QWORD *)v94 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v94, "<<NULL TYPE>>", 0xDuLL);
        }
      }
      if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v162))
        goto LABEL_269;
      v109 = *(llvm::raw_ostream **)a1;
      v110 = *(_WORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v110 > 1uLL)
      {
        *v110 = 8236;
        *((_QWORD *)v109 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v109, ", ", 2uLL);
      }
      Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v162);
      if (Values)
      {
        v112 = Values;
        goto LABEL_269;
      }
      goto LABEL_265;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v162[0] = a2;
      v53 = *(llvm::raw_ostream **)a1;
      v54 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v54) > 8)
      {
        *(_BYTE *)(v54 + 8) = 120;
        *(_QWORD *)v54 = *(_QWORD *)"tensor<*x";
        *((_QWORD *)v53 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v53, "tensor<*x", 9uLL);
      }
      RHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
      if (!RHS)
      {
LABEL_190:
        v104 = *(llvm::raw_ostream **)a1;
        v105 = *(void **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v105 <= 0xCuLL)
        {
          llvm::raw_ostream::write(v104, "<<NULL TYPE>>", 0xDuLL);
          goto LABEL_269;
        }
        qmemcpy(v105, "<<NULL TYPE>>", 13);
        v106 = *((_QWORD *)v104 + 4) + 13;
        goto LABEL_268;
      }
LABEL_139:
      v75 = RHS;
      if (!mlir::AsmPrinter::Impl::printAlias(a1, RHS))
        mlir::AsmPrinter::Impl::printTypeImpl(a1, v75);
      goto LABEL_269;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      Value = (uint64_t)a2;
      v69 = *(llvm::raw_ostream **)a1;
      v70 = *(_DWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v70 > 6uLL)
      {
        *(_DWORD *)((char *)v70 + 3) = 1013343602;
        *v70 = 1919772013;
        *((_QWORD *)v69 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v69, "memref<", 7uLL);
      }
      v113 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
      if (v114)
      {
        v115 = (unint64_t *)v113;
        v116 = 8 * v114;
        do
        {
          while (1)
          {
            v117 = *(llvm::raw_ostream **)a1;
            if (*v115 == 0x8000000000000000)
            {
              v118 = (_BYTE *)*((_QWORD *)v117 + 4);
              if ((unint64_t)v118 >= *((_QWORD *)v117 + 3))
              {
                llvm::raw_ostream::write(v117, 63);
              }
              else
              {
                *((_QWORD *)v117 + 4) = v118 + 1;
                *v118 = 63;
              }
            }
            else
            {
              llvm::raw_ostream::operator<<(v117, *v115);
            }
            v119 = *(llvm::raw_ostream **)a1;
            v120 = *(_BYTE **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v120 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
              break;
            *((_QWORD *)v119 + 4) = v120 + 1;
            *v120 = 120;
            ++v115;
            v116 -= 8;
            if (!v116)
              goto LABEL_216;
          }
          llvm::raw_ostream::write(v119, 120);
          ++v115;
          v116 -= 8;
        }
        while (v116);
      }
LABEL_216:
      v121 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&Value);
      if (v121)
      {
        v122 = v121;
        if (!mlir::AsmPrinter::Impl::printAlias(a1, v121))
          mlir::AsmPrinter::Impl::printTypeImpl(a1, v122);
      }
      else
      {
        v125 = *(llvm::raw_ostream **)a1;
        v126 = *(void **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v126 > 0xCuLL)
        {
          qmemcpy(v126, "<<NULL TYPE>>", 13);
          *((_QWORD *)v125 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v125, "<<NULL TYPE>>", 0xDuLL);
        }
      }
      v162[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&Value);
      v162[1] = v131;
      if (*(_UNKNOWN **)(*(_QWORD *)v162[0] + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
        || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v162) & 1) == 0)
      {
        v132 = *(llvm::raw_ostream **)a1;
        v133 = *(_WORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v133 > 1uLL)
        {
          *v133 = 8236;
          *((_QWORD *)v132 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v132, ", ", 2uLL);
        }
        v134 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&Value);
        if (v134)
        {
          v135 = v134;
        }
        else
        {
          v136 = *(llvm::raw_ostream **)a1;
          v137 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v137) > 0x11)
          {
            *(_WORD *)(v137 + 16) = 15934;
            *(_OWORD *)v137 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
            *((_QWORD *)v136 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(v136, "<<NULL ATTRIBUTE>>", 0x12uLL);
          }
        }
      }
      if (!ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&Value))
        goto LABEL_269;
      v140 = *(llvm::raw_ostream **)a1;
      v141 = *(_WORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v141 > 1uLL)
      {
        *v141 = 8236;
        *((_QWORD *)v140 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v140, ", ", 2uLL);
      }
      LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&Value);
      if (LayerSchedule)
      {
LABEL_252:
        v143 = LayerSchedule;
        goto LABEL_269;
      }
LABEL_265:
      v104 = *(llvm::raw_ostream **)a1;
      v146 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v146) <= 0x11)
      {
        llvm::raw_ostream::write(v104, "<<NULL ATTRIBUTE>>", 0x12uLL);
        goto LABEL_269;
      }
      *(_WORD *)(v146 + 16) = 15934;
      *(_OWORD *)v146 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      v106 = *((_QWORD *)v104 + 4) + 18;
LABEL_268:
      *((_QWORD *)v104 + 4) = v106;
LABEL_269:
      v147 = *(llvm::raw_ostream **)a1;
      v148 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v148 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        llvm::raw_ostream::write(v147, 62);
      }
      else
      {
        *((_QWORD *)v147 + 4) = v148 + 1;
        *v148 = 62;
      }
      return;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
    {
      v162[0] = a2;
      v107 = *(llvm::raw_ostream **)a1;
      v108 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v108) > 8)
      {
        *(_BYTE *)(v108 + 8) = 120;
        *(_QWORD *)v108 = *(_QWORD *)"memref<*x";
        *((_QWORD *)v107 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v107, "memref<*x", 9uLL);
      }
      v127 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
      if (v127)
      {
        v128 = v127;
        if (!mlir::AsmPrinter::Impl::printAlias(a1, v127))
          mlir::AsmPrinter::Impl::printTypeImpl(a1, v128);
      }
      else
      {
        v138 = *(llvm::raw_ostream **)a1;
        v139 = *(void **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v139 > 0xCuLL)
        {
          qmemcpy(v139, "<<NULL TYPE>>", 13);
          *((_QWORD *)v138 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v138, "<<NULL TYPE>>", 0xDuLL);
        }
      }
      if (!mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v162))
        goto LABEL_269;
      v144 = *(llvm::raw_ostream **)a1;
      v145 = *(_WORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v145 > 1uLL)
      {
        *v145 = 8236;
        *((_QWORD *)v144 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v144, ", ", 2uLL);
      }
      LayerSchedule = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v162);
      if (LayerSchedule)
        goto LABEL_252;
      goto LABEL_265;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v162[0] = a2;
      v123 = *(llvm::raw_ostream **)a1;
      v124 = *(_QWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v124 > 7uLL)
      {
        *v124 = 0x3C78656C706D6F63;
        *((_QWORD *)v123 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v123, "complex<", 8uLL);
      }
      RHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
      if (!RHS)
        goto LABEL_190;
      goto LABEL_139;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id)
    {
      v162[0] = a2;
      v129 = *(llvm::raw_ostream **)a1;
      v130 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v130) > 5)
      {
        *(_WORD *)(v130 + 4) = 15461;
        *(_DWORD *)v130 = 1819309428;
        *((_QWORD *)v129 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v129, "tuple<", 6uLL);
      }
      Types = (uint64_t *)mlir::TupleType::getTypes((mlir::TupleType *)v162);
      if (v150)
      {
        v151 = Types;
        v152 = v150;
        v153 = *(llvm::raw_ostream **)a1;
        v154 = *Types;
        if (*Types)
        {
          if (!mlir::AsmPrinter::Impl::printAlias(a1, v154))
            mlir::AsmPrinter::Impl::printTypeImpl(a1, v154);
        }
        else
        {
          v155 = (void *)*((_QWORD *)v153 + 4);
          if (*((_QWORD *)v153 + 3) - (_QWORD)v155 > 0xCuLL)
          {
            qmemcpy(v155, "<<NULL TYPE>>", 13);
            *((_QWORD *)v153 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
          }
        }
        if (v152 != 1)
        {
          v156 = v151 + 1;
          v157 = 8 * v152 - 8;
          do
          {
            v158 = (_WORD *)*((_QWORD *)v153 + 4);
            if (*((_QWORD *)v153 + 3) - (_QWORD)v158 > 1uLL)
            {
              *v158 = 8236;
              *((_QWORD *)v153 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v153, ", ", 2uLL);
            }
            v159 = *v156;
            if (*v156)
            {
              if (!mlir::AsmPrinter::Impl::printAlias(a1, *v156))
                mlir::AsmPrinter::Impl::printTypeImpl(a1, v159);
            }
            else
            {
              v160 = *(llvm::raw_ostream **)a1;
              v161 = *(void **)(*(_QWORD *)a1 + 32);
              if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v161 > 0xCuLL)
              {
                qmemcpy(v161, "<<NULL TYPE>>", 13);
                *((_QWORD *)v160 + 4) += 13;
              }
              else
              {
                llvm::raw_ostream::write(v160, "<<NULL TYPE>>", 0xDuLL);
              }
            }
            ++v156;
            v157 -= 8;
          }
          while (v157);
        }
      }
      goto LABEL_269;
    }
    if (v3 != &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
    {
      mlir::AsmPrinter::Impl::printDialectType(a1, a2);
      return;
    }
    v12 = *(llvm::raw_ostream **)a1;
    v22 = *(int **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v22 <= 3uLL)
    {
      v14 = "none";
      v15 = 4;
      goto LABEL_35;
    }
    v24 = 1701736302;
    goto LABEL_55;
  }
  v162[0] = a2;
  v4 = *(llvm::raw_ostream **)a1;
  v5 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if ((unint64_t)v5 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
  {
    llvm::raw_ostream::write(v4, 40);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 40;
  }
  Inputs = (uint64_t *)mlir::FunctionType::getInputs((mlir::FunctionType *)v162);
  if (v35)
  {
    v36 = Inputs;
    v37 = v35;
    v38 = *(llvm::raw_ostream **)a1;
    if (*Inputs)
    {
      v39 = *Inputs;
      if (!mlir::AsmPrinter::Impl::printAlias(a1, *Inputs))
        mlir::AsmPrinter::Impl::printTypeImpl(a1, v39);
    }
    else
    {
      v55 = (void *)*((_QWORD *)v38 + 4);
      if (*((_QWORD *)v38 + 3) - (_QWORD)v55 > 0xCuLL)
      {
        qmemcpy(v55, "<<NULL TYPE>>", 13);
        *((_QWORD *)v38 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
      }
    }
    if (v37 != 1)
    {
      v87 = v36 + 1;
      v88 = 8 * v37 - 8;
      do
      {
        v89 = (_WORD *)*((_QWORD *)v38 + 4);
        if (*((_QWORD *)v38 + 3) - (_QWORD)v89 > 1uLL)
        {
          *v89 = 8236;
          *((_QWORD *)v38 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v38, ", ", 2uLL);
        }
        v90 = *v87;
        if (*v87)
        {
          if (!mlir::AsmPrinter::Impl::printAlias(a1, *v87))
            mlir::AsmPrinter::Impl::printTypeImpl(a1, v90);
        }
        else
        {
          v91 = *(llvm::raw_ostream **)a1;
          v92 = *(void **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v92 > 0xCuLL)
          {
            qmemcpy(v92, "<<NULL TYPE>>", 13);
            *((_QWORD *)v91 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(v91, "<<NULL TYPE>>", 0xDuLL);
          }
        }
        ++v87;
        v88 -= 8;
      }
      while (v88);
    }
  }
  v76 = *(llvm::raw_ostream **)a1;
  v77 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v77) > 4)
  {
    *(_BYTE *)(v77 + 4) = 32;
    *(_DWORD *)v77 = 1043144745;
    *((_QWORD *)v76 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v76, ") -> ", 5uLL);
  }
  Results = (uint64_t *)mlir::FunctionType::getResults((mlir::FunctionType *)v162);
  v79 = Results;
  v81 = v80;
  if (v80 != 1
    || (v82 = *Results,
        *(_UNKNOWN **)(*(_QWORD *)*Results + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id))
  {
    v83 = *(llvm::raw_ostream **)a1;
    v84 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v84 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v83, 40);
    }
    else
    {
      *((_QWORD *)v83 + 4) = v84 + 1;
      *v84 = 40;
    }
    if (v81)
    {
      v85 = *(llvm::raw_ostream **)a1;
      v86 = *v79;
      if (*v79)
      {
        if (!mlir::AsmPrinter::Impl::printAlias(a1, *v79))
          mlir::AsmPrinter::Impl::printTypeImpl(a1, v86);
      }
      else
      {
        v93 = (void *)*((_QWORD *)v85 + 4);
        if (*((_QWORD *)v85 + 3) - (_QWORD)v93 > 0xCuLL)
        {
          qmemcpy(v93, "<<NULL TYPE>>", 13);
          *((_QWORD *)v85 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
        }
      }
      if (v81 != 1)
      {
        v98 = v79 + 1;
        v99 = 8 * v81 - 8;
        do
        {
          v100 = (_WORD *)*((_QWORD *)v85 + 4);
          if (*((_QWORD *)v85 + 3) - (_QWORD)v100 > 1uLL)
          {
            *v100 = 8236;
            *((_QWORD *)v85 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v85, ", ", 2uLL);
          }
          v101 = *v98;
          if (*v98)
          {
            if (!mlir::AsmPrinter::Impl::printAlias(a1, *v98))
              mlir::AsmPrinter::Impl::printTypeImpl(a1, v101);
          }
          else
          {
            v102 = *(llvm::raw_ostream **)a1;
            v103 = *(void **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v103 > 0xCuLL)
            {
              qmemcpy(v103, "<<NULL TYPE>>", 13);
              *((_QWORD *)v102 + 4) += 13;
            }
            else
            {
              llvm::raw_ostream::write(v102, "<<NULL TYPE>>", 0xDuLL);
            }
          }
          ++v98;
          v99 -= 8;
        }
        while (v99);
      }
    }
    v96 = *(llvm::raw_ostream **)a1;
    v97 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v97 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v96, 41);
    }
    else
    {
      *((_QWORD *)v96 + 4) = v97 + 1;
      *v97 = 41;
    }
  }
  else if (!mlir::AsmPrinter::Impl::printAlias(a1, *Results))
  {
    mlir::AsmPrinter::Impl::printTypeImpl(a1, v82);
  }
}

uint64_t mlir::AsmPrinter::Impl::printOptionalAttrDict(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  llvm::raw_ostream **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _WORD *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  llvm::raw_ostream *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  llvm::raw_ostream *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  uint64_t NumNeededNEs;
  uint64_t AttrData;
  uint64_t v42;
  __int128 v43;
  char *v44;
  int v45;
  llvm *v46;
  unsigned int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return result;
  v9 = (llvm::raw_ostream **)result;
  if (!a5)
  {
    if (a6)
    {
      v18 = *(llvm::raw_ostream **)result;
      v19 = *((_QWORD *)*v9 + 4);
      if ((unint64_t)(*((_QWORD *)*v9 + 3) - v19) > 0xA)
      {
        *(_DWORD *)(v19 + 7) = 1936028789;
        *(_QWORD *)v19 = *(_QWORD *)" attributes";
        *((_QWORD *)v18 + 4) += 11;
        v20 = *v9;
        v21 = (_WORD *)*((_QWORD *)*v9 + 4);
        if (*((_QWORD *)*v9 + 3) - (_QWORD)v21 <= 1uLL)
        {
LABEL_22:
          llvm::raw_ostream::write(v20, " {", 2uLL);
          v22 = *v9;
          mlir::AsmPrinter::Impl::printNamedAttribute(v9, *a2, a2[1]);
          if (a3 == 1)
          {
LABEL_30:
            result = (uint64_t)*v9;
            v30 = (_BYTE *)*((_QWORD *)*v9 + 4);
            if ((unint64_t)v30 >= *((_QWORD *)*v9 + 3))
              return (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 125);
            *(_QWORD *)(result + 32) = v30 + 1;
            *v30 = 125;
            return result;
          }
LABEL_26:
          v23 = &a2[2 * a3];
          v24 = a2 + 2;
          do
          {
            while (1)
            {
              v27 = (_WORD *)*((_QWORD *)v22 + 4);
              if (*((_QWORD *)v22 + 3) - (_QWORD)v27 <= 1uLL)
                break;
              *v27 = 8236;
              *((_QWORD *)v22 + 4) += 2;
              v25 = *v24;
              v26 = v24[1];
              v24 += 2;
              mlir::AsmPrinter::Impl::printNamedAttribute(v9, v25, v26);
              if (v24 == v23)
                goto LABEL_30;
            }
            llvm::raw_ostream::write(v22, ", ", 2uLL);
            v28 = *v24;
            v29 = v24[1];
            v24 += 2;
            mlir::AsmPrinter::Impl::printNamedAttribute(v9, v28, v29);
          }
          while (v24 != v23);
          goto LABEL_30;
        }
LABEL_25:
        *v21 = 31520;
        *((_QWORD *)v20 + 4) += 2;
        v22 = *v9;
        mlir::AsmPrinter::Impl::printNamedAttribute(v9, *a2, a2[1]);
        if (a3 == 1)
          goto LABEL_30;
        goto LABEL_26;
      }
      llvm::raw_ostream::write(v18, " attributes", 0xBuLL);
    }
    v20 = *v9;
    v21 = (_WORD *)*((_QWORD *)*v9 + 4);
    if (*((_QWORD *)*v9 + 3) - (_QWORD)v21 <= 1uLL)
      goto LABEL_22;
    goto LABEL_25;
  }
  *(_QWORD *)&v43 = a4;
  AttrData = a4 + 16 * a5;
  llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>((uint64_t)&v45, &v43, &AttrData);
  v10 = 0;
  v11 = 16 * a3;
  v12 = &a2[2 * a3];
  while (1)
  {
    v43 = *(_OWORD *)&a2[v10 / 8];
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v43);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
    v42 = v13;
    v44 = 0;
    result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44);
    if ((result & 1) == 0)
      break;
    if ((v45 & 1) != 0)
    {
      if (v44 == (char *)&v48)
        break;
    }
    else if (v44 == (char *)v46 + 16 * v47)
    {
      break;
    }
    v10 += 16;
    if (v11 == v10)
      goto LABEL_62;
  }
  if (v11 == v10)
  {
LABEL_62:
    if ((v45 & 1) == 0)
      goto LABEL_63;
    return result;
  }
  if (a6)
  {
    v14 = *v9;
    v15 = *((_QWORD *)*v9 + 4);
    if ((unint64_t)(*((_QWORD *)*v9 + 3) - v15) > 0xA)
    {
      *(_DWORD *)(v15 + 7) = 1936028789;
      *(_QWORD *)v15 = *(_QWORD *)" attributes";
      *((_QWORD *)v14 + 4) += 11;
      v16 = *v9;
      v17 = (_WORD *)*((_QWORD *)*v9 + 4);
      if (*((_QWORD *)*v9 + 3) - (_QWORD)v17 <= 1uLL)
        goto LABEL_17;
      goto LABEL_34;
    }
    llvm::raw_ostream::write(v14, " attributes", 0xBuLL);
  }
  v16 = *v9;
  v17 = (_WORD *)*((_QWORD *)*v9 + 4);
  if (*((_QWORD *)*v9 + 3) - (_QWORD)v17 <= 1uLL)
  {
LABEL_17:
    llvm::raw_ostream::write(v16, " {", 2uLL);
    goto LABEL_35;
  }
LABEL_34:
  *v17 = 31520;
  *((_QWORD *)v16 + 4) += 2;
LABEL_35:
  v31 = *v9;
  v32 = &a2[v10 / 8 + 2];
  mlir::AsmPrinter::Impl::printNamedAttribute(v9, a2[v10 / 8], a2[v10 / 8 + 1]);
  if (v11 - 16 != v10)
  {
    v33 = v11 - v10 - 16;
    while (1)
    {
      v43 = *(_OWORD *)v32;
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v43);
      AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
      v42 = v34;
      v44 = 0;
      if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44) & 1) == 0)break;
      if ((v45 & 1) != 0)
      {
        if (v44 == (char *)&v48)
          break;
      }
      else if (v44 == (char *)v46 + 16 * v47)
      {
        break;
      }
      v32 += 2;
      v33 -= 16;
      if (!v33)
        goto LABEL_60;
    }
    if (v33)
    {
LABEL_48:
      v35 = (_WORD *)*((_QWORD *)v31 + 4);
      if (*((_QWORD *)v31 + 3) - (_QWORD)v35 > 1uLL)
      {
        *v35 = 8236;
        *((_QWORD *)v31 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v31, ", ", 2uLL);
      }
      mlir::AsmPrinter::Impl::printNamedAttribute(v9, *v32, v32[1]);
      while (1)
      {
        v32 += 2;
        if (v32 == v12)
          break;
        v43 = *(_OWORD *)v32;
        NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v43);
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
        v42 = v37;
        v44 = 0;
        if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44) & 1) != 0)
        {
          v38 = v44;
          if ((v45 & 1) != 0)
            v36 = (char *)&v48;
          else
            v36 = (char *)v46 + 16 * v47;
        }
        else
        {
          if ((v45 & 1) != 0)
          {
LABEL_47:
            if (v32 == v12)
              break;
            goto LABEL_48;
          }
          v36 = (char *)v46 + 16 * v47;
          v38 = v36;
        }
        if (v38 == v36)
          goto LABEL_47;
      }
    }
  }
LABEL_60:
  result = (uint64_t)*v9;
  v39 = (_BYTE *)*((_QWORD *)*v9 + 4);
  if ((unint64_t)v39 < *((_QWORD *)*v9 + 3))
  {
    *(_QWORD *)(result + 32) = v39 + 1;
    *v39 = 125;
    goto LABEL_62;
  }
  result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 125);
  if ((v45 & 1) == 0)
LABEL_63:
    llvm::deallocate_buffer(v46, (void *)(16 * v47));
  return result;
}

double mlir::AsmPrinter::Impl::printNamedAttribute(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3)
{
  char *AttrData;
  size_t v5;
  double result;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t NumNeededNEs;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v13);
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
  printKeywordOrString(AttrData, v5, *a1);
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    v7 = *a1;
    v8 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v8) > 2)
    {
      *(_BYTE *)(v8 + 2) = 32;
      *(_WORD *)v8 = 15648;
      *((_QWORD *)v7 + 4) += 3;
      v9 = v14;
      if (v14)
      {
LABEL_4:
          mlir::AsmPrinter::Impl::printAttributeImpl(a1, v9, 0);
        return result;
      }
    }
    else
    {
      llvm::raw_ostream::write(v7, " = ", 3uLL);
      v9 = v14;
      if (v14)
        goto LABEL_4;
    }
    v10 = *a1;
    v11 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v11) > 0x11)
    {
      *(_WORD *)(v11 + 16) = 15934;
      result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)v11 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)v10 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v10, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

llvm::raw_ostream *printKeywordOrString(char *a1, size_t a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  llvm::raw_ostream *result;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v14;
  _BYTE *v15;

  if (!a2)
    goto LABEL_21;
  v6 = *a1;
  v7 = MEMORY[0x24BDAC740];
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x100uLL))
      goto LABEL_6;
LABEL_7:
    if (a2 == 1)
    {
      v9 = a3 + 4;
      v8 = (void *)a3[4];
      if ((void *)a3[3] == v8)
        return llvm::raw_ostream::write((llvm::raw_ostream *)a3, a1, a2);
      goto LABEL_9;
    }
    v11 = 1;
    while (1)
    {
      v12 = a1[v11];
      if (a1[v11] < 0)
      {
        if (!__maskrune(a1[v11], 0x500uLL))
        {
LABEL_16:
          if ((v12 - 36) > 0x3B || ((1 << (v12 - 36)) & 0x800000000000401) == 0)
            goto LABEL_21;
        }
      }
      else if ((*(_DWORD *)(v7 + 4 * v12 + 60) & 0x500) == 0)
      {
        goto LABEL_16;
      }
      if (a2 == ++v11)
      {
        v9 = a3 + 4;
        v8 = (void *)a3[4];
        if (a2 > a3[3] - (_QWORD)v8)
          return llvm::raw_ostream::write((llvm::raw_ostream *)a3, a1, a2);
LABEL_9:
        result = (llvm::raw_ostream *)memcpy(v8, a1, a2);
        *v9 += a2;
        return result;
      }
    }
  }
  if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v6 + 60) & 0x100) != 0)
    goto LABEL_7;
LABEL_6:
  if (*a1 == 95)
    goto LABEL_7;
LABEL_21:
  v14 = (_BYTE *)a3[4];
  if ((_BYTE *)a3[3] == v14)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a3, "\"", 1uLL);
  }
  else
  {
    *v14 = 34;
    ++a3[4];
  }
  result = llvm::printEscapedString((llvm::raw_ostream *)a1, a2, (llvm::raw_ostream *)a3);
  v15 = (_BYTE *)a3[4];
  if ((unint64_t)v15 >= a3[3])
    return llvm::raw_ostream::write((llvm::raw_ostream *)a3, 34);
  a3[4] = v15 + 1;
  *v15 = 34;
  return result;
}

void mlir::AsmPrinter::Impl::printDialectType(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  size_t v8;
  _QWORD v9[2];
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  char *v24;
  size_t v25;
  uint64_t v26;

  v4 = **a2;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v15 = &unk_24C02DC40;
  v23 = (void **)&v24;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v15, 0, 0, 0);
  v5 = *(_QWORD *)(a1 + 8);
  v10[0] = &v15;
  v10[1] = v5;
  v13 = *(_QWORD *)(v5 + 648);
  v6 = *(_OWORD *)(v5 + 632);
  v11 = *(_OWORD *)(v5 + 616);
  v12 = v6;
  v14 = 1;
  v9[0] = &off_24C0342F8;
  v9[1] = v10;
  (*(void (**)(uint64_t, uint64_t **, _QWORD *))(*(_QWORD *)v4 + 56))(v4, a2, v9);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
  if (v26 >= 0)
    v7 = (char *)&v24;
  else
    v7 = v24;
  if (v26 >= 0)
    v8 = HIBYTE(v26);
  else
    v8 = v25;
  printDialectSymbol(*(llvm::raw_ostream **)a1, "!", 1uLL, *(const char **)(v4 + 8), *(_QWORD *)(v4 + 16), v7, v8);
  if (SHIBYTE(v26) < 0)
    operator delete(v24);
}

void mlir::AsmPrinter::Impl::printHexString(llvm::raw_ostream **a1, unsigned __int8 *a2, size_t a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  void **v7;
  size_t v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  v5 = *a1;
  v6 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v6) > 2)
  {
    *(_BYTE *)(v6 + 2) = 120;
    *(_WORD *)v6 = 12322;
    *((_QWORD *)v5 + 4) += 3;
  }
  else
  {
    v5 = llvm::raw_ostream::write(*a1, "\"0x", 3uLL);
  }
  llvm::toHex(a3, a2, 0, __p);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (size_t)__p[1];
  v9 = llvm::raw_ostream::write(v5, (const char *)v7, v8);
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) != v10)
  {
    *v10 = 34;
    ++*((_QWORD *)v9 + 4);
    if (((char)v12 & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(__p[0]);
    return;
  }
  llvm::raw_ostream::write(v9, "\"", 1uLL);
  if ((char)v12 < 0)
    goto LABEL_14;
}

uint64_t mlir::AsmPrinter::getStream(mlir::AsmPrinter *this)
{
  return **((_QWORD **)this + 1);
}

void mlir::AsmPrinter::printFloat(llvm::raw_ostream ***this, const llvm::APFloat *a2)
{
  printFloatValue(a2, *this[1]);
}

void mlir::AsmPrinter::printType(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  llvm::raw_ostream *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    if (!mlir::AsmPrinter::Impl::printAlias(*(_QWORD *)(a1 + 8), (uint64_t)a2))
      mlir::AsmPrinter::Impl::printTypeImpl(v2, a2);
  }
  else
  {
    v4 = *(llvm::raw_ostream **)v2;
    v5 = *(void **)(*(_QWORD *)v2 + 32);
    if (*(_QWORD *)(*(_QWORD *)v2 + 24) - (_QWORD)v5 > 0xCuLL)
    {
      qmemcpy(v5, "<<NULL TYPE>>", 13);
      *((_QWORD *)v4 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v4, "<<NULL TYPE>>", 0xDuLL);
    }
  }
}

double mlir::AsmPrinter::printAttribute(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  double result;
  llvm::raw_ostream *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
  }
  else
  {
    v5 = *(llvm::raw_ostream **)v2;
    v6 = *(_QWORD *)(*(_QWORD *)v2 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v2 + 24) - v6) > 0x11)
    {
      *(_WORD *)(v6 + 16) = 15934;
      result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)v6 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)v5 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v5, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

uint64_t mlir::AsmPrinter::printAlias(uint64_t a1, uint64_t a2)
{
}

{
  return mlir::AsmPrinter::Impl::printAlias(*(_QWORD *)(a1 + 8), a2);
}

double mlir::AsmPrinter::printAttributeWithoutType(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  double result;
  llvm::raw_ostream *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
  }
  else
  {
    v5 = *(llvm::raw_ostream **)v2;
    v6 = *(_QWORD *)(*(_QWORD *)v2 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v2 + 24) - v6) > 0x11)
    {
      *(_WORD *)(v6 + 16) = 15934;
      result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)v6 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)v5 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v5, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::printKeywordOrString(uint64_t a1, char *a2, size_t a3)
{
  return printKeywordOrString(a2, a3, **(_QWORD ***)(a1 + 8));
}

llvm::raw_ostream *mlir::AsmPrinter::printString(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *result;
  _BYTE *v10;

  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 34);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 34;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  llvm::printEscapedString(a2, a3, v8);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v10 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v10 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 34);
  *((_QWORD *)result + 4) = v10 + 1;
  *v10 = 34;
  return result;
}

double mlir::AsmPrinter::printSymbolName(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *v3;
  _BYTE *v6;
  void *v7;
  double result;

  v3 = **(_QWORD ***)(a1 + 8);
  if (a3)
  {
    v6 = (_BYTE *)v3[4];
    if ((unint64_t)v6 >= v3[3])
    {
      llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), 64);
    }
    else
    {
      v3[4] = v6 + 1;
      *v6 = 64;
    }
    printKeywordOrString(a2, a3, v3);
  }
  else
  {
    v7 = (void *)v3[4];
    if (v3[3] - (_QWORD)v7 > 0x18uLL)
    {
      qmemcpy(v7, "@<<INVALID EMPTY SYMBOL>>", 25);
      result = *(double *)"D EMPTY SYMBOL>>";
      v3[4] += 25;
    }
    else
    {
      llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), "@<<INVALID EMPTY SYMBOL>>", 0x19uLL);
    }
  }
  return result;
}

uint64_t mlir::AsmPrinter::printResourceHandle(uint64_t a1, uint64_t *a2)
{
  return mlir::AsmPrinter::Impl::printResourceHandle(*(_QWORD *)(a1 + 8), a2);
}

uint64_t mlir::AsmPrinter::pushCyclicPrinting(mlir::AsmPrinter *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v7 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 664), &v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = *(unsigned int *)(v2 + 696);
    if (v5 >= *(_DWORD *)(v2 + 700))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 688, (void *)(v2 + 704), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 696);
    }
    *(_QWORD *)(*(_QWORD *)(v2 + 688) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 696);
  }
  return v3;
}

uint64_t mlir::AsmPrinter::popCyclicPrinting(uint64_t this)
{
  int32x2_t *v1;
  __int32 v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *(int32x2_t **)(*(_QWORD *)(this + 8) + 8);
  v2 = v1[85].i32[0];
  if (v2)
  {
    v3 = v1[83];
    v4 = v1[87].u32[0];
    v5 = *(_QWORD *)(*(_QWORD *)&v1[86] + 8 * v4 - 8);
    v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
    v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *v8 = -8192;
      v1[84] = vadd_s32(v1[84], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[87].i32[0] = v4 - 1;
  }
  else
  {
    --v1[87].i32[0];
  }
  return this;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printAffineExprInternal(llvm::raw_ostream **a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  char v9;
  const char *v10;
  uint64_t v11;
  uint64_t RHS;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  unint64_t LHS;
  llvm::raw_ostream *result;
  uint64_t Position;
  llvm::raw_ostream *v21;
  size_t v22;
  void *v23;
  llvm::raw_ostream **v24;
  uint64_t v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  char *v30;
  char v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  mlir::AffineBinaryOpExpr *v34;
  llvm::raw_ostream *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BOOL8 v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a2;
  switch(mlir::AffineExpr::getKind((mlir::AffineExpr *)&v46))
  {
    case 0u:
      v9 = 0;
      v10 = " + ";
      goto LABEL_8;
    case 1u:
      v9 = 0;
      v10 = " * ";
      goto LABEL_8;
    case 2u:
      v9 = 0;
      v10 = " mod ";
      goto LABEL_8;
    case 3u:
      v9 = 0;
      v10 = " floordiv ";
      goto LABEL_8;
    case 4u:
      v9 = 0;
      v10 = " ceildiv ";
      goto LABEL_8;
    case 5u:
      v17 = *a1;
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, v46);
      LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v47);
      return llvm::raw_ostream::operator<<(v17, LHS);
    case 6u:
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, v46);
      Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v47);
      if (a4)
        return (llvm::raw_ostream *)a4(a5, Position, 0);
      v29 = *a1;
      v30 = (char *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v30 < *((_QWORD *)*a1 + 3))
      {
        *((_QWORD *)v29 + 4) = v30 + 1;
        v31 = 100;
        goto LABEL_50;
      }
      v39 = 100;
      goto LABEL_73;
    case 7u:
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, v46);
      Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v47);
      if (a4)
        return (llvm::raw_ostream *)a4(a5, Position, 1);
      v29 = *a1;
      v30 = (char *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v30 >= *((_QWORD *)*a1 + 3))
      {
        v39 = 115;
LABEL_73:
        v29 = llvm::raw_ostream::write(v29, v39);
      }
      else
      {
        *((_QWORD *)v29 + 4) = v30 + 1;
        v31 = 115;
LABEL_50:
        *v30 = v31;
      }
      return llvm::raw_ostream::operator<<(v29, Position);
    default:
      v10 = 0;
      v9 = 1;
LABEL_8:
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, v46);
      v45 = v47;
      v11 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v45);
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v45);
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v45))
      {
        if (a3 == 1)
        {
          v13 = *a1;
          v14 = (_BYTE *)*((_QWORD *)*a1 + 4);
          if ((unint64_t)v14 >= *((_QWORD *)*a1 + 3))
          {
            llvm::raw_ostream::write(v13, 40);
            v47 = RHS;
            if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5)
            {
LABEL_13:
              ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, RHS);
              if (!v47)
                goto LABEL_30;
LABEL_28:
              if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v45) == 1
                && mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v47) == -1)
              {
                v27 = *a1;
                v28 = (_BYTE *)*((_QWORD *)*a1 + 4);
                if (*((_BYTE **)*a1 + 3) == v28)
                {
                  llvm::raw_ostream::write(v27, "-", 1uLL);
                }
                else
                {
                  *v28 = 45;
                  ++*((_QWORD *)v27 + 4);
                }
                v24 = a1;
                v25 = v11;
                goto LABEL_36;
              }
LABEL_30:
              mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 1, a4, a5);
              if ((v9 & 1) == 0)
              {
                v21 = *a1;
                v22 = strlen(v10);
                v23 = (void *)*((_QWORD *)*a1 + 4);
                if (v22 <= *((_QWORD *)*a1 + 3) - (_QWORD)v23)
                {
                  if (v22)
                  {
                    memcpy(v23, v10, v22);
                    *((_QWORD *)v21 + 4) += v22;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v21, v10, v22);
                }
              }
              v24 = a1;
              v25 = RHS;
LABEL_36:
              result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(v24, v25, 1, a4, a5);
              if (a3 != 1)
                return result;
              goto LABEL_78;
            }
LABEL_27:
            ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, 0);
            if (!v47)
              goto LABEL_30;
            goto LABEL_28;
          }
          *((_QWORD *)v13 + 4) = v14 + 1;
          *v14 = 40;
        }
        v47 = RHS;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5)
          goto LABEL_13;
        goto LABEL_27;
      }
      if (a3 != 1)
        goto LABEL_18;
      v15 = *a1;
      v16 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v15, 40);
        v47 = RHS;
        if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) < 5)
          goto LABEL_19;
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 40;
LABEL_18:
        v47 = RHS;
        if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) < 5)
        {
LABEL_19:
          ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, RHS);
          v44 = v47;
          if (!v47)
            goto LABEL_55;
          goto LABEL_40;
        }
      }
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, 0);
      v44 = v47;
      if (!v47)
        goto LABEL_55;
LABEL_40:
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v44) != 1)
        goto LABEL_55;
      v26 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v44);
      v47 = v26;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5)
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, v26);
        v43 = v47;
        if (!v47)
          goto LABEL_55;
      }
      else
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, 0);
        v43 = v47;
        if (!v47)
          goto LABEL_55;
      }
      if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v43) == -1)
      {
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        llvm::raw_ostream::operator<<(*a1, " - ");
        v47 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        v40 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 0;
        v41 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v41, v40, a4, a5);
        if (a3 != 1)
          return result;
        goto LABEL_78;
      }
      if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v43) <= -2)
      {
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        llvm::raw_ostream::operator<<(*a1, " - ");
        v32 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v32, 1, a4, a5);
        v33 = llvm::raw_ostream::operator<<(*a1, " * ");
        v34 = (mlir::AffineBinaryOpExpr *)&v43;
        goto LABEL_69;
      }
LABEL_55:
      v47 = RHS;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) != 5)
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, 0);
        v44 = v47;
        if (!v47)
          goto LABEL_60;
        goto LABEL_59;
      }
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v47, RHS);
      v44 = v47;
      if (v47)
      {
LABEL_59:
        if ((mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44) & 0x8000000000000000) == 0)
          goto LABEL_60;
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        v33 = *a1;
        v37 = *((_QWORD *)*a1 + 4);
        if ((unint64_t)(*((_QWORD *)*a1 + 3) - v37) > 2)
        {
          *(_BYTE *)(v37 + 2) = 32;
          *(_WORD *)v37 = 11552;
          *((_QWORD *)v33 + 4) += 3;
        }
        else
        {
          v33 = llvm::raw_ostream::write(*a1, " - ", 3uLL);
        }
        v34 = (mlir::AffineBinaryOpExpr *)&v44;
LABEL_69:
        v38 = mlir::AffineBinaryOpExpr::getLHS(v34);
        result = llvm::raw_ostream::operator<<(v33, -v38);
        if (a3 != 1)
          return result;
        goto LABEL_78;
      }
LABEL_60:
      mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
      v35 = *a1;
      v36 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v36) > 2)
      {
        *(_BYTE *)(v36 + 2) = 32;
        *(_WORD *)v36 = 11040;
        *((_QWORD *)v35 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v35, " + ", 3uLL);
      }
      result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(a1, RHS, 0, a4, a5);
      if (a3 == 1)
      {
LABEL_78:
        result = *a1;
        v42 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if ((unint64_t)v42 >= *((_QWORD *)*a1 + 3))
        {
          return llvm::raw_ostream::write(result, 41);
        }
        else
        {
          *((_QWORD *)result + 4) = v42 + 1;
          *v42 = 41;
        }
      }
      return result;
  }
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printAffineMap(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  int NumDims;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  unint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  int NumSymbols;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t *Results;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  uint64_t v37;
  llvm::raw_ostream *result;
  _BYTE *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  uint64_t v44;

  v44 = a2;
  v3 = *a1;
  v4 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 40);
    if ((int)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) < 2)
      goto LABEL_12;
    goto LABEL_5;
  }
  *((_QWORD *)v3 + 4) = v4 + 1;
  *v4 = 40;
  if ((int)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) >= 2)
  {
LABEL_5:
    v5 = 0;
    while (1)
    {
      v6 = *a1;
      v7 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)*a1 + 3))
      {
        v10 = llvm::raw_ostream::write(v6, 100);
        v8 = llvm::raw_ostream::operator<<(v10, v5);
        v9 = (_WORD *)*((_QWORD *)v8 + 4);
        if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
          goto LABEL_6;
LABEL_11:
        llvm::raw_ostream::write(v8, ", ", 2uLL);
        if ((uint64_t)++v5 >= (int)(mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) - 1))
          break;
      }
      else
      {
        *((_QWORD *)v6 + 4) = v7 + 1;
        *v7 = 100;
        v8 = llvm::raw_ostream::operator<<(v6, v5);
        v9 = (_WORD *)*((_QWORD *)v8 + 4);
        if (*((_QWORD *)v8 + 3) - (_QWORD)v9 <= 1uLL)
          goto LABEL_11;
LABEL_6:
        *v9 = 8236;
        *((_QWORD *)v8 + 4) += 2;
        if ((uint64_t)++v5 >= (int)(mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) - 1))
          break;
      }
    }
  }
LABEL_12:
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44))
  {
    v11 = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      v11 = llvm::raw_ostream::write(*a1, 100);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 100;
    }
    NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44);
    llvm::raw_ostream::operator<<(v11, (NumDims - 1));
  }
  v14 = *a1;
  v15 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v14, 41);
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44))
      goto LABEL_39;
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 41;
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44))
    {
LABEL_39:
      v29 = *a1;
      v30 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v30) <= 4)
        goto LABEL_40;
      goto LABEL_43;
    }
  }
  v16 = *a1;
  v17 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v16, 91);
    if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) == 1)
      goto LABEL_32;
    goto LABEL_25;
  }
  *((_QWORD *)v16 + 4) = v17 + 1;
  *v17 = 91;
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) != 1)
  {
LABEL_25:
    v18 = 0;
    while (1)
    {
      v19 = *a1;
      v20 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v20 >= *((_QWORD *)*a1 + 3))
      {
        v23 = llvm::raw_ostream::write(v19, 115);
        v21 = llvm::raw_ostream::operator<<(v23, v18);
        v22 = (_WORD *)*((_QWORD *)v21 + 4);
        if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
          goto LABEL_26;
LABEL_31:
        llvm::raw_ostream::write(v21, ", ", 2uLL);
        if (++v18 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) - 1)
          break;
      }
      else
      {
        *((_QWORD *)v19 + 4) = v20 + 1;
        *v20 = 115;
        v21 = llvm::raw_ostream::operator<<(v19, v18);
        v22 = (_WORD *)*((_QWORD *)v21 + 4);
        if (*((_QWORD *)v21 + 3) - (_QWORD)v22 <= 1uLL)
          goto LABEL_31;
LABEL_26:
        *v22 = 8236;
        *((_QWORD *)v21 + 4) += 2;
        if (++v18 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) - 1)
          break;
      }
    }
  }
LABEL_32:
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44))
  {
    v24 = *a1;
    v25 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)*a1 + 3))
    {
      v24 = llvm::raw_ostream::write(*a1, 115);
    }
    else
    {
      *((_QWORD *)v24 + 4) = v25 + 1;
      *v25 = 115;
    }
    NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44);
    llvm::raw_ostream::operator<<(v24, (NumSymbols - 1));
  }
  v27 = *a1;
  v28 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v28 < *((_QWORD *)*a1 + 3))
  {
    *((_QWORD *)v27 + 4) = v28 + 1;
    *v28 = 93;
    goto LABEL_39;
  }
  llvm::raw_ostream::write(v27, 93);
  v29 = *a1;
  v30 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v30) <= 4)
  {
LABEL_40:
    llvm::raw_ostream::write(v29, " -> (", 5uLL);
    Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&v44);
    if (!v32)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_43:
  *(_BYTE *)(v30 + 4) = 40;
  *(_DWORD *)v30 = 540945696;
  *((_QWORD *)v29 + 4) += 5;
  Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&v44);
  if (!v32)
    goto LABEL_45;
LABEL_44:
  v34 = Results;
  v35 = v32;
  v36 = *a1;
  mlir::AsmPrinter::Impl::printAffineExprInternal(a1, *Results, 0, 0, v33);
  if (v35 != 1)
  {
    v40 = v34 + 1;
    v41 = 8 * v35 - 8;
    do
    {
      v43 = (_WORD *)*((_QWORD *)v36 + 4);
      if (*((_QWORD *)v36 + 3) - (_QWORD)v43 > 1uLL)
      {
        *v43 = 8236;
        *((_QWORD *)v36 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v36, ", ", 2uLL);
      }
      v42 = *v40++;
      mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v42, 0, 0, v37);
      v41 -= 8;
    }
    while (v41);
  }
LABEL_45:
  result = *a1;
  v39 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v39 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 41);
  *((_QWORD *)result + 4) = v39 + 1;
  *v39 = 41;
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printIntegerSet(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  unsigned int NumDims;
  unint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  int v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  int Position;
  int v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  llvm::raw_ostream *v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  int NumSymbols;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  unsigned int i;
  uint64_t Constraint;
  int isEq;
  uint64_t v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  unint64_t v43;
  const char *v44;
  llvm::raw_ostream *v45;
  _WORD *v46;
  unsigned __int16 v47;
  BOOL v48;
  signed int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  llvm::raw_ostream *v53;
  uint64_t v54;
  unint64_t v55;
  const char *v56;
  llvm::raw_ostream *result;
  _BYTE *v58;
  unsigned __int16 v59;
  uint64_t v60;

  v60 = a2;
  v3 = *a1;
  v4 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 40);
    if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60) < 2)
      goto LABEL_12;
    goto LABEL_5;
  }
  *((_QWORD *)v3 + 4) = v4 + 1;
  *v4 = 40;
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60) >= 2)
  {
LABEL_5:
    v5 = 0;
    while (1)
    {
      v8 = *a1;
      v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)*a1 + 3))
      {
        v12 = llvm::raw_ostream::write(v8, 100);
        v10 = llvm::raw_ostream::operator<<(v12, v5);
        v11 = (_WORD *)*((_QWORD *)v10 + 4);
        if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
          goto LABEL_6;
LABEL_11:
        llvm::raw_ostream::write(v10, ", ", 2uLL);
        NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
        v14 = v5 + 2;
        ++v5;
        if (v14 >= NumDims)
          break;
      }
      else
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        *v9 = 100;
        v10 = llvm::raw_ostream::operator<<(v8, v5);
        v11 = (_WORD *)*((_QWORD *)v10 + 4);
        if (*((_QWORD *)v10 + 3) - (_QWORD)v11 <= 1uLL)
          goto LABEL_11;
LABEL_6:
        *v11 = 8236;
        *((_QWORD *)v10 + 4) += 2;
        v6 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
        v7 = v5 + 2;
        ++v5;
        if (v7 >= v6)
          break;
      }
    }
  }
LABEL_12:
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60))
  {
    v15 = *a1;
    v16 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)*a1 + 3))
    {
      v15 = llvm::raw_ostream::write(*a1, 100);
    }
    else
    {
      *((_QWORD *)v15 + 4) = v16 + 1;
      *v16 = 100;
    }
    v17 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
    llvm::raw_ostream::operator<<(v15, (v17 - 1));
  }
  v18 = *a1;
  v19 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v18, 41);
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60))
    {
LABEL_19:
      v20 = *a1;
      v21 = (_DWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v21 <= 3uLL)
        goto LABEL_20;
LABEL_43:
      *v21 = 673200672;
      *((_QWORD *)v20 + 4) += 4;
      Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v60);
      v23 = Position - 1;
      if (Position <= 1)
        goto LABEL_57;
      goto LABEL_44;
    }
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 41;
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60))
      goto LABEL_19;
  }
  v24 = *a1;
  v25 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v24, 91);
    if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) == 1)
      goto LABEL_34;
    goto LABEL_27;
  }
  *((_QWORD *)v24 + 4) = v25 + 1;
  *v25 = 91;
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) != 1)
  {
LABEL_27:
    v26 = 0;
    while (1)
    {
      v27 = *a1;
      v28 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v28 >= *((_QWORD *)*a1 + 3))
      {
        v31 = llvm::raw_ostream::write(v27, 115);
        v29 = llvm::raw_ostream::operator<<(v31, v26);
        v30 = (_WORD *)*((_QWORD *)v29 + 4);
        if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 1uLL)
          goto LABEL_28;
LABEL_33:
        llvm::raw_ostream::write(v29, ", ", 2uLL);
        if (++v26 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) - 1)
          break;
      }
      else
      {
        *((_QWORD *)v27 + 4) = v28 + 1;
        *v28 = 115;
        v29 = llvm::raw_ostream::operator<<(v27, v26);
        v30 = (_WORD *)*((_QWORD *)v29 + 4);
        if (*((_QWORD *)v29 + 3) - (_QWORD)v30 <= 1uLL)
          goto LABEL_33;
LABEL_28:
        *v30 = 8236;
        *((_QWORD *)v29 + 4) += 2;
        if (++v26 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) - 1)
          break;
      }
    }
  }
LABEL_34:
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60))
  {
    v32 = *a1;
    v33 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v33 >= *((_QWORD *)*a1 + 3))
    {
      v32 = llvm::raw_ostream::write(*a1, 115);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v33 + 1;
      *v33 = 115;
    }
    NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60);
    llvm::raw_ostream::operator<<(v32, (NumSymbols - 1));
  }
  v35 = *a1;
  v36 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v36 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v35, 93);
    v20 = *a1;
    v21 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v21 > 3uLL)
      goto LABEL_43;
  }
  else
  {
    *((_QWORD *)v35 + 4) = v36 + 1;
    *v36 = 93;
    v20 = *a1;
    v21 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v21 > 3uLL)
      goto LABEL_43;
  }
LABEL_20:
  llvm::raw_ostream::write(v20, " : (", 4uLL);
  Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v60);
  v23 = Position - 1;
  if (Position > 1)
  {
LABEL_44:
    for (i = 0; v23 != i; ++i)
    {
      while (1)
      {
        Constraint = mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v60, i);
        isEq = mlir::IntegerSet::isEq((mlir::IntegerSet *)&v60, i);
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, Constraint, 0, 0, v40);
        v41 = *a1;
        v42 = *((_QWORD *)*a1 + 4);
        v43 = *((_QWORD *)*a1 + 3) - v42;
        if (!isEq)
          break;
        if (v43 <= 4)
        {
          v44 = " == 0";
          goto LABEL_51;
        }
        *(_BYTE *)(v42 + 4) = 48;
        v47 = 15648;
LABEL_55:
        *(_DWORD *)v42 = v47 | 0x203D0000;
        *((_QWORD *)v41 + 4) += 5;
        v45 = *a1;
        v46 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v46 > 1uLL)
          goto LABEL_45;
LABEL_56:
        llvm::raw_ostream::write(v45, ", ", 2uLL);
        if (v23 == ++i)
          goto LABEL_57;
      }
      if (v43 > 4)
      {
        *(_BYTE *)(v42 + 4) = 48;
        v47 = 15904;
        goto LABEL_55;
      }
      v44 = " >= 0";
LABEL_51:
      llvm::raw_ostream::write(v41, v44, 5uLL);
      v45 = *a1;
      v46 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v46 <= 1uLL)
        goto LABEL_56;
LABEL_45:
      *v46 = 8236;
      *((_QWORD *)v45 + 4) += 2;
    }
  }
LABEL_57:
  v48 = __OFSUB__(Position, 1);
  v49 = Position - 1;
  if (v49 < 0 != v48)
    goto LABEL_64;
  v50 = mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v60, v49);
  v51 = mlir::IntegerSet::isEq((mlir::IntegerSet *)&v60, v49);
  mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v50, 0, 0, v52);
  v53 = *a1;
  v54 = *((_QWORD *)*a1 + 4);
  v55 = *((_QWORD *)*a1 + 3) - v54;
  if (!v51)
  {
    if (v55 <= 4)
    {
      v56 = " >= 0";
      goto LABEL_63;
    }
    *(_BYTE *)(v54 + 4) = 48;
    v59 = 15904;
LABEL_68:
    *(_DWORD *)v54 = v59 | 0x203D0000;
    *((_QWORD *)v53 + 4) += 5;
    result = *a1;
    v58 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v58 < *((_QWORD *)*a1 + 3))
      goto LABEL_65;
    return llvm::raw_ostream::write(result, 41);
  }
  if (v55 > 4)
  {
    *(_BYTE *)(v54 + 4) = 48;
    v59 = 15648;
    goto LABEL_68;
  }
  v56 = " == 0";
LABEL_63:
  llvm::raw_ostream::write(v53, v56, 5uLL);
LABEL_64:
  result = *a1;
  v58 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v58 < *((_QWORD *)*a1 + 3))
  {
LABEL_65:
    *((_QWORD *)result + 4) = v58 + 1;
    *v58 = 41;
    return result;
  }
  return llvm::raw_ostream::write(result, 41);
}

double mlir::Attribute::print(mlir::Attribute *this, llvm::raw_ostream *a2, int a3)
{
  mlir::MLIRContext *Context;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t **v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  if (*(_QWORD *)this)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext(this);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v17);
    v7 = operator new();
    v8 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection((_QWORD *)v7, Context);
    *(_QWORD *)(v8 + 56) = v8 + 72;
    *(_QWORD *)(v8 + 64) = 0x600000000;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_DWORD *)(v8 + 136) = 0;
    *(_OWORD *)(v8 + 144) = 0u;
    v9 = (uint64_t *)(v8 + 144);
    *(_DWORD *)(v8 + 160) = 0;
    *(_OWORD *)(v8 + 184) = 0u;
    *(_QWORD *)(v8 + 168) = v8 + 184;
    *(_QWORD *)(v8 + 176) = 0;
    *(_QWORD *)(v8 + 200) = v8 + 216;
    *(_QWORD *)(v8 + 208) = *(_QWORD *)"";
    *(_QWORD *)(v8 + 248) = v8 + 264;
    *(_OWORD *)(v8 + 256) = 0u;
    *(_QWORD *)(v8 + 272) = 1;
    *(_OWORD *)(v8 + 280) = 0u;
    *(_DWORD *)(v8 + 296) = 0;
    *(_DWORD *)(v8 + 320) = 0;
    *(_OWORD *)(v8 + 304) = 0u;
    *(_DWORD *)(v8 + 344) = 0;
    *(_OWORD *)(v8 + 328) = 0u;
    *(_DWORD *)(v8 + 368) = 0;
    *(_OWORD *)(v8 + 352) = 0u;
    *(_DWORD *)(v8 + 392) = 0;
    *(_OWORD *)(v8 + 376) = 0u;
    *(_DWORD *)(v8 + 416) = 0;
    *(_OWORD *)(v8 + 400) = 0u;
    *(_OWORD *)(v8 + 424) = 0u;
    *(_QWORD *)(v8 + 440) = 0;
    *(_QWORD *)(v8 + 448) = v8 + 464;
    *(_QWORD *)(v8 + 456) = *(_QWORD *)"";
    *(_QWORD *)(v8 + 496) = v8 + 512;
    *(_OWORD *)(v8 + 504) = 0u;
    *(_QWORD *)(v8 + 520) = 1;
    *(_QWORD *)(v8 + 528) = 0;
    *(_DWORD *)(v7 + 536) = 0;
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v8 + 544));
    *(_DWORD *)(v7 + 608) = 0;
    *(_QWORD *)(v7 + 600) = 0;
    *(_OWORD *)(v7 + 584) = 0u;
    v10 = v18;
    *(_OWORD *)(v7 + 616) = v17;
    *(_OWORD *)(v7 + 632) = v10;
    *(_QWORD *)(v7 + 648) = v19;
    *(_QWORD *)(v7 + 656) = 0;
    *(_OWORD *)(v7 + 664) = 0u;
    *(_DWORD *)(v7 + 680) = 0;
    *(_QWORD *)(v7 + 688) = v7 + 704;
    *(_QWORD *)(v7 + 696) = 0;
    *(_QWORD *)&v17 = a2;
    *((_QWORD *)&v17 + 1) = v7;
    v11 = *(_OWORD *)(v7 + 632);
    v18 = *(_OWORD *)(v7 + 616);
    v19 = v11;
    v20 = *(_QWORD *)(v7 + 648);
    v21 = 1;
    if (a3)
      v12 = 2;
    else
      v12 = 0;
    v13 = *(uint64_t ***)this;
    if (v13)
    {
        mlir::AsmPrinter::Impl::printAttributeImpl((llvm::raw_ostream **)&v17, v13, v12);
    }
    else
    {
      v16 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) > 0x11)
      {
        *(_WORD *)(v16 + 16) = 15934;
        *(_OWORD *)v16 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
        *((_QWORD *)a2 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(a2, "<<NULL ATTRIBUTE>>", 0x12uLL);
      }
    }
    mlir::detail::AsmStateImpl::~AsmStateImpl((mlir::detail::AsmStateImpl *)v7);
  }
  v14 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v14) > 0x11)
  {
    *(_WORD *)(v14 + 16) = 15934;
    result = *(double *)"<<NULL ATTRIBUTE>>";
    *(_OWORD *)v14 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
    *((_QWORD *)a2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a2, "<<NULL ATTRIBUTE>>", 0x12uLL);
  }
  return result;
}

uint64_t sub_2072AD3B8(uint64_t a1)
{
  return MEMORY[0x20BD002F8](a1, 0x10B0C4070846C5ALL);
}

llvm::raw_ostream *mlir::Type::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t ***v3;
  mlir::MLIRContext *Context;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t **v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (*(_QWORD *)this)
  {
    v3 = (uint64_t ***)this;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext(this);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v12);
    v5 = operator new();
    v6 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection((_QWORD *)v5, Context);
    *(_QWORD *)(v6 + 56) = v6 + 72;
    *(_QWORD *)(v6 + 64) = 0x600000000;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_DWORD *)(v6 + 136) = 0;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_DWORD *)(v6 + 160) = 0;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_QWORD *)(v6 + 168) = v6 + 184;
    *(_QWORD *)(v6 + 176) = 0;
    *(_QWORD *)(v6 + 200) = v6 + 216;
    *(_QWORD *)(v6 + 208) = *(_QWORD *)"";
    *(_QWORD *)(v6 + 248) = v6 + 264;
    *(_OWORD *)(v6 + 256) = 0u;
    *(_QWORD *)(v6 + 272) = 1;
    *(_OWORD *)(v6 + 280) = 0u;
    *(_DWORD *)(v6 + 296) = 0;
    *(_DWORD *)(v6 + 320) = 0;
    *(_OWORD *)(v6 + 304) = 0u;
    *(_DWORD *)(v6 + 344) = 0;
    *(_OWORD *)(v6 + 328) = 0u;
    *(_DWORD *)(v6 + 368) = 0;
    *(_OWORD *)(v6 + 352) = 0u;
    *(_DWORD *)(v6 + 392) = 0;
    *(_OWORD *)(v6 + 376) = 0u;
    *(_DWORD *)(v6 + 416) = 0;
    *(_OWORD *)(v6 + 400) = 0u;
    *(_OWORD *)(v6 + 424) = 0u;
    *(_QWORD *)(v6 + 440) = 0;
    *(_QWORD *)(v6 + 448) = v6 + 464;
    *(_QWORD *)(v6 + 456) = *(_QWORD *)"";
    *(_QWORD *)(v6 + 496) = v6 + 512;
    *(_OWORD *)(v6 + 504) = 0u;
    *(_QWORD *)(v6 + 520) = 1;
    *(_QWORD *)(v6 + 528) = 0;
    *(_DWORD *)(v5 + 536) = 0;
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v6 + 544));
    *(_DWORD *)(v5 + 608) = 0;
    *(_QWORD *)(v5 + 600) = 0;
    *(_OWORD *)(v5 + 584) = 0u;
    v7 = v13;
    *(_OWORD *)(v5 + 616) = v12;
    *(_OWORD *)(v5 + 632) = v7;
    *(_QWORD *)(v5 + 648) = v14;
    *(_QWORD *)(v5 + 656) = 0;
    *(_OWORD *)(v5 + 664) = 0u;
    *(_DWORD *)(v5 + 680) = 0;
    *(_QWORD *)(v5 + 688) = v5 + 704;
    *(_QWORD *)(v5 + 696) = 0;
    *(_QWORD *)&v12 = a2;
    *((_QWORD *)&v12 + 1) = v5;
    v8 = *(_OWORD *)(v5 + 632);
    v13 = *(_OWORD *)(v5 + 616);
    v14 = v8;
    v15 = *(_QWORD *)(v5 + 648);
    v16 = 1;
    v9 = *v3;
    if (v9)
    {
      if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)&v12, (uint64_t)v9))
        mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)&v12, v9);
    }
    else
    {
      v11 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 0xCuLL)
      {
        qmemcpy(v11, "<<NULL TYPE>>", 13);
        *((_QWORD *)a2 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(a2, "<<NULL TYPE>>", 0xDuLL);
      }
    }
    mlir::detail::AsmStateImpl::~AsmStateImpl((mlir::detail::AsmStateImpl *)v5);
  }
  v10 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 <= 0xCuLL)
    return llvm::raw_ostream::write(a2, "<<NULL TYPE>>", 0xDuLL);
  qmemcpy(v10, "<<NULL TYPE>>", 13);
  *((_QWORD *)a2 + 4) += 13;
  return this;
}

uint64_t sub_2072AD64C(uint64_t a1)
{
  return MEMORY[0x20BD002F8](a1, 0x10B0C4070846C5ALL);
}

llvm::raw_ostream *mlir::Type::dump(mlir::Type *this)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::errs(this);
  v3 = mlir::Type::print(this, v2);
  result = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v5)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v5 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

mlir::Value *mlir::Value::print(mlir::Value *this, llvm::raw_ostream *a2)
{
  _BYTE v5[40];

  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v5);
  return mlir::Value::print(this, a2, (const mlir::OpPrintingFlags *)v5);
}

mlir::Value *mlir::Value::print(mlir::Value *this, llvm::raw_ostream *a2, const mlir::OpPrintingFlags *a3)
{
  llvm::raw_ostream *v3;
  mlir::Value *v5;
  mlir::Operation *DefiningOp;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;

  v3 = a2;
  if (*(_QWORD *)this)
  {
    v5 = this;
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp(this);
    if (DefiningOp)
    {
      return mlir::Operation::print(DefiningOp, v3, a3);
    }
    else
    {
      v8 = *(_QWORD *)v5;
      v9 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v9 > 0x19uLL)
      {
        qmemcpy(v9, "<block argument> of type '", 26);
        *((_QWORD *)v3 + 4) += 26;
      }
      else
      {
        v3 = llvm::raw_ostream::write(v3, "<block argument> of type '", 0x1AuLL);
      }
      v11 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Type::print((llvm::raw_ostream *)&v11, v3);
      v10 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v10) > 0xB)
      {
        *(_DWORD *)(v10 + 8) = 540702821;
        *(_QWORD *)v10 = *(_QWORD *)"' at index: ";
        *((_QWORD *)v3 + 4) += 12;
      }
      else
      {
        v3 = llvm::raw_ostream::write(v3, "' at index: ", 0xCuLL);
      }
      return llvm::raw_ostream::operator<<(v3, *(unsigned int *)(v8 + 24));
    }
  }
  else
  {
    v7 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 0xDuLL)
    {
      qmemcpy(v7, "<<NULL VALUE>>", 14);
      *((_QWORD *)a2 + 4) += 14;
    }
    else
    {
      return llvm::raw_ostream::write(a2, "<<NULL VALUE>>", 0xEuLL);
    }
  }
  return this;
}

mlir::detail::AsmStateImpl *mlir::Operation::print(mlir::Operation *this, llvm::raw_ostream *a2, const mlir::OpPrintingFlags *a3)
{
  const char **v5;
  mlir::Operation *v6;
  mlir::Block *v7;
  mlir::Block *v8;
  mlir::detail::AsmStateImpl *result;
  mlir::detail::AsmStateImpl *v10;

  v5 = (const char **)this;
  if ((*((_BYTE *)a3 + 32) & 0x20) != 0)
  {
    do
    {
      v6 = this;
      if ((mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>((_QWORD *)this + 6) & 1) != 0)
        break;
      v8 = (mlir::Block *)*((_QWORD *)v6 + 2);
      if (!v8)
        break;
      this = (mlir::Operation *)mlir::Block::getParentOp(v8);
    }
    while (this);
  }
  else
  {
    do
    {
      v6 = this;
      v7 = (mlir::Block *)*((_QWORD *)this + 2);
      if (!v7)
        break;
      this = (mlir::Operation *)mlir::Block::getParentOp(v7);
    }
    while (this);
  }
  mlir::AsmState::AsmState((llvm *)&v10, (uint64_t)v6, (uint64_t)a3, 0, 0);
  mlir::Operation::print(v5, a2, (mlir::AsmState *)&v10);
  result = v10;
  v10 = 0;
  if (result)
    mlir::detail::AsmStateImpl::~AsmStateImpl(result);
  return result;
}

void mlir::Operation::print(const char **this, llvm::raw_ostream *a2, mlir::AsmState *a3)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v6[2];
  llvm::raw_ostream *v7[2];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[6];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a3;
  v7[0] = a2;
  v7[1] = (llvm::raw_ostream *)v4;
  v10 = *(_QWORD *)(v4 + 648);
  v5 = *(_OWORD *)(v4 + 632);
  v8 = *(_OWORD *)(v4 + 616);
  v9 = v5;
  v11 = 1;
  v6[0] = &off_24C028B20;
  v6[1] = v7;
  v12 = v14;
  v14[0] = "builtin";
  v14[1] = 7;
  v13 = 0x300000001;
  v15 = 0;
  if (!this[2] && (*(_BYTE *)(v4 + 648) & 0x20) == 0)
    mlir::detail::AsmStateImpl::initializeAliases((mlir::detail::AsmStateImpl *)v4, this);
  v6[0] = &off_24C028B20;
  if (v12 != v14)
    free(v12);
}

llvm::raw_ostream *`anonymous namespace'::SSANameState::printValueID(llvm::raw_ostream *result, unint64_t a2, int a3, llvm::raw_ostream *a4)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t Owner;
  int v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  void *v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  int *v30;
  unint64_t v31;
  int *v32;
  unint64_t v33;
  int *v34;
  int *v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;

  v4 = a4;
  if (!a2)
  {
    v16 = (void *)*((_QWORD *)a4 + 4);
    if (*((_QWORD *)a4 + 3) - (_QWORD)v16 <= 0xDuLL)
      return llvm::raw_ostream::write(a4, "<<NULL VALUE>>", 0xEuLL);
    qmemcpy(v16, "<<NULL VALUE>>", 14);
    *((_QWORD *)a4 + 4) += 14;
    return result;
  }
  v6 = result;
  v41 = a2;
  v7 = *(_QWORD *)(a2 + 8) & 7;
  if (v7 == 7)
    v8 = 0;
  else
    v8 = a2;
  if (v7 != 7)
  {
    Owner = mlir::detail::OpResultImpl::getOwner((mlir::detail::OpResultImpl *)v8);
    v10 = *(_DWORD *)(Owner + 36);
    if (v10 != 1)
    {
      v19 = *(_QWORD *)(v8 + 8);
      if ((v19 & 7) == 6)
      {
        v11 = *(_DWORD *)(v8 + 16) + 6;
        v20 = *((_QWORD *)v6 + 9);
        v21 = *((unsigned int *)v6 + 22);
        if (!(_DWORD)v21)
          goto LABEL_38;
      }
      else
      {
        v11 = v19 & 7;
        v20 = *((_QWORD *)v6 + 9);
        v21 = *((unsigned int *)v6 + 22);
        if (!(_DWORD)v21)
          goto LABEL_38;
      }
      v22 = v21 - 1;
      v23 = (uint64_t *)(v20 + 32 * (((_DWORD)v21 - 1) & ((Owner >> 4) ^ (Owner >> 9))));
      v24 = *v23;
      if (*v23 == Owner)
        goto LABEL_39;
      v25 = 1;
      LODWORD(v26) = v22 & ((Owner >> 4) ^ (Owner >> 9));
      while (v24 != -4096)
      {
        v27 = v26 + v25++;
        v26 = v27 & v22;
        v24 = *(_QWORD *)(v20 + 32 * v26);
        if (v24 == Owner)
        {
          v23 = (uint64_t *)(v20 + 32 * v26);
          goto LABEL_39;
        }
      }
LABEL_38:
      v23 = (uint64_t *)(v20 + 32 * v21);
LABEL_39:
      if (v23 == (uint64_t *)(v20 + 32 * v21))
      {
        v39 = Owner - 16;
        v12 = 1;
      }
      else
      {
        v30 = (int *)v23[1];
        v31 = *((unsigned int *)v23 + 4);
        v32 = &v30[v31];
        if (!(_DWORD)v31)
          goto LABEL_47;
        do
        {
          v33 = v31 >> 1;
          v34 = &v30[v31 >> 1];
          v36 = *v34;
          v35 = v34 + 1;
          v31 += ~(v31 >> 1);
          if (v11 < v36)
            v31 = v33;
          else
            v30 = v35;
        }
        while (v31);
        if (v30 == v32)
        {
LABEL_47:
          v37 = *(v32 - 1);
        }
        else
        {
          v37 = *(v30 - 1);
          v10 = *v30;
        }
        v38 = v10 - v37;
        v12 = v38 != 1;
        if (v38 == 1)
          v11 = 0;
        else
          v11 -= v37;
        if (v37 > 5)
          v39 = Owner - 24 * (v37 - 5) - 96;
        else
          v39 = Owner - 16 * (v37 + 1);
      }
      v41 = v39;
      v42 = 0;
      result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, &v41, &v42);
      if (!(_DWORD)result)
        goto LABEL_56;
      goto LABEL_8;
    }
  }
  v11 = 0;
  v12 = 0;
  v42 = 0;
  result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, &v41, &v42);
  if (!(_DWORD)result)
    goto LABEL_56;
LABEL_8:
  v13 = v42;
  if (v42 == *(_QWORD *)v6 + 16 * *((unsigned int *)v6 + 4))
  {
LABEL_56:
    v40 = (void *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v40 <= 0x14uLL)
      return llvm::raw_ostream::write(v4, "<<UNKNOWN SSA VALUE>>", 0x15uLL);
    qmemcpy(v40, "<<UNKNOWN SSA VALUE>>", 21);
    *((_QWORD *)v4 + 4) += 21;
    return result;
  }
  v14 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 37);
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      goto LABEL_11;
LABEL_15:
    v42 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)v6 + 3, &v41, &v42))
    {
      v17 = *(const void **)(v42 + 8);
      v18 = *(_QWORD *)(v42 + 16);
      result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
      if (v18 <= *((_QWORD *)v4 + 3) - (_QWORD)result)
        goto LABEL_17;
    }
    else
    {
      v28 = *((_QWORD *)v6 + 3) + 24 * *((unsigned int *)v6 + 10);
      v17 = *(const void **)(v28 + 8);
      v18 = *(_QWORD *)(v28 + 16);
      result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
      if (v18 <= *((_QWORD *)v4 + 3) - (_QWORD)result)
      {
LABEL_17:
        if (v18)
        {
          result = (llvm::raw_ostream *)memcpy(result, v17, v18);
          *((_QWORD *)v4 + 4) += v18;
        }
        goto LABEL_32;
      }
    }
    result = llvm::raw_ostream::write(v4, (const char *)v17, v18);
    goto LABEL_32;
  }
  *((_QWORD *)v4 + 4) = v14 + 1;
  *v14 = 37;
  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 == -1)
    goto LABEL_15;
LABEL_11:
  result = llvm::raw_ostream::operator<<(v4, v15);
LABEL_32:
  if (v12 && a3)
  {
    v29 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v29 >= *((_QWORD *)v4 + 3))
    {
      v4 = llvm::raw_ostream::write(v4, 35);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v29 + 1;
      *v29 = 35;
    }
    return llvm::raw_ostream::operator<<(v4, v11);
  }
  return result;
}

void mlir::detail::AsmStateImpl::initializeAliases(mlir::detail::AsmStateImpl *this, const char **a2)
{
  char *v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  llvm *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm *v14;
  _QWORD *v15;
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm *v21;
  _QWORD *v22;
  uint64_t v23;
  llvm *v24;
  llvm *v25;
  unint64_t v26;
  _QWORD *v27;
  const std::nothrow_t *v28;
  unint64_t v29;
  void *v30;
  BOOL v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  const unsigned __int8 *v39;
  int8x16_t *v40;
  uint64_t *v41;
  int v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  unint64_t *v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  uint64_t v62;
  unint64_t *v63;
  _OWORD *v64;
  __int128 v65;
  unint64_t *v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  char *v70;
  uint64_t v71;
  llvm *v72;
  unint64_t *v74;
  uint64_t v75;
  unint64_t *v76;
  void **v77;
  uint64_t v78;
  void **v79;
  _QWORD *v80;
  unint64_t *v81;
  char *v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  unint64_t *v88;
  int v89;
  char *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  char *v99;
  _QWORD v100[4];
  void *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  int v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114[3];
  unsigned int v115;
  _QWORD v116[2];
  llvm *v117;
  uint64_t v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  void *v122;
  __int128 v123;
  _BYTE v124[32];
  void (**v125)(llvm::raw_svector_ostream *__hidden);
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  int v132;
  void **v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 616;
  v116[0] = this;
  v116[1] = (char *)this + 184;
  v99 = (char *)this + 184;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = &v122;
  v121 = 0;
  v122 = v124;
  v123 = xmmword_207AB5560;
  v126 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 1;
  v128 = 0;
  v129 = 0;
  v127 = 0;
  v125 = &off_24C02DCB8;
  v133 = &v122;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v125, 0, 0, 0);
  v100[0] = &off_24C02A998;
  v100[1] = 0;
  v100[2] = v4;
  v100[3] = v116;
  v102 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 1;
  v104 = 0;
  v105 = 0;
  v103 = 0;
  v101 = &unk_24C02DBC0;
  v5 = *((_BYTE *)this + 648);
  if ((v5 & 1) != 0)
  {
    v5 = *((_BYTE *)this + 648);
  }
  if ((v5 & 4) != 0)
  {
    v6 = v118;
    if (!v118)
      goto LABEL_33;
  }
  else
  {
    (*(void (**)(const char *, const char **, _QWORD *, char *, _QWORD))(*(_QWORD *)a2[6] + 56))(a2[6], a2, v100, &byte_207AF6795, 0);
    v6 = v118;
    if (!v118)
      goto LABEL_33;
  }
  v7 = v119;
  if (v119 > 4 * v6 && v119 >= 0x41)
  {
    if (!v6 || ((v8 = 1 << (33 - __clz(v6 - 1)), v8 <= 64) ? (v9 = 64) : (v9 = v8), v9 != v119))
      llvm::deallocate_buffer(v117, (void *)(16 * v119));
    v118 = 0;
    v10 = v117;
    v11 = (v119 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v11)
    {
      v12 = v11 + 1;
      v13 = (v11 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v14 = (llvm *)((char *)v117 + 16 * v13);
      v15 = (_QWORD *)((char *)v117 + 16);
      v16 = v13;
      do
      {
        *(v15 - 2) = -4096;
        *v15 = -4096;
        v15 += 4;
        v16 -= 2;
      }
      while (v16);
      if (v12 == v13)
      {
LABEL_33:
        v112 = v114;
        v113 = 0;
        v26 = v121;
        if (!(_DWORD)v121)
          goto LABEL_42;
        v27 = v120;
        if (v120 == &v122)
        {
          v114[0] = 0;
          v80 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v112, v114, v121, 104, v114);
          v27 = v80;
          v81 = (unint64_t *)v112;
          if ((_DWORD)v113)
          {
            v82 = (char *)v112 + 104 * v113;
            v83 = v80 + 5;
            v84 = (char *)v112 + 40;
            do
            {
              v85 = v84 - 40;
              *(v83 - 5) = *((_QWORD *)v84 - 5);
              v86 = *((_OWORD *)v84 - 2);
              *(_OWORD *)((char *)v83 - 20) = *(_OWORD *)(v84 - 20);
              *((_OWORD *)v83 - 2) = v86;
              *v83 = v83 + 2;
              v83[1] = 0x600000000;
              if (*((_DWORD *)v84 + 2))
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v83, (uint64_t)v84);
              v83 += 13;
              v84 += 104;
            }
            while (v85 + 104 != v82);
            v81 = (unint64_t *)v112;
            if ((_DWORD)v113)
            {
              v87 = 13 * v113;
              do
              {
                v88 = (unint64_t *)v81[v87 - 8];
                if (&v81[v87 - 6] != v88)
                  free(v88);
                v87 -= 13;
              }
              while (v87 * 8);
              v81 = (unint64_t *)v112;
            }
          }
          v89 = v114[0];
          if (v81 != v114)
            free(v81);
          v112 = v27;
          HIDWORD(v113) = v89;
          if ((_DWORD)v121)
          {
            v90 = (char *)v120 + 104 * v121;
            v91 = v27 + 5;
            v92 = (char *)v120 + 40;
            do
            {
              v93 = v92 - 40;
              *(v91 - 5) = *((_QWORD *)v92 - 5);
              v94 = *((_OWORD *)v92 - 2);
              *(_OWORD *)((char *)v91 - 20) = *(_OWORD *)(v92 - 20);
              *((_OWORD *)v91 - 2) = v94;
              *v91 = v91 + 2;
              v91[1] = 0x600000000;
              if (*((_DWORD *)v92 + 2))
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v91, (uint64_t)v92);
              v91 += 13;
              v92 += 104;
            }
            while (v93 + 104 != v90);
            v95 = (char *)v120;
            LODWORD(v113) = v26;
            if ((_DWORD)v121)
            {
              v96 = 104 * v121;
              do
              {
                v97 = *(char **)&v95[v96 - 64];
                if (&v95[v96 - 48] != v97)
                  free(v97);
                v96 -= 104;
              }
              while (v96);
              v26 = v113;
              LODWORD(v121) = 0;
              if (!(_DWORD)v113)
              {
LABEL_42:
                v109 = 0;
                v110 = 0;
                v111 = 0x1000000000;
                if (!(_DWORD)v113)
                  goto LABEL_98;
                v33 = (char *)v112;
                v34 = (char *)v112 + 104 * v113;
                v98 = (uint64_t *)((char *)this + 168);
                while (1)
                {
                  if (v33[24])
                  {
                    v40 = (int8x16_t *)*((_QWORD *)v33 + 1);
                    v39 = (const unsigned __int8 *)*((_QWORD *)v33 + 2);
                    v41 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((uint64_t)&v109, v40, v39);
                    v42 = *(_DWORD *)(*v41 + 8);
                    *(_DWORD *)(*v41 + 8) = v42 + 1;
                    v43 = *((_DWORD *)v33 + 8);
                    v44 = *(_QWORD *)v33;
                    v45 = *((_DWORD *)this + 40);
                    if (!v45)
                      goto LABEL_68;
                    v35 = *((_QWORD *)this + 18);
                    v36 = ((v44 >> 4) ^ (v44 >> 9)) & (v45 - 1);
                    v37 = (unint64_t *)(v35 + 16 * v36);
                    v38 = *v37;
                    if (v44 != *v37)
                      break;
                  }
LABEL_45:
                  v33 += 104;
                  if (v33 == v34)
                  {
                    if (HIDWORD(v110) && (_DWORD)v110)
                    {
                      v71 = 0;
                      do
                      {
                        v72 = *(llvm **)((char *)v109 + v71);
                        if (v72 != (llvm *)-8 && v72 != 0)
                          llvm::deallocate_buffer(v72, (void *)(*(_QWORD *)v72 + 17));
                        v71 += 8;
                      }
                      while (8 * v110 != v71);
                    }
LABEL_98:
                    free(v109);
                    v74 = (unint64_t *)v112;
                    if ((_DWORD)v113)
                    {
                      v75 = 13 * v113;
                      do
                      {
                        v76 = (unint64_t *)v74[v75 - 8];
                        if (&v74[v75 - 6] != v76)
                          free(v76);
                        v75 -= 13;
                      }
                      while (v75 * 8);
                      v74 = (unint64_t *)v112;
                    }
                    if (v74 != v114)
                      free(v74);
                    v100[0] = &off_24C02A998;
                    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v101);
                    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v125);
                    if (v122 != v124)
                      free(v122);
                    v77 = (void **)v120;
                    if ((_DWORD)v121)
                    {
                      v78 = 13 * v121;
                      do
                      {
                        v79 = (void **)v77[v78 - 8];
                        if (&v77[v78 - 6] != v79)
                          free(v79);
                        v78 -= 13;
                      }
                      while (v78 * 8);
                      v77 = (void **)v120;
                    }
                    if (v77 != &v122)
                      free(v77);
                    llvm::deallocate_buffer(v117, (void *)(16 * v119));
                  }
                }
                v50 = 0;
                v51 = 1;
                while (v38 != -4096)
                {
                  if (v50)
                    v52 = 0;
                  else
                    v52 = v38 == -8192;
                  if (v52)
                    v50 = v37;
                  v53 = v36 + v51++;
                  v36 = v53 & (v45 - 1);
                  v37 = (unint64_t *)(v35 + 16 * v36);
                  v38 = *v37;
                  if (v44 == *v37)
                    goto LABEL_45;
                }
                if (v50)
                  v54 = v50;
                else
                  v54 = v37;
                v55 = *((_DWORD *)this + 38);
                if (4 * v55 + 4 < 3 * v45)
                {
                  if (v45 + ~v55 - *((_DWORD *)this + 39) > v45 >> 3)
                    goto LABEL_50;
                }
                else
                {
LABEL_68:
                  v45 *= 2;
                }
                llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow((uint64_t)this + 144, v45);
                v56 = *((_QWORD *)this + 18);
                v57 = *((_DWORD *)this + 40) - 1;
                v58 = v57 & ((v44 >> 4) ^ (v44 >> 9));
                v54 = (unint64_t *)(v56 + 16 * v58);
                v59 = *v54;
                if (v44 == *v54)
                {
LABEL_70:
                  ++*((_DWORD *)this + 38);
                  if (v44 == -4096)
                    goto LABEL_52;
                  goto LABEL_51;
                }
                v66 = 0;
                v67 = 1;
                while (v59 != -4096)
                {
                  if (v66)
                    v68 = 0;
                  else
                    v68 = v59 == -8192;
                  if (v68)
                    v66 = v54;
                  v69 = v58 + v67++;
                  v58 = v69 & v57;
                  v54 = (unint64_t *)(v56 + 16 * (v69 & v57));
                  v59 = *v54;
                  if (v44 == *v54)
                    goto LABEL_70;
                }
                if (v66)
                  v54 = v66;
LABEL_50:
                v46 = *v54;
                ++*((_DWORD *)this + 38);
                if (v46 == -4096)
                {
LABEL_52:
                  v47 = v43 & 0xC0000000 | v42 & 0x3FFFFFFF;
                  *v54 = v44;
                  *((_DWORD *)v54 + 2) = 0;
                  v48 = *((unsigned int *)this + 44);
                  *((_DWORD *)v54 + 2) = v48;
                  if (v48 >= *((_DWORD *)this + 45))
                  {
                    v114[0] = v44;
                    v114[1] = (unint64_t)v40;
                    v114[2] = (unint64_t)v39;
                    v115 = v47;
                    v60 = v48 + 1;
                    v61 = *v98 + 32 * v48 > (unint64_t)v114;
                    if (*v98 <= (unint64_t)v114 && v61)
                    {
                      v70 = (char *)v114 - *v98;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v98, v99, v60, 32);
                      v62 = *v98;
                      v63 = (unint64_t *)&v70[*v98];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v98, v99, v60, 32);
                      v62 = *v98;
                      v63 = v114;
                    }
                    v64 = (_OWORD *)(v62 + 32 * *((unsigned int *)this + 44));
                    v65 = *((_OWORD *)v63 + 1);
                    *v64 = *(_OWORD *)v63;
                    v64[1] = v65;
                  }
                  else
                  {
                    v49 = *((_QWORD *)this + 21) + 32 * v48;
                    *(_QWORD *)v49 = v44;
                    *(_QWORD *)(v49 + 8) = v40;
                    *(_QWORD *)(v49 + 16) = v39;
                    *(_DWORD *)(v49 + 24) = v47;
                  }
                  ++*((_DWORD *)this + 44);
                  goto LABEL_45;
                }
LABEL_51:
                --*((_DWORD *)this + 39);
                goto LABEL_52;
              }
              v27 = v112;
LABEL_37:
              v28 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
              v29 = v26;
              while (1)
              {
                v30 = operator new(104 * v29, v28);
                if (v30)
                  break;
                v31 = v29 > 1;
                v29 >>= 1;
                if (!v31)
                {
                  goto LABEL_42;
                }
              }
              v32 = v30;
              operator delete(v32);
              goto LABEL_42;
            }
            v27 = v112;
          }
          else
          {
            LODWORD(v113) = v26;
          }
        }
        else
        {
          v112 = v120;
          v113 = v121;
          v120 = &v122;
          HIDWORD(v121) = 0;
        }
        LODWORD(v121) = 0;
        goto LABEL_37;
      }
    }
    else
    {
      v14 = v117;
    }
    v25 = (llvm *)((char *)v10 + 16 * v7);
    do
    {
      *(_QWORD *)v14 = -4096;
      v14 = (llvm *)((char *)v14 + 16);
    }
    while (v14 != v25);
    goto LABEL_33;
  }
  if (v119)
  {
    v17 = v117;
    v18 = (v119 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v18)
    {
      v19 = v18 + 1;
      v20 = (v18 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v21 = (llvm *)((char *)v117 + 16 * v20);
      v22 = (_QWORD *)((char *)v117 + 16);
      v23 = v20;
      do
      {
        *(v22 - 2) = -4096;
        *v22 = -4096;
        v22 += 4;
        v23 -= 2;
      }
      while (v23);
      if (v19 == v20)
        goto LABEL_29;
    }
    else
    {
      v21 = v117;
    }
    v24 = (llvm *)((char *)v17 + 16 * v7);
    do
    {
      *(_QWORD *)v21 = -4096;
      v21 = (llvm *)((char *)v21 + 16);
    }
    while (v21 != v24);
  }
LABEL_29:
  v118 = 0;
  goto LABEL_33;
}

void `anonymous namespace'::OperationPrinter::printFullOpWithIndentAndLoc(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2)
{
  llvm::raw_ostream **v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  mlir::Operation *v13;
  unsigned int v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  mlir::Operation *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  unint64_t v38;
  llvm::raw_ostream *v39;
  _WORD *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  llvm::raw_ostream *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  llvm::raw_ostream *v61;
  _BYTE *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *NextResultAtOffset;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  _DWORD *v79;
  char v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  llvm::raw_ostream *v85;
  _QWORD *v86;
  llvm::raw_ostream *v87;
  uint64_t v88;
  _BOOL4 v90;
  _BOOL4 v91;
  BOOL v92;
  const char *v93;
  llvm::raw_ostream *v94;
  _DWORD *v95;
  void *v96;
  size_t v97;
  _WORD *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  llvm::raw_ostream *v102;
  _QWORD *v103;
  llvm::raw_ostream *v104;
  _BYTE *v105;
  llvm::raw_ostream *v106;
  _BYTE *v107;
  uint64_t v108;
  _WORD *v109;
  _QWORD *v110;
  llvm::raw_ostream *v111;
  _BYTE *v112;
  llvm::raw_ostream *v113;
  _BYTE *v114;
  uint64_t *v115;
  int v116;
  BOOL v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  llvm::raw_ostream **v121;
  llvm::raw_ostream **v122;
  _OWORD v123[2];
  uint64_t v124;
  uint64_t v125[4];
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  _OWORD v132[2];
  uint64_t v133;
  uint64_t v134[3];

  v4 = (llvm::raw_ostream **)((char *)this + 16);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)this + 18);
  v7 = *((_DWORD *)this + 36);
  *(_QWORD *)&v123[0] = a2;
  v8 = *(_QWORD *)(v5 + 656);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 16);
    if (v9)
    {
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v12 = (uint64_t *)(*(_QWORD *)v8 + 16 * v11);
      v13 = (mlir::Operation *)*v12;
      if ((mlir::Operation *)*v12 == a2)
      {
LABEL_4:
        v14 = v7;
LABEL_7:
        *((_DWORD *)v12 + 2) = v6;
        *((_DWORD *)v12 + 3) = v7;
        v7 = v14;
        goto LABEL_8;
      }
      v115 = 0;
      v116 = 1;
      while (v13 != (mlir::Operation *)-4096)
      {
        if (v115)
          v117 = 0;
        else
          v117 = v13 == (mlir::Operation *)-8192;
        if (v117)
          v115 = v12;
        v118 = v11 + v116++;
        v11 = v118 & v10;
        v12 = (uint64_t *)(*(_QWORD *)v8 + 16 * (v118 & v10));
        v13 = (mlir::Operation *)*v12;
        if ((mlir::Operation *)*v12 == a2)
          goto LABEL_4;
      }
      if (v115)
        v15 = v115;
      else
        v15 = v12;
    }
    else
    {
      v15 = 0;
    }
    v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<unsigned int,unsigned int>>>,mlir::Operation *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Operation * const&>(v8, v15, (uint64_t *)v123);
    v14 = *((_DWORD *)this + 36);
    goto LABEL_7;
  }
LABEL_8:
  llvm::raw_ostream::indent(*v4, v7);
  v16 = *((unsigned int *)a2 + 9);
  if (!(_DWORD)v16)
    goto LABEL_61;
  v17 = *((_QWORD *)this + 3);
  v18 = (llvm::raw_ostream *)(v17 + 280);
  v19 = *(_QWORD *)(v17 + 352);
  v20 = *(unsigned int *)(v17 + 368);
  if (!(_DWORD)v20)
    goto LABEL_15;
  v21 = v20 - 1;
  v22 = v19 + 32 * (((_DWORD)v20 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
  v23 = *(mlir::Operation **)v22;
  if (*(mlir::Operation **)v22 != a2)
  {
    v24 = 1;
    LODWORD(v25) = v21 & ((a2 >> 4) ^ (a2 >> 9));
    while (v23 != (mlir::Operation *)-4096)
    {
      v26 = v25 + v24++;
      v25 = v26 & v21;
      v23 = *(mlir::Operation **)(v19 + 32 * v25);
      if (v23 == a2)
      {
        v22 = v19 + 32 * v25;
        goto LABEL_16;
      }
    }
LABEL_15:
    v22 = v19 + 32 * v20;
  }
LABEL_16:
  if (v22 == v19 + 32 * v20 || (v27 = *(unsigned int *)(v22 + 16), !(_DWORD)v27))
  {
    if (v16 < 2)
      goto LABEL_58;
    v36 = *v4;
    v37 = (_BYTE *)*((_QWORD *)*v4 + 4);
    if ((unint64_t)v37 >= *((_QWORD *)*v4 + 3))
    {
      v36 = llvm::raw_ostream::write(v36, 58);
    }
    else
    {
      *((_QWORD *)v36 + 4) = v37 + 1;
      *v37 = 58;
    }
    v38 = v16;
  }
  else
  {
    v120 = *((unsigned int *)a2 + 9);
    v121 = v4;
    v28 = *(int **)(v22 + 8);
    v119 = *(unsigned int *)(v22 + 16);
    v29 = (v27 << 32) - 0x100000000;
    if (v27 << 32 != 0x100000000)
    {
      v30 = *v4;
      v31 = *v28;
      v32 = v28[1] - v31;
      if (v31 <= 5)
        v33 = (char *)a2 - 16 * (*v28 + 1);
      else
        v33 = (char *)a2 - 24 * (*v28 - 5) - 96;
      if (v32 >= 2)
      {
        v34 = *v4;
        v35 = (_BYTE *)*((_QWORD *)*v4 + 4);
        if ((unint64_t)v35 >= *((_QWORD *)*v4 + 3))
        {
          v34 = llvm::raw_ostream::write(v34, 58);
        }
        else
        {
          *((_QWORD *)v34 + 4) = v35 + 1;
          *v35 = 58;
        }
        llvm::raw_ostream::operator<<(v34, v32);
      }
      if (v29 != 0x100000000)
      {
        v45 = (v29 >> 32) - 1;
        v46 = 0x200000000;
        v47 = 0x100000000;
        do
        {
          v48 = (_WORD *)*((_QWORD *)v30 + 4);
          if (*((_QWORD *)v30 + 3) - (_QWORD)v48 > 1uLL)
          {
            *v48 = 8236;
            *((_QWORD *)v30 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v30, ", ", 2uLL);
          }
          v49 = *(int *)((char *)v28 + (v47 >> 30));
          v50 = *(int *)((char *)v28 + (v47 >> 30));
          v51 = *(int *)((char *)v28 + (v46 >> 30)) - v49;
          v52 = (char *)a2 - 24 * (v50 - 5) - 96;
          v53 = (char *)a2 - 16 * (v50 + 1);
          if (v49 <= 5)
            v54 = (unint64_t)v53;
          else
            v54 = (unint64_t)v52;
          if (v51 >= 2)
          {
            v55 = *v121;
            v56 = (_BYTE *)*((_QWORD *)*v121 + 4);
            if ((unint64_t)v56 < *((_QWORD *)*v121 + 3))
            {
              *((_QWORD *)v55 + 4) = v56 + 1;
              *v56 = 58;
            }
            else
            {
              v55 = llvm::raw_ostream::write(v55, 58);
            }
            llvm::raw_ostream::operator<<(v55, v51);
          }
          v46 += 0x100000000;
          v47 += 0x100000000;
          --v45;
        }
        while (v45);
      }
    }
    v4 = v121;
    v39 = *v121;
    v40 = (_WORD *)*((_QWORD *)*v121 + 4);
    if (*((_QWORD *)*v121 + 3) - (_QWORD)v40 > 1uLL)
    {
      *v40 = 8236;
      *((_QWORD *)v39 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v39, ", ", 2uLL);
    }
    v41 = v28[v119 - 1];
    v42 = v120 - v41;
    if (v41 <= 5)
      v43 = (char *)a2 - 16 * (v41 + 1);
    else
      v43 = (char *)a2 - 24 * (v41 - 5) - 96;
    if (v42 < 2)
      goto LABEL_58;
    v36 = *v121;
    v44 = (_BYTE *)*((_QWORD *)*v121 + 4);
    if ((unint64_t)v44 >= *((_QWORD *)*v121 + 3))
    {
      v36 = llvm::raw_ostream::write(v36, 58);
    }
    else
    {
      *((_QWORD *)v36 + 4) = v44 + 1;
      *v44 = 58;
    }
    v38 = v42;
  }
  llvm::raw_ostream::operator<<(v36, v38);
LABEL_58:
  v57 = *v4;
  v58 = *((_QWORD *)*v4 + 4);
  if ((unint64_t)(*((_QWORD *)*v4 + 3) - v58) > 2)
  {
    *(_BYTE *)(v58 + 2) = 32;
    *(_WORD *)v58 = 15648;
    *((_QWORD *)v57 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v57, " = ", 3uLL);
  }
LABEL_61:
  (*(void (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *))(*(_QWORD *)this + 208))(this, a2);
  v59 = *((_BYTE *)this + 64);
  if ((v59 & 1) != 0)
  {
    v60 = *((_QWORD *)a2 + 3);
    v61 = *v4;
    v62 = (_BYTE *)*((_QWORD *)*v4 + 4);
    if (*((_BYTE **)*v4 + 3) == v62)
    {
      llvm::raw_ostream::write(v61, " ", 1uLL);
    }
    else
    {
      *v62 = 32;
      ++*((_QWORD *)v61 + 4);
    }
    mlir::AsmPrinter::Impl::printLocation((uint64_t)v4, v60, 1);
    v59 = *((_BYTE *)this + 64);
  }
  if ((v59 & 0x40) == 0)
    return;
  v63 = *((unsigned int *)a2 + 9);
  if (!(_DWORD)v63)
  {
    if ((*((_BYTE *)a2 + 46) & 0x80) != 0 && *((_DWORD *)a2 + 17))
    {
      v85 = *v4;
      v86 = (_QWORD *)*((_QWORD *)*v4 + 4);
      if (*((_QWORD *)*v4 + 3) - (_QWORD)v86 > 7uLL)
      {
        *v86 = 0x203A6469202F2F20;
        *((_QWORD *)v85 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v85, " // id: ", 8uLL);
      }
    }
    return;
  }
  v64 = (char *)a2 - 16;
  if (*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, 0))
  {
LABEL_73:
    v67 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v67)
      v68 = (char *)a2 - 16;
    else
      v68 = 0;
    if (!(_DWORD)v67)
      return;
    if (!*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, 0))
    {
      v69 = 1;
      while (v67 != v69)
      {
        NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v68, v69++);
        if (*NextResultAtOffset)
          goto LABEL_81;
      }
      return;
    }
LABEL_81:
    v122 = v4;
    v127 = &v131;
    v128 = &v131;
    v129 = 1;
    v130 = 0;
    v71 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v71)
      v72 = (char *)a2 - 16;
    else
      v72 = 0;
    *(_QWORD *)&v123[0] = v72;
    *((_QWORD *)&v123[0] + 1) = v71;
    mlir::ResultRange::use_begin((uint64_t *)v123, (uint64_t *)v132);
    v73 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v73)
      v74 = (char *)a2 - 16;
    else
      v74 = 0;
    v134[0] = (uint64_t)v74;
    v134[1] = v73;
    mlir::ResultRange::use_end(v134, v125);
    v124 = v133;
    v75 = v133;
    v123[0] = v132[0];
    v123[1] = v132[1];
    v76 = v126;
    if (v133 != v126)
    {
      v77 = 0;
      v78 = 0;
      while (1)
      {
        v79 = *(_DWORD **)(v75 + 16);
        if (v128 != v127)
          goto LABEL_92;
        v81 = HIDWORD(v129);
        if (HIDWORD(v129))
        {
          v82 = 0;
          v83 = 8 * HIDWORD(v129);
          v84 = v128;
          while ((_DWORD *)*v84 != v79)
          {
            if (*v84 == -2)
              v82 = v84;
            ++v84;
            v83 -= 8;
            if (!v83)
            {
              if (!v82)
                goto LABEL_102;
              *v82 = (uint64_t)v79;
              --v130;
              goto LABEL_89;
            }
          }
          goto LABEL_90;
        }
LABEL_102:
        if (HIDWORD(v129) < v129)
        {
          ++HIDWORD(v129);
          v128[v81] = (uint64_t)v79;
        }
        else
        {
LABEL_92:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v127, v79);
          if (!v80)
            goto LABEL_90;
        }
LABEL_89:
        ++v78;
        v77 += v79[9];
LABEL_90:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v132);
        v75 = v133;
        if (v133 == v76)
          goto LABEL_113;
      }
    }
    v78 = 0;
    v77 = 0;
LABEL_113:
    v90 = v77 < 2 && v78 < 2;
    v91 = v63 == 1;
    v92 = v91 && v90;
    if (v91 && v90)
      v93 = "user";
    else
      v93 = "users";
    v94 = *v122;
    v95 = (_DWORD *)*((_QWORD *)*v122 + 4);
    if (*((_QWORD *)*v122 + 3) - (_QWORD)v95 > 3uLL)
    {
      *v95 = 539963168;
      v96 = (void *)(*((_QWORD *)v94 + 4) + 4);
      *((_QWORD *)v94 + 4) = v96;
    }
    else
    {
      v94 = llvm::raw_ostream::write(*v122, " // ", 4uLL);
      v96 = (void *)*((_QWORD *)v94 + 4);
    }
    if (v92)
      v97 = 4;
    else
      v97 = 5;
    if (v97 <= *((_QWORD *)v94 + 3) - (_QWORD)v96)
    {
      memcpy(v96, v93, v97);
      v101 = *((_QWORD *)v94 + 3);
      v98 = (_WORD *)(*((_QWORD *)v94 + 4) + v97);
      *((_QWORD *)v94 + 4) = v98;
      if ((unint64_t)(v101 - (_QWORD)v98) > 1)
      {
LABEL_130:
        *v98 = 8250;
        *((_QWORD *)v94 + 4) += 2;
        v99 = *((unsigned int *)a2 + 9);
        if ((_DWORD)v99)
          v100 = (char *)a2 - 16;
        else
          v100 = 0;
        if (!(_DWORD)v99)
        {
LABEL_150:
          if (v128 != v127)
            free(v128);
          return;
        }
        goto LABEL_140;
      }
    }
    else
    {
      v94 = llvm::raw_ostream::write(v94, v93, v97);
      v98 = (_WORD *)*((_QWORD *)v94 + 4);
      if (*((_QWORD *)v94 + 3) - (_QWORD)v98 > 1uLL)
        goto LABEL_130;
    }
    llvm::raw_ostream::write(v94, ": ", 2uLL);
    v99 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v99)
      v100 = (char *)a2 - 16;
    else
      v100 = 0;
    if (!(_DWORD)v99)
      goto LABEL_150;
LABEL_140:
    v102 = *v122;
    v103 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v64, 0);
    if (v63 >= 2)
    {
      v104 = *v122;
      v105 = (_BYTE *)*((_QWORD *)*v122 + 4);
      if (*((_BYTE **)*v122 + 3) == v105)
      {
        llvm::raw_ostream::write(v104, "(", 1uLL);
      }
      else
      {
        *v105 = 40;
        ++*((_QWORD *)v104 + 4);
      }
      v106 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
      v107 = (_BYTE *)*((_QWORD *)v106 + 4);
      if (*((_BYTE **)v106 + 3) == v107)
      {
        llvm::raw_ostream::write(v106, ")", 1uLL);
      }
      else
      {
        *v107 = 41;
        ++*((_QWORD *)v106 + 4);
      }
    }
    else
    {
    }
    if ((_DWORD)v99 == 1)
      goto LABEL_150;
    v108 = 1;
    while (1)
    {
      v109 = (_WORD *)*((_QWORD *)v102 + 4);
      if (*((_QWORD *)v102 + 3) - (_QWORD)v109 > 1uLL)
      {
        *v109 = 8236;
        *((_QWORD *)v102 + 4) += 2;
        v110 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v100, v108);
        if (v63 >= 2)
        {
LABEL_159:
          v111 = *v122;
          v112 = (_BYTE *)*((_QWORD *)*v122 + 4);
          if (*((_BYTE **)*v122 + 3) == v112)
          {
            llvm::raw_ostream::write(v111, "(", 1uLL);
          }
          else
          {
            *v112 = 40;
            ++*((_QWORD *)v111 + 4);
          }
          v113 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v114 = (_BYTE *)*((_QWORD *)v113 + 4);
          if (*((_BYTE **)v113 + 3) == v114)
          {
            llvm::raw_ostream::write(v113, ")", 1uLL);
          }
          else
          {
            *v114 = 41;
            ++*((_QWORD *)v113 + 4);
          }
          goto LABEL_154;
        }
      }
      else
      {
        llvm::raw_ostream::write(v102, ", ", 2uLL);
        v110 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v100, v108);
        if (v63 >= 2)
          goto LABEL_159;
      }
LABEL_154:
      if (v99 == ++v108)
        goto LABEL_150;
    }
  }
  v65 = 1;
  while (v63 != v65)
  {
    v66 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, v65++);
    if (*v66)
      goto LABEL_73;
  }
  v87 = *v4;
  v88 = *((_QWORD *)*v4 + 4);
  if ((unint64_t)(*((_QWORD *)*v4 + 3) - v88) > 9)
  {
    *(_WORD *)(v88 + 8) = 25701;
    *(_QWORD *)v88 = *(_QWORD *)" // unused";
    *((_QWORD *)v87 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v87, " // unused", 0xAuLL);
  }
}

void `anonymous namespace'::OperationPrinter::~OperationPrinter(_anonymous_namespace_::OperationPrinter *this)
{
  char *v2;

  *(_QWORD *)this = &off_24C028B20;
  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_24C028B20;
  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *mlir::Operation::dump(mlir::Operation *this)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;
  _BYTE v6[32];
  char v7;

  v2 = (llvm::raw_ostream *)llvm::errs(this);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v6);
  v7 |= 0x20u;
  v3 = mlir::Operation::print(this, v2, (const mlir::OpPrintingFlags *)v6);
  result = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v5)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v5 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

llvm::raw_ostream *mlir::Block::print(mlir::Block *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;
  mlir::Block *v6;
  __int128 v7;
  uint64_t v8;
  mlir::detail::AsmStateImpl *v9;
  _QWORD v10[2];
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[6];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  result = (llvm::raw_ostream *)mlir::Block::getParentOp(this);
  if (result)
  {
    do
    {
      v5 = (uint64_t)result;
      v6 = (mlir::Block *)*((_QWORD *)result + 2);
      if (!v6)
        break;
      result = (llvm::raw_ostream *)mlir::Block::getParentOp(v6);
    }
    while (result);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v10);
    mlir::AsmState::AsmState((llvm *)&v9, v5, (uint64_t)v10, 0, 0);
    v11[0] = a2;
    v11[1] = v9;
    v7 = *(_OWORD *)((char *)v9 + 632);
    v12 = *(_OWORD *)((char *)v9 + 616);
    v13 = v7;
    v14 = *((_QWORD *)v9 + 81);
    v15 = 1;
    v10[0] = &off_24C028B20;
    v10[1] = v11;
    v16 = v18;
    v18[0] = "builtin";
    v18[1] = 7;
    v17 = 0x300000001;
    v19 = 0;
    v10[0] = &off_24C028B20;
    if (v16 != v18)
      free(v16);
    result = v9;
    v9 = 0;
    if (result)
      mlir::detail::AsmStateImpl::~AsmStateImpl(result);
  }
  else
  {
    v8 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 0x12)
    {
      *(_DWORD *)(v8 + 15) = 171851339;
      *(_OWORD *)v8 = *(_OWORD *)"<<UNLINKED BLOCK>>\n";
      *((_QWORD *)a2 + 4) += 19;
    }
    else
    {
      return llvm::raw_ostream::write(a2, "<<UNLINKED BLOCK>>\n", 0x13uLL);
    }
  }
  return result;
}

ZinIrHalH13g *`anonymous namespace'::OperationPrinter::print(_anonymous_namespace_::OperationPrinter *this, mlir::Block *a2, int a3, char a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  mlir::Block *v12;
  int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  size_t v17;
  void *v18;
  _QWORD *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  llvm::raw_ostream *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  unint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  uint64_t SinglePredecessor;
  __n128 v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int *v60;
  __int128 v61;
  char *v62;
  char *v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  const char *v75;
  size_t v76;
  void *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  llvm::raw_ostream *v82;
  uint64_t v83;
  llvm::raw_ostream *v84;
  llvm::raw_ostream *v85;
  _QWORD *v86;
  unsigned int v87;
  llvm::raw_ostream *v88;
  char *v89;
  const void *v90;
  unint64_t v91;
  void *v92;
  llvm::raw_ostream *v93;
  _BYTE *v94;
  _QWORD **v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  llvm::raw_ostream *v99;
  uint64_t v100;
  llvm::raw_ostream *v101;
  uint64_t v102;
  unint64_t v103;
  llvm::raw_ostream *v104;
  _BYTE *v105;
  ZinIrHalH13g *result;
  ZinIrHalH13g *v107;
  uint64_t v108;
  ZinIrHalH13g *v109;
  mlir::Operation *v110;
  _BYTE *v111;
  size_t *v112;
  uint64_t i;
  _WORD *v114;
  const void *v115;
  size_t v116;
  llvm::raw_ostream *v117;
  void *v118;
  __int128 v121;
  uint64_t v122;
  int v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  _QWORD v128[14];

  v128[12] = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
LABEL_98:
    *((_DWORD *)this + 36) += 2;
    if ((*((_BYTE *)this + 64) & 0x40) == 0)
      goto LABEL_117;
    goto LABEL_99;
  }
  llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = *(_QWORD *)(v7 + 376);
  v9 = *(unsigned int *)(v7 + 392);
  if ((_DWORD)v9)
  {
    v10 = v9 - 1;
    v11 = v8 + 32 * (((_DWORD)v9 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
    v12 = *(mlir::Block **)v11;
    if (*(mlir::Block **)v11 == a2)
      goto LABEL_9;
    v13 = 1;
    LODWORD(v14) = v10 & ((a2 >> 4) ^ (a2 >> 9));
    while (v12 != (mlir::Block *)-4096)
    {
      v15 = v14 + v13++;
      v14 = v15 & v10;
      v12 = *(mlir::Block **)(v8 + 32 * v14);
      if (v12 == a2)
      {
        v11 = v8 + 32 * v14;
        goto LABEL_9;
      }
    }
  }
  v11 = v8 + 32 * v9;
LABEL_9:
  if (v11 == v8 + 32 * v9)
  {
    v19 = v6 + 4;
    v18 = (void *)v6[4];
    v16 = "INVALIDBLOCK";
    v17 = 12;
    if (v6[3] - (_QWORD)v18 > 0xBuLL)
    {
LABEL_17:
      memcpy(v18, v16, v17);
      *v19 += v17;
      if (*((_QWORD *)a2 + 6) == *((_QWORD *)a2 + 7))
        goto LABEL_29;
      goto LABEL_18;
    }
LABEL_14:
    llvm::raw_ostream::write((llvm::raw_ostream *)v6, v16, v17);
    goto LABEL_15;
  }
  v16 = *(const char **)(v11 + 16);
  v17 = *(_QWORD *)(v11 + 24);
  v19 = v6 + 4;
  v18 = (void *)v6[4];
  if (v17 > v6[3] - (_QWORD)v18)
    goto LABEL_14;
  if (v17)
    goto LABEL_17;
LABEL_15:
  if (*((_QWORD *)a2 + 6) == *((_QWORD *)a2 + 7))
  {
LABEL_29:
    v34 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v35 = (_BYTE *)*((_QWORD *)v34 + 4);
    if ((unint64_t)v35 < *((_QWORD *)v34 + 3))
      goto LABEL_30;
    goto LABEL_37;
  }
LABEL_18:
  v20 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 40);
    v23 = (unint64_t *)*((_QWORD *)a2 + 6);
    v25 = (unint64_t *)*((_QWORD *)a2 + 7);
    v24 = (char *)v25 - (char *)v23;
    if (v25 == v23)
      goto LABEL_27;
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 40;
    v23 = (unint64_t *)*((_QWORD *)a2 + 6);
    v22 = (unint64_t *)*((_QWORD *)a2 + 7);
    v24 = (char *)v22 - (char *)v23;
    if (v22 == v23)
      goto LABEL_27;
  }
  v26 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  if (v24 != 8)
  {
    v27 = v23 + 1;
    v28 = 8 * (v24 >> 3) - 8;
    do
    {
      while (1)
      {
        v30 = (_WORD *)*((_QWORD *)v26 + 4);
        if (*((_QWORD *)v26 + 3) - (_QWORD)v30 <= 1uLL)
          break;
        *v30 = 8236;
        *((_QWORD *)v26 + 4) += 2;
        v29 = *v27++;
        v28 -= 8;
        if (!v28)
          goto LABEL_27;
      }
      llvm::raw_ostream::write(v26, ", ", 2uLL);
      v31 = *v27++;
      v28 -= 8;
    }
    while (v28);
  }
LABEL_27:
  v32 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if ((unint64_t)v33 < *((_QWORD *)v32 + 3))
  {
    *((_QWORD *)v32 + 4) = v33 + 1;
    *v33 = 41;
    goto LABEL_29;
  }
  llvm::raw_ostream::write(v32, 41);
  v34 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v35 = (_BYTE *)*((_QWORD *)v34 + 4);
  if ((unint64_t)v35 < *((_QWORD *)v34 + 3))
  {
LABEL_30:
    *((_QWORD *)v34 + 4) = v35 + 1;
    *v35 = 58;
    if (mlir::Block::getParent(a2))
      goto LABEL_31;
LABEL_38:
    v45 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v46 = (void *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v46 <= 0x1DuLL)
    {
      llvm::raw_ostream::write(v45, "  // block is not in a region!", 0x1EuLL);
      goto LABEL_96;
    }
    qmemcpy(v46, "  // block is not in a region!", 30);
    v48 = *((_QWORD *)v45 + 4) + 30;
LABEL_80:
    *((_QWORD *)v45 + 4) = v48;
    goto LABEL_96;
  }
LABEL_37:
  llvm::raw_ostream::write(v34, 58);
  if (!mlir::Block::getParent(a2))
    goto LABEL_38;
LABEL_31:
  if (!*(_QWORD *)a2)
  {
    if (mlir::Block::isEntryBlock(a2))
      goto LABEL_96;
    v45 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v47 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v47) <= 0x13)
    {
      llvm::raw_ostream::write(v45, "  // no predecessors", 0x14uLL);
      goto LABEL_96;
    }
    *(_DWORD *)(v47 + 16) = 1936879475;
    *(_OWORD *)v47 = *(_OWORD *)"  // no predecessors";
    v48 = *((_QWORD *)v45 + 4) + 20;
    goto LABEL_80;
  }
  SinglePredecessor = mlir::Block::getSinglePredecessor(a2);
  if (SinglePredecessor)
  {
    v38 = SinglePredecessor;
    v39 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v40 = *((_QWORD *)v39 + 4);
    if ((unint64_t)(*((_QWORD *)v39 + 3) - v40) > 0xA)
    {
      *(_DWORD *)(v40 + 7) = 540697701;
      *(_QWORD *)v40 = *(_QWORD *)"  // pred: ";
      *((_QWORD *)v39 + 4) += 11;
      v41 = (_QWORD *)*((_QWORD *)this + 2);
      v68 = *((_QWORD *)this + 3);
      v43 = *(_QWORD *)(v68 + 376);
      v44 = *(unsigned int *)(v68 + 392);
      if (!(_DWORD)v44)
        goto LABEL_69;
    }
    else
    {
      llvm::raw_ostream::write(v39, "  // pred: ", 0xBuLL);
      v41 = (_QWORD *)*((_QWORD *)this + 2);
      v42 = *((_QWORD *)this + 3);
      v43 = *(_QWORD *)(v42 + 376);
      v44 = *(unsigned int *)(v42 + 392);
      if (!(_DWORD)v44)
        goto LABEL_69;
    }
    v69 = v44 - 1;
    v70 = (uint64_t *)(v43 + 32 * (((_DWORD)v44 - 1) & ((v38 >> 4) ^ (v38 >> 9))));
    v71 = *v70;
    if (*v70 == v38)
      goto LABEL_70;
    v72 = 1;
    LODWORD(v73) = v69 & ((v38 >> 4) ^ (v38 >> 9));
    while (v71 != -4096)
    {
      v74 = v73 + v72++;
      v73 = v74 & v69;
      v71 = *(_QWORD *)(v43 + 32 * v73);
      if (v71 == v38)
      {
        v70 = (uint64_t *)(v43 + 32 * v73);
        goto LABEL_70;
      }
    }
LABEL_69:
    v70 = (uint64_t *)(v43 + 32 * v44);
LABEL_70:
    if (v70 == (uint64_t *)(v43 + 32 * v44))
    {
      v78 = v41 + 4;
      v77 = (void *)v41[4];
      v75 = "INVALIDBLOCK";
      v76 = 12;
      if (v41[3] - (_QWORD)v77 > 0xBuLL)
        goto LABEL_78;
    }
    else
    {
      v75 = (const char *)v70[2];
      v76 = v70[3];
      v78 = v41 + 4;
      v77 = (void *)v41[4];
      if (v76 <= v41[3] - (_QWORD)v77)
      {
        if (!v76)
          goto LABEL_96;
LABEL_78:
        memcpy(v77, v75, v76);
        *v78 += v76;
        goto LABEL_96;
      }
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)v41, v75, v76);
    goto LABEL_96;
  }
  v126 = v128;
  v37.n128_u64[0] = 0x400000000;
  v127 = 0x400000000;
  v49 = *(_QWORD **)a2;
  if (!*(_QWORD *)a2)
  {
    v80 = (char *)v128;
    v79 = v128;
    goto LABEL_82;
  }
  do
  {
    v50 = mlir::PredecessorIterator::unwrap((uint64_t)v49);
    v51 = *((_QWORD *)this + 3);
    v52 = *(_QWORD *)(v51 + 376);
    v53 = *(unsigned int *)(v51 + 392);
    if ((_DWORD)v53)
    {
      v54 = v53 - 1;
      v55 = (_QWORD *)(v52 + 32 * (((_DWORD)v53 - 1) & ((v50 >> 4) ^ (v50 >> 9))));
      v56 = *v55;
      if (*v55 == v50)
        goto LABEL_52;
      v57 = 1;
      LODWORD(v58) = v54 & ((v50 >> 4) ^ (v50 >> 9));
      while (v56 != -4096)
      {
        v59 = v58 + v57++;
        v58 = v59 & v54;
        v56 = *(_QWORD *)(v52 + 32 * v58);
        if (v56 == v50)
        {
          v55 = (_QWORD *)(v52 + 32 * v58);
          goto LABEL_52;
        }
      }
    }
    v55 = (_QWORD *)(v52 + 32 * v53);
LABEL_52:
    v123 = -1;
    v124 = "INVALIDBLOCK";
    v125 = 12;
    if (v55 == (_QWORD *)(v52 + 32 * v53))
      v60 = &v123;
    else
      v60 = (int *)(v55 + 1);
    v61 = *(_OWORD *)v60;
    v122 = *((_QWORD *)v60 + 2);
    v121 = v61;
    v62 = (char *)v126;
    if (v127 >= HIDWORD(v127))
    {
      v66 = v127 + 1;
      if (v126 <= &v121 && (char *)v126 + 24 * v127 > (char *)&v121)
      {
        v67 = (char *)&v121 - (_BYTE *)v126;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v66, 24);
        v62 = (char *)v126;
        v63 = (char *)v126 + v67;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v66, 24);
        v63 = (char *)&v121;
        v62 = (char *)v126;
      }
    }
    else
    {
      v63 = (char *)&v121;
    }
    v64 = (__n128 *)&v62[24 * v127];
    v37 = *(__n128 *)v63;
    v64[1].n128_u64[0] = *((_QWORD *)v63 + 2);
    *v64 = v37;
    v65 = (v127 + 1);
    LODWORD(v127) = v127 + 1;
    v49 = (_QWORD *)*v49;
  }
  while (v49);
  v79 = v126;
  v80 = (char *)v126 + 24 * v65;
  if ((_DWORD)v65)
  {
    v81 = 126 - 2 * __clz(v65);
    goto LABEL_83;
  }
LABEL_82:
  v81 = 0;
LABEL_83:
  v82 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v83 = *((_QWORD *)v82 + 4);
  if ((unint64_t)(*((_QWORD *)v82 + 3) - v83) > 4)
  {
    *(_BYTE *)(v83 + 4) = 32;
    *(_DWORD *)v83 = 791617568;
    *((_QWORD *)v82 + 4) += 5;
    v85 = llvm::raw_ostream::operator<<(v82, v127);
    v86 = (_QWORD *)*((_QWORD *)v85 + 4);
    if (*((_QWORD *)v85 + 3) - (_QWORD)v86 <= 7uLL)
      goto LABEL_87;
LABEL_85:
    *v86 = 0x203A736465727020;
    *((_QWORD *)v85 + 4) += 8;
  }
  else
  {
    v84 = llvm::raw_ostream::write(v82, "  // ", 5uLL);
    v85 = llvm::raw_ostream::operator<<(v84, v127);
    v86 = (_QWORD *)*((_QWORD *)v85 + 4);
    if (*((_QWORD *)v85 + 3) - (_QWORD)v86 > 7uLL)
      goto LABEL_85;
LABEL_87:
    llvm::raw_ostream::write(v85, " preds: ", 8uLL);
  }
  v87 = v127;
  if ((_DWORD)v127)
  {
    v88 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v89 = (char *)v126;
    v90 = (const void *)*((_QWORD *)v126 + 1);
    v91 = *((_QWORD *)v126 + 2);
    v92 = (void *)*((_QWORD *)v88 + 4);
    if (*((_QWORD *)v88 + 3) - (_QWORD)v92 >= v91)
    {
      if (v91)
      {
        memcpy(v92, v90, *((_QWORD *)v126 + 2));
        *((_QWORD *)v88 + 4) += v91;
      }
    }
    else
    {
      llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 2), (const char *)v90, *((_QWORD *)v126 + 2));
    }
    if (v87 != 1)
    {
      v112 = (size_t *)(v89 + 40);
      for (i = 24 * v87 - 24; i; i -= 24)
      {
        v114 = (_WORD *)*((_QWORD *)v88 + 4);
        if (*((_QWORD *)v88 + 3) - (_QWORD)v114 > 1uLL)
        {
          *v114 = 8236;
          *((_QWORD *)v88 + 4) += 2;
          v115 = (const void *)*(v112 - 1);
          v116 = *v112;
          v117 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v118 = (void *)*((_QWORD *)v117 + 4);
          if (*((_QWORD *)v117 + 3) - (_QWORD)v118 >= *v112)
          {
LABEL_136:
            if (v116)
            {
              memcpy(v118, v115, v116);
              *((_QWORD *)v117 + 4) += v116;
            }
            goto LABEL_131;
          }
        }
        else
        {
          llvm::raw_ostream::write(v88, ", ", 2uLL);
          v115 = (const void *)*(v112 - 1);
          v116 = *v112;
          v117 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v118 = (void *)*((_QWORD *)v117 + 4);
          if (*((_QWORD *)v117 + 3) - (_QWORD)v118 >= *v112)
            goto LABEL_136;
        }
        llvm::raw_ostream::write(v117, (const char *)v115, v116);
LABEL_131:
        v112 += 3;
      }
    }
  }
  if (v126 != v128)
    free(v126);
LABEL_96:
  v93 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 18);
  v94 = (_BYTE *)*((_QWORD *)v93 + 4);
  if ((unint64_t)v94 < *((_QWORD *)v93 + 3))
  {
    *((_QWORD *)v93 + 4) = v94 + 1;
    *v94 = 10;
    goto LABEL_98;
  }
  llvm::raw_ostream::write(v93, 10);
  *((_DWORD *)this + 36) += 2;
  if ((*((_BYTE *)this + 64) & 0x40) != 0)
  {
LABEL_99:
    v95 = (_QWORD **)*((_QWORD *)a2 + 6);
    v96 = *((_QWORD *)a2 + 7) - (_QWORD)v95;
    if (v96)
    {
      v97 = 8 * (v96 >> 3);
      do
      {
        while (1)
        {
          v98 = *v95;
          llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
          v99 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v100 = *((_QWORD *)v99 + 4);
          if ((unint64_t)(*((_QWORD *)v99 + 3) - v100) > 2)
          {
            *(_BYTE *)(v100 + 2) = 32;
            *(_WORD *)v100 = 12079;
            *((_QWORD *)v99 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v99, "// ", 3uLL);
          }
          v101 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v102 = *((_QWORD *)v101 + 4);
          v103 = *((_QWORD *)v101 + 3) - v102;
          if (*v98)
          {
            if (v103 > 0xB)
            {
              *(_DWORD *)(v102 + 8) = 544825888;
              *(_QWORD *)v102 = *(_QWORD *)" is used by ";
              *((_QWORD *)v101 + 4) += 12;
            }
            else
            {
              llvm::raw_ostream::write(v101, " is used by ", 0xCuLL);
            }
          }
          else if (v103 > 9)
          {
            *(_WORD *)(v102 + 8) = 25701;
            *(_QWORD *)v102 = *(_QWORD *)" is unused";
            *((_QWORD *)v101 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v101, " is unused", 0xAuLL);
          }
          v104 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          ++*((_DWORD *)this + 18);
          v105 = (_BYTE *)*((_QWORD *)v104 + 4);
          if ((unint64_t)v105 >= *((_QWORD *)v104 + 3))
            break;
          *((_QWORD *)v104 + 4) = v105 + 1;
          *v105 = 10;
          ++v95;
          v97 -= 8;
          if (!v97)
            goto LABEL_117;
        }
        llvm::raw_ostream::write(v104, 10);
        ++v95;
        v97 -= 8;
      }
      while (v97);
    }
  }
LABEL_117:
  v107 = (mlir::Block *)((char *)a2 + 32);
  result = (ZinIrHalH13g *)*((_QWORD *)a2 + 4);
  if (result == (mlir::Block *)((char *)a2 + 32))
  {
    v109 = (ZinIrHalH13g *)*((_QWORD *)a2 + 5);
    if (v109 != v107)
      goto LABEL_126;
  }
  else
  {
    ZinIrHalH13g::~ZinIrHalH13g(result);
    result = (ZinIrHalH13g *)mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((_QWORD *)(v108 + 48));
    v109 = (ZinIrHalH13g *)*((_QWORD *)a2 + 5);
    if ((_DWORD)result && (a4 & 1) == 0)
      v107 = *(ZinIrHalH13g **)v107;
    for (; v109 != v107; v109 = (ZinIrHalH13g *)*((_QWORD *)v109 + 1))
    {
LABEL_126:
      while (1)
      {
        ZinIrHalH13g::~ZinIrHalH13g(v109);
        result = (ZinIrHalH13g *)*((_QWORD *)this + 2);
        ++*((_DWORD *)this + 18);
        v111 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v111 >= *((_QWORD *)result + 3))
          break;
        *((_QWORD *)result + 4) = v111 + 1;
        *v111 = 10;
        v109 = (ZinIrHalH13g *)*((_QWORD *)v109 + 1);
        if (v109 == v107)
          goto LABEL_128;
      }
      result = llvm::raw_ostream::write(result, 10);
    }
  }
LABEL_128:
  *((_DWORD *)this + 36) -= 2;
  return result;
}

void mlir::FallbackAsmResourceMap::ResourceCollection::~ResourceCollection(mlir::FallbackAsmResourceMap::ResourceCollection *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = off_24C034808;
  v2 = (char *)*((_QWORD *)this + 4);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    do
    {
      v5 = &v2[v4];
      v6 = *(unsigned int *)&v2[v4 - 8];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_24C060EA8[v6])(&v7, v5 - 72);
      *((_DWORD *)v5 - 2) = -1;
      if (*(v5 - 73) < 0)
        operator delete(*((void **)v5 - 12));
      v4 -= 96;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 4);
  }
  if (v2 != (char *)this + 48)
    free(v2);
  *(_QWORD *)this = off_24C0342D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = off_24C034808;
  v2 = (char *)*((_QWORD *)this + 4);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    do
    {
      v5 = &v2[v4];
      v6 = *(unsigned int *)&v2[v4 - 8];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_24C060EA8[v6])(&v7, v5 - 72);
      *((_DWORD *)v5 - 2) = -1;
      if (*(v5 - 73) < 0)
        operator delete(*((void **)v5 - 12));
      v4 -= 96;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 4);
  }
  if (v2 != (char *)this + 48)
    free(v2);
  *(_QWORD *)this = off_24C0342D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  MEMORY[0x20BD002F8](this, 0x1093C40C1339079);
}

void *llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>::callback_fn<mlir::AsmParsedResourceEntry::parseAsBlob(void)::{lambda(unsigned long,unsigned long)#1}>@<X0>(size_t __sz@<X1>, std::align_val_t a2@<X2>, uint64_t a3@<X8>)
{
  void *result;

  result = llvm::allocate_buffer(__sz, a2);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = __sz;
  *(_QWORD *)(a3 + 16) = a2;
  *(_QWORD *)(a3 + 48) = (char *)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<void (*)(void *,unsigned long,unsigned long),void (*)(void *,unsigned long,unsigned long),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<void (*)(void *,unsigned long,unsigned long),void (*)(void *,unsigned long,unsigned long),void>::Callbacks
     + 2 >= 8)
    *(_QWORD *)(a3 + 24) = llvm::deallocate_buffer;
  *(_BYTE *)(a3 + 56) = 1;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallImpl<void (*)(void *,unsigned long,unsigned long)>(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallImpl<verifyOpAndAdjustFlags(mlir::Operation *,mlir::OpPrintingFlags)::$_0>(llvm *a1)
{
  uint64_t v1;

  v1 = **(_QWORD **)a1;
  return llvm::get_threadid(a1) == v1;
}

_QWORD *llvm::DenseMap<mlir::DistinctAttr,unsigned long long,llvm::DenseMapInfo<mlir::DistinctAttr,void>,llvm::detail::DenseMapPair<mlir::DistinctAttr,unsigned long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * v25);
          v26 = *v22;
          if (v23 != *v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v30 & v24));
              v26 = *v22;
              if (v23 == *v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *v22 = v23;
          v22[1] = *((_QWORD *)v16 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = result + 2;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      *v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[2 * v17];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _OWORD *buffer;
  _OWORD *v13;
  int v14;
  _OWORD *v15;
  unint64_t v16;
  char *v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  _QWORD *v27;

  if (*a3 == *a2
    || (v6 = (((uint64_t)(*a3 - *a2) >> 4) - 1) | ((unint64_t)(((uint64_t)(*a3 - *a2) >> 4) - 1) >> 1),
        v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        v9 = HIDWORD(v8) | v8,
        v9 - 4 > 0xFFFFFFFA)
    || (v10 = -__clz(v9) & 0x1F, v10 <= 2))
  {
    *(_QWORD *)a1 = 1;
    v13 = (_OWORD *)(a1 + 8);
    v15 = (_OWORD *)(a1 + 72);
    v16 = 48;
    v17 = "NSt3__110__function6__funcIZN23ZinMirGraphSplitterBase13SetNextTileIdEvE3$_0NS_9allocatorIS3_EEF11ZinIrStatusP"
          "17ZinIrOpLayerGraphP12ZinIrOpLayerEEE"
        + 22;
LABEL_10:
    v19 = (v16 >> 4) + 1;
    v18 = &v13[v19 & 0x1FFFFFFFFFFFFFFCLL];
    v20 = v13 + 2;
    v21 = *((_OWORD *)v17 + 190);
    v22 = v19 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v20 - 2) = v21;
      *(v20 - 1) = v21;
      *v20 = v21;
      v20[1] = v21;
      v20 += 4;
      v22 -= 4;
    }
    while (v22);
    if (v19 == (v19 & 0x1FFFFFFFFFFFFFFCLL))
      goto LABEL_15;
    goto LABEL_13;
  }
  v11 = (1 << v10);
  *(_DWORD *)a1 &= ~1u;
  buffer = llvm::allocate_buffer(16 * v11, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 8) = buffer;
  v13 = (_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  v14 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v14 & 1) != 0)
  {
    v15 = (_OWORD *)(a1 + 72);
    v16 = 48;
    v17 = "funcIZN23ZinMirGraphSplitterBase13SetNextTileIdEvE3$_0NS_9allocatorIS3_EEF11ZinIrStatusP17ZinIrOpLayerGraphP12ZinIrOpLayerEEE";
    goto LABEL_10;
  }
  v15 = &buffer[v11];
  v13 = buffer;
  v16 = 16 * v11 - 16;
  v17 = "NSt3__110__function6__funcIZN23ZinMirGraphSplitterBase13SetNextTileIdEvE3$_0NS_9allocatorIS3_EEF11ZinIrStatusP17"
        "ZinIrOpLayerGraphP12ZinIrOpLayerEEE"
      + 22;
  if (v16 >= 0x30)
    goto LABEL_10;
  v18 = buffer;
LABEL_13:
  v23 = *((_OWORD *)v17 + 190);
  do
    *v18++ = v23;
  while (v18 != v15);
LABEL_15:
  v24 = (_OWORD *)*a2;
  v25 = (_OWORD *)*a3;
  while (v24 != v25)
  {
    v27 = 0;
    if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(a1, (uint64_t)v24, &v27) & 1) == 0)*(_OWORD *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((_DWORD *)a1, (uint64_t)v24, (uint64_t)v24, v27) = *v24;
    ++v24;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  int HashValue;
  int v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  const void *v20;
  BOOL v21;
  int v22;
  uint64_t result;
  int v24;
  int v25;
  const void *v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  const void *v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  const void *v38;
  BOOL v39;
  int v40;
  void *__s1;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
    v8 = 3;
    v9 = *(void **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    if (!v10)
      goto LABEL_4;
LABEL_17:
    if (v9 == (void *)-2)
    {
      v11 = 0;
      v18 = 1;
      v19 = HashValue & v8;
      v14 = v5 + 16 * (HashValue & v8);
      v20 = *(const void **)v14;
      if (*(_QWORD *)v14 == -1)
        goto LABEL_22;
LABEL_19:
      if (v20 != (const void *)-2
        && (v10 != *(_QWORD *)(v14 + 8) || memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v20, v10)))
      {
LABEL_22:
        while (v20 != (const void *)-1)
        {
          if (v11)
            v21 = 0;
          else
            v21 = v20 == (const void *)-2;
          if (v21)
            v11 = v14;
          v22 = v18 + v19;
          ++v18;
          v19 = v22 & v8;
          v14 = v5 + 16 * (v22 & v8);
          v20 = *(const void **)v14;
          if (*(_QWORD *)v14 != -1)
            goto LABEL_19;
        }
        goto LABEL_68;
      }
    }
    else
    {
      if (v9 != (void *)-1)
      {
        __s1 = v9;
        v11 = 0;
        v36 = 1;
        v37 = HashValue & v8;
        v14 = v5 + 16 * (HashValue & v8);
        v38 = *(const void **)v14;
        if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_65;
        while (v38 != (const void *)-1)
        {
          if (v11)
            v39 = 0;
          else
            v39 = v38 == (const void *)-2;
          if (v39)
            v11 = v14;
          v40 = v36 + v37;
          ++v36;
          v37 = v40 & v8;
          v14 = v5 + 16 * (v40 & v8);
          v38 = *(const void **)v14;
          if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
          {
LABEL_65:
            if (v10 == *(_QWORD *)(v14 + 8) && !memcmp(__s1, v38, v10))
              goto LABEL_71;
          }
        }
        goto LABEL_68;
      }
      v11 = 0;
      v24 = 1;
      v25 = HashValue & v8;
      v14 = v5 + 16 * (HashValue & v8);
      v26 = *(const void **)v14;
      if (*(_QWORD *)v14 == -2)
        goto LABEL_36;
LABEL_33:
      if (v26 != (const void *)-1)
      {
        if (v10 != *(_QWORD *)(v14 + 8)
          || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
        {
LABEL_36:
          while (v26 != (const void *)-1)
          {
            if (v11)
              v29 = 0;
            else
              v29 = v26 == (const void *)-2;
            if (v29)
              v11 = v14;
            v30 = v24 + v25;
            ++v24;
            v25 = v30 & v8;
            v14 = v5 + 16 * (v30 & v8);
            v26 = *(const void **)v14;
            if (*(_QWORD *)v14 != -2)
              goto LABEL_33;
          }
          goto LABEL_68;
        }
      }
    }
    goto LABEL_71;
  }
  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    v14 = 0;
    result = 0;
    goto LABEL_72;
  }
  v5 = *(_QWORD *)(a1 + 8);
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v8 = v6 - 1;
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
    goto LABEL_17;
LABEL_4:
  if (v9 != (void *)-2)
  {
    v11 = 0;
    v31 = 1;
    v32 = HashValue & v8;
    v14 = v5 + 16 * (HashValue & v8);
    v33 = *(const void **)v14;
    if (*(_QWORD *)v14 == -2)
      goto LABEL_49;
LABEL_45:
    if (v33 == (const void *)-1)
    {
      if (v9 != (void *)-1)
      {
LABEL_49:
        while (v33 != (const void *)-1)
        {
          if (v11)
            v34 = 0;
          else
            v34 = v33 == (const void *)-2;
          if (v34)
            v11 = v14;
          v35 = v31 + v32;
          ++v31;
          v32 = v35 & v8;
          v14 = v5 + 16 * (v35 & v8);
          v33 = *(const void **)v14;
          if (*(_QWORD *)v14 != -2)
            goto LABEL_45;
        }
        goto LABEL_68;
      }
    }
    else if (*(_QWORD *)(v14 + 8))
    {
      goto LABEL_49;
    }
LABEL_71:
    result = 1;
    goto LABEL_72;
  }
  v11 = 0;
  v12 = 1;
  v13 = HashValue & v8;
  v14 = v5 + 16 * (HashValue & v8);
  v15 = *(const void **)v14;
  if (*(_QWORD *)v14 == -1)
    goto LABEL_8;
LABEL_6:
  if (v15 == (const void *)-2 || !*(_QWORD *)(v14 + 8))
    goto LABEL_71;
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11)
      v16 = 0;
    else
      v16 = v15 == (const void *)-2;
    if (v16)
      v11 = v14;
    v17 = v12 + v13;
    ++v12;
    v13 = v17 & v8;
    v14 = v5 + 16 * (v17 & v8);
    v15 = *(const void **)v14;
    if (*(_QWORD *)v14 != -1)
      goto LABEL_6;
  }
LABEL_68:
  result = 0;
  if (v11)
    v14 = v11;
LABEL_72:
  *a3 = v14;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(_DWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_10:
    llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow((uint64_t)a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)a1, a3, &v9);
    a4 = v9;
    *a1 += 2;
    if (*a4 == -1)
      return a4;
    goto LABEL_7;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
    goto LABEL_10;
  *a1 += 2;
  if (*a4 != -1)
LABEL_7:
    --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  _OWORD *v7;
  uint64_t v8;
  llvm *v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *buffer;
  int v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 *v34;
  llvm *v35;
  __int128 *v36;
  __int128 v37;
  _QWORD v38[8];

  v2 = result;
  v38[7] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v7 = (_OWORD *)(result + 8);
    v6 = *(llvm **)(result + 8);
    v8 = *(unsigned int *)(result + 16);
    if (a2 > 4)
    {
      v25 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 8) = buffer;
      *(_QWORD *)(v2 + 16) = v25;
      v27 = *(_DWORD *)v2;
      v9 = (llvm *)((char *)v6 + 16 * v8);
      *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
      if ((v27 & 1) != 0)
      {
        v10 = (_OWORD *)(v2 + 72);
        v11 = 48;
      }
      else
      {
        v10 = &buffer[v25];
        v7 = buffer;
        v11 = 16 * v25 - 16;
        if (v11 < 0x30)
        {
          v29 = buffer;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v9 = (llvm *)((char *)v6 + 16 * v8);
      *(_QWORD *)result = 1;
      v10 = (_OWORD *)(result + 72);
      v11 = 48;
    }
    v28 = (v11 >> 4) + 1;
    v29 = &v7[v28 & 0x1FFFFFFFFFFFFFFCLL];
    v30 = v7 + 2;
    v31 = v28 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v30 - 2) = xmmword_207A9BBE0;
      *(v30 - 1) = xmmword_207A9BBE0;
      *v30 = xmmword_207A9BBE0;
      v30[1] = xmmword_207A9BBE0;
      v30 += 4;
      v31 -= 4;
    }
    while (v31);
    if (v28 == (v28 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      if ((_DWORD)v8)
      {
        v35 = v6;
        do
        {
          if (*(_QWORD *)v35 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            *(_QWORD *)&v37 = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(v2, (uint64_t)v35, &v37);
            *(_OWORD *)v37 = *(_OWORD *)v35;
            *(_DWORD *)v2 += 2;
          }
          v35 = (llvm *)((char *)v35 + 16);
        }
        while (v35 != v9);
      }
      llvm::deallocate_buffer(v6, (void *)(16 * v8));
    }
    do
LABEL_41:
      *v29++ = xmmword_207A9BBE0;
    while (v29 != v10);
    goto LABEL_42;
  }
  v12 = (_OWORD *)(result + 8);
  v13 = &v37;
  if (*(_QWORD *)(result + 8) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v37 = *v12;
    v13 = (__int128 *)v38;
    v14 = (__int128 *)(result + 24);
    if (*(_QWORD *)(result + 24) > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_10:
      v15 = (__int128 *)(result + 40);
      if (*(_QWORD *)(result + 40) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_11;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = (__int128 *)(result + 24);
    if (*(_QWORD *)(result + 24) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_10;
  }
  *v13++ = *v14;
  v15 = (__int128 *)(result + 40);
  if (*(_QWORD *)(result + 40) > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_11:
    v16 = (__int128 *)(result + 56);
    if (*(_QWORD *)(result + 56) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  *v13++ = *v15;
  v16 = (__int128 *)(result + 56);
  if (*(_QWORD *)(result + 56) > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_12:
    v17 = *(_DWORD *)result;
    if (a2 < 5)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  *v13++ = *v16;
  v17 = *(_DWORD *)result;
  if (a2 < 5)
  {
LABEL_13:
    *(_QWORD *)result = v17 & 1;
    if ((v17 & 1) == 0)
      goto LABEL_14;
LABEL_31:
    v19 = (char *)(v2 + 72);
    v20 = 48;
    goto LABEL_16;
  }
LABEL_30:
  *(_DWORD *)result = v17 & 0xFFFFFFFE;
  v32 = a2;
  result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(_QWORD *)(v2 + 8) = result;
  *(_QWORD *)(v2 + 16) = v32;
  v33 = *(_DWORD *)v2;
  *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
  if ((v33 & 1) != 0)
    goto LABEL_31;
LABEL_14:
  v18 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v18)
    goto LABEL_34;
  v12 = *(_OWORD **)(v2 + 8);
  v19 = (char *)&v12[v18];
  v20 = v19 - (char *)v12 - 16;
  if (v20 < 0x30)
  {
    v22 = *(char **)(v2 + 8);
    do
    {
LABEL_33:
      *(_OWORD *)v22 = xmmword_207A9BBE0;
      v22 += 16;
    }
    while (v22 != v19);
    goto LABEL_34;
  }
LABEL_16:
  v21 = (v20 >> 4) + 1;
  v22 = (char *)&v12[v21 & 0x1FFFFFFFFFFFFFFCLL];
  v23 = v12 + 2;
  v24 = v21 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    *(v23 - 2) = xmmword_207A9BBE0;
    *(v23 - 1) = xmmword_207A9BBE0;
    *v23 = xmmword_207A9BBE0;
    v23[1] = xmmword_207A9BBE0;
    v23 += 4;
    v24 -= 4;
  }
  while (v24);
  if (v21 != (v21 & 0x1FFFFFFFFFFFFFFCLL))
    goto LABEL_33;
LABEL_34:
  if (&v37 != v13)
  {
    v34 = &v37;
    do
    {
      if (*(_QWORD *)v34 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v36 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(v2, (uint64_t)v34, &v36);
        *v36 = *v34;
        *(_DWORD *)v2 += 2;
      }
      ++v34;
    }
    while (v34 != v13);
  }
  return result;
}

void llvm::toHex(size_t __len@<X1>, unsigned __int8 *a2@<X0>, int a3@<W2>, _QWORD *a4@<X8>)
{
  size_t v5;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *__src;
  __int128 v18;
  _QWORD v19[3];

  v5 = __len;
  v19[2] = *MEMORY[0x24BDAC8D0];
  __src = v19;
  v18 = xmmword_207AB84C0;
  v8 = 2 * __len;
  if (2 * __len)
  {
    if (v8 >= 0x11)
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v19, v8, 1);
    *(_QWORD *)&v18 = v8;
  }
  if (v5)
  {
    v9 = 0;
    if (a3)
      v10 = 32;
    else
      v10 = 0;
    do
    {
      v11 = *a2++;
      *((_BYTE *)__src + v9) = llvm::hexdigit(unsigned int,BOOL)::LUT[(unint64_t)v11 >> 4] | v10;
      *((_BYTE *)__src + v9 + 1) = llvm::hexdigit(unsigned int,BOOL)::LUT[v11 & 0xF] | v10;
      v9 += 2;
      --v5;
    }
    while (v5);
    v5 = v18;
  }
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = __src;
  if (v5 >= 0x17)
  {
    v14 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v14 = v5 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    a4[1] = v5;
    a4[2] = v15 | 0x8000000000000000;
    *a4 = v16;
    a4 = v16;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v5;
    if (!v5)
    {
      *(_BYTE *)a4 = 0;
      v13 = __src;
      if (__src == v19)
        return;
      goto LABEL_15;
    }
  }
  memmove(a4, v12, v5);
  *((_BYTE *)a4 + v5) = 0;
  v13 = __src;
  if (__src != v19)
LABEL_15:
    free(v13);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &unk_254519000;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &unk_254519000;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = (_QWORD *)&unk_254519000;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[373] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 24 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
LABEL_5:
      *a3 = v13;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printOptionalLocationSpecifier(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;

  if ((*((_BYTE *)result + 64) & 1) != 0)
  {
    v2 = a2;
    v3 = (char *)result + 16;
    v4 = (llvm::raw_ostream *)*((_QWORD *)result + 2);
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
    if (*((_BYTE **)v4 + 3) == v5)
    {
      llvm::raw_ostream::write(v4, " ", 1uLL);
      v6 = (uint64_t)v3;
      a2 = v2;
    }
    else
    {
      *v5 = 32;
      ++*((_QWORD *)v4 + 4);
      v6 = (uint64_t)v3;
    }
    return mlir::AsmPrinter::Impl::printLocation(v6, a2, 1);
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printNewline(_anonymous_namespace_::OperationPrinter *this)
{
  llvm::raw_ostream *v2;
  _BYTE *v3;

  v2 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 18);
  v3 = (_BYTE *)*((_QWORD *)v2 + 4);
  if ((unint64_t)v3 >= *((_QWORD *)v2 + 3))
  {
    llvm::raw_ostream::write(v2, 10);
  }
  else
  {
    *((_QWORD *)v2 + 4) = v3 + 1;
    *v3 = 10;
  }
  return llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
}

uint64_t `anonymous namespace'::OperationPrinter::increaseIndent(uint64_t this)
{
  *(_DWORD *)(this + 144) += 2;
  return this;
}

uint64_t `anonymous namespace'::OperationPrinter::decreaseIndent(uint64_t this)
{
  *(_DWORD *)(this + 144) -= 2;
  return this;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printRegionArgument(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  llvm::raw_ostream *v10;
  _BYTE *v11;
  _WORD *v12;
  uint64_t **v13;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *result;
  llvm::raw_ostream **v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _DWORD *v22;
  _BYTE *v23;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
  if ((a5 & 1) != 0)
    goto LABEL_10;
  v11 = a1 + 16;
  v10 = (llvm::raw_ostream *)*((_QWORD *)a1 + 2);
  v12 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v12 <= 1uLL)
  {
    llvm::raw_ostream::write(v10, ": ", 2uLL);
    v13 = (uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v13)
      goto LABEL_4;
LABEL_7:
    v14 = *(llvm::raw_ostream **)v11;
    v15 = *(void **)(*(_QWORD *)v11 + 32);
    if (*(_QWORD *)(*(_QWORD *)v11 + 24) - (_QWORD)v15 > 0xCuLL)
    {
      qmemcpy(v15, "<<NULL TYPE>>", 13);
      *((_QWORD *)v14 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v14, "<<NULL TYPE>>", 0xDuLL);
    }
    goto LABEL_10;
  }
  *v12 = 8250;
  *((_QWORD *)v10 + 4) += 2;
  v13 = (uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13)
    goto LABEL_7;
LABEL_4:
  if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)(a1 + 16), (uint64_t)v13))
    mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)(a1 + 16), v13);
LABEL_10:
  result = (llvm::raw_ostream *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 192))(a1, a3, a4, 0, 0);
  if ((a1[64] & 1) == 0)
    return result;
  v17 = (llvm::raw_ostream **)(a1 + 16);
  v18 = *(_QWORD *)(a2 + 32);
  v19 = (llvm::raw_ostream *)*((_QWORD *)a1 + 2);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if (*((_BYTE **)v19 + 3) == v20)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
    if ((a1[64] & 2) == 0)
      goto LABEL_13;
    return mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)(a1 + 16), v18, 1, 1);
  }
  *v20 = 32;
  ++*((_QWORD *)v19 + 4);
  if ((a1[64] & 2) != 0)
    return mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)(a1 + 16), v18, 1, 1);
LABEL_13:
  v21 = *v17;
  v22 = (_DWORD *)*((_QWORD *)*v17 + 4);
  if (*((_QWORD *)*v17 + 3) - (_QWORD)v22 > 3uLL)
  {
    *v22 = 677605228;
    *((_QWORD *)v21 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v21, "loc(", 4uLL);
  }
  mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)(a1 + 16), v18, 0, 1);
  result = *v17;
  v23 = (_BYTE *)*((_QWORD *)*v17 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)*v17 + 3))
    return llvm::raw_ostream::write(result, 41);
  *((_QWORD *)result + 4) = v23 + 1;
  *v23 = 41;
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printOperand(uint64_t a1, unint64_t a2)
{
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printOperand(uint64_t a1, unint64_t a2, llvm::raw_ostream *a3)
{
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printSuccessor(_anonymous_namespace_::OperationPrinter *this, mlir::Block *a2)
{
  llvm::raw_ostream *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  mlir::Block *v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  size_t v14;
  void *v15;
  _QWORD *v16;

  result = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 376);
  v6 = *(unsigned int *)(v4 + 392);
  if ((_DWORD)v6)
  {
    v7 = v6 - 1;
    v8 = v5 + 32 * (((_DWORD)v6 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
    v9 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2)
      goto LABEL_8;
    v10 = 1;
    LODWORD(v11) = v7 & ((a2 >> 4) ^ (a2 >> 9));
    while (v9 != (mlir::Block *)-4096)
    {
      v12 = v11 + v10++;
      v11 = v12 & v7;
      v9 = *(mlir::Block **)(v5 + 32 * v11);
      if (v9 == a2)
      {
        v8 = v5 + 32 * v11;
        goto LABEL_8;
      }
    }
  }
  v8 = v5 + 32 * v6;
LABEL_8:
  if (v8 == v5 + 32 * v6)
  {
    v16 = (_QWORD *)((char *)result + 32);
    v15 = (void *)*((_QWORD *)result + 4);
    v13 = "INVALIDBLOCK";
    v14 = 12;
    if (*((_QWORD *)result + 3) - (_QWORD)v15 > 0xBuLL)
      goto LABEL_14;
    return llvm::raw_ostream::write(result, v13, v14);
  }
  v13 = *(const char **)(v8 + 16);
  v14 = *(_QWORD *)(v8 + 24);
  v16 = (_QWORD *)((char *)result + 32);
  v15 = (void *)*((_QWORD *)result + 4);
  if (v14 > *((_QWORD *)result + 3) - (_QWORD)v15)
    return llvm::raw_ostream::write(result, v13, v14);
  if (v14)
  {
LABEL_14:
    result = (llvm::raw_ostream *)memcpy(v15, v13, v14);
    *v16 += v14;
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printSuccessorAndUseList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  const char *v19;
  size_t v20;
  void *v21;
  _QWORD *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  unint64_t v26;
  uint64_t v27;
  _WORD *v28;
  unint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  void *v38;
  _BYTE *v39;
  _WORD *v40;
  uint64_t **v41;
  uint64_t v42;
  llvm::raw_ostream *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  result = *(llvm::raw_ostream **)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = a1 + 16;
  v11 = *(_QWORD *)(v9 + 376);
  v12 = *(unsigned int *)(v9 + 392);
  if ((_DWORD)v12)
  {
    v13 = v12 - 1;
    v14 = (uint64_t *)(v11 + 32 * (((_DWORD)v12 - 1) & ((a2 >> 4) ^ (a2 >> 9))));
    v15 = *v14;
    if (*v14 == a2)
      goto LABEL_8;
    v16 = 1;
    LODWORD(v17) = v13 & ((a2 >> 4) ^ (a2 >> 9));
    while (v15 != -4096)
    {
      v18 = v17 + v16++;
      v17 = v18 & v13;
      v15 = *(_QWORD *)(v11 + 32 * v17);
      if (v15 == a2)
      {
        v14 = (uint64_t *)(v11 + 32 * v17);
        goto LABEL_8;
      }
    }
  }
  v14 = (uint64_t *)(v11 + 32 * v12);
LABEL_8:
  if (v14 == (uint64_t *)(v11 + 32 * v12))
  {
    v22 = (_QWORD *)((char *)result + 32);
    v21 = (void *)*((_QWORD *)result + 4);
    v19 = "INVALIDBLOCK";
    v20 = 12;
    if (*((_QWORD *)result + 3) - (_QWORD)v21 > 0xBuLL)
      goto LABEL_16;
LABEL_13:
    result = llvm::raw_ostream::write(result, v19, v20);
    goto LABEL_14;
  }
  v19 = (const char *)v14[2];
  v20 = v14[3];
  v22 = (_QWORD *)((char *)result + 32);
  v21 = (void *)*((_QWORD *)result + 4);
  if (v20 > *((_QWORD *)result + 3) - (_QWORD)v21)
    goto LABEL_13;
  if (!v20)
  {
LABEL_14:
    if (!a4)
      return result;
    goto LABEL_17;
  }
LABEL_16:
  result = (llvm::raw_ostream *)memcpy(v21, v19, v20);
  *v22 += v20;
  if (!a4)
    return result;
LABEL_17:
  v23 = *(llvm::raw_ostream **)v10;
  v24 = *(_BYTE **)(*(_QWORD *)v10 + 32);
  if ((unint64_t)v24 >= *(_QWORD *)(*(_QWORD *)v10 + 24))
  {
    llvm::raw_ostream::write(v23, 40);
  }
  else
  {
    *((_QWORD *)v23 + 4) = v24 + 1;
    *v24 = 40;
  }
  v25 = *(llvm::raw_ostream **)(a1 + 16);
  v45 = a3;
  v46 = 0;
  v26 = mlir::ValueRange::dereference_iterator(&v45, 0);
  v27 = ++v46;
  if (v45 != a3 || v27 != a4)
  {
    do
    {
      v28 = (_WORD *)*((_QWORD *)v25 + 4);
      if (*((_QWORD *)v25 + 3) - (_QWORD)v28 > 1uLL)
      {
        *v28 = 8236;
        *((_QWORD *)v25 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v25, ", ", 2uLL);
      }
      v29 = mlir::ValueRange::dereference_iterator(&v45, v46);
      v30 = ++v46;
    }
    while (v45 != a3 || v30 != a4);
  }
  v31 = *(llvm::raw_ostream **)v10;
  v32 = *(_QWORD *)(*(_QWORD *)v10 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v10 + 24) - v32) > 2)
  {
    *(_BYTE *)(v32 + 2) = 32;
    *(_WORD *)v32 = 14880;
    *((_QWORD *)v31 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v31, " : ", 3uLL);
  }
  v33 = *(llvm::raw_ostream **)v10;
  v45 = a3;
  v46 = 0;
  v34 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v45, 0) + 8);
  v35 = (uint64_t **)(v34 & 0xFFFFFFFFFFFFFFF8);
  if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    if (!mlir::AsmPrinter::Impl::printAlias(v10, v34 & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::AsmPrinter::Impl::printTypeImpl(v10, v35);
      v36 = ++v46;
      if (v45 != a3)
      {
        while (1)
        {
LABEL_43:
          while (1)
          {
            v40 = (_WORD *)*((_QWORD *)v33 + 4);
            if (*((_QWORD *)v33 + 3) - (_QWORD)v40 <= 1uLL)
              break;
            *v40 = 8236;
            *((_QWORD *)v33 + 4) += 2;
            v41 = (uint64_t **)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v45, v46) + 8) & 0xFFFFFFFFFFFFFFF8);
            if (v41)
              goto LABEL_45;
LABEL_50:
            v43 = *(llvm::raw_ostream **)v10;
            v44 = *(void **)(*(_QWORD *)v10 + 32);
            if (*(_QWORD *)(*(_QWORD *)v10 + 24) - (_QWORD)v44 > 0xCuLL)
            {
              qmemcpy(v44, "<<NULL TYPE>>", 13);
              *((_QWORD *)v43 + 4) += 13;
              v42 = ++v46;
              if (v45 == a3)
                goto LABEL_47;
            }
            else
            {
              llvm::raw_ostream::write(v43, "<<NULL TYPE>>", 0xDuLL);
              v42 = ++v46;
              if (v45 == a3)
                goto LABEL_47;
            }
          }
          llvm::raw_ostream::write(v33, ", ", 2uLL);
          v41 = (uint64_t **)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v45, v46) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v41)
            goto LABEL_50;
LABEL_45:
          if (mlir::AsmPrinter::Impl::printAlias(v10, (uint64_t)v41))
          {
            v42 = ++v46;
            if (v45 == a3)
            {
LABEL_47:
              if (v42 == a4)
                goto LABEL_38;
            }
          }
          else
          {
            mlir::AsmPrinter::Impl::printTypeImpl(v10, v41);
            v42 = ++v46;
            if (v45 == a3)
              goto LABEL_47;
          }
        }
      }
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v37 = *(llvm::raw_ostream **)v10;
  v38 = *(void **)(*(_QWORD *)v10 + 32);
  if (*(_QWORD *)(*(_QWORD *)v10 + 24) - (_QWORD)v38 <= 0xCuLL)
  {
    llvm::raw_ostream::write(v37, "<<NULL TYPE>>", 0xDuLL);
LABEL_36:
    v36 = ++v46;
    if (v45 != a3)
      goto LABEL_43;
    goto LABEL_37;
  }
  qmemcpy(v38, "<<NULL TYPE>>", 13);
  *((_QWORD *)v37 + 4) += 13;
  v36 = ++v46;
  if (v45 != a3)
    goto LABEL_43;
LABEL_37:
  if (v36 != a4)
    goto LABEL_43;
LABEL_38:
  result = *(llvm::raw_ostream **)v10;
  v39 = *(_BYTE **)(*(_QWORD *)v10 + 32);
  if ((unint64_t)v39 >= *(_QWORD *)(*(_QWORD *)v10 + 24))
    return llvm::raw_ostream::write(result, 41);
  *((_QWORD *)result + 4) = v39 + 1;
  *v39 = 41;
  return result;
}

uint64_t `anonymous namespace'::OperationPrinter::printOptionalAttrDict(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::AsmPrinter::Impl::printOptionalAttrDict(a1 + 16, a2, a3, a4, a5, 0);
}

uint64_t `anonymous namespace'::OperationPrinter::printOptionalAttrDictWithKeyword(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::AsmPrinter::Impl::printOptionalAttrDict(a1 + 16, a2, a3, a4, a5, 1);
}

uint64_t `anonymous namespace'::OperationPrinter::printCustomOrGenericOp(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t Values;
  uint64_t AttrData;
  unint64_t v9;
  char *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int64x2_t v17;
  int8x16_t *v18;
  int64x2_t v19;
  unint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  int8x16_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  int8x16_t v41;
  uint32x4_t v42;
  int64x2_t v43;
  int64x2_t v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  unint64_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int8x8_t *v55;
  unint64_t v56;
  int8x16_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int8x8_t v60;
  uint16x8_t v61;
  uint32x4_t v62;
  int8x16_t v63;
  int64x2_t v64;
  int64x2_t v65;
  uint32x4_t v66;
  int64x2_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  int v70;
  uint64_t v71;
  int v72;
  void *v73;
  std::string *v74;
  std::string::size_type size;
  std::string::size_type v76;
  uint64_t v77;
  void *v78;
  llvm **v79;
  char v80;
  llvm **v81;
  _QWORD v82[4];
  __int16 v83;
  std::string v84;
  llvm *v85[2];
  unint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)this + 64) & 4) != 0)
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(_QWORD *)this + 216))(this, a2, 1);
  v4 = *((_QWORD *)a2 + 6);
  if (*(_UNKNOWN **)(v4 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v5 = *((_QWORD *)this + 10) + 16 * *((unsigned int *)this + 22);
    return (*(uint64_t (**)(uint64_t, mlir::Operation *, _anonymous_namespace_::OperationPrinter *, _QWORD, _QWORD))(*(_QWORD *)v4 + 56))(v4, a2, this, *(_QWORD *)(v5 - 16), *(_QWORD *)(v5 - 8));
  }
  v82[0] = *(_QWORD *)(v4 + 8);
  Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
  if (!Values)
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(_QWORD *)this + 216))(this, a2, 1);
  (*(void (**)(llvm **__return_ptr, uint64_t, mlir::Operation *))(*(_QWORD *)Values + 72))(v85, Values, a2);
  if (v86 < 8)
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(_QWORD *)this + 216))(this, a2, 1);
  v82[0] = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v82);
  if (v9)
  {
    v10 = (char *)AttrData;
    v11 = v9;
    if (v9 < 8)
    {
      v12 = 0;
      v13 = 0;
      goto LABEL_20;
    }
    if (v9 >= 0x20)
    {
      v14 = 0uLL;
      v15.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
      v15.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
      v16 = (int8x16_t)vdupq_n_s64(1uLL);
      v12 = v9 & 0xFFFFFFFFFFFFFFE0;
      v17 = 0uLL;
      v18 = (int8x16_t *)(AttrData + 16);
      v19 = 0uLL;
      v20 = v9 & 0xFFFFFFFFFFFFFFE0;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      v31 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      do
      {
        v34 = (uint8x16_t)vceqq_s8(v18[-1], v15);
        v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
        v36 = vmovl_high_u8(v34);
        v37 = vmovl_high_u16(v36);
        v38.i64[0] = v37.u32[2];
        v38.i64[1] = v37.u32[3];
        v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v38, v16));
        v39 = vmovl_high_u16(v35);
        v40 = vmovl_u16(*(uint16x4_t *)v36.i8);
        v38.i64[0] = v37.u32[0];
        v38.i64[1] = v37.u32[1];
        v24 = vaddq_s64(v24, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v40.u32[2];
        v38.i64[1] = v40.u32[3];
        v23 = vaddq_s64(v23, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v39.u32[2];
        v38.i64[1] = v39.u32[3];
        v21 = vaddq_s64(v21, (int64x2_t)vandq_s8(v38, v16));
        v41 = *v18;
        v18 += 2;
        v42 = vmovl_u16(*(uint16x4_t *)v35.i8);
        v38.i64[0] = v40.u32[0];
        v38.i64[1] = v40.u32[1];
        v22 = vaddq_s64(v22, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v42.u32[0];
        v38.i64[1] = v42.u32[1];
        v43 = (int64x2_t)vandq_s8(v38, v16);
        v38.i64[0] = v42.u32[2];
        v38.i64[1] = v42.u32[3];
        v44 = (int64x2_t)vandq_s8(v38, v16);
        v38.i64[0] = v39.u32[0];
        v38.i64[1] = v39.u32[1];
        v45 = (uint8x16_t)vceqq_s8(v41, v15);
        v19 = vaddq_s64(v19, (int64x2_t)vandq_s8(v38, v16));
        v46 = vmovl_u8(*(uint8x8_t *)v45.i8);
        v47 = vmovl_high_u8(v45);
        v17 = vaddq_s64(v17, v44);
        v48 = vmovl_high_u16(v47);
        v14 = vaddq_s64(v14, v43);
        v38.i64[0] = v48.u32[2];
        v38.i64[1] = v48.u32[3];
        v33 = vaddq_s64(v33, (int64x2_t)vandq_s8(v38, v16));
        v49 = vmovl_high_u16(v46);
        v50 = vmovl_u16(*(uint16x4_t *)v47.i8);
        v38.i64[0] = v48.u32[0];
        v38.i64[1] = v48.u32[1];
        v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v50.u32[2];
        v38.i64[1] = v50.u32[3];
        v31 = vaddq_s64(v31, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v49.u32[2];
        v38.i64[1] = v49.u32[3];
        v29 = vaddq_s64(v29, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v50.u32[0];
        v38.i64[1] = v50.u32[1];
        v30 = vaddq_s64(v30, (int64x2_t)vandq_s8(v38, v16));
        v51 = vmovl_u16(*(uint16x4_t *)v46.i8);
        v38.i64[0] = v49.u32[0];
        v38.i64[1] = v49.u32[1];
        v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v51.u32[2];
        v38.i64[1] = v51.u32[3];
        v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v51.u32[0];
        v38.i64[1] = v51.u32[1];
        v26 = vaddq_s64(v26, (int64x2_t)vandq_s8(v38, v16));
        v20 -= 32;
      }
      while (v20);
      v13 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v26, v14), vaddq_s64(v30, v22)), vaddq_s64(vaddq_s64(v28, v19), vaddq_s64(v32, v24))), vaddq_s64(vaddq_s64(vaddq_s64(v27, v17), vaddq_s64(v31, v23)), vaddq_s64(vaddq_s64(v29, v21), vaddq_s64(v33, v25)))));
      if (v9 == v12)
        goto LABEL_24;
      if ((v9 & 0x18) == 0)
        goto LABEL_20;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v52 = v12;
    v12 = v9 & 0xFFFFFFFFFFFFFFF8;
    v53 = 0uLL;
    v54 = (int64x2_t)(unint64_t)v13;
    v55 = (int8x8_t *)(AttrData + v52);
    v56 = v52 - (v9 & 0xFFFFFFFFFFFFFFF8);
    v57 = (int8x16_t)vdupq_n_s64(1uLL);
    v58 = 0uLL;
    v59 = 0uLL;
    do
    {
      v60 = *v55++;
      v61 = vmovl_u8((uint8x8_t)vceq_s8(v60, (int8x8_t)0x2E2E2E2E2E2E2E2ELL));
      v62 = vmovl_u16(*(uint16x4_t *)v61.i8);
      v63.i64[0] = v62.u32[0];
      v63.i64[1] = v62.u32[1];
      v64 = (int64x2_t)vandq_s8(v63, v57);
      v63.i64[0] = v62.u32[2];
      v63.i64[1] = v62.u32[3];
      v65 = (int64x2_t)vandq_s8(v63, v57);
      v66 = vmovl_high_u16(v61);
      v63.i64[0] = v66.u32[0];
      v63.i64[1] = v66.u32[1];
      v67 = (int64x2_t)vandq_s8(v63, v57);
      v63.i64[0] = v66.u32[2];
      v63.i64[1] = v66.u32[3];
      v59 = vaddq_s64(v59, (int64x2_t)vandq_s8(v63, v57));
      v58 = vaddq_s64(v58, v67);
      v53 = vaddq_s64(v53, v65);
      v54 = vaddq_s64(v54, v64);
      v56 += 8;
    }
    while (v56);
    v13 = vaddvq_s64(vaddq_s64(vaddq_s64(v54, v58), vaddq_s64(v53, v59)));
    if (v9 != v12)
    {
LABEL_20:
      v68 = v9 - v12;
      v69 = (unsigned __int8 *)(AttrData + v12);
      do
      {
        v70 = *v69++;
        if (v70 == 46)
          ++v13;
        --v68;
      }
      while (v68);
    }
LABEL_24:
    if (v13 == 1)
    {
      v71 = *((_QWORD *)this + 10) + 16 * *((unsigned int *)this + 22);
      v83 = 773;
      v82[0] = *(_QWORD *)(v71 - 16);
      v82[1] = *(_QWORD *)(v71 - 8);
      v82[2] = ".";
      llvm::Twine::str((llvm::Twine *)v82, &v84);
      v72 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
      v73 = (void *)v84.__r_.__value_.__r.__words[0];
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v84;
      else
        v74 = (std::string *)v84.__r_.__value_.__r.__words[0];
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
      else
        size = v84.__r_.__value_.__l.__size_;
      if (v11 >= size && (!size || !memcmp(v10, v74, size)))
      {
        if (v11 >= size)
          v76 = size;
        else
          v76 = v11;
        v10 += v76;
        v11 -= v76;
      }
      if (v72 < 0)
        operator delete(v73);
    }
    v77 = *((_QWORD *)this + 2);
    v78 = *(void **)(v77 + 32);
    if (v11 <= *(_QWORD *)(v77 + 24) - (_QWORD)v78)
    {
      if (v11)
      {
        memcpy(v78, v10, v11);
        *(_QWORD *)(v77 + 32) += v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 2), v10, v11);
    }
  }
  if ((v86 & 2) != 0)
    v79 = v85;
  else
    v79 = (llvm **)v85[0];
  result = (*(uint64_t (**)(llvm **, mlir::Operation *, _anonymous_namespace_::OperationPrinter *))(v86 & 0xFFFFFFFFFFFFFFF8))(v79, a2, this);
  v80 = v86;
  if (v86 >= 8)
  {
    if ((v86 & 4) != 0)
    {
      if ((v86 & 2) != 0)
        v81 = v85;
      else
        v81 = (llvm **)v85[0];
      result = (*(uint64_t (**)(llvm **))((v86 & 0xFFFFFFFFFFFFFFF8) + 16))(v81);
    }
    if ((v80 & 2) == 0)
      llvm::deallocate_buffer(v85[0], v85[1]);
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printGenericOp(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2, int a3)
{
  llvm::raw_ostream *AttrData;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream **v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _WORD *v38;
  const char *v39;
  size_t v40;
  void *v41;
  _QWORD *v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  uint64_t PropertiesAsAttribute;
  uint64_t **v46;
  llvm::raw_ostream *v47;
  _WORD *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  _WORD *v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  llvm::raw_ostream *v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  uint64_t Value;
  uint64_t v60;
  llvm::raw_ostream *v61;
  uint64_t v62;
  uint64_t i;
  const char *v65;
  size_t v66;
  _WORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  void *v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  _WORD *v84;
  unint64_t v85;
  uint64_t v86;

  if (a3)
  {
    v85 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8);
    AttrData = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v85);
    v7 = v6;
    v8 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (*((_BYTE **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "\"", 1uLL);
    }
    else
    {
      *v9 = 34;
      ++*((_QWORD *)v8 + 4);
    }
    llvm::printEscapedString(AttrData, v7, *((llvm::raw_ostream **)this + 2));
    v10 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if (*((_BYTE **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, "\"", 1uLL);
      v13 = (llvm::raw_ostream **)((char *)this + 16);
      v12 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
      v14 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v14 < *((_QWORD *)v12 + 3))
        goto LABEL_8;
LABEL_10:
      llvm::raw_ostream::write(v12, 40);
      goto LABEL_11;
    }
    *v11 = 34;
    ++*((_QWORD *)v10 + 4);
  }
  v13 = (llvm::raw_ostream **)((char *)this + 16);
  v12 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v14 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v12 + 3))
    goto LABEL_10;
LABEL_8:
  *((_QWORD *)v12 + 4) = v14 + 1;
  *v14 = 40;
LABEL_11:
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v15 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v15)
    {
      v16 = *((_QWORD *)a2 + 9);
      v17 = *v13;
      if ((_DWORD)v15 != 1)
      {
        v35 = v15 - 1;
        v36 = (unint64_t *)(v16 + 56);
        do
        {
          v38 = (_WORD *)*((_QWORD *)v17 + 4);
          if (*((_QWORD *)v17 + 3) - (_QWORD)v38 > 1uLL)
          {
            *v38 = 8236;
            *((_QWORD *)v17 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v17, ", ", 2uLL);
          }
          v37 = *v36;
          v36 += 4;
          --v35;
        }
        while (v35);
      }
    }
  }
  v18 = *v13;
  v19 = (_BYTE *)*((_QWORD *)*v13 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)*v13 + 3))
  {
    llvm::raw_ostream::write(v18, 41);
    if (!*((_DWORD *)a2 + 10))
      goto LABEL_45;
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 41;
    if (!*((_DWORD *)a2 + 10))
      goto LABEL_45;
  }
  v20 = *v13;
  v21 = (_BYTE *)*((_QWORD *)*v13 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)*v13 + 3))
  {
    llvm::raw_ostream::write(v20, 91);
    mlir::SuccessorRange::SuccessorRange(&v85, a2);
    v22 = v86;
    if (!v86)
      goto LABEL_43;
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 91;
    mlir::SuccessorRange::SuccessorRange(&v85, a2);
    v22 = v86;
    if (!v86)
      goto LABEL_43;
  }
  v23 = v85;
  v24 = *v13;
  v25 = *((_QWORD *)this + 3);
  v26 = *(_QWORD *)(v25 + 376);
  v27 = *(unsigned int *)(v25 + 392);
  if ((_DWORD)v27)
  {
    v28 = *(_QWORD *)(v85 + 24);
    v29 = v27 - 1;
    v30 = (uint64_t *)(v26 + 32 * (((_DWORD)v27 - 1) & ((v28 >> 4) ^ (v28 >> 9))));
    v31 = *v30;
    if (*v30 == v28)
      goto LABEL_34;
    v32 = 1;
    LODWORD(v33) = v29 & ((v28 >> 4) ^ (v28 >> 9));
    while (v31 != -4096)
    {
      v34 = v33 + v32++;
      v33 = v34 & v29;
      v31 = *(_QWORD *)(v26 + 32 * v33);
      if (v31 == v28)
      {
        v30 = (uint64_t *)(v26 + 32 * v33);
        goto LABEL_34;
      }
    }
  }
  v30 = (uint64_t *)(v26 + 32 * v27);
LABEL_34:
  if (v30 == (uint64_t *)(v26 + 32 * v27))
  {
    v42 = (_QWORD *)((char *)v24 + 32);
    v41 = (void *)*((_QWORD *)v24 + 4);
    v39 = "INVALIDBLOCK";
    v40 = 12;
    if (*((_QWORD *)v24 + 3) - (_QWORD)v41 > 0xBuLL)
      goto LABEL_42;
LABEL_39:
    llvm::raw_ostream::write(*v13, v39, v40);
    goto LABEL_40;
  }
  v39 = (const char *)v30[2];
  v40 = v30[3];
  v42 = (_QWORD *)((char *)v24 + 32);
  v41 = (void *)*((_QWORD *)v24 + 4);
  if (v40 > *((_QWORD *)v24 + 3) - (_QWORD)v41)
    goto LABEL_39;
  if (!v40)
  {
LABEL_40:
    if (v22 != 1)
      goto LABEL_70;
    goto LABEL_43;
  }
LABEL_42:
  memcpy(v41, v39, v40);
  *v42 += v40;
  if (v22 != 1)
  {
LABEL_70:
    for (i = 1; i != v22; ++i)
    {
      v67 = (_WORD *)*((_QWORD *)v24 + 4);
      if (*((_QWORD *)v24 + 3) - (_QWORD)v67 > 1uLL)
      {
        *v67 = 8236;
        *((_QWORD *)v24 + 4) += 2;
        v68 = (_QWORD *)*((_QWORD *)this + 2);
        v72 = *((_QWORD *)this + 3);
        v70 = *(_QWORD *)(v72 + 376);
        v71 = *(unsigned int *)(v72 + 392);
        if (!(_DWORD)v71)
          goto LABEL_83;
      }
      else
      {
        llvm::raw_ostream::write(v24, ", ", 2uLL);
        v68 = (_QWORD *)*((_QWORD *)this + 2);
        v69 = *((_QWORD *)this + 3);
        v70 = *(_QWORD *)(v69 + 376);
        v71 = *(unsigned int *)(v69 + 392);
        if (!(_DWORD)v71)
          goto LABEL_83;
      }
      v73 = *(_QWORD *)(v23 + 32 * i + 24);
      v74 = v71 - 1;
      v75 = (uint64_t *)(v70 + 32 * (((_DWORD)v71 - 1) & ((v73 >> 4) ^ (v73 >> 9))));
      v76 = *v75;
      if (*v75 == v73)
        goto LABEL_84;
      v77 = 1;
      LODWORD(v78) = v74 & ((v73 >> 4) ^ (v73 >> 9));
      while (v76 != -4096)
      {
        v79 = v78 + v77++;
        v78 = v79 & v74;
        v76 = *(_QWORD *)(v70 + 32 * v78);
        if (v76 == v73)
        {
          v75 = (uint64_t *)(v70 + 32 * v78);
          goto LABEL_84;
        }
      }
LABEL_83:
      v75 = (uint64_t *)(v70 + 32 * v71);
LABEL_84:
      if (v75 == (uint64_t *)(v70 + 32 * v71))
      {
        v81 = v68 + 4;
        v80 = (void *)v68[4];
        if (v68[3] - (_QWORD)v80 > 0xBuLL)
        {
          v66 = 12;
          v65 = "INVALIDBLOCK";
LABEL_90:
          memcpy(v80, v65, v66);
          *v81 += v66;
          continue;
        }
        v65 = "INVALIDBLOCK";
        v66 = 12;
      }
      else
      {
        v65 = (const char *)v75[2];
        v66 = v75[3];
        v81 = v68 + 4;
        v80 = (void *)v68[4];
        if (v66 <= v68[3] - (_QWORD)v80)
        {
          if (!v66)
            continue;
          goto LABEL_90;
        }
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)v68, v65, v66);
    }
  }
LABEL_43:
  v43 = *v13;
  v44 = (_BYTE *)*((_QWORD *)*v13 + 4);
  if ((unint64_t)v44 >= *((_QWORD *)*v13 + 3))
  {
    llvm::raw_ostream::write(v43, 93);
    PropertiesAsAttribute = mlir::Operation::getPropertiesAsAttribute(a2);
    if (!PropertiesAsAttribute)
      goto LABEL_54;
LABEL_48:
    v46 = (uint64_t **)PropertiesAsAttribute;
    v47 = *v13;
    v48 = (_WORD *)*((_QWORD *)*v13 + 4);
    if (*((_QWORD *)*v13 + 3) - (_QWORD)v48 > 1uLL)
    {
      *v48 = 15392;
      *((_QWORD *)v47 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v47, " <", 2uLL);
      {
LABEL_56:
        mlir::AsmPrinter::Impl::printAttributeImpl(v13, v46, 0);
        v49 = *v13;
        v50 = (_BYTE *)*((_QWORD *)*v13 + 4);
        if ((unint64_t)v50 >= *((_QWORD *)*v13 + 3))
        {
LABEL_57:
          llvm::raw_ostream::write(v49, 62);
          if ((*((_DWORD *)a2 + 11) & 0x7FFFFF) == 0)
            goto LABEL_66;
LABEL_58:
          v51 = *v13;
          v52 = (_WORD *)*((_QWORD *)*v13 + 4);
          if (*((_QWORD *)*v13 + 3) - (_QWORD)v52 > 1uLL)
          {
            *v52 = 10272;
            *((_QWORD *)v51 + 4) += 2;
            v53 = *((unsigned int *)a2 + 11);
            v54 = v53 & 0x7FFFFF;
            if ((v53 & 0x7FFFFF) == 0)
              goto LABEL_63;
          }
          else
          {
            llvm::raw_ostream::write(v51, " (", 2uLL);
            v53 = *((unsigned int *)a2 + 11);
            v54 = v53 & 0x7FFFFF;
            if ((v53 & 0x7FFFFF) == 0)
            {
LABEL_63:
              v57 = *v13;
              v58 = (_BYTE *)*((_QWORD *)*v13 + 4);
              if ((unint64_t)v58 >= *((_QWORD *)*v13 + 3))
              {
                llvm::raw_ostream::write(v57, 41);
              }
              else
              {
                *((_QWORD *)v57 + 4) = v58 + 1;
                *v58 = 41;
              }
              goto LABEL_66;
            }
          }
          v55 = (((unint64_t)a2 + 16 * ((v53 >> 23) & 1) + ((v53 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *((unsigned int *)a2 + 10);
          v56 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          (*(void (**)(_anonymous_namespace_::OperationPrinter *, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 224))(this, v55, 1, 1, 1);
          if (v54 != 1)
          {
            v82 = v55 + 24;
            v83 = 24 * v54 - 24;
            do
            {
              v84 = (_WORD *)*((_QWORD *)v56 + 4);
              if (*((_QWORD *)v56 + 3) - (_QWORD)v84 > 1uLL)
              {
                *v84 = 8236;
                *((_QWORD *)v56 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v56, ", ", 2uLL);
              }
              (*(void (**)(_anonymous_namespace_::OperationPrinter *, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 224))(this, v82, 1, 1, 1);
              v82 += 24;
              v83 -= 24;
            }
            while (v83);
          }
          goto LABEL_63;
        }
LABEL_53:
        *((_QWORD *)v49 + 4) = v50 + 1;
        *v50 = 62;
        goto LABEL_54;
      }
    }
    v49 = *v13;
    v50 = (_BYTE *)*((_QWORD *)*v13 + 4);
    if ((unint64_t)v50 >= *((_QWORD *)*v13 + 3))
      goto LABEL_57;
    goto LABEL_53;
  }
  *((_QWORD *)v43 + 4) = v44 + 1;
  *v44 = 93;
LABEL_45:
  PropertiesAsAttribute = mlir::Operation::getPropertiesAsAttribute(a2);
  if (PropertiesAsAttribute)
    goto LABEL_48;
LABEL_54:
  if ((*((_DWORD *)a2 + 11) & 0x7FFFFF) != 0)
    goto LABEL_58;
LABEL_66:
  Value = mlir::ArrayAttr::getValue((mlir::Operation *)((char *)a2 + 56));
  (*(void (**)(_anonymous_namespace_::OperationPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 192))(this, Value, v60, 0, 0);
  v61 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v62 = *((_QWORD *)v61 + 4);
  if ((unint64_t)(*((_QWORD *)v61 + 3) - v62) > 2)
  {
    *(_BYTE *)(v62 + 2) = 32;
    *(_WORD *)v62 = 14880;
    *((_QWORD *)v61 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v61, " : ", 3uLL);
  }
  return mlir::OpAsmPrinter::printFunctionalType(this, a2);
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printRegion(_anonymous_namespace_::OperationPrinter *this, mlir::Region *a2, int a3, char a4, int a5)
{
  char v6;
  llvm::raw_ostream *result;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t InterfaceFor;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  mlir::Block *v28;
  _QWORD *v29;
  _BOOL4 v30;
  mlir::Region *i;
  mlir::Block *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *((_BYTE *)this + 64);
  result = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v9 = (_BYTE *)*((_QWORD *)result + 3);
  v8 = (_BYTE *)*((_QWORD *)result + 4);
  if ((v6 & 8) == 0)
  {
    if (v9 == v8)
    {
      result = llvm::raw_ostream::write(result, "{", 1uLL);
      v14 = (_BYTE *)*((_QWORD *)result + 4);
      ++*((_DWORD *)this + 18);
      if ((unint64_t)v14 < *((_QWORD *)result + 3))
      {
LABEL_4:
        *((_QWORD *)result + 4) = v14 + 1;
        *v14 = 10;
        if (*(mlir::Region **)a2 == a2)
          goto LABEL_5;
        goto LABEL_13;
      }
    }
    else
    {
      *v8 = 123;
      v14 = (_BYTE *)(*((_QWORD *)result + 4) + 1);
      *((_QWORD *)result + 4) = v14;
      ++*((_DWORD *)this + 18);
      if ((unint64_t)v14 < *((_QWORD *)result + 3))
        goto LABEL_4;
    }
    llvm::raw_ostream::write(result, 10);
    if (*(mlir::Region **)a2 == a2)
    {
LABEL_5:
      result = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
      v15 = (_BYTE *)*((_QWORD *)result + 4);
      if (*((_BYTE **)result + 3) != v15)
      {
LABEL_6:
        *v15 = 125;
        v16 = *((_QWORD *)result + 4) + 1;
LABEL_10:
        *((_QWORD *)result + 4) = v16;
        return result;
      }
      goto LABEL_39;
    }
LABEL_13:
    v19 = *((_QWORD *)a2 + 2);
    if (mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(v19)
      && v19)
    {
      InterfaceFor = mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(v19);
      v21 = (*(uint64_t (**)(void))(InterfaceFor + 24))();
      v24 = (_DWORD *)((char *)this + 88);
      v23 = *((unsigned int *)this + 22);
      if (v23 >= *((_DWORD *)this + 23))
      {
        v33 = v22;
        v34 = v21;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 80, (char *)this + 96, v23 + 1, 16);
        v22 = v33;
        v21 = v34;
        LODWORD(v23) = *((_DWORD *)this + 22);
      }
      v25 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * v23);
      *v25 = v21;
    }
    else
    {
      v24 = (_DWORD *)((char *)this + 88);
      v26 = *((unsigned int *)this + 22);
      if (v26 >= *((_DWORD *)this + 23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 80, (char *)this + 96, v26 + 1, 16);
        LODWORD(v26) = *((_DWORD *)this + 22);
      }
      v22 = 0;
      v25 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * v26);
      *v25 = (uint64_t)&byte_207AF6795;
    }
    v25[1] = v22;
    ++*v24;
    v27 = *((_QWORD *)a2 + 1);
    if (v27)
      v28 = (mlir::Block *)(v27 - 8);
    else
      v28 = 0;
    if (a5)
    {
      v29 = (_QWORD *)*((_QWORD *)v28 + 4);
      v30 = v29 == (_QWORD *)((char *)v28 + 32);
      if (v29 == (_QWORD *)((char *)v28 + 32) || !a3)
      {
LABEL_33:
        for (i = *(mlir::Region **)(*((_QWORD *)a2 + 1) + 8); i != a2; i = (mlir::Region *)*((_QWORD *)i + 1))
        {
          if (i)
            v32 = (mlir::Region *)((char *)i - 8);
          else
            v32 = 0;
        }
        --*((_DWORD *)this + 22);
        result = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
        v15 = (_BYTE *)*((_QWORD *)result + 4);
        if (*((_BYTE **)result + 3) != v15)
          goto LABEL_6;
LABEL_39:
        v17 = "}";
        v18 = 1;
        return llvm::raw_ostream::write(result, v17, v18);
      }
    }
    else if (!a3)
    {
      v30 = 0;
      goto LABEL_33;
    }
    v30 = ((*((_QWORD *)v28 + 7) - *((_QWORD *)v28 + 6)) & 0x7FFFFFFF8) != 0;
    goto LABEL_33;
  }
  if ((unint64_t)(v9 - v8) > 4)
  {
    v8[4] = 125;
    *(_DWORD *)v8 = 774778491;
    v16 = *((_QWORD *)result + 4) + 5;
    goto LABEL_10;
  }
  v17 = "{...}";
  v18 = 5;
  return llvm::raw_ostream::write(result, v17, v18);
}

void `anonymous namespace'::OperationPrinter::shadowRegionArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  size_t v18;
  char *v19;
  char v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *__sz;
  void (**v24)(llvm::raw_svector_ostream *__hidden);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  void **v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  __int128 v36;
  _BYTE v37[16];
  _QWORD v38[4];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a1 + 24);
  v38[0] = a3;
  v38[1] = a4;
  v35 = v37;
  v36 = xmmword_207AB84C0;
  v5 = a4;
  if ((_DWORD)a4)
  {
    v7 = 0;
    v8 = (llvm::raw_ostream *)(v4 + 35);
    __sz = v4 + 54;
    v9 = v4 + 38;
    do
    {
      v10 = mlir::ValueRange::dereference_iterator(v38, v7);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)(a2 + 8);
        if (v12)
          v13 = v12 - 8;
        else
          v13 = 0;
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v7);
        v32 = &v35;
        v33 = v14;
        *(_QWORD *)&v36 = 0;
        v25 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 1;
        v27 = 0;
        v28 = 0;
        v26 = 0;
        v24 = &off_24C02DCB8;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v24, 0, 0, 0);
        v15 = 0;
        v16 = v32[1];
        v17 = v16 != 0;
        v18 = (size_t)v16 - v17;
        if (v16 != (void *)v17)
        {
          v19 = (char *)*v32 + v17;
          v15 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, (uint64_t)v16 - v17, 0);
          memmove(v15, v19, v18);
        }
        v34 = 0;
        v20 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v9, &v33, &v34);
        v21 = v34;
        if ((v20 & 1) == 0)
        {
          v21 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v33, &v33, v34);
          v22 = v33;
          v21[1] = 0;
          v21[2] = 0;
          *v21 = v22;
        }
        v21[1] = v15;
        v21[2] = v18;
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v24);
      }
      ++v7;
    }
    while (v5 != v7);
    if (v35 != v37)
      free(v35);
  }
}

double `anonymous namespace'::OperationPrinter::printAffineMapOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Results;
  uint64_t v6;
  double result;
  uint64_t *v8;
  uint64_t v9;
  llvm::raw_ostream **v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  _QWORD v19[3];
  int NumDims;
  uint64_t Value;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23[0] = a3;
  v23[1] = a4;
  if (a2)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v22);
    NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    v19[0] = &NumDims;
    v19[1] = a1;
    v19[2] = v23;
    Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
    if (v6)
    {
      v8 = Results;
      v9 = v6;
      v12 = *(llvm::raw_ostream **)(a1 + 16);
      v10 = (llvm::raw_ostream **)(a1 + 16);
      v11 = v12;
      if (v9 != 1)
      {
        v13 = v8 + 1;
        v14 = 8 * v9 - 8;
        do
        {
          v16 = (_WORD *)*((_QWORD *)v11 + 4);
          if (*((_QWORD *)v11 + 3) - (_QWORD)v16 > 1uLL)
          {
            *v16 = 8236;
            *((_QWORD *)v11 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v11, ", ", 2uLL);
          }
          v15 = *v13++;
          v14 -= 8;
        }
        while (v14);
      }
    }
  }
  else
  {
    v17 = *(llvm::raw_ostream **)(a1 + 16);
    v18 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 0x12)
    {
      *(_DWORD *)(v18 + 15) = 1044271169;
      result = *(double *)"<<NULL AFFINE MAP>>";
      *(_OWORD *)v18 = *(_OWORD *)"<<NULL AFFINE MAP>>";
      *((_QWORD *)v17 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v17, "<<NULL AFFINE MAP>>", 0x13uLL);
    }
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printAffineExprOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[3];
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v9[0] = a3;
  v9[1] = a4;
  v8[0] = a5;
  v8[1] = a6;
  v7[0] = a1;
  v7[1] = v9;
  v7[2] = v8;
}

uint64_t mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
          v31 = 72;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
          v31 = 72;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  llvm *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = -4096;
        v18[3] = -4096;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = v4;
          do
          {
            if ((*(_QWORD *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v21, &v27);
              v22 = v27;
              *v27 = *(_QWORD *)v21;
              *(_OWORD *)(v22 + 1) = *(_OWORD *)((char *)v21 + 8);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = &result[3 * v10];
    do
    {
      *v12 = -4096;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_25:
      v26 = &result[3 * v13];
      do
      {
        *v15 = -4096;
        v15 += 3;
      }
      while (v15 != v26);
      return result;
    }
    v23 = v14 / 0x18 + 1;
    v15 = &result[3 * (v23 & 0x1FFFFFFFFFFFFFFELL)];
    v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    v25 = result;
    do
    {
      *v25 = -4096;
      v25[3] = -4096;
      v25 += 6;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_25;
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int,BOOL)>::callback_fn<`anonymous namespace'::OperationPrinter::printAffineMapOfSSAIds(mlir::AffineMapAttr,mlir::ValueRange)::$_0>(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  unint64_t v8;
  llvm::raw_ostream *result;
  unint64_t v10;
  _BYTE *v11;

  v4 = *(_QWORD *)(a1 + 8);
  if (a3)
  {
    v5 = **(_DWORD **)a1 + a2;
    v6 = *(llvm::raw_ostream **)(v4 + 16);
    v7 = (_DWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 678195042;
      *v7 = 1651341683;
      *((_QWORD *)v6 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v6, "symbol(", 7uLL);
    }
    v10 = mlir::ValueRange::dereference_iterator(*(_QWORD **)(a1 + 16), v5);
    result = *(llvm::raw_ostream **)(v4 + 16);
    v11 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v11 >= *((_QWORD *)result + 3))
    {
      return llvm::raw_ostream::write(result, 41);
    }
    else
    {
      *((_QWORD *)result + 4) = v11 + 1;
      *v11 = 41;
    }
  }
  else
  {
    v8 = mlir::ValueRange::dereference_iterator(*(_QWORD **)(a1 + 16), a2);
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int,BOOL)>::callback_fn<`anonymous namespace'::OperationPrinter::printAffineExprOfSSAIds(mlir::AffineExpr,mlir::ValueRange,mlir::ValueRange)::$_0>(uint64_t *a1, unsigned int a2, char a3)
{
  uint64_t v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  unint64_t v8;
  llvm::raw_ostream *result;
  unint64_t v10;
  _BYTE *v11;

  v5 = *a1;
  if ((a3 & 1) != 0)
  {
    v6 = *(llvm::raw_ostream **)(v5 + 16);
    v7 = (_DWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 678195042;
      *v7 = 1651341683;
      *((_QWORD *)v6 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v6, "symbol(", 7uLL);
    }
    v10 = mlir::ValueRange::dereference_iterator((_QWORD *)a1[2], a2);
    result = *(llvm::raw_ostream **)(v5 + 16);
    v11 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v11 >= *((_QWORD *)result + 3))
    {
      return llvm::raw_ostream::write(result, 41);
    }
    else
    {
      *((_QWORD *)result + 4) = v11 + 1;
      *v11 = 41;
    }
  }
  else
  {
    v8 = mlir::ValueRange::dereference_iterator((_QWORD *)a1[1], a2);
  }
  return result;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printCustomOrGenericOp(_anonymous_namespace_::DummyAliasOperationPrinter *this, const char **a2)
{
  char v4;

  v4 = *(_BYTE *)(*((_QWORD *)this + 2) + 32);
  if ((v4 & 1) != 0)
  {
    v4 = *(_BYTE *)(*((_QWORD *)this + 2) + 32);
  }
  if ((v4 & 4) != 0)
    return (*(uint64_t (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, const char **, uint64_t))(*(_QWORD *)this + 216))(this, a2, 1);
  else
    return (*(uint64_t (**)(const char *, const char **, _anonymous_namespace_::DummyAliasOperationPrinter *, char *, _QWORD))(*(_QWORD *)a2[6] + 56))(a2[6], a2, this, &byte_207AF6795, 0);
}

void `anonymous namespace'::DummyAliasOperationPrinter::~DummyAliasOperationPrinter(_anonymous_namespace_::DummyAliasOperationPrinter *this)
{
  *(_QWORD *)this = &off_24C02A998;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasOperationPrinter *)((char *)this + 32));
}

{
  *(_QWORD *)this = &off_24C02A998;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasOperationPrinter *)((char *)this + 32));
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::getStream(_anonymous_namespace_::DummyAliasOperationPrinter *this)
{
  return (uint64_t)this + 32;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printType(uint64_t a1, _QWORD **a2)
{
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printAttribute(uint64_t a1, const char *a2)
{
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printAttributeWithoutType(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printAlias(uint64_t a1, const char *a2)
{
  return 1;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printAlias(uint64_t a1, _QWORD **a2)
{
  return 1;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printOptionalLocationSpecifier(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printRegionArgument(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 32) & 1) != 0)
  return result;
}

llvm::raw_ostream *`anonymous namespace'::DummyAliasOperationPrinter::printOperand(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  _BYTE *v3;
  llvm::raw_ostream *result;

  v3 = (_BYTE *)*((_QWORD *)a3 + 4);
  if (*((_BYTE **)a3 + 3) == v3)
    return llvm::raw_ostream::write(a3, "%", 1uLL);
  *v3 = 37;
  ++*((_QWORD *)a3 + 4);
  return result;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printOptionalAttrDict(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MirInfoChannelAssignment *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t NumNeededNEs;
  _QWORD v14[2];
  uint64_t *v15;
  int v16;
  llvm *v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = (MirInfoChannelAssignment *)a2;
    v7 = result;
    if (a5)
    {
      v14[0] = a4;
      v15 = (uint64_t *)(a4 + 16 * a5);
      llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>((uint64_t)&v16, v14, &v15);
      v8 = 16 * a3;
      while (1)
      {
        NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(v6);
        v14[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
        v14[1] = v9;
        v15 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v16, (uint64_t)v14, &v15);
        if ((result & 1) != 0)
        {
          if ((v16 & 1) != 0)
          {
            if (v15 != &v19)
              goto LABEL_5;
          }
          else if (v15 != (uint64_t *)((char *)v17 + 16 * v18))
          {
            goto LABEL_5;
          }
        }
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)v6 + 1));
LABEL_5:
        v6 = (MirInfoChannelAssignment *)((char *)v6 + 16);
        v8 -= 16;
        if (!v8)
        {
          if ((v16 & 1) == 0)
            llvm::deallocate_buffer(v17, (void *)(16 * v18));
          return result;
        }
      }
    }
    v10 = 16 * a3;
    v11 = a2 + 1;
    do
    {
      v12 = *v11;
      v11 += 2;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v12);
      v10 -= 16;
    }
    while (v10);
  }
  return result;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printOptionalAttrDictWithKeyword(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printGenericOp(_anonymous_namespace_::DummyAliasOperationPrinter *this, mlir::Operation *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t NextResultAtOffset;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t AttrDictionary;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 32) & 8) == 0)
  {
    v4 = *((unsigned int *)a2 + 11);
    if ((v4 & 0x7FFFFF) != 0)
    {
      v5 = (((unint64_t)a2 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *((unsigned int *)a2 + 10);
      v6 = 24 * (v4 & 0x7FFFFF);
      do
      {
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 224))(this, v5, 1, 1, 0);
        v5 += 24;
        v6 -= 24;
      }
      while (v6);
    }
  }
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v7 = *((_QWORD *)a2 + 9);
    v8 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v30 = (char *)v7;
  v31 = v8;
  mlir::OperandRange::getTypes((uint64_t *)&v30, (uint64_t *)&AttrDictionary);
  if (AttrDictionary != v28 || v29 != v27)
  {
    if (AttrDictionary != v28)
    {
      for (i = (uint64_t *)(AttrDictionary + 32 * v27 + 24); ; i += 4)
      {
        v10 = *i;
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    v11 = (uint64_t *)(AttrDictionary + 32 * v27 + 24);
    v12 = v29 - v27;
    do
    {
      v13 = *v11;
      v11 += 4;
      (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
      --v12;
    }
    while (v12);
  }
  v14 = *((unsigned int *)a2 + 9);
  v15 = (char *)a2 - 16;
  if (!(_DWORD)v14)
    v15 = 0;
  v30 = v15;
  v31 = v14;
  mlir::OperandRange::getTypes((uint64_t *)&v30, (uint64_t *)&AttrDictionary);
  v16 = AttrDictionary;
  v17 = v27;
  v18 = v29;
  if (AttrDictionary != v28 || v27 != v29)
  {
    if (AttrDictionary != v28)
    {
      while (1)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
        ++v17;
      }
    }
    do
    {
      v20 = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
      (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8);
      ++v17;
    }
    while (v18 != v17);
  }
  if (*((_BYTE *)a2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(a2);
    result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
    if (!v22)
      return result;
  }
  else
  {
    result = mlir::ArrayAttr::getValue((mlir::Operation *)((char *)a2 + 56));
    if (!v22)
      return result;
  }
  v23 = 16 * v22;
  v24 = (uint64_t *)(result + 8);
  do
  {
    v25 = *v24;
    v24 += 2;
    result = (*(uint64_t (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, uint64_t))(*(_QWORD *)this + 40))(this, v25);
    v23 -= 16;
  }
  while (v23);
  return result;
}

ZinIrHalH13g *`anonymous namespace'::DummyAliasOperationPrinter::printRegion(ZinIrHalH13g *this, mlir::Region *a2, int a3, char a4)
{
  _anonymous_namespace_::AliasInitializer **v4;
  uint64_t v6;
  mlir::Block *v7;
  mlir::Region *i;
  mlir::Block *v9;
  uint64_t v10;

  if (*(mlir::Region **)a2 != a2)
  {
    v4 = (_anonymous_namespace_::AliasInitializer **)this;
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 32) & 8) != 0)
    {
      v10 = *((_QWORD *)this + 8);
      if ((unint64_t)(*((_QWORD *)this + 7) - v10) > 4)
      {
        *(_BYTE *)(v10 + 4) = 125;
        *(_DWORD *)v10 = 774778491;
        *((_QWORD *)this + 8) += 5;
      }
      else
      {
        return llvm::raw_ostream::write((ZinIrHalH13g *)((char *)this + 32), "{...}", 5uLL);
      }
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v6)
        v7 = (mlir::Block *)(v6 - 8);
      else
        v7 = 0;
      for (i = *(mlir::Region **)(*((_QWORD *)a2 + 1) + 8); i != a2; i = (mlir::Region *)*((_QWORD *)i + 1))
      {
        if (i)
          v9 = (mlir::Region *)((char *)i - 8);
        else
          v9 = 0;
      }
    }
  }
  return this;
}

uint64_t `anonymous namespace'::AliasInitializer::visit(_anonymous_namespace_::AliasInitializer *a1, _QWORD **a2, int a3)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;
  unsigned __int8 *v19;
  void *v20;
  int v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28;
  _QWORD **v29;
  uint64_t RHS;
  uint64_t v31;
  uint64_t RawStringData;
  uint64_t LayerSchedule;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v38;
  int v39;
  _QWORD v40[2];
  _QWORD **v41;
  void *v42[5];
  void *v43;
  uint64_t v44;
  _anonymous_namespace_::AliasInitializer *v45;
  char v46;
  _BYTE *v47;
  uint64_t v48;
  void *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  _BYTE v57[28];
  void *v58;
  uint64_t v59;
  _QWORD v60[8];

  v60[6] = *MEMORY[0x24BDAC8D0];
  v57[0] = 0;
  v57[16] = 0;
  *(_DWORD *)&v57[24] = 0;
  v58 = v60;
  v59 = 0x600000000;
  v42[0] = a2;
  *(_OWORD *)&v42[1] = *(_OWORD *)v57;
  *(_OWORD *)((char *)&v42[2] + 4) = *(_OWORD *)&v57[12];
  v43 = &v45;
  v44 = 0x600000000;
  v8 = v7;
  if (v43 != &v45)
    free(v43);
  if (v58 != v60)
    free(v58);
  v9 = (v6 - *((_QWORD *)a1 + 5)) >> 3;
  if (v8)
  {
    v39 = a3;
    v38 = 0x4EC4EC4EC4EC4EC5 * v9;
    v42[0] = &v42[3];
    *(_OWORD *)&v42[1] = xmmword_207AB5560;
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 32);
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 40);
    if (v10 != v11)
    {
      do
      {
        while (1)
        {
          v12 = (*(uint64_t (**)(_QWORD, _QWORD **, uint64_t))(*(_QWORD *)*v10 + 24))(*v10, a2, (uint64_t)a1 + 112);
          if (v12)
            break;
          if (++v10 == v11)
            goto LABEL_15;
        }
        v13 = v12;
        llvm::SmallVectorImpl<char>::operator=((uint64_t)v42, (uint64_t)a1 + 56);
        ++v10;
      }
      while (v13 != 2 && v10 != v11);
LABEL_15:
      v15 = (void **)v42[0];
      if (v42[1])
      {
        *(_QWORD *)v57 = &v57[24];
        *(_OWORD *)&v57[8] = xmmword_207AB84C0;
        v16 = sanitizeIdentifier((unsigned __int8 *)v42[0], (uint64_t)v42[1], (unsigned __int8 **)v57, "$_-", 3uLL, 0);
        v18 = v17;
        if (v17)
        {
          v19 = v16;
          v20 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((uint64_t **)a1 + 1), v17, 0);
          memmove(v20, v19, v18);
        }
        else
        {
          v20 = 0;
        }
        if (v39)
          v21 = -1073741823;
        else
          v21 = 1073741825;
        *(_QWORD *)(v6 + 8) = v20;
        *(_QWORD *)(v6 + 16) = v18;
        *(_BYTE *)(v6 + 24) = 1;
        *(_DWORD *)(v6 + 32) = v21;
        *(_DWORD *)(v6 + 48) = 0;
        if (*(_BYTE **)v57 != &v57[24])
          free(*(void **)v57);
        v15 = (void **)v42[0];
      }
      if (v15 != &v42[3])
        free(v15);
    }
    *(_QWORD *)v57 = &v57[16];
    *(_QWORD *)&v57[8] = 0x600000000;
    v42[0] = off_24C02ACC8;
    memset(&v42[1], 0, 28);
    v43 = &v45;
    v44 = 0;
    v45 = a1;
    v46 = v39;
    v47 = v57;
    v48 = 0;
    v50 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 1;
    v52 = 0;
    v53 = 0;
    v51 = 0;
    v49 = &unk_24C02DBC0;
    v22 = *a2;
    v23 = (uint64_t **)**a2;
    if (v23[3] == &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
    {
      if ((_UNKNOWN *)v22[17] == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        v29 = a2;
      else
        v29 = 0;
      v41 = v29;
      v24 = v38;
      if (v29)
      {
        RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v41);
        (*((void (**)(void **, uint64_t))v42[0] + 4))(v42, RHS);
        v40[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v41);
        v40[1] = v31;
        if (*(_UNKNOWN **)(*(_QWORD *)v40[0] + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
          || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40) & 1) == 0)
        {
          RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v41);
          (*((void (**)(void **, uint64_t))v42[0] + 5))(v42, RawStringData);
        }
        if (ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v41))
        {
          LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v41);
          (*((void (**)(void **, uint64_t))v42[0] + 5))(v42, LayerSchedule);
        }
      }
      else
      {
        v40[0] = v42;
        mlir::AbstractAttribute::walkImmediateSubElements((uint64_t)v22);
      }
    }
    else
    {
      ((void (*)(_QWORD, _QWORD **, void **))(*v23)[7])(**a2, a2, v42);
      v24 = v38;
    }
    v25 = v48;
    v26 = *((_QWORD *)a1 + 5);
    v27 = (void **)(v26 + 104 * v24 + 40);
    if (v27 == (void **)v57)
    {
LABEL_59:
      if (v25)
      {
        *(_DWORD *)(v26 + 104 * v24 + 32) = *(_DWORD *)(v26 + 104 * v24 + 32) & 0xC0000000 | (v25 + 1) & 0x3FFFFFFF;
        v42[0] = off_24C02ACC8;
        llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v49);
        v36 = v43;
        if (v43 == &v45)
          goto LABEL_62;
      }
      else
      {
        v42[0] = off_24C02ACC8;
        llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v49);
        v36 = v43;
        if (v43 == &v45)
LABEL_62:
          llvm::deallocate_buffer((llvm *)v42[2], (void *)(8 * LODWORD(v42[4])));
      }
      free(v36);
      goto LABEL_62;
    }
    v28 = *(void **)v57;
    if (*(_BYTE **)v57 != &v57[16])
    {
      if (*(_QWORD *)(v26 + 104 * v24 + 40) != v26 + 104 * v24 + 56)
      {
        free(*v27);
        v28 = *(void **)v57;
      }
      *v27 = v28;
      *(_QWORD *)(v26 + 104 * v24 + 48) = *(_QWORD *)&v57[8];
      *(_QWORD *)v57 = &v57[16];
      *(_DWORD *)&v57[12] = 0;
      goto LABEL_58;
    }
    v34 = *(unsigned int *)&v57[8];
    v35 = *(unsigned int *)(v26 + 104 * v24 + 48);
    if (v35 >= *(_DWORD *)&v57[8])
    {
      if (*(_DWORD *)&v57[8])
        memmove(*v27, &v57[16], 8 * *(unsigned int *)&v57[8]);
      goto LABEL_57;
    }
    if (*(_DWORD *)(v26 + 104 * v24 + 52) >= *(_DWORD *)&v57[8])
    {
      if ((_DWORD)v35)
      {
        memmove(*v27, &v57[16], 8 * v35);
        goto LABEL_55;
      }
    }
    else
    {
      *(_DWORD *)(v26 + 104 * v24 + 48) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v26 + 104 * v24 + 40, (void *)(v26 + 104 * v24 + 56), v34, 8);
    }
    v35 = 0;
LABEL_55:
    if (v35 != *(unsigned int *)&v57[8])
      memcpy((char *)*v27 + 8 * v35, (const void *)(*(_QWORD *)v57 + 8 * v35), 8 * *(unsigned int *)&v57[8] - 8 * v35);
LABEL_57:
    *(_DWORD *)(v26 + 104 * v24 + 48) = v34;
LABEL_58:
    *(_DWORD *)&v57[8] = 0;
    goto LABEL_59;
  }
  if ((a3 & 1) == 0)
  return *(_DWORD *)(v6 + 32) & 0x3FFFFFFF;
}

uint64_t llvm::MapVector<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>>::insert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  unint64_t v50;

  v5 = (__int128 *)(a2 + 1);
  v4 = *a2;
  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_26;
  v7 = *(_QWORD *)a1;
  v8 = ((v4 >> 4) ^ (v4 >> 9)) & (v6 - 1);
  v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
  v10 = *v9;
  if (v4 == *v9)
    return *(_QWORD *)(a1 + 24) + 104 * *(unsigned int *)(v7 + 16 * v8 + 8);
  v22 = 0;
  v23 = 1;
  while (v10 != -4096)
  {
    if (v22)
      v24 = 0;
    else
      v24 = v10 == -8192;
    if (v24)
      v22 = v9;
    v25 = v8 + v23++;
    v8 = v25 & (v6 - 1);
    v9 = (_QWORD *)(v7 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
      return *(_QWORD *)(a1 + 24) + 104 * *(unsigned int *)(v7 + 16 * v8 + 8);
  }
  v26 = (uint64_t)(v22 ? v22 : v9);
  v27 = *(_DWORD *)(a1 + 8);
  if (4 * v27 + 4 < 3 * v6)
  {
    if (v6 + ~v27 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_26:
    v6 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1, v6);
  v28 = *(_DWORD *)(a1 + 16) - 1;
  v29 = v28 & ((v4 >> 4) ^ (v4 >> 9));
  v26 = *(_QWORD *)a1 + 16 * v29;
  v30 = *(_QWORD *)v26;
  if (v4 == *(_QWORD *)v26)
  {
LABEL_28:
    ++*(_DWORD *)(a1 + 8);
    if (v4 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v46 = 0;
  v47 = 1;
  while (v30 != -4096)
  {
    if (v46)
      v48 = 0;
    else
      v48 = v30 == -8192;
    if (v48)
      v46 = v26;
    v49 = v29 + v47++;
    v29 = v49 & v28;
    v26 = *(_QWORD *)a1 + 16 * (v49 & v28);
    v30 = *(_QWORD *)v26;
    if (v4 == *(_QWORD *)v26)
      goto LABEL_28;
  }
  if (v46)
    v26 = v46;
LABEL_6:
  v12 = *(_QWORD *)v26;
  ++*(_DWORD *)(a1 + 8);
  if (v12 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)v26 = v4;
  *(_DWORD *)(v26 + 8) = 0;
  v13 = (_QWORD *)(a1 + 24);
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v26 + 8) = v14;
  if (v14 >= v15)
  {
    v50 = 0;
    v21 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v13, (void *)(a1 + 40), 0, 104, &v50);
    v31 = &v21[104 * *(unsigned int *)(a1 + 32)];
    *(_QWORD *)v31 = *a2;
    v32 = *v5;
    v33 = *(__int128 *)((char *)v5 + 12);
    *((_QWORD *)v31 + 5) = v31 + 56;
    v34 = (uint64_t)(v31 + 40);
    *(_OWORD *)(v34 - 20) = v33;
    *(_OWORD *)(v34 - 32) = v32;
    *(_QWORD *)(v34 + 8) = 0x600000000;
    if (*((_DWORD *)a2 + 12))
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v34, (uint64_t)(a2 + 5));
    v35 = *(char **)(a1 + 24);
    v36 = *(_DWORD *)(a1 + 32);
    if (v36)
    {
      v37 = &v35[104 * v36];
      v38 = v21 + 40;
      v39 = (uint64_t)(v35 + 40);
      do
      {
        v40 = v39 - 40;
        *(v38 - 5) = *(_QWORD *)(v39 - 40);
        v41 = *(_OWORD *)(v39 - 32);
        *(_OWORD *)((char *)v38 - 20) = *(_OWORD *)(v39 - 20);
        *((_OWORD *)v38 - 2) = v41;
        *v38 = v38 + 2;
        v38[1] = 0x600000000;
        if (*(_DWORD *)(v39 + 8))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v38, v39);
        v38 += 13;
        v39 += 104;
      }
      while ((char *)(v40 + 104) != v37);
      v35 = *(char **)(a1 + 24);
      v42 = *(_DWORD *)(a1 + 32);
      if (v42)
      {
        v43 = 104 * v42;
        do
        {
          v44 = *(char **)&v35[v43 - 64];
          if (&v35[v43 - 48] != v44)
            free(v44);
          v43 -= 104;
        }
        while (v43);
        v35 = *(char **)(a1 + 24);
      }
    }
    v45 = v50;
    if (v35 != (char *)(a1 + 40))
      free(v35);
    *(_QWORD *)(a1 + 24) = v21;
    v20 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v20;
    *(_DWORD *)(a1 + 36) = v45;
  }
  else
  {
    v16 = (_QWORD *)(*v13 + 104 * v14);
    *v16 = *a2;
    v17 = *v5;
    v18 = *(__int128 *)((char *)v5 + 12);
    v16[5] = v16 + 7;
    v19 = (uint64_t)(v16 + 5);
    *(_OWORD *)(v19 - 20) = v18;
    *(_OWORD *)(v19 - 32) = v17;
    *(_QWORD *)(v19 + 8) = 0x600000000;
    if (*((_DWORD *)a2 + 12))
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v19, (uint64_t)(a2 + 5));
    v20 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v20;
    v21 = *(char **)(a1 + 24);
  }
  return (uint64_t)&v21[104 * v20 - 104];
}

_anonymous_namespace_::AliasInitializer *`anonymous namespace'::AliasInitializer::markAliasNonDeferrable(_anonymous_namespace_::AliasInitializer *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _anonymous_namespace_::AliasInitializer *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;

  v2 = *((_QWORD *)this + 5);
  v3 = v2 + 104 * a2;
  v6 = *(_DWORD *)(v3 + 32);
  v4 = (int *)(v3 + 32);
  v5 = v6;
  if (v6 < 0)
  {
    *v4 = v5 & 0x7FFFFFFF;
    v7 = v2 + 104 * a2;
    v8 = *(unsigned int *)(v7 + 48);
    if ((_DWORD)v8)
    {
      v9 = this;
      v10 = *(unint64_t **)(v7 + 40);
      v11 = 8 * v8;
      do
      {
        v12 = *v10++;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return this;
}

void `anonymous namespace'::DummyAliasDialectAsmPrinter::~DummyAliasDialectAsmPrinter(_anonymous_namespace_::DummyAliasDialectAsmPrinter *this)
{
  char *v2;

  *(_QWORD *)this = off_24C02ACC8;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasDialectAsmPrinter *)((char *)this + 88));
  v2 = (char *)*((_QWORD *)this + 5);
  if (v2 != (char *)this + 56)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 2), (void *)(8 * *((unsigned int *)this + 8)));
}

{
  char *v2;

  *(_QWORD *)this = off_24C02ACC8;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasDialectAsmPrinter *)((char *)this + 88));
  v2 = (char *)*((_QWORD *)this + 5);
  if (v2 != (char *)this + 56)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 2), (void *)(8 * *((unsigned int *)this + 8)));
}

uint64_t sub_2072B4E9C()
{
  uint64_t v0;

  return v0;
}

unsigned __int8 *sanitizeIdentifier(unsigned __int8 *a1, uint64_t a2, unsigned __int8 **a3, void *__s, size_t __n, char a6)
{
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  _BYTE *v14;
  unsigned __int8 *v16;
  uint64_t v18;
  int v19;
  unsigned __int8 *v21;
  _QWORD v22[3];
  _QWORD v23[2];
  _QWORD v24[2];

  v10 = a1;
  v24[0] = a1;
  v24[1] = a2;
  v23[0] = __s;
  v23[1] = __n;
  v22[0] = v24;
  v22[1] = v23;
  v22[2] = a3;
  if (((char)*a1 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *a1 + 60) & 0x400) != 0)
  {
    v16 = a3[1];
    if (v16 + 1 > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, (unint64_t)(v16 + 1), 1);
      v16 = a3[1];
    }
    v16[(_QWORD)*a3] = 95;
    ++a3[1];
LABEL_24:
    sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(v22);
    return *a3;
  }
  if ((a6 & 1) != 0 || (char)a1[a2 - 1] < 0 || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a1[a2 - 1] + 60) & 0x400) == 0)
  {
    if (a2)
    {
      if (__n)
      {
        v11 = 0;
        while (1)
        {
          v12 = (char)v10[v11];
          if ((v12 - 48) >= 0xA && ((v10[v11] & 0xDF) - 65) >= 0x1Au)
          {
            v14 = memchr(__s, v12, __n);
            if (!v14 || v14 - (_BYTE *)__s == -1)
              break;
          }
          if (a2 == ++v11)
            return v10;
        }
      }
      else
      {
        v18 = 0;
        while (1)
        {
          v19 = a1[v18];
          if ((v19 - 48) >= 0xA && (v19 & 0xFFFFFFDF) - 65 > 0x19)
            break;
          if (a2 == ++v18)
            return v10;
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(v22);
    v21 = a3[1];
    if (v21 + 1 > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, (unint64_t)(v21 + 1), 1);
      v21 = a3[1];
    }
    v21[(_QWORD)*a3] = 95;
    v10 = *a3;
    ++a3[1];
  }
  return v10;
}

uint64_t llvm::SmallVectorImpl<char>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 24);
    v4 = *(const void **)a2;
    if (v4 == v5)
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a1 + 8);
      if (v8 >= v7)
      {
        if (v7)
          memmove(*(void **)a1, v4, *(_QWORD *)(a2 + 8));
      }
      else
      {
        if (*(_QWORD *)(a1 + 16) >= v7)
        {
          if (v8)
            memmove(*(void **)a1, v4, *(_QWORD *)(a1 + 8));
        }
        else
        {
          *(_QWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v7, 1);
          v8 = 0;
        }
        v9 = *(_QWORD *)(a2 + 8);
        if (v8 != v9)
          memcpy((void *)(*(_QWORD *)a1 + v8), (const void *)(*(_QWORD *)a2 + v8), *(_QWORD *)a2 + v9 - (*(_QWORD *)a2 + v8));
      }
      *(_QWORD *)(a1 + 8) = v7;
    }
    else
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 24)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = v5;
    }
    *(_QWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(_QWORD *a1)
{
  _BYTE **v1;
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  size_t v12;
  _BYTE *v13;
  _BYTE *v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  size_t v21;
  _BYTE *p_dst;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  _QWORD *v27;
  size_t v28;
  uint64_t v29;
  _BYTE *__dst;
  size_t v31;
  int64_t v32;
  _BYTE v33[17];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v1 = (_BYTE **)*a1;
  v2 = *(_QWORD *)(*a1 + 8);
  if (v2)
  {
    v4 = *v1;
    v5 = &(*v1)[v2];
    do
    {
      v8 = (char)*v4;
      v9 = *v4;
      v10 = (v8 - 48) >= 0xA && ((*v4 & 0xDF) - 65) >= 0x1Au;
      if (v10
        && ((v11 = a1[1], (v12 = *(_QWORD *)(v11 + 8)) == 0)
         || ((v13 = *(_BYTE **)v11, (v14 = memchr(*(void **)v11, (char)*v4, v12)) != 0)
           ? (v15 = v14 - v13 == -1)
           : (v15 = 1),
             v15)))
      {
        v6 = (_QWORD *)a1[2];
        if (v9 != 32)
        {
          if (v9)
          {
            v17 = v8;
            v18 = 16;
            do
            {
              v33[v18--] = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 & 0xF];
              v19 = v17 > 0xF;
              v17 >>= 4;
            }
            while (v19);
            v20 = v18 + 1;
            v21 = 16 - v18;
            if ((unint64_t)(16 - v18) >= 0x7FFFFFFFFFFFFFF8)
              abort();
          }
          else
          {
            v33[16] = 48;
            v20 = 16;
            v21 = 1;
          }
          if (v21 > 0x16)
          {
            v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v23 = v21 | 7;
            v24 = v23 + 1;
            p_dst = operator new(v23 + 1);
            v31 = v21;
            v32 = v24 | 0x8000000000000000;
            __dst = p_dst;
            if (v20 == 17)
              goto LABEL_36;
          }
          else
          {
            HIBYTE(v32) = v21;
            p_dst = &__dst;
            if (v20 == 17)
              goto LABEL_36;
          }
          memcpy(p_dst, &v33[v20], v21);
          p_dst += v21;
LABEL_36:
          *p_dst = 0;
          v25 = SHIBYTE(v32);
          v26 = __dst;
          if (v32 >= 0)
            v27 = &__dst;
          else
            v27 = __dst;
          if (v32 >= 0)
            v28 = HIBYTE(v32);
          else
            v28 = v31;
          v29 = v6[1];
          if (v6[2] < v29 + v28)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, v6 + 3, v29 + v28, 1);
            v29 = v6[1];
          }
          if (v28)
          {
            memcpy((void *)(*v6 + v29), v27, v28);
            v29 = v6[1];
          }
          v6[1] = v29 + v28;
          if (v25 < 0)
            operator delete(v26);
          goto LABEL_7;
        }
        v16 = v6[1];
        if ((unint64_t)(v16 + 1) > v6[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[2], v6 + 3, v16 + 1, 1);
          v16 = v6[1];
        }
        *(_BYTE *)(*v6 + v16) = 95;
      }
      else
      {
        v6 = (_QWORD *)a1[2];
        v7 = v6[1];
        if ((unint64_t)(v7 + 1) > v6[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[2], v6 + 3, v7 + 1, 1);
          v7 = v6[1];
        }
        *(_BYTE *)(*v6 + v7) = v9;
      }
      ++v6[1];
LABEL_7:
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2072B5488()
{
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::DummyAliasDialectAsmPrinter::getStream(_anonymous_namespace_::DummyAliasDialectAsmPrinter *this)
{
  return (uint64_t)this + 88;
}

void `anonymous namespace'::DummyAliasDialectAsmPrinter::printType(uint64_t a1, _QWORD **a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(_QWORD *)(a1 + 80))
    *(_QWORD *)(a1 + 80) = v3;
}

void `anonymous namespace'::DummyAliasDialectAsmPrinter::printAttribute(uint64_t a1, const char *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(_QWORD *)(a1 + 80))
    *(_QWORD *)(a1 + 80) = v3;
}

void `anonymous namespace'::DummyAliasDialectAsmPrinter::printAttributeWithoutType(uint64_t a1, const char *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(_QWORD *)(a1 + 80))
    *(_QWORD *)(a1 + 80) = v3;
}

uint64_t `anonymous namespace'::DummyAliasDialectAsmPrinter::pushCyclicPrinting(int64x2_t *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v7 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(this + 1, &v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = this[3].u32[0];
    if (v5 >= this[3].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[2].i64[1], &this[3].u64[1], v5 + 1, 8);
      LODWORD(v5) = this[3].i32[0];
    }
    *(_QWORD *)(this[2].i64[1] + 8 * v5) = v4;
    ++this[3].i32[0];
  }
  return v3;
}

int32x2_t *`anonymous namespace'::DummyAliasDialectAsmPrinter::popCyclicPrinting(int32x2_t *this)
{
  __int32 v1;
  int32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  __int32 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  v1 = this[4].i32[0];
  if (v1)
  {
    v2 = this[2];
    v3 = this[6].u32[0];
    v4 = *(_QWORD *)(*(_QWORD *)&this[5] + 8 * v3 - 8);
    v5 = v1 - 1;
    LODWORD(v6) = ((v4 >> 4) ^ (v4 >> 9)) & (v1 - 1);
    v7 = (uint64_t *)(*(_QWORD *)&v2 + 8 * v6);
    v8 = *v7;
    if (v4 == *v7)
    {
LABEL_3:
      *v7 = -8192;
      this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & v5;
        v8 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v6);
        if (v4 == v8)
        {
          v7 = (uint64_t *)(*(_QWORD *)&v2 + 8 * v6);
          goto LABEL_3;
        }
      }
    }
    this[6].i32[0] = v3 - 1;
  }
  else
  {
    --this[6].i32[0];
  }
  return this;
}

uint64_t `anonymous namespace'::DummyAliasDialectAsmPrinter::printAlias(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return 1;
}

{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return 1;
}

uint64_t `anonymous namespace'::AliasInitializer::visit(_anonymous_namespace_::AliasInitializer *a1, const char *a2, int a3, char a4)
{
  _anonymous_namespace_::AliasInitializer *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  int v16;
  int v17;
  void **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  size_t v22;
  unsigned __int8 *v23;
  void *v24;
  int v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  const char *v31;
  uint64_t Value;
  uint64_t canMapOperands;
  _anonymous_namespace_::AliasInitializer *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  MirInfoChannelAssignment *v47;
  MirInfoChannelAssignment *v48;
  uint64_t NumNeededNEs;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t LHS;
  const char *v63;
  uint64_t RHS;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t **v77;
  char v78;
  uint64_t v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  unint64_t v88;
  void *v89[5];
  void *v90;
  uint64_t v91;
  _anonymous_namespace_::AliasInitializer *v92;
  char v93;
  _BYTE *v94;
  uint64_t v95;
  void *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  int v103;
  _BYTE v104[28];
  _QWORD *v105;
  uint64_t v106;
  _QWORD v107[8];

  v7 = a1;
  v107[6] = *MEMORY[0x24BDAC8D0];
  v104[0] = 0;
  v104[16] = 0;
  *(_DWORD *)&v104[24] = 0;
  v105 = v107;
  v106 = 0x600000000;
  v89[0] = (void *)a2;
  *(_OWORD *)&v89[1] = *(_OWORD *)v104;
  *(_OWORD *)((char *)&v89[2] + 4) = *(_OWORD *)&v104[12];
  v90 = &v92;
  v91 = 0x600000000;
  v10 = v9;
  if (v90 != &v92)
    free(v90);
  if (v105 != v107)
    free(v105);
  v11 = (v8 - *((_QWORD *)v7 + 5)) >> 3;
  if (v10)
  {
    v78 = a4;
    v79 = 0x4EC4EC4EC4EC4EC5 * v11;
    v89[0] = &v89[3];
    *(_OWORD *)&v89[1] = xmmword_207AB5560;
    v12 = (uint64_t)v7 + 56;
    v13 = *(_QWORD **)(*(_QWORD *)v7 + 32);
    v14 = *(_QWORD **)(*(_QWORD *)v7 + 40);
    if (v13 != v14)
    {
      v77 = (uint64_t **)v7;
      v15 = (char *)v7 + 112;
      do
      {
        while (1)
        {
          v16 = (*(uint64_t (**)(_QWORD, const char *, char *))(*(_QWORD *)*v13 + 16))(*v13, a2, v15);
          if (v16)
            break;
          if (++v13 == v14)
            goto LABEL_15;
        }
        v17 = v16;
        llvm::SmallVectorImpl<char>::operator=((uint64_t)v89, v12);
        ++v13;
      }
      while (v17 != 2 && v13 != v14);
LABEL_15:
      v19 = (void **)v89[0];
      if (v89[1])
      {
        *(_QWORD *)v104 = &v104[24];
        *(_OWORD *)&v104[8] = xmmword_207AB84C0;
        v20 = sanitizeIdentifier((unsigned __int8 *)v89[0], (uint64_t)v89[1], (unsigned __int8 **)v104, "$_-", 3uLL, 0);
        v22 = v21;
        if (v21)
        {
          v23 = v20;
          v24 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v77[1], v21, 0);
          memmove(v24, v23, v22);
        }
        else
        {
          v24 = 0;
        }
        if (a3)
          v25 = -2147483647;
        else
          v25 = 1;
        *(_QWORD *)(v8 + 8) = v24;
        *(_QWORD *)(v8 + 16) = v22;
        *(_BYTE *)(v8 + 24) = 1;
        *(_DWORD *)(v8 + 32) = v25;
        *(_DWORD *)(v8 + 48) = 0;
        if (*(_BYTE **)v104 != &v104[24])
          free(*(void **)v104);
        v19 = (void **)v89[0];
      }
      v7 = (_anonymous_namespace_::AliasInitializer *)v77;
      if (v19 != &v89[3])
        free(v19);
    }
    *(_QWORD *)v104 = &v104[16];
    *(_QWORD *)&v104[8] = 0x600000000;
    v89[0] = off_24C02ACC8;
    memset(&v89[1], 0, 28);
    v90 = &v92;
    v91 = 0;
    v92 = v7;
    v93 = a3;
    v94 = v104;
    v95 = 0;
    v97 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v99 = 0;
    v100 = 0;
    v98 = 0;
    v96 = &unk_24C02DBC0;
    v26 = **(uint64_t ****)a2;
    if (v26[3] != &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
    {
      ((void (*)(uint64_t **, const char *, void **))(*v26)[5])(v26, a2, v89);
      v27 = v79;
      goto LABEL_32;
    }
    v29 = *(void **)(*(_QWORD *)a2 + 136);
    v27 = v79;
    if (v29 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      goto LABEL_52;
    }
    if ((v30 & 1) == 0
    {
      v87 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v88 = 68;
      v70 = llvm::StringRef::find((uint64_t *)&v87, "DesiredTypeName = ", 0x12uLL, 0);
      if (v88 >= v70)
        v71 = v70;
      else
        v71 = v88;
      v72 = &v87[v71];
      v73 = v88 - v71;
      if (v88 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v88 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
    }
    if (v29 == (void *)mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id)
      v31 = a2;
    else
      v31 = 0;
    v87 = v31;
    if (v31)
    {
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v87);
LABEL_48:
      (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, Value);
      goto LABEL_32;
    }
    v43 = *(void **)(*(_QWORD *)a2 + 136);
    if (v43 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
      v44 = a2;
    else
      v44 = 0;
    v86 = v44;
    if (v44)
    {
      v45 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (v46)
      {
        v47 = (MirInfoChannelAssignment *)v45;
        v48 = (MirInfoChannelAssignment *)(v45 + 16 * v46);
        do
        {
          NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(v47);
          (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, NumNeededNEs);
          (*((void (**)(void **, _QWORD))v89[0] + 5))(v89, *((_QWORD *)v47 + 1));
          v47 = (MirInfoChannelAssignment *)((char *)v47 + 16);
        }
        while (v47 != v48);
      }
      goto LABEL_32;
    }
    if (v43 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      v50 = a2;
    else
      v50 = 0;
    v85 = v50;
    if (v50)
    {
      v51 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (v52)
      {
        v53 = (uint64_t *)v51;
        v54 = 8 * v52;
        do
        {
          v55 = *v53++;
          (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, v55);
          v54 -= 8;
        }
        while (v54);
      }
      goto LABEL_32;
    }
    if (v43 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
      v56 = a2;
    else
      v56 = 0;
    v84 = v56;
    if (v56)
    {
      v57 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v84);
      (*((void (**)(void **, uint64_t))v89[0] + 4))(v89, v57);
    }
    else
    {
      if (v43 == &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
        v58 = a2;
      else
        v58 = 0;
      v83 = v58;
      if (v58)
      {
        Value = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v83);
        goto LABEL_48;
      }
      if (v43 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
        v59 = a2;
      else
        v59 = 0;
      v82 = v59;
      if (!v59)
      {
        if (v43 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id)
          v60 = a2;
        else
          v60 = 0;
        v81 = v60;
        if (v60)
        {
          v61 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v81);
          (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, v61);
          LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
          (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, LHS);
        }
        else
        {
          if (v43 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id)
            v63 = a2;
          else
            v63 = 0;
          v80 = v63;
          if (v63)
          {
            RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
            if (RHS)
              (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, RHS);
            v65 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
            if (v66)
            {
              v67 = (uint64_t *)v65;
              v68 = 8 * v66;
              do
              {
                v69 = *v67++;
                (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, v69);
                v68 -= 8;
              }
              while (v68);
            }
          }
        }
        v27 = v79;
        goto LABEL_32;
      }
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v82) + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
      {
        Value = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v82);
        goto LABEL_48;
      }
    }
LABEL_32:
    if ((v78 & 1) == 0)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)a2 + 8))
      {
        v28 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)a2 + 8);
        v87 = a2;
        v88 = v28;
        if (a2)
        {
          canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v87);
          if (*(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) != &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
            (*((void (**)(void **, uint64_t))v89[0] + 4))(v89, canMapOperands);
        }
      }
      else
      {
        v87 = 0;
        v88 = 0;
      }
    }
LABEL_52:
    v34 = v7;
    v35 = v95;
    v36 = *((_QWORD *)v34 + 5);
    v37 = (void **)(v36 + 104 * v27 + 40);
    if (v37 == (void **)v104)
      goto LABEL_69;
    v38 = *(void **)v104;
    if (*(_BYTE **)v104 != &v104[16])
    {
      if (*(_QWORD *)(v36 + 104 * v27 + 40) != v36 + 104 * v27 + 56)
      {
        free(*v37);
        v38 = *(void **)v104;
      }
      *v37 = v38;
      *(_QWORD *)(v36 + 104 * v27 + 48) = *(_QWORD *)&v104[8];
      *(_QWORD *)v104 = &v104[16];
      *(_DWORD *)&v104[12] = 0;
      goto LABEL_68;
    }
    v39 = *(unsigned int *)&v104[8];
    v40 = *(unsigned int *)(v36 + 104 * v27 + 48);
    if (v40 >= *(_DWORD *)&v104[8])
    {
      if (*(_DWORD *)&v104[8])
        memmove(*v37, &v104[16], 8 * *(unsigned int *)&v104[8]);
      goto LABEL_67;
    }
    if (*(_DWORD *)(v36 + 104 * v27 + 52) >= *(_DWORD *)&v104[8])
    {
      if ((_DWORD)v40)
      {
        memmove(*v37, &v104[16], 8 * v40);
        goto LABEL_65;
      }
    }
    else
    {
      *(_DWORD *)(v36 + 104 * v27 + 48) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v36 + 104 * v27 + 40, (void *)(v36 + 104 * v27 + 56), v39, 8);
    }
    v40 = 0;
LABEL_65:
    if (v40 != *(unsigned int *)&v104[8])
      memcpy((char *)*v37 + 8 * v40, (const void *)(*(_QWORD *)v104 + 8 * v40), 8 * *(unsigned int *)&v104[8] - 8 * v40);
LABEL_67:
    *(_DWORD *)(v36 + 104 * v27 + 48) = v39;
LABEL_68:
    *(_DWORD *)&v104[8] = 0;
LABEL_69:
    if (v35)
    {
      *(_DWORD *)(v36 + 104 * v27 + 32) = *(_DWORD *)(v36 + 104 * v27 + 32) & 0xC0000000 | (v35 + 1) & 0x3FFFFFFF;
      v89[0] = off_24C02ACC8;
      llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v96);
      v41 = v90;
      if (v90 == &v92)
        goto LABEL_72;
    }
    else
    {
      v89[0] = off_24C02ACC8;
      llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v96);
      v41 = v90;
      if (v90 == &v92)
LABEL_72:
        llvm::deallocate_buffer((llvm *)v89[2], (void *)(8 * LODWORD(v89[4])));
    }
    free(v41);
    goto LABEL_72;
  }
  if ((a3 & 1) == 0)
  return *(_DWORD *)(v8 + 32) & 0x3FFFFFFF;
}

_QWORD *_ZN4llvm12function_refIFvN4mlir9AttributeEEE11callback_fnIZN12_GLOBAL__N_127DummyAliasDialectAsmPrinter30printAndVisitNestedAliasesImplENS1_4TypeEEUlT_E_EEvlS2_(_QWORD *result, uint64_t a2)
{
  if (a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 104))(*result);
  return result;
}

_QWORD *_ZN4llvm12function_refIFvN4mlir4TypeEEE11callback_fnIZN12_GLOBAL__N_127DummyAliasDialectAsmPrinter30printAndVisitNestedAliasesImplES2_EUlT_E_EEvlS2_(_QWORD *result, uint64_t a2)
{
  if (a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 112))(*result);
  return result;
}

ZinIrHalH13g *`anonymous namespace'::DummyAliasOperationPrinter::print(_anonymous_namespace_::AliasInitializer **this, mlir::Block *a2, int a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  ZinIrHalH13g *result;
  ZinIrHalH13g *v12;
  uint64_t v13;
  ZinIrHalH13g *v14;
  uint64_t v15;

  if (a3)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    v8 = *((_QWORD *)a2 + 7) - (_QWORD)v7;
    if (v8)
    {
      v9 = 8 * (v8 >> 3);
      do
      {
        v10 = *v7;
        (*((void (**)(_anonymous_namespace_::AliasInitializer **, unint64_t))*this + 4))(this, *(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF8);
        if ((*((_BYTE *)this[2] + 32) & 1) != 0)
        ++v7;
        v9 -= 8;
      }
      while (v9);
    }
  }
  v12 = (mlir::Block *)((char *)a2 + 32);
  result = (ZinIrHalH13g *)*((_QWORD *)a2 + 4);
  if (result == (mlir::Block *)((char *)a2 + 32))
  {
    v14 = (ZinIrHalH13g *)*((_QWORD *)a2 + 5);
  }
  else
  {
    ZinIrHalH13g::~ZinIrHalH13g(result);
    result = (ZinIrHalH13g *)mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((_QWORD *)(v13 + 48));
    v14 = (ZinIrHalH13g *)*((_QWORD *)a2 + 5);
    if ((_DWORD)result && (a4 & 1) == 0)
      v12 = *(ZinIrHalH13g **)v12;
  }
  while (v14 != v12)
  {
    ZinIrHalH13g::~ZinIrHalH13g(v14);
    result = (ZinIrHalH13g *)(*((uint64_t (**)(_anonymous_namespace_::AliasInitializer **, uint64_t))*this + 26))(this, v15);
    v14 = (ZinIrHalH13g *)*((_QWORD *)v14 + 1);
  }
  return result;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>(_QWORD *a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v15 = 84;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v2[223]);
}

void std::__stable_sort<std::_ClassicAlgPolicy,`anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,`anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  int v13;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  void **v34;
  const void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void **v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  __int128 v58;
  const void **v59;
  const void **v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  int v67;
  __int128 v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *__src;
  uint64_t v82;
  _BYTE __s1[28];
  void *v84;
  uint64_t v85;
  _QWORD v86[8];

  v86[6] = *MEMORY[0x24BDAC8D0];
  if (a3 < 2)
    return;
  v6 = a1;
  if (a3 == 2)
  {
    v7 = *((_DWORD *)a2 - 18);
    v8 = *(_DWORD *)(a1 + 32);
    if ((v7 & 0x3FFFFFFF) == (v8 & 0x3FFFFFFF))
    {
      v9 = v7 & 0x40000000;
      if (((v8 >> 30) & 1) == v9 >> 30)
      {
        if (!*(_BYTE *)(a1 + 24))
          return;
        if (*((_BYTE *)a2 - 80))
        {
          v10 = *(a2 - 11);
          v11 = *(_QWORD *)(a1 + 16);
          if (v11 >= v10)
            v12 = *(a2 - 11);
          else
            v12 = *(_QWORD *)(a1 + 16);
          if (v12 && (v13 = memcmp((const void *)*(a2 - 12), *(const void **)(a1 + 8), v12)) != 0)
          {
            if ((v13 & 0x80000000) == 0)
              return;
          }
          else if (v10 >= v11)
          {
            return;
          }
        }
      }
      else if (!v9)
      {
        return;
      }
    }
    else if ((v7 & 0x3FFFFFFFu) >= (v8 & 0x3FFFFFFF))
    {
      return;
    }
    return;
  }
  if ((uint64_t)a3 <= 0)
  {
    if ((uint64_t *)a1 == a2)
      return;
    v20 = (_QWORD *)(a1 + 104);
    if ((uint64_t *)(a1 + 104) == a2)
      return;
    v21 = 0;
    v22 = (_QWORD *)a1;
    while (1)
    {
      v23 = v22;
      v22 = v20;
      v24 = *((_DWORD *)v23 + 34);
      v25 = *((_DWORD *)v23 + 8);
      if ((v24 & 0x3FFFFFFF) == (v25 & 0x3FFFFFFF))
      {
        v26 = v24 & 0x40000000;
        if (((v25 >> 30) & 1) == v26 >> 30)
        {
          if (!*((_BYTE *)v23 + 24))
            goto LABEL_23;
          if (*((_BYTE *)v23 + 128))
          {
            v27 = v23[15];
            v28 = v23[2];
            if (v28 >= v27)
              v29 = v23[15];
            else
              v29 = v23[2];
            if (v29 && (v30 = memcmp((const void *)v23[14], (const void *)v23[1], v29)) != 0)
            {
              if ((v30 & 0x80000000) == 0)
                goto LABEL_23;
            }
            else if (v27 >= v28)
            {
              goto LABEL_23;
            }
          }
        }
        else if (!v26)
        {
          goto LABEL_23;
        }
      }
      else if ((v24 & 0x3FFFFFFFu) >= (v25 & 0x3FFFFFFF))
      {
        goto LABEL_23;
      }
      v31 = *v22;
      *(_OWORD *)__s1 = *((_OWORD *)v23 + 7);
      *(_OWORD *)&__s1[12] = *(_OWORD *)((char *)v23 + 124);
      v82 = v31;
      v84 = v86;
      v85 = 0x600000000;
      if (*((_DWORD *)v23 + 38))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v84, (uint64_t)(v23 + 18));
      for (i = v21; ; i -= 104)
      {
        v33 = v6 + i;
        *(_QWORD *)(v33 + 104) = *(_QWORD *)(v6 + i);
        *(_OWORD *)(v33 + 112) = *(_OWORD *)(v6 + i + 8);
        *(_OWORD *)(v33 + 124) = *(_OWORD *)(v6 + i + 20);
        v34 = (void **)(v6 + i + 144);
        v35 = *(const void **)(v6 + i + 40);
        v36 = v6 + i + 56;
        if ((const void *)v36 != v35)
          break;
        v39 = (_DWORD *)(v33 + 48);
        v40 = *(unsigned int *)(v33 + 48);
        v41 = *(unsigned int *)(v33 + 152);
        if (v41 >= v40)
        {
          if ((_DWORD)v40)
            memmove(*v34, v35, 8 * v40);
        }
        else if (*(_DWORD *)(v6 + i + 156) >= v40)
        {
          if ((_DWORD)v41)
          {
            memmove(*v34, v35, 8 * v41);
            v42 = *v39;
            if (v41 == v42)
              goto LABEL_57;
LABEL_56:
            memcpy((void *)(*(_QWORD *)(v33 + 144) + 8 * v41), (const void *)(*(_QWORD *)(v33 + 40) + 8 * v41), 8 * v42 - 8 * v41);
            goto LABEL_57;
          }
          v41 = 0;
          v42 = *v39;
          if (*v39)
            goto LABEL_56;
        }
        else
        {
          *(_DWORD *)(v33 + 152) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, (void *)(v6 + i + 160), v40, 8);
          v41 = 0;
          v42 = *v39;
          if (*v39)
            goto LABEL_56;
        }
LABEL_57:
        *(_DWORD *)(v33 + 152) = v40;
        *v39 = 0;
        if (!i)
          goto LABEL_76;
LABEL_58:
        v43 = *(_DWORD *)(v6 + i - 72);
        if ((*(_DWORD *)&__s1[24] & 0x3FFFFFFF) == (v43 & 0x3FFFFFFF))
        {
          if (((v43 >> 30) & 1) == (*(_DWORD *)&__s1[24] & 0x40000000u) >> 30)
          {
            if (!*(_BYTE *)(v6 + i - 80))
              goto LABEL_75;
            if (__s1[16])
            {
              v44 = *(_QWORD *)&__s1[8];
              v45 = *(_QWORD *)(v6 + i - 88);
              if (v45 >= *(_QWORD *)&__s1[8])
                v46 = *(_QWORD *)&__s1[8];
              else
                v46 = *(_QWORD *)(v6 + i - 88);
              if (v46 && (v47 = memcmp(*(const void **)__s1, *(const void **)(v6 + i - 96), v46)) != 0)
              {
                if ((v47 & 0x80000000) == 0)
                  goto LABEL_75;
              }
              else if (v44 >= v45)
              {
LABEL_75:
                v48 = v6 + i;
                goto LABEL_77;
              }
            }
          }
          else if ((*(_DWORD *)&__s1[24] & 0x40000000) == 0)
          {
            goto LABEL_75;
          }
        }
        else if ((*(_DWORD *)&__s1[24] & 0x3FFFFFFFu) >= (v43 & 0x3FFFFFFF))
        {
          goto LABEL_75;
        }
        v23 -= 13;
      }
      v37 = *v34;
      if ((void *)(v33 + 160) != v37)
      {
        free(v37);
        v35 = *(const void **)(v33 + 40);
      }
      v38 = v6 + i;
      *(_QWORD *)(v33 + 144) = v35;
      *(_QWORD *)(v38 + 152) = *(_QWORD *)(v6 + i + 48);
      *(_QWORD *)(v33 + 40) = v36;
      *(_DWORD *)(v38 + 52) = 0;
      *((_DWORD *)v23 + 12) = 0;
      if (i)
        goto LABEL_58;
LABEL_76:
      v48 = v6;
LABEL_77:
      v49 = v84;
      *(_QWORD *)v48 = v82;
      v50 = v6 + i;
      *(_OWORD *)(v50 + 8) = *(_OWORD *)__s1;
      *(_OWORD *)(v50 + 20) = *(_OWORD *)&__s1[12];
      if ((uint64_t *)v48 == &v82)
        goto LABEL_96;
      v51 = (void **)(v50 + 40);
      if (v49 == v86)
      {
        v52 = v85;
        v53 = *(unsigned int *)(v48 + 48);
        if (v53 >= v85)
        {
          if ((_DWORD)v85)
            memmove(*v51, v86, 8 * v85);
        }
        else
        {
          if (*(_DWORD *)(v48 + 52) < v85)
          {
            *(_DWORD *)(v48 + 48) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v51, (void *)(v48 + 56), v52, 8);
            goto LABEL_91;
          }
          if ((_DWORD)v53)
            memmove(*v51, v86, 8 * v53);
          else
LABEL_91:
            v53 = 0;
          if (v53 != v85)
            memcpy((char *)*v51 + 8 * v53, (char *)v84 + 8 * v53, 8 * v85 - 8 * v53);
        }
        *(_DWORD *)(v48 + 48) = v52;
        goto LABEL_95;
      }
      if (*v51 != (void *)(v48 + 56))
      {
        free(*v51);
        v49 = v84;
      }
      *v51 = v49;
      *(_QWORD *)(v48 + 48) = v85;
      v84 = v86;
      HIDWORD(v85) = 0;
LABEL_95:
      LODWORD(v85) = 0;
      v49 = v84;
LABEL_96:
      if (v49 != v86)
        free(v49);
LABEL_23:
      v20 = v22 + 13;
      v21 += 104;
      if (v22 + 13 == a2)
        return;
    }
  }
  v16 = (uint64_t *)a4;
  v17 = a3 >> 1;
  v18 = (_QWORD *)(a1 + 104 * (a3 >> 1));
  v19 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    return;
  }
  v54 = (uint64_t)&v16[13 * v17];
  v55 = &v16[13 * a3];
  v56 = v54;
  v57 = v16;
  __src = v16;
  while ((uint64_t *)v56 != v55)
  {
    v59 = (const void **)(v56 + 8);
    v60 = (const void **)(v57 + 1);
    v61 = *(_DWORD *)(v56 + 32);
    v62 = *((_DWORD *)v57 + 8);
    if ((v61 & 0x3FFFFFFF) != (v62 & 0x3FFFFFFF))
    {
      if ((v61 & 0x3FFFFFFFu) >= (v62 & 0x3FFFFFFF))
        goto LABEL_99;
      goto LABEL_115;
    }
    v63 = v61 & 0x40000000;
    if (((v62 >> 30) & 1) != v63 >> 30)
    {
      if (!v63)
        goto LABEL_99;
      goto LABEL_115;
    }
    if (!*((_BYTE *)v57 + 24))
      goto LABEL_99;
    if (*(_BYTE *)(v56 + 24))
    {
      v64 = *(_QWORD *)(v56 + 16);
      v65 = v57[2];
      if (v65 >= v64)
        v66 = *(_QWORD *)(v56 + 16);
      else
        v66 = v57[2];
      if (v66 && (v67 = memcmp(*v59, *v60, v66)) != 0)
      {
        v16 = __src;
        if (v67 < 0)
          goto LABEL_115;
      }
      else
      {
        v69 = v64 >= v65;
        v16 = __src;
        if (!v69)
          goto LABEL_115;
      }
LABEL_99:
      *(_QWORD *)v6 = *v57;
      v58 = *(_OWORD *)v60;
      *(_OWORD *)(v6 + 20) = *(_OWORD *)((char *)v57 + 20);
      *(_OWORD *)(v6 + 8) = v58;
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + 40, (uint64_t)(v57 + 5));
      v57 += 13;
      v6 += 104;
      if (v57 == (uint64_t *)v54)
        goto LABEL_125;
    }
    else
    {
LABEL_115:
      *(_QWORD *)v6 = *(_QWORD *)v56;
      v68 = *(_OWORD *)v59;
      *(_OWORD *)(v6 + 20) = *(_OWORD *)(v56 + 20);
      *(_OWORD *)(v6 + 8) = v68;
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + 40, v56 + 40);
      v56 += 104;
      v6 += 104;
      if (v57 == (uint64_t *)v54)
      {
LABEL_125:
        if ((uint64_t *)v56 != v55)
        {
          v74 = 0;
          do
          {
            v75 = v56 + v74;
            v76 = v6 + v74;
            *(_QWORD *)v76 = *(_QWORD *)(v56 + v74);
            v77 = *(_OWORD *)(v56 + v74 + 8);
            *(_OWORD *)(v76 + 20) = *(_OWORD *)(v56 + v74 + 20);
            *(_OWORD *)(v76 + 8) = v77;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + v74 + 40, v56 + v74 + 40);
            v74 += 104;
          }
          while ((uint64_t *)(v75 + 104) != v55);
        }
        goto LABEL_128;
      }
    }
  }
  if (v57 != (uint64_t *)v54)
  {
    v70 = 0;
    do
    {
      v71 = v6 + v70 * 8;
      v72 = &v57[v70];
      *(_QWORD *)v71 = v57[v70];
      v73 = *(_OWORD *)&v57[v70 + 1];
      *(_OWORD *)(v71 + 20) = *(_OWORD *)((char *)&v57[v70 + 2] + 4);
      *(_OWORD *)(v71 + 8) = v73;
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + v70 * 8 + 40, (uint64_t)&v57[v70 + 5]);
      v70 += 13;
    }
    while (v72 + 13 != (uint64_t *)v54);
  }
LABEL_128:
  if (v16)
  {
    v78 = a3;
    v79 = v16 + 7;
    do
    {
      v80 = (uint64_t *)*(v79 - 2);
      if (v79 != v80)
        free(v80);
      v79 += 13;
      --v78;
    }
    while (v78);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo> *&,std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo> *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  void *v15;
  uint64_t v16;
  _QWORD v17[8];

  v17[7] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  v5 = (__int128 *)(a2 + 1);
  v6 = a1 + 1;
  v14[0] = *(_OWORD *)(a1 + 1);
  *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)a1 + 20);
  v15 = v17;
  v16 = 0x600000000;
  if (*((_DWORD *)a1 + 12))
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v15, (uint64_t)(a1 + 5));
  v7 = *v5;
  *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)v5 + 12);
  *v6 = v7;
  v8 = (uint64_t)(a1 + 5);
  v9 = (void **)(a2 + 5);
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v8, (uint64_t)(a2 + 5));
  *v5 = v14[0];
  *(__int128 *)((char *)v5 + 12) = *(_OWORD *)((char *)v14 + 12);
  v10 = v15;
  if (v14 != v5)
  {
    if (v15 != v17)
    {
      if ((uint64_t *)a2[5] != a2 + 7)
      {
        free((void *)a2[5]);
        v10 = v15;
      }
      a2[5] = (uint64_t)v10;
      a2[6] = v16;
      v15 = v17;
      HIDWORD(v16) = 0;
      goto LABEL_18;
    }
    v11 = v16;
    v12 = *((unsigned int *)a2 + 12);
    if (v12 >= v16)
    {
      if ((_DWORD)v16)
        memmove(*v9, v17, 8 * v16);
      goto LABEL_17;
    }
    if (*((_DWORD *)a2 + 13) >= v16)
    {
      if ((_DWORD)v12)
      {
        memmove(*v9, v17, 8 * v12);
        v13 = v16;
        if (v12 == v16)
        {
LABEL_17:
          *((_DWORD *)a2 + 12) = v11;
LABEL_18:
          LODWORD(v16) = 0;
          v10 = v15;
          goto LABEL_19;
        }
      }
      else
      {
        v12 = 0;
        v13 = v16;
        if (!(_DWORD)v16)
          goto LABEL_17;
      }
    }
    else
    {
      *((_DWORD *)a2 + 12) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 5), a2 + 7, v11, 8);
      v12 = 0;
      v13 = v16;
      if (!(_DWORD)v16)
        goto LABEL_17;
    }
    memcpy((char *)*v9 + 8 * v12, (char *)v15 + 8 * v12, 8 * v13 - 8 * v12);
    goto LABEL_17;
  }
LABEL_19:
  if (v10 != v17)
    free(v10);
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,`anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,`anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  const void **v28;
  const void **v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  int v36;
  uint64_t v37;
  const void **v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  int v45;
  uint64_t v46;
  void **v47;
  const void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _DWORD *v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  const void **v68;
  const void **v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  size_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  BOOL v82;
  uint64_t v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v95;
  _QWORD *v96;
  const void **v97;

  if (!a3)
    return result;
  v4 = a4;
  v6 = a2;
  v7 = (_QWORD *)result;
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      *(_QWORD *)a4 = *(_QWORD *)result;
      v8 = *(_OWORD *)(result + 8);
      v9 = *(_OWORD *)(result + 20);
      *(_QWORD *)(a4 + 40) = a4 + 56;
      v10 = a4 + 40;
      *(_OWORD *)(a4 + 20) = v9;
      *(_OWORD *)(a4 + 8) = v8;
      *(_QWORD *)(a4 + 48) = 0x600000000;
      if (!*(_DWORD *)(result + 48))
        return result;
      goto LABEL_87;
    }
    if ((uint64_t)a3 <= 8)
    {
      if ((_QWORD *)result == a2)
        return result;
      *(_QWORD *)a4 = *(_QWORD *)result;
      v20 = *(_OWORD *)(result + 8);
      v21 = *(_OWORD *)(result + 20);
      *(_QWORD *)(a4 + 40) = a4 + 56;
      result = a4 + 40;
      *(_OWORD *)(a4 + 20) = v21;
      *(_OWORD *)(a4 + 8) = v20;
      *(_QWORD *)(a4 + 48) = 0x600000000;
      if (*((_DWORD *)v7 + 12))
        result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
      v22 = v7 + 13;
      if (v7 + 13 == v6)
        return result;
      v23 = 0;
      v24 = v4;
      v95 = v6;
LABEL_28:
      v26 = v22;
      v28 = (const void **)(v7 + 14);
      v29 = (const void **)(v24 + 8);
      v30 = *((_DWORD *)v7 + 34);
      v31 = *(_DWORD *)(v24 + 32);
      if ((v30 & 0x3FFFFFFF) == (v31 & 0x3FFFFFFF))
      {
        v32 = v30 & 0x40000000;
        if (((v31 >> 30) & 1) == v32 >> 30)
        {
          if (!*(_BYTE *)(v24 + 24))
            goto LABEL_78;
          if (*((_BYTE *)v7 + 128))
          {
            v33 = v7[15];
            v34 = *(_QWORD *)(v24 + 16);
            if (v34 >= v33)
              v35 = v7[15];
            else
              v35 = *(_QWORD *)(v24 + 16);
            if (v35 && (v36 = memcmp(*v28, *v29, v35)) != 0)
            {
              if ((v36 & 0x80000000) == 0)
                goto LABEL_78;
            }
            else if (v33 >= v34)
            {
LABEL_78:
              *(_QWORD *)(v24 + 104) = *v26;
              v57 = *(_OWORD *)v28;
              v58 = *(_OWORD *)((char *)v7 + 124);
              *(_QWORD *)(v24 + 144) = v24 + 160;
              result = v24 + 144;
              *(_OWORD *)(v24 + 124) = v58;
              *(_OWORD *)(v24 + 112) = v57;
              *(_QWORD *)(v24 + 152) = 0x600000000;
              if (*((_DWORD *)v7 + 38))
                goto LABEL_26;
              goto LABEL_27;
            }
          }
        }
        else if (!v32)
        {
          goto LABEL_78;
        }
      }
      else if ((v30 & 0x3FFFFFFFu) >= (v31 & 0x3FFFFFFF))
      {
        goto LABEL_78;
      }
      v97 = (const void **)(v7 + 14);
      *(_QWORD *)(v24 + 104) = *(_QWORD *)v24;
      *(_OWORD *)(v24 + 112) = *(_OWORD *)v29;
      *(_OWORD *)(v24 + 124) = *(_OWORD *)(v24 + 20);
      *(_QWORD *)(v24 + 144) = v24 + 160;
      *(_QWORD *)(v24 + 152) = 0x600000000;
      if (*(_DWORD *)(v24 + 48))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v24 + 144, v24 + 40);
      v25 = v4;
      if (v24 == v4)
        goto LABEL_25;
      v96 = v26;
      v37 = v23;
      v25 = v24;
      while (1)
      {
        while (1)
        {
          v38 = (const void **)(v4 + v37 - 96);
          v39 = *((_DWORD *)v7 + 34);
          v40 = *(_DWORD *)(v4 + v37 - 72);
          if ((v39 & 0x3FFFFFFF) == (v40 & 0x3FFFFFFF))
          {
            v41 = v39 & 0x40000000;
            if (((v40 >> 30) & 1) == v41 >> 30)
            {
              if (!*(_BYTE *)(v4 + v37 - 80))
                goto LABEL_24;
              if (*((_BYTE *)v7 + 128))
              {
                v42 = v7[15];
                v43 = *(_QWORD *)(v4 + v37 - 88);
                if (v43 >= v42)
                  v44 = v7[15];
                else
                  v44 = *(_QWORD *)(v4 + v37 - 88);
                if (v44 && (v45 = memcmp(*v97, *v38, v44)) != 0)
                {
                  if ((v45 & 0x80000000) == 0)
                    goto LABEL_24;
                }
                else if (v42 >= v43)
                {
                  v25 = v4 + v37;
LABEL_24:
                  v6 = v95;
                  v26 = v96;
LABEL_25:
                  *(_QWORD *)v25 = *v26;
                  v27 = *(_OWORD *)v97;
                  *(_OWORD *)(v25 + 20) = *(_OWORD *)((char *)v7 + 124);
                  *(_OWORD *)(v25 + 8) = v27;
                  result = v25 + 40;
LABEL_26:
                  result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 18));
LABEL_27:
                  v24 += 104;
                  v22 = v26 + 13;
                  v23 += 104;
                  v7 = v26;
                  if (v26 + 13 == v6)
                    return result;
                  goto LABEL_28;
                }
              }
            }
            else if (!v41)
            {
              goto LABEL_24;
            }
          }
          else if ((v39 & 0x3FFFFFFFu) >= (v40 & 0x3FFFFFFF))
          {
            goto LABEL_24;
          }
          v46 = v4 + v37;
          *(_QWORD *)v46 = *(_QWORD *)(v4 + v37 - 104);
          *(_OWORD *)(v46 + 8) = *(_OWORD *)v38;
          *(_OWORD *)(v46 + 20) = *(_OWORD *)(v4 + v37 - 84);
          v47 = (void **)(v4 + v37 + 40);
          v48 = *(const void **)(v4 + v37 - 64);
          v49 = v4 + v37 - 48;
          if ((const void *)v49 == v48)
            break;
          v50 = *v47;
          if ((void *)(v46 + 56) != v50)
          {
            free(v50);
            v48 = *(const void **)(v46 - 64);
          }
          v51 = v4 + v37;
          *(_QWORD *)(v46 + 40) = v48;
          v52 = (_DWORD *)(v25 - 56);
          *(_QWORD *)(v51 + 48) = *(_QWORD *)(v4 + v37 - 56);
          *(_QWORD *)(v46 - 64) = v49;
          *(_DWORD *)(v51 - 52) = 0;
          v25 -= 104;
          *v52 = 0;
          v37 -= 104;
          if (!v37)
          {
LABEL_23:
            v25 = v4;
            goto LABEL_24;
          }
        }
        v54 = (_DWORD *)(v46 - 56);
        v53 = *(unsigned int *)(v46 - 56);
        v55 = *(unsigned int *)(v46 + 48);
        if (v55 >= v53)
        {
          if ((_DWORD)v53)
            memmove(*v47, v48, 8 * v53);
          goto LABEL_44;
        }
        if (*(_DWORD *)(v4 + v37 + 52) >= v53)
        {
          if ((_DWORD)v55)
          {
            memmove(*v47, v48, 8 * v55);
            v56 = *v54;
            if (v55 != v56)
              goto LABEL_76;
          }
          else
          {
            v55 = 0;
            v56 = *v54;
            if (*v54)
LABEL_76:
              memcpy((void *)(*(_QWORD *)(v46 + 40) + 8 * v55), (const void *)(*(_QWORD *)(v46 - 64) + 8 * v55), 8 * v56 - 8 * v55);
          }
        }
        else
        {
          *(_DWORD *)(v46 + 48) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, (void *)(v4 + v37 + 56), v53, 8);
          v55 = 0;
          v56 = *v54;
          if (*v54)
            goto LABEL_76;
        }
LABEL_44:
        *(_DWORD *)(v46 + 48) = v53;
        v25 -= 104;
        *v54 = 0;
        v37 -= 104;
        if (!v37)
          goto LABEL_23;
      }
    }
    v64 = a3 >> 1;
    v65 = 104 * (a3 >> 1);
    v66 = result + v65;
    v67 = &v7[(unint64_t)v65 / 8];
    while (1)
    {
      if (v67 == v6)
      {
        if (v7 != (_QWORD *)v66)
        {
          v83 = 0;
          do
          {
            v84 = &v7[v83];
            *(_QWORD *)(v4 + v83 * 8) = v7[v83];
            v85 = *(_OWORD *)&v7[v83 + 1];
            v86 = *(_OWORD *)((char *)&v7[v83 + 2] + 4);
            *(_QWORD *)(v4 + v83 * 8 + 40) = v4 + v83 * 8 + 56;
            result = v4 + v83 * 8 + 40;
            *(_OWORD *)(result - 20) = v86;
            *(_OWORD *)(result - 32) = v85;
            *(_QWORD *)(result + 8) = 0x600000000;
            if (LODWORD(v7[v83 + 6]))
              result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v84 + 5));
            v83 += 13;
          }
          while (v84 + 13 != (_QWORD *)v66);
        }
        return result;
      }
      v68 = (const void **)(v67 + 1);
      v69 = (const void **)(v7 + 1);
      v70 = *((_DWORD *)v67 + 8);
      v71 = *((_DWORD *)v7 + 8);
      if ((v70 & 0x3FFFFFFF) != (v71 & 0x3FFFFFFF))
        break;
      v72 = v70 & 0x40000000;
      if (((v71 >> 30) & 1) != v72 >> 30)
      {
        if (!v72)
          goto LABEL_108;
        goto LABEL_103;
      }
      if (!*((_BYTE *)v7 + 24))
        goto LABEL_108;
      if (*((_BYTE *)v67 + 24))
      {
        v73 = v6;
        v74 = v67[2];
        v75 = v7[2];
        if (v75 >= v74)
          v76 = v67[2];
        else
          v76 = v7[2];
        if (v76 && (v77 = memcmp(*v68, *v69, v76)) != 0)
        {
          v6 = v73;
          if (v77 < 0)
            goto LABEL_103;
        }
        else
        {
          v82 = v74 >= v75;
          v6 = v73;
          if (!v82)
            goto LABEL_103;
        }
LABEL_108:
        *(_QWORD *)v4 = *v7;
        v80 = *(_OWORD *)v69;
        v81 = *(_OWORD *)((char *)v7 + 20);
        *(_QWORD *)(v4 + 40) = v4 + 56;
        result = v4 + 40;
        *(_OWORD *)(v4 + 20) = v81;
        *(_OWORD *)(v4 + 8) = v80;
        *(_QWORD *)(v4 + 48) = 0x600000000;
        if (*((_DWORD *)v7 + 12))
          result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
        v7 += 13;
        v4 += 104;
        if (v7 == (_QWORD *)v66)
        {
LABEL_124:
          if (v67 != v6)
          {
            v91 = 0;
            do
            {
              v92 = &v67[v91];
              *(_QWORD *)(v4 + v91 * 8) = v67[v91];
              v93 = *(_OWORD *)&v67[v91 + 1];
              v94 = *(_OWORD *)((char *)&v67[v91 + 2] + 4);
              *(_QWORD *)(v4 + v91 * 8 + 40) = v4 + v91 * 8 + 56;
              result = v4 + v91 * 8 + 40;
              *(_OWORD *)(result - 20) = v94;
              *(_OWORD *)(result - 32) = v93;
              *(_QWORD *)(result + 8) = 0x600000000;
              if (LODWORD(v67[v91 + 6]))
                result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v92 + 5));
              v91 += 13;
            }
            while (v92 + 13 != v6);
          }
          return result;
        }
      }
      else
      {
LABEL_103:
        *(_QWORD *)v4 = *v67;
        v78 = *(_OWORD *)v68;
        v79 = *(_OWORD *)((char *)v67 + 20);
        *(_QWORD *)(v4 + 40) = v4 + 56;
        result = v4 + 40;
        *(_OWORD *)(v4 + 20) = v79;
        *(_OWORD *)(v4 + 8) = v78;
        *(_QWORD *)(v4 + 48) = 0x600000000;
        if (*((_DWORD *)v67 + 12))
          result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v67 + 5));
        v67 += 13;
        v4 += 104;
        if (v7 == (_QWORD *)v66)
          goto LABEL_124;
      }
    }
    if ((v70 & 0x3FFFFFFFu) >= (v71 & 0x3FFFFFFF))
      goto LABEL_108;
    goto LABEL_103;
  }
  v11 = (const void **)(a2 - 12);
  v12 = (const void **)(result + 8);
  v13 = *((_DWORD *)a2 - 18);
  v14 = *(_DWORD *)(result + 32);
  if ((v13 & 0x3FFFFFFF) != (v14 & 0x3FFFFFFF))
  {
    if ((v13 & 0x3FFFFFFFu) < (v14 & 0x3FFFFFFF))
      goto LABEL_84;
    goto LABEL_119;
  }
  v15 = v13 & 0x40000000;
  if (((v14 >> 30) & 1) != v15 >> 30)
  {
    if (v15)
      goto LABEL_84;
    goto LABEL_119;
  }
  if (!*(_BYTE *)(result + 24))
    goto LABEL_119;
  if (!*((_BYTE *)a2 - 80))
    goto LABEL_84;
  v16 = *(a2 - 11);
  v17 = *(_QWORD *)(result + 16);
  if (v17 >= v16)
    v18 = *(a2 - 11);
  else
    v18 = *(_QWORD *)(result + 16);
  if (!v18 || (v19 = memcmp(*v11, *v12, v18)) == 0)
  {
    if (v16 < v17)
      goto LABEL_84;
LABEL_119:
    *(_QWORD *)v4 = *v7;
    v87 = *(_OWORD *)v12;
    v88 = *(_OWORD *)((char *)v7 + 20);
    *(_QWORD *)(v4 + 40) = v4 + 56;
    result = v4 + 40;
    *(_OWORD *)(v4 + 20) = v88;
    *(_OWORD *)(v4 + 8) = v87;
    *(_QWORD *)(v4 + 48) = 0x600000000;
    if (*((_DWORD *)v7 + 12))
      result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
    *(_QWORD *)(v4 + 104) = *(v6 - 13);
    v89 = *(_OWORD *)v11;
    v90 = *(_OWORD *)((char *)v6 - 84);
    *(_QWORD *)(v4 + 144) = v4 + 160;
    v10 = v4 + 144;
    *(_OWORD *)(v10 - 20) = v90;
    *(_OWORD *)(v10 - 32) = v89;
    *(_QWORD *)(v10 + 8) = 0x600000000;
    if (*((_DWORD *)v6 - 14))
    {
      v63 = (uint64_t)(v6 - 8);
      return llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v10, v63);
    }
    return result;
  }
  if ((v19 & 0x80000000) == 0)
    goto LABEL_119;
LABEL_84:
  *(_QWORD *)v4 = *(v6 - 13);
  v59 = *(_OWORD *)v11;
  v60 = *(_OWORD *)((char *)v6 - 84);
  *(_QWORD *)(v4 + 40) = v4 + 56;
  result = v4 + 40;
  *(_OWORD *)(v4 + 20) = v60;
  *(_OWORD *)(v4 + 8) = v59;
  *(_QWORD *)(v4 + 48) = 0x600000000;
  if (*((_DWORD *)v6 - 14))
    result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v6 - 8));
  *(_QWORD *)(v4 + 104) = *v7;
  v61 = *(_OWORD *)v12;
  v62 = *(_OWORD *)((char *)v7 + 20);
  *(_QWORD *)(v4 + 144) = v4 + 160;
  v10 = v4 + 144;
  *(_OWORD *)(v10 - 20) = v62;
  *(_OWORD *)(v10 - 32) = v61;
  *(_QWORD *)(v10 + 8) = 0x600000000;
  if (*((_DWORD *)v7 + 12))
  {
LABEL_87:
    v63 = (uint64_t)(v7 + 5);
    return llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v10, v63);
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,`anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,`anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  size_t v33;
  unint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  size_t v46;
  int v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  size_t v54;
  unint64_t v55;
  uint64_t *v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  size_t v60;
  size_t v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *i;
  uint64_t *v76;
  uint64_t *v77;
  _BOOL4 v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  __int128 v101;
  uint64_t *v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  size_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  __int128 v114;
  const void **v115;
  const void **v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  size_t v122;
  int v123;
  __int128 v124;
  unint64_t v125;
  uint64_t *v126;
  __int128 v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  __int128 v131;
  unint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  void *__s1;
  void *__s1a;
  size_t v137;
  size_t v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v148;

  if (!a5)
    return;
  while (1)
  {
    if (a5 <= a7 || a4 <= a7)
    {
      if (a4 > a5)
      {
        if (a2 == a3)
          return;
        v86 = 0;
        v87 = 0;
        v88 = a6;
        do
        {
          v89 = &a2[v86];
          a6[v86] = a2[v86];
          v90 = *(_OWORD *)&a2[v86 + 1];
          v91 = *(_OWORD *)((char *)&a2[v86 + 2] + 4);
          a6[v86 + 5] = (uint64_t)&a6[v86 + 7];
          v92 = (uint64_t)&a6[v86 + 5];
          *(_OWORD *)(v92 - 20) = v91;
          *(_OWORD *)(v92 - 32) = v90;
          *(_QWORD *)(v92 + 8) = 0x600000000;
          if (LODWORD(a2[v86 + 6]))
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v92, (uint64_t)(v89 + 5));
          ++v87;
          v86 += 13;
        }
        while (v89 + 13 != a3);
        if (v86 * 8)
        {
          v98 = &a6[v86];
          v99 = a3 - 13;
          do
          {
            if (a2 == a1)
            {
              v125 = 0;
              do
              {
                v126 = &v99[v125];
                *v126 = v98[v125 - 13];
                v127 = *(_OWORD *)&v98[v125 - 12];
                *(_OWORD *)((char *)v126 + 20) = *(_OWORD *)((char *)&v98[v125 - 10] - 4);
                *(_OWORD *)(v126 + 1) = v127;
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v99[v125 + 5], (uint64_t)&v98[v125 - 8]);
                v125 -= 13;
              }
              while (&v98[v125] != v88);
              break;
            }
            v102 = v98 - 12;
            v103 = *((_DWORD *)v98 - 18);
            v104 = *((_DWORD *)a2 - 18);
            if ((v103 & 0x3FFFFFFF) == (v104 & 0x3FFFFFFF))
            {
              v105 = v103 & 0x40000000;
              if (((v104 >> 30) & 1) == v105 >> 30)
              {
                if (*((_BYTE *)a2 - 80))
                {
                  if (!*((_BYTE *)v98 - 80))
                    goto LABEL_174;
                  v106 = *(v98 - 11);
                  v107 = *(a2 - 11);
                  if (v107 >= v106)
                    v108 = *(v98 - 11);
                  else
                    v108 = *(a2 - 11);
                  if (v108 && (v109 = memcmp((const void *)*v102, (const void *)*(a2 - 12), v108)) != 0)
                  {
                    v88 = a6;
                    if (v109 < 0)
                      goto LABEL_174;
                  }
                  else
                  {
                    v16 = v106 >= v107;
                    v88 = a6;
                    if (!v16)
                    {
LABEL_174:
                      v102 = a2 - 12;
                      v100 = a2;
                      a2 -= 13;
                      goto LABEL_158;
                    }
                  }
                }
              }
              else if (v105)
              {
                goto LABEL_174;
              }
            }
            else if ((v103 & 0x3FFFFFFFu) < (v104 & 0x3FFFFFFF))
            {
              goto LABEL_174;
            }
            v100 = v98;
            v98 -= 13;
LABEL_158:
            *v99 = *(v100 - 13);
            v101 = *(_OWORD *)v102;
            *(_OWORD *)((char *)v99 + 20) = *(_OWORD *)((char *)v102 + 12);
            *(_OWORD *)(v99 + 1) = v101;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v99 + 5), (uint64_t)(v100 - 8));
            v99 -= 13;
          }
          while (v98 != v88);
        }
LABEL_205:
        if (v88 && v87)
        {
          v132 = 0;
          v133 = a6 + 7;
          do
          {
            v134 = (_QWORD *)*(v133 - 2);
            if (v133 != v134)
              free(v134);
            ++v132;
            v133 += 13;
          }
          while (v132 < v87);
        }
        return;
      }
      if (a1 == a2)
        return;
      v93 = 0;
      v87 = 0;
      v88 = a6;
      do
      {
        v94 = &a1[v93];
        a6[v93] = a1[v93];
        v95 = *(_OWORD *)&a1[v93 + 1];
        v96 = *(_OWORD *)((char *)&a1[v93 + 2] + 4);
        a6[v93 + 5] = (uint64_t)&a6[v93 + 7];
        v97 = (uint64_t)&a6[v93 + 5];
        *(_OWORD *)(v97 - 20) = v96;
        *(_OWORD *)(v97 - 32) = v95;
        *(_QWORD *)(v97 + 8) = 0x600000000;
        if (LODWORD(a1[v93 + 6]))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v97, (uint64_t)(v94 + 5));
        ++v87;
        v93 += 13;
      }
      while (v94 + 13 != a2);
      if (!(v93 * 8))
        goto LABEL_205;
      v110 = &a6[v93];
      v111 = (uint64_t)&a6[v93 - 13];
      v112 = a6;
      v113 = a3;
      while (1)
      {
        if (a2 == v113)
        {
          v128 = 0;
          do
          {
            v129 = &a1[v128];
            v130 = &v112[v128];
            *v129 = v112[v128];
            v131 = *(_OWORD *)&v112[v128 + 1];
            *(_OWORD *)((char *)v129 + 20) = *(_OWORD *)((char *)&v112[v128 + 2] + 4);
            *(_OWORD *)(v129 + 1) = v131;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&a1[v128 + 5], (uint64_t)&v112[v128 + 5]);
            v128 += 13;
          }
          while ((uint64_t *)v111 != v130);
          goto LABEL_205;
        }
        v115 = (const void **)(a2 + 1);
        v116 = (const void **)(v112 + 1);
        v117 = *((_DWORD *)a2 + 8);
        v118 = *((_DWORD *)v112 + 8);
        if ((v117 & 0x3FFFFFFF) != (v118 & 0x3FFFFFFF))
        {
          if ((v117 & 0x3FFFFFFFu) < (v118 & 0x3FFFFFFF))
            goto LABEL_195;
          goto LABEL_179;
        }
        v119 = v117 & 0x40000000;
        if (((v118 >> 30) & 1) != v119 >> 30)
          break;
        if (!*((_BYTE *)v112 + 24))
          goto LABEL_179;
        if (*((_BYTE *)a2 + 24))
        {
          v120 = a2[2];
          v121 = v112[2];
          if (v121 >= v120)
            v122 = a2[2];
          else
            v122 = v112[2];
          if (v122 && (v123 = memcmp(*v115, *v116, v122)) != 0)
          {
            v88 = a6;
            if (v123 < 0)
              goto LABEL_195;
          }
          else
          {
            v16 = v120 >= v121;
            v88 = a6;
            if (!v16)
              goto LABEL_195;
          }
LABEL_179:
          *a1 = *v112;
          v114 = *(_OWORD *)v116;
          *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)v112 + 20);
          *(_OWORD *)(a1 + 1) = v114;
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a1 + 5), (uint64_t)(v112 + 5));
          v112 += 13;
          v113 = a3;
          a1 += 13;
          if (v110 == v112)
            goto LABEL_205;
        }
        else
        {
LABEL_195:
          *a1 = *a2;
          v124 = *(_OWORD *)v115;
          *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)a2 + 20);
          *(_OWORD *)(a1 + 1) = v124;
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
          a2 += 13;
          v113 = a3;
          a1 += 13;
          if (v110 == v112)
            goto LABEL_205;
        }
      }
      if (!v119)
        goto LABEL_179;
      goto LABEL_195;
    }
    if (!a4)
      return;
    v10 = 0;
    v11 = *((_DWORD *)a2 + 8);
    v12 = v11 & 0x3FFFFFFF;
    v13 = v11 & 0x40000000;
    v14 = (v11 >> 30) & 1;
    v15 = -a4;
    v148 = a5;
    while (1)
    {
      v17 = a1[v10 + 4];
      if (v12 != (v17 & 0x3FFFFFFF))
      {
        if (v12 < (v17 & 0x3FFFFFFF))
          goto LABEL_22;
        goto LABEL_7;
      }
      if (v14 == ((v17 >> 30) & 1))
        break;
      if (v13)
        goto LABEL_22;
LABEL_7:
      v10 += 13;
      v16 = __CFADD__(v15++, 1);
      if (v16)
        return;
    }
    if (!LOBYTE(a1[v10 + 3]))
      goto LABEL_7;
    if (!*((_BYTE *)a2 + 24))
      goto LABEL_22;
    v18 = a2[2];
    v19 = a1[v10 + 2];
    if (v19 >= v18)
      v20 = a2[2];
    else
      v20 = a1[v10 + 2];
    if (v20)
    {
      v21 = memcmp((const void *)a2[1], (const void *)a1[v10 + 1], v20);
      a5 = v148;
      if (v21)
      {
        if (v21 < 0)
          goto LABEL_22;
        goto LABEL_7;
      }
    }
    if (v18 >= v19)
      goto LABEL_7;
LABEL_22:
    v22 = -v15;
    v23 = &a1[v10];
    if (-v15 >= a5)
      break;
    if (a5 >= 0)
      v24 = a5;
    else
      v24 = a5 + 1;
    v25 = v24 >> 1;
    v26 = a2;
    v144 = &a1[v10];
    if (v23 != a2)
    {
      v27 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)a1 - v10 * 8) >> 3);
      v28 = &a2[13 * v25];
      v29 = *((_DWORD *)v28 + 8);
      v30 = v29 & 0x3FFFFFFF;
      v31 = v29 & 0x40000000;
      v32 = (v29 >> 30) & 1;
      if (*((_BYTE *)v28 + 24))
      {
        v33 = v28[2];
        __s1 = (void *)v28[1];
        v137 = v33;
        v26 = &a1[v10];
        v141 = v25;
        v139 = v32;
        if (!v31)
        {
          while (1)
          {
            v34 = v27 >> 1;
            v35 = &v26[13 * (v27 >> 1)];
            v36 = *((_DWORD *)v35 + 8);
            if (v30 == (v36 & 0x3FFFFFFF))
            {
              if (v32 == ((v36 >> 30) & 1) && LOBYTE(v26[13 * v34 + 3]))
              {
                v37 = &v26[13 * v34];
                v38 = v37[2];
                if (v38 >= v33)
                  v39 = v33;
                else
                  v39 = v37[2];
                if (v39 && (v40 = memcmp(__s1, (const void *)v35[1], v39), v33 = v137, v32 = v139, v25 = v141, v40))
                {
                  if (v40 < 0)
                    goto LABEL_31;
                }
                else if (v33 < v38)
                {
                  goto LABEL_31;
                }
              }
            }
            else if (v30 < (v36 & 0x3FFFFFFF))
            {
              goto LABEL_31;
            }
            v26 = v35 + 13;
            v34 = v27 + ~v34;
LABEL_31:
            v27 = v34;
            if (!v34)
              goto LABEL_109;
          }
        }
        while (1)
        {
          v41 = v27 >> 1;
          v42 = &v26[13 * (v27 >> 1)];
          v43 = *((_DWORD *)v42 + 8);
          if (v30 == (v43 & 0x3FFFFFFF))
          {
            if (v32 != ((v43 >> 30) & 1))
              goto LABEL_47;
            if (LOBYTE(v26[13 * v41 + 3]))
            {
              v44 = &v26[13 * v41];
              v45 = v44[2];
              if (v45 >= v33)
                v46 = v33;
              else
                v46 = v44[2];
              if (v46 && (v47 = memcmp(__s1, (const void *)v42[1], v46), v33 = v137, v32 = v139, v25 = v141, v47))
              {
                if (v47 < 0)
                  goto LABEL_47;
              }
              else if (v33 < v45)
              {
                goto LABEL_47;
              }
            }
          }
          else if (v30 < (v43 & 0x3FFFFFFF))
          {
            goto LABEL_47;
          }
          v26 = v42 + 13;
          v41 = v27 + ~v41;
LABEL_47:
          v27 = v41;
          if (!v41)
            goto LABEL_109;
        }
      }
      v26 = &a1[v10];
      if (!v31)
      {
        while (1)
        {
          v68 = v27 >> 1;
          v69 = &v26[13 * (v27 >> 1)];
          v70 = *((_DWORD *)v69 + 8);
          if (v30 == (v70 & 0x3FFFFFFF))
          {
            if (v32 == ((v70 >> 30) & 1) && LOBYTE(v26[13 * v68 + 3]))
              goto LABEL_94;
          }
          else if (v30 < (v70 & 0x3FFFFFFF))
          {
            goto LABEL_94;
          }
          v26 = v69 + 13;
          v68 = v27 + ~v68;
LABEL_94:
          v27 = v68;
          if (!v68)
            goto LABEL_109;
        }
      }
      do
      {
        v71 = v27 >> 1;
        v72 = &v26[13 * (v27 >> 1)];
        v73 = *((_DWORD *)v72 + 8);
        if (v30 == (v73 & 0x3FFFFFFF))
        {
          if (v32 != ((v73 >> 30) & 1) || LOBYTE(v26[13 * v71 + 3]))
            goto LABEL_102;
        }
        else if (v30 < (v73 & 0x3FFFFFFF))
        {
          goto LABEL_102;
        }
        v26 = v72 + 13;
        v71 = v27 + ~v71;
LABEL_102:
        v27 = v71;
      }
      while (v71);
    }
LABEL_109:
    v48 = &a2[13 * v25];
    v65 = 0x4EC4EC4EC4EC4EC5 * (((char *)v26 - (char *)a1 - v10 * 8) >> 3);
    v63 = a7;
    v66 = v148;
    v23 = v144;
    v67 = v48;
    if (v26 != a2)
      goto LABEL_110;
LABEL_130:
    a4 = -(v65 + v15);
    v80 = v66 - v25;
    if (v65 + v25 >= v66 - (v65 + v25) - v15)
    {
      v81 = -(v65 + v15);
      v82 = v25;
      a4 = v65;
      a3 = v67;
      a5 = v82;
      a1 = v23;
      a2 = v26;
      if (!v82)
        return;
    }
    else
    {
      a5 = v80;
      a1 = v67;
      a2 = v48;
      if (!v80)
        return;
    }
  }
  if (v15 != -1)
  {
    if (v15 > 0)
      v22 = 1 - v15;
    v48 = a3;
    v142 = v22 >> 1;
    if (a3 == a2)
    {
      v63 = a7;
LABEL_89:
      v64 = &a1[13 * v142];
      v65 = v142;
      v26 = &v64[v10];
      v25 = 0x4EC4EC4EC4EC4EC5 * (v48 - a2);
      v66 = v148;
      v67 = v48;
      if (&v64[v10] == a2)
        goto LABEL_130;
LABEL_110:
      v67 = v26;
      if (a2 != v48)
      {
        v143 = v65;
        v74 = v25;
        v67 = v26 + 13;
        for (i = a2 + 13; i != v48; i += 13)
        {
          if (v67 == a2)
            a2 = i;
          v67 += 13;
        }
        if (v67 != a2)
        {
          v76 = v67;
          v77 = a2;
          while (1)
          {
            a2 += 13;
            v78 = v76 + 13 == v77;
            if (a2 == v48)
            {
              if (v76 + 13 == v77)
                goto LABEL_129;
              a2 = v77 + 13;
              v76 += 26;
              while (1)
              {
                v78 = v76 == v77;
                if (a2 != v48)
                  break;
                v79 = v76 == v77;
                v76 += 13;
                if (v79)
                  goto LABEL_129;
              }
            }
            else
            {
              v76 += 13;
            }
            if (v78)
              v77 = a2;
          }
        }
        v67 = a2;
LABEL_129:
        v66 = v148;
        v25 = v74;
        v65 = v143;
      }
      goto LABEL_130;
    }
    v49 = 0x4EC4EC4EC4EC4EC5 * (a3 - a2);
    v50 = &a1[13 * (v22 >> 1) + v10];
    v51 = *((_DWORD *)v50 + 8);
    v52 = v51 & 0x3FFFFFFF;
    v53 = (v51 >> 30) & 1;
    if (*((_BYTE *)v50 + 24))
    {
      v54 = v50[2];
      __s1a = (void *)v50[1];
      v138 = v54;
      v48 = a2;
      v140 = (v51 >> 30) & 1;
      while (1)
      {
        v55 = v49 >> 1;
        v56 = &v48[13 * (v49 >> 1)];
        v57 = *((_DWORD *)v56 + 8);
        if ((v57 & 0x3FFFFFFF) == v52)
        {
          v58 = v57 & 0x40000000;
          if (v53 == v58 >> 30)
          {
            if (LOBYTE(v48[13 * v55 + 3]))
            {
              v59 = &v48[13 * v55];
              v60 = v59[2];
              if (v54 >= v60)
                v61 = v59[2];
              else
                v61 = v54;
              if (v61 && (v62 = memcmp((const void *)v56[1], __s1a, v61), v54 = v138, v53 = v140, v62))
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_69;
              }
              else if (v60 >= v54)
              {
                goto LABEL_69;
              }
            }
          }
          else if (!v58)
          {
            goto LABEL_69;
          }
        }
        else if ((v57 & 0x3FFFFFFFu) >= v52)
        {
          goto LABEL_69;
        }
        v48 = v56 + 13;
        v55 = v49 + ~v55;
LABEL_69:
        v49 = v55;
        if (!v55)
        {
          v63 = a7;
          goto LABEL_87;
        }
      }
    }
    v48 = a2;
    v63 = a7;
    while (2)
    {
      v83 = v49 >> 1;
      v84 = &v48[13 * (v49 >> 1)];
      v85 = *((_DWORD *)v84 + 8);
      if ((v85 & 0x3FFFFFFF) == v52)
      {
        if ((v85 & 0x40000000) == 0 || ((v85 >> 30) & 1) == v53)
        {
LABEL_137:
          v49 = v83;
          if (!v83)
          {
LABEL_87:
            v23 = &a1[v10];
            goto LABEL_89;
          }
          continue;
        }
      }
      else if ((v85 & 0x3FFFFFFF) >= v52)
      {
        goto LABEL_137;
      }
      break;
    }
    v48 = v84 + 13;
    v83 = v49 + ~v83;
    goto LABEL_137;
  }
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _DWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 4;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 4;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *(_QWORD *)buffer = a3;
  buffer[2] = 0;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

llvm::raw_ostream *`anonymous namespace'::AliasState::printAliases(llvm::raw_ostream *result, unsigned int a2, llvm::raw_ostream **a3, _DWORD *a4, int a5)
{
  llvm::raw_ostream *i;
  uint64_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  const char *v12;
  char *v13;
  void *v14;
  llvm::raw_ostream *v15;
  const char *v16;
  size_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  uint64_t *v26;

  i = result;
  if (a2)
  {
    v9 = 32 * a2;
    for (i = result; a5 != *((_DWORD *)i + 6) >> 31; i = (llvm::raw_ostream *)((char *)i + 32))
    {
      v9 -= 32;
      if (!v9)
        return result;
    }
  }
  v10 = (llvm::raw_ostream *)((char *)result + 32 * a2);
  if (i != v10)
  {
LABEL_7:
    v11 = *a3;
    if ((*((_BYTE *)i + 27) & 0x40) != 0)
      v12 = "!";
    else
      v12 = "#";
    v13 = (char *)*((_QWORD *)v11 + 4);
    if (*((char **)v11 + 3) == v13)
    {
      v15 = llvm::raw_ostream::write(*a3, v12, 1uLL);
      v14 = (void *)*((_QWORD *)v15 + 4);
      v16 = (const char *)*((_QWORD *)i + 1);
      v17 = *((_QWORD *)i + 2);
      if (v17 > *((_QWORD *)v15 + 3) - (_QWORD)v14)
        goto LABEL_12;
    }
    else
    {
      *v13 = *v12;
      v14 = (void *)(*((_QWORD *)v11 + 4) + 1);
      *((_QWORD *)v11 + 4) = v14;
      v15 = v11;
      v16 = (const char *)*((_QWORD *)i + 1);
      v17 = *((_QWORD *)i + 2);
      if (v17 > *((_QWORD *)v11 + 3) - (_QWORD)v14)
      {
LABEL_12:
        llvm::raw_ostream::write(v15, v16, v17);
        goto LABEL_16;
      }
    }
    if (v17)
    {
      memcpy(v14, v16, v17);
      *((_QWORD *)v15 + 4) += v17;
    }
LABEL_16:
    v18 = *((_DWORD *)i + 6);
    if ((v18 & 0x3FFFFFFF) != 0)
      llvm::raw_ostream::operator<<(v11, v18 & 0x3FFFFFFF);
    v19 = *a3;
    v20 = *((_QWORD *)*a3 + 4);
    if ((unint64_t)(*((_QWORD *)*a3 + 3) - v20) > 2)
    {
      *(_BYTE *)(v20 + 2) = 32;
      *(_WORD *)v20 = 15648;
      *((_QWORD *)v19 + 4) += 3;
      v21 = *(uint64_t **)i;
      v22 = **(_QWORD **)i;
      if ((*((_BYTE *)i + 27) & 0x40) != 0)
      {
LABEL_20:
        if (mlir::AbstractType::hasTrait<mlir::TypeTrait::IsMutable>(v22))
        {
          v23 = *a3;
          v26 = v21;
          mlir::Type::print((llvm::raw_ostream *)&v26, v23);
        }
        else
        {
          mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)a3, (uint64_t **)v21);
        }
        goto LABEL_27;
      }
    }
    else
    {
      llvm::raw_ostream::write(v19, " = ", 3uLL);
      v21 = *(uint64_t **)i;
      v22 = **(_QWORD **)i;
      if ((*((_BYTE *)i + 27) & 0x40) != 0)
        goto LABEL_20;
    }
    if (mlir::AbstractAttribute::hasTrait<mlir::AttributeTrait::IsMutable>(v22))
    {
      v24 = *a3;
      v26 = v21;
      mlir::Attribute::print((mlir::Attribute *)&v26, v24, 0);
    }
    else
    {
      mlir::AsmPrinter::Impl::printAttributeImpl(a3, (uint64_t **)v21, 0);
    }
LABEL_27:
    result = *a3;
    ++*a4;
    v25 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v25 >= *((_QWORD *)result + 3))
    {
      result = llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v25 + 1;
      *v25 = 10;
    }
    while (1)
    {
      i = (llvm::raw_ostream *)((char *)i + 32);
      if (i == v10)
        break;
      if (a5 == *((_DWORD *)i + 6) >> 31)
      {
        if (i != v10)
          goto LABEL_7;
        return result;
      }
    }
  }
  return result;
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_21OpAsmDialectInterfaceEJRNS_9SetVectorINSD_24AsmDialectResourceHandleENS_11SmallVectorISL_Lj0EEENS_8DenseSetISL_NS_12DenseMapInfoISL_vEEEELj0EEEEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, void **), uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  size_t v11;
  size_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  _WORD *v18;
  const char *v19;
  size_t v20;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **p_p;
  void *__p;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v9 = *(_QWORD *)(a1 + 24);
  (**(void (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v34 = *(_OWORD *)(a1 + 8);
  v35 = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v36 = *(_OWORD *)(a1 + 32);
  v37 = v10;
  if (!*(_BYTE *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
    v13 = *(llvm::raw_ostream **)(v9 + 16);
    v14 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)v14 = 538976288;
      v15 = (_WORD *)(*((_QWORD *)v13 + 4) + 6);
      *((_QWORD *)v13 + 4) = v15;
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          v15 = (_WORD *)(*((_QWORD *)v13 + 4) + a3);
          *((_QWORD *)v13 + 4) = v15;
        }
        if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
          goto LABEL_12;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      v15 = (_WORD *)*((_QWORD *)v13 + 4);
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
        goto LABEL_9;
    }
    v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    v15 = (_WORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      a4(a5, *(void ***)(v9 + 16));
      return;
    }
LABEL_21:
    *v15 = 8250;
    *((_QWORD *)v13 + 4) += 2;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v9 + 48);
  __p = 0;
  v32 = 0;
  v33 = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v22 = &unk_24C02DC40;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v22, 0, 0, 0);
  a4(a5, &v22);
  v12 = HIBYTE(v33);
  if (v33 < 0)
    v12 = v32;
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
  v16 = *(llvm::raw_ostream **)(v9 + 16);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)v17 = 538976288;
    v18 = (_WORD *)(*((_QWORD *)v16 + 4) + 6);
    *((_QWORD *)v16 + 4) = v18;
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        v18 = (_WORD *)(*((_QWORD *)v16 + 4) + a3);
        *((_QWORD *)v16 + 4) = v18;
      }
      if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
        goto LABEL_18;
      goto LABEL_25;
    }
  }
  else
  {
    v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    v18 = (_WORD *)*((_QWORD *)v16 + 4);
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      goto LABEL_15;
  }
  v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  v18 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
  {
LABEL_18:
    v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_26;
  }
LABEL_25:
  *v18 = 8250;
  *((_QWORD *)v16 + 4) += 2;
LABEL_26:
  if (v33 >= 0)
    v19 = (const char *)&__p;
  else
    v19 = (const char *)__p;
  if (v33 >= 0)
    v20 = HIBYTE(v33);
  else
    v20 = v32;
  llvm::raw_ostream::write(v16, v19, v20);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
  if (SHIBYTE(v33) < 0)
    goto LABEL_33;
}

llvm::raw_ostream *_ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  int v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  void *v9;
  unsigned __int8 *v10;
  const char *v11;
  size_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  llvm::raw_ostream *result;
  _BYTE *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _DWORD *v26;
  unsigned __int8 *v27;
  const void *v28;
  size_t v29;
  unsigned __int8 *v30;

  v2 = a1[2];
  v3 = **a1;
  **a1 = 1;
  if (v3)
  {
LABEL_13:
    v14 = a1[4];
    v15 = *v14;
    *v14 = 1;
    if (v15)
      goto LABEL_14;
LABEL_26:
    if (!*a1[5])
      goto LABEL_30;
    v22 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
    v23 = (_BYTE *)*((_QWORD *)v22 + 4);
    if (*((_BYTE **)v22 + 3) == v23)
    {
      v22 = llvm::raw_ostream::write(v22, ",", 1uLL);
      v24 = (_BYTE *)*((_QWORD *)v22 + 4);
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v24 < *((_QWORD *)v22 + 3))
        goto LABEL_29;
    }
    else
    {
      *v23 = 44;
      v24 = (_BYTE *)(*((_QWORD *)v22 + 4) + 1);
      *((_QWORD *)v22 + 4) = v24;
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v24 < *((_QWORD *)v22 + 3))
      {
LABEL_29:
        *((_QWORD *)v22 + 4) = v24 + 1;
        *v24 = 10;
LABEL_30:
        v25 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
        v26 = (_DWORD *)*((_QWORD *)v25 + 4);
        if (*((_QWORD *)v25 + 3) - (_QWORD)v26 <= 3uLL)
          goto LABEL_31;
        goto LABEL_39;
      }
    }
    llvm::raw_ostream::write(v22, 10);
    v25 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
    v26 = (_DWORD *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 <= 3uLL)
    {
LABEL_31:
      v25 = llvm::raw_ostream::write(v25, "    ", 4uLL);
      result = (llvm::raw_ostream *)*((_QWORD *)v25 + 4);
      v27 = a1[6];
      v28 = *(const void **)v27;
      v29 = *((_QWORD *)v27 + 1);
      if (v29 <= *((_QWORD *)v25 + 3) - (_QWORD)result)
        goto LABEL_32;
      goto LABEL_40;
    }
LABEL_39:
    *v26 = 538976288;
    result = (llvm::raw_ostream *)(*((_QWORD *)v25 + 4) + 4);
    *((_QWORD *)v25 + 4) = result;
    v30 = a1[6];
    v28 = *(const void **)v30;
    v29 = *((_QWORD *)v30 + 1);
    if (v29 <= *((_QWORD *)v25 + 3) - (_QWORD)result)
    {
LABEL_32:
      if (v29)
      {
        memcpy(result, v28, v29);
        result = (llvm::raw_ostream *)(*((_QWORD *)v25 + 4) + v29);
        *((_QWORD *)v25 + 4) = result;
      }
      if (*((_QWORD *)v25 + 3) - (_QWORD)result <= 2uLL)
      {
LABEL_35:
        result = llvm::raw_ostream::write(v25, ": {", 3uLL);
        v25 = result;
        v18 = (_BYTE *)*((_QWORD *)result + 4);
        ++*((_DWORD *)v2 + 18);
        if ((unint64_t)v18 >= *((_QWORD *)result + 3))
          return llvm::raw_ostream::write(v25, 10);
LABEL_42:
        *((_QWORD *)v25 + 4) = v18 + 1;
        goto LABEL_43;
      }
LABEL_41:
      *((_BYTE *)result + 2) = 123;
      *(_WORD *)result = 8250;
      v18 = (_BYTE *)(*((_QWORD *)v25 + 4) + 3);
      *((_QWORD *)v25 + 4) = v18;
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v18 >= *((_QWORD *)v25 + 3))
        return llvm::raw_ostream::write(v25, 10);
      goto LABEL_42;
    }
LABEL_40:
    v25 = llvm::raw_ostream::write(v25, (const char *)v28, v29);
    result = (llvm::raw_ostream *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)result <= 2uLL)
      goto LABEL_35;
    goto LABEL_41;
  }
  if (!*a1[1])
  {
LABEL_6:
    v7 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
    v8 = (_WORD *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
      goto LABEL_7;
    goto LABEL_22;
  }
  v4 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    v4 = llvm::raw_ostream::write(v4, ",", 1uLL);
    v6 = (_BYTE *)*((_QWORD *)v4 + 4);
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v6 < *((_QWORD *)v4 + 3))
      goto LABEL_5;
  }
  else
  {
    *v5 = 44;
    v6 = (_BYTE *)(*((_QWORD *)v4 + 4) + 1);
    *((_QWORD *)v4 + 4) = v6;
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v6 < *((_QWORD *)v4 + 3))
    {
LABEL_5:
      *((_QWORD *)v4 + 4) = v6 + 1;
      *v6 = 10;
      goto LABEL_6;
    }
  }
  llvm::raw_ostream::write(v4, 10);
  v7 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
  v8 = (_WORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
  {
LABEL_7:
    v7 = llvm::raw_ostream::write(v7, "  ", 2uLL);
    v9 = (void *)*((_QWORD *)v7 + 4);
    v10 = a1[3];
    v11 = *(const char **)v10;
    v12 = *((_QWORD *)v10 + 1);
    if (v12 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
      goto LABEL_8;
LABEL_23:
    v7 = llvm::raw_ostream::write(v7, v11, v12);
    v9 = (void *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v9 <= 0xCuLL)
      goto LABEL_11;
LABEL_24:
    qmemcpy(v9, "_resources: {", 13);
    v13 = (_BYTE *)(*((_QWORD *)v7 + 4) + 13);
    *((_QWORD *)v7 + 4) = v13;
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v13 >= *((_QWORD *)v7 + 3))
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_22:
  *v8 = 8224;
  v9 = (void *)(*((_QWORD *)v7 + 4) + 2);
  *((_QWORD *)v7 + 4) = v9;
  v19 = a1[3];
  v11 = *(const char **)v19;
  v12 = *((_QWORD *)v19 + 1);
  if (v12 > *((_QWORD *)v7 + 3) - (_QWORD)v9)
    goto LABEL_23;
LABEL_8:
  if (v12)
  {
    memcpy(v9, v11, v12);
    v9 = (void *)(*((_QWORD *)v7 + 4) + v12);
    *((_QWORD *)v7 + 4) = v9;
  }
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 0xCuLL)
    goto LABEL_24;
LABEL_11:
  v7 = llvm::raw_ostream::write(v7, "_resources: {", 0xDuLL);
  v13 = (_BYTE *)*((_QWORD *)v7 + 4);
  ++*((_DWORD *)v2 + 18);
  if ((unint64_t)v13 >= *((_QWORD *)v7 + 3))
  {
LABEL_12:
    llvm::raw_ostream::write(v7, 10);
    goto LABEL_13;
  }
LABEL_25:
  *((_QWORD *)v7 + 4) = v13 + 1;
  *v13 = 10;
  v20 = a1[4];
  v21 = *v20;
  *v20 = 1;
  if (!v21)
    goto LABEL_26;
LABEL_14:
  result = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
  v17 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v17)
  {
    result = llvm::raw_ostream::write(result, ",", 1uLL);
    v18 = (_BYTE *)*((_QWORD *)result + 4);
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v18 >= *((_QWORD *)result + 3))
      return llvm::raw_ostream::write(result, 10);
    goto LABEL_19;
  }
  *v17 = 44;
  v18 = (_BYTE *)(*((_QWORD *)result + 4) + 1);
  *((_QWORD *)result + 4) = v18;
  ++*((_DWORD *)v2 + 18);
  if ((unint64_t)v18 < *((_QWORD *)result + 3))
  {
LABEL_19:
    *((_QWORD *)result + 4) = v18 + 1;
LABEL_43:
    *v18 = 10;
    return result;
  }
  return llvm::raw_ostream::write(result, 10);
}

void `anonymous namespace'::OperationPrinter::ResourceBuilder::~ResourceBuilder(_anonymous_namespace_::OperationPrinter::ResourceBuilder *this)
{
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::OperationPrinter::ResourceBuilder::buildBool(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v5;
  char v6;

  v6 = a4;
  v5 = &v6;
}

uint64_t `anonymous namespace'::OperationPrinter::ResourceBuilder::buildString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD v7[2];

  v7[0] = a4;
  v7[1] = a5;
  v6 = v7;
}

uint64_t `anonymous namespace'::OperationPrinter::ResourceBuilder::buildBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD v7[2];
  int v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  v8 = a6;
  v7[0] = &v8;
  v7[1] = v9;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::OperationPrinter::ResourceBuilder::buildBool(llvm::StringRef,BOOL)::{lambda(llvm::raw_ostream &)#1}>(_BYTE **a1, llvm::raw_ostream *this)
{
  const char *v3;
  size_t v4;
  void *v5;
  llvm::raw_ostream *result;

  if (**a1)
    v3 = "true";
  else
    v3 = "false";
  if (**a1)
    v4 = 4;
  else
    v4 = 5;
  v5 = (void *)*((_QWORD *)this + 4);
  if (v4 > *((_QWORD *)this + 3) - (_QWORD)v5)
    return llvm::raw_ostream::write(this, v3, v4);
  result = (llvm::raw_ostream *)memcpy(v5, v3, v4);
  *((_QWORD *)this + 4) += v4;
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::OperationPrinter::ResourceBuilder::buildString(llvm::StringRef,llvm::StringRef)::{lambda(llvm::raw_ostream &)#1}>(llvm::raw_ostream ***a1, llvm::raw_ostream *this)
{
  _BYTE *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *v4 = 34;
    ++*((_QWORD *)this + 4);
  }
  result = llvm::printEscapedString(**a1, (uint64_t)(*a1)[1], this);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v6)
    return llvm::raw_ostream::write(this, "\"", 1uLL);
  *v6 = 34;
  ++*((_QWORD *)this + 4);
  return result;
}

void llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::OperationPrinter::ResourceBuilder::buildBlob(llvm::StringRef,llvm::ArrayRef<char>,unsigned int)::{lambda(llvm::raw_ostream &)#1}>(int **a1, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  uint64_t v4;
  void **v5;
  size_t v6;
  llvm::raw_ostream *v7;
  void **v8;
  size_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  unsigned __int8 v15;
  int v16;

  v2 = this;
  v16 = **a1;
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 2)
  {
    *(_BYTE *)(v4 + 2) = 120;
    *(_WORD *)v4 = 12322;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    v2 = llvm::raw_ostream::write(this, "\"0x", 3uLL);
  }
  llvm::toHex(4uLL, (unsigned __int8 *)&v16, 0, v14);
  if ((v15 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (size_t)v14[1];
  v7 = llvm::raw_ostream::write(v2, (const char *)v5, v6);
  llvm::toHex(*((_QWORD *)a1[1] + 1), *(unsigned __int8 **)a1[1], 0, __p);
  if ((v13 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = (size_t)__p[1];
  v10 = llvm::raw_ostream::write(v7, (const char *)v8, v9);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "\"", 1uLL);
    if (((char)v13 & 0x80000000) == 0)
    {
LABEL_18:
      if (((char)v15 & 0x80000000) == 0)
        return;
LABEL_22:
      operator delete(v14[0]);
      return;
    }
  }
  else
  {
    *v11 = 34;
    ++*((_QWORD *)v10 + 4);
    if (((char)v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  operator delete(__p[0]);
  if ((char)v15 < 0)
    goto LABEL_22;
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_21OpAsmDialectInterfaceEJNS_9SetVectorINSD_24AsmDialectResourceHandleENS_11SmallVectorISL_Lj0EEENS_8DenseSetISL_NS_12DenseMapInfoISL_vEEEELj0EEEEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, void **), uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  size_t v11;
  size_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  _WORD *v18;
  const char *v19;
  size_t v20;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **p_p;
  void *__p;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v9 = *(_QWORD *)(a1 + 24);
  (**(void (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v34 = *(_OWORD *)(a1 + 8);
  v35 = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v36 = *(_OWORD *)(a1 + 32);
  v37 = v10;
  if (!*(_BYTE *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
    v13 = *(llvm::raw_ostream **)(v9 + 16);
    v14 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)v14 = 538976288;
      v15 = (_WORD *)(*((_QWORD *)v13 + 4) + 6);
      *((_QWORD *)v13 + 4) = v15;
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          v15 = (_WORD *)(*((_QWORD *)v13 + 4) + a3);
          *((_QWORD *)v13 + 4) = v15;
        }
        if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
          goto LABEL_12;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      v15 = (_WORD *)*((_QWORD *)v13 + 4);
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
        goto LABEL_9;
    }
    v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    v15 = (_WORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      a4(a5, *(void ***)(v9 + 16));
      return;
    }
LABEL_21:
    *v15 = 8250;
    *((_QWORD *)v13 + 4) += 2;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v9 + 48);
  __p = 0;
  v32 = 0;
  v33 = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v22 = &unk_24C02DC40;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v22, 0, 0, 0);
  a4(a5, &v22);
  v12 = HIBYTE(v33);
  if (v33 < 0)
    v12 = v32;
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
  v16 = *(llvm::raw_ostream **)(v9 + 16);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)v17 = 538976288;
    v18 = (_WORD *)(*((_QWORD *)v16 + 4) + 6);
    *((_QWORD *)v16 + 4) = v18;
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        v18 = (_WORD *)(*((_QWORD *)v16 + 4) + a3);
        *((_QWORD *)v16 + 4) = v18;
      }
      if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
        goto LABEL_18;
      goto LABEL_25;
    }
  }
  else
  {
    v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    v18 = (_WORD *)*((_QWORD *)v16 + 4);
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      goto LABEL_15;
  }
  v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  v18 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
  {
LABEL_18:
    v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_26;
  }
LABEL_25:
  *v18 = 8250;
  *((_QWORD *)v16 + 4) += 2;
LABEL_26:
  if (v33 >= 0)
    v19 = (const char *)&__p;
  else
    v19 = (const char *)__p;
  if (v33 >= 0)
    v20 = HIBYTE(v33);
  else
    v20 = v32;
  llvm::raw_ostream::write(v16, v19, v20);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
  if (SHIBYTE(v33) < 0)
    goto LABEL_33;
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_18AsmResourcePrinterEJEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, void **), uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  size_t v11;
  size_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  _WORD *v18;
  const char *v19;
  size_t v20;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **p_p;
  void *__p;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v9 = *(_QWORD *)(a1 + 24);
  (**(void (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v34 = *(_OWORD *)(a1 + 8);
  v35 = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v36 = *(_OWORD *)(a1 + 32);
  v37 = v10;
  if (!*(_BYTE *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
    v13 = *(llvm::raw_ostream **)(v9 + 16);
    v14 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)v14 = 538976288;
      v15 = (_WORD *)(*((_QWORD *)v13 + 4) + 6);
      *((_QWORD *)v13 + 4) = v15;
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          v15 = (_WORD *)(*((_QWORD *)v13 + 4) + a3);
          *((_QWORD *)v13 + 4) = v15;
        }
        if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
          goto LABEL_12;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      v15 = (_WORD *)*((_QWORD *)v13 + 4);
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
        goto LABEL_9;
    }
    v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    v15 = (_WORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      a4(a5, *(void ***)(v9 + 16));
      return;
    }
LABEL_21:
    *v15 = 8250;
    *((_QWORD *)v13 + 4) += 2;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v9 + 48);
  __p = 0;
  v32 = 0;
  v33 = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v22 = &unk_24C02DC40;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v22, 0, 0, 0);
  a4(a5, &v22);
  v12 = HIBYTE(v33);
  if (v33 < 0)
    v12 = v32;
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
  v16 = *(llvm::raw_ostream **)(v9 + 16);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)v17 = 538976288;
    v18 = (_WORD *)(*((_QWORD *)v16 + 4) + 6);
    *((_QWORD *)v16 + 4) = v18;
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        v18 = (_WORD *)(*((_QWORD *)v16 + 4) + a3);
        *((_QWORD *)v16 + 4) = v18;
      }
      if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
        goto LABEL_18;
      goto LABEL_25;
    }
  }
  else
  {
    v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    v18 = (_WORD *)*((_QWORD *)v16 + 4);
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      goto LABEL_15;
  }
  v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  v18 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
  {
LABEL_18:
    v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_26;
  }
LABEL_25:
  *v18 = 8250;
  *((_QWORD *)v16 + 4) += 2;
LABEL_26:
  if (v33 >= 0)
    v19 = (const char *)&__p;
  else
    v19 = (const char *)__p;
  if (v33 >= 0)
    v20 = HIBYTE(v33);
  else
    v20 = v32;
  llvm::raw_ostream::write(v16, v19, v20);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
  if (SHIBYTE(v33) < 0)
    goto LABEL_33;
}

llvm::raw_ostream *llvm::function_ref<void ()(void)>::callback_fn<`anonymous namespace'::OperationPrinter::printFileMetadataDictionary(mlir::Operation *)::$_0>(llvm::raw_ostream *result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = *((_QWORD *)result + 1);
  v2 = **(unsigned __int8 **)result;
  **(_BYTE **)result = 1;
  if (!v2)
  {
    result = *(llvm::raw_ostream **)(v1 + 16);
    ++*(_DWORD *)(v1 + 72);
    v3 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v3 >= *((_QWORD *)result + 3))
    {
      result = llvm::raw_ostream::write(result, 10);
      v4 = *((_QWORD *)result + 4);
      if ((unint64_t)(*((_QWORD *)result + 3) - v4) > 2)
      {
LABEL_4:
        *(_BYTE *)(v4 + 2) = 35;
        *(_WORD *)v4 = 11643;
        v5 = (_BYTE *)(*((_QWORD *)result + 4) + 3);
        *((_QWORD *)result + 4) = v5;
        ++*(_DWORD *)(v1 + 72);
        if ((unint64_t)v5 >= *((_QWORD *)result + 3))
          return llvm::raw_ostream::write(result, 10);
        goto LABEL_8;
      }
    }
    else
    {
      *((_QWORD *)result + 4) = v3 + 1;
      *v3 = 10;
      v4 = *((_QWORD *)result + 4);
      if ((unint64_t)(*((_QWORD *)result + 3) - v4) > 2)
        goto LABEL_4;
    }
    result = llvm::raw_ostream::write(result, "{-#", 3uLL);
    v5 = (_BYTE *)*((_QWORD *)result + 4);
    ++*(_DWORD *)(v1 + 72);
    if ((unint64_t)v5 >= *((_QWORD *)result + 3))
      return llvm::raw_ostream::write(result, 10);
LABEL_8:
    *((_QWORD *)result + 4) = v5 + 1;
    *v5 = 10;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<unsigned int,unsigned int>>>,mlir::Operation *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Operation * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::DistinctAttr,unsigned long long,llvm::DenseMapInfo<mlir::DistinctAttr,void>,llvm::detail::DenseMapPair<mlir::DistinctAttr,unsigned long long>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printOperationID(llvm::raw_ostream *this, mlir::Operation *a2, llvm::raw_ostream *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE *v9;
  void *v10;

  if ((_DWORD)a3)
  {
    LODWORD(v4) = ((a4 >> 4) ^ (a4 >> 9)) & ((_DWORD)a3 - 1);
    v5 = (unsigned int *)((char *)a2 + 16 * v4);
    v6 = *(_QWORD *)v5;
    if (*(_QWORD *)v5 == a4)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & ((_DWORD)a3 - 1);
      v6 = *((_QWORD *)a2 + 2 * v4);
      if (v6 == a4)
      {
        v5 = (unsigned int *)((char *)a2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (unsigned int *)((char *)a2 + 16 * a3);
LABEL_8:
  if (v5 == (unsigned int *)((char *)a2 + 16 * a3))
  {
    v10 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v10 > 0x14uLL)
    {
      qmemcpy(v10, "<<UNKNOWN OPERATION>>", 21);
      *((_QWORD *)this + 4) += 21;
    }
    else
    {
      return llvm::raw_ostream::write(this, "<<UNKNOWN OPERATION>>", 0x15uLL);
    }
  }
  else
  {
    v9 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v9 >= *((_QWORD *)this + 3))
    {
      this = llvm::raw_ostream::write(this, 37);
    }
    else
    {
      *((_QWORD *)this + 4) = v9 + 1;
      *v9 = 37;
    }
    return llvm::raw_ostream::operator<<(this, v5[2]);
  }
  return this;
}

void `anonymous namespace'::OperationPrinter::printValueUsers(uint64_t a1, _QWORD *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  unint64_t NextResultAtOffset;
  uint64_t j;
  unint64_t v22;
  _WORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  if (!*a2)
  {
    v4 = *(llvm::raw_ostream **)(a1 + 16);
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 5)
    {
      *(_WORD *)(v5 + 4) = 25701;
      *(_DWORD *)v5 = 1937075829;
      *((_QWORD *)v4 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v4, "unused", 6uLL);
    }
  }
  v24 = &v28;
  v25 = &v28;
  v26 = 1;
  v27 = 0;
  v6 = (_QWORD *)*a2;
  if (*a2)
  {
    for (i = 0; ; ++i)
    {
      v8 = v6[2];
      if (v25 != v24)
        break;
      v14 = HIDWORD(v26);
      if (HIDWORD(v26))
      {
        v15 = 0;
        v16 = 8 * HIDWORD(v26);
        v17 = v25;
        do
        {
          if (*v17 == v8)
          {
            v10 = 0;
            goto LABEL_11;
          }
          if (*v17 == -2)
            v15 = v17;
          ++v17;
          v16 -= 8;
        }
        while (v16);
        if (!v15)
          goto LABEL_32;
        *v15 = v8;
        --v27;
        v10 = 1;
      }
      else
      {
LABEL_32:
        if (HIDWORD(v26) >= v26)
          break;
        ++HIDWORD(v26);
        v25[v14] = v8;
        v10 = 1;
      }
LABEL_11:
      if (!v10)
        goto LABEL_8;
      if (i)
      {
        v11 = *(llvm::raw_ostream **)(a1 + 16);
        v12 = (_WORD *)*((_QWORD *)v11 + 4);
        if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 1uLL)
        {
          *v12 = 8236;
          *((_QWORD *)v11 + 4) += 2;
          v13 = *(unsigned int *)(v8 + 36);
          if ((_DWORD)v13)
          {
LABEL_26:
            v18 = v8 - 16;
            v19 = *(llvm::raw_ostream **)(a1 + 16);
            NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
            if ((_DWORD)v13 != 1)
            {
              for (j = 1; j != v13; ++j)
              {
                v23 = (_WORD *)*((_QWORD *)v19 + 4);
                if (*((_QWORD *)v19 + 3) - (_QWORD)v23 > 1uLL)
                {
                  *v23 = 8236;
                  *((_QWORD *)v19 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v19, ", ", 2uLL);
                }
                v22 = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, j);
              }
            }
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        llvm::raw_ostream::write(v11, ", ", 2uLL);
      }
      v13 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v13)
        goto LABEL_26;
LABEL_7:
LABEL_8:
      v6 = (_QWORD *)*v6;
      if (!v6)
      {
        if (v25 != v24)
          free(v25);
        return;
      }
    }
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v24, (const void *)v6[2]);
    v10 = v9;
    goto LABEL_11;
  }
}

void `anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _WORD *v6;
  uint64_t **v7;
  llvm::raw_ostream *v8;
  void *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _DWORD *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;

  v4 = (llvm::raw_ostream *)(a1 + 16);
  v5 = *(llvm::raw_ostream **)v4;
  v6 = *(_WORD **)(*(_QWORD *)v4 + 32);
  if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8250;
    *((_QWORD *)v5 + 4) += 2;
    v7 = (uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7)
    {
LABEL_3:
      if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)v4, (uint64_t)v7))
      {
        mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)v4, v7);
        if ((*(_BYTE *)(a1 + 64) & 1) == 0)
          return;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, ": ", 2uLL);
    v7 = (uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7)
      goto LABEL_3;
  }
  v8 = *(llvm::raw_ostream **)v4;
  v9 = *(void **)(*(_QWORD *)v4 + 32);
  if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v9 <= 0xCuLL)
  {
    llvm::raw_ostream::write(v8, "<<NULL TYPE>>", 0xDuLL);
LABEL_9:
    if ((*(_BYTE *)(a1 + 64) & 1) == 0)
      return;
    goto LABEL_10;
  }
  qmemcpy(v9, "<<NULL TYPE>>", 13);
  *((_QWORD *)v8 + 4) += 13;
  if ((*(_BYTE *)(a1 + 64) & 1) == 0)
    return;
LABEL_10:
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(llvm::raw_ostream **)v4;
  v12 = *(_BYTE **)(*(_QWORD *)v4 + 32);
  if (*(_BYTE **)(*(_QWORD *)v4 + 24) == v12)
  {
    llvm::raw_ostream::write(v11, " ", 1uLL);
    if ((*(_BYTE *)(a1 + 64) & 2) == 0)
      goto LABEL_12;
LABEL_17:
    mlir::AsmPrinter::Impl::printLocationInternal(v4, v10, 1, 1);
    return;
  }
  *v12 = 32;
  ++*((_QWORD *)v11 + 4);
  if ((*(_BYTE *)(a1 + 64) & 2) != 0)
    goto LABEL_17;
LABEL_12:
  v13 = *(llvm::raw_ostream **)v4;
  v14 = *(_DWORD **)(*(_QWORD *)v4 + 32);
  if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v14 > 3uLL)
  {
    *v14 = 677605228;
    *((_QWORD *)v13 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v13, "loc(", 4uLL);
  }
  mlir::AsmPrinter::Impl::printLocationInternal(v4, v10, 0, 1);
  v15 = *(llvm::raw_ostream **)v4;
  v16 = *(_BYTE **)(*(_QWORD *)v4 + 32);
  if ((unint64_t)v16 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
  {
    llvm::raw_ostream::write(v15, 41);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 41;
  }
}

__n128 std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,`anonymous namespace'::BlockInfo *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  signed __int32 *v9;
  int *v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  signed __int32 v17;
  signed __int32 v18;
  __n128 v19;
  int v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  int v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  int v32;
  int v33;
  int v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  unint64_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  unint64_t v45;
  uint64_t v46;
  __n128 v47;
  __n128 *v48;
  unint64_t v49;
  __n128 *v50;
  int v51;
  int v52;
  int v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  __n128 v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  unint64_t v62;
  uint64_t v63;
  __n128 v64;
  signed __int32 v65;
  signed __int32 v66;
  __n128 v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  __n128 v75;
  int v76;
  int v77;
  __int128 v78;
  BOOL v79;
  __n128 v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  __n128 v85;
  int v86;
  int v87;
  __int128 v88;
  __n128 *v89;
  int v90;
  __n128 *v91;
  int v92;
  int v93;
  int v94;
  __n128 v95;
  __n128 *v96;
  __n128 *v97;
  __n128 *v98;
  __n128 *v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  BOOL v121;
  unint64_t v122;
  int v123;
  int v124;
  BOOL v125;
  int v126;
  unint64_t v127;
  __int128 v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  unint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  __int128 v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  int v154;
  int v155;
  int v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __int128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,`anonymous namespace'::BlockInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  int v9;
  __n128 *v10;
  int v11;
  signed __int32 v12;
  uint64_t v13;
  __n128 v14;
  __n128 *v15;
  int v16;
  int v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  int v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  __int128 v60;
  int v61;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (__n128 *)(a2 - 24);
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)a1)
        goto LABEL_9;
      return result;
    case 3uLL:
      v15 = (__n128 *)(a1 + 24);
      v16 = *(_DWORD *)(a1 + 24);
      v7 = (__n128 *)(a2 - 24);
      v17 = *(_DWORD *)(a2 - 24);
      if (v16 >= *(_DWORD *)a1)
      {
        if (v17 < v16)
        {
          v39 = *(_QWORD *)(a1 + 40);
          v40 = *v15;
          v41 = *(_QWORD *)(a2 - 8);
          *v15 = *v7;
          *(_QWORD *)(a1 + 40) = v41;
          *v7 = v40;
          *(_QWORD *)(a2 - 8) = v39;
          if (*(_DWORD *)(a1 + 24) < *(_DWORD *)a1)
          {
            v42 = *(_QWORD *)(a1 + 16);
            v43 = *(__n128 *)a1;
            *(__n128 *)a1 = *v15;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v15 = v43;
            *(_QWORD *)(a1 + 40) = v42;
          }
        }
      }
      else if (v17 >= v16)
      {
        v55 = *(_QWORD *)(a1 + 16);
        v56 = *(__n128 *)a1;
        *(__n128 *)a1 = *v15;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v15 = v56;
        *(_QWORD *)(a1 + 40) = v55;
        if ((signed __int32)v7->n128_u32[0] < *(_DWORD *)(a1 + 24))
        {
          v57 = *(_QWORD *)(a1 + 40);
          v58 = *v15;
          v59 = *(_QWORD *)(a2 - 8);
          *v15 = *v7;
          *(_QWORD *)(a1 + 40) = v59;
          *v7 = v58;
          *(_QWORD *)(a2 - 8) = v57;
        }
      }
      else
      {
LABEL_9:
        v18 = *(_QWORD *)(a1 + 16);
        v19 = *(__n128 *)a1;
        v20 = v7[1].n128_i64[0];
        *(__n128 *)a1 = *v7;
        *(_QWORD *)(a1 + 16) = v20;
        *v7 = v19;
        v7[1].n128_u64[0] = v18;
      }
      return result;
    case 4uLL:
      return 1;
    case 5uLL:
      v21 = (__n128 *)(a1 + 24);
      v22 = (__n128 *)(a1 + 48);
      v23 = (__n128 *)(a1 + 72);
      v25 = *(_DWORD *)(a2 - 24);
      v24 = (__n128 *)(a2 - 24);
      if (v25 < *(_DWORD *)(a1 + 72))
      {
        v26 = *(_QWORD *)(a1 + 88);
        v27 = *v23;
        v28 = v24[1].n128_i64[0];
        *v23 = *v24;
        *(_QWORD *)(a1 + 88) = v28;
        *v24 = v27;
        v24[1].n128_u64[0] = v26;
        if ((signed __int32)v23->n128_u32[0] < (signed __int32)v22->n128_u32[0])
        {
          v29 = *(_QWORD *)(a1 + 64);
          v30 = *v22;
          *v22 = *v23;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v23 = v30;
          *(_QWORD *)(a1 + 88) = v29;
          if ((signed __int32)v22->n128_u32[0] < (signed __int32)v21->n128_u32[0])
          {
            v31 = *(_QWORD *)(a1 + 40);
            v32 = *v21;
            *v21 = *v22;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v22 = v32;
            *(_QWORD *)(a1 + 64) = v31;
            if (*(_DWORD *)(a1 + 24) < *(_DWORD *)a1)
            {
              v33 = *(_QWORD *)(a1 + 16);
              v34 = *(__n128 *)a1;
              *(__n128 *)a1 = *v21;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v21 = v34;
              *(_QWORD *)(a1 + 40) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (__n128 *)(a1 + 48);
      v9 = *(_DWORD *)(a1 + 48);
      v10 = (__n128 *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 24);
      v12 = *(_DWORD *)a1;
      if (v11 >= *(_DWORD *)a1)
      {
        if (v9 < v11)
        {
          v35 = *(_QWORD *)(a1 + 40);
          v36 = *v10;
          *v10 = *v8;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v8 = v36;
          *(_QWORD *)(a1 + 64) = v35;
          if ((signed __int32)v10->n128_u32[0] < v12)
          {
            v37 = *(_QWORD *)(a1 + 16);
            v38 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v10 = v38;
            *(_QWORD *)(a1 + 40) = v37;
          }
        }
      }
      else if (v9 >= v11)
      {
        v44 = *(_QWORD *)(a1 + 16);
        v45 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v10 = v45;
        *(_QWORD *)(a1 + 40) = v44;
        if (v9 < *(_DWORD *)(a1 + 24))
        {
          v46 = *(_QWORD *)(a1 + 40);
          v47 = *v10;
          *v10 = *v8;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v8 = v47;
          *(_QWORD *)(a1 + 64) = v46;
        }
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 16);
        v14 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v8 = v14;
        *(_QWORD *)(a1 + 64) = v13;
      }
      v48 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      break;
  }
  while (1)
  {
    v52 = *(_DWORD *)v48;
    if (*(_DWORD *)v48 < (signed __int32)v8->n128_u32[0])
    {
      v60 = *(_OWORD *)(v48 + 4);
      v61 = *(_DWORD *)(v48 + 20);
      v53 = v49;
      do
      {
        v54 = a1 + v53;
        *(_OWORD *)(v54 + 72) = *(_OWORD *)(a1 + v53 + 48);
        *(_QWORD *)(v54 + 88) = *(_QWORD *)(a1 + v53 + 64);
        if (v53 == -48)
        {
          v51 = a1;
          goto LABEL_27;
        }
        v53 -= 24;
      }
      while (v52 < *(_DWORD *)(v54 + 24));
      v51 = a1 + v53 + 72;
LABEL_27:
      *(_DWORD *)v51 = v52;
      *(_OWORD *)(v51 + 4) = v60;
      *(_DWORD *)(v51 + 20) = v61;
      if (++v50 == 8)
        return v48 + 24 == a2;
    }
    v8 = (__n128 *)v48;
    v49 += 24;
    v48 += 24;
    if (v48 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,`anonymous namespace'::BlockInfo *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5;
  signed __int32 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = a2->n128_u32[0];
  v6 = a3->n128_u32[0];
  if ((signed __int32)a2->n128_u32[0] >= (signed __int32)a1->n128_u32[0])
  {
    if (v6 < v5)
    {
      v9 = a2[1].n128_u64[0];
      result = *a2;
      v10 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v10;
      *a3 = result;
      a3[1].n128_u64[0] = v9;
      if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0])
  {
    v16 = a3[1].n128_u64[0];
    result = *a3;
    v17 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v17;
    *a4 = result;
    a4[1].n128_u64[0] = v16;
    if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0])
    {
      v18 = a2[1].n128_u64[0];
      result = *a2;
      v19 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v19;
      *a3 = result;
      a3[1].n128_u64[0] = v18;
      if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_bSF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2[6];
  if (v2 >= 8)
  {
    v4 = a2 + 3;
    v5 = *a2;
    v6 = (v2 & 2) != 0 ? v4 : (_QWORD *)a2[3];
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFF8))(v6, v5, a2[1], a2[2]);
    v7 = a2[6];
    if (v7 >= 8)
    {
      if ((v7 & 4) != 0)
      {
        if ((v7 & 2) != 0)
          v8 = v4;
        else
          v8 = (_QWORD *)*v4;
        (*(void (**)(_QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
      }
      if ((v7 & 2) == 0)
        llvm::deallocate_buffer((llvm *)a2[3], (void *)a2[4]);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_bSF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::AsmParser::parseTypeList(llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *a1;
  v2 = (uint64_t *)a1[1];
  v3 = *((unsigned int *)v2 + 2);
  if (v3 >= *((_DWORD *)v2 + 3))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1], v2 + 2, v3 + 1, 8);
    *(_QWORD *)(*v2 + 8 * *((unsigned int *)v2 + 2)) = 0;
    LODWORD(v3) = *((_DWORD *)v2 + 2);
    v4 = *v2;
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(*v2 + 8 * v3) = 0;
  }
  v5 = v3 + 1;
  *((_DWORD *)v2 + 2) = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 504))(v1, v4 + 8 * v5 - 8);
}

void *llvm::object_creator<`anonymous namespace'::AsmPrinterOptions>::call()
{
  void *v0;
  int v2;
  char v3;
  int *v4;
  __int128 v5;

  v0 = (void *)operator new();
  bzero(v0, 0x6C8uLL);
  *(_QWORD *)&v5 = "Print DenseElementsAttrs with a hex string that have more elements than the given upper limit (use -1 to disable)";
  *((_QWORD *)&v5 + 1) = 113;
  llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<char [44],llvm::cl::desc>((uint64_t)v0, (int8x16_t *)"mlir-print-elementsattrs-with-hex-if-larger", &v5);
  *(_QWORD *)&v5 = "Elide ElementsAttrs with \"...\" that have more elements than the given upper limit";
  *((_QWORD *)&v5 + 1) = 81;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>((uint64_t)v0 + 200, (int8x16_t *)"mlir-elide-elementsattrs-if-larger", &v5);
  *(_QWORD *)&v5 = "Elide printing value of resources if string is too long in chars.";
  *((_QWORD *)&v5 + 1) = 65;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>((uint64_t)v0 + 392, (int8x16_t *)"mlir-elide-resource-strings-if-larger", &v5);
  LOBYTE(v2) = 0;
  v4 = &v2;
  *(_QWORD *)&v5 = "Print debug info in MLIR output";
  *((_QWORD *)&v5 + 1) = 31;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 584, (int8x16_t *)"mlir-print-debuginfo", (_BYTE **)&v4, &v5);
  LOBYTE(v2) = 0;
  v4 = &v2;
  *(_QWORD *)&v5 = "Print pretty debug info in MLIR output";
  *((_QWORD *)&v5 + 1) = 38;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 776, (int8x16_t *)"mlir-pretty-debuginfo", (_BYTE **)&v4, &v5);
  v3 = 0;
  v4 = (int *)&v3;
  *(_QWORD *)&v5 = "Print the generic op form";
  *((_QWORD *)&v5 + 1) = 25;
  v2 = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>((uint64_t)v0 + 968, (int8x16_t *)"mlir-print-op-generic", (_BYTE **)&v4, &v5, &v2);
  v3 = 0;
  v4 = (int *)&v3;
  *(_QWORD *)&v5 = "Skip op verification when using custom printers";
  *((_QWORD *)&v5 + 1) = 47;
  v2 = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>((uint64_t)v0 + 1160, (int8x16_t *)"mlir-print-assume-verified", (_BYTE **)&v4, &v5, &v2);
  LOBYTE(v2) = 0;
  v4 = &v2;
  *(_QWORD *)&v5 = "Print with local scope and inline information (eliding aliases for attributes, types, and locations";
  *((_QWORD *)&v5 + 1) = 99;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 1352, (int8x16_t *)"mlir-print-local-scope", (_BYTE **)&v4, &v5);
  LOBYTE(v2) = 0;
  v4 = &v2;
  *(_QWORD *)&v5 = "Print users of operation results and block arguments as a comment";
  *((_QWORD *)&v5 + 1) = 65;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 1544, (int8x16_t *)"mlir-print-value-users", (_BYTE **)&v4, &v5);
  return v0;
}

_QWORD *llvm::object_deleter<`anonymous namespace'::AsmPrinterOptions>::call(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;

  if (result)
  {
    v1 = result;
    result[193] = &unk_24C02DF38;
    v2 = result + 213;
    v3 = (_QWORD *)result[216];
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v1[193] = &unk_24C02E140;
    v5 = (void *)v1[205];
    if (v5 != (void *)v1[204])
      free(v5);
    v6 = (_QWORD *)v1[201];
    if (v6 != v1 + 203)
      free(v6);
    v1[169] = &unk_24C02DF38;
    v7 = (_QWORD *)v1[192];
    if (v7 == v1 + 189)
    {
      v8 = 4;
      v7 = v1 + 189;
    }
    else
    {
      if (!v7)
        goto LABEL_17;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_17:
    v1[169] = &unk_24C02E140;
    v9 = (void *)v1[181];
    if (v9 != (void *)v1[180])
      free(v9);
    v10 = (_QWORD *)v1[177];
    if (v10 != v1 + 179)
      free(v10);
    v1[145] = &unk_24C02DF38;
    v11 = (_QWORD *)v1[168];
    if (v11 == v1 + 165)
    {
      v12 = 4;
      v11 = v1 + 165;
    }
    else
    {
      if (!v11)
        goto LABEL_26;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
    v1[145] = &unk_24C02E140;
    v13 = (void *)v1[157];
    if (v13 != (void *)v1[156])
      free(v13);
    v14 = (_QWORD *)v1[153];
    if (v14 != v1 + 155)
      free(v14);
    v1[121] = &unk_24C02DF38;
    v15 = (_QWORD *)v1[144];
    if (v15 == v1 + 141)
    {
      v16 = 4;
      v15 = v1 + 141;
    }
    else
    {
      if (!v15)
        goto LABEL_35;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_35:
    v1[121] = &unk_24C02E140;
    v17 = (void *)v1[133];
    if (v17 != (void *)v1[132])
      free(v17);
    v18 = (_QWORD *)v1[129];
    if (v18 != v1 + 131)
      free(v18);
    v1[97] = &unk_24C02DF38;
    v19 = (_QWORD *)v1[120];
    if (v19 == v1 + 117)
    {
      v20 = 4;
      v19 = v1 + 117;
    }
    else
    {
      if (!v19)
        goto LABEL_44;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_44:
    v1[97] = &unk_24C02E140;
    v21 = (void *)v1[109];
    if (v21 != (void *)v1[108])
      free(v21);
    v22 = (_QWORD *)v1[105];
    if (v22 != v1 + 107)
      free(v22);
    v1[73] = &unk_24C02DF38;
    v23 = (_QWORD *)v1[96];
    if (v23 == v1 + 93)
    {
      v24 = 4;
      v23 = v1 + 93;
    }
    else
    {
      if (!v23)
        goto LABEL_53;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_53:
    v1[73] = &unk_24C02E140;
    v25 = (void *)v1[85];
    if (v25 != (void *)v1[84])
      free(v25);
    v26 = (_QWORD *)v1[81];
    if (v26 != v1 + 83)
      free(v26);
    v1[49] = &unk_24C02E008;
    v27 = (_QWORD *)v1[72];
    if (v27 == v1 + 69)
    {
      v28 = 4;
      v27 = v1 + 69;
    }
    else
    {
      if (!v27)
        goto LABEL_62;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_62:
    v1[49] = &unk_24C02E140;
    v29 = (void *)v1[61];
    if (v29 != (void *)v1[60])
      free(v29);
    v30 = (_QWORD *)v1[57];
    if (v30 != v1 + 59)
      free(v30);
    v1[25] = &unk_24C02E008;
    v31 = (_QWORD *)v1[48];
    if (v31 == v1 + 45)
    {
      v32 = 4;
      v31 = v1 + 45;
    }
    else
    {
      if (!v31)
        goto LABEL_71;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_71:
    v1[25] = &unk_24C02E140;
    v33 = (void *)v1[37];
    if (v33 != (void *)v1[36])
      free(v33);
    v34 = (_QWORD *)v1[33];
    if (v34 != v1 + 35)
      free(v34);
    *v1 = off_24C02E070;
    v35 = (_QWORD *)v1[24];
    if (v35 == v1 + 21)
    {
      v36 = 4;
      v35 = v1 + 21;
    }
    else
    {
      if (!v35)
        goto LABEL_80;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_80:
    *v1 = &unk_24C02E140;
    v37 = (void *)v1[12];
    if (v37 != (void *)v1[11])
      free(v37);
    v38 = (_QWORD *)v1[8];
    if (v38 != v1 + 10)
      free(v38);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<char [44],llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _OWORD *a3)
{
  void *v6;
  uint64_t v7;
  _QWORD *GeneralCategory;
  uint64_t v9;
  const unsigned __int8 *v10;

  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v6 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v7 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v9 = *(unsigned int *)(a1 + 72);
  if (v9 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v9) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_24C02DE08;
  *(_QWORD *)a1 = off_24C02E070;
  *(_QWORD *)(a1 + 160) = &unk_24C02E288;
  *(_QWORD *)(a1 + 168) = &off_24C0536A8;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  v10 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v10);
  *(_OWORD *)(a1 + 32) = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _OWORD *a3)
{
  void *v6;
  uint64_t v7;
  _QWORD *GeneralCategory;
  uint64_t v9;
  const unsigned __int8 *v10;

  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v6 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v7 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v9 = *(unsigned int *)(a1 + 72);
  if (v9 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v9) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_24C02DDE8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_24C02E008;
  *(_QWORD *)(a1 + 152) = &unk_24C02E258;
  *(_QWORD *)(a1 + 160) = &off_24C053660;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v10 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v10);
  *(_OWORD *)(a1 + 32) = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

BOOL llvm::cl::OptionValueCopy<unsigned int>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C053660;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C053660;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _BYTE **a3, _OWORD *a4)
{
  void *v8;
  uint64_t v9;
  _QWORD *GeneralCategory;
  uint64_t v11;
  const unsigned __int8 *v12;
  _BYTE *v13;

  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v8 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v9 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v11 = *(unsigned int *)(a1 + 72);
  if (v11 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_24C02DDC8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_24C02DF38;
  *(_QWORD *)(a1 + 152) = &unk_24C02E228;
  *(_QWORD *)(a1 + 160) = &off_24C0535D0;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v12 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v12);
  v13 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v13;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _BYTE **a3, _OWORD *a4, _WORD *a5)
{
  void *v10;
  uint64_t v11;
  _QWORD *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  _BYTE *v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_24C02DDC8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_24C02DF38;
  *(_QWORD *)(a1 + 152) = &unk_24C02E228;
  *(_QWORD *)(a1 + 160) = &off_24C0535D0;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  v15 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v15;
  *(_OWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *buffer;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 4;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 4;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *(_QWORD *)buffer = a3;
  buffer[2] = *a4;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

void llvm::SmallVectorTemplateBase<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  int v16;
  unint64_t v17;

  v17 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v17);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = &v6[32 * v7];
    v9 = v4;
    do
    {
      v10 = *(_OWORD *)v6;
      v9[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)v9 = v10;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = *((_QWORD *)v6 + 3);
      *((_QWORD *)v6 + 2) = 0;
      *((_QWORD *)v6 + 3) = 0;
      v9[3] = v11;
      v6 += 32;
      v9 += 4;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 32 * v12;
      do
      {
        v14 = (void **)&v6[v13];
        v15 = *(_QWORD *)&v6[v13 - 8];
        *(_QWORD *)&v6[v13 - 8] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (*((char *)v14 - 9) < 0)
          operator delete(*(v14 - 4));
        v13 -= 32;
      }
      while (v13);
      v6 = *(char **)a1;
    }
  }
  v16 = v17;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v16;
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::~Printer(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C0346B8;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::~Printer(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C0346B8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::buildResources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::FallbackAsmResourceMap::ResourceCollection::buildResources(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,mlir::AsmResourceBlob>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  char *v6;
  char *v7;
  int v8;
  char *v9;
  size_t v10;
  const void *v11;
  unint64_t v12;
  __int128 *v13;
  int v14;
  char *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v37);
  v8 = *(_DWORD *)(a1 + 8);
  v9 = &v7[96 * v8];
  v11 = *(const void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v39 = *a3;
  v12 = *((_QWORD *)a3 + 6);
  v40 = *((_QWORD *)a3 + 2);
  v43 = v12;
  if (v12 >= 8)
  {
    v13 = (__int128 *)((char *)a3 + 24);
    if ((v12 & 2) != 0 && (v12 & 4) != 0)
    {
      (*(void (**)(__int128 *, __int128 *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(&v41, v13);
    }
    else
    {
      v41 = *v13;
      v42 = *((_QWORD *)a3 + 5);
    }
    *((_QWORD *)a3 + 6) = 0;
  }
  v44 = *((_BYTE *)a3 + 56);
  v45 = 0;
  if (v11)
  {
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v10 >= 0x17)
    {
      v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v18 = v10 | 7;
      v19 = v18 + 1;
      v20 = (char *)operator new(v18 + 1);
      *((_QWORD *)v9 + 1) = v10;
      *((_QWORD *)v9 + 2) = v19 | 0x8000000000000000;
      *(_QWORD *)v9 = v20;
      v9 = v20;
    }
    else
    {
      v9[23] = v10;
      if (!v10)
      {
LABEL_17:
        v9[v10] = 0;
        v14 = v45;
        v21 = &v7[96 * v8];
        v21[24] = 0;
        v17 = (int *)(v21 + 24);
        v17[16] = -1;
        v16 = v17 + 16;
        if (v14 == -1)
          goto LABEL_20;
        goto LABEL_18;
      }
    }
    memmove(v9, v11, v10);
    goto LABEL_17;
  }
  v14 = 0;
  v15 = &v7[96 * v8];
  *((_DWORD *)v15 + 22) = -1;
  v16 = (int *)(v15 + 88);
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v17 = v16 - 16;
  v9[24] = 0;
  *((_QWORD *)v9 + 2) = 0;
LABEL_18:
  ((void (*)(char *, int *, __int128 *))off_24C060EC0[v14])(&v38, v17, &v39);
  *v16 = v14;
  if (v45 != -1)
    ((void (*)(char *, __int128 *))off_24C060EA8[v45])(&v38, &v39);
LABEL_20:
  v45 = -1;
  v22 = *(char **)a1;
  v23 = *(_DWORD *)(a1 + 8);
  if (v23)
  {
    v24 = &v22[96 * v23];
    v25 = v7 + 88;
    v26 = v22 + 24;
    do
    {
      v28 = *(_OWORD *)(v26 - 24);
      *((_QWORD *)v25 - 9) = *((_QWORD *)v26 - 1);
      *(_OWORD *)(v25 - 22) = v28;
      *((_QWORD *)v26 - 2) = 0;
      *((_QWORD *)v26 - 1) = 0;
      *((_QWORD *)v26 - 3) = 0;
      *((_BYTE *)v25 - 64) = 0;
      *v25 = -1;
      v29 = *((unsigned int *)v26 + 16);
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_24C060EC0[v29])(&v38, v25 - 16, v26);
        *v25 = v29;
      }
      v27 = v26 - 24;
      v25 += 24;
      v26 += 96;
    }
    while (v27 + 96 != v24);
    v22 = *(char **)a1;
    v30 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v30)
    {
      v31 = 96 * v30;
      do
      {
        v32 = &v22[v31];
        v33 = *(unsigned int *)&v22[v31 - 8];
        if ((_DWORD)v33 != -1)
          ((void (*)(char *, char *))off_24C060EA8[v33])(&v38, v32 - 72);
        *((_DWORD *)v32 - 2) = -1;
        if (*(v32 - 73) < 0)
          operator delete(*((void **)v32 - 12));
        v31 -= 96;
      }
      while (v31);
      v22 = *(char **)a1;
    }
  }
  v34 = v37;
  if (v22 != v6)
    free(v22);
  *(_QWORD *)a1 = v7;
  v35 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v35;
  *(_DWORD *)(a1 + 12) = v34;
  return (uint64_t)&v7[96 * v35 - 96];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  __int128 v9;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *((_QWORD *)a3 + 6);
  *(_QWORD *)(a2 + 48) = v6;
  if (*((_QWORD *)a3 + 6) >= 8uLL)
  {
    v7 = (_OWORD *)(a2 + 24);
    v8 = (__int128 *)((char *)a3 + 24);
    if ((v6 & 2) != 0 && (v6 & 4) != 0)
    {
      (*(void (**)(_OWORD *, __int128 *))((v6 & 0xFFFFFFFFFFFFFFF8) + 8))(v7, v8);
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
      *v7 = v9;
    }
    *((_QWORD *)a3 + 6) = 0;
  }
  *(_BYTE *)(a2 + 56) = *((_BYTE *)a3 + 56);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,BOOL &>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char *v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  size_t v11;
  const void *v12;
  char *v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v36;
  char v37;
  _BYTE v38[64];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v36);
  v8 = v7;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = &v7[96 * v9];
  v12 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v38[0] = *a3;
  v39 = 1;
  if (v12)
  {
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v11 >= 0x17)
    {
      v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v17 = v11 | 7;
      v18 = v17 + 1;
      v19 = (char *)operator new(v17 + 1);
      *((_QWORD *)v10 + 1) = v11;
      *((_QWORD *)v10 + 2) = v18 | 0x8000000000000000;
      *(_QWORD *)v10 = v19;
      v10 = v19;
    }
    else
    {
      v10[23] = v11;
      if (!v11)
      {
LABEL_11:
        v10[v11] = 0;
        v16 = v39;
        v20 = &v8[96 * v9];
        v20[24] = 0;
        v15 = (int *)(v20 + 24);
        v15[16] = -1;
        v14 = v15 + 16;
        if (v16 == -1)
          goto LABEL_14;
        goto LABEL_12;
      }
    }
    memmove(v10, v12, v11);
    goto LABEL_11;
  }
  v13 = &v7[96 * v9];
  *((_DWORD *)v13 + 22) = -1;
  v14 = (int *)(v13 + 88);
  v15 = v14 - 16;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[24] = 0;
  *((_QWORD *)v10 + 2) = 0;
  v16 = 1;
LABEL_12:
  ((void (*)(char *, int *, _BYTE *))off_24C060EC0[v16])(&v37, v15, v38);
  *v14 = v16;
  if (v39 != -1)
    ((void (*)(char *, _BYTE *))off_24C060EA8[v39])(&v37, v38);
LABEL_14:
  v39 = -1;
  v21 = *(char **)a1;
  v22 = *(_DWORD *)(a1 + 8);
  if (v22)
  {
    v23 = &v21[96 * v22];
    v24 = v8 + 88;
    v25 = v21 + 24;
    do
    {
      v27 = *(_OWORD *)(v25 - 24);
      *((_QWORD *)v24 - 9) = *((_QWORD *)v25 - 1);
      *(_OWORD *)(v24 - 22) = v27;
      *((_QWORD *)v25 - 2) = 0;
      *((_QWORD *)v25 - 1) = 0;
      *((_QWORD *)v25 - 3) = 0;
      *((_BYTE *)v24 - 64) = 0;
      *v24 = -1;
      v28 = *((unsigned int *)v25 + 16);
      if ((_DWORD)v28 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_24C060EC0[v28])(&v37, v24 - 16, v25);
        *v24 = v28;
      }
      v26 = v25 - 24;
      v24 += 24;
      v25 += 96;
    }
    while (v26 + 96 != v23);
    v21 = *(char **)a1;
    v29 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v29)
    {
      v30 = 96 * v29;
      do
      {
        v31 = &v21[v30];
        v32 = *(unsigned int *)&v21[v30 - 8];
        if ((_DWORD)v32 != -1)
          ((void (*)(char *, char *))off_24C060EA8[v32])(&v37, v31 - 72);
        *((_DWORD *)v31 - 2) = -1;
        if (*(v31 - 73) < 0)
          operator delete(*((void **)v31 - 12));
        v30 -= 96;
      }
      while (v30);
      v21 = *(char **)a1;
    }
  }
  v33 = v36;
  if (v21 != v6)
    free(v21);
  *(_QWORD *)a1 = v8;
  v34 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v34;
  *(_DWORD *)(a1 + 12) = v33;
  return (uint64_t)&v8[96 * v34 - 96];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,std::string>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  char *v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  size_t v11;
  const void *v12;
  char *v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v36);
  v8 = v7;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = &v7[96 * v9];
  v12 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v38 = *a3;
  v39 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v40 = 2;
  if (v12)
  {
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v11 >= 0x17)
    {
      v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v17 = v11 | 7;
      v18 = v17 + 1;
      v19 = (char *)operator new(v17 + 1);
      *((_QWORD *)v10 + 1) = v11;
      *((_QWORD *)v10 + 2) = v18 | 0x8000000000000000;
      *(_QWORD *)v10 = v19;
      v10 = v19;
    }
    else
    {
      v10[23] = v11;
      if (!v11)
      {
LABEL_11:
        v10[v11] = 0;
        v16 = v40;
        v20 = &v8[96 * v9];
        v20[24] = 0;
        v15 = (int *)(v20 + 24);
        v15[16] = -1;
        v14 = v15 + 16;
        if (v16 == -1)
          goto LABEL_14;
        goto LABEL_12;
      }
    }
    memmove(v10, v12, v11);
    goto LABEL_11;
  }
  v13 = &v7[96 * v9];
  *((_DWORD *)v13 + 22) = -1;
  v14 = (int *)(v13 + 88);
  v15 = v14 - 16;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[24] = 0;
  *((_QWORD *)v10 + 2) = 0;
  v16 = 2;
LABEL_12:
  ((void (*)(char *, int *, __int128 *))off_24C060EC0[v16])(&v37, v15, &v38);
  *v14 = v16;
  if (v40 != -1)
    ((void (*)(char *, __int128 *))off_24C060EA8[v40])(&v37, &v38);
LABEL_14:
  v40 = -1;
  v21 = *(char **)a1;
  v22 = *(_DWORD *)(a1 + 8);
  if (v22)
  {
    v23 = &v21[96 * v22];
    v24 = v8 + 88;
    v25 = v21 + 24;
    do
    {
      v27 = *(_OWORD *)(v25 - 24);
      *((_QWORD *)v24 - 9) = *((_QWORD *)v25 - 1);
      *(_OWORD *)(v24 - 22) = v27;
      *((_QWORD *)v25 - 2) = 0;
      *((_QWORD *)v25 - 1) = 0;
      *((_QWORD *)v25 - 3) = 0;
      *((_BYTE *)v24 - 64) = 0;
      *v24 = -1;
      v28 = *((unsigned int *)v25 + 16);
      if ((_DWORD)v28 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_24C060EC0[v28])(&v37, v24 - 16, v25);
        *v24 = v28;
      }
      v26 = v25 - 24;
      v24 += 24;
      v25 += 96;
    }
    while (v26 + 96 != v23);
    v21 = *(char **)a1;
    v29 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v29)
    {
      v30 = 96 * v29;
      do
      {
        v31 = &v21[v30];
        v32 = *(unsigned int *)&v21[v30 - 8];
        if ((_DWORD)v32 != -1)
          ((void (*)(char *, char *))off_24C060EA8[v32])(&v37, v31 - 72);
        *((_DWORD *)v31 - 2) = -1;
        if (*(v31 - 73) < 0)
          operator delete(*((void **)v31 - 12));
        v30 -= 96;
      }
      while (v30);
      v21 = *(char **)a1;
    }
  }
  v33 = v36;
  if (v21 != v6)
    free(v21);
  *(_QWORD *)a1 = v8;
  v34 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v34;
  *(_DWORD *)(a1 + 12) = v33;
  return (uint64_t)&v8[96 * v34 - 96];
}

uint64_t mlir::detail::AsmStateImpl::AsmStateImpl(uint64_t a1, unsigned int *a2, __int128 *a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  BOOL v20;
  int64_t v21;
  unsigned int v22;
  char *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  void *buffer;
  uint64_t v38;
  uint64_t v39;
  uint64_t InterfaceFor;
  mlir::Region *v41;
  unsigned int v42;
  mlir::Block *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  mlir::Block *v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  int v52;
  mlir::Block *v53;
  _WORD *v54;
  size_t v55;
  __int128 *v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned int v60;
  unint64_t v61;
  _BOOL4 isEntryBlock;
  BOOL v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  unsigned __int8 v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  ZinIrHalH13g *v91;
  ZinIrHalH13g *i;
  mlir::Operation *v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  mlir::Block *v98;
  uint64_t v99;
  int v100;
  BOOL v101;
  int v102;
  ZinIrHalH13g *v103;
  ZinIrHalH13g *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  char *v111;
  __int128 *v112;
  char *v113;
  __int128 v114;
  unint64_t v115;
  BOOL v116;
  int64_t v117;
  uint64_t *j;
  __int128 v119;
  __int128 v120;
  __int128 *v122;
  uint64_t **v124;
  _DWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  mlir::Region *v128;
  __int128 *__src;
  unsigned int __srca;
  __int128 v131;
  ZinIrHalH13g *v132;
  __int128 v133;
  int64_t v134;
  _QWORD *v135;
  uint64_t v136;
  ZinIrHalH13g *v137;
  uint64_t v138;
  int v139;
  __int128 *v140;
  void *v141;
  uint64_t v142;
  _BYTE v143[73];
  _QWORD *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  _QWORD v148[4];
  void *v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  int64_t v153;
  _QWORD v154[6];

  v154[4] = *MEMORY[0x24BDAC8D0];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection((_QWORD *)a1, Context);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 0x600000000;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x400000000;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = a1 + 464;
  *(_QWORD *)(a1 + 456) = 0x400000000;
  *(_QWORD *)(a1 + 496) = a1 + 512;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 576) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 560) = v9;
  *(_OWORD *)(a1 + 544) = v8;
  v146 = v148;
  v147 = 0x400000001;
  v122 = a3;
  v149 = (char *)&v150 + 8;
  v151 = 1;
  v150 = xmmword_207AB84D0;
  v148[0] = llvm::allocate_buffer(0x1000uLL, (std::align_val_t)8uLL);
  v10 = (_QWORD *)((v148[0] + 7) & 0xFFFFFFFFFFFFFFF8);
  v145 = v148[0] + 4096;
  v144 = v10 + 3;
  v124 = (uint64_t **)(a1 + 424);
  *v10 = a1 + 400;
  v10[1] = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v10;
  v10[2] = 0;
  v141 = v143;
  v142 = 0x800000000;
  v11 = a2[11];
  if ((v11 & 0x7FFFFF) != 0)
  {
    v12 = 0;
    v13 = (((unint64_t)&a2[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * a2[10];
    v14 = 24 * (v11 & 0x7FFFFF);
    do
    {
      *(_QWORD *)&v133 = v13;
      *((_QWORD *)&v133 + 1) = *(_QWORD *)(a1 + 528);
      LODWORD(v134) = *(_DWORD *)(a1 + 536);
      v135 = v10;
      v15 = (char *)v141;
      if (v12 >= HIDWORD(v142))
      {
        v19 = v12 + 1;
        v20 = (char *)v141 + 32 * v12 > (char *)&v133;
        if (v141 <= &v133 && v20)
        {
          v21 = (char *)&v133 - (_BYTE *)v141;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v19, 32);
          v15 = (char *)v141;
          v16 = (__int128 *)((char *)v141 + v21);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v19, 32);
          v16 = &v133;
          v15 = (char *)v141;
        }
      }
      else
      {
        v16 = &v133;
      }
      v17 = &v15[32 * v142];
      v18 = v16[1];
      *(_OWORD *)v17 = *v16;
      *((_OWORD *)v17 + 1) = v18;
      v12 = v142 + 1;
      LODWORD(v142) = v142 + 1;
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  v22 = v142;
  if ((_DWORD)v142)
  {
    v125 = (_DWORD *)(a1 + 504);
    v126 = (_QWORD *)(a1 + 496);
    while (1)
    {
      v23 = (char *)v141 + 32 * v22;
      v128 = (mlir::Region *)*((_QWORD *)v23 - 4);
      v24 = *((_DWORD *)v23 - 4);
      v25 = (uint64_t *)*((_QWORD *)v23 - 1);
      v26 = *((_QWORD *)v23 - 3);
      LODWORD(v142) = v22 - 1;
      *(_QWORD *)(a1 + 528) = v26;
      *(_DWORD *)(a1 + 536) = v24;
      v27 = *(uint64_t **)(a1 + 424);
      if (v27 != v25)
        break;
LABEL_15:
      *((_QWORD *)&v150 + 1) += 24;
      if (v144
        && (((unint64_t)v144 + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v144 + 24 <= v145 - (uint64_t)v144)
      {
        v28 = (_QWORD *)(((unint64_t)v144 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      else
      {
        v35 = v147 >> 7;
        if (v147 >> 7 >= 0x1E)
          LOBYTE(v35) = 30;
        v36 = 4096 << v35;
        buffer = llvm::allocate_buffer(4096 << v35, (std::align_val_t)8uLL);
        v38 = v147;
        if (v147 >= (unint64_t)HIDWORD(v147))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, v148, v147 + 1, 8);
          v38 = v147;
        }
        *((_QWORD *)v146 + v38) = buffer;
        LODWORD(v147) = v147 + 1;
        v145 = (uint64_t)buffer + v36;
        v28 = (_QWORD *)(((unint64_t)buffer + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      v144 = v28 + 3;
      *v28 = a1 + 400;
      v28[1] = *(_QWORD *)(a1 + 424);
      *(_QWORD *)(a1 + 424) = v28;
      v28[2] = 0;
      *(_QWORD *)&v131 = a1 + 280;
      if ((*(_BYTE *)(a1 + 576) & 4) == 0)
      {
        v39 = *((_QWORD *)v128 + 2);
        if (v39)
        {
          if (mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(*((_QWORD *)v128 + 2)))
          {
            InterfaceFor = mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(v39);
          }
        }
      }
      v41 = (mlir::Region *)*((_QWORD *)v128 + 1);
      if (v41 != v128)
      {
        v42 = 0;
        while (2)
        {
          if (v41)
            v43 = (mlir::Region *)((char *)v41 - 8);
          else
            v43 = 0;
          v44 = *(_DWORD *)(a1 + 392);
          if (!v44)
            goto LABEL_138;
          v45 = *(_QWORD *)(a1 + 376);
          v46 = ((v43 >> 4) ^ (v43 >> 9)) & (v44 - 1);
          v47 = v45 + 32 * v46;
          v48 = *(mlir::Block **)v47;
          if (*(mlir::Block **)v47 == v43)
            goto LABEL_91;
          v49 = 0;
          v50 = 1;
          while (v48 != (mlir::Block *)-4096)
          {
            if (v49)
              v51 = 0;
            else
              v51 = v48 == (mlir::Block *)-8192;
            if (v51)
              v49 = v47;
            v52 = v46 + v50++;
            v46 = v52 & (v44 - 1);
            v47 = v45 + 32 * v46;
            v48 = *(mlir::Block **)v47;
            if (*(mlir::Block **)v47 == v43)
              goto LABEL_91;
          }
          if (v49)
            v47 = v49;
          v94 = *(_DWORD *)(a1 + 384);
          if (4 * v94 + 4 < 3 * v44)
          {
            if (v44 + ~v94 - *(_DWORD *)(a1 + 388) <= v44 >> 3)
              goto LABEL_139;
          }
          else
          {
LABEL_138:
            v44 *= 2;
LABEL_139:
            v95 = *(_QWORD *)(a1 + 376);
            v96 = *(_DWORD *)(a1 + 392) - 1;
            v97 = v96 & ((v43 >> 4) ^ (v43 >> 9));
            v47 = v95 + 32 * v97;
            v98 = *(mlir::Block **)v47;
            if (*(mlir::Block **)v47 == v43)
            {
LABEL_140:
              ++*(_DWORD *)(a1 + 384);
              if (v43 == (mlir::Block *)-4096)
              {
LABEL_65:
                *(_QWORD *)v47 = v43;
                *(_DWORD *)(v47 + 8) = -1;
                *(_QWORD *)(v47 + 16) = &byte_207AF6795;
                *(_QWORD *)(v47 + 24) = 0;
                v152 = 0uLL;
                v153 = 0;
                DWORD2(v133) = 0;
                LOBYTE(v137) = 0;
                v138 = 0;
                v139 = 1;
                v135 = 0;
                v136 = 0;
                v134 = 0;
                *(_QWORD *)&v133 = &unk_24C02DC40;
                v140 = &v152;
                llvm::raw_ostream::SetBufferAndMode((uint64_t)&v133, 0, 0, 0);
                v54 = (_WORD *)v136;
                if ((unint64_t)v135 - v136 > 2)
                {
                  *(_BYTE *)(v136 + 2) = 98;
                  *v54 = 25182;
                  v136 += 3;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v133, "^bb", 3uLL);
                }
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v133, v42);
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v133);
                if (v153 >= 0)
                  v55 = HIBYTE(v153);
                else
                  v55 = *((_QWORD *)&v152 + 1);
                if (v55)
                {
                  if (v153 >= 0)
                    v56 = &v152;
                  else
                    v56 = (__int128 *)v152;
                  *(_QWORD *)(a1 + 512) += v55;
                  v57 = *(char **)(a1 + 432);
                  if (v57 && v55 <= *(_QWORD *)(a1 + 440) - (_QWORD)v57)
                  {
                    *(_QWORD *)(a1 + 432) = &v57[v55];
                  }
                  else
                  {
                    __src = v56;
                    if (v55 <= 0x1000)
                    {
                      v60 = *(_DWORD *)(a1 + 456) >> 7;
                      if (v60 >= 0x1E)
                        LOBYTE(v60) = 30;
                      v127 = 4096 << v60;
                      v57 = (char *)llvm::allocate_buffer(4096 << v60, (std::align_val_t)8uLL);
                      v61 = *(unsigned int *)(a1 + 456);
                      if (v61 >= *(unsigned int *)(a1 + 460))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 448, (void *)(a1 + 464), v61 + 1, 8);
                        v61 = *(unsigned int *)(a1 + 456);
                      }
                      v56 = __src;
                      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v61) = v57;
                      ++*(_DWORD *)(a1 + 456);
                      *(_QWORD *)(a1 + 432) = &v57[v55];
                      *(_QWORD *)(a1 + 440) = &v57[v127];
                    }
                    else
                    {
                      v57 = (char *)llvm::allocate_buffer(v55, (std::align_val_t)8uLL);
                      v58 = *(unsigned int *)(a1 + 504);
                      if (v58 >= *(unsigned int *)(a1 + 508))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v126, (void *)(a1 + 512), v58 + 1, 16);
                        v58 = *v125;
                      }
                      v56 = __src;
                      v59 = (_QWORD *)(*v126 + 16 * v58);
                      *v59 = v57;
                      v59[1] = v55;
                      ++*v125;
                    }
                  }
                  memmove(v57, v56, v55);
                  *(_QWORD *)(v47 + 16) = v57;
                  *(_QWORD *)(v47 + 24) = v55;
                  if (SHIBYTE(v153) < 0)
LABEL_90:
                    operator delete((void *)v152);
                }
                else
                {
                  *(_QWORD *)(v47 + 16) = 0;
                  *(_QWORD *)(v47 + 24) = 0;
                  if (SHIBYTE(v153) < 0)
                    goto LABEL_90;
                }
LABEL_91:
                __srca = v42;
                *(_DWORD *)(v47 + 8) = v42;
                isEntryBlock = mlir::Block::isEntryBlock(v43);
                v63 = isEntryBlock;
                v64 = 3;
                if (!isEntryBlock)
                  v64 = 0;
                *(_QWORD *)&v152 = v154;
                v153 = 32;
                if (isEntryBlock)
                  qmemcpy(v154, "arg", 3);
                *((_QWORD *)&v152 + 1) = v64;
                DWORD2(v133) = 0;
                LOBYTE(v137) = 0;
                v138 = 0;
                v139 = 1;
                v135 = 0;
                v136 = 0;
                v134 = 0;
                *(_QWORD *)&v133 = &off_24C02DCB8;
                v140 = &v152;
                llvm::raw_ostream::SetBufferAndMode((uint64_t)&v133, 0, 0, 0);
                v66 = (unint64_t *)*((_QWORD *)v43 + 6);
                v65 = (unint64_t *)*((_QWORD *)v43 + 7);
                if (v65 != v66)
                {
                  if (v63)
                  {
                    while (1)
                    {
                      v79 = *v66;
                      v80 = *(_DWORD *)(a1 + 296);
                      if (v80)
                      {
                        v81 = *(_QWORD *)(a1 + 280);
                        if ((v82 & 1) == 0
                        {
                          v90 = llvm::hashing::detail::fixed_seed_override;
                          if (!llvm::hashing::detail::fixed_seed_override)
                            v90 = 0xFF51AFD7ED558CCDLL;
                          llvm::hashing::detail::get_execution_seed(void)::seed = v90;
                        }
                        v83 = 0x9DDFEA08EB382D69
                            * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v79) ^ HIDWORD(v79));
                        v84 = 0x9DDFEA08EB382D69 * (HIDWORD(v79) ^ (v83 >> 47) ^ v83);
                        v85 = (-348639895 * ((v84 >> 47) ^ v84)) & (v80 - 1);
                        v86 = *(_QWORD *)(v81 + 16 * v85);
                        if (v86 == v79)
                          goto LABEL_114;
                        v87 = 1;
                        while (v86 != -4096)
                        {
                          v88 = v85 + v87++;
                          v85 = v88 & (v80 - 1);
                          v86 = *(_QWORD *)(v81 + 16 * v85);
                          if (v86 == v79)
                            goto LABEL_114;
                        }
                      }
                      v89 = *((_QWORD *)&v152 + 1);
                      if (*((_QWORD *)&v152 + 1) != 3)
                      {
                        if (*((_QWORD *)&v152 + 1) <= 3uLL)
                        {
                          if ((unint64_t)v153 > 2
                            || (llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v152, v154, 3uLL, 1),
                                v89 = *((_QWORD *)&v152 + 1),
                                *((_QWORD *)&v152 + 1) != 3))
                          {
                            bzero((void *)(v152 + v89), 3 - v89);
                          }
                        }
                        *((_QWORD *)&v152 + 1) = 3;
                      }
                      v78 = *(unsigned int *)(a1 + 532);
                      *(_DWORD *)(a1 + 532) = v78 + 1;
                      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v133, v78);
LABEL_114:
                      if (++v66 == v65)
                        goto LABEL_131;
                    }
                  }
                  while (2)
                  {
                    v67 = *v66;
                    v68 = *(_DWORD *)(a1 + 296);
                    if (v68)
                    {
                      v69 = *(_QWORD *)(a1 + 280);
                      if ((v70 & 1) == 0
                      {
                        v77 = llvm::hashing::detail::fixed_seed_override;
                        if (!llvm::hashing::detail::fixed_seed_override)
                          v77 = 0xFF51AFD7ED558CCDLL;
                        llvm::hashing::detail::get_execution_seed(void)::seed = v77;
                      }
                      v71 = 0x9DDFEA08EB382D69
                          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v67) ^ HIDWORD(v67));
                      v72 = 0x9DDFEA08EB382D69 * (HIDWORD(v67) ^ (v71 >> 47) ^ v71);
                      v73 = (-348639895 * ((v72 >> 47) ^ v72)) & (v68 - 1);
                      v74 = *(_QWORD *)(v69 + 16 * v73);
                      if (v74 != v67)
                      {
                        v75 = 1;
                        while (v74 != -4096)
                        {
                          v76 = v73 + v75++;
                          v73 = v76 & (v68 - 1);
                          v74 = *(_QWORD *)(v69 + 16 * v73);
                          if (v74 == v67)
                            goto LABEL_99;
                        }
                        goto LABEL_98;
                      }
                    }
                    else
                    {
LABEL_98:
                    }
LABEL_99:
                    if (++v66 == v65)
                      break;
                    continue;
                  }
                }
LABEL_131:
                v91 = (mlir::Block *)((char *)v43 + 32);
                for (i = (ZinIrHalH13g *)*((_QWORD *)v43 + 5); i != v91; i = (ZinIrHalH13g *)*((_QWORD *)i + 1))
                {
                  ZinIrHalH13g::~ZinIrHalH13g(i);
                }
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v133);
                if ((_QWORD *)v152 != v154)
                  free((void *)v152);
                v42 = __srca + 1;
                v41 = (mlir::Region *)*((_QWORD *)v41 + 1);
                if (v41 == v128)
                  goto LABEL_154;
                continue;
              }
LABEL_64:
              --*(_DWORD *)(a1 + 388);
              goto LABEL_65;
            }
            v99 = 0;
            v100 = 1;
            while (v98 != (mlir::Block *)-4096)
            {
              if (v99)
                v101 = 0;
              else
                v101 = v98 == (mlir::Block *)-8192;
              if (v101)
                v99 = v47;
              v102 = v97 + v100++;
              v97 = v102 & v96;
              v47 = v95 + 32 * v97;
              v98 = *(mlir::Block **)v47;
              if (*(mlir::Block **)v47 == v43)
                goto LABEL_140;
            }
            if (v99)
              v47 = v99;
          }
          break;
        }
        v53 = *(mlir::Block **)v47;
        ++*(_DWORD *)(a1 + 384);
        if (v53 == (mlir::Block *)-4096)
          goto LABEL_65;
        goto LABEL_64;
      }
LABEL_154:
      mlir::Region::OpIterator::OpIterator(&v152, v128, 0);
      mlir::Region::OpIterator::OpIterator(&v135, v128, 1);
      v103 = (ZinIrHalH13g *)v153;
      v134 = v153;
      v133 = v152;
      v131 = v152;
      v132 = (ZinIrHalH13g *)v153;
      v104 = v137;
      while (v103 != v104)
      {
        ZinIrHalH13g::~ZinIrHalH13g(v103);
        v106 = *(unsigned int *)(v105 + 44);
        v107 = v106 & 0x7FFFFF;
        if ((v106 & 0x7FFFFF) != 0)
        {
          v108 = ((v105 + 16 * ((v106 >> 23) & 1) + ((v106 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
               + 32 * *(unsigned int *)(v105 + 40);
          v109 = v142;
          v110 = 24 * v107;
          do
          {
            *(_QWORD *)&v152 = v108;
            *((_QWORD *)&v152 + 1) = *(_QWORD *)(a1 + 528);
            LODWORD(v153) = *(_DWORD *)(a1 + 536);
            v154[0] = v28;
            v111 = (char *)v141;
            if (v109 >= HIDWORD(v142))
            {
              v115 = v109 + 1;
              v116 = (char *)v141 + 32 * v109 > (char *)&v152;
              if (v141 <= &v152 && v116)
              {
                v117 = (char *)&v152 - (_BYTE *)v141;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v115, 32);
                v111 = (char *)v141;
                v112 = (__int128 *)((char *)v141 + v117);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v115, 32);
                v112 = &v152;
                v111 = (char *)v141;
              }
            }
            else
            {
              v112 = &v152;
            }
            v113 = &v111[32 * v142];
            v114 = v112[1];
            *(_OWORD *)v113 = *v112;
            *((_OWORD *)v113 + 1) = v114;
            v109 = v142 + 1;
            LODWORD(v142) = v142 + 1;
            v108 += 24;
            v110 -= 24;
          }
          while (v110);
        }
        mlir::Region::OpIterator::operator++((uint64_t *)&v131);
        v103 = v132;
      }
      v22 = v142;
      if (!(_DWORD)v142)
        goto LABEL_168;
    }
    while (1)
    {
      *(_QWORD *)(*v27 + 24) = v27[1];
      v29 = v27[2];
      if (v29)
        break;
      v27 = *v124;
      if (*v124 == v25)
        goto LABEL_15;
    }
    v30 = *v27;
    if (!*(_QWORD *)(v29 + 8))
    {
      *(_QWORD *)&v133 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v133))
      {
        *(_OWORD *)v133 = xmmword_207AB84E0;
        *(int32x2_t *)(v30 + 8) = vadd_s32(*(int32x2_t *)(v30 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
LABEL_22:
      v27[2] = *(_QWORD *)v29;
      llvm::deallocate_buffer((llvm *)v29, (void *)0x28);
    }
    *(_QWORD *)&v133 = 0;
    v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v133);
    v32 = v133;
    if ((v31 & 1) != 0)
    {
LABEL_21:
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(v29 + 8);
      goto LABEL_22;
    }
    v33 = *(_DWORD *)(v30 + 8);
    v34 = *(_DWORD *)(v30 + 16);
    if (4 * v33 + 4 >= 3 * v34)
    {
      v34 *= 2;
    }
    else if (v34 + ~v33 - *(_DWORD *)(v30 + 12) > v34 >> 3)
    {
      ++*(_DWORD *)(v30 + 8);
      if (*(_QWORD *)v32 == -1)
      {
LABEL_20:
        *(_OWORD *)v32 = *(_OWORD *)(v29 + 16);
        *(_QWORD *)(v32 + 16) = 0;
        goto LABEL_21;
      }
LABEL_29:
      --*(_DWORD *)(v30 + 12);
      goto LABEL_20;
    }
    llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(v30, v34);
    *(_QWORD *)&v133 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v133);
    v32 = v133;
    ++*(_DWORD *)(v30 + 8);
    if (*(_QWORD *)v32 == -1)
      goto LABEL_20;
    goto LABEL_29;
  }
LABEL_168:
  for (j = *v124; *v124; j = *v124)
    llvm::ScopedHashTableScope<llvm::StringRef,char,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::MallocAllocator>::~ScopedHashTableScope(j);
  if (v141 != v143)
    free(v141);
  if ((_DWORD)v147)
    llvm::deallocate_buffer(*(llvm **)v146, (void *)0x1000);
  if ((_DWORD)v150)
    llvm::deallocate_buffer(*(llvm **)v149, *((void **)v149 + 1));
  if (v149 != (char *)&v150 + 8)
    free(v149);
  if (v146 != v148)
    free(v146);
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 0;
  v119 = *v122;
  v120 = v122[1];
  *(_QWORD *)(a1 + 648) = *((_QWORD *)v122 + 4);
  *(_OWORD *)(a1 + 616) = v119;
  *(_OWORD *)(a1 + 632) = v120;
  *(_QWORD *)(a1 + 656) = a4;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 688) = a1 + 704;
  *(_QWORD *)(a1 + 696) = 0;
  return a1;
}

uint64_t mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection(_QWORD *a1, mlir::MLIRContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v4 & 1) == 0
  {
    v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
    v15 = 77;
    v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
    if (v15 >= v7)
      v8 = v7;
    else
      v8 = v15;
    v9 = &v14[v8];
    v10 = v15 - v8;
    if (v15 - v8 >= 0x12)
      v11 = 18;
    else
      v11 = v15 - v8;
    v12 = v10 - v11;
    if (v12 >= v12 - 1)
      v13 = v12 - 1;
    else
      v13 = v12;
    mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id;
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
  v15 = 77;
  llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  result = mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase((uint64_t)a1, a2, v5);
  *a1 = &unk_24C04FB88;
  return result;
}

void mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::~DialectInterfaceCollection(mlir::detail::DialectInterfaceCollectionBase *a1)
{
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(a1);
}

void sub_2072BDDD0()
{
  JUMPOUT(0x20BD002F8);
}

void `anonymous namespace'::SSANameState::numberValuesInOp(_anonymous_namespace_::SSANameState *this, mlir::Operation *a2)
{
  uint64_t InterfaceFor;
  void (**v5)(_QWORD, mlir::Operation *, _QWORD, _QWORD *);
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  mlir::Operation **v13;
  mlir::Operation *v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  mlir::Operation **v22;
  mlir::Operation *v23;
  mlir::Operation **v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  void *v29;
  mlir::Operation *v30;
  mlir::Operation **v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  mlir::Operation *v36;
  mlir::Operation **v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  unint64_t v41;
  _anonymous_namespace_::SSANameState *v42;
  _QWORD v43[2];
  _QWORD *v44;
  void *__base;
  size_t __nel;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  __base = &v47;
  v47 = 0;
  __nel = 0x200000001;
  v43[0] = this;
  v43[1] = &__base;
  v42 = this;
  if ((*((_BYTE *)this + 296) & 4) == 0)
  {
    if (mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2))
    {
      InterfaceFor = mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
      v5 = (void (**)(_QWORD, mlir::Operation *, _QWORD, _QWORD *))InterfaceFor;
      if (a2)
      {
      }
    }
  }
  if (*((_DWORD *)a2 + 9))
  {
    v41 = (unint64_t)a2 - 16;
    v44 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v41, &v44) & 1) == 0)
    {
      v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)&v41, &v41, v44);
      *v6 = v41;
      *((_DWORD *)v6 + 2) = (*((_DWORD *)this + 62))++;
    }
    if ((_DWORD)__nel)
    {
      if ((_DWORD)__nel == 1)
        goto LABEL_37;
      qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<int>);
    }
    v9 = *((_QWORD *)this + 9);
    v8 = (char *)this + 72;
    v7 = v9;
    v44 = a2;
    v10 = *((_DWORD *)v8 + 4);
    if (v10)
    {
      v11 = v10 - 1;
      v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
      v13 = (mlir::Operation **)(v7 + 32 * v12);
      v14 = *v13;
      if (*v13 == a2)
        goto LABEL_37;
      v15 = 0;
      v16 = 1;
      while (v14 != (mlir::Operation *)-4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == (mlir::Operation *)-8192;
        if (v17)
          v15 = (uint64_t *)v13;
        v18 = v12 + v16++;
        v12 = v18 & v11;
        v13 = (mlir::Operation **)(v7 + 32 * v12);
        v14 = *v13;
        if (*v13 == a2)
          goto LABEL_37;
      }
      if (v15)
        v28 = v15;
      else
        v28 = (uint64_t *)v13;
    }
    else
    {
      v28 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::InsertIntoBucket<mlir::Operation *,llvm::SmallVector<int,2u>>((uint64_t)v8, v28, (uint64_t *)&v44, (uint64_t)&__base);
LABEL_37:
    v29 = __base;
    if (__base == &v47)
      return;
    goto LABEL_38;
  }
  if ((*((_BYTE *)this + 296) & 0x40) == 0)
    goto LABEL_37;
  v19 = *((_QWORD *)this + 6);
  v20 = *((_DWORD *)this + 16);
  if (!v20)
    goto LABEL_53;
  v21 = (v20 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v22 = (mlir::Operation **)(v19 + 16 * v21);
  v23 = *v22;
  if (*v22 == a2)
    goto LABEL_37;
  v24 = 0;
  v25 = 1;
  while (v23 != (mlir::Operation *)-4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == (mlir::Operation *)-8192;
    if (v26)
      v24 = v22;
    v27 = v21 + v25++;
    v21 = v27 & (v20 - 1);
    v22 = (mlir::Operation **)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_37;
  }
  v31 = v24 ? v24 : v22;
  v32 = *((_DWORD *)this + 14);
  if (4 * v32 + 4 < 3 * v20)
  {
    if (v20 + ~v32 - *((_DWORD *)this + 15) > v20 >> 3)
      goto LABEL_42;
  }
  else
  {
LABEL_53:
    v20 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow((uint64_t)this + 48, v20);
  v33 = *((_QWORD *)this + 6);
  v34 = *((_DWORD *)this + 16) - 1;
  v35 = v34 & ((a2 >> 4) ^ (a2 >> 9));
  v31 = (mlir::Operation **)(v33 + 16 * v35);
  v36 = *v31;
  if (*v31 != a2)
  {
    v37 = 0;
    v38 = 1;
    while (v36 != (mlir::Operation *)-4096)
    {
      if (v37)
        v39 = 0;
      else
        v39 = v36 == (mlir::Operation *)-8192;
      if (v39)
        v37 = v31;
      v40 = v35 + v38++;
      v35 = v40 & v34;
      v31 = (mlir::Operation **)(v33 + 16 * (v40 & v34));
      v36 = *v31;
      if (*v31 == a2)
        goto LABEL_55;
    }
    if (v37)
      v31 = v37;
LABEL_42:
    v30 = *v31;
    ++*((_DWORD *)this + 14);
    if (v30 == (mlir::Operation *)-4096)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_55:
  ++*((_DWORD *)this + 14);
  if (a2 != (mlir::Operation *)-4096)
LABEL_43:
    --*((_DWORD *)this + 15);
LABEL_44:
  *v31 = a2;
  *((_DWORD *)v31 + 2) = (*((_DWORD *)this + 62))++;
  v29 = __base;
  if (__base != &v47)
LABEL_38:
    free(v29);
}

void llvm::function_ref<void ()(mlir::Block *,llvm::StringRef)>::callback_fn<`anonymous namespace'::SSANameState::numberValuesInOp(mlir::Operation &)::$_0>(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  size_t v7;
  unsigned __int8 *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  int v32;
  void *v33;
  __int128 v34;
  _BYTE v35[16];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v33 = v35;
  v34 = xmmword_207A7D4C0;
  v35[0] = 94;
  v6 = sanitizeIdentifier(a3, a4, (unsigned __int8 **)&v33, "$._-", 4uLL, 1);
  v8 = v6;
  v9 = v7;
  v10 = (char *)v33;
  if (v33 == v6)
  {
    v10 = (char *)v6;
    if (v7)
      goto LABEL_7;
  }
  else
  {
    v11 = v34;
    if (*((_QWORD *)&v34 + 1) < (unint64_t)v34 + v7)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v34 + v7, 1);
      v10 = (char *)v33;
      v11 = v34;
    }
    if (v9)
    {
      memcpy(&v10[v11], v8, v9);
      v10 = (char *)v33;
      v11 = v34;
    }
    v9 += v11;
    *(_QWORD *)&v34 = v9;
    if (v9)
    {
LABEL_7:
      v12 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v5 + 152), v9, 0);
      memmove(v12, v10, v9);
      v13 = v5 + 96;
      v14 = *(_QWORD *)(v5 + 96);
      v15 = *(_DWORD *)(v5 + 112);
      if (v15)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  v12 = 0;
  v13 = v5 + 96;
  v14 = *(_QWORD *)(v5 + 96);
  v15 = *(_DWORD *)(v5 + 112);
  if (v15)
  {
LABEL_8:
    v16 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v17 = (_QWORD *)(v14 + 32 * v16);
    v18 = *v17;
    if (*v17 == a2)
      goto LABEL_25;
    v19 = 0;
    v20 = 1;
    while (v18 != -4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == -8192;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & (v15 - 1);
      v17 = (_QWORD *)(v14 + 32 * v16);
      v18 = *v17;
      if (*v17 == a2)
        goto LABEL_25;
    }
    if (v19)
      v17 = v19;
    v23 = *(_DWORD *)(v5 + 104);
    if (4 * v23 + 4 >= 3 * v15)
      goto LABEL_31;
LABEL_21:
    if (v15 + ~v23 - *(_DWORD *)(v5 + 108) > v15 >> 3)
      goto LABEL_22;
    goto LABEL_32;
  }
LABEL_20:
  v17 = 0;
  v23 = *(_DWORD *)(v5 + 104);
  if (4 * v23 + 4 < 3 * v15)
    goto LABEL_21;
LABEL_31:
  v15 *= 2;
LABEL_32:
  v25 = *(_QWORD *)(v5 + 96);
  v26 = *(_DWORD *)(v5 + 112) - 1;
  v27 = v26 & ((a2 >> 4) ^ (a2 >> 9));
  v17 = (_QWORD *)(v25 + 32 * v27);
  v28 = *v17;
  if (*v17 == a2)
  {
LABEL_33:
    ++*(_DWORD *)(v5 + 104);
    if (a2 == -4096)
      goto LABEL_24;
    goto LABEL_23;
  }
  v29 = 0;
  v30 = 1;
  while (v28 != -4096)
  {
    if (v29)
      v31 = 0;
    else
      v31 = v28 == -8192;
    if (v31)
      v29 = v17;
    v32 = v27 + v30++;
    v27 = v32 & v26;
    v17 = (_QWORD *)(v25 + 32 * v27);
    v28 = *v17;
    if (*v17 == a2)
      goto LABEL_33;
  }
  if (v29)
    v17 = v29;
LABEL_22:
  v24 = *v17;
  ++*(_DWORD *)(v5 + 104);
  if (v24 != -4096)
LABEL_23:
    --*(_DWORD *)(v5 + 108);
LABEL_24:
  *v17 = a2;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = 0;
LABEL_25:
  *((_DWORD *)v17 + 2) = -1;
  v17[2] = v12;
  v17[3] = v9;
  if (v33 != v35)
    free(v33);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,`anonymous namespace'::BlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,`anonymous namespace'::BlockInfo>>,mlir::Block *,`anonymous namespace'::BlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,`anonymous namespace'::BlockInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v19 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = *(_DWORD *)(a1 + 16);
          if (v20)
          {
            v21 = v20 - 1;
            v22 = (v20 - 1) & ((v19 >> 4) ^ (v19 >> 9));
            v17 = *(_QWORD *)a1 + 32 * v22;
            v23 = *(_QWORD *)v17;
            if (*(_QWORD *)v17 != v19)
            {
              v24 = 0;
              v25 = 1;
              while (v23 != -4096)
              {
                if (v24)
                  v26 = 0;
                else
                  v26 = v23 == -8192;
                if (v26)
                  v24 = v17;
                v27 = v22 + v25++;
                v22 = v27 & v21;
                v17 = *(_QWORD *)a1 + 32 * v22;
                v23 = *(_QWORD *)v17;
                if (*(_QWORD *)v17 == v19)
                  goto LABEL_15;
              }
              if (v24)
                v17 = v24;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_15:
          *(_QWORD *)v17 = v19;
          v18 = *(_OWORD *)((char *)v16 + 8);
          *(_QWORD *)(v17 + 24) = *((_QWORD *)v16 + 3);
          *(_OWORD *)(v17 + 8) = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v28 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v28)
  {
    if (((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_38;
    v29 = ((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v29 & 0xFFFFFFFFFFFFFFELL)];
    v30 = result + 4;
    v31 = v29 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 4) = -4096;
      *v30 = -4096;
      v30 += 8;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_38:
      v32 = &result[4 * v28];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v32);
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Value,llvm::StringRef)>::callback_fn<`anonymous namespace'::SSANameState::numberValuesInOp(mlir::Operation &)::$_1>(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  if (a2 && (*(_QWORD *)(a2 + 8) & 7) == 6)
  {
    v7 = *(_DWORD *)(a2 + 16);
    v8 = v7 + 6;
    if (v7 == -6)
      return;
  }
  else
  {
    v8 = v6 & 7;
    if ((v6 & 7) == 0)
      return;
  }
  v9 = a1[1];
  v10 = *(unsigned int *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v9 + 16), v10 + 1, 4);
    LODWORD(v10) = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v9 + 4 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
}

__n128 `anonymous namespace'::SSANameState::setValueName(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  char v7;
  _DWORD *v8;
  void *v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  char v14;
  __n128 result;
  _DWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  size_t v25;
  void **p_dst;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  void **v31;
  size_t v32;
  uint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *buffer;
  uint64_t *v47;
  char v48;
  _QWORD *v49;
  unint64_t v50;
  __n128 v51;
  unint64_t v52;
  void *__dst;
  size_t v54;
  int64_t v55;
  void *__src[2];
  void *v57;
  __int128 v58;
  _BYTE v59[64];
  void *v60;
  __int128 v61;
  _BYTE v62[16];
  _QWORD v63[2];
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v52 = a2;
  if (a4)
  {
    v57 = 0;
    v7 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v52, &v57);
    v8 = v57;
    if ((v7 & 1) == 0)
    {
      v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v52, &v52, v57);
      *(_QWORD *)v8 = v52;
      v8[2] = 0;
    }
    v8[2] = -1;
    v60 = v62;
    v61 = xmmword_207AB84C0;
    __src[0] = sanitizeIdentifier(a3, a4, (unsigned __int8 **)&v60, "$._-", 4uLL, 1);
    __src[1] = v9;
    v57 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)__src, &v57) & 1) != 0)
    {
      v11 = __src[0];
      v10 = (char *)__src[1];
      v57 = v59;
      v58 = xmmword_207AB84F0;
      if (__src[1] < (void *)0x41)
      {
        v12 = 0;
        if (!__src[1])
        {
LABEL_16:
          v20 = &v10[v12];
          *(_QWORD *)&v58 = v20;
          if ((unint64_t)(v20 + 1) > *((_QWORD *)&v58 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)(v20 + 1), 1);
            v20 = (char *)v58;
          }
          v20[(_QWORD)v57] = 95;
          *(_QWORD *)&v58 = v58 + 1;
          while (1)
          {
            v21 = *(unsigned int *)(a1 + 256);
            *(_DWORD *)(a1 + 256) = v21 + 1;
            if ((_DWORD)v21)
            {
              v22 = 20;
              do
              {
                *((_BYTE *)v63 + v22--) = (v21 % 0xA) | 0x30;
                v23 = v21 > 9;
                v21 /= 0xAuLL;
              }
              while (v23);
              v24 = v22 + 1;
              v25 = 20 - v22;
              if ((unint64_t)(20 - v22) >= 0x7FFFFFFFFFFFFFF8)
                abort();
            }
            else
            {
              v64 = 48;
              v24 = 20;
              v25 = 1;
            }
            if (v25 > 0x16)
            {
              v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17)
                v27 = v25 | 7;
              v28 = v27 + 1;
              p_dst = (void **)operator new(v27 + 1);
              v54 = v25;
              v55 = v28 | 0x8000000000000000;
              __dst = p_dst;
              if (v24 != 21)
              {
LABEL_32:
                memcpy(p_dst, (char *)v63 + v24, v25);
                p_dst = (void **)((char *)p_dst + v25);
              }
            }
            else
            {
              HIBYTE(v55) = v25;
              p_dst = &__dst;
              if (v24 != 21)
                goto LABEL_32;
            }
            *(_BYTE *)p_dst = 0;
            v29 = SHIBYTE(v55);
            v30 = __dst;
            if (v55 >= 0)
              v31 = &__dst;
            else
              v31 = (void **)__dst;
            if (v55 >= 0)
              v32 = HIBYTE(v55);
            else
              v32 = v54;
            v33 = v58;
            if (*((_QWORD *)&v58 + 1) < (unint64_t)v58 + v32)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, v58 + v32, 1);
              v33 = v58;
            }
            if (v32)
            {
              memcpy((char *)v57 + v33, v31, v32);
              v33 = v58;
            }
            v34 = v33 + v32;
            *(_QWORD *)&v58 = v34;
            if (v29 < 0)
            {
              operator delete(v30);
              v34 = v58;
            }
            __dst = v57;
            v54 = v34;
            v63[0] = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)&__dst, v63) & 1) == 0)
            {
              v37 = (void *)v58;
              if ((_QWORD)v58)
              {
                v38 = v57;
                v39 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(a1 + 152), v58, 0);
                memmove(v39, v38, (size_t)v37);
                __src[0] = v39;
                __src[1] = v37;
                v40 = v57;
                if (v57 == v59)
                {
LABEL_60:
                  v41 = *(_QWORD *)(a1 + 144);
                  v57 = 0;
                  v42 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)__src, &v57);
                  v43 = v57;
                  if (v42)
                  {
                    v44 = *((_QWORD *)v57 + 2);
                  }
                  else
                  {
                    v43 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(a1 + 120, (uint64_t)__src, (uint64_t)__src, v57);
                    v44 = 0;
                    *(_OWORD *)v43 = *(_OWORD *)__src;
                    v43[2] = 0;
                  }
                  v45 = *(_QWORD *)(v41 + 16);
                  buffer = llvm::allocate_buffer(0x28uLL, (std::align_val_t)8uLL);
                  v51 = *(__n128 *)__src;
                  buffer[1] = *(_OWORD *)__src;
                  *((_BYTE *)buffer + 32) = 0;
                  *(_QWORD *)buffer = v45;
                  *((_QWORD *)buffer + 1) = v44;
                  v43[2] = buffer;
                  *(_QWORD *)(v41 + 16) = buffer;
                  if (v60 != v62)
                    free(v60);
                  v47 = (uint64_t *)(a1 + 24);
                  v57 = 0;
                  v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v47, &v52, &v57);
                  v49 = v57;
                  if ((v48 & 1) == 0)
                  {
                    v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v47, (uint64_t)&v52, &v52, v57);
                    v50 = v52;
                    v49[1] = 0;
                    v49[2] = 0;
                    *v49 = v50;
                  }
                  result = v51;
                  *(__n128 *)(v49 + 1) = v51;
                  return result;
                }
              }
              else
              {
                __src[0] = 0;
                __src[1] = 0;
                v40 = v57;
                if (v57 == v59)
                  goto LABEL_60;
              }
              free(v40);
              goto LABEL_60;
            }
            v35 = (char *)__src[1] + 1;
            v36 = (char *)v58;
            if ((void *)v58 != (char *)__src[1] + 1)
            {
              if ((void *)v58 <= (char *)__src[1] + 1)
              {
                if (*((_QWORD *)&v58 + 1) < (unint64_t)v35)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)__src[1] + 1, 1);
                  v36 = (char *)v58;
                }
                if (v35 != v36)
                  bzero(&v36[(_QWORD)v57], v35 - v36);
              }
              *(_QWORD *)&v58 = v35;
            }
          }
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)__src[1], 1);
        v12 = v58;
        if (!v10)
          goto LABEL_16;
      }
      memcpy((char *)v57 + v12, v11, (size_t)v10);
      v12 = v58;
      goto LABEL_16;
    }
    if (__src[1])
    {
      v17 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(a1 + 152), (uint64_t)__src[1], 0);
      v18 = v17;
      if (__src[1])
      {
        memmove(v17, __src[0], (size_t)__src[1]);
        v19 = __src[1];
LABEL_57:
        __src[0] = v18;
        __src[1] = v19;
        goto LABEL_60;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = 0;
    goto LABEL_57;
  }
  v13 = *(_DWORD *)(a1 + 248);
  *(_DWORD *)(a1 + 248) = v13 + 1;
  v57 = 0;
  v14 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v52, &v57);
  v16 = v57;
  if ((v14 & 1) == 0)
  {
    v16 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v52, &v52, v57);
    *(_QWORD *)v16 = v52;
    v16[2] = 0;
  }
  v16[2] = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_207A9BBE0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_207A9BBE0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            if (*(_QWORD *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v27);
              v22 = v27;
              *v27 = *(_OWORD *)v21;
              *((_QWORD *)v22 + 2) = *(_QWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_207A9BBE0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_25:
      v26 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_207A9BBE0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v26);
      return result;
    }
    v23 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v23 & 0x1FFFFFFFFFFFFFFELL));
    v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    v25 = result;
    do
    {
      *v25 = xmmword_207A9BBE0;
      *(_OWORD *)((char *)v25 + 24) = xmmword_207A9BBE0;
      v25 += 3;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_25;
  }
  return result;
}

uint64_t llvm::array_pod_sort_comparator<int>(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::InsertIntoBucket<mlir::Operation *,llvm::SmallVector<int,2u>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *buffer;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  BOOL v30;
  int v31;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v12 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      v10 = *a2;
      goto LABEL_4;
    }
    v12 = *(_DWORD *)(a1 + 16);
  }
  v13 = *(uint64_t **)a1;
  v14 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1);
  v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
  v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
  if ((v16 + 1) > 0x40)
    v17 = v16 + 1;
  else
    v17 = 64;
  *(_DWORD *)(a1 + 16) = v17;
  buffer = llvm::allocate_buffer(32 * v17, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v13)
  {
    v19 = (char *)(32 * v8);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::moveFromOldBuckets(a1, v13, (uint64_t *)&v19[(_QWORD)v13]);
    llvm::deallocate_buffer((llvm *)v13, v19);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  v21 = buffer;
  if (((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
    goto LABEL_36;
  v22 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  v21 = &buffer[4 * (v22 & 0xFFFFFFFFFFFFFFELL)];
  v23 = buffer + 4;
  v24 = v22 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v23 - 4) = -4096;
    *v23 = -4096;
    v23 += 8;
    v24 -= 2;
  }
  while (v24);
  if (v22 != (v22 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_36:
    do
    {
      *v21 = -4096;
      v21 += 4;
    }
    while (v21 != &buffer[4 * v20]);
  }
  v10 = *a3;
  v25 = v20 - 1;
  v26 = ((*a3 >> 4) ^ (*a3 >> 9)) & v25;
  a2 = &buffer[4 * v26];
  v27 = *a2;
  if (*a3 != *a2)
  {
    v28 = 0;
    v29 = 1;
    while (v27 != -4096)
    {
      if (v28)
        v30 = 0;
      else
        v30 = v27 == -8192;
      if (v30)
        v28 = a2;
      v31 = v26 + v29++;
      v26 = v31 & v25;
      a2 = &buffer[4 * v26];
      v27 = *a2;
      if (v10 == *a2)
        goto LABEL_4;
    }
    if (v28)
      a2 = v28;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(a2 + 1), a4);
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0xFFFFFFFFFFFFFFELL;
      v11 = &v7[4 * v10];
      v12 = v7 + 4;
      v13 = v10;
      do
      {
        *(v12 - 4) = -4096;
        *v12 = -4096;
        v12 += 8;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[4 * v6];
    do
    {
      *v11 = -4096;
      v11 += 4;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)a1 + 32 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v21 = 0;
          v22 = 1;
          while (v19 != -4096)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v19 == -8192;
            if (v23)
              v21 = v18;
            v24 = v17 + v22++;
            v17 = v24 & v16;
            v18 = (_QWORD *)(*(_QWORD *)a1 + 32 * v17);
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_15;
          }
          if (v21)
            v18 = v21;
        }
LABEL_15:
        *v18 = v15;
        v18[1] = v18 + 3;
        v18[2] = 0x100000000;
        if (*((_DWORD *)v4 + 4))
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v18 + 1), (uint64_t)(v4 + 1));
        ++*(_DWORD *)(a1 + 8);
        v20 = (uint64_t *)v4[1];
        if (v20 != v4 + 3)
          free(v20);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t *llvm::ScopedHashTableScope<llvm::StringRef,char,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::MallocAllocator>::~ScopedHashTableScope(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;

  v1 = result;
  *(_QWORD *)(*result + 24) = result[1];
  v2 = result[2];
  if (v2)
  {
    v3 = *result;
    if (*(_QWORD *)(v2 + 8))
    {
      v6 = 0;
      v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v3, v2 + 16, &v6);
      v5 = v6;
      if ((v4 & 1) == 0)
      {
        v5 = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(v3, v2 + 16, v2 + 16, (_QWORD *)v6);
        *(_OWORD *)v5 = *(_OWORD *)(v2 + 16);
        *(_QWORD *)(v5 + 16) = 0;
      }
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 8);
    }
    else
    {
      v6 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v3, v2 + 16, &v6))
      {
        *(_OWORD *)v6 = xmmword_207AB84E0;
        *(int32x2_t *)(v3 + 8) = vadd_s32(*(int32x2_t *)(v3 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    v1[2] = *(_QWORD *)v2;
    llvm::deallocate_buffer((llvm *)v2, (void *)0x28);
  }
  return result;
}

double llvm::function_ref<void ()(mlir::Value,llvm::StringRef)>::callback_fn<`anonymous namespace'::SSANameState::numberValuesInRegion(mlir::Region &)::$_0>(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  double result;

  return result;
}

void mlir::detail::AsmStateImpl::~AsmStateImpl(mlir::detail::AsmStateImpl *this)
{
  char *v2;

  v2 = (char *)*((_QWORD *)this + 86);
  if (v2 != (char *)this + 704)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 83), (void *)(8 * *((unsigned int *)this + 170)));
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::InsertIntoBucket<mlir::Dialect *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(48 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 6 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 48 * v17 - 48;
  v19 = buffer;
  if (v18 < 0x30)
    goto LABEL_34;
  v20 = v18 / 0x30 + 1;
  v19 = &buffer[6 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[6] = -4096;
    v22 += 12;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 6;
    }
    while (v19 != &buffer[6 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[6 * v24];
  v25 = *a2;
  if (*a3 != *a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = &buffer[6 * v24];
      v25 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = (uint64_t)(a2 + 6);
  a2[5] = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;

  v3 = a2;
  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(_DWORD *)(result + 16);
  if (v5)
  {
    v6 = *(_QWORD **)result;
    v7 = 48 * v5 - 48;
    if (v7 < 0x30)
    {
      v8 = *(_QWORD **)result;
LABEL_7:
      v12 = &v6[6 * v5];
      do
      {
        *v8 = -4096;
        v8 += 6;
      }
      while (v8 != v12);
      goto LABEL_9;
    }
    v9 = v7 / 0x30 + 1;
    v8 = &v6[6 * (v9 & 0xFFFFFFFFFFFFFFELL)];
    v10 = v9 & 0xFFFFFFFFFFFFFFELL;
    v11 = *(_QWORD **)result;
    do
    {
      *v11 = -4096;
      v11[6] = -4096;
      v11 += 12;
      v10 -= 2;
    }
    while (v10);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v13 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = *(_DWORD *)(result + 16) - 1;
        v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
        v16 = *(_QWORD *)result + 48 * v15;
        v17 = *(_QWORD *)v16;
        if (v13 != *(_QWORD *)v16)
        {
          v21 = 0;
          v22 = 1;
          while (v17 != -4096)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v17 == -8192;
            if (v23)
              v21 = v16;
            v24 = v15 + v22++;
            v15 = v24 & v14;
            v16 = *(_QWORD *)result + 48 * (v24 & v14);
            v17 = *(_QWORD *)v16;
            if (v13 == *(_QWORD *)v16)
              goto LABEL_15;
          }
          if (v21)
            v16 = v21;
        }
LABEL_15:
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)v16 = v13;
        *(_DWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 8) = v3[1];
        v3[1] = 0;
        *(_DWORD *)(v16 + 16) = *((_DWORD *)v3 + 4);
        *(_QWORD *)(v16 + 32) = v16 + 48;
        *((_DWORD *)v3 + 4) = 0;
        v18 = *(_DWORD *)(v16 + 20);
        *(_DWORD *)(v16 + 20) = *((_DWORD *)v3 + 5);
        *((_DWORD *)v3 + 5) = v18;
        v19 = *(_DWORD *)(v16 + 24);
        *(_DWORD *)(v16 + 24) = *((_DWORD *)v3 + 6);
        *((_DWORD *)v3 + 6) = v19;
        *(_QWORD *)(v16 + 40) = 0;
        if (*((_DWORD *)v3 + 10))
          llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v16 + 32, (uint64_t)(v3 + 4));
        ++*(_DWORD *)(v4 + 8);
        v20 = (uint64_t *)v3[4];
        if (v20 != v3 + 6)
          free(v20);
        llvm::deallocate_buffer((llvm *)v3[1], (void *)(24 * *((unsigned int *)v3 + 6)));
      }
      v3 += 6;
    }
    while (v3 != a3);
  }
  return result;
}

llvm::raw_ostream *llvm::interleaveComma<llvm::ArrayRef<mlir::Attribute>,mlir::AsmPrinter::Impl::printAttributeImpl(mlir::Attribute,mlir::AsmPrinter::Impl::AttrTypeElision)::$_1,llvm::raw_ostream,mlir::Attribute const>(llvm::raw_ostream *result, llvm::raw_ostream *a2, llvm::raw_ostream **a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v6 = *(uint64_t **)result;
  v7 = **(_QWORD **)result;
  if (!v7)
  {
    result = *a3;
    v8 = *((_QWORD *)*a3 + 4);
    if ((unint64_t)(*((_QWORD *)*a3 + 3) - v8) > 0x11)
    {
      *(_WORD *)(v8 + 16) = 15934;
      *(_OWORD *)v8 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)result + 4) += 18;
      if (v3 == 1)
        return result;
LABEL_11:
      v9 = v6 + 1;
      v10 = 8 * v3 - 8;
      while (1)
      {
        v11 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 1uLL)
        {
          *v11 = 8236;
          *((_QWORD *)a2 + 4) += 2;
          v12 = *v9;
          if (!*v9)
          {
LABEL_19:
            result = *a3;
            v13 = *((_QWORD *)*a3 + 4);
            if ((unint64_t)(*((_QWORD *)*a3 + 3) - v13) > 0x11)
            {
              *(_WORD *)(v13 + 16) = 15934;
              *(_OWORD *)v13 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
              *((_QWORD *)result + 4) += 18;
            }
            else
            {
              result = llvm::raw_ostream::write(result, "<<NULL ATTRIBUTE>>", 0x12uLL);
            }
            goto LABEL_13;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ", 2uLL);
          v12 = *v9;
          if (!*v9)
            goto LABEL_19;
        }
        if (!(_BYTE)result)
          result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAttributeImpl(a3, v12, 1);
LABEL_13:
        ++v9;
        v10 -= 8;
        if (!v10)
          return result;
      }
    }
    result = llvm::raw_ostream::write(result, "<<NULL ATTRIBUTE>>", 0x12uLL);
LABEL_8:
    if (v3 == 1)
      return result;
    goto LABEL_11;
  }
  if ((_BYTE)result)
    goto LABEL_8;
  result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAttributeImpl(a3, v7, 1);
  if (v3 != 1)
    goto LABEL_11;
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_0>(__int128 **a1, unsigned int a2)
{
  llvm::raw_ostream **v3;
  __int128 v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *result;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  unsigned int v15;
  llvm::raw_ostream *v16;
  unsigned int v17;

  v3 = (llvm::raw_ostream **)a1[1];
  v4 = (*a1)[1];
  v11 = **a1;
  v13 = *((_QWORD *)&v4 + 1);
  v12 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v11, &v14);
  v5 = *v3;
  v6 = (_BYTE *)*((_QWORD *)*v3 + 4);
  if (*((_BYTE **)*v3 + 3) == v6)
  {
    llvm::raw_ostream::write(v5, "(", 1uLL);
    DWORD2(v11) = v15;
    if (v15 <= 0x40)
      goto LABEL_3;
LABEL_5:
    llvm::APInt::initSlowCase((llvm::APInt *)&v11, (const void **)&v14);
    goto LABEL_6;
  }
  *v6 = 40;
  ++*((_QWORD *)v5 + 4);
  DWORD2(v11) = v15;
  if (v15 > 0x40)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)&v11 = v14;
LABEL_6:
  printDenseIntElement((llvm::APInt *)&v11, *v3, *(_QWORD *)a1[2]);
  if (DWORD2(v11) >= 0x41 && (_QWORD)v11)
    MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
  v7 = *v3;
  v8 = (_BYTE *)*((_QWORD *)*v3 + 4);
  if (*((_BYTE **)*v3 + 3) == v8)
  {
    llvm::raw_ostream::write(v7, ",", 1uLL);
    DWORD2(v11) = v17;
    if (v17 <= 0x40)
      goto LABEL_11;
LABEL_13:
    llvm::APInt::initSlowCase((llvm::APInt *)&v11, (const void **)&v16);
    goto LABEL_14;
  }
  *v8 = 44;
  ++*((_QWORD *)v7 + 4);
  DWORD2(v11) = v17;
  if (v17 > 0x40)
    goto LABEL_13;
LABEL_11:
  *(_QWORD *)&v11 = v16;
LABEL_14:
  printDenseIntElement((llvm::APInt *)&v11, *v3, *(_QWORD *)a1[2]);
  if (DWORD2(v11) >= 0x41 && (_QWORD)v11)
    MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
  result = *v3;
  v10 = (_BYTE *)*((_QWORD *)*v3 + 4);
  if (*((_BYTE **)*v3 + 3) == v10)
  {
    result = llvm::raw_ostream::write(result, ")", 1uLL);
    if (v17 < 0x41)
      goto LABEL_23;
  }
  else
  {
    *v10 = 41;
    ++*((_QWORD *)result + 4);
    if (v17 < 0x41)
      goto LABEL_23;
  }
  result = v16;
  if (v16)
    result = (llvm::raw_ostream *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
LABEL_23:
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      return (llvm::raw_ostream *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  return result;
}

void printDenseIntElement(llvm::APInt *a1, llvm::raw_ostream *a2, uint64_t a3)
{
  unsigned int v5;
  BOOL v6;
  BOOL isUnsignedInteger;
  int v8;
  const char *v9;
  size_t v10;
  void *v11;
  uint64_t v12;

  v12 = a3;
  if (mlir::Type::isInteger((mlir::Type *)&v12, 1))
  {
    v5 = *((_DWORD *)a1 + 2);
    if (v5 > 0x40)
      v6 = llvm::APInt::countLeadingZerosSlowCase(a1) == v5;
    else
      v6 = *(_QWORD *)a1 == 0;
    v8 = v6;
    if (v8)
      v9 = "false";
    else
      v9 = "true";
    if (v8)
      v10 = 5;
    else
      v10 = 4;
    v11 = (void *)*((_QWORD *)a2 + 4);
    if (v10 <= *((_QWORD *)a2 + 3) - (_QWORD)v11)
    {
      memcpy(v11, v9, v10);
      *((_QWORD *)a2 + 4) += v10;
    }
    else
    {
      llvm::raw_ostream::write(a2, v9, v10);
    }
  }
  else
  {
    isUnsignedInteger = mlir::Type::isUnsignedInteger((mlir::Type *)&v12);
    llvm::APInt::print(a1, a2, !isUnsignedInteger);
  }
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_1>(__int128 **a1, unsigned int a2)
{
  llvm::raw_ostream **v2;
  uint64_t v3;
  __int128 v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  _QWORD v22[4];
  _QWORD v23[4];

  v23[3] = *MEMORY[0x24BDAC8D0];
  v2 = (llvm::raw_ostream **)a1[1];
  v3 = *((_QWORD *)*a1 + 4);
  v4 = (*a1)[1];
  v17 = **a1;
  v19 = *((_QWORD *)&v4 + 1);
  v20 = v3;
  v18 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v17, &v13);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v13, (llvm::APFloatBase *)&v17, (uint64_t)v21);
  if (v16 >= 0x41 && v15)
    MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
  if (v14 >= 0x41 && v13)
    MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
  v5 = *v2;
  v6 = (_BYTE *)*((_QWORD *)*v2 + 4);
  if (*((_BYTE **)*v2 + 3) == v6)
  {
    v5 = llvm::raw_ostream::write(v5, "(", 1uLL);
  }
  else
  {
    *v6 = 40;
    ++*((_QWORD *)v5 + 4);
  }
  v7 = (void *)v22[0];
  v8 = llvm::APFloatBase::PPCDoubleDouble(v5);
  if (v8 == v7)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v17 + 1, (const llvm::detail::DoubleAPFloat *)v22);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8), (const llvm::detail::IEEEFloat *)v22);
  printFloatValue((const llvm::APFloat *)&v17, *v2);
  if (v8 == *((void **)&v17 + 1))
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8));
    v9 = *v2;
    v10 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if (*((_BYTE **)*v2 + 3) != v10)
      goto LABEL_15;
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8));
    v9 = *v2;
    v10 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if (*((_BYTE **)*v2 + 3) != v10)
    {
LABEL_15:
      *v10 = 44;
      ++*((_QWORD *)v9 + 4);
      goto LABEL_18;
    }
  }
  llvm::raw_ostream::write(v9, ",", 1uLL);
LABEL_18:
  if (v8 == (void *)v23[0])
    llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v17 + 1, (const llvm::detail::DoubleAPFloat *)v23);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8), (const llvm::detail::IEEEFloat *)v23);
  printFloatValue((const llvm::APFloat *)&v17, *v2);
  if (v8 == *((void **)&v17 + 1))
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8));
    v11 = *v2;
    v12 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if (*((_BYTE **)*v2 + 3) != v12)
    {
LABEL_23:
      *v12 = 41;
      ++*((_QWORD *)v11 + 4);
      if (v8 != (void *)v23[0])
        goto LABEL_24;
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v23);
      if (v8 != (void *)v22[0])
        goto LABEL_25;
LABEL_30:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8));
    v11 = *v2;
    v12 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if (*((_BYTE **)*v2 + 3) != v12)
      goto LABEL_23;
  }
  llvm::raw_ostream::write(v11, ")", 1uLL);
  if (v8 == (void *)v23[0])
    goto LABEL_29;
LABEL_24:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v23);
  if (v8 == (void *)v22[0])
    goto LABEL_30;
LABEL_25:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
}

void mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement(llvm::APInt *a1@<X1>, llvm::APFloatBase *inited@<X0>, uint64_t a3@<X8>)
{
  llvm::APFloatBase *v4;
  void *v6;
  void *v7;
  void *v8;
  const void **v9;
  llvm::detail::IEEEFloat *v10;
  llvm::detail::IEEEFloat *v11;
  const llvm::APInt *v12;
  unsigned int v13;
  const llvm::APInt *v14;
  unsigned int v15;
  _QWORD v16[3];
  _QWORD v17[4];

  v4 = inited;
  v17[3] = *MEMORY[0x24BDAC8D0];
  v6 = (void *)*((_QWORD *)inited + 4);
  v15 = *((_DWORD *)a1 + 2);
  if (v15 > 0x40)
    inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)a1);
  else
    v14 = *(const llvm::APInt **)a1;
  v7 = llvm::APFloatBase::PPCDoubleDouble(inited);
  if (v7 == v6)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v17, (uint64_t)v6, (uint64_t)&v14);
    v8 = (void *)*((_QWORD *)v4 + 4);
    v9 = (const void **)((char *)a1 + 16);
    v13 = *((_DWORD *)a1 + 6);
    if (v13 <= 0x40)
    {
LABEL_6:
      v12 = (const llvm::APInt *)*v9;
      if (v7 != v8)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v17, v6, &v14);
    v8 = (void *)*((_QWORD *)v4 + 4);
    v9 = (const void **)((char *)a1 + 16);
    v13 = *((_DWORD *)a1 + 6);
    if (v13 <= 0x40)
      goto LABEL_6;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v12, v9);
  if (v7 != v8)
  {
LABEL_7:
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v16, v8, &v12);
    v10 = (llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v17[0])
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, (uint64_t)v7, (uint64_t)&v12);
  v10 = (llvm::detail::IEEEFloat *)(a3 + 8);
  if (v7 != (void *)v17[0])
  {
LABEL_8:
    llvm::detail::IEEEFloat::IEEEFloat(v10, (const llvm::detail::IEEEFloat *)v17);
    v11 = (llvm::detail::IEEEFloat *)(a3 + 40);
    if (v7 != (void *)v16[0])
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (const llvm::detail::DoubleAPFloat *)v17);
  v11 = (llvm::detail::IEEEFloat *)(a3 + 40);
  if (v7 != (void *)v16[0])
  {
LABEL_9:
    llvm::detail::IEEEFloat::IEEEFloat(v11, (const llvm::detail::IEEEFloat *)v16);
    if (v7 != (void *)v16[0])
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, (const llvm::detail::DoubleAPFloat *)v16);
  if (v7 != (void *)v16[0])
  {
LABEL_10:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
    if (v13 < 0x41)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_17:
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
  if (v13 < 0x41)
    goto LABEL_20;
LABEL_18:
  if (v12)
    MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
LABEL_20:
  if (v7 == (void *)v17[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
    if (v15 < 0x41)
      return;
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
    if (v15 < 0x41)
      return;
  }
  if (v14)
    MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_2>(__int128 **a1, unsigned int a2)
{
  llvm::raw_ostream **v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v3 = (llvm::raw_ostream **)a1[1];
  v4 = (*a1)[1];
  v5 = **a1;
  v7 = *((_QWORD *)&v4 + 1);
  v6 = v4 + a2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v5, (llvm::APInt *)&v8);
  printDenseIntElement((llvm::APInt *)&v8, *v3, *(_QWORD *)a1[2]);
  if (v9 >= 0x41)
  {
    if (v8)
      MEMORY[0x20BD002D4](v8, 0x1000C8000313F17);
  }
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_3>(__int128 **a1, unsigned int a2)
{
  llvm::raw_ostream **v2;
  void *v3;
  __int128 v4;
  void *v5;
  llvm::APFloatBase *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const llvm::APInt *v12;
  unsigned int v13;
  char v14[8];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  v2 = (llvm::raw_ostream **)a1[1];
  v3 = (void *)*((_QWORD *)*a1 + 4);
  v4 = (*a1)[1];
  v8 = **a1;
  v10 = *((_QWORD *)&v4 + 1);
  v11 = v3;
  v9 = v4 + a2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v8, (llvm::APInt *)&v12);
  v5 = v11;
  v7 = llvm::APFloatBase::PPCDoubleDouble(v6);
  if (v7 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, (uint64_t)v5, (uint64_t)&v12);
    if (v13 < 0x41)
      goto LABEL_7;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v15, v5, &v12);
    if (v13 < 0x41)
      goto LABEL_7;
  }
  if (v12)
    MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
LABEL_7:
  printFloatValue((const llvm::APFloat *)v14, *v2);
  if (v7 == (void *)v15[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v15);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v15);
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>(llvm::raw_ostream ***a1, unsigned int a2)
{
  llvm::raw_ostream **v2;
  uint64_t v3;
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  v2 = *a1;
  v3 = (uint64_t)*a1[1] + 16 * a2;
  v4 = *(llvm::raw_ostream **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = **a1;
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\"", 1uLL);
  }
  else
  {
    *v7 = 34;
    ++*((_QWORD *)v6 + 4);
  }
  llvm::printEscapedString(v4, v5, *v2);
  result = *v2;
  v9 = (_BYTE *)*((_QWORD *)*v2 + 4);
  if (*((_BYTE **)*v2 + 3) == v9)
    return llvm::raw_ostream::write(result, "\"", 1uLL);
  *v9 = 34;
  ++*((_QWORD *)result + 4);
  return result;
}

void mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()(uint64_t a1, int a2)
{
  llvm::raw_ostream **v4;
  unsigned int v5;
  llvm::APFloatBase *FloatSemantics;
  llvm::APFloatBase *v7;
  uint64_t v8;
  const llvm::APInt *v9;
  unsigned int v10;
  _BYTE v11[8];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(llvm::raw_ostream ***)(a1 + 32);
  v5 = **(_DWORD **)a1;
  v10 = v5;
  if (v5 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v9, 0, 0);
    if (!**(_DWORD **)a1)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = 0;
  if (v5)
LABEL_5:
    llvm::LoadIntFromMemory((llvm *)&v9, (llvm::APInt *)(**(_QWORD **)(a1 + 8) + (**(_DWORD **)(a1 + 16) * a2)), **(unsigned int **)(a1 + 16));
LABEL_6:
  if (mlir::Type::isIntOrIndex(*(mlir::Type **)(a1 + 24)))
  {
    printDenseIntElement((llvm::APInt *)&v9, *v4, **(_QWORD **)(a1 + 24));
    if (v10 < 0x41)
      return;
  }
  else
  {
    v8 = **(_QWORD **)(a1 + 24);
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v8);
    v7 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
    if (v7 == FloatSemantics)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)FloatSemantics, (uint64_t)&v9);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v12, FloatSemantics, &v9);
    printFloatValue((const llvm::APFloat *)v11, *v4);
    if (v7 == (llvm::APFloatBase *)v12[0])
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
      if (v10 < 0x41)
        return;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
      if (v10 < 0x41)
        return;
    }
  }
  if (v9)
    MEMORY[0x20BD002D4](v9, 0x1000C8000313F17);
}

uint64_t mlir::AbstractAttribute::walkImmediateSubElements(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 104))(*(_QWORD *)(a1 + 112));
}

uint64_t mlir::AbstractAttribute::replaceImmediateSubElements(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 120))(*(_QWORD *)(a1 + 128));
}

uint64_t mlir::Attribute::getContext(mlir::Attribute *this)
{
  return *(_QWORD *)(***(_QWORD ***)this + 32);
}

uint64_t mlir::NamedAttribute::getNameDialect(mlir::NamedAttribute *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  return mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v2);
}

uint64_t mlir::NamedAttribute::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  const void *AttrData;
  size_t v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  int v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a2;
  v13 = *a1;
  v14 = v2;
  if (v13 == v2)
    return 0;
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v13);
  v5 = v4;
  v6 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v14);
  v8 = v7;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  if (v9)
  {
    v10 = memcmp(AttrData, v6, v9);
    if (v10)
      return ((v10 >> 31) | 1u) >> 31;
  }
  if (v5 < v8)
    v12 = -1;
  else
    v12 = 1;
  if (v5 == v8)
    v12 = 0;
  return v12 >> 31;
}

uint64_t mlir::AttrTypeWalker::walkImpl(_QWORD *a1, uint64_t *a2, unsigned int a3)
{
  return mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>((uint64_t)a1, a2, a1, a3);
}

uint64_t mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;

  v22 = a2;
  v23 = a4;
  v8 = (uint64_t *)(a1 + 48);
  v24 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)(a1 + 48), (uint64_t)&v22, (uint64_t *)&v24)&& v24 != (int *)(*(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64)))
  {
    return v24[4];
  }
  v24 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v22, (uint64_t *)&v24) & 1) == 0)
  {
    v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v22, (uint64_t)&v22, (uint64_t)v24);
    *(_QWORD *)v10 = v22;
    *(_DWORD *)(v10 + 8) = v23;
    *(_DWORD *)(v10 + 16) = 1;
  }
  if (a4 == 1
    && (v27 = 1, v28 = 1, v24 = &v27, v25 = a1, v26 = &v28, mlir::AbstractAttribute::walkImmediateSubElements(*a2), !v27))
  {
LABEL_13:
    v24 = 0;
    v16 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v22, (uint64_t *)&v24);
    v17 = (uint64_t)v24;
    if ((v16 & 1) == 0)
    {
      v17 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v22, (uint64_t)&v22, (uint64_t)v24);
      *(_QWORD *)v17 = v22;
      *(_DWORD *)(v17 + 8) = v23;
      *(_DWORD *)(v17 + 16) = 1;
    }
    result = 0;
    *(_DWORD *)(v17 + 16) = 0;
  }
  else
  {
    v13 = a3;
    v11 = *a3;
    v12 = v13[1];
    while (v12 != v11)
    {
      v24 = (int *)a2;
      v14 = *(_QWORD *)(v12 - 8);
      if (!v14)
      {
        v18 = std::__throw_bad_function_call[abi:nn180100]();
        return mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(v18, v19, v20, v21);
      }
      v15 = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v14 + 48))(v14, &v24);
      if (v15 == 2)
        return 1;
      v12 -= 32;
      if (!v15)
        goto LABEL_13;
    }
    if (a4)
      return 1;
    v27 = 1;
    v28 = 0;
    v24 = &v27;
    v25 = a1;
    v26 = &v28;
    mlir::AbstractAttribute::walkImmediateSubElements(*a2);
    return v27 != 0;
  }
  return result;
}

uint64_t mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;

  v19 = a2;
  v20 = a4;
  v8 = (uint64_t *)(a1 + 48);
  v21 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)(a1 + 48), (uint64_t)&v19, (uint64_t *)&v21)&& v21 != (int *)(*(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64)))
  {
    return v21[4];
  }
  v21 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v19, (uint64_t *)&v21) & 1) == 0)
  {
    v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v19, (uint64_t)&v19, (uint64_t)v21);
    *(_QWORD *)v10 = v19;
    *(_DWORD *)(v10 + 8) = v20;
    *(_DWORD *)(v10 + 16) = 1;
  }
  if (a4 == 1
    && (v24 = 1, v25 = 1, v21 = &v24, v22 = a1, v23 = &v25, mlir::AbstractAttribute::walkImmediateSubElements(*a2), !v24))
  {
LABEL_13:
    v21 = 0;
    v16 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v19, (uint64_t *)&v21);
    v17 = (uint64_t)v21;
    if ((v16 & 1) == 0)
    {
      v17 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v19, (uint64_t)&v19, (uint64_t)v21);
      *(_QWORD *)v17 = v19;
      *(_DWORD *)(v17 + 8) = v20;
      *(_DWORD *)(v17 + 16) = 1;
    }
    result = 0;
    *(_DWORD *)(v17 + 16) = 0;
  }
  else
  {
    v13 = a3;
    v11 = *a3;
    v12 = v13[1];
    while (v12 != v11)
    {
      v21 = (int *)a2;
      v14 = *(_QWORD *)(v12 - 8);
      if (!v14)
      {
        v18 = std::__throw_bad_function_call[abi:nn180100]();
        return mlir::AttrTypeReplacer::addReplacement(v18);
      }
      v15 = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v14 + 48))(v14, &v21);
      if (v15 == 2)
        return 1;
      v12 -= 32;
      if (!v15)
        goto LABEL_13;
    }
    if (a4)
      return 1;
    v24 = 1;
    v25 = 0;
    v21 = &v24;
    v22 = a1;
    v23 = &v25;
    mlir::AbstractAttribute::walkImmediateSubElements(*a2);
    return v24 != 0;
  }
  return result;
}

uint64_t mlir::AttrTypeReplacer::addReplacement(uint64_t *a1, _QWORD *a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>(a1, a2);
    a1[1] = result;
  }
  else
  {
    v4 = (_QWORD *)a2[3];
    if (v4)
    {
      if (v4 == a2)
      {
        *(_QWORD *)(v3 + 24) = v3;
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
      }
      else
      {
        *(_QWORD *)(v3 + 24) = v4;
        a2[3] = 0;
      }
      result = v3 + 32;
      a1[1] = v3 + 32;
    }
    else
    {
      *(_QWORD *)(v3 + 24) = 0;
      result = v3 + 32;
      a1[1] = v3 + 32;
    }
  }
  return result;
}

void mlir::AttrTypeReplacer::replaceElementsIn(mlir::AttrTypeReplacer *this, mlir::Operation *a2, int a3, int a4, int a5)
{
  unint64_t AttrDictionary;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t NextResultAtOffset;
  unint64_t v17;
  uint64_t *v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  unint64_t v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t k;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  BOOL v41;
  uint64_t n;
  uint64_t m;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v50;

  if (a3)
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(a2);
    v10 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, AttrDictionary, this);
    if (v10)
    {
      if (v10 != (uint64_t *)AttrDictionary)
        mlir::Operation::setAttrs((uint64_t)a2, (uint64_t)v10);
    }
  }
  if ((a4 & 1) != 0 || a5)
  {
    if (a4)
    {
      v11 = *((_QWORD *)a2 + 3);
      v12 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v11, this);
      if (v12)
      {
        if ((uint64_t *)v11 != v12)
          *((_QWORD *)a2 + 3) = v12;
      }
    }
    if (a5)
    {
      v13 = *((unsigned int *)a2 + 9);
      v14 = (_DWORD)v13 ? (char *)a2 - 16 : 0;
      if ((_DWORD)v13)
      {
        for (i = 0; i != v13; ++i)
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v14, i);
          v17 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
          v18 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v17, (_QWORD *)this + 3);
          if (v18)
            v19 = v18 == (uint64_t *)v17;
          else
            v19 = 1;
          if (!v19)
            *(_QWORD *)(NextResultAtOffset + 8) = *(_QWORD *)(NextResultAtOffset + 8) & 7 | (unint64_t)v18;
        }
      }
    }
    v20 = *((unsigned int *)a2 + 11);
    if ((v20 & 0x7FFFFF) != 0)
    {
      v21 = (((unint64_t)a2 + 16 * ((v20 >> 23) & 1) + ((v20 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)a2 + 10);
      v22 = v21 + 24 * (v20 & 0x7FFFFF);
      if (a5)
      {
        if ((a4 & 1) != 0)
        {
          do
          {
            for (j = *(_QWORD *)(v21 + 8); j != v21; j = *(_QWORD *)(j + 8))
            {
              v24 = j - 8;
              if (!j)
                v24 = 0;
              v25 = *(_QWORD *)(v24 + 48);
              v26 = *(_QWORD *)(v24 + 56) - v25;
              if (v26)
              {
                v27 = 8 * (v26 >> 3);
                do
                {
                  v28 = *(_QWORD *)(*(_QWORD *)v25 + 32);
                  v29 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v28, this);
                  if (v29)
                    v30 = v28 == (_QWORD)v29;
                  else
                    v30 = 1;
                  if (!v30)
                    *(_QWORD *)(*(_QWORD *)v25 + 32) = v29;
                  v31 = *(_QWORD *)(*(_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF8;
                  v32 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v31, (_QWORD *)this + 3);
                  if (v32)
                    v33 = v32 == (uint64_t *)v31;
                  else
                    v33 = 1;
                  if (!v33)
                    *(_QWORD *)(*(_QWORD *)v25 + 8) = *(_QWORD *)(*(_QWORD *)v25 + 8) & 7 | (unint64_t)v32;
                  v25 += 8;
                  v27 -= 8;
                }
                while (v27);
              }
            }
            v21 += 24;
          }
          while (v21 != v22);
        }
        else
        {
          do
          {
            for (k = *(_QWORD *)(v21 + 8); k != v21; k = *(_QWORD *)(k + 8))
            {
              v35 = k - 8;
              if (!k)
                v35 = 0;
              v36 = *(_QWORD *)(v35 + 48);
              v37 = *(_QWORD *)(v35 + 56) - v36;
              if (v37)
              {
                v38 = 8 * (v37 >> 3);
                do
                {
                  v39 = *(_QWORD *)(*(_QWORD *)v36 + 8) & 0xFFFFFFFFFFFFFFF8;
                  v40 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v39, (_QWORD *)this + 3);
                  if (v40)
                    v41 = v40 == (uint64_t *)v39;
                  else
                    v41 = 1;
                  if (!v41)
                    *(_QWORD *)(*(_QWORD *)v36 + 8) = *(_QWORD *)(*(_QWORD *)v36 + 8) & 7 | (unint64_t)v40;
                  v36 += 8;
                  v38 -= 8;
                }
                while (v38);
              }
            }
            v21 += 24;
          }
          while (v21 != v22);
        }
      }
      else if (a4)
      {
        do
        {
          for (m = *(_QWORD *)(v21 + 8); m != v21; m = *(_QWORD *)(m + 8))
          {
            v44 = m - 8;
            if (!m)
              v44 = 0;
            v45 = *(_QWORD *)(v44 + 48);
            v46 = *(_QWORD *)(v44 + 56) - v45;
            if (v46)
            {
              v47 = 8 * (v46 >> 3);
              do
              {
                v48 = *(_QWORD *)(*(_QWORD *)v45 + 32);
                v49 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v48, this);
                if (v49)
                  v50 = v48 == (_QWORD)v49;
                else
                  v50 = 1;
                if (!v50)
                  *(_QWORD *)(*(_QWORD *)v45 + 32) = v49;
                v45 += 8;
                v47 -= 8;
              }
              while (v47);
            }
          }
          v21 += 24;
        }
        while (v21 != v22);
      }
      else
      {
        for (n = *(_QWORD *)(v21 + 8); n != v21; n = *(_QWORD *)(n + 8))
          ;
      }
    }
  }
}

uint64_t *mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *inserted;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t **v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t **v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t *v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  uint64_t *v80;
  int v81;
  char v82;
  uint64_t *v83;
  uint64_t *v84;

  v4 = (uint64_t *)a2;
  v83 = (uint64_t *)a2;
  v7 = (_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 64);
  if (!v8)
    goto LABEL_81;
  v9 = (v8 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v10 = (uint64_t **)(v6 + 16 * v9);
  v11 = *v10;
  if (*v10 != v4)
  {
    v49 = 0;
    v50 = 1;
    while (v11 != (uint64_t *)-4096)
    {
      if (v49)
        v51 = 0;
      else
        v51 = v11 == (uint64_t *)-8192;
      if (v51)
        v49 = v10;
      v52 = v9 + v50++;
      v9 = v52 & (v8 - 1);
      v10 = (uint64_t **)(v6 + 16 * v9);
      v11 = *v10;
      if (*v10 == v4)
        return *(uint64_t **)(v6 + 16 * v9 + 8);
    }
    if (v49)
      v53 = v49;
    else
      v53 = v10;
    v54 = *(_DWORD *)(a1 + 56);
    if (4 * v54 + 4 < 3 * v8)
    {
      if (v8 + ~v54 - *(_DWORD *)(a1 + 60) > v8 >> 3)
        goto LABEL_7;
      goto LABEL_82;
    }
LABEL_81:
    v8 *= 2;
LABEL_82:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 48, v8);
    v55 = *(_QWORD *)(a1 + 48);
    v56 = *(_DWORD *)(a1 + 64) - 1;
    v57 = ((v4 >> 4) ^ (v4 >> 9)) & v56;
    v53 = (uint64_t **)(v55 + 16 * v57);
    v58 = *v53;
    if (*v53 == v4)
    {
      v13 = v4;
LABEL_8:
      ++*(_DWORD *)(a1 + 56);
      if (v13 != (uint64_t *)-4096)
        --*(_DWORD *)(a1 + 60);
      *v53 = v4;
      v14 = (uint64_t)v83;
      v53[1] = v83;
      v16 = a3;
      a3 = (_QWORD *)*a3;
      v15 = (_QWORD *)v16[1];
      if (v15 != a3)
      {
        while (1)
        {
          v84 = v4;
          v17 = *(v15 - 1);
          if (!v17)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_102;
          }
          (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(&v80, v17, &v84);
          if (v82)
            break;
          v15 -= 4;
          if (v15 == a3)
            goto LABEL_14;
        }
        if (v81)
        {
          v4 = v80;
          if (v80)
          {
            if (v81 != 2)
              goto LABEL_15;
            v19 = *(_DWORD *)(a1 + 64);
            if (!v19)
            {
LABEL_31:
              v22 = 0;
              v28 = *(_DWORD *)(a1 + 56);
              if (4 * v28 + 4 < 3 * v19)
                goto LABEL_32;
              goto LABEL_94;
            }
LABEL_17:
            v20 = v19 - 1;
            v21 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
            v22 = (uint64_t *)(*v7 + 16 * v21);
            v23 = *v22;
            if (v14 == *v22)
            {
LABEL_36:
              v22[1] = (uint64_t)v4;
              return v4;
            }
            v24 = 0;
            v25 = 1;
            while (v23 != -4096)
            {
              if (v24)
                v26 = 0;
              else
                v26 = v23 == -8192;
              if (v26)
                v24 = v22;
              v27 = v21 + v25++;
              v21 = v27 & v20;
              v22 = (uint64_t *)(*v7 + 16 * (v27 & v20));
              v23 = *v22;
              if (v14 == *v22)
                goto LABEL_36;
            }
            if (v24)
              v22 = v24;
            v28 = *(_DWORD *)(a1 + 56);
            if (4 * v28 + 4 < 3 * v19)
            {
LABEL_32:
              if (v19 + ~v28 - *(_DWORD *)(a1 + 60) > v19 >> 3)
                goto LABEL_33;
              goto LABEL_95;
            }
LABEL_94:
            v19 *= 2;
LABEL_95:
            llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v19);
            v64 = *(_QWORD *)(a1 + 48);
            v65 = *(_DWORD *)(a1 + 64) - 1;
            v66 = ((v14 >> 4) ^ (v14 >> 9)) & v65;
            v22 = (uint64_t *)(v64 + 16 * v66);
            v67 = *v22;
            if (v14 == *v22)
            {
LABEL_96:
              ++*(_DWORD *)(a1 + 56);
              if (v14 == -4096)
                goto LABEL_35;
              goto LABEL_34;
            }
            v76 = 0;
            v77 = 1;
            while (v67 != -4096)
            {
              if (v76)
                v78 = 0;
              else
                v78 = v67 == -8192;
              if (v78)
                v76 = v22;
              v79 = v66 + v77++;
              v66 = v79 & v65;
              v22 = (uint64_t *)(v64 + 16 * (v79 & v65));
              v67 = *v22;
              if (v14 == *v22)
                goto LABEL_96;
            }
            if (v76)
              v22 = v76;
LABEL_33:
            v29 = *v22;
            ++*(_DWORD *)(a1 + 56);
            if (v29 == -4096)
            {
LABEL_35:
              *v22 = v14;
              v22[1] = 0;
              goto LABEL_36;
            }
LABEL_34:
            --*(_DWORD *)(a1 + 60);
            goto LABEL_35;
          }
        }
        goto LABEL_37;
      }
LABEL_14:
      if (!v4)
      {
LABEL_37:
        v30 = *(_DWORD *)(a1 + 64);
        if (!v30)
          goto LABEL_87;
        v31 = *(_QWORD *)(a1 + 48);
        v32 = v30 - 1;
        v33 = ((v14 >> 4) ^ (v14 >> 9)) & (v30 - 1);
        v34 = (uint64_t *)(v31 + 16 * v33);
        v35 = *v34;
        if (v14 == *v34)
        {
LABEL_64:
          v4 = 0;
          v34[1] = 0;
          return v4;
        }
        v36 = 0;
        v37 = 1;
        while (v35 != -4096)
        {
          if (v36)
            v38 = 0;
          else
            v38 = v35 == -8192;
          if (v38)
            v36 = v34;
          v39 = v33 + v37++;
          v33 = v39 & v32;
          v34 = (uint64_t *)(v31 + 16 * (v39 & v32));
          v35 = *v34;
          if (v14 == *v34)
            goto LABEL_64;
        }
        if (v36)
          v34 = v36;
        v59 = *(_DWORD *)(a1 + 56);
        if (4 * v59 + 4 < 3 * v30)
        {
          if (v30 + ~v59 - *(_DWORD *)(a1 + 60) > v30 >> 3)
            goto LABEL_61;
        }
        else
        {
LABEL_87:
          v30 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v30);
        v60 = *(_QWORD *)(a1 + 48);
        v61 = *(_DWORD *)(a1 + 64) - 1;
        v62 = ((v14 >> 4) ^ (v14 >> 9)) & v61;
        v34 = (uint64_t *)(v60 + 16 * v62);
        v63 = *v34;
        if (v14 == *v34)
        {
LABEL_89:
          ++*(_DWORD *)(a1 + 56);
          if (v14 == -4096)
            goto LABEL_63;
          goto LABEL_62;
        }
        v72 = 0;
        v73 = 1;
        while (v63 != -4096)
        {
          if (v72)
            v74 = 0;
          else
            v74 = v63 == -8192;
          if (v74)
            v72 = v34;
          v75 = v62 + v73++;
          v62 = v75 & v61;
          v34 = (uint64_t *)(v60 + 16 * (v75 & v61));
          v63 = *v34;
          if (v14 == *v34)
            goto LABEL_89;
        }
        if (v72)
          v34 = v72;
LABEL_61:
        v47 = *v34;
        ++*(_DWORD *)(a1 + 56);
        if (v47 == -4096)
        {
LABEL_63:
          *v34 = v14;
          v34[1] = 0;
          goto LABEL_64;
        }
LABEL_62:
        --*(_DWORD *)(a1 + 60);
        goto LABEL_63;
      }
LABEL_15:
      v18 = mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(a1, v4);
      v19 = *(_DWORD *)(a1 + 64);
      if (v18)
      {
        v4 = v18;
        if (!v19)
          goto LABEL_31;
        goto LABEL_17;
      }
      if (v19)
      {
        v40 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
        inserted = (uint64_t *)(*v7 + 16 * v40);
        v42 = *inserted;
        if (v14 == *inserted)
        {
LABEL_67:
          v4 = 0;
          inserted[1] = 0;
          return v4;
        }
        v43 = 0;
        v44 = 1;
        while (v42 != -4096)
        {
          if (v43)
            v45 = 0;
          else
            v45 = v42 == -8192;
          if (v45)
            v43 = inserted;
          v46 = v40 + v44++;
          v40 = v46 & (v19 - 1);
          inserted = (uint64_t *)(*v7 + 16 * v40);
          v42 = *inserted;
          if (v14 == *inserted)
            goto LABEL_67;
        }
        if (v43)
          v48 = v43;
        else
          v48 = inserted;
      }
      else
      {
        v48 = 0;
      }
      inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v7, v48, (uint64_t *)&v83);
      goto LABEL_67;
    }
LABEL_102:
    v68 = 0;
    v69 = 1;
    while (v58 != (uint64_t *)-4096)
    {
      if (v68)
        v70 = 0;
      else
        v70 = v58 == (uint64_t *)-8192;
      if (v70)
        v68 = v53;
      v71 = v57 + v69++;
      v57 = v71 & v56;
      v53 = (uint64_t **)(v55 + 16 * (v71 & v56));
      v58 = *v53;
      v13 = v4;
      if (*v53 == v4)
        goto LABEL_8;
    }
    if (v68)
      v53 = v68;
LABEL_7:
    v13 = *v53;
    goto LABEL_8;
  }
  return *(uint64_t **)(v6 + 16 * v9 + 8);
}

uint64_t *mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *inserted;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t **v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t **v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t *v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  uint64_t *v80;
  int v81;
  char v82;
  uint64_t *v83;
  uint64_t *v84;

  v4 = (uint64_t *)a2;
  v83 = (uint64_t *)a2;
  v7 = (_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 64);
  if (!v8)
    goto LABEL_81;
  v9 = (v8 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v10 = (uint64_t **)(v6 + 16 * v9);
  v11 = *v10;
  if (*v10 != v4)
  {
    v49 = 0;
    v50 = 1;
    while (v11 != (uint64_t *)-4096)
    {
      if (v49)
        v51 = 0;
      else
        v51 = v11 == (uint64_t *)-8192;
      if (v51)
        v49 = v10;
      v52 = v9 + v50++;
      v9 = v52 & (v8 - 1);
      v10 = (uint64_t **)(v6 + 16 * v9);
      v11 = *v10;
      if (*v10 == v4)
        return *(uint64_t **)(v6 + 16 * v9 + 8);
    }
    if (v49)
      v53 = v49;
    else
      v53 = v10;
    v54 = *(_DWORD *)(a1 + 56);
    if (4 * v54 + 4 < 3 * v8)
    {
      if (v8 + ~v54 - *(_DWORD *)(a1 + 60) > v8 >> 3)
        goto LABEL_7;
      goto LABEL_82;
    }
LABEL_81:
    v8 *= 2;
LABEL_82:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 48, v8);
    v55 = *(_QWORD *)(a1 + 48);
    v56 = *(_DWORD *)(a1 + 64) - 1;
    v57 = ((v4 >> 4) ^ (v4 >> 9)) & v56;
    v53 = (uint64_t **)(v55 + 16 * v57);
    v58 = *v53;
    if (*v53 == v4)
    {
      v13 = v4;
LABEL_8:
      ++*(_DWORD *)(a1 + 56);
      if (v13 != (uint64_t *)-4096)
        --*(_DWORD *)(a1 + 60);
      *v53 = v4;
      v14 = (uint64_t)v83;
      v53[1] = v83;
      v16 = a3;
      a3 = (_QWORD *)*a3;
      v15 = (_QWORD *)v16[1];
      if (v15 != a3)
      {
        while (1)
        {
          v84 = v4;
          v17 = *(v15 - 1);
          if (!v17)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_102;
          }
          (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(&v80, v17, &v84);
          if (v82)
            break;
          v15 -= 4;
          if (v15 == a3)
            goto LABEL_14;
        }
        if (v81)
        {
          v4 = v80;
          if (v80)
          {
            if (v81 != 2)
              goto LABEL_15;
            v19 = *(_DWORD *)(a1 + 64);
            if (!v19)
            {
LABEL_31:
              v22 = 0;
              v28 = *(_DWORD *)(a1 + 56);
              if (4 * v28 + 4 < 3 * v19)
                goto LABEL_32;
              goto LABEL_94;
            }
LABEL_17:
            v20 = v19 - 1;
            v21 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
            v22 = (uint64_t *)(*v7 + 16 * v21);
            v23 = *v22;
            if (v14 == *v22)
            {
LABEL_36:
              v22[1] = (uint64_t)v4;
              return v4;
            }
            v24 = 0;
            v25 = 1;
            while (v23 != -4096)
            {
              if (v24)
                v26 = 0;
              else
                v26 = v23 == -8192;
              if (v26)
                v24 = v22;
              v27 = v21 + v25++;
              v21 = v27 & v20;
              v22 = (uint64_t *)(*v7 + 16 * (v27 & v20));
              v23 = *v22;
              if (v14 == *v22)
                goto LABEL_36;
            }
            if (v24)
              v22 = v24;
            v28 = *(_DWORD *)(a1 + 56);
            if (4 * v28 + 4 < 3 * v19)
            {
LABEL_32:
              if (v19 + ~v28 - *(_DWORD *)(a1 + 60) > v19 >> 3)
                goto LABEL_33;
              goto LABEL_95;
            }
LABEL_94:
            v19 *= 2;
LABEL_95:
            llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v19);
            v64 = *(_QWORD *)(a1 + 48);
            v65 = *(_DWORD *)(a1 + 64) - 1;
            v66 = ((v14 >> 4) ^ (v14 >> 9)) & v65;
            v22 = (uint64_t *)(v64 + 16 * v66);
            v67 = *v22;
            if (v14 == *v22)
            {
LABEL_96:
              ++*(_DWORD *)(a1 + 56);
              if (v14 == -4096)
                goto LABEL_35;
              goto LABEL_34;
            }
            v76 = 0;
            v77 = 1;
            while (v67 != -4096)
            {
              if (v76)
                v78 = 0;
              else
                v78 = v67 == -8192;
              if (v78)
                v76 = v22;
              v79 = v66 + v77++;
              v66 = v79 & v65;
              v22 = (uint64_t *)(v64 + 16 * (v79 & v65));
              v67 = *v22;
              if (v14 == *v22)
                goto LABEL_96;
            }
            if (v76)
              v22 = v76;
LABEL_33:
            v29 = *v22;
            ++*(_DWORD *)(a1 + 56);
            if (v29 == -4096)
            {
LABEL_35:
              *v22 = v14;
              v22[1] = 0;
              goto LABEL_36;
            }
LABEL_34:
            --*(_DWORD *)(a1 + 60);
            goto LABEL_35;
          }
        }
        goto LABEL_37;
      }
LABEL_14:
      if (!v4)
      {
LABEL_37:
        v30 = *(_DWORD *)(a1 + 64);
        if (!v30)
          goto LABEL_87;
        v31 = *(_QWORD *)(a1 + 48);
        v32 = v30 - 1;
        v33 = ((v14 >> 4) ^ (v14 >> 9)) & (v30 - 1);
        v34 = (uint64_t *)(v31 + 16 * v33);
        v35 = *v34;
        if (v14 == *v34)
        {
LABEL_64:
          v4 = 0;
          v34[1] = 0;
          return v4;
        }
        v36 = 0;
        v37 = 1;
        while (v35 != -4096)
        {
          if (v36)
            v38 = 0;
          else
            v38 = v35 == -8192;
          if (v38)
            v36 = v34;
          v39 = v33 + v37++;
          v33 = v39 & v32;
          v34 = (uint64_t *)(v31 + 16 * (v39 & v32));
          v35 = *v34;
          if (v14 == *v34)
            goto LABEL_64;
        }
        if (v36)
          v34 = v36;
        v59 = *(_DWORD *)(a1 + 56);
        if (4 * v59 + 4 < 3 * v30)
        {
          if (v30 + ~v59 - *(_DWORD *)(a1 + 60) > v30 >> 3)
            goto LABEL_61;
        }
        else
        {
LABEL_87:
          v30 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v30);
        v60 = *(_QWORD *)(a1 + 48);
        v61 = *(_DWORD *)(a1 + 64) - 1;
        v62 = ((v14 >> 4) ^ (v14 >> 9)) & v61;
        v34 = (uint64_t *)(v60 + 16 * v62);
        v63 = *v34;
        if (v14 == *v34)
        {
LABEL_89:
          ++*(_DWORD *)(a1 + 56);
          if (v14 == -4096)
            goto LABEL_63;
          goto LABEL_62;
        }
        v72 = 0;
        v73 = 1;
        while (v63 != -4096)
        {
          if (v72)
            v74 = 0;
          else
            v74 = v63 == -8192;
          if (v74)
            v72 = v34;
          v75 = v62 + v73++;
          v62 = v75 & v61;
          v34 = (uint64_t *)(v60 + 16 * (v75 & v61));
          v63 = *v34;
          if (v14 == *v34)
            goto LABEL_89;
        }
        if (v72)
          v34 = v72;
LABEL_61:
        v47 = *v34;
        ++*(_DWORD *)(a1 + 56);
        if (v47 == -4096)
        {
LABEL_63:
          *v34 = v14;
          v34[1] = 0;
          goto LABEL_64;
        }
LABEL_62:
        --*(_DWORD *)(a1 + 60);
        goto LABEL_63;
      }
LABEL_15:
      v18 = mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(a1, v4);
      v19 = *(_DWORD *)(a1 + 64);
      if (v18)
      {
        v4 = v18;
        if (!v19)
          goto LABEL_31;
        goto LABEL_17;
      }
      if (v19)
      {
        v40 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
        inserted = (uint64_t *)(*v7 + 16 * v40);
        v42 = *inserted;
        if (v14 == *inserted)
        {
LABEL_67:
          v4 = 0;
          inserted[1] = 0;
          return v4;
        }
        v43 = 0;
        v44 = 1;
        while (v42 != -4096)
        {
          if (v43)
            v45 = 0;
          else
            v45 = v42 == -8192;
          if (v45)
            v43 = inserted;
          v46 = v40 + v44++;
          v40 = v46 & (v19 - 1);
          inserted = (uint64_t *)(*v7 + 16 * v40);
          v42 = *inserted;
          if (v14 == *inserted)
            goto LABEL_67;
        }
        if (v43)
          v48 = v43;
        else
          v48 = inserted;
      }
      else
      {
        v48 = 0;
      }
      inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v7, v48, (uint64_t *)&v83);
      goto LABEL_67;
    }
LABEL_102:
    v68 = 0;
    v69 = 1;
    while (v58 != (uint64_t *)-4096)
    {
      if (v68)
        v70 = 0;
      else
        v70 = v58 == (uint64_t *)-8192;
      if (v70)
        v68 = v53;
      v71 = v57 + v69++;
      v57 = v71 & v56;
      v53 = (uint64_t **)(v55 + 16 * (v71 & v56));
      v58 = *v53;
      v13 = v4;
      if (*v53 == v4)
        goto LABEL_8;
    }
    if (v68)
      v53 = v68;
LABEL_7:
    v13 = *v53;
    goto LABEL_8;
  }
  return *(uint64_t **)(v6 + 16 * v9 + 8);
}

uint64_t mlir::AttrTypeImmediateSubElementWalker::walk(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD))result)(*(_QWORD *)(result + 8));
  return result;
}

{
  if (a2)
    return (*(uint64_t (**)(_QWORD))(result + 16))(*(_QWORD *)(result + 24));
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_DWORD *)(a2 + 8);
    v6 = ~((unint64_t)(37 * v5) << 32)
       + (37 * v5)
       + ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = *a1 + 24 * v11;
    v13 = *(_QWORD *)v12;
    v14 = *(_DWORD *)(v12 + 8);
    if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
    {
      result = 1;
      *a3 = v12;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -4096 || v14 != 0x7FFFFFFF)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == 0x80000000;
        if (v19 && v13 == -8192)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = v4 + 24 * (v21 & v10);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 8);
        if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
        {
          *a3 = v12;
          return result;
        }
      }
      result = 0;
      if (v16)
        v12 = v16;
      *a3 = v12;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || *(_DWORD *)(a4 + 8) != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  _QWORD *v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_207AB88A0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_207AB88A0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            v22 = *(_DWORD *)(v21 + 8);
            if ((*(_QWORD *)v21 != -4096 || v22 != 0x7FFFFFFF) && (*(_QWORD *)v21 != -8192 || v22 != 0x80000000))
            {
              v30 = 0;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)a1, v21, (uint64_t *)&v30);
              v25 = v30;
              *v30 = *(_QWORD *)v21;
              *((_DWORD *)v25 + 2) = *(_DWORD *)(v21 + 8);
              *((_DWORD *)v25 + 4) = *(_DWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_207AB88A0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_32:
      v29 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_207AB88A0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v29);
      return result;
    }
    v26 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
    v27 = v26 & 0x1FFFFFFFFFFFFFFELL;
    v28 = result;
    do
    {
      *v28 = xmmword_207AB88A0;
      *(_OWORD *)((char *)v28 + 24) = xmmword_207AB88A0;
      v28 += 3;
      v27 -= 2;
    }
    while (v27);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_32;
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Attribute>(mlir::Attribute,mlir::WalkOrder)::{lambda(mlir::Attribute)#1}>(_DWORD **result, uint64_t a2)
{
  _DWORD **v2;

  if (a2)
  {
    v2 = result;
    if (**result)
    {
      result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>();
      **v2 = (_DWORD)result;
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Attribute>(mlir::Attribute,mlir::WalkOrder)::{lambda(mlir::Attribute)#1}>(uint64_t result, uint64_t *a2)
{
  _DWORD **v2;

  if (a2)
  {
    v2 = (_DWORD **)result;
    if (**(_DWORD **)result)
    {
      result = mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(*(_QWORD *)(result + 8), a2, (_QWORD *)(*(_QWORD *)(result + 8) + 24), **(_DWORD **)(result + 16));
      **v2 = result;
    }
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Type>(mlir::Type,mlir::WalkOrder)::{lambda(mlir::Type)#1}>(_DWORD **result, uint64_t a2)
{
  _DWORD **v2;

  if (a2)
  {
    v2 = result;
    if (**result)
    {
      result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>();
      **v2 = (_DWORD)result;
    }
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Type>(mlir::Type,mlir::WalkOrder)::{lambda(mlir::Type)#1}>(_DWORD **result, uint64_t a2)
{
  _DWORD **v2;

  if (a2)
  {
    v2 = result;
    if (**result)
    {
      result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>();
      **v2 = (_DWORD)result;
    }
  }
  return result;
}

uint64_t std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>(uint64_t *a1, _QWORD *a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;

  v2 = (char *)a1[1];
  v3 = (uint64_t)&v2[-*a1] >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 4 > v4)
    v4 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v8 = 0x7FFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (!v8)
  {
    v9 = 0;
    v10 = 32 * v3;
    v11 = (_QWORD *)a2[3];
    if (v11)
      goto LABEL_10;
LABEL_14:
    *(_QWORD *)(v10 + 24) = 0;
    v12 = &v9[32 * v8];
    v13 = v10 + 32;
    v14 = (char *)*a1;
    if (v2 == (char *)*a1)
      goto LABEL_25;
    goto LABEL_20;
  }
  if (v8 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = (char *)operator new(32 * v8);
  v10 = (uint64_t)&v9[32 * v3];
  v11 = (_QWORD *)a2[3];
  if (!v11)
    goto LABEL_14;
LABEL_10:
  if (v11 == a2)
  {
    *(_QWORD *)(v10 + 24) = v10;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v10);
    v12 = &v9[32 * v8];
    v13 = v10 + 32;
    v14 = (char *)*a1;
    v2 = (char *)a1[1];
    if (v2 == (char *)*a1)
      goto LABEL_25;
  }
  else
  {
    *(_QWORD *)(v10 + 24) = v11;
    a2[3] = 0;
    v12 = &v9[32 * v8];
    v13 = v10 + 32;
    v14 = (char *)*a1;
    if (v2 == (char *)*a1)
      goto LABEL_25;
  }
  do
  {
LABEL_20:
    v15 = v10;
    v10 -= 32;
    v16 = v2 - 32;
    v17 = (char *)*((_QWORD *)v2 - 1);
    if (v17)
    {
      if (v16 == v17)
      {
        *(_QWORD *)(v15 - 8) = v10;
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v2 - 1) + 24))(*((_QWORD *)v2 - 1), v10);
      }
      else
      {
        *(_QWORD *)(v15 - 8) = v17;
        *((_QWORD *)v2 - 1) = 0;
      }
    }
    else
    {
      *(_QWORD *)(v15 - 8) = 0;
    }
    v2 -= 32;
  }
  while (v16 != v14);
  v2 = (char *)*a1;
LABEL_25:
  v18 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v18 != v2)
  {
    do
    {
      v22 = v18 - 32;
      v20 = (char *)*((_QWORD *)v18 - 1);
      if (v18 - 32 == v20)
      {
        v20 = v18 - 32;
        v21 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_31;
        v21 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_31:
      v18 = v22;
    }
    while (v22 != v2);
  }
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t *mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[17];

  v6[16] = *MEMORY[0x24BDAC8D0];
  v4 = v6;
  v5 = 0x1000000000;
  mlir::AbstractAttribute::walkImmediateSubElements(*a2);
  return a2;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::Attribute mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(mlir::Attribute)::{lambda(mlir::Attribute)#1}>(uint64_t *a1, uint64_t a2)
{
  updateSubElementImpl<mlir::Attribute>(a2, *a1, a1[1], a1[2]);
}

void updateSubElementImpl<mlir::Attribute>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a4 + 1))
  {
    if (a1)
    {
      v7 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>(a2, a1, a2);
      if (v7)
      {
        v8 = *(unsigned int *)(a3 + 8);
        if (v8 >= *(_DWORD *)(a3 + 12))
        {
          v10 = v7;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
          v7 = v10;
          LODWORD(v8) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
        if (v7 != a1)
          *(_WORD *)a4 = 257;
      }
      else
      {
        *(_WORD *)a4 = 0;
      }
    }
    else
    {
      v9 = *(unsigned int *)(a3 + 8);
      if (v9 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v9 + 1, 8);
        LODWORD(v9) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = 0;
      ++*(_DWORD *)(a3 + 8);
    }
  }
}

void llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::Attribute mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(mlir::Attribute)::{lambda(mlir::Type)#1}>(uint64_t *a1, uint64_t a2)
{
  updateSubElementImpl<mlir::Type>(a2, *a1, a1[1], a1[2]);
}

void updateSubElementImpl<mlir::Type>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  if (*(_BYTE *)(a4 + 1))
  {
    if (a1)
    {
      v7 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>(a2, a1, (_QWORD *)(a2 + 24));
      if (v7)
      {
        v8 = *(unsigned int *)(a3 + 8);
        if (v8 >= *(_DWORD *)(a3 + 12))
        {
          v10 = v7;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
          v7 = v10;
          LODWORD(v8) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
        if (v7 != (uint64_t *)a1)
          *(_WORD *)a4 = 257;
      }
      else
      {
        *(_WORD *)a4 = 0;
      }
    }
    else
    {
      v9 = *(unsigned int *)(a3 + 8);
      if (v9 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v9 + 1, 8);
        LODWORD(v9) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = 0;
      ++*(_DWORD *)(a3 + 8);
    }
  }
}

uint64_t *mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[17];

  v6[16] = *MEMORY[0x24BDAC8D0];
  v4 = v6;
  v5 = 0x1000000000;
  mlir::AbstractAttribute::walkImmediateSubElements(*a2);
  return a2;
}

void llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::Type mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(mlir::Type)::{lambda(mlir::Attribute)#1}>(uint64_t *a1, uint64_t a2)
{
  updateSubElementImpl<mlir::Attribute>(a2, *a1, a1[1], a1[2]);
}

uint64_t llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::Type mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(mlir::Type)::{lambda(mlir::Type)#1}>(_QWORD *a1, uint64_t a2)
{
  return updateSubElementImpl<mlir::Type>(a2, *a1, a1[1], a1[2]);
}

void mlir::Block::~Block(ZinIrHalH13g **this)
{
  ZinIrHalH13g *v2;
  ZinIrHalH13g *v3;
  ZinIrHalH13g *v4;
  mlir::Block *v5;
  uint64_t v6;
  ZinIrHalH13g *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  mlir::Block::clear((mlir::Block *)this);
  v2 = this[6];
  v3 = this[7];
  if (v2 == v3)
  {
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    if (*(_QWORD *)v2)
      MEMORY[0x20BD002F8](*(_QWORD *)v2, 0x1020C401BF16FDDLL);
    v2 = (ZinIrHalH13g *)((char *)v2 + 8);
  }
  while (v2 != v3);
  v2 = this[6];
  if (v2)
  {
LABEL_3:
    this[7] = v2;
    operator delete(v2);
  }
LABEL_4:
  v4 = this[5];
  if (v4 != (ZinIrHalH13g *)(this + 4))
  {
    do
    {
      v5 = (mlir::Block *)*((_QWORD *)v4 + 1);
      ZinIrHalH13g::~ZinIrHalH13g(v4);
      v7 = (ZinIrHalH13g *)v6;
      llvm::ilist_traits<mlir::Operation>::removeNodeFromList((uint64_t)(this + 4), v6);
      ZinIrHalH13g::~ZinIrHalH13g(v7);
      v9 = *v8;
      v10 = (uint64_t *)v8[1];
      *v10 = *v8;
      *(_QWORD *)(v9 + 8) = v10;
      *v8 = 0;
      v8[1] = 0;
      mlir::Operation::destroy(v7);
      v4 = v5;
    }
    while (v5 != (mlir::Block *)(this + 4));
  }
}

ZinIrHalH13g *mlir::Block::clear(mlir::Block *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  ZinIrHalH13g *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  ZinIrHalH13g *result;

  v1 = (uint64_t *)((char *)this + 32);
  v2 = (uint64_t *)*((_QWORD *)this + 5);
  if (v2 != (uint64_t *)((char *)this + 32))
  {
    do
    {
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v2);
      mlir::Operation::dropAllReferences(v3);
      v2 = (uint64_t *)v2[1];
    }
    while (v2 != v1);
  }
  while (1)
  {
    result = (ZinIrHalH13g *)*v1;
    if ((uint64_t *)*v1 == v1)
      break;
    ZinIrHalH13g::~ZinIrHalH13g(result);
    v5 = (ZinIrHalH13g *)v4;
    llvm::ilist_traits<mlir::Operation>::removeNodeFromList((uint64_t)v1, v4);
    ZinIrHalH13g::~ZinIrHalH13g(v5);
    v7 = *v6;
    v8 = (uint64_t *)v6[1];
    *v8 = *v6;
    *(_QWORD *)(v7 + 8) = v8;
    *v6 = 0;
    v6[1] = 0;
    mlir::Operation::destroy(v5);
  }
  return result;
}

unint64_t mlir::Block::getParent(mlir::Block *this)
{
  return *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::Block::getParentOp(mlir::Block *this)
{
  if ((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
    return *(_QWORD *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    return 0;
}

BOOL mlir::Block::isEntryBlock(mlir::Block *this)
{
  uint64_t v1;
  mlir::Block *v2;

  v1 = *(_QWORD *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v1)
    v2 = (mlir::Block *)(v1 - 8);
  else
    v2 = 0;
  return v2 == this;
}

mlir::Block *mlir::Block::moveBefore(mlir::Block *this, mlir::Block *a2)
{
  uint64_t *v2;
  mlir::Block *v3;
  mlir::Block *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != this)
  {
    v2 = (uint64_t *)((char *)a2 + 8);
    v3 = (mlir::Block *)*((_QWORD *)this + 2);
    if (v3 != (mlir::Block *)((char *)a2 + 8))
    {
      v4 = (mlir::Block *)((char *)this + 8);
      this = (mlir::Block *)llvm::ilist_traits<mlir::Block>::transferNodesFromList(*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF8, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8, (uint64_t)this + 8, (uint64_t)v3);
      if (v3 != v4)
      {
        v5 = *(_QWORD *)v3;
        v6 = *(_QWORD *)v4;
        *(_QWORD *)(v6 + 8) = v3;
        *(_QWORD *)v3 = v6;
        v7 = *v2;
        *(_QWORD *)(v5 + 8) = v2;
        *(_QWORD *)v4 = v7;
        *(_QWORD *)(v7 + 8) = v4;
        *v2 = v5;
      }
    }
  }
  return this;
}

void mlir::Block::erase(mlir::Block *this)
{
  char *v1;
  char *v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (char *)this + 8;
  if (!this)
    v1 = 0;
  v2 = v1 - 8;
  v3 = this == 0;
  v4 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8;
  if (v3)
    v5 = 0;
  else
    v5 = (uint64_t)v2;
  llvm::ilist_traits<mlir::Block>::removeNodeFromList(v4, v5);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD **)(v5 + 16);
  *v7 = v6;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  mlir::Block::~Block((ZinIrHalH13g **)v5);
  JUMPOUT(0x20BD002F8);
}

Operation *mlir::Block::findAncestorOpInBlock(mlir::Block *this, Operation *a2)
{
  mlir::Block *v2;
  unint64_t v3;

  while (1)
  {
    v2 = (mlir::Block *)*((_QWORD *)a2 + 2);
    if (v2 == this)
      return a2;
    if (!v2)
      break;
    v3 = *((_QWORD *)v2 + 3) & 0xFFFFFFFFFFFFFFF8;
    if (!v3)
      break;
    a2 = *(Operation **)(v3 + 16);
    if (!a2)
      return a2;
  }
  return 0;
}

uint64_t mlir::Block::dropAllReferences(uint64_t this)
{
  ZinIrHalH13g *v1;
  ZinIrHalH13g *v2;
  uint64_t v3;

  v1 = (ZinIrHalH13g *)(this + 32);
  v2 = *(ZinIrHalH13g **)(this + 40);
  if (v2 != (ZinIrHalH13g *)(this + 32))
  {
    do
    {
      ZinIrHalH13g::~ZinIrHalH13g(v2);
      this = mlir::Operation::dropAllReferences(v3);
      v2 = (ZinIrHalH13g *)*((_QWORD *)v2 + 1);
    }
    while (v2 != v1);
  }
  return this;
}

_QWORD *mlir::Block::dropAllDefinedValueUses(_QWORD *this)
{
  _QWORD **v1;
  _QWORD ***v2;
  _QWORD ***i;
  ZinIrHalH13g *v4;
  ZinIrHalH13g *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (_QWORD **)this;
  v2 = (_QWORD ***)this[6];
  for (i = (_QWORD ***)this[7]; v2 != i; ++v2)
  {
    v9 = *v2;
    while (1)
    {
      v10 = *v9;
      if (!*v9)
        break;
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        *v11 = *v10;
        if (*v10)
          *(_QWORD *)(*v10 + 8) = v10[1];
      }
      *v10 = 0;
      v10[1] = 0;
      v10[3] = 0;
    }
  }
  v4 = (ZinIrHalH13g *)(this + 4);
  v5 = (ZinIrHalH13g *)this[5];
  if (v5 != (ZinIrHalH13g *)(this + 4))
  {
    do
    {
      ZinIrHalH13g::~ZinIrHalH13g(v5);
      this = (_QWORD *)mlir::Operation::dropAllDefinedValueUses(v6);
      v5 = (ZinIrHalH13g *)*((_QWORD *)v5 + 1);
    }
    while (v5 != v4);
  }
  while (1)
  {
    v7 = *v1;
    if (!*v1)
      break;
    v8 = (_QWORD *)v7[1];
    if (v8)
    {
      *v8 = *v7;
      if (*v7)
        *(_QWORD *)(*v7 + 8) = v7[1];
    }
    *v7 = 0;
    v7[1] = 0;
    v7[3] = 0;
  }
  return this;
}

uint64_t mlir::Block::isOpOrderValid(mlir::Block *this)
{
  return (*((unsigned __int8 *)this + 24) >> 2) & 1;
}

uint64_t mlir::Block::invalidateOpOrder(uint64_t this)
{
  *(_QWORD *)(this + 24) &= ~4uLL;
  return this;
}

void mlir::Block::recomputeOpOrder(mlir::Block *this)
{
  ZinIrHalH13g *v1;
  ZinIrHalH13g *v2;
  int v3;
  uint64_t v4;

  *((_QWORD *)this + 3) |= 4uLL;
  v1 = (mlir::Block *)((char *)this + 32);
  v2 = (ZinIrHalH13g *)*((_QWORD *)this + 5);
  if (v2 != (mlir::Block *)((char *)this + 32))
  {
    v3 = 5;
    do
    {
      ZinIrHalH13g::~ZinIrHalH13g(v2);
      *(_DWORD *)(v4 + 32) = v3;
      v2 = (ZinIrHalH13g *)*((_QWORD *)v2 + 1);
      v3 += 5;
    }
    while (v2 != v1);
  }
}

uint64_t mlir::Block::getArgumentTypes(mlir::Block *this)
{
  return *((_QWORD *)this + 6);
}

_QWORD *mlir::Block::addArgument(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v6 = (uint64_t)(a1[7] - a1[6]) >> 3;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = a2 | 7;
  v7[2] = a1;
  v7[3] = v6;
  v7[4] = a3;
  v10 = (char *)a1[7];
  v9 = a1[8];
  v11 = v10;
  if ((unint64_t)v10 < v9)
  {
    *(_QWORD *)v10 = v7;
    v12 = (uint64_t)(v10 + 8);
    goto LABEL_23;
  }
  v13 = (char *)a1[6];
  v14 = (v10 - v13) >> 3;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61)
    abort();
  v16 = v9 - (_QWORD)v13;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v18 = (char *)operator new(8 * v17);
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    *(_QWORD *)v19 = v8;
    v12 = (uint64_t)(v19 + 8);
    v21 = (char *)(v10 - v13);
    if (v10 == v13)
      goto LABEL_21;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(8 * v14);
  v20 = 0;
  *(_QWORD *)(8 * v14) = v8;
  v12 = 8 * v14 + 8;
  v21 = (char *)(v10 - v13);
  if (v10 != v13)
  {
LABEL_14:
    v22 = (unint64_t)(v21 - 8);
    if (v22 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v13 - v18) < 0x20)
      goto LABEL_28;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v11 = &v10[-v24];
    v19 -= v24;
    v25 = &v18[8 * v14 - 16];
    v26 = (__int128 *)(v10 - 16);
    v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *v26;
      *((_OWORD *)v25 - 1) = *(v26 - 1);
      *(_OWORD *)v25 = v28;
      v25 -= 32;
      v26 -= 2;
      v27 -= 4;
    }
    while (v27);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v29 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v19 - 1) = v29;
        v19 -= 8;
      }
      while (v11 != v13);
    }
    v11 = (char *)a1[6];
  }
LABEL_21:
  a1[6] = v19;
  a1[7] = v12;
  a1[8] = v20;
  if (v11)
    operator delete(v11);
LABEL_23:
  a1[7] = v12;
  return v8;
}

uint64_t mlir::Block::addArguments(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v10 = (_BYTE *)a1[6];
  v11 = (_BYTE *)a1[7];
  v12 = (v11 - v10) >> 3;
  v13 = v12 + a3;
  if (v12 + a3 <= (unint64_t)((uint64_t)(a1[8] - (_QWORD)v10) >> 3))
    goto LABEL_13;
  if (v13 >> 61)
    abort();
  v14 = 8 * v13;
  v15 = operator new(8 * v13);
  v16 = &v15[8 * v12];
  v17 = v16;
  if (v11 != v10)
  {
    v18 = v11 - v10 - 8;
    if (v18 < 0x58)
    {
      v17 = &v15[8 * v12];
      do
      {
LABEL_10:
        v26 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v17 - 1) = v26;
        v17 -= 8;
      }
      while (v11 != v10);
      goto LABEL_11;
    }
    v17 = &v15[8 * v12];
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_10;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v11[-v20];
    v17 = &v16[-v20];
    v22 = &v15[8 * v12 - 16];
    v23 = (__int128 *)(v11 - 16);
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *v23;
      *(v22 - 1) = *(v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 2;
      v24 -= 4;
    }
    while (v24);
    v11 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  a1[6] = v17;
  a1[7] = v16;
  a1[8] = &v15[v14];
  if (v10)
    operator delete(v10);
LABEL_13:
  if (a3 && a5)
  {
    v27 = 0;
    v28 = 8 * a5 - 8;
    v29 = a3 - 1;
    do
    {
      v30 = mlir::TypeRange::dereference_iterator(a2, v27);
      mlir::Block::addArgument(a1, v30, *(_QWORD *)(a4 + 8 * v27));
      if (v29 == v27)
        break;
      ++v27;
      v31 = v28;
      v28 -= 8;
    }
    while (v31);
  }
  return a1[6] + 8 * v12;
}

uint64_t mlir::Block::eraseArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::Block::eraseArguments(a1, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<mlir::Block::eraseArguments(llvm::BitVector const&)::$_0>, (uint64_t)&v3);
}

uint64_t mlir::Block::eraseArguments(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = *(uint64_t **)(result + 48);
  v4 = *(uint64_t **)(result + 56);
  if (v3 != v4)
  {
    v7 = result;
    while (1)
    {
      result = a2(a3, *v3);
      if ((result & 1) != 0)
        break;
      if (++v3 == v4)
      {
        v3 = v4;
        break;
      }
    }
    if (v3 != *(uint64_t **)(v7 + 56))
    {
      v8 = v3 + 1;
      v9 = *(_QWORD *)(*v3 + 24);
      result = MEMORY[0x20BD002F8]();
      v10 = *(uint64_t **)(v7 + 56);
      if (v3 + 1 == v10)
      {
        if (v3 == v10)
          return result;
LABEL_16:
        *(_QWORD *)(v7 + 56) = v3;
        return result;
      }
      do
      {
        result = a2(a3, *v8);
        if ((_DWORD)result)
        {
          result = *v8;
          if (*v8)
            result = MEMORY[0x20BD002F8](result, 0x1020C401BF16FDDLL);
        }
        else
        {
          *(_QWORD *)(*v8 + 24) = v9;
          *v3++ = *v8;
          LODWORD(v9) = v9 + 1;
        }
        ++v8;
      }
      while (v8 != v10);
      if (v3 != *(uint64_t **)(v7 + 56))
        goto LABEL_16;
    }
  }
  return result;
}

void mlir::Block::getTerminator(ZinIrHalH13g **this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this[4]);
}

uint64_t mlir::Block::getSinglePredecessor(mlir::Block *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if (!*(_QWORD *)this)
    return 0;
  if (*v1)
    return 0;
  return *(_QWORD *)(v1[2] + 16);
}

uint64_t mlir::Block::splitBlock(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = operator new();
  v5 = (uint64_t *)(v4 + 32);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = v4 + 32;
  *(_QWORD *)(v4 + 40) = v4 + 32;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  v6 = a1 + 8;
  if (!a1)
    v6 = 0;
  v7 = *(uint64_t **)(v6 + 8);
  llvm::ilist_traits<mlir::Block>::addNodeToList(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8, v4);
  v8 = *v7;
  *(_QWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 8) = v8;
  *(_QWORD *)(v8 + 8) = v4 + 8;
  *v7 = v4 + 8;
  v9 = (uint64_t *)(a1 + 32);
  if ((uint64_t *)(a1 + 32) != a2 && v4 != a1)
  {
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList((uint64_t)v5, a1 + 32, (uint64_t)a2, a1 + 32);
    v10 = *v9;
    v11 = *a2;
    *(_QWORD *)(v11 + 8) = v9;
    *v9 = v11;
    v12 = *v5;
    *(_QWORD *)(v10 + 8) = v5;
    *a2 = v12;
    *(_QWORD *)(v12 + 8) = a2;
    *v5 = v10;
  }
  return v4;
}

uint64_t mlir::PredecessorIterator::unwrap(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
}

unint64_t mlir::PredecessorIterator::getSuccessorIndex(mlir::BlockOperand **this)
{
  return mlir::BlockOperand::getOperandNumber(*this);
}

mlir::SuccessorRange *mlir::SuccessorRange::SuccessorRange(mlir::SuccessorRange *this, mlir::Block *a2)
{
  ZinIrHalH13g *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (ZinIrHalH13g *)*((_QWORD *)a2 + 4);
  if (v3 != (mlir::Block *)((char *)a2 + 32))
  {
    v4 = *((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF8;
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 == v4 || *(_QWORD *)(v5 + 8) != v4)
    {
      ZinIrHalH13g::~ZinIrHalH13g(v3);
      v7 = *(unsigned int *)(v6 + 40);
      *((_QWORD *)this + 1) = v7;
      if ((_DWORD)v7)
        *(_QWORD *)this = (v6
                         + 16 * (((unint64_t)*(unsigned int *)(v6 + 44) >> 23) & 1)
                         + (((unint64_t)*(unsigned int *)(v6 + 44) >> 21) & 0x7F8)
                         + 71) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  return this;
}

unint64_t *mlir::SuccessorRange::SuccessorRange(unint64_t *this, Operation *a2)
{
  unint64_t v2;

  *this = 0;
  this[1] = 0;
  v2 = *((unsigned int *)a2 + 10);
  this[1] = v2;
  if ((_DWORD)v2)
    *this = ((unint64_t)a2
           + 16 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1)
           + (((unint64_t)*((unsigned int *)a2 + 11) >> 21) & 0x7F8)
           + 71) & 0xFFFFFFFFFFFFFFF8;
  return this;
}

uint64_t *mlir::BlockRange::BlockRange(uint64_t *result, uint64_t a2, uint64_t a3)
{
  *result = 0;
  result[1] = a3;
  if (a3)
    *result = a2 | 4;
  return result;
}

uint64_t mlir::BlockRange::dereference_iterator(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((a1 & 4) == 0)
    v2 = 0;
  v3 = v2 + 8 * a2;
  if (!(((unint64_t)(a1 & 4) >> 2) | ((a1 & 0xFFFFFFFFFFFFFFF8) == 0)))
    v3 = (a1 & 0xFFFFFFFFFFFFFFF8) + 32 * a2 + 24;
  return *(_QWORD *)v3;
}

uint64_t llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<mlir::Block::eraseArguments(llvm::BitVector const&)::$_0>(_QWORD **a1, uint64_t a2)
{
  return (*(_QWORD *)(**a1 + 8 * (*(_QWORD *)(a2 + 24) >> 6)) >> *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t mlir::Builder::getUnknownLoc(mlir::UnknownLoc **this, mlir::MLIRContext *a2)
{
  return mlir::UnknownLoc::get(*this, a2);
}

void mlir::Builder::getFusedLoc(mlir::UnknownLoc **a1, uint64_t **a2, mlir::MLIRContext *a3, uint64_t a4)
{
  mlir::FusedLoc::get(a2, a3, a4, *a1);
}

uint64_t mlir::Builder::getFloat8E5M2Type(mlir::Float8E5M2Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E5M2Type::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3FNType(ZinIrHazardNode **this)
{
  return ZinIrHazardNode::GetLayerTID(*this);
}

uint64_t mlir::Builder::getFloat8E5M2FNUZType(mlir::Float8E5M2FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E5M2FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3FNUZType(mlir::Float8E4M3FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E4M3FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3B11FNUZType(mlir::Float8E4M3B11FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E4M3B11FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getBF16Type(mlir::BFloat16Type **this, mlir::MLIRContext *a2)
{
  return mlir::BFloat16Type::get(*this, a2);
}

uint64_t mlir::Builder::getF16Type(mlir::Float16Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float16Type::get(*this, a2);
}

uint64_t mlir::Builder::getTF32Type(mlir::FloatTF32Type **this, mlir::MLIRContext *a2)
{
  return mlir::FloatTF32Type::get(*this, a2);
}

uint64_t mlir::Builder::getF32Type(mlir::Float32Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float32Type::get(*this, a2);
}

uint64_t mlir::Builder::getF64Type(mlir::Float64Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float64Type::get(*this, a2);
}

uint64_t mlir::Builder::getF80Type(mlir::Float80Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float80Type::get(*this, a2);
}

uint64_t mlir::Builder::getF128Type(mlir::Float128Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float128Type::get(*this, a2);
}

uint64_t mlir::Builder::getIndexType(mlir::IndexType **this, mlir::MLIRContext *a2)
{
  return mlir::IndexType::get(*this, a2);
}

uint64_t mlir::Builder::getI1Type(mlir::Builder *this)
{
  return mlir::IntegerType::get(*(_QWORD *)this, 1u, 0);
}

uint64_t mlir::Builder::getIntegerType(mlir::Builder *this, unsigned int a2)
{
  return mlir::IntegerType::get(*(_QWORD *)this, a2, 0);
}

uint64_t mlir::Builder::getIntegerType(mlir::Builder *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)this;
  if (a3)
    v4 = 1;
  else
    v4 = 2;
  return mlir::IntegerType::get(v3, a2, v4);
}

uint64_t mlir::Builder::getFunctionType(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::FunctionType::get(*a1, a2, a3, a4, a5);
}

uint64_t mlir::Builder::getNoneType(mlir::NoneType **this, mlir::MLIRContext *a2)
{
  return mlir::NoneType::get(*this, a2);
}

uint64_t mlir::Builder::getNamedAttr(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;

  v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  v5 = mlir::StringAttr::get(*a1, (mlir::MLIRContext *)v7);
  ZinMirCacheTensors::ZinMirCacheTensors(&v9, v5, a4);
  return v9;
}

uint64_t mlir::Builder::getStringAttr(mlir::StringAttr **a1, mlir::MLIRContext *a2)
{
  return mlir::StringAttr::get(*a1, a2);
}

uint64_t mlir::Builder::getUnitAttr(mlir::UnitAttr **this, mlir::MLIRContext *a2)
{
  return mlir::UnitAttr::get(*this, a2);
}

uint64_t mlir::Builder::getBoolAttr(mlir::BoolAttr **this, mlir::MLIRContext *a2)
{
  return mlir::BoolAttr::get(*this, a2);
}

uint64_t mlir::Builder::getDictionaryAttr(mlir::DictionaryAttr **a1, mlir::MLIRContext *a2, uint64_t a3)
{
  return mlir::DictionaryAttr::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getIndexAttr(mlir::IndexType **this, mlir::MLIRContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  mlir::MLIRContext *v6;
  unsigned int v7;

  v3 = mlir::IndexType::get(*this, a2);
  v7 = 64;
  v6 = a2;
  v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&v6);
  if (v7 >= 0x41 && v6)
    MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  return v4;
}

uint64_t mlir::Builder::getI64IntegerAttr(mlir::Builder *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;

  v3 = mlir::IntegerType::get(*(_QWORD *)this, 0x40u, 0);
  v7 = 64;
  v6 = a2;
  v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&v6);
  if (v7 >= 0x41 && v6)
    MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  return v4;
}

uint64_t mlir::Builder::getI32VectorAttr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a3;
  v5 = mlir::IntegerType::get(*a1, 0x20u, 0);
  v6 = (_QWORD *)mlir::VectorType::get((uint64_t)&v10, 1uLL, v5, 0, 0);
  v7 = v6;
  if (v6)
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  else
    v8 = 0;
  return mlir::DenseElementsAttr::getFromRawBuffer(v7, v8, a2, 4 * a3, 4, 1, 1);
}

uint64_t mlir::Builder::getDenseBoolArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<BOOL>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getDenseI32ArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<int>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getDenseI64ArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<long long>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getI32TensorAttr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a3;
  v5 = mlir::IntegerType::get(*a1, 0x20u, 0);
  v6 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v10, 1, v5, 0);
  v7 = v6;
  if (v6)
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  else
    v8 = 0;
  return mlir::DenseElementsAttr::getFromRawBuffer(v7, v8, a2, 4 * a3, 4, 1, 1);
}

uint64_t mlir::Builder::getI32IntegerAttr(mlir::Builder *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;

  v3 = mlir::IntegerType::get(*(_QWORD *)this, 0x20u, 0);
  v7 = 32;
  v6 = a2;
  v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&v6);
  if (v7 >= 0x41 && v6)
    MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  return v4;
}

uint64_t mlir::Builder::getIntegerAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 isIndex;
  uint64_t v5;
  unsigned int IntOrFloatBitWidth;
  _BOOL4 isSignedInteger;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v13 = a2;
  isIndex = mlir::Type::isIndex((mlir::Type *)&v13);
  v5 = v13;
  if (isIndex)
  {
    v12 = 64;
    v11 = a3;
  }
  else
  {
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v13);
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v13);
    v12 = IntOrFloatBitWidth;
    if (IntOrFloatBitWidth > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v11, a3, isSignedInteger);
    }
    else
    {
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IntOrFloatBitWidth;
      if (!IntOrFloatBitWidth)
        v8 = 0;
      v11 = v8 & a3;
    }
  }
  v9 = mlir::IntegerAttr::get(v5, (llvm::APInt *)&v11);
  if (v12 >= 0x41 && v11)
    MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
  return v9;
}

uint64_t mlir::Builder::getIntegerAttr(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  return mlir::IntegerAttr::get(a2, a3);
}

llvm::APFloatBase *mlir::Builder::getF16FloatAttr(mlir::Float16Type **this, float a2, mlir::MLIRContext *a3)
{
  uint64_t v4;

  v4 = mlir::Float16Type::get(*this, a3);
  return mlir::FloatAttr::get(v4, a2);
}

llvm::APFloatBase *mlir::Builder::getFloatAttr(double a1, uint64_t a2, uint64_t a3)
{
  return mlir::FloatAttr::get(a3, a1);
}

uint64_t mlir::Builder::getFloatAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::FloatAttr::get(a2, a3);
}

uint64_t mlir::Builder::getArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::ArrayAttr::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getI64ArrayAttr(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x24BDAC8D0];
  v17 = v19;
  v18 = 0x800000000;
  v6 = 8 * a3;
  if (8 * a3 < 0x41)
  {
    v7 = 0;
    v8 = v19;
    if (!a3)
      goto LABEL_11;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, a3, 8);
    v7 = v18;
    v8 = v17;
    if (!a3)
      goto LABEL_11;
  }
  v9 = &v8[v7];
  do
  {
    v10 = *a2;
    v11 = mlir::IntegerType::get(*a1, 0x40u, 0);
    v16 = 64;
    v15 = v10;
    v12 = mlir::IntegerAttr::get(v11, (llvm::APInt *)&v15);
    if (v16 >= 0x41 && v15)
      MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
    *v9++ = v12;
    ++a2;
    v6 -= 8;
  }
  while (v6);
  v7 = v18;
  v8 = v17;
LABEL_11:
  LODWORD(v18) = v7 + a3;
  v13 = mlir::ArrayAttr::get((mlir::MLIRContext *)*a1, (uint64_t)v8, (v7 + a3));
  if (v17 != v19)
    free(v17);
  return v13;
}

uint64_t mlir::Builder::getStrArrayAttr(mlir::MLIRContext **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  mlir::StringAttr *v13;
  uint64_t v14;
  _QWORD v16[4];
  __int16 v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x24BDAC8D0];
  v6 = 2 * a3;
  v18 = v20;
  v19 = 0x800000000;
  if (16 * a3 < 0x81)
  {
    v7 = 0;
    v8 = v20;
    if (!a3)
      goto LABEL_8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, a3, 8);
    v7 = v19;
    v8 = v18;
    if (!a3)
      goto LABEL_8;
  }
  v9 = &a2[v6];
  v10 = &v8[v7];
  do
  {
    v11 = *a2;
    v12 = a2[1];
    a2 += 2;
    v13 = *a1;
    v17 = 261;
    v16[0] = v11;
    v16[1] = v12;
    *v10++ = mlir::StringAttr::get(v13, (mlir::MLIRContext *)v16);
  }
  while (a2 != v9);
  v7 = v19;
  v8 = v18;
LABEL_8:
  LODWORD(v19) = v7 + a3;
  v14 = mlir::ArrayAttr::get(*a1, (uint64_t)v8, (v7 + a3));
  if (v18 != v20)
    free(v18);
  return v14;
}

_QWORD *mlir::Builder::getZeroAttr(mlir::IndexType **a1, mlir::MLIRContext *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v16;
  uint64_t v19;
  uint64_t OperandRange;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24[2];
  mlir::MLIRContext *v25;
  uint64_t v26;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(*(_QWORD *)a2 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v16 = mlir::FloatAttr::get((uint64_t)a2, 0.0);
    if (!v16)
      return v16;
LABEL_37:
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v16 + 8);
    return v16;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v19 = mlir::IndexType::get(*a1, a2);
    LODWORD(v26) = 64;
    v25 = 0;
    v16 = (_QWORD *)mlir::IntegerAttr::get(v19, (llvm::APInt *)&v25);
    if (v26 >= 0x41 && v25)
      MEMORY[0x20BD002D4](v25, 0x1000C8000313F17);
    if (!v16)
      return v16;
    goto LABEL_37;
  }
  if (!a2 || v4 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v4 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
    {
      return 0;
    }
    v25 = a2;
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v3 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v25);
    v24[0] = mlir::Builder::getZeroAttr(a1, OperandRange);
    v24[1] = v21;
    if (!v24[0])
      return 0;
    v22 = (_QWORD *)mlir::DenseElementsAttr::get((uint64_t)v25, v26, v24, 1uLL);
    v16 = v22;
    if (v22)
      mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v22 + 8);
    if (v16)
      return v16;
    return v16;
  }
  v24[0] = (uint64_t)a2;
  LODWORD(v26) = mlir::IntegerType::getWidth((mlir::IntegerType *)v24);
  if (v26 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, 0, 0);
  else
    v25 = 0;
  v23 = (_QWORD *)mlir::IntegerAttr::get((uint64_t)a2, (llvm::APInt *)&v25);
  v16 = v23;
  if (v23)
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v23 + 8);
  if (v26 < 0x41 || !v25)
    return v16;
  MEMORY[0x20BD002D4](v25, 0x1000C8000313F17);
  return v16;
}

uint64_t mlir::Builder::getAffineSymbolExpr(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  return mlir::getAffineSymbolExpr(a2, *this, a3);
}

uint64_t mlir::Builder::getAffineConstantExpr(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  return mlir::getAffineConstantExpr(a2, *this, a3);
}

uint64_t mlir::Builder::getEmptyAffineMap(mlir::AffineMap **this, mlir::MLIRContext *a2)
{
  return mlir::AffineMap::get(*this, a2);
}

uint64_t mlir::Builder::getConstantAffineMap(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  uint64_t AffineConstantExpr;

  AffineConstantExpr = mlir::getAffineConstantExpr(a2, *this, a3);
  return mlir::AffineMap::get(0, 0, AffineConstantExpr);
}

uint64_t mlir::Builder::getSymbolIdentityMap(mlir::MLIRContext **this, uint64_t a2, mlir::MLIRContext *a3)
{
  uint64_t AffineSymbolExpr;

  AffineSymbolExpr = mlir::getAffineSymbolExpr(0, *this, a3);
  return mlir::AffineMap::get(0, 1, AffineSymbolExpr);
}

mlir::Operation *mlir::OpBuilder::insert(mlir::OpBuilder *this, mlir::Operation *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 3);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v4 + 32, (uint64_t)a2);
    ZinIrHalH13g::~ZinIrHalH13g(a2);
    v6 = *v5;
    *v7 = *v5;
    v7[1] = (uint64_t)v5;
    *(_QWORD *)(v6 + 8) = v7;
    *v5 = (uint64_t)v7;
    ZinIrHalH13g::~ZinIrHalH13g(a2);
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
    (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v8 + 16))(v8, a2);
  return a2;
}

uint64_t mlir::OpBuilder::createBlock(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a3)
    v13 = a3;
  else
    v13 = (uint64_t *)a2;
  v14 = operator new();
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)(v14 + 32) = v14 + 32;
  *(_QWORD *)(v14 + 40) = v14 + 32;
  *(_QWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  mlir::Block::addArguments((_QWORD *)v14, a4, a5, a6, a7);
  llvm::ilist_traits<mlir::Block>::addNodeToList(a2, v14);
  v15 = *v13;
  *(_QWORD *)(v14 + 8) = *v13;
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v15 + 8) = v14 + 8;
  *v13 = v14 + 8;
  a1[2] = v14;
  a1[3] = v14 + 32;
  v16 = a1[1];
  if (v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14);
  return v14;
}

uint64_t mlir::OpBuilder::createBlock(_QWORD *a1, mlir::Block *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t Parent;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  Parent = mlir::Block::getParent(this);
  v13 = Parent;
  if (this)
    v14 = (uint64_t *)((char *)this + 8);
  else
    v14 = (uint64_t *)Parent;
  v15 = operator new();
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(v15 + 32) = v15 + 32;
  *(_QWORD *)(v15 + 40) = v15 + 32;
  *(_QWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  mlir::Block::addArguments((_QWORD *)v15, a3, a4, a5, a6);
  llvm::ilist_traits<mlir::Block>::addNodeToList(v13, v15);
  v16 = *v14;
  *(_QWORD *)(v15 + 8) = *v14;
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v16 + 8) = v15 + 8;
  *v14 = v15 + 8;
  a1[2] = v15;
  a1[3] = v15 + 32;
  v17 = a1[1];
  if (v17)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v15);
  return v15;
}

ZinIrHalH13g *mlir::OpBuilder::create(mlir::OpBuilder *this, const mlir::OperationState *a2)
{
  ZinIrHalH13g *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v3 = (ZinIrHalH13g *)mlir::Operation::create(a2, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 3);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v4 + 32, (uint64_t)v3);
    ZinIrHalH13g::~ZinIrHalH13g(v3);
    v6 = *v5;
    *v7 = *v5;
    v7[1] = (uint64_t)v5;
    *(_QWORD *)(v6 + 8) = v7;
    *v5 = (uint64_t)v7;
    ZinIrHalH13g::~ZinIrHalH13g(v3);
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
    (*(void (**)(uint64_t, ZinIrHalH13g *))(*(_QWORD *)v8 + 16))(v8, v3);
  return v3;
}

uint64_t mlir::OpBuilder::tryFold(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Values;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  ZinIrHalH13g *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  mlir::Operation **v49;
  uint64_t v50;
  mlir::Operation *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  uint64_t v62;
  uint64_t v63[4];
  _QWORD v64[4];
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[6];

  v72[4] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v6)
    v7 = a2 - 16;
  else
    v7 = 0;
  v65 = v7;
  v66 = v6;
  if (v6 > *(_DWORD *)(a3 + 12))
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v6, 8);
  v8 = a2 + 48;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(a2 + 48)))
  {
    *(_DWORD *)(a3 + 8) = 0;
    if (v6 <= *(_DWORD *)(a3 + 12))
    {
      if (!(_DWORD)v6)
      {
        v15 = 0;
LABEL_19:
        v16 = 0;
        *(_DWORD *)(a3 + 8) = v15 + v6;
        return v16;
      }
      v9 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v6, 8);
      v9 = *(unsigned int *)(a3 + 8);
    }
    v13 = 0;
    v14 = *(_QWORD *)a3 + 8 * v9;
    do
    {
      *(_QWORD *)(v14 + 8 * v13) = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v13);
      ++v13;
    }
    while (v6 != v13);
    v15 = *(_DWORD *)(a3 + 8);
    goto LABEL_19;
  }
  v70 = v72;
  v71 = 0x400000000;
  if (!mlir::Operation::fold(a2, (uint64_t)&v70) || !(_DWORD)v71)
  {
    v18 = v65;
    v17 = v66;
    *(_DWORD *)(a3 + 8) = 0;
    if (v17 <= *(unsigned int *)(a3 + 12))
    {
      if (!v17)
      {
        v22 = 0;
LABEL_27:
        v16 = 0;
        *(_DWORD *)(a3 + 8) = v22 + v17;
        goto LABEL_54;
      }
      v19 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v17, 8);
      v19 = *(unsigned int *)(a3 + 8);
    }
    v20 = 0;
    v21 = *(_QWORD *)a3 + 8 * v19;
    do
    {
      *(_QWORD *)(v21 + 8 * v20) = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, v20);
      ++v20;
    }
    while (v17 != v20);
    v22 = *(_DWORD *)(a3 + 8);
    goto LABEL_27;
  }
  v64[0] = *a1;
  memset(&v64[1], 0, 24);
  v67 = &v69;
  v68 = 0x100000000;
  v10 = *(_QWORD *)v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v63[0] = *(_QWORD *)(v10 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v63);
    mlir::OperandRange::getTypes(&v65, v63);
    v12 = v71;
    if (!(_DWORD)v71)
      goto LABEL_45;
  }
  else
  {
    Values = *(_QWORD *)(v10 + 24);
    mlir::OperandRange::getTypes(&v65, v63);
    v12 = v71;
    if (!(_DWORD)v71)
    {
LABEL_45:
      if ((_DWORD)v68)
      {
        v34 = (uint64_t *)v67;
        v35 = 8 * v68;
        do
        {
          v36 = (ZinIrHalH13g *)*v34;
          v37 = a1[2];
          if (v37)
          {
            v38 = (uint64_t *)a1[3];
            llvm::ilist_traits<mlir::Operation>::addNodeToList(v37 + 32, *v34);
            ZinIrHalH13g::~ZinIrHalH13g(v36);
            v39 = *v38;
            *v40 = *v38;
            v40[1] = (uint64_t)v38;
            *(_QWORD *)(v39 + 8) = v40;
            *v38 = (uint64_t)v40;
            ZinIrHalH13g::~ZinIrHalH13g(v36);
          }
          v41 = a1[1];
          if (v41)
            (*(void (**)(uint64_t, ZinIrHalH13g *))(*(_QWORD *)v41 + 16))(v41, v36);
          ++v34;
          v35 -= 8;
        }
        while (v35);
        v16 = 1;
        v42 = v67;
        if (v67 == &v69)
          goto LABEL_54;
      }
      else
      {
        v16 = 1;
        v42 = v67;
        if (v67 == &v69)
          goto LABEL_54;
      }
LABEL_53:
      free(v42);
      goto LABEL_54;
    }
  }
  v23 = v63[0];
  v24 = v63[1];
  v25 = v63[2];
  v62 = v63[3];
  v61 = (void *)(a3 + 16);
  v26 = 8 * v12;
  v27 = v70;
  while (1)
  {
    if (v23 == v25 && v62 == v24)
      goto LABEL_45;
    v28 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v23, v24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v29 = *v27 & 0xFFFFFFFFFFFFFFF8;
    if ((*v27 & 4) != 0)
    {
      if (v29)
        break;
    }
    if (!Values)
    {
      v47 = v65;
      v44 = v66;
      *(_DWORD *)(a3 + 8) = 0;
      if (v44 <= *(unsigned int *)(a3 + 12))
      {
        if (!v44)
          goto LABEL_86;
        v48 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
        v48 = *(unsigned int *)(a3 + 8);
      }
      v56 = 0;
      v57 = *(_QWORD *)a3 + 8 * v48;
      do
      {
        *(_QWORD *)(v57 + 8 * v56) = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, v56);
        ++v56;
      }
      while (v44 != v56);
      goto LABEL_83;
    }
    v31 = (*(uint64_t (**)(uint64_t, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)Values + 24))(Values, v64, *v27 & 0xFFFFFFFFFFFFFFF8, v28, *(_QWORD *)(a2 + 24));
    if (!v31)
    {
      if ((_DWORD)v68)
      {
        v49 = (mlir::Operation **)v67;
        v50 = 8 * v68;
        do
        {
          v51 = *v49++;
          mlir::Operation::erase(v51);
          v50 -= 8;
        }
        while (v50);
      }
      v52 = v65;
      v44 = v66;
      *(_DWORD *)(a3 + 8) = 0;
      if (v44 > *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
        v53 = *(unsigned int *)(a3 + 8);
LABEL_81:
        v58 = 0;
        v59 = *(_QWORD *)a3 + 8 * v53;
        do
        {
          *(_QWORD *)(v59 + 8 * v58) = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, v58);
          ++v58;
        }
        while (v44 != v58);
LABEL_83:
        v60 = *(_DWORD *)(a3 + 8);
LABEL_84:
        v16 = 0;
        *(_DWORD *)(a3 + 8) = v60 + v44;
        v42 = v67;
        if (v67 != &v69)
          goto LABEL_53;
        goto LABEL_54;
      }
      if (v44)
      {
        v53 = 0;
        goto LABEL_81;
      }
LABEL_86:
      v60 = 0;
      goto LABEL_84;
    }
    v32 = v31;
    v33 = v68;
    if (v68 >= (unint64_t)HIDWORD(v68))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, &v69, v68 + 1, 8);
      v33 = v68;
    }
    *((_QWORD *)v67 + v33) = v32;
    LODWORD(v68) = v68 + 1;
    v29 = v32 - 16;
    v30 = *(unsigned int *)(a3 + 8);
    if (v30 >= *(unsigned int *)(a3 + 12))
    {
LABEL_44:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v30 + 1, 8);
      v30 = *(unsigned int *)(a3 + 8);
    }
LABEL_37:
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v30) = v29;
    ++*(_DWORD *)(a3 + 8);
    ++v27;
    ++v24;
    v26 -= 8;
    if (!v26)
      goto LABEL_45;
  }
  if ((*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8) == v28)
  {
    v30 = *(unsigned int *)(a3 + 8);
    if (v30 >= *(unsigned int *)(a3 + 12))
      goto LABEL_44;
    goto LABEL_37;
  }
  v45 = v65;
  v44 = v66;
  *(_DWORD *)(a3 + 8) = 0;
  if (v44 > *(unsigned int *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
    v46 = *(unsigned int *)(a3 + 8);
    goto LABEL_71;
  }
  if (v44)
  {
    v46 = 0;
LABEL_71:
    v54 = 0;
    v55 = *(_QWORD *)a3 + 8 * v46;
    do
    {
      *(_QWORD *)(v55 + 8 * v54) = mlir::detail::OpResultImpl::getNextResultAtOffset(v45, v54);
      ++v54;
    }
    while (v44 != v54);
    goto LABEL_83;
  }
  v16 = 0;
  v42 = v67;
  if (v67 != &v69)
    goto LABEL_53;
LABEL_54:
  if (v70 != v72)
    free(v70);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::clone(uint64_t **this, mlir::Operation *a2, mlir::IRMapping *a3)
{
  char v6;
  unsigned int *v7;
  ZinIrHalH13g *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  ZinIrHalH13g *v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  mlir::ForwardIterator *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  mlir::OpBuilder *v24;

  v6 = mlir::Operation::CloneOptions::all((mlir::Operation::CloneOptions *)this);
  v7 = mlir::Operation::clone((uint64_t)a2, (uint64_t)a3, v6);
  v8 = (ZinIrHalH13g *)v7;
  if (this[1])
  {
    v24 = (mlir::OpBuilder *)this;
    v9 = v7[11];
    if ((v9 & 0x7FFFFF) != 0)
    {
      v10 = (((unint64_t)&v7[4 * ((v9 >> 23) & 1) + 17] + ((v9 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v7[10];
      v11 = v10 + 24 * (v9 & 0x7FFFFF);
      do
      {
        for (i = *(_QWORD *)(v10 + 8); i != v10; i = *(_QWORD *)(i + 8))
        {
          v13 = i - 8;
          if (!i)
            v13 = 0;
          v14 = (ZinIrHalH13g *)(v13 + 32);
          v15 = *(ZinIrHalH13g **)(v13 + 40);
          if (v15 != (ZinIrHalH13g *)(v13 + 32))
          {
            do
            {
              v16 = (ZinIrHalH13g *)*((_QWORD *)v15 + 1);
              ZinIrHalH13g::~ZinIrHalH13g(v15);
              mlir::detail::walk<mlir::ForwardIterator>(v17, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OpBuilder::clone(mlir::Operation&,mlir::IRMapping &)::$_0>, (uint64_t)&v24, 1);
              v15 = v16;
            }
            while (v16 != v14);
          }
        }
        v10 += 24;
      }
      while (v10 != v11);
    }
  }
  v18 = this[2];
  if (v18)
  {
    v19 = this[3];
    llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)(v18 + 4), (uint64_t)v8);
    ZinIrHalH13g::~ZinIrHalH13g(v8);
    v20 = *v19;
    *v21 = *v19;
    v21[1] = (uint64_t)v19;
    *(_QWORD *)(v20 + 8) = v21;
    *v19 = (uint64_t)v21;
    ZinIrHalH13g::~ZinIrHalH13g(v8);
  }
  v22 = this[1];
  if (v22)
    (*(void (**)(uint64_t *, ZinIrHalH13g *))(*v22 + 16))(v22, v8);
  return v8;
}

void mlir::OpBuilder::clone(uint64_t **this, mlir::Operation *a2)
{
  _QWORD v2[2];
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  unsigned int v9;

  v2[0] = 0;
  v2[1] = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  mlir::OpBuilder::clone(this, a2, (mlir::IRMapping *)v2);
  llvm::deallocate_buffer(v7, (void *)(16 * v9));
}

void sub_2072C4BF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
  llvm::deallocate_buffer(a13, (void *)(16 * a15));
}

void sub_2072C4C08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
  llvm::deallocate_buffer(a10, (void *)(16 * a12));
}

uint64_t sub_2072C4C1C()
{
  uint64_t v0;

  return v0;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OpBuilder::clone(mlir::Operation&,mlir::IRMapping &)::$_0>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t mlir::ElementsAttr::getType(mlir::ElementsAttr *this)
{
  return (**(uint64_t (***)(void))(*((_QWORD *)this + 1) + 24))();
}

uint64_t mlir::MemRefLayoutAttrInterface::verifyLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1] + 16))(a1[1], *a1, a2, a3, a4, a5);
}

uint64_t mlir::ElementsAttr::getElementType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v4[1] = v2;
  return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v4);
}

uint64_t mlir::ElementsAttr::getNumElements(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *Shape;
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v6[1] = v2;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v6);
  return mlir::ShapedType::getNumElements(Shape, v4);
}

uint64_t mlir::ElementsAttr::isValidIndex(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Shape;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  mlir::ShapedType::getShape((mlir::ShapedType *)v12);
  if (!v6 && a4 == 1 && !*a3)
    return 1;
  if (v6 == a4)
  {
    Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v12);
    if (a4 << 32)
    {
      v8 = 0;
      v9 = (int)a4;
      while (1)
      {
        v10 = *(_QWORD *)((char *)a3 + (v8 >> 29));
        if (v10 < 0 || v10 >= *(_QWORD *)(Shape + 8 * (v8 >> 32)))
          break;
        v8 += 0x100000000;
        if (!--v9)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t Shape;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v13[1] = v6;
  mlir::ShapedType::getShape((mlir::ShapedType *)v13);
  if (!v7 && a4 == 1 && !*a3)
    return 1;
  if (v7 == a4)
  {
    Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v13);
    if (a4 << 32)
    {
      v9 = 0;
      v10 = (int)a4;
      while (1)
      {
        v11 = *(_QWORD *)((char *)a3 + (v9 >> 29));
        if (v11 < 0 || v11 >= *(_QWORD *)(Shape + 8 * (v9 >> 32)))
          break;
        v9 += 0x100000000;
        if (!--v10)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t mlir::ElementsAttr::getFlattenedIndex(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t Shape;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = a1;
  if (a1)
    a1 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
  v15[0] = v3;
  v15[1] = a1;
  mlir::ShapedType::getShape((mlir::ShapedType *)v15);
  v5 = v4;
  Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v15);
  if (v5 - 1 < 0)
    return 0;
  v7 = Shape;
  result = 0;
  v9 = 8 * (v5 - 1);
  v10 = (uint64_t *)(v7 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = 1;
  do
  {
    v13 = *v11--;
    result += v13 * v12;
    v14 = *v10--;
    v12 *= v14;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t mlir::detail::verifyAffineMapAsLayout(uint64_t a1, uint64_t a2, const char *a3, void (*a4)(_QWORD *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  unsigned int NumDims;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  _QWORD v51[3];
  void *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[96];
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD *v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v47 = a1;
  if (a3 == (const char *)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v47))
    return 1;
  a4(v51, a5);
  if (v51[0])
  {
    v48 = 3;
    v49 = "memref layout mismatch between rank and affine map: ";
    v50 = 52;
    v9 = &v48;
    v10 = (char *)v52;
    if (v53 >= v54)
    {
      v37 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        v43 = (char *)&v48 - (_BYTE *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
        v10 = (char *)v52;
        v9 = (int *)((char *)v52 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
        v9 = &v48;
        v10 = (char *)v52;
      }
    }
    v11 = &v10[24 * v53];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
    *(_OWORD *)v11 = v12;
    v13 = ++v53;
    if (v51[0])
    {
      v48 = 5;
      v49 = a3;
      v14 = &v48;
      v15 = (char *)v52;
      if (v13 >= v54)
      {
        v39 = v13 + 1;
        v40 = (char *)v52 + 24 * v13 > (char *)&v48;
        if (v52 <= &v48 && v40)
        {
          v45 = (char *)&v48 - (_BYTE *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
          v15 = (char *)v52;
          v14 = (int *)((char *)v52 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
          v14 = &v48;
          v15 = (char *)v52;
        }
      }
      v16 = &v15[24 * v53];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      v18 = ++v53;
      if (v51[0])
      {
        v48 = 3;
        v49 = " != ";
        v50 = 4;
        v19 = &v48;
        v20 = (char *)v52;
        if (v18 >= v54)
        {
          v41 = v18 + 1;
          v42 = (char *)v52 + 24 * v18 > (char *)&v48;
          if (v52 <= &v48 && v42)
          {
            v46 = (char *)&v48 - (_BYTE *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
            v20 = (char *)v52;
            v19 = (int *)((char *)v52 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
            v19 = &v48;
            v20 = (char *)v52;
          }
        }
        v21 = &v20[24 * v53];
        v22 = *(_OWORD *)v19;
        *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v21 = v22;
        ++v53;
      }
    }
  }
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v47);
  if (v51[0])
  {
    v48 = 5;
    v49 = (const char *)NumDims;
    v24 = &v48;
    v25 = (char *)v52;
    if (v53 >= v54)
    {
      v38 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        v44 = (char *)&v48 - (_BYTE *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
        v25 = (char *)v52;
        v24 = (int *)((char *)v52 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
        v24 = &v48;
        v25 = (char *)v52;
      }
    }
    v26 = &v25[24 * v53];
    v27 = *(_OWORD *)v24;
    *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
    *(_OWORD *)v26 = v27;
    ++v53;
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
  if (v51[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
  if (v60)
  {
    v28 = __p;
    if (__p)
    {
      v29 = v59;
      v30 = __p;
      if (v59 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v59 = v28;
      operator delete(v30);
    }
    v31 = v56;
    if (v56)
    {
      v32 = v57;
      v33 = v56;
      if (v57 != v56)
      {
        do
        {
          v35 = *--v32;
          v34 = v35;
          *v32 = 0;
          if (v35)
            MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
        }
        while (v32 != v31);
        v33 = v56;
      }
      v57 = v31;
      operator delete(v33);
    }
    if (v52 != v55)
      free(v52);
  }
  return v8;
}

uint64_t mlir::AffineMapAttr::get(unint64_t a1)
{
  mlir::MLIRContext *LHS;
  unsigned __int8 **AttributeUniquer;
  unint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(LHS);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  v5[1] = LHS;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, &v4);
}

uint64_t mlir::AffineMapAttr::getValue(mlir::AffineMapAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8);
}

uint64_t mlir::ArrayAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **AttributeUniquer;
  __int128 v6;
  _QWORD v7[2];

  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  v7[1] = a1;
  return mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v6);
}

uint64_t mlir::ArrayAttr::getValue(mlir::ArrayAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8);
}

uint64_t mlir::DenseArrayAttr::get(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v11 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v12[1] = Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v18[1] = v12;
  v15 = v11;
  v16 = a2;
  v17[0] = a3;
  v17[1] = a4;
  v9 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v15, &v16, (uint64_t)v17);
  v13[0] = &v15;
  v13[1] = v18;
  v14 = &v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::DenseArrayAttr::getRawData(mlir::DenseArrayAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24);
}

uint64_t mlir::DenseStringElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  BOOL v8;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];

  v10[0] = a1;
  v10[1] = a2;
  v9[0] = a3;
  v9[1] = a4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v10);
  v8 = a4 == 1;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v10, (uint64_t)v9, (unsigned __int8 *)&v8);
}

__n128 mlir::DenseResourceElementsAttr::getRawHandle@<Q0>(mlir::DenseResourceElementsAttr *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)this;
  result = *(__n128 *)(*(_QWORD *)this + 24);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(v2 + 40);
  return result;
}

uint64_t mlir::FloatAttr::get(uint64_t a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  llvm::APFloatBase *AttributeUniquer;
  uint64_t v6;
  _QWORD v7[2];

  v6 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v7[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, &v6, a2);
}

llvm::APFloatBase *mlir::FloatAttr::get(uint64_t a1, double a2)
{
  mlir::MLIRContext *v3;
  llvm::APFloatBase *v4;
  void *v5;
  llvm::APFloatBase *v6;
  llvm::APFloatBase *v7;
  void *v8;
  void *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  llvm::APFloatBase *v22;
  void *v23;
  void *FloatSemantics;
  mlir::MLIRContext *Context;
  llvm::APFloatBase *AttributeUniquer;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  mlir::MLIRContext *v31;
  _BYTE v32[8];
  _QWORD v33[4];

  v33[3] = *MEMORY[0x24BDAC8D0];
  v29 = (void *)a1;
  if (!mlir::Type::isF64((mlir::Type *)&v29))
  {
    v10 = *(void **)(*(_QWORD *)v29 + 136);
    v11 = v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    v12 = v11 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    v13 = v12 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    v14 = v13 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    v15 = v14 || v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    v16 = v15 || v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    v17 = v16 || v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    v18 = v17 || v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    v19 = v18 || v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    v20 = v19 || v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    if (v20 || v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v28 = 0;
      v22 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v30, a2);
      v23 = llvm::APFloatBase::IEEEdouble(v22);
      llvm::APFloat::Storage::Storage(v33, &v30, v23);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
      v30 = v29;
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v30);
      llvm::APFloat::convert((uint64_t)v32, FloatSemantics, 1, &v28);
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
      AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
      v30 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      v31 = Context;
      v7 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)&v30, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v29, (uint64_t)v32);
      v27 = (void *)v33[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v7) != v27)
        goto LABEL_3;
LABEL_41:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
      return v7;
    }
  }
  v3 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
  v4 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v30, a2);
  v5 = llvm::APFloatBase::IEEEdouble(v4);
  llvm::APFloat::Storage::Storage(v33, &v30, v5);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
  v6 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v3);
  v30 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v31 = v3;
  v7 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(v6, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeENS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)&v30, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v29, (uint64_t)v32);
  v8 = (void *)v33[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v7) == v8)
    goto LABEL_41;
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
  return v7;
}

_QWORD *mlir::FloatAttr::getValue@<X0>(mlir::FloatAttr *this@<X0>, uint64_t a2@<X8>)
{
  llvm::detail::IEEEFloat *v2;
  const llvm::detail::DoubleAPFloat *v3;
  void *v4;

  v2 = (llvm::detail::IEEEFloat *)(a2 + 8);
  v3 = (const llvm::detail::DoubleAPFloat *)(*(_QWORD *)this + 24);
  v4 = *(void **)v3;
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v4)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v2, v3);
  else
    return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v2, v3);
}

uint64_t mlir::IntegerAttr::get(uint64_t a1, llvm::APInt *a2)
{
  _BOOL4 isSignlessInteger;
  mlir::MLIRContext *Context;
  mlir::BoolAttr *v5;
  unsigned int v6;
  BOOL v7;
  int v9;
  uint64_t v10;

  v10 = a1;
  isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)&v10, 1);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  v5 = Context;
  if (!isSignlessInteger)
    return mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v10, (uint64_t)a2);
  v6 = *((_DWORD *)a2 + 2);
  if (v6 > 0x40)
    v7 = llvm::APInt::countLeadingZerosSlowCase(a2) == v6;
  else
    v7 = *(_QWORD *)a2 == 0;
  v9 = v7;
  return mlir::BoolAttr::get(v5, (mlir::MLIRContext *)(v9 ^ 1u));
}

uint64_t mlir::IntegerAttr::get(uint64_t a1, uint64_t a2)
{
  unsigned int Width;
  _BOOL4 isSignedInteger;
  unint64_t v5;
  mlir::MLIRContext *Context;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v12 = a1;
  if (mlir::Type::isIndex((mlir::Type *)&v12))
  {
    v11 = 64;
    v10 = a2;
  }
  else
  {
    v9 = v12;
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v9);
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v9);
    v11 = Width;
    if (Width > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v10, a2, isSignedInteger);
    }
    else
    {
      v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)Width;
      if (!Width)
        v5 = 0;
      v10 = v5 & a2;
    }
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt &>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v12, (uint64_t)&v10);
  if (v11 >= 0x41 && v10)
    MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  return v7;
}

void *mlir::IntegerAttr::getValue@<X0>(void *this@<X0>, llvm::APInt *a2@<X8>)
{
  const void **v2;
  unsigned int v3;

  v2 = (const void **)(*(_QWORD *)this + 16);
  v3 = *(_DWORD *)(*(_QWORD *)this + 24);
  *((_DWORD *)a2 + 2) = v3;
  if (v3 > 0x40)
    return llvm::APInt::initSlowCase(a2, v2);
  *(_QWORD *)a2 = *v2;
  return this;
}

uint64_t mlir::IntegerSetAttr::get(unint64_t a1)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext((mlir::IntegerSet *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  v5[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, &v4);
}

uint64_t mlir::OpaqueAttr::getChecked(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5, uint64_t a6)
{
  mlir::MLIRContext *Context;
  uint64_t v12;
  unsigned __int8 **AttributeUniquer;
  unsigned int v14;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t *v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[2];

  v16 = a3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v12 = v16;
  if (!mlir::OpaqueAttr::verify(a1, a2, v16, a4, a5, a6))
    return 0;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v17[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  v17[1] = Context;
  v23[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v23[1] = v17;
  v20 = v12;
  v21[0] = a4;
  v21[1] = a5;
  v22 = a6;
  v14 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(&v20, (uint64_t)v21, &v22);
  v18[0] = &v20;
  v18[1] = v23;
  v19 = &v20;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v19, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v18);
}

uint64_t mlir::OpaqueAttr::getAttrData(mlir::OpaqueAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t mlir::SparseElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  __int128 v10;
  _QWORD v11[2];
  _QWORD v12[2];
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  *(_QWORD *)&v10 = a1;
  *((_QWORD *)&v10 + 1) = a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v11[1] = Context;
  v17[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v17[1] = v11;
  v14 = v10;
  v15 = a3;
  v16 = a4;
  v8 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(&v14, &v15, &v16);
  v12[0] = &v14;
  v12[1] = v17;
  v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::SparseElementsAttr::getChecked(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::MLIRContext *Context;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **AttributeUniquer;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v16 = a3;
  v17 = a4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = v16;
  v12 = v17;
  if (!mlir::SparseElementsAttr::verify(a1, a2, v16, v17, a5, a6))
    return 0;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v18[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v18[1] = Context;
  v24[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeERNS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v24[1] = v18;
  v21[0] = v11;
  v21[1] = v12;
  v22 = a5;
  v23 = a6;
  v14 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(v21, &v22, &v23);
  v19[0] = v21;
  v19[1] = v24;
  v20 = v21;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v20, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v19);
}

uint64_t mlir::SparseElementsAttr::getValues(mlir::SparseElementsAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 32);
}

uint64_t mlir::StridedLayoutAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  v11[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v16[1] = v11;
  v14 = a2;
  v15[0] = a3;
  v15[1] = a4;
  v9 = llvm::hash_combine<long long,llvm::ArrayRef<long long>>(&v14, (uint64_t)v15);
  v12[0] = &v14;
  v12[1] = v16;
  v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::SymbolRefAttr::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];

  v9 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v15[1] = v10;
  v13 = v9;
  v14[0] = a2;
  v14[1] = a3;
  v7 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v13, (uint64_t)v14);
  v11[0] = &v13;
  v11[1] = v15;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::TypeAttr::get(uint64_t a1)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  v5[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, &v4);
}

uint64_t *mlir::BuiltinDialect::registerAttributes(mlir::BuiltinDialect *this)
{
  mlir::Dialect::addAttributes<mlir::AffineMapAttr,mlir::ArrayAttr,mlir::DenseArrayAttr,mlir::DenseIntOrFPElementsAttr,mlir::DenseStringElementsAttr,mlir::DenseResourceElementsAttr,mlir::DictionaryAttr,mlir::FloatAttr,mlir::IntegerAttr,mlir::IntegerSetAttr,mlir::OpaqueAttr,mlir::SparseElementsAttr,mlir::StridedLayoutAttr,mlir::StringAttr,mlir::SymbolRefAttr,mlir::TypeAttr,mlir::UnitAttr>((uint64_t)this);
  return mlir::Dialect::addAttribute<mlir::DistinctAttr>((uint64_t)this);
}

_QWORD *mlir::Dialect::addAttributes<mlir::AffineMapAttr,mlir::ArrayAttr,mlir::DenseArrayAttr,mlir::DenseIntOrFPElementsAttr,mlir::DenseStringElementsAttr,mlir::DenseResourceElementsAttr,mlir::DictionaryAttr,mlir::FloatAttr,mlir::IntegerAttr,mlir::IntegerSetAttr,mlir::OpaqueAttr,mlir::SparseElementsAttr,mlir::StridedLayoutAttr,mlir::StringAttr,mlir::SymbolRefAttr,mlir::TypeAttr,mlir::UnitAttr>(uint64_t a1)
{
  mlir::Dialect::addAttribute<mlir::AffineMapAttr>(a1);
  mlir::Dialect::addAttribute<mlir::ArrayAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseArrayAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseIntOrFPElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseStringElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseResourceElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DictionaryAttr>(a1);
  mlir::Dialect::addAttribute<mlir::FloatAttr>(a1);
  mlir::Dialect::addAttribute<mlir::IntegerAttr>(a1);
  mlir::Dialect::addAttribute<mlir::IntegerSetAttr>(a1);
  mlir::Dialect::addAttribute<mlir::OpaqueAttr>(a1);
  mlir::Dialect::addAttribute<mlir::SparseElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::StridedLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::StringAttr>(a1);
  mlir::Dialect::addAttribute<mlir::SymbolRefAttr>(a1);
  mlir::Dialect::addAttribute<mlir::TypeAttr>(a1);
  return mlir::Dialect::addAttribute<mlir::UnitAttr>(a1);
}

uint64_t dictionaryAttrSort<false>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t result;
  __int128 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  size_t v14;
  int v15;
  size_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a1;
  if (a2 == 2)
  {
    v6 = (__int128 *)(a1 + 2);
    v7 = mlir::NamedAttribute::operator<(a1, a1 + 2);
    if (v7)
    {
      v17 = *(_OWORD *)v4;
      v19 = *v6;
      *(_DWORD *)(a3 + 8) = 0;
      if (*(_DWORD *)(a3 + 12) > 1u)
      {
LABEL_7:
        v8 = 0;
LABEL_14:
        v13 = (_OWORD *)(*(_QWORD *)a3 + 16 * v8);
        *v13 = v17;
        v13[1] = v19;
        *(_DWORD *)(a3 + 8) += 2;
        return v7 ^ 1u;
      }
    }
    else
    {
      v17 = *v6;
      v19 = *(_OWORD *)v4;
      *(_DWORD *)(a3 + 8) = 0;
      if (*(_DWORD *)(a3 + 12) > 1u)
        goto LABEL_7;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 2uLL, 16);
    v8 = *(unsigned int *)(a3 + 8);
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    v18 = *(_OWORD *)a1;
    *(_DWORD *)(a3 + 8) = 0;
    if (*(_DWORD *)(a3 + 12))
    {
      v9 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 1uLL, 16);
      v9 = *(unsigned int *)(a3 + 8);
    }
    result = 0;
    *(_OWORD *)(*(_QWORD *)a3 + 16 * v9) = v18;
    ++*(_DWORD *)(a3 + 8);
  }
  else if (a2)
  {
    v10 = 16 * a2;
    *(_DWORD *)(a3 + 8) = 0;
    v11 = (16 * a2) >> 4;
    if (v11 <= *(unsigned int *)(a3 + 12))
    {
      v12 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11, 16);
      v12 = *(unsigned int *)(a3 + 8);
    }
    memcpy((void *)(*(_QWORD *)a3 + 16 * v12), v4, v10);
    *(_DWORD *)(a3 + 8) += v10 >> 4;
    v14 = v10 - 16;
    do
    {
      if (!v14)
        return 0;
      v15 = mlir::NamedAttribute::operator<(v4 + 2, v4);
      v14 -= 16;
      v4 += 2;
    }
    while (!v15);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 >= 2)
      qsort(*(void **)a3, v16, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
    return 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t mlir::DictionaryAttr::sortInPlace(uint64_t **a1)
{
  uint64_t v1;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t i;
  uint64_t *v9;
  int v10;
  size_t v11;

  v1 = *((unsigned int *)a1 + 2);
  if (v1 < 2)
    return 0;
  v4 = *a1;
  if ((_DWORD)v1 != 2)
  {
    for (i = 16 * v1 - 16; i; i -= 16)
    {
      v9 = v4 + 2;
      v10 = mlir::NamedAttribute::operator<(v4 + 2, v4);
      v4 = v9;
      if (v10)
      {
        v11 = *((unsigned int *)a1 + 2);
        if (v11 >= 2)
          qsort(*a1, v11, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
        return 1;
      }
    }
    return 0;
  }
  v5 = mlir::NamedAttribute::operator<(*a1, v4 + 2);
  if ((v5 & 1) == 0)
  {
    v6 = *a1;
    v7 = *(_OWORD *)*a1;
    *(_OWORD *)v6 = *((_OWORD *)*a1 + 1);
    *((_OWORD *)v6 + 1) = v7;
  }
  return v5 ^ 1u;
}

void mlir::DictionaryAttr::findDuplicate(uint64_t **a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t NumNeededNEs;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  size_t v19;
  __int128 v20;
  __int128 v21;

  if ((a2 & 1) == 0)
  {
    v5 = *((unsigned int *)a1 + 2);
    if (v5 >= 2)
    {
      v10 = *a1;
      if ((_DWORD)v5 == 2)
      {
        if ((mlir::NamedAttribute::operator<(*a1, v10 + 2) & 1) == 0)
        {
          v11 = *a1;
          v12 = *(_OWORD *)*a1;
          *(_OWORD *)v11 = *((_OWORD *)*a1 + 1);
          *((_OWORD *)v11 + 1) = v12;
        }
      }
      else
      {
        v16 = 16 * v5 - 16;
        while (v16)
        {
          v17 = v10 + 2;
          v18 = mlir::NamedAttribute::operator<(v10 + 2, v10);
          v16 -= 16;
          v10 = v17;
          if (v18)
          {
            v19 = *((unsigned int *)a1 + 2);
            if (v19 >= 2)
              qsort(*a1, v19, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
            break;
          }
        }
      }
    }
  }
  v6 = *((unsigned int *)a1 + 2);
  if (v6 <= 1)
    goto LABEL_17;
  v7 = *a1;
  if ((_DWORD)v6 != 2)
  {
    v13 = 16 * v6 + 16;
    while (v13 != 32)
    {
      v14 = v7 + 2;
      v21 = *(_OWORD *)v7;
      v20 = *((_OWORD *)v7 + 1);
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v21);
      v13 -= 16;
      v7 += 2;
      if (NumNeededNEs == MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v20))
      {
        if (!v13)
          goto LABEL_17;
        v9 = *((_OWORD *)v14 - 1);
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v8 = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v7);
  if (v8 != MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)(v7 + 2)))
  {
LABEL_17:
    *a3 = 0;
    a3[16] = 0;
    return;
  }
  v9 = *(_OWORD *)v7;
LABEL_16:
  *(_OWORD *)a3 = v9;
  a3[16] = 1;
}

uint64_t mlir::DictionaryAttr::get(mlir::DictionaryAttr *this, mlir::MLIRContext *a2, uint64_t a3)
{
  unsigned __int8 **AttributeUniquer;
  uint64_t v5;
  __int128 v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  if (!a3)
    return mlir::DictionaryAttr::getEmpty(this, a2);
  v9 = v11;
  v10 = 0x800000000;
  if (dictionaryAttrSort<false>((uint64_t *)a2, a3, (uint64_t)&v9))
  {
    *(_QWORD *)&v7 = v9;
    *((_QWORD *)&v7 + 1) = v10;
  }
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  v8[1] = this;
  v5 = mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v7);
  if (v9 != v11)
    free(v9);
  return v5;
}

uint64_t mlir::DictionaryAttr::getWithSorted(mlir::DictionaryAttr *this, mlir::MLIRContext *a2, uint64_t a3)
{
  unsigned __int8 **AttributeUniquer;
  __int128 v6;
  _QWORD v7[2];

  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  if (!a3)
    return mlir::DictionaryAttr::getEmpty(this, a2);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  v7[1] = this;
  return mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v6);
}

uint64_t mlir::DictionaryAttr::get(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t NumNeededNEs;
  size_t v9;
  size_t v10;
  int v11;

  if (16 * *(_QWORD *)(*(_QWORD *)a1 + 16) < 1)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16) & 0xFFFFFFFFFFFFFFFLL;
  while (1)
  {
    v7 = v6 >> 1;
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)(v5 + 16 * (v6 >> 1)));
    v9 = *(_QWORD *)(NumNeededNEs + 24);
    if (a3 >= v9)
      v10 = *(_QWORD *)(NumNeededNEs + 24);
    else
      v10 = a3;
    if (v10)
    {
      v11 = memcmp(*(const void **)(NumNeededNEs + 16), a2, v10);
      if (v11)
      {
        if ((v11 & 0x80000000) == 0)
          goto LABEL_4;
        goto LABEL_3;
      }
    }
    if (v9 == a3)
      return *(_QWORD *)(v5 + 16 * v7 + 8);
    if (v9 >= a3)
      goto LABEL_4;
LABEL_3:
    v5 += 16 * (v6 >> 1) + 16;
    v7 = v6 + ~v7;
LABEL_4:
    v6 = v7;
    if (v7 <= 0)
      return 0;
  }
}

uint64_t mlir::DictionaryAttr::end(mlir::DictionaryAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8) + 16 * *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t mlir::DictionaryAttr::get(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  MirInfoChannelAssignment *i;
  uint64_t NumNeededNEs;
  unint64_t v12;
  size_t v13;
  int v14;

  v4 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v5 = 16 * v3;
  if (16 * v3 >= 257)
  {
    v6 = *(const void **)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = v3 & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      v9 = v8 >> 1;
      i = (MirInfoChannelAssignment *)&v4[2 * (v8 >> 1)];
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(i);
      v12 = *(_QWORD *)(NumNeededNEs + 24);
      v13 = v7 >= v12 ? *(_QWORD *)(NumNeededNEs + 24) : v7;
      if (v13)
      {
        v14 = memcmp(*(const void **)(NumNeededNEs + 16), v6, v13);
        if (v14)
          break;
      }
      if (v12 == v7)
        return *((_QWORD *)i + 1);
      if (v12 < v7)
        goto LABEL_3;
LABEL_4:
      v8 = v9;
      if (v9 <= 0)
        return 0;
    }
    if ((v14 & 0x80000000) == 0)
      goto LABEL_4;
LABEL_3:
    v4 = (_QWORD *)((char *)i + 16);
    v9 = v8 + ~v9;
    goto LABEL_4;
  }
  if (!v3)
    return 0;
  for (i = *(MirInfoChannelAssignment **)(*(_QWORD *)a1 + 8);
        MirInfoChannelAssignment::GetNumNeededNEs(i) != a2;
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    v5 -= 16;
    if (!v5)
      return 0;
  }
  return *((_QWORD *)i + 1);
}

uint64_t mlir::DictionaryAttr::contains(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t NumNeededNEs;
  size_t v9;
  size_t v10;
  int v11;

  if (16 * *(_QWORD *)(*(_QWORD *)a1 + 16) < 1)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16) & 0xFFFFFFFFFFFFFFFLL;
  while (1)
  {
    v7 = v6 >> 1;
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)(v5 + 16 * (v6 >> 1)));
    v9 = *(_QWORD *)(NumNeededNEs + 24);
    if (a3 >= v9)
      v10 = *(_QWORD *)(NumNeededNEs + 24);
    else
      v10 = a3;
    if (v10)
    {
      v11 = memcmp(*(const void **)(NumNeededNEs + 16), a2, v10);
      if (v11)
      {
        if ((v11 & 0x80000000) == 0)
          goto LABEL_4;
        goto LABEL_3;
      }
    }
    if (v9 == a3)
      return 1;
    if (v9 >= a3)
      goto LABEL_4;
LABEL_3:
    v5 += 16 * (v6 >> 1) + 16;
    v7 = v6 + ~v7;
LABEL_4:
    v6 = v7;
    if (v7 <= 0)
      return 0;
  }
}

uint64_t mlir::DictionaryAttr::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  MirInfoChannelAssignment *v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t NumNeededNEs;
  unint64_t v10;
  size_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16;

  v4 = *(MirInfoChannelAssignment **)(*(_QWORD *)a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (16 * v3 >= 257)
  {
    v5 = *(const void **)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = v3 & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      v8 = v7 >> 1;
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)v4 + 16 * (v7 >> 1)));
      v10 = *(_QWORD *)(NumNeededNEs + 24);
      v11 = v6 >= v10 ? *(_QWORD *)(NumNeededNEs + 24) : v6;
      if (v11)
      {
        v12 = memcmp(*(const void **)(NumNeededNEs + 16), v5, v11);
        if (v12)
          break;
      }
      if (v10 == v6)
        return 1;
      if (v10 < v6)
        goto LABEL_3;
LABEL_4:
      v7 = v8;
      if (v8 <= 0)
        return 0;
    }
    if ((v12 & 0x80000000) == 0)
      goto LABEL_4;
LABEL_3:
    v4 = (MirInfoChannelAssignment *)((char *)v4 + 16 * (v7 >> 1) + 16);
    v8 = v7 + ~v8;
    goto LABEL_4;
  }
  if (!v3)
    return 0;
  v13 = 16 * v3 - 16;
  do
  {
    v14 = MirInfoChannelAssignment::GetNumNeededNEs(v4) == a2;
    result = v14;
    if (v14)
      break;
    v16 = v13;
    v13 -= 16;
    v4 = (MirInfoChannelAssignment *)((char *)v4 + 16);
  }
  while (v16);
  return result;
}

uint64_t mlir::DictionaryAttr::getEmptyUnchecked(mlir::DictionaryAttr *this, mlir::MLIRContext *a2)
{
  unsigned __int8 **AttributeUniquer;
  __int128 v5;
  _QWORD v6[2];

  v5 = 0uLL;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  v6[1] = this;
  return mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v5);
}

llvm::raw_ostream *mlir::StridedLayoutAttr::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t *v13;
  uint64_t i;
  _WORD *v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 8)
  {
    *(_BYTE *)(v4 + 8) = 91;
    *(_QWORD *)v4 = *(_QWORD *)"strided<[";
    *((_QWORD *)a2 + 4) += 9;
    v5 = *(_QWORD *)this;
    v6 = *(_QWORD *)(*(_QWORD *)this + 24);
    if (!v6)
      goto LABEL_12;
    goto LABEL_5;
  }
  this = llvm::raw_ostream::write(a2, "strided<[", 9uLL);
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v6)
  {
LABEL_5:
    v7 = *(unint64_t **)(v5 + 16);
    if (*v7 == 0x8000000000000000)
    {
      v8 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v8)
      {
        this = llvm::raw_ostream::write(a2, "?", 1uLL);
        if (v6 == 1)
          goto LABEL_12;
      }
      else
      {
        *v8 = 63;
        ++*((_QWORD *)a2 + 4);
        if (v6 == 1)
          goto LABEL_12;
      }
    }
    else
    {
      this = llvm::raw_ostream::operator<<(a2, *v7);
      if (v6 == 1)
        goto LABEL_12;
    }
    v13 = v7 + 1;
    for (i = 8 * v6 - 8; i; i -= 8)
    {
      v15 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 1uLL)
      {
        *v15 = 8236;
        *((_QWORD *)a2 + 4) += 2;
        v16 = *v13;
        if (*v13 == 0x8000000000000000)
        {
LABEL_27:
          v17 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v17)
          {
            this = llvm::raw_ostream::write(a2, "?", 1uLL);
          }
          else
          {
            *v17 = 63;
            ++*((_QWORD *)a2 + 4);
          }
          goto LABEL_22;
        }
      }
      else
      {
        this = llvm::raw_ostream::write(a2, ", ", 2uLL);
        v16 = *v13;
        if (*v13 == 0x8000000000000000)
          goto LABEL_27;
      }
      this = llvm::raw_ostream::operator<<(a2, v16);
LABEL_22:
      ++v13;
    }
  }
LABEL_12:
  v9 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v9)
  {
    this = llvm::raw_ostream::write(a2, "]", 1uLL);
    if (!*(_QWORD *)(*(_QWORD *)v3 + 8))
      goto LABEL_33;
  }
  else
  {
    *v9 = 93;
    ++*((_QWORD *)a2 + 4);
    if (!*(_QWORD *)(*(_QWORD *)v3 + 8))
    {
LABEL_33:
      v12 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) != v12)
        goto LABEL_34;
      return llvm::raw_ostream::write(a2, ">", 1uLL);
    }
  }
  v10 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) <= 9)
  {
    this = llvm::raw_ostream::write(a2, ", offset: ", 0xAuLL);
    v11 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if (v11 != 0x8000000000000000)
      goto LABEL_18;
LABEL_31:
    v18 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v18)
    {
      this = llvm::raw_ostream::write(a2, "?", 1uLL);
      v12 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) != v12)
        goto LABEL_34;
      return llvm::raw_ostream::write(a2, ">", 1uLL);
    }
    *v18 = 63;
    ++*((_QWORD *)a2 + 4);
    goto LABEL_33;
  }
  *(_WORD *)(v10 + 8) = 8250;
  *(_QWORD *)v10 = *(_QWORD *)", offset: ";
  *((_QWORD *)a2 + 4) += 10;
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  if (v11 == 0x8000000000000000)
    goto LABEL_31;
LABEL_18:
  this = llvm::raw_ostream::operator<<(a2, v11);
  v12 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) != v12)
  {
LABEL_34:
    *v12 = 62;
    ++*((_QWORD *)a2 + 4);
    return this;
  }
  return llvm::raw_ostream::write(a2, ">", 1uLL);
}

uint64_t mlir::makeStridedLinearLayoutMap(uint64_t a1, uint64_t a2, mlir *this, mlir::MLIRContext *a4)
{
  mlir::MLIRContext *AffineSymbolExpr;
  uint64_t v8;
  mlir *v9;
  uint64_t v10;
  uint64_t AffineConstantExpr;
  uint64_t v12;
  uint64_t v13;
  mlir *v14;
  mlir::MLIRContext *v15;
  uint64_t AffineDimExpr;
  uint64_t v18;

  if (this == (mlir *)0x8000000000000000)
  {
    AffineSymbolExpr = (mlir::MLIRContext *)mlir::getAffineSymbolExpr(0, a4, (mlir::MLIRContext *)0x8000000000000000);
    v8 = 1;
    v18 = (uint64_t)AffineSymbolExpr;
    if (!a2)
      return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
  }
  else
  {
    AffineSymbolExpr = (mlir::MLIRContext *)mlir::getAffineConstantExpr(this, a4, this);
    v8 = 0;
    v18 = (uint64_t)AffineSymbolExpr;
    if (!a2)
      return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
  }
  v9 = 0;
  v10 = 8 * a2;
  do
  {
    v14 = *(mlir **)(a1 + 8 * (_QWORD)v9);
    AffineDimExpr = mlir::getAffineDimExpr(v9, a4, AffineSymbolExpr);
    if (v14 == (mlir *)0x8000000000000000)
    {
      AffineConstantExpr = mlir::getAffineSymbolExpr((mlir *)v8, a4, v15);
      v8 = (v8 + 1);
    }
    else
    {
      AffineConstantExpr = mlir::getAffineConstantExpr(v14, a4, v15);
    }
    v12 = mlir::AffineExpr::operator*((unint64_t *)&AffineDimExpr, AffineConstantExpr);
    v13 = mlir::AffineExpr::operator+((unint64_t *)&v18, v12);
    v18 = v13;
    v9 = (mlir *)((char *)v9 + 1);
    v10 -= 8;
  }
  while (v10);
  AffineSymbolExpr = (mlir::MLIRContext *)v13;
  return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
}

uint64_t mlir::StridedLayoutAttr::verify(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  int64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  _QWORD v26[3];
  void *v27;
  unsigned int v28;
  unsigned int v29;
  _BYTE v30[96];
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD *v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    return 1;
  v5 = 8 * a5;
  v6 = a4;
  while (*v6)
  {
    ++v6;
    v5 -= 8;
    if (!v5)
    {
      v6 = &a4[a5];
      break;
    }
  }
  if (a5 == v6 - a4)
    return 1;
  a1(v26, a2);
  if (v26[0])
  {
    v23 = 3;
    v24 = "strides must not be zero";
    v25 = 24;
    v8 = &v23;
    v9 = (char *)v27;
    if (v28 >= v29)
    {
      v21 = v28 + 1;
      if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
      {
        v22 = (char *)&v23 - (_BYTE *)v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v21, 24);
        v9 = (char *)v27;
        v8 = (int *)((char *)v27 + v22);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v21, 24);
        v8 = &v23;
        v9 = (char *)v27;
      }
    }
    v10 = &v9[24 * v28];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v10 = v11;
    ++v28;
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  if (v35)
  {
    v12 = __p;
    if (__p)
    {
      v13 = v34;
      v14 = __p;
      if (v34 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v34 = v12;
      operator delete(v14);
    }
    v15 = v31;
    if (v31)
    {
      v16 = v32;
      v17 = v31;
      if (v32 != v31)
      {
        do
        {
          v19 = *--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            MEMORY[0x20BD002D4](v18, 0x1000C8077774924);
        }
        while (v16 != v15);
        v17 = v31;
      }
      v32 = v15;
      operator delete(v17);
    }
    if (v27 != v30)
      free(v27);
  }
  return v7;
}

uint64_t mlir::StridedLayoutAttr::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a3 == *(_QWORD *)(*(_QWORD *)a1 + 24))
    return 1;
  a4(v24, a5);
  if (v24[0])
  {
    v21 = 3;
    v22 = "expected the number of strides to match the rank";
    v23 = 48;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
  }
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return v5;
}

uint64_t mlir::StringAttr::getEmptyStringAttrUnchecked(mlir::StringAttr *this, mlir::MLIRContext *a2)
{
  uint64_t v3;
  unsigned __int8 **AttributeUniquer;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD v13[2];

  v3 = mlir::NoneType::get(this, a2);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v9[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v9[1] = this;
  v13[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJRA1_KcNS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v13[1] = v9;
  v12[0] = &byte_207AF6795;
  v12[1] = 0;
  v12[2] = v3;
  v5 = ~((unint64_t)((v3 >> 4) ^ (v3 >> 9)) << 32)
     + ((v3 >> 4) ^ (v3 >> 9))
     + (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(&byte_207AF6795, 0) << 32);
  v6 = 9 * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v10[0] = v12;
  v10[1] = v13;
  v11 = v12;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v7 >> 31) ^ v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v10);
}

uint64_t mlir::StringAttr::get(mlir::StringAttr *this, mlir::MLIRContext *a2)
{
  unsigned int v3;
  _QWORD *v5;
  size_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 **AttributeUniquer;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD v18[2];
  void *v19;
  __int128 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned __int8 *)a2 + 32);
  if (v3 <= 1)
    return mlir::StringAttr::get(this, a2);
  v19 = v21;
  v20 = xmmword_207AB5560;
  if (*((_BYTE *)a2 + 33) != 1)
    goto LABEL_9;
  if (v3 - 5 < 2)
  {
    v5 = *(_QWORD **)a2;
    v6 = *((_QWORD *)a2 + 1);
    goto LABEL_18;
  }
  if (v3 == 4)
  {
    v7 = *(char *)(*(_QWORD *)a2 + 23);
    if (v7 >= 0)
      v5 = *(_QWORD **)a2;
    else
      v5 = **(_QWORD ***)a2;
    if (v7 >= 0)
      v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
    else
      v6 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    goto LABEL_18;
  }
  if (v3 == 3)
  {
    v5 = *(_QWORD **)a2;
    if (*(_QWORD *)a2)
      v6 = strlen(*(const char **)a2);
    else
      v6 = 0;
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v19);
    v5 = v19;
    v6 = v20;
  }
LABEL_18:
  v8 = mlir::NoneType::get(this, a2);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v14[1] = this;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefENS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v18[1] = v14;
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v8;
  v10 = ~((unint64_t)((v8 >> 4) ^ (v8 >> 9)) << 32)
      + ((v8 >> 4) ^ (v8 >> 9))
      + (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v5, v6) << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v15[0] = v17;
  v15[1] = v18;
  v16 = v17;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v12 >> 31) ^ v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
  if (v19 != v21)
    free(v19);
  return ParametricStorageTypeImpl;
}

{
  return *(_QWORD *)(*(_QWORD *)this + 584);
}

uint64_t mlir::StringAttr::get(char **a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  size_t v4;
  char *v5;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ParametricStorageTypeImpl;
  int v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD v19[2];
  void *v20;
  __int128 v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v20 = v22;
  v21 = xmmword_207AB5560;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  if (*((_BYTE *)a1 + 33) == 1)
  {
    v4 = 0;
    v5 = 0;
    switch(*((_BYTE *)a1 + 32))
    {
      case 1:
        break;
      case 3:
        v5 = *a1;
        if (*a1)
          v4 = strlen(*a1);
        else
          v4 = 0;
        break;
      case 4:
        v13 = (*a1)[23];
        if (v13 >= 0)
          v5 = *a1;
        else
          v5 = *(char **)*a1;
        if (v13 >= 0)
          v4 = (*a1)[23];
        else
          v4 = *((_QWORD *)*a1 + 1);
        break;
      case 5:
      case 6:
        v5 = *a1;
        v4 = (size_t)a1[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v20);
    v5 = (char *)v20;
    v4 = v21;
  }
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v15[1] = Context;
  v19[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v19[1] = v15;
  v18[0] = v5;
  v18[1] = v4;
  v7 = v14;
  v18[2] = v14;
  v8 = ((v7 >> 4) ^ (v7 >> 9) | (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v5, v4) << 32))
     + ~((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32);
  v9 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v16[0] = v18;
  v16[1] = v19;
  v17 = v18;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v10 >> 31) ^ v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
  if (v20 != v22)
    free(v20);
  return ParametricStorageTypeImpl;
}

uint64_t mlir::SymbolRefAttr::get(mlir::StringAttr *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];

  v12 = 261;
  v11[0] = a2;
  v11[1] = a3;
  v13 = mlir::StringAttr::get(a1, (mlir::MLIRContext *)v11);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v14[1] = Context;
  v19[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v19[1] = v14;
  v17 = v13;
  v18[0] = a4;
  v18[1] = a5;
  v9 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v17, (uint64_t)v18);
  v15[0] = &v17;
  v15[1] = v19;
  v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

uint64_t mlir::SymbolRefAttr::get(mlir::StringAttr *a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];

  v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  v9 = mlir::StringAttr::get(a1, (mlir::MLIRContext *)v7);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v15[1] = v10;
  v14[0] = 0;
  v14[1] = 0;
  v13 = v9;
  v5 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v13, (uint64_t)v14);
  v11[0] = &v13;
  v11[1] = v15;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::SymbolRefAttr::get(uint64_t a1)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v3;
  uint64_t v5;
  _QWORD v6[2];
  _QWORD v7[2];
  uint64_t *v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v5 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v6[1] = Context;
  v11[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v11[1] = v6;
  v10[0] = 0;
  v10[1] = 0;
  v9 = v5;
  v3 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v9, (uint64_t)v10);
  v7[0] = &v9;
  v7[1] = v11;
  v8 = &v9;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v3, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v8, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v7);
}

uint64_t mlir::SymbolRefAttr::get(mlir::SymbolRefAttr *this, mlir::Operation *a2)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v4;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v6 = mlir::Operation::getAttrOfType<mlir::StringAttr>((uint64_t)this, "sym_name", 8uLL);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v7[1] = Context;
  v12[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v12[1] = v7;
  v11[0] = 0;
  v11[1] = 0;
  v10 = v6;
  v4 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v10, (uint64_t)v11);
  v8[0] = &v10;
  v8[1] = v12;
  v9 = &v10;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v4, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v9, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v8);
}

uint64_t mlir::Operation::getAttrOfType<mlir::StringAttr>(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t NumNeededNEs;
  unint64_t v13;
  size_t v14;
  int v15;

  if (!*(_BYTE *)(a1 + 47) || (result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3), !v7))
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (16 * *(_QWORD *)(v8 + 16) < 1)
      return 0;
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      v11 = v10 >> 1;
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)(v9 + 16 * (v10 >> 1)));
      v13 = *(_QWORD *)(NumNeededNEs + 24);
      v14 = a3 >= v13 ? *(_QWORD *)(NumNeededNEs + 24) : a3;
      if (v14)
      {
        v15 = memcmp(*(const void **)(NumNeededNEs + 16), a2, v14);
        if (v15)
          break;
      }
      if (v13 == a3)
      {
        result = *(_QWORD *)(v9 + 16 * v11 + 8);
        if (!result)
          return result;
        goto LABEL_4;
      }
      if (v13 < a3)
        goto LABEL_9;
LABEL_10:
      v10 = v11;
      if (v11 <= 0)
        return 0;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_9:
    v9 += 16 * (v10 >> 1) + 16;
    v11 = v10 + ~v11;
    goto LABEL_10;
  }
  if (!result)
    return result;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)result + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    return 0;
  return result;
}

uint64_t mlir::SymbolRefAttr::getLeafReference(mlir::SymbolRefAttr *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 24);
  if (v2)
    v1 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2 - 8);
  return *(_QWORD *)(v1 + 8);
}

uint64_t mlir::IntegerAttr::getInt(mlir::IntegerAttr *this)
{
  const void **v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;

  v1 = (const void **)(*(_QWORD *)this + 16);
  v2 = *(_DWORD *)(*(_QWORD *)this + 24);
  v6 = v2;
  if (v2 < 0x41)
    return (uint64_t)((_QWORD)*v1 << -(char)v2) >> -(char)v2;
  llvm::APInt::initSlowCase((llvm::APInt *)&v5, v1);
  LOBYTE(v2) = v6;
  if (v6 <= 0x40)
  {
    v1 = (const void **)&v5;
    return (uint64_t)((_QWORD)*v1 << -(char)v2) >> -(char)v2;
  }
  v4 = *v5;
  MEMORY[0x20BD002D4]();
  return v4;
}

uint64_t *mlir::IntegerAttr::getUInt(mlir::IntegerAttr *this)
{
  const void **v1;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;

  v1 = (const void **)(*(_QWORD *)this + 16);
  v5 = *(_DWORD *)(*(_QWORD *)this + 24);
  if (v5 <= 0x40)
    return (uint64_t *)*v1;
  llvm::APInt::initSlowCase((llvm::APInt *)&v4, v1);
  if (v5 <= 0x40)
    return v4;
  v3 = *v4;
  MEMORY[0x20BD002D4]();
  return (uint64_t *)v3;
}

uint64_t mlir::IntegerAttr::getBoolAttrUnchecked(uint64_t a1, unsigned int a2)
{
  mlir::MLIRContext *Context;
  uint64_t v4;
  unsigned __int8 **AttributeUniquer;
  unsigned int v6;
  uint64_t ParametricStorageTypeImpl;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD v16[2];

  v9 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  v4 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  v10[1] = Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_11IntegerTypeENS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v16[1] = v10;
  v15 = 1;
  v13 = v9;
  v14 = v4;
  v6 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v13, (llvm *)&v14);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
  if (v15 >= 0x41 && v14)
    MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  return ParametricStorageTypeImpl;
}

BOOL mlir::BoolAttr::getValue(mlir::BoolAttr *this)
{
  uint64_t v1;
  llvm::APInt *v2;
  unsigned int v3;

  v1 = *(_QWORD *)this;
  v2 = (llvm::APInt *)(*(_QWORD *)this + 16);
  v3 = *(_DWORD *)(v1 + 24);
  if (v3 > 0x40)
    return llvm::APInt::countLeadingZerosSlowCase(v2) != v3;
  else
    return *(_QWORD *)v2 != 0;
}

BOOL mlir::BoolAttr::classof(_QWORD *a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  if (a1)
  {
    if (*(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v3 = a1[1];
      return mlir::Type::isSignlessInteger((mlir::Type *)&v3, 1);
    }
  }
  return result;
}

uint64_t mlir::OpaqueAttr::verify(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5, uint64_t a6)
{
  mlir::MLIRContext *Context;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  const void ***v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const void ***v29;
  char *v30;
  char *v31;
  __int128 v32;
  const void ***v33;
  char *v34;
  char *v35;
  __int128 v36;
  const void ***v37;
  char *v38;
  char *v39;
  __int128 v40;
  const void ***v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  const void ***v46;
  char *v47;
  char *v48;
  __int128 v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  const void **v73;
  const char *v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  _BYTE v78[16];
  void *v79;
  unsigned int v80;
  unsigned int v81;
  _BYTE v82[96];
  void *v83;
  _QWORD *v84;
  void *__p;
  _QWORD *v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v72 = a3;
  if ((mlir::Dialect::isValidNamespace(*(char **)(a3 + 16), *(_QWORD *)(a3 + 24)) & 1) != 0)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if ((mlir::MLIRContext::allowsUnregisteredDialects(Context) & 1) != 0
      || mlir::MLIRContext::getLoadedDialect((uint64_t *)Context, *(_QWORD *)(v72 + 16), *(_QWORD *)(v72 + 24)))
    {
      return 1;
    }
    a1(&v77, a2);
    if (v77)
    {
      LODWORD(v73) = 3;
      v74 = "#";
      v75 = 1;
      v29 = &v73;
      v30 = (char *)v79;
      if (v80 >= v81)
      {
        v59 = v80 + 1;
        if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
        {
          v67 = (char *)&v73 - (_BYTE *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
          v30 = (char *)v79;
          v29 = (const void ***)((char *)v79 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
          v29 = &v73;
          v30 = (char *)v79;
        }
      }
      v31 = &v30[24 * v80];
      v32 = *(_OWORD *)v29;
      *((_QWORD *)v31 + 2) = v29[2];
      *(_OWORD *)v31 = v32;
      ++v80;
      if (v77)
      {
        mlir::Diagnostic::operator<<((uint64_t)v78, v72);
        if (v77)
        {
          LODWORD(v73) = 3;
          v74 = "<\"";
          v75 = 2;
          v33 = &v73;
          v34 = (char *)v79;
          if (v80 >= v81)
          {
            v60 = v80 + 1;
            if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
            {
              v68 = (char *)&v73 - (_BYTE *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
              v34 = (char *)v79;
              v33 = (const void ***)((char *)v79 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
              v33 = &v73;
              v34 = (char *)v79;
            }
          }
          v35 = &v34[24 * v80];
          v36 = *(_OWORD *)v33;
          *((_QWORD *)v35 + 2) = v33[2];
          *(_OWORD *)v35 = v36;
          ++v80;
          if (v77)
          {
            v76 = 261;
            v73 = a4;
            v74 = a5;
            mlir::Diagnostic::operator<<((uint64_t)v78, &v73);
            if (v77)
            {
              LODWORD(v73) = 3;
              v74 = "\"> : ";
              v75 = 5;
              v37 = &v73;
              v38 = (char *)v79;
              if (v80 >= v81)
              {
                v61 = v80 + 1;
                if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
                {
                  v69 = (char *)&v73 - (_BYTE *)v79;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v61, 24);
                  v38 = (char *)v79;
                  v37 = (const void ***)((char *)v79 + v69);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v61, 24);
                  v37 = &v73;
                  v38 = (char *)v79;
                }
              }
              v39 = &v38[24 * v80];
              v40 = *(_OWORD *)v37;
              *((_QWORD *)v39 + 2) = v37[2];
              *(_OWORD *)v39 = v40;
              ++v80;
              if (v77)
              {
                v41 = &v73;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v73, a6);
                v42 = (char *)v79;
                if (v80 >= v81)
                {
                  v62 = v80 + 1;
                  if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
                  {
                    v70 = (char *)&v73 - (_BYTE *)v79;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                    v42 = (char *)v79;
                    v41 = (const void ***)((char *)v79 + v70);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                    v41 = &v73;
                    v42 = (char *)v79;
                  }
                }
                v43 = &v42[24 * v80];
                v44 = *(_OWORD *)v41;
                *((_QWORD *)v43 + 2) = v41[2];
                *(_OWORD *)v43 = v44;
                v45 = ++v80;
                if (v77)
                {
                  LODWORD(v73) = 3;
                  v74 = " attribute created with unregistered dialect. If this is intended, please call allowUnregistered"
                        "Dialects() on the MLIRContext, or use -allow-unregistered-dialect with the MLIR opt tool used";
                  v75 = 189;
                  v46 = &v73;
                  v47 = (char *)v79;
                  if (v45 >= v81)
                  {
                    v63 = v45 + 1;
                    v64 = (char *)v79 + 24 * v45 > (char *)&v73;
                    if (v79 <= &v73 && v64)
                    {
                      v71 = (char *)&v73 - (_BYTE *)v79;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                      v47 = (char *)v79;
                      v46 = (const void ***)((char *)v79 + v71);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                      v46 = &v73;
                      v47 = (char *)v79;
                    }
                  }
                  v48 = &v47[24 * v80];
                  v49 = *(_OWORD *)v46;
                  *((_QWORD *)v48 + 2) = v46[2];
                  *(_OWORD *)v48 = v49;
                  ++v80;
                }
              }
            }
          }
        }
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v87)
    {
      v50 = __p;
      if (__p)
      {
        v51 = v86;
        v52 = __p;
        if (v86 != __p)
        {
          do
            v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          v52 = __p;
        }
        v86 = v50;
        operator delete(v52);
      }
      v24 = v83;
      if (!v83)
        goto LABEL_54;
      v53 = v84;
      v26 = v83;
      if (v84 == v83)
      {
LABEL_53:
        v84 = v24;
        operator delete(v26);
LABEL_54:
        if (v79 != v82)
          free(v79);
        return v12;
      }
      do
      {
        v55 = *--v53;
        v54 = v55;
        *v53 = 0;
        if (v55)
          MEMORY[0x20BD002D4](v54, 0x1000C8077774924);
      }
      while (v53 != v24);
LABEL_52:
      v26 = v83;
      goto LABEL_53;
    }
  }
  else
  {
    a1(&v77, a2);
    if (v77)
    {
      LODWORD(v73) = 3;
      v74 = "invalid dialect namespace '";
      v75 = 27;
      v13 = &v73;
      v14 = (char *)v79;
      if (v80 >= v81)
      {
        v57 = v80 + 1;
        if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
        {
          v65 = (char *)&v73 - (_BYTE *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v57, 24);
          v14 = (char *)v79;
          v13 = (const void ***)((char *)v79 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v57, 24);
          v13 = &v73;
          v14 = (char *)v79;
        }
      }
      v15 = &v14[24 * v80];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v80;
      if (v77)
      {
        mlir::Diagnostic::operator<<((uint64_t)v78, v72);
        if (v77)
        {
          LODWORD(v73) = 3;
          v74 = "'";
          v75 = 1;
          v17 = &v73;
          v18 = (char *)v79;
          if (v80 >= v81)
          {
            v58 = v80 + 1;
            if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
            {
              v66 = (char *)&v73 - (_BYTE *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
              v18 = (char *)v79;
              v17 = (const void ***)((char *)v79 + v66);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
              v17 = &v73;
              v18 = (char *)v79;
            }
          }
          v19 = &v18[24 * v80];
          v20 = *(_OWORD *)v17;
          *((_QWORD *)v19 + 2) = v17[2];
          *(_OWORD *)v19 = v20;
          ++v80;
        }
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v87)
    {
      v21 = __p;
      if (__p)
      {
        v22 = v86;
        v23 = __p;
        if (v86 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v86 = v21;
        operator delete(v23);
      }
      v24 = v83;
      if (!v83)
        goto LABEL_54;
      v25 = v84;
      v26 = v83;
      if (v84 == v83)
        goto LABEL_53;
      do
      {
        v28 = *--v25;
        v27 = v28;
        *v25 = 0;
        if (v28)
          MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
      }
      while (v25 != v24);
      goto LABEL_52;
    }
  }
  return v12;
}

uint64_t mlir::DenseElementsAttr::AttributeElementIterator::operator*(_QWORD *a1)
{
  uint64_t v2;
  uint64_t OperandRange;
  uint64_t v4;
  void *v5;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *FloatSemantics;
  mlir::MLIRContext *v23;
  llvm::APFloatBase *AttributeUniquer;
  llvm::APFloatBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t DenseElementBitWidth;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _BOOL4 isSignlessInteger;
  mlir::MLIRContext *Context;
  mlir::BoolAttr *v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t Value;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  llvm::APFloatBase *v51;
  void *v52;
  void *v53;
  llvm::detail::DoubleAPFloat *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  mlir::MLIRContext *v58;
  llvm::APFloatBase *v59;
  uint64_t v60;
  mlir::MLIRContext *v61;
  llvm::APFloatBase *v62;
  uint64_t v63;
  mlir::MLIRContext *v64;
  unsigned __int8 **v65;
  _BOOL4 v67;
  mlir::MLIRContext *v68;
  mlir::BoolAttr *v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _BOOL4 v75;
  mlir::MLIRContext *v76;
  mlir::BoolAttr *v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  mlir::MLIRContext *v83;
  unsigned __int8 **v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88[2];
  __int128 v89;
  const void *v90;
  unint64_t v91;
  void *v92;
  _QWORD v93[3];
  _OWORD v94[2];
  void *v95;
  __int128 v96;
  llvm::APFloatBase *v97;
  unsigned int v98;
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v89 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v89);
  v4 = OperandRange;
  v5 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (OperandRange && v5 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v27 = a1[1];
    v28 = *(_QWORD *)(v2 + 32);
    v29 = *(unsigned __int8 *)(v2 + 24);
    v89 = *(_OWORD *)(v2 + 8);
    v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v89);
    DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(v30);
    if (v29)
      v32 = 0;
    else
      v32 = v27;
    v33 = DenseElementBitWidth + 7;
    v34 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
    if (DenseElementBitWidth == 1)
      v34 = 1;
    v35 = v34 * v32;
    if (DenseElementBitWidth == 1)
    {
      v36 = (*(unsigned __int8 *)(v28 + (v35 >> 3)) >> (v35 & 7)) & 1;
      DWORD2(v89) = 1;
      *(_QWORD *)&v89 = v36;
      goto LABEL_57;
    }
    DWORD2(v89) = DenseElementBitWidth;
    if (DenseElementBitWidth > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v89, 0, 0);
      if (DWORD2(v89) >= 0x41)
        v37 = (__int128 *)v89;
      else
        v37 = &v89;
      if (v33 < 8)
      {
LABEL_57:
        *(_QWORD *)&v94[0] = v4;
        isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)v94, 1);
        Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v94);
        v40 = Context;
        if (isSignlessInteger)
        {
          v41 = DWORD2(v89);
          if (DWORD2(v89) > 0x40)
            v42 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v89) == v41;
          else
            v42 = (_QWORD)v89 == 0;
          v44 = v42;
          v43 = mlir::BoolAttr::get(v40, (mlir::MLIRContext *)(v44 ^ 1u));
        }
        else
        {
          v43 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)v94, (uint64_t)&v89);
        }
        v25 = (llvm::APFloatBase *)v43;
LABEL_67:
        if (DWORD2(v89) >= 0x41 && (_QWORD)v89)
          MEMORY[0x20BD002D4](v89, 0x1000C8000313F17);
        return (uint64_t)v25;
      }
    }
    else
    {
      *(_QWORD *)&v89 = 0;
      v37 = &v89;
      if (v33 < 8)
        goto LABEL_57;
    }
    memmove(v37, (const void *)(v28 + (v35 >> 3)), v33 >> 3);
    goto LABEL_57;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    *(_QWORD *)&v99 = OperandRange;
    if (OperandRange)
    {
      v17 = (const void *)a1[1];
      v18 = *(_QWORD *)(v2 + 32);
      v19 = *(unsigned __int8 *)(v2 + 24);
      v89 = *(_OWORD *)(v2 + 8);
      v20 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v89);
      v21 = mlir::detail::getDenseElementBitWidth(v20);
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v99);
      *(_QWORD *)&v89 = v18;
      *((_QWORD *)&v89 + 1) = v19;
      v90 = v17;
      v91 = v21;
      v92 = FloatSemantics;
      llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*((const llvm::APInt **)&v89, (uint64_t)v94);
      *(_QWORD *)&v85 = v4;
      v23 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v85);
      AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v23);
      *(_QWORD *)&v96 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      *((_QWORD *)&v96 + 1) = v23;
      v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v96, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v85, (uint64_t)v94);
      v26 = (void *)*((_QWORD *)&v94[0] + 1);
      if (llvm::APFloatBase::PPCDoubleDouble(v25) != v26)
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)v94 + 8));
        return (uint64_t)v25;
      }
      v54 = (llvm::detail::DoubleAPFloat *)((char *)v94 + 8);
LABEL_84:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v54);
      return (uint64_t)v25;
    }
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v45 = OperandRange;
  else
    v45 = 0;
  v87 = v45;
  if (v45)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v87);
    v47 = a1[1];
    v48 = *(unsigned __int8 *)(v2 + 24);
    *(_QWORD *)&v85 = *(_QWORD *)(v2 + 32);
    *((_QWORD *)&v85 + 1) = v48;
    *(_QWORD *)&v86 = v47;
    v89 = *(_OWORD *)(v2 + 8);
    *(_QWORD *)&v89 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v89);
    v49 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v89);
    *((_QWORD *)&v86 + 1) = mlir::detail::getDenseElementBitWidth(v49);
    if (*(_UNKNOWN **)(*(_QWORD *)Value + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      *(_QWORD *)&v89 = Value;
      v50 = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v89);
      v94[0] = v85;
      v94[1] = v86;
      v95 = v50;
      mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)v94, &v96);
      mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v96, (llvm::APFloatBase *)v94, (uint64_t)&v89);
      if (v98 >= 0x41)
      {
        v51 = v97;
        if (v97)
          v51 = (llvm::APFloatBase *)MEMORY[0x20BD002D4](v97, 0x1000C8000313F17);
      }
      if (DWORD2(v96) >= 0x41)
      {
        v51 = (llvm::APFloatBase *)v96;
        if ((_QWORD)v96)
          v51 = (llvm::APFloatBase *)MEMORY[0x20BD002D4](v96, 0x1000C8000313F17);
      }
      v52 = (void *)*((_QWORD *)&v89 + 1);
      v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
      if (v53 == v52)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v96 + 1, (const llvm::detail::DoubleAPFloat *)((char *)&v89 + 8));
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v96 + 8), (const llvm::detail::IEEEFloat *)((char *)&v89 + 8));
      v88[0] = Value;
      v58 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v88);
      v59 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v58);
      *(_QWORD *)&v99 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      *((_QWORD *)&v99 + 1) = v58;
      v60 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(v59, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v99, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, v88, (uint64_t)&v96);
      if (v53 == *((void **)&v96 + 1))
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v96 + 8));
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v96 + 8));
      if (v53 == (void *)v93[0])
        llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v96 + 1, (const llvm::detail::DoubleAPFloat *)v93);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v96 + 8), (const llvm::detail::IEEEFloat *)v93);
      v88[0] = Value;
      v61 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v88);
      v62 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v61);
      *(_QWORD *)&v99 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      *((_QWORD *)&v99 + 1) = v61;
      v63 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(v62, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v99, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, v88, (uint64_t)&v96);
      if (v53 == *((void **)&v96 + 1))
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v96 + 8));
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v96 + 8));
      v64 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v87);
      v88[0] = v60;
      v88[1] = v63;
      *(_QWORD *)&v99 = v88;
      *((_QWORD *)&v99 + 1) = 2;
      v65 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v64);
      *(_QWORD *)&v96 = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
      *((_QWORD *)&v96 + 1) = v64;
      v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(v65, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)&v96, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v99);
      if (v53 == (void *)v93[0])
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
        v54 = (llvm::detail::DoubleAPFloat *)((char *)&v89 + 8);
        if (v53 == *((void **)&v89 + 1))
          goto LABEL_84;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
        v54 = (llvm::detail::DoubleAPFloat *)((char *)&v89 + 8);
        if (v53 == *((void **)&v89 + 1))
          goto LABEL_84;
      }
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v89 + 8));
      return (uint64_t)v25;
    }
    mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v85, &v89);
    DWORD2(v94[0]) = DWORD2(v89);
    if (DWORD2(v89) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)v94, (const void **)&v89);
    else
      *(_QWORD *)&v94[0] = v89;
    *(_QWORD *)&v96 = Value;
    v67 = mlir::Type::isSignlessInteger((mlir::Type *)&v96, 1);
    v68 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v96);
    v69 = v68;
    if (v67)
    {
      v70 = DWORD2(v94[0]);
      if (DWORD2(v94[0]) > 0x40)
        v71 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v94) == v70;
      else
        v71 = *(_QWORD *)&v94[0] == 0;
      v73 = v71;
      v72 = mlir::BoolAttr::get(v69, (mlir::MLIRContext *)(v73 ^ 1u));
    }
    else
    {
      v72 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(v68, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)&v96, (uint64_t)v94);
    }
    v74 = v72;
    if (DWORD2(v94[0]) >= 0x41 && *(_QWORD *)&v94[0])
      MEMORY[0x20BD002D4](*(_QWORD *)&v94[0], 0x1000C8000313F17);
    DWORD2(v94[0]) = v91;
    if (v91 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)v94, &v90);
    else
      *(_QWORD *)&v94[0] = v90;
    *(_QWORD *)&v96 = Value;
    v75 = mlir::Type::isSignlessInteger((mlir::Type *)&v96, 1);
    v76 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v96);
    v77 = v76;
    if (v75)
    {
      v78 = DWORD2(v94[0]);
      if (DWORD2(v94[0]) > 0x40)
        v79 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v94) == v78;
      else
        v79 = *(_QWORD *)&v94[0] == 0;
      v81 = v79;
      v80 = mlir::BoolAttr::get(v77, (mlir::MLIRContext *)(v81 ^ 1u));
    }
    else
    {
      v80 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(v76, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)&v96, (uint64_t)v94);
    }
    v82 = v80;
    if (DWORD2(v94[0]) >= 0x41 && *(_QWORD *)&v94[0])
      MEMORY[0x20BD002D4](*(_QWORD *)&v94[0], 0x1000C8000313F17);
    v83 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v87);
    *(_QWORD *)&v99 = v74;
    *((_QWORD *)&v99 + 1) = v82;
    *(_QWORD *)&v96 = &v99;
    *((_QWORD *)&v96 + 1) = 2;
    v84 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v83);
    *(_QWORD *)&v94[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
    *((_QWORD *)&v94[0] + 1) = v83;
    v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(v84, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v94, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v96);
    if (v91 >= 0x41 && v90)
      MEMORY[0x20BD002D4](v90, 0x1000C8000313F17);
    goto LABEL_67;
  }
  v55 = *(uint64_t **)(v2 + 32);
  if (!*(_BYTE *)(v2 + 24))
    v55 += 2 * a1[1];
  LOWORD(v92) = 261;
  v57 = *v55;
  v56 = v55[1];
  *(_QWORD *)&v89 = v57;
  *((_QWORD *)&v89 + 1) = v56;
  return mlir::StringAttr::get((char **)&v89, OperandRange);
}

uint64_t mlir::DenseElementsAttr::getElementType(mlir::DenseElementsAttr *this)
{
  __int128 v2;

  v2 = *(_OWORD *)(*(_QWORD *)this + 8);
  return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v2);
}

_QWORD *mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t OperandRange;
  __int128 v7;

  v4 = *(unsigned __int8 *)(a2 + 24);
  *a1 = *(_QWORD *)(a2 + 32);
  a1[1] = v4;
  a1[2] = a3;
  v7 = *(_OWORD *)(a2 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v7);
  a1[3] = mlir::detail::getDenseElementBitWidth(OperandRange);
  return a1;
}

void mlir::DenseElementsAttr::IntElementIterator::operator*(uint64_t *a1@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (*((_BYTE *)a1 + 8))
    v3 = 0;
  else
    v3 = a1[2];
  v4 = *a1;
  v5 = a1[3];
  v6 = v5 + 7;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == 1)
    v7 = 1;
  v8 = v7 * v3;
  if (v5 == 1)
  {
    v9 = (*(unsigned __int8 *)(v4 + (v8 >> 3)) >> (v8 & 7)) & 1;
    *((_DWORD *)a2 + 2) = 1;
    *(_QWORD *)a2 = v9;
    return;
  }
  *((_DWORD *)a2 + 2) = v5;
  if (v5 <= 0x40)
  {
    *(_QWORD *)a2 = 0;
    if (v6 < 8)
      return;
    goto LABEL_10;
  }
  llvm::APInt::initSlowCase(a2, 0, 0);
  if (*((_DWORD *)a2 + 2) >= 0x41u)
    a2 = *(llvm::APInt **)a2;
  if (v6 >= 8)
LABEL_10:
    memmove(a2, (const void *)(v4 + (v8 >> 3)), v6 >> 3);
}

const llvm::APInt *llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*@<X0>(const llvm::APInt **a1@<X0>, uint64_t a2@<X8>)
{
  const llvm::APInt **v2;
  const llvm::APInt *v4;
  const llvm::APInt *v5;
  const llvm::APInt *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const llvm::APInt *v10;
  const llvm::APInt *v11;
  llvm::detail::IEEEFloat *v12;
  const llvm::APInt *result;
  const llvm::APInt **v14;
  unsigned int v15;

  v2 = a1;
  if (*((_BYTE *)a1 + 8))
    v4 = 0;
  else
    v4 = a1[2];
  v5 = *a1;
  v6 = a1[3];
  v7 = (unint64_t)v6 + 7;
  v8 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v6 == (const llvm::APInt *)1)
    v8 = 1;
  v9 = v8 * (_QWORD)v4;
  if (v6 == (const llvm::APInt *)1)
  {
    v10 = (const llvm::APInt *)((*((unsigned __int8 *)v5 + (v9 >> 3)) >> (v9 & 7)) & 1);
    v15 = 1;
    v14 = (const llvm::APInt **)v10;
    goto LABEL_16;
  }
  v15 = a1[3];
  if (v6 <= 0x40)
  {
    v14 = 0;
    a1 = (const llvm::APInt **)&v14;
    if (v7 < 8)
      goto LABEL_16;
LABEL_15:
    a1 = (const llvm::APInt **)memmove(a1, (char *)v5 + (v9 >> 3), v7 >> 3);
    goto LABEL_16;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v14, 0, 0);
  if (v15 >= 0x41)
    a1 = v14;
  else
    a1 = (const llvm::APInt **)&v14;
  if (v7 >= 8)
    goto LABEL_15;
LABEL_16:
  v11 = v2[4];
  v12 = (llvm::detail::IEEEFloat *)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v11)
  {
    result = (const llvm::APInt *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)v11, (uint64_t)&v14);
    if (v15 < 0x41)
      return result;
  }
  else
  {
    result = llvm::detail::IEEEFloat::IEEEFloat(v12, v11, (const llvm::APInt **)&v14);
    if (v15 < 0x41)
      return result;
  }
  result = (const llvm::APInt *)v14;
  if (v14)
    return (const llvm::APInt *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  return result;
}

llvm::APInt *mlir::DenseElementsAttr::ComplexIntElementIterator::operator*@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  unint64_t v16;
  unsigned int v17;
  llvm::APInt *result;
  unsigned int v19;
  unsigned int v20;
  const void **v21;
  unsigned int v22;
  const void **v23;
  unsigned int v24;

  v4 = a1[3];
  v5 = v4 + 7;
  if (v4 == 1)
    v6 = 1;
  else
    v6 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*((_BYTE *)a1 + 8))
  {
    v7 = 0;
    v8 = *a1;
    if (v4 == 1)
    {
LABEL_6:
      v9 = (const void **)((*(unsigned __int8 *)(v8 + (v7 >> 3)) >> (v7 & 6)) & 1);
      v24 = 1;
      v23 = v9;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = 2 * v6 * a1[2];
    v8 = *a1;
    if (v4 == 1)
      goto LABEL_6;
  }
  v24 = a1[3];
  if (v4 <= 0x40)
  {
    v23 = 0;
    v10 = (const void **)&v23;
    if (v5 < 8)
      goto LABEL_16;
LABEL_15:
    memmove(v10, (const void *)(v8 + (v7 >> 3)), v5 >> 3);
    goto LABEL_16;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v23, 0, 0);
  if (v24 >= 0x41)
    v10 = v23;
  else
    v10 = (const void **)&v23;
  if (v5 >= 8)
    goto LABEL_15;
LABEL_16:
  v11 = *a1;
  v12 = v7 + v6;
  v13 = a1[3];
  if (v13 == 1)
  {
    v14 = (const void **)((*(unsigned __int8 *)(v11 + (v12 >> 3)) >> (v12 & 7)) & 1);
    v22 = 1;
    v21 = v14;
    goto LABEL_26;
  }
  v22 = v13;
  if (v13 <= 0x40)
  {
    v21 = 0;
    v15 = (const void **)&v21;
    v16 = v13 + 7;
    if ((unint64_t)(v13 + 7) < 8)
      goto LABEL_26;
LABEL_25:
    memmove(v15, (const void *)(v11 + (v12 >> 3)), v16 >> 3);
    goto LABEL_26;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v21, 0, 0);
  if (v22 >= 0x41)
    v15 = v21;
  else
    v15 = (const void **)&v21;
  v16 = v13 + 7;
  if ((unint64_t)(v13 + 7) >= 8)
    goto LABEL_25;
LABEL_26:
  v17 = v24;
  a2[2] = v24;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a2, (const void **)&v23);
    result = (llvm::APInt *)(a2 + 4);
    v20 = v22;
    a2[6] = v22;
    if (v20 > 0x40)
      goto LABEL_28;
LABEL_32:
    *(_QWORD *)result = v21;
    goto LABEL_33;
  }
  *(_QWORD *)a2 = v23;
  result = (llvm::APInt *)(a2 + 4);
  v19 = v22;
  a2[6] = v22;
  if (v19 <= 0x40)
    goto LABEL_32;
LABEL_28:
  result = (llvm::APInt *)llvm::APInt::initSlowCase(result, (const void **)&v21);
  if (v22 >= 0x41)
  {
    result = (llvm::APInt *)v21;
    if (v21)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v21, 0x1000C8000313F17);
  }
LABEL_33:
  if (v24 >= 0x41)
  {
    result = (llvm::APInt *)v23;
    if (v23)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::DenseElementsAttr::getRawStringData(mlir::DenseElementsAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 32);
}

uint64_t mlir::DenseElementsAttr::isSplat(mlir::DenseElementsAttr *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 24);
}

unint64_t mlir::detail::getDenseElementBitWidth(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v1 = a1;
  else
    v1 = 0;
  v4 = v1;
  if (v1)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v4);
    return (2 * mlir::detail::getDenseElementBitWidth(Value) + 14) & 0xFFFFFFFFFFFFFFF0;
  }
  else if (mlir::Type::isIndex((mlir::Type *)&v5))
  {
    return 64;
  }
  else
  {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v5);
  }
}

uint64_t mlir::detail::DenseArrayAttrImpl<BOOL>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v6 = mlir::IntegerType::get((uint64_t)a1, 1u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  v13 = v6;
  v14 = a3;
  v15[0] = a2;
  v15[1] = a3;
  v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 24);
}

uint64_t mlir::detail::DenseArrayAttrImpl<int>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v6 = mlir::IntegerType::get((uint64_t)a1, 0x20u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  v13 = v6;
  v14 = a3;
  v15[0] = a2;
  v15[1] = 4 * a3;
  v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

BOOL mlir::detail::DenseArrayAttrImpl<int>::classof(_QWORD *a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;

  result = 0;
  if (a1 && *(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
  {
    v3 = a1[1];
    if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      v3 = 0;
    v4 = v3;
    return v3
        && mlir::IntegerType::getWidth((mlir::IntegerType *)&v4) == 32
        && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 0;
  }
  return result;
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 24);
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v6 = mlir::IntegerType::get((uint64_t)a1, 0x40u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  v13 = v6;
  v14 = a3;
  v15[0] = a2;
  v15[1] = 8 * a3;
  v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

llvm::raw_ostream *mlir::detail::DenseArrayAttrImpl<long long>::print(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;

  v3 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return mlir::detail::DenseArrayAttrImpl<long long>::print(a1, v3);
}

llvm::raw_ostream *mlir::detail::DenseArrayAttrImpl<long long>::print(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  _BYTE *v14;

  v3 = result;
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    result = llvm::raw_ostream::write(this, "[", 1uLL);
    v5 = *(_QWORD *)v3;
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 32);
    if (v6 < 8)
      goto LABEL_10;
  }
  else
  {
    *v4 = 91;
    ++*((_QWORD *)this + 4);
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)(*(_QWORD *)result + 32);
    if (v6 < 8)
      goto LABEL_10;
  }
  v7 = *(unint64_t **)(v5 + 24);
  v8 = v6 >> 3;
  result = llvm::raw_ostream::operator<<(this, *v7);
  if (v8 != 1)
  {
    v9 = v7 + 1;
    v10 = 8 * v8 - 8;
    do
    {
      while (1)
      {
        v12 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 1uLL)
          break;
        *v12 = 8236;
        *((_QWORD *)this + 4) += 2;
        v11 = *v9++;
        result = llvm::raw_ostream::operator<<(this, v11);
        v10 -= 8;
        if (!v10)
          goto LABEL_10;
      }
      llvm::raw_ostream::write(this, ", ", 2uLL);
      v13 = *v9++;
      result = llvm::raw_ostream::operator<<(this, v13);
      v10 -= 8;
    }
    while (v10);
  }
LABEL_10:
  v14 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v14)
    return llvm::raw_ostream::write(this, "]", 1uLL);
  *v14 = 93;
  ++*((_QWORD *)this + 4);
  return result;
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::parse(mlir::AsmParser *a1)
{
  mlir::MLIRContext *Context;
  uint64_t v3;
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];

  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 296))(a1))
    return 0;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 320))(a1))
  {
    Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
    v3 = mlir::IntegerType::get((uint64_t)Context, 0x40u, 0);
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
    v8[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
    v8[1] = Context;
    v14[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
    v14[1] = v8;
    v11 = v3;
    v12 = 0;
    v13[0] = 0;
    v13[1] = 0;
    v5 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v11, &v12, (uint64_t)v13);
    v9[0] = &v11;
    v9[1] = v14;
    v10 = &v11;
    return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v9);
  }
  else
  {
    v7 = mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(a1);
    if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 312))(a1))
      return v7;
    else
      return 0;
  }
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(mlir::AsmParser *a1)
{
  mlir::MLIRContext *Context;
  void *v3;
  void **v4;
  uint64_t v5;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  uint64_t ParametricStorageTypeImpl;
  void *v9;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t *v13;
  uint64_t v14;
  void **v15;
  _QWORD v16[2];
  _QWORD v17[2];
  void *v18;
  uint64_t v19;
  _QWORD v20[7];

  v20[6] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = 0x600000000;
  v14 = (uint64_t)a1;
  v15 = &v18;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD, uint64_t (*)(uint64_t *), uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(mlir::AsmParser &,mlir::Type)::{lambda(void)#1}>, &v14, 0, 0))
  {
    ParametricStorageTypeImpl = 0;
    v9 = v18;
    if (v18 == v20)
      return ParametricStorageTypeImpl;
    goto LABEL_3;
  }
  Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
  v3 = v18;
  v4 = (void **)v19;
  v5 = mlir::IntegerType::get((uint64_t)Context, 0x40u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v11[1] = Context;
  v17[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v17[1] = v11;
  v14 = v5;
  v15 = v4;
  v16[0] = v3;
  v16[1] = 8 * (_QWORD)v4;
  v7 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v14, (uint64_t *)&v15, (uint64_t)v16);
  v12[0] = &v14;
  v12[1] = v17;
  v13 = &v14;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
  v9 = v18;
  if (v18 != v20)
LABEL_3:
    free(v9);
  return ParametricStorageTypeImpl;
}

BOOL mlir::detail::DenseArrayAttrImpl<long long>::classof(_QWORD *a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;

  result = 0;
  if (a1 && *(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
  {
    v3 = a1[1];
    if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      v3 = 0;
    v4 = v3;
    return v3
        && mlir::IntegerType::getWidth((mlir::IntegerType *)&v4) == 64
        && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 0;
  }
  return result;
}

BOOL mlir::DenseElementsAttr::classof(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  return v1 == &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t OperandRange;
  uint64_t v7;
  llvm::APFloatBase *isIntOrIndex;
  llvm::APFloatBase *DenseElementBitWidth;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const void **v21;
  const void **v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  int64_t v27;
  llvm::APInt *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t Raw;
  _OWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  const llvm::detail::DoubleAPFloat *v44;
  const llvm::detail::IEEEFloat *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  llvm::APFloatBase *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  llvm::detail::DoubleAPFloat *v55;
  llvm::detail::DoubleAPFloat *v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  __int128 v60;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  const void **v66;
  const llvm::detail::DoubleAPFloat *v67;
  void *v68;
  void *v69;
  unint64_t v70;
  _BYTE *v71;
  const void *p_src;
  int v73;
  char v74;
  __int128 v76;
  void *__src;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  void *Value;
  __int128 v83;
  _BYTE v84[120];
  void *v85;
  _QWORD v86[3];
  _OWORD v87[2];
  __int128 v88;
  const void *v89;
  unsigned int v90;
  _QWORD v91[5];

  v91[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v81 = a1;
  *((_QWORD *)&v81 + 1) = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v81);
  v80 = OperandRange;
  if (*(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v7 = OperandRange;
  else
    v7 = 0;
  v79 = v7;
  if (!v7)
  {
    if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v80))
    {
      DenseElementBitWidth = (llvm::APFloatBase *)mlir::detail::getDenseElementBitWidth(v80);
      if (DenseElementBitWidth == (llvm::APFloatBase *)1)
        v10 = 1;
      else
        v10 = ((unint64_t)DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
      v11 = v10 * a4 + 7;
      Value = v84;
      v83 = xmmword_207AB6C20;
      if (v11 < 8)
        goto LABEL_113;
      v12 = v11 >> 3;
      if (v11 < 0x48)
      {
        v13 = 0;
        v14 = v12;
        if (!v12)
        {
LABEL_112:
          *(_QWORD *)&v83 = v12;
LABEL_113:
          *(_QWORD *)&v76 = v84;
          DWORD2(v87[0]) = 1;
          *(_QWORD *)&v87[0] = 0;
          v63 = a4;
          if (!(_DWORD)a4)
          {
LABEL_151:
            if (a4 == 1 && mlir::Type::isInteger((mlir::Type *)&v80, 1))
            {
              if (*(_BYTE *)Value)
                v74 = -1;
              else
                v74 = 0;
              *(_BYTE *)Value = v74;
            }
            Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v81, *((uint64_t *)&v81 + 1), (unsigned __int8 *)Value, v83);
            if (DWORD2(v87[0]) >= 0x41 && *(_QWORD *)&v87[0])
              MEMORY[0x20BD002D4](*(_QWORD *)&v87[0], 0x1000C8000313F17);
            v57 = Value;
            if (Value == (void *)v76)
              return Raw;
LABEL_161:
            free(v57);
            return Raw;
          }
          v64 = 0;
          while (1)
          {
            v65 = *a3;
            if (*(_UNKNOWN **)(*(_QWORD *)*a3 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
            {
              v66 = (const void **)(v65 + 16);
              DWORD2(v88) = *(_DWORD *)(v65 + 24);
              if (DWORD2(v88) > 0x40)
              {
                DenseElementBitWidth = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v88, v66);
                if (DWORD2(v87[0]) < 0x41)
                  goto LABEL_127;
              }
              else
              {
                *(_QWORD *)&v88 = *v66;
                if (DWORD2(v87[0]) < 0x41)
                  goto LABEL_127;
              }
              DenseElementBitWidth = *(llvm::APFloatBase **)&v87[0];
              if (*(_QWORD *)&v87[0])
                DenseElementBitWidth = (llvm::APFloatBase *)MEMORY[0x20BD002D4](*(_QWORD *)&v87[0], 0x1000C8000313F17);
LABEL_127:
              *(_QWORD *)&v87[0] = v88;
              v70 = DWORD2(v88);
              DWORD2(v87[0]) = DWORD2(v88);
              v71 = Value;
              v78 = DWORD2(v88);
              if (DWORD2(v88) <= 0x40uLL)
                goto LABEL_135;
              goto LABEL_143;
            }
            v68 = *(void **)(v65 + 24);
            v67 = (const llvm::detail::DoubleAPFloat *)(v65 + 24);
            v69 = llvm::APFloatBase::PPCDoubleDouble(DenseElementBitWidth);
            if (v69 == v68)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v88 + 1, v67);
              if (v69 != *((void **)&v88 + 1))
              {
LABEL_122:
                llvm::detail::IEEEFloat::bitcastToAPInt((_QWORD *)&v88 + 1, (uint64_t)&v85);
                if (DWORD2(v87[0]) < 0x41)
                  goto LABEL_133;
                goto LABEL_131;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8), v67);
              if (v69 != *((void **)&v88 + 1))
                goto LABEL_122;
            }
            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8), (llvm::APInt *)&v85);
            if (DWORD2(v87[0]) < 0x41)
              goto LABEL_133;
LABEL_131:
            if (*(_QWORD *)&v87[0])
              MEMORY[0x20BD002D4](*(_QWORD *)&v87[0], 0x1000C8000313F17);
LABEL_133:
            *(_QWORD *)&v87[0] = v85;
            DWORD2(v87[0]) = v86[0];
            LODWORD(v86[0]) = 0;
            if (v69 == *((void **)&v88 + 1))
            {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8));
              v71 = Value;
              v78 = DWORD2(v87[0]);
              v70 = DWORD2(v87[0]);
              if (DWORD2(v87[0]) <= 0x40uLL)
              {
LABEL_135:
                __src = *(void **)&v87[0];
                if (v70 != 1)
                  goto LABEL_136;
                goto LABEL_144;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8));
              v71 = Value;
              v78 = DWORD2(v87[0]);
              v70 = DWORD2(v87[0]);
              if (DWORD2(v87[0]) <= 0x40uLL)
                goto LABEL_135;
            }
LABEL_143:
            DenseElementBitWidth = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)v87);
            v70 = v78;
            if (v78 != 1)
            {
LABEL_136:
              if (v70 >= 0x41)
              {
                p_src = __src;
LABEL_140:
                DenseElementBitWidth = (llvm::APFloatBase *)memmove(&v71[v64 >> 3], p_src, (v70 + 7) >> 3);
                if (v78 >= 0x41)
                  goto LABEL_149;
                goto LABEL_115;
              }
              if (v70)
              {
                p_src = &__src;
                goto LABEL_140;
              }
              goto LABEL_146;
            }
LABEL_144:
            v73 = 1 << (v64 & 7);
            if (__src == (void *)1)
            {
              v71[v64 >> 3] |= v73;
LABEL_146:
              if (v78 >= 0x41)
                goto LABEL_149;
              goto LABEL_115;
            }
            v71[v64 >> 3] &= ~(_BYTE)v73;
            if (v78 >= 0x41)
            {
LABEL_149:
              DenseElementBitWidth = (llvm::APFloatBase *)__src;
              if (__src)
                DenseElementBitWidth = (llvm::APFloatBase *)MEMORY[0x20BD002D4](__src, 0x1000C8000313F17);
            }
LABEL_115:
            v64 += v10;
            ++a3;
            if (!--v63)
              goto LABEL_151;
          }
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&Value, v84, v11 >> 3, 1);
        v13 = v83;
        v14 = v12 - v83;
        if (v12 == (_QWORD)v83)
          goto LABEL_112;
      }
      bzero((char *)Value + v13, v14);
      goto LABEL_112;
    }
    Value = (char *)&v83 + 8;
    *(_QWORD *)&v83 = 0x800000000;
    if (a4 < 9)
    {
      v17 = 0;
      v58 = 0;
      if (!a4)
        goto LABEL_108;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, (char *)&v83 + 8, a4, 16);
      v17 = v83;
    }
    v59 = 8 * a4;
    v58 = v17;
    do
    {
      v60 = *(_OWORD *)(*a3 + 16);
      if (v58 >= DWORD1(v83))
      {
        v76 = *(_OWORD *)(*a3 + 16);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, (char *)&v83 + 8, v58 + 1, 16);
        v60 = v76;
        v58 = v83;
      }
      *((_OWORD *)Value + v58) = v60;
      v58 = v83 + 1;
      LODWORD(v83) = v83 + 1;
      ++a3;
      v59 -= 8;
    }
    while (v59);
LABEL_108:
    v87[0] = v81;
    v85 = Value;
    v86[0] = v58;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v87);
    LOBYTE(v79) = v58 == 1;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
    *(_QWORD *)&v88 = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
    *((_QWORD *)&v88 + 1) = Context;
    Raw = mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)&v88, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v87, (uint64_t)&v85, (unsigned __int8 *)&v79);
    v57 = Value;
    if (Value == (char *)&v83 + 8)
      return Raw;
    goto LABEL_161;
  }
  Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
  isIntOrIndex = (llvm::APFloatBase *)mlir::Type::isIntOrIndex((mlir::Type *)&Value);
  if (!(_DWORD)isIntOrIndex)
  {
    Value = (char *)&v83 + 8;
    *(_QWORD *)&v83 = 0x100000000;
    if (a4 < 2)
    {
      v39 = (char *)&v83 + 8;
      if (!a4)
        goto LABEL_89;
    }
    else
    {
      *(_QWORD *)&v88 = 0;
      v15 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&Value, (char *)&v83 + 8, a4, 64, (unint64_t *)&v88);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow((unsigned int *)&Value, (uint64_t)v15);
      v16 = v88;
      isIntOrIndex = (llvm::APFloatBase *)Value;
      if (Value != (char *)&v83 + 8)
        free(Value);
      Value = v15;
      DWORD1(v83) = v16;
    }
    v40 = llvm::APFloatBase::PPCDoubleDouble(isIntOrIndex);
    v41 = 8 * a4;
    while (1)
    {
      v42 = *(_QWORD **)(*a3 + 8);
      v43 = v42[1];
      v44 = (const llvm::detail::DoubleAPFloat *)(*v42 + 24);
      if (v40 == *(void **)v44)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)v87 + 1, v44);
        v45 = (const llvm::detail::IEEEFloat *)(v43 + 24);
        if (v40 != *(void **)(v43 + 24))
        {
LABEL_72:
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v86, v45);
          if (v40 != *((void **)&v87[0] + 1))
            goto LABEL_73;
          goto LABEL_77;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)v87 + 8), v44);
        v45 = (const llvm::detail::IEEEFloat *)(v43 + 24);
        if (v40 != *(void **)(v43 + 24))
          goto LABEL_72;
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v86, v45);
      if (v40 != *((void **)&v87[0] + 1))
      {
LABEL_73:
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8), (const llvm::detail::IEEEFloat *)((char *)v87 + 8));
        if (v40 == (void *)v86[0])
          goto LABEL_78;
        goto LABEL_74;
      }
LABEL_77:
      llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v88 + 1, (const llvm::detail::DoubleAPFloat *)((char *)v87 + 8));
      if (v40 == (void *)v86[0])
      {
LABEL_78:
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v91, (const llvm::detail::DoubleAPFloat *)v86);
        goto LABEL_79;
      }
LABEL_74:
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v91, (const llvm::detail::IEEEFloat *)v86);
LABEL_79:
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::push_back((unsigned int *)&Value, (unint64_t)&v88);
      if (v40 == (void *)v91[0])
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91);
        if (v40 == *((void **)&v88 + 1))
          goto LABEL_85;
LABEL_81:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8));
        if (v40 != (void *)v86[0])
          goto LABEL_82;
LABEL_86:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v86);
        if (v40 != *((void **)&v87[0] + 1))
          goto LABEL_87;
LABEL_69:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)v87 + 8));
        ++a3;
        v41 -= 8;
        if (!v41)
          goto LABEL_88;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v91);
        if (v40 != *((void **)&v88 + 1))
          goto LABEL_81;
LABEL_85:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8));
        if (v40 == (void *)v86[0])
          goto LABEL_86;
LABEL_82:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v86);
        if (v40 == *((void **)&v87[0] + 1))
          goto LABEL_69;
LABEL_87:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)v87 + 8));
        ++a3;
        v41 -= 8;
        if (!v41)
        {
LABEL_88:
          v39 = (char *)Value;
LABEL_89:
          v46 = v83;
          v88 = v81;
          v47 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v88);
          v48 = 2 * v46;
          v49 = mlir::detail::getDenseElementBitWidth(v47);
          if (v49 == 1)
            v50 = 0;
          else
            v50 = ((v49 + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
          v51 = (llvm::APFloatBase *)mlir::DenseIntOrFPElementsAttr::getRaw((llvm::APFloatBase *)v88, *((uint64_t *)&v88 + 1), v50, (uint64_t)v39, v48);
          Raw = (uint64_t)v51;
          v34 = Value;
          v52 = v83;
          if (!(_DWORD)v83)
          {
LABEL_101:
            if (v34 == (__int128 *)((char *)&v83 + 8))
              return Raw;
            goto LABEL_102;
          }
          v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
          v54 = v52 << 6;
          while (1)
          {
            v55 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 24);
            if (v53 == *(void **)v55)
            {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v55);
              v56 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 56);
              if (v53 == *(void **)v56)
              {
LABEL_94:
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v56);
                v54 -= 64;
                if (!v54)
                  goto LABEL_100;
                continue;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::~IEEEFloat(v55);
              v56 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 56);
              if (v53 == *(void **)v56)
                goto LABEL_94;
            }
            llvm::detail::IEEEFloat::~IEEEFloat(v56);
            v54 -= 64;
            if (!v54)
            {
LABEL_100:
              v34 = Value;
              goto LABEL_101;
            }
          }
        }
      }
    }
  }
  Value = (char *)&v83 + 8;
  *(_QWORD *)&v83 = 0x100000000;
  if (a4 >= 2)
  {
    llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, a4);
LABEL_23:
    v18 = 8 * a4;
    while (1)
    {
      v19 = *(_QWORD **)(*a3 + 8);
      v20 = v19[1];
      v21 = (const void **)(*v19 + 16);
      DWORD2(v87[0]) = *(_DWORD *)(*v19 + 24);
      if (DWORD2(v87[0]) > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v87, v21);
        v22 = (const void **)(v20 + 16);
        LODWORD(v86[0]) = *(_DWORD *)(v20 + 24);
        if (LODWORD(v86[0]) > 0x40)
        {
LABEL_27:
          llvm::APInt::initSlowCase((llvm::APInt *)&v85, v22);
          DWORD2(v88) = DWORD2(v87[0]);
          if (DWORD2(v87[0]) > 0x40)
            goto LABEL_28;
          goto LABEL_32;
        }
      }
      else
      {
        *(_QWORD *)&v87[0] = *v21;
        v22 = (const void **)(v20 + 16);
        LODWORD(v86[0]) = *(_DWORD *)(v20 + 24);
        if (LODWORD(v86[0]) > 0x40)
          goto LABEL_27;
      }
      v85 = (void *)*v22;
      DWORD2(v88) = DWORD2(v87[0]);
      if (DWORD2(v87[0]) > 0x40)
      {
LABEL_28:
        llvm::APInt::initSlowCase((llvm::APInt *)&v88, (const void **)v87);
        v90 = v86[0];
        if (LODWORD(v86[0]) <= 0x40)
          goto LABEL_33;
        goto LABEL_29;
      }
LABEL_32:
      *(_QWORD *)&v88 = *(_QWORD *)&v87[0];
      v90 = v86[0];
      if (LODWORD(v86[0]) <= 0x40)
      {
LABEL_33:
        v89 = v85;
        goto LABEL_34;
      }
LABEL_29:
      llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v85);
LABEL_34:
      v23 = (char *)Value;
      if (v83 >= DWORD1(v83))
      {
        v26 = v83 + 1;
        if (Value <= &v88 && (char *)Value + 32 * v83 > (char *)&v88)
        {
          v27 = (char *)&v88 - (_BYTE *)Value;
          llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, v26);
          v23 = (char *)Value;
          v24 = (char *)Value + v27;
        }
        else
        {
          llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, v26);
          v24 = (char *)&v88;
          v23 = (char *)Value;
        }
      }
      else
      {
        v24 = (char *)&v88;
      }
      v25 = &v23[32 * v83];
      *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
      *(_QWORD *)v25 = *(_QWORD *)v24;
      *((_DWORD *)v24 + 2) = 0;
      *((_DWORD *)v25 + 6) = *((_DWORD *)v24 + 6);
      *((_QWORD *)v25 + 2) = *((_QWORD *)v24 + 2);
      *((_DWORD *)v24 + 6) = 0;
      LODWORD(v83) = v83 + 1;
      if (v90 >= 0x41 && v89)
        MEMORY[0x20BD002D4](v89, 0x1000C8000313F17);
      if (DWORD2(v88) >= 0x41 && (_QWORD)v88)
        MEMORY[0x20BD002D4](v88, 0x1000C8000313F17);
      if (LODWORD(v86[0]) >= 0x41 && v85)
        MEMORY[0x20BD002D4](v85, 0x1000C8000313F17);
      if (DWORD2(v87[0]) >= 0x41 && *(_QWORD *)&v87[0])
        MEMORY[0x20BD002D4](*(_QWORD *)&v87[0], 0x1000C8000313F17);
      ++a3;
      v18 -= 8;
      if (!v18)
        goto LABEL_52;
    }
  }
  if (a4)
    goto LABEL_23;
LABEL_52:
  v28 = (llvm::APInt *)Value;
  v29 = v83;
  v88 = v81;
  v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v88);
  v31 = mlir::detail::getDenseElementBitWidth(v30);
  if (v31 == 1)
    v32 = 0;
  else
    v32 = ((v31 + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v88, *((uint64_t *)&v88 + 1), v32, v28, 2 * v29);
  v34 = Value;
  if ((_DWORD)v83)
  {
    v35 = 2 * v83;
    do
    {
      v36 = &v34[v35];
      if (DWORD2(v34[v35 - 1]) >= 0x41)
      {
        v37 = *((_QWORD *)v36 - 2);
        if (v37)
          MEMORY[0x20BD002D4](v37, 0x1000C8000313F17);
      }
      if (*((_DWORD *)v36 - 6) >= 0x41u)
      {
        v38 = *((_QWORD *)v36 - 4);
        if (v38)
          MEMORY[0x20BD002D4](v38, 0x1000C8000313F17);
      }
      v35 -= 2;
    }
    while (v35 * 16);
    v34 = Value;
  }
  if (v34 != (__int128 *)((char *)&v83 + 8))
  {
LABEL_102:
    v57 = v34;
    goto LABEL_161;
  }
  return Raw;
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, llvm::APInt *a3, uint64_t a4)
{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a1;
  v11 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1)
    v8 = 0;
  else
    v8 = ((DenseElementBitWidth + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, 2 * a4);
}

{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a1;
  v11 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1)
    v8 = 1;
  else
    v8 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, a4);
}

uint64_t llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::push_back(unsigned int *a1, unint64_t a2)
{
  char *Address;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;

  Address = llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::reserveForParamAndGetAddress(a1, a2, 1);
  v4 = *(_QWORD *)a1;
  v5 = a1[2];
  v6 = (_QWORD *)(*(_QWORD *)a1 + (v5 << 6) + 8);
  v7 = Address + 8;
  v8 = (void *)*((_QWORD *)Address + 1);
  v9 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
  if (v9 == v8)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, v7);
    v10 = (_QWORD *)(v4 + (v5 << 6) + 40);
    v11 = Address + 40;
    if (v9 != *((void **)Address + 5))
      goto LABEL_3;
LABEL_5:
    result = (uint64_t)llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
    goto LABEL_6;
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v6, (uint64_t)v7);
  v10 = (_QWORD *)(v4 + (v5 << 6) + 40);
  v11 = Address + 40;
  if (v9 == *((void **)Address + 5))
    goto LABEL_5;
LABEL_3:
  result = llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
LABEL_6:
  ++a1[2];
  return result;
}

uint64_t mlir::DenseElementsAttr::get(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t OperandRange;
  uint64_t v7;
  unint64_t DenseElementBitWidth;
  unint64_t v9;
  llvm::APFloatBase *v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v11);
  v7 = 2 * a4;
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1)
    v9 = 0;
  else
    v9 = ((DenseElementBitWidth + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  return mlir::DenseIntOrFPElementsAttr::getRaw(v11, v12, v9, a3, v7);
}

{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  unint64_t v8;
  llvm::APFloatBase *v10;
  uint64_t v11;

  v10 = a1;
  v11 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1)
    v8 = 1;
  else
    v8 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, a4);
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  uint64_t *Shape;
  uint64_t v9;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  BOOL v13;
  _QWORD v14[2];
  uint64_t v15[2];
  void *v16;
  uint64_t v17;

  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v16 = (void *)a1;
  v17 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v16);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v16);
  v13 = mlir::ShapedType::getNumElements(Shape, v9) == 1;
  if (DenseElementBitWidth != 1)
  {
    if (((DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8) != 8 * a4)
      goto LABEL_7;
LABEL_6:
    v13 = 1;
    goto LABEL_7;
  }
  if (a4 == 1 && *a3 - 1 >= 0xFE)
    goto LABEL_6;
LABEL_7:
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v15);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v16 = &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id;
  v17 = (uint64_t)Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail31DenseIntOrFPElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_24DenseIntOrFPElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefIcEERbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)&v16, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, v15, (uint64_t)v14, (unsigned __int8 *)&v13);
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v4;
  unint64_t v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  _BOOL4 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t Raw;

  v4 = a4;
  v8 = a4 + 7;
  if ((unint64_t)(a4 + 7) >= 8)
  {
    v13 = v8 >> 3;
    v9 = (char *)operator new(v8 >> 3);
    v10 = &v9[v13];
    bzero(v9, v13);
    v11 = *a3;
    v12 = v4;
    if (!v4)
    {
LABEL_11:
      v19 = v10 - v9;
      if (v10 == v9)
      {
        v21 = 1 - v19;
        if (v19 == 1)
        {
          v20 = &v10[v21];
          bzero(v10, v21);
        }
        else
        {
          v22 = 2 * v19;
          if (2 * v19 <= 1)
            v22 = 1;
          if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
            v23 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)operator new(v23);
          v25 = &v24[v19];
          v20 = v24 + 1;
          bzero(v25, v21);
          if (v10)
          {
            operator delete(v10);
            LOBYTE(v11) = *a3;
          }
          v10 = v25;
        }
      }
      else
      {
        if (v19 > 1)
          v20 = v9 + 1;
        else
          v20 = v10;
        v10 = v9;
      }
      v9 = v10;
      *v10 = -(char)v11;
      v10 = v20;
      goto LABEL_27;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_27;
    v11 = *a3;
    v12 = a4;
    if (!(_DWORD)a4)
      goto LABEL_11;
  }
  v14 = 0;
  v15 = 1;
  do
  {
    while (1)
    {
      v16 = a3[v14] == v11;
      v17 = 1 << (v14 & 7);
      v18 = v14 >> 3;
      if (a3[v14])
        break;
      v9[v18] &= ~(_BYTE)v17;
      v15 &= v16;
      if (v12 == ++v14)
        goto LABEL_10;
    }
    v9[v18] |= v17;
    v15 &= v16;
    ++v14;
  }
  while (v12 != v14);
LABEL_10:
  if ((v15 & 1) != 0)
    goto LABEL_11;
LABEL_27:
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(a1, a2, (unsigned __int8 *)v9, v10 - v9);
  if (v9)
    operator delete(v9);
  return Raw;
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(uint64_t a1, uint64_t a2, uint64_t a3, llvm::APInt *a4, uint64_t a5)
{
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  llvm::APInt *v16;
  char v17;
  unint64_t v18;
  int v19;
  const void *v20;
  char v21;
  uint64_t Raw;
  uint64_t v24;
  const void *__src;
  unsigned int v26;

  v10 = a5 * a3 + 7;
  if (v10 >= 8)
  {
    v13 = v10 >> 3;
    v12 = operator new(v10 >> 3);
    v11 = &v12[v13];
    bzero(v12, v13);
    if (!a5)
      goto LABEL_25;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    if (!a5)
      goto LABEL_25;
  }
  v24 = a2;
  v14 = 0;
  v15 = 16 * a5;
  v16 = a4;
  do
  {
    v18 = *((unsigned int *)v16 + 2);
    v26 = v18;
    if (v18 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)v16);
      v18 = v26;
      if (v26 == 1)
      {
LABEL_15:
        v19 = 1 << (v14 & 7);
        if (__src == (const void *)1)
          v17 = v12[v14 >> 3] | v19;
        else
          v17 = v12[v14 >> 3] & ~(_BYTE)v19;
        v12[v14 >> 3] = v17;
        goto LABEL_8;
      }
    }
    else
    {
      __src = *(const void **)v16;
      if (v18 == 1)
        goto LABEL_15;
    }
    if (v18 > 0x40)
    {
      v20 = __src;
      memmove(&v12[v14 >> 3], __src, (v18 + 7) >> 3);
      if (v20)
        MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
    }
    else if (v18)
    {
      memmove(&v12[v14 >> 3], &__src, (v18 + 7) >> 3);
    }
LABEL_8:
    v16 = (llvm::APInt *)((char *)v16 + 16);
    v14 += a3;
    v15 -= 16;
  }
  while (v15);
  a2 = v24;
  if (a5 == 1 && *((_DWORD *)a4 + 2) == 1)
  {
    if (*v12)
      v21 = -1;
    else
      v21 = 0;
    *v12 = v21;
  }
LABEL_25:
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(a1, a2, v12, v11 - v12);
  if (v12)
    operator delete(v12);
  return Raw;
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  llvm::detail::DoubleAPFloat *v14;
  uint64_t i;
  char v16;
  uint64_t v17;
  int v18;
  const void *v19;
  llvm::detail::DoubleAPFloat *v20;
  void *v21;
  unsigned int v22;
  char v23;
  uint64_t Raw;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  const void *__src;
  unsigned int v32;

  v27 = (uint64_t)a1;
  v8 = ((32 * a5) >> 5) * a3 + 7;
  if (v8 >= 8)
  {
    v11 = v8 >> 3;
    v9 = operator new(v8 >> 3);
    v26 = &v9[v11];
    bzero(v9, v11);
    v10 = 32 * a5;
    if (!a5)
      goto LABEL_19;
    goto LABEL_5;
  }
  v26 = 0;
  v9 = 0;
  v10 = 32 * a5;
  if (a5)
  {
LABEL_5:
    v12 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v13 = 0;
    v14 = (llvm::detail::DoubleAPFloat *)(a4 + 8);
    for (i = v10; i; i -= 32)
    {
      if (v12 == *(void **)v14)
      {
        a1 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v14, (llvm::APInt *)&__src);
        v17 = v32;
        if (v32 != 1)
        {
LABEL_14:
          if (v17 > 0x40)
          {
            v19 = __src;
            a1 = (llvm::APFloatBase *)memmove(&v9[v13 >> 3], __src, (unint64_t)(v17 + 7) >> 3);
            if (v19)
              a1 = (llvm::APFloatBase *)MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
          }
          else if ((_DWORD)v17)
          {
            a1 = (llvm::APFloatBase *)memmove(&v9[v13 >> 3], &__src, (unint64_t)(v17 + 7) >> 3);
          }
          goto LABEL_8;
        }
      }
      else
      {
        a1 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::bitcastToAPInt(v14, (uint64_t)&__src);
        v17 = v32;
        if (v32 != 1)
          goto LABEL_14;
      }
      v18 = 1 << (v13 & 7);
      if (__src == (const void *)1)
        v16 = v9[v13 >> 3] | v18;
      else
        v16 = v9[v13 >> 3] & ~(_BYTE)v18;
      v9[v13 >> 3] = v16;
LABEL_8:
      v13 += a3;
      v14 = (llvm::detail::DoubleAPFloat *)((char *)v14 + 32);
    }
  }
LABEL_19:
  if (v10 != 32)
    goto LABEL_30;
  v21 = *(void **)(a4 + 8);
  v20 = (llvm::detail::DoubleAPFloat *)(a4 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v21)
  {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v20, (llvm::APInt *)&v29);
    v22 = v30;
    if (v30 >= 0x41)
    {
LABEL_22:
      if (v29)
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
      goto LABEL_30;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::bitcastToAPInt(v20, (uint64_t)&v29);
    v22 = v30;
    if (v30 >= 0x41)
      goto LABEL_22;
  }
  if (v22 == 1)
  {
    if (*v9)
      v23 = -1;
    else
      v23 = 0;
    *v9 = v23;
  }
LABEL_30:
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v27, a2, v9, v26 - v9);
  if (v9)
    operator delete(v9);
  return Raw;
}

BOOL mlir::DenseElementsAttr::isValidRawBuffer(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, BOOL *a5)
{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  uint64_t v10;
  uint64_t *Shape;
  uint64_t v12;
  uint64_t NumElements;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 result;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v17);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  v10 = 8 * a4;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v17);
  NumElements = mlir::ShapedType::getNumElements(Shape, v12);
  *a5 = NumElements == 1;
  if (DenseElementBitWidth != 1)
  {
    v15 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v10 != v15)
    {
      v14 = v15 * NumElements;
      return v10 == v14;
    }
LABEL_6:
    result = 1;
    *a5 = 1;
    return result;
  }
  if (a4 == 1 && *a3 - 1 >= 0xFE)
    goto LABEL_6;
  v14 = (NumElements + 7) & 0xFFFFFFFFFFFFFFF8;
  return v10 == v14;
}

uint64_t mlir::DenseElementsAttr::isValidIntOrFloat(mlir::DenseElementsAttr *this, uint64_t a2, char a3, unsigned int a4)
{
  uint64_t OperandRange;
  __int128 v9;

  v9 = *(_OWORD *)(*(_QWORD *)this + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v9);
  return isValidIntOrFloat(OperandRange, a2, a3, a4);
}

uint64_t isValidIntOrFloat(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  uint64_t result;
  void *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a1;
  if (mlir::detail::getDenseElementBitWidth(a1) != 8 * a2)
    return 0;
  if ((a3 & 1) != 0)
  {
    if (mlir::Type::isIndex((mlir::Type *)&v15))
      return 1;
    v13 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      v13 = 0;
    v14 = v13;
    if (v13)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v14))
        return (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v14) != 1) ^ a4;
      return 1;
    }
    return 0;
  }
  v8 = *(void **)(*(_QWORD *)a1 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  result = 1;
  if (v8 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  }
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetComplexIntValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  unint64_t DenseElementBitWidth;
  uint64_t v12;
  uint64_t *Shape;
  uint64_t v14;
  uint64_t NumElements;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v19 = *(_OWORD *)(*(_QWORD *)this + 8);
  *(_QWORD *)&v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
  result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
  if (*(_UNKNOWN **)(*(_QWORD *)result + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v7 = *(_QWORD *)(*(_QWORD *)this + 16);
    v8 = *(_QWORD *)(*(_QWORD *)this + 32);
    v9 = *(unsigned __int8 *)(*(_QWORD *)this + 24);
    *(_QWORD *)&v19 = *(_QWORD *)(*(_QWORD *)this + 8);
    v6 = v19;
    *((_QWORD *)&v19 + 1) = v7;
    *(_QWORD *)&v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
    DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(Value);
    v12 = *(_QWORD *)this;
    v19 = *(_OWORD *)(*(_QWORD *)this + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v19);
    NumElements = mlir::ShapedType::getNumElements(Shape, v14);
    v16 = *(_QWORD *)(v12 + 32);
    v17 = *(unsigned __int8 *)(v12 + 24);
    v19 = *(_OWORD *)(v12 + 8);
    *(_QWORD *)&v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
    v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
    result = mlir::detail::getDenseElementBitWidth(v18);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = DenseElementBitWidth;
    *(_QWORD *)(a2 + 32) = v16;
    *(_QWORD *)(a2 + 40) = v17;
    *(_QWORD *)(a2 + 48) = NumElements;
    *(_QWORD *)(a2 + 56) = result;
    v5 = 1;
    *(_QWORD *)(a2 + 64) = v6;
    *(_QWORD *)(a2 + 72) = v7;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 80) = v5;
  return result;
}

uint64_t mlir::DenseElementsAttr::getNumElements(mlir::DenseElementsAttr *this)
{
  uint64_t *Shape;
  uint64_t v2;
  __int128 v4;

  v4 = *(_OWORD *)(*(_QWORD *)this + 8);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v4);
  return mlir::ShapedType::getNumElements(Shape, v2);
}

unint64_t mlir::DenseElementsAttr::tryGetFloatValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  BOOL v16;
  void *FloatSemantics;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  uint64_t v23;
  uint64_t *Shape;
  uint64_t v25;
  uint64_t NumElements;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;

  v33 = *(_OWORD *)(*(_QWORD *)this + 8);
  result = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
  v5 = *(void **)(*(_QWORD *)result + 136);
  v16 = v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  if (v16 && (v32 = result) != 0)
  {
    FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v32);
    v19 = *(_QWORD *)(*(_QWORD *)this + 16);
    v31 = *(_QWORD *)(*(_QWORD *)this + 32);
    v20 = *(unsigned __int8 *)(*(_QWORD *)this + 24);
    *(_QWORD *)&v33 = *(_QWORD *)(*(_QWORD *)this + 8);
    v18 = v33;
    *((_QWORD *)&v33 + 1) = v19;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
    v23 = *(_QWORD *)this;
    v33 = *(_OWORD *)(*(_QWORD *)this + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v33);
    NumElements = mlir::ShapedType::getNumElements(Shape, v25);
    v27 = *(_QWORD *)(v23 + 32);
    v28 = *(unsigned __int8 *)(v23 + 24);
    v33 = *(_OWORD *)(v23 + 8);
    v29 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    result = mlir::detail::getDenseElementBitWidth(v29);
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v20;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = DenseElementBitWidth;
    *(_QWORD *)(a2 + 32) = FloatSemantics;
    *(_QWORD *)(a2 + 40) = v27;
    *(_QWORD *)(a2 + 48) = v28;
    *(_QWORD *)(a2 + 56) = NumElements;
    *(_QWORD *)(a2 + 64) = result;
    *(_QWORD *)(a2 + 72) = FloatSemantics;
    v30 = 1;
    *(_QWORD *)(a2 + 80) = v18;
    *(_QWORD *)(a2 + 88) = v19;
  }
  else
  {
    v30 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 96) = v30;
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetComplexFloatValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  void *v6;
  BOOL v17;
  void *FloatSemantics;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  unint64_t DenseElementBitWidth;
  uint64_t v24;
  uint64_t *Shape;
  uint64_t v26;
  uint64_t NumElements;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;

  v35 = *(_OWORD *)(*(_QWORD *)this + 8);
  result = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
  if (*(_UNKNOWN **)(*(_QWORD *)result + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v5 = result;
  else
    v5 = 0;
  v34 = v5;
  if (v5)
  {
    result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v34);
    v6 = *(void **)(*(_QWORD *)result + 136);
    v17 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
    if (v17 && (v33 = result) != 0)
    {
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v33);
      v20 = *(_QWORD *)(*(_QWORD *)this + 16);
      v32 = *(_QWORD *)(*(_QWORD *)this + 32);
      v21 = *(unsigned __int8 *)(*(_QWORD *)this + 24);
      *(_QWORD *)&v35 = *(_QWORD *)(*(_QWORD *)this + 8);
      v19 = v35;
      *((_QWORD *)&v35 + 1) = v20;
      *(_QWORD *)&v35 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
      DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(Value);
      v24 = *(_QWORD *)this;
      v35 = *(_OWORD *)(*(_QWORD *)this + 8);
      Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
      NumElements = mlir::ShapedType::getNumElements(Shape, v26);
      v28 = *(_QWORD *)(v24 + 32);
      v29 = *(unsigned __int8 *)(v24 + 24);
      v35 = *(_OWORD *)(v24 + 8);
      *(_QWORD *)&v35 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
      v30 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
      result = mlir::detail::getDenseElementBitWidth(v30);
      *(_QWORD *)a2 = v32;
      *(_QWORD *)(a2 + 8) = v21;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = DenseElementBitWidth;
      *(_QWORD *)(a2 + 32) = FloatSemantics;
      *(_QWORD *)(a2 + 40) = v28;
      *(_QWORD *)(a2 + 48) = v29;
      *(_QWORD *)(a2 + 56) = NumElements;
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = FloatSemantics;
      v31 = 1;
      *(_QWORD *)(a2 + 80) = v19;
      *(_QWORD *)(a2 + 88) = v20;
    }
    else
    {
      v31 = 0;
      *(_BYTE *)a2 = 0;
    }
    *(_BYTE *)(a2 + 96) = v31;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 96) = 0;
  }
  return result;
}

uint64_t mlir::DenseElementsAttr::reshape(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (*(_QWORD *)(result + 8) != a2)
    return mlir::DenseIntOrFPElementsAttr::getRaw(a2, a3, *(unsigned __int8 **)(result + 32), *(_QWORD *)(result + 40));
  return result;
}

uint64_t mlir::DenseElementsAttr::bitcast(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[3];
  __int128 v8;
  char v9;

  *(_OWORD *)v7 = *(_OWORD *)(*(_QWORD *)a1 + 8);
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v7) == a2)
    return *(_QWORD *)a1;
  LOBYTE(v8) = 0;
  v9 = 0;
  v4 = mlir::ShapedType::cloneWith(v7, &v8, a2);
  return mlir::DenseIntOrFPElementsAttr::getRaw(v4, v5, *(unsigned __int8 **)(*(_QWORD *)a1 + 32), *(_QWORD *)(*(_QWORD *)a1 + 40));
}

uint64_t mlir::DenseFPElementsAttr::classof(uint64_t a1)
{
  void *v1;
  BOOL v3;
  int v4;
  void *v5;
  _BOOL4 v12;
  int v13;
  __int128 v14;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  v3 = v1 != &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id
    || a1 == 0;
  v4 = v3;
  if (v3)
    return v1 & (v4 ^ 1);
  v14 = *(_OWORD *)(a1 + 8);
  v5 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14) + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    LODWORD(v1) = 1;
    return v1 & (v4 ^ 1);
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  LODWORD(v1) = 1;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    return v1 & (v4 ^ 1);
  v12 = v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  v13 = v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id || v12;
  return v13 & (v4 ^ 1u);
}

uint64_t mlir::DenseIntElementsAttr::classof(uint64_t a1)
{
  void *v1;
  BOOL v3;
  int v4;
  __int128 v6;
  uint64_t OperandRange;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  v3 = v1 != &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id
    || a1 == 0;
  v4 = v3;
  if (!v3)
  {
    v6 = *(_OWORD *)(a1 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v6);
    LODWORD(v1) = mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange);
  }
  return (v4 ^ 1) & v1;
}

uint64_t mlir::DenseResourceElementsAttr::get(uint64_t a1, uint64_t a2, __int128 *a3)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  __int128 v7;
  _QWORD v8[2];

  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, &v7, a3);
}

void mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::insert(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  pthread_rwlock_t **v8;
  uint64_t v9;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  char v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = *(pthread_rwlock_t ***)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 8);
  LOBYTE(v16) = 0;
  v22 = 0;
  if (*(_BYTE *)(a4 + 64))
  {
    v16 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 48);
    v17 = *(_QWORD *)(a4 + 16);
    v20 = v11;
    if (v11 >= 8)
    {
      v12 = (__int128 *)(a4 + 24);
      if ((v11 & 2) != 0 && (v11 & 4) != 0)
      {
        (*(void (**)(__int128 *, __int128 *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(&v18, v12);
      }
      else
      {
        v18 = *v12;
        v19 = *(_QWORD *)(a4 + 40);
      }
      *(_QWORD *)(a4 + 48) = 0;
    }
    v21 = *(_BYTE *)(a4 + 56);
    v22 = 1;
  }
  mlir::DialectResourceBlobManager::insert<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(v8, v9, a2, a3, &v16, a5);
  if (v22 && v20 >= 8)
  {
    v13 = (v20 & 2) != 0 ? &v18 : (__int128 *)v18;
    (*(void (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v20 & 0xFFFFFFFFFFFFFFF8))(v13, v16, *((_QWORD *)&v16 + 1), v17);
    v14 = v20;
    if (v20 >= 8)
    {
      if ((v20 & 4) != 0)
      {
        if ((v20 & 2) != 0)
          v15 = &v18;
        else
          v15 = (__int128 *)v18;
        (*(void (**)(__int128 *))((v20 & 0xFFFFFFFFFFFFFFF8) + 16))(v15);
      }
      if ((v14 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v18, *((void **)&v18 + 1));
    }
  }
}

llvm::APFloatBase *mlir::SparseElementsAttr::getZeroAttr(mlir::SparseElementsAttr *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t ElementType;
  void *v5;
  uint64_t v18;
  uint64_t Value;
  void *v20;
  uint64_t v32;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v35;
  char *v36[4];
  __int16 v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v2 + 8);
  else
    v3 = 0;
  ElementType = mlir::ElementsAttr::getElementType((uint64_t)v2, v3);
  v5 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return mlir::FloatAttr::get(ElementType, 0.0);
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v18 = ElementType;
  else
    v18 = 0;
  v38 = v18;
  if (v18)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v38);
    v20 = *(void **)(*(_QWORD *)Value + 136);
    if (v20 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v35 = (uint64_t)mlir::FloatAttr::get(Value, 0.0);
    }
    else
    {
      v35 = mlir::IntegerAttr::get(Value, 0);
    }
    v32 = v35;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v38);
    v40[0] = v32;
    v40[1] = v32;
    *(_QWORD *)&v39 = v40;
    *((_QWORD *)&v39 + 1) = 2;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
    v36[0] = (char *)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
    v36[1] = (char *)Context;
    return (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v36, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v39);
  }
  else if (*(_UNKNOWN **)(**(_QWORD **)(*(_QWORD *)this + 32) + 136) == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id)
  {
    v37 = 257;
    return (llvm::APFloatBase *)mlir::StringAttr::get(v36, ElementType);
  }
  else
  {
    return (llvm::APFloatBase *)mlir::IntegerAttr::get(ElementType, 0);
  }
}

void mlir::SparseElementsAttr::getFlattenedSparseIndices(mlir::SparseElementsAttr *this@<X0>, uint64_t **a2@<X8>)
{
  mlir::SparseElementsAttr *v2;
  uint64_t **v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  _QWORD *ArgOperands;
  uint64_t FlattenedIndex;
  uint64_t v31;
  unint64_t v32;
  mlir::SparseElementsAttr *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t **v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  void *v60[2];
  _QWORD v61[10];

  v2 = this;
  v3 = a2;
  v61[8] = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v58 = *(_QWORD *)(*(_QWORD *)this + 24);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(&v58, (uint64_t)v60);
  v4 = v60[0];
  v5 = LOBYTE(v60[1]);
  v6 = v61[0];
  if (!*(_BYTE *)(v58 + 24))
  {
    *(_OWORD *)v60 = *(_OWORD *)(v58 + 8);
    v19 = *(_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
    *(_OWORD *)v60 = *(_OWORD *)(*(_QWORD *)v2 + 8);
    mlir::ShapedType::getShape((mlir::ShapedType *)v60);
    v57 = v19;
    if (!v19)
      return;
    v21 = v20;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v56 = v6;
    v55 = v5;
    v53 = v4;
    v54 = v20;
    v52 = v3;
    while (1)
    {
      v26 = v5 ? 0 : v6 + v23 * v21;
      v27 = *(_QWORD **)v2;
      v28 = *(_QWORD *)v2 ? (void *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v60[0] = v27;
      v60[1] = v28;
      ArgOperands = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60);
      FlattenedIndex = mlir::ElementsAttr::getFlattenedIndex(ArgOperands, (uint64_t)&v4[v26]);
      v31 = FlattenedIndex;
      v32 = (unint64_t)v3[2];
      if ((unint64_t)v22 >= v32)
        break;
      *(_QWORD *)v22 = FlattenedIndex;
      v25 = (uint64_t)(v22 + 8);
LABEL_15:
      v3[1] = (uint64_t *)v25;
      ++v23;
      v22 = (char *)v25;
      v6 = v56;
      v5 = v55;
      v21 = v54;
      if (v23 == v57)
        return;
    }
    v33 = v2;
    v34 = (v22 - v24) >> 3;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
      abort();
    v36 = v32 - (_QWORD)v24;
    if (v36 >> 2 > v35)
      v35 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v38 = operator new(8 * v37);
      v39 = &v38[8 * v34];
      *(_QWORD *)v39 = v31;
      v25 = (uint64_t)(v39 + 8);
      if (v22 != v24)
      {
LABEL_32:
        v40 = v22 - 8 - v24;
        if (v40 < 0x168
          || &v38[v22 - v24 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v38[v22 - v24 - 8]
          || &v22[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v22 - 8
          || (unint64_t)(v24 - v38) < 0x20)
        {
          v41 = v22;
          v2 = v33;
        }
        else
        {
          v43 = (v40 >> 3) + 1;
          v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v22[-v44];
          v39 -= v44;
          v45 = &v38[8 * v34 - 16];
          v46 = v22 - 16;
          v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          v2 = v33;
          if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            v3 = v52;
            *v52 = (uint64_t *)v39;
            v52[1] = (uint64_t *)v25;
            v52[2] = (uint64_t *)&v38[8 * v37];
            if (!v24)
            {
LABEL_37:
              v24 = v39;
              v4 = v53;
              goto LABEL_15;
            }
LABEL_36:
            operator delete(v24);
            goto LABEL_37;
          }
        }
        do
        {
          v42 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v39 - 1) = v42;
          v39 -= 8;
        }
        while (v41 != v24);
        goto LABEL_35;
      }
    }
    else
    {
      v38 = 0;
      v39 = (char *)(8 * v34);
      *(_QWORD *)(8 * v34) = v31;
      v25 = 8 * v34 + 8;
      if (v22 != v24)
        goto LABEL_32;
    }
    v2 = v33;
    v3 = v52;
    *v52 = (uint64_t *)v39;
    v52[1] = (uint64_t *)v25;
    v52[2] = (uint64_t *)&v38[8 * v37];
    if (!v24)
      goto LABEL_37;
    goto LABEL_36;
  }
  v59 = *(_OWORD *)(*(_QWORD *)v2 + 8);
  mlir::ShapedType::getShape((mlir::ShapedType *)&v59);
  v8 = v7;
  if (v5)
    v9 = 0;
  else
    v9 = v6;
  v60[0] = v61;
  HIDWORD(v60[1]) = 8;
  v10 = v4[v9];
  if (v7 < 9)
  {
    if (v7)
    {
      v61[0] = v4[v9];
      if (v7 != 1)
      {
        v61[1] = v10;
        if (v7 != 2)
        {
          v61[2] = v10;
          if (v7 != 3)
          {
            v61[3] = v10;
            if (v7 != 4)
            {
              v61[4] = v10;
              if (v7 != 5)
              {
                v61[5] = v10;
                if (v7 != 6)
                {
                  v61[6] = v10;
                  if (v7 != 7)
                    v61[7] = v10;
                }
              }
            }
          }
        }
      }
    }
    v11 = v61;
    LODWORD(v60[1]) = v7;
    v17 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
      goto LABEL_11;
  }
  else
  {
    LODWORD(v60[1]) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v60, v61, v7, 8);
    v11 = v60[0];
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = v8 & 3;
    v14 = vdupq_n_s64(v10);
    v15 = (int64x2_t *)((char *)v60[0] + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15[-1] = v14;
      *v15 = v14;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        v11[v12++] = v10;
        --v13;
      }
      while (v13);
    }
    LODWORD(v60[1]) = v8;
    v17 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
LABEL_11:
      v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v17 + 8);
      goto LABEL_59;
    }
  }
  v18 = 0;
LABEL_59:
  *(_QWORD *)&v59 = v17;
  *((_QWORD *)&v59 + 1) = v18;
  v49 = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v59);
  v50 = mlir::ElementsAttr::getFlattenedIndex(v49, (uint64_t)v11);
  v51 = (uint64_t *)operator new(8uLL);
  *v3 = v51;
  *v51++ = v50;
  v3[1] = v51;
  v3[2] = v51;
  if (v60[0] != v61)
    free(v60[0]);
}

uint64_t mlir::SparseElementsAttr::verify(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const char ***v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const char **v38;
  unint64_t v39;
  unint64_t v40;
  int64x2_t v41;
  const char **v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  const char **v56;
  uint64_t v58;
  uint64_t v59;
  const char **v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  _QWORD *v79[2];
  mlir::ShapedType *v80[4];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  const char **v87;
  const char *v88;
  _QWORD v89[6];
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  void *v93;
  unsigned int v94;
  unsigned int v95;
  _BYTE v96[96];
  void *v97;
  _QWORD *v98;
  void *__p;
  _QWORD *v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v86[0] = a1;
  v86[1] = a2;
  v84 = a3;
  v85 = a4;
  v83 = a5;
  v82 = *(_OWORD *)(a6 + 8);
  mlir::ShapedType::getShape((mlir::ShapedType *)&v82);
  if (v9 != 1)
  {
    a1(&v90, a2);
    if (v90)
    {
      LODWORD(v87) = 3;
      v88 = "expected 1-d tensor for sparse element values";
      v89[0] = 45;
      v22 = &v87;
      v23 = (char *)v93;
      if (v94 >= v95)
      {
        v77 = v94 + 1;
        if (v93 <= &v87 && (char *)v93 + 24 * v94 > (char *)&v87)
        {
          v78 = (char *)&v87 - (_BYTE *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
          v23 = (char *)v93;
          v22 = (const char ***)((char *)v93 + v78);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
          v22 = &v87;
          v23 = (char *)v93;
        }
      }
      v24 = &v23[24 * v94];
      v25 = *(_OWORD *)v22;
      *((_QWORD *)v24 + 2) = v22[2];
      *(_OWORD *)v24 = v25;
      ++v94;
    }
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
    if (v90)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    if (!v101)
      return v13;
    v26 = __p;
    if (__p)
    {
      v27 = v100;
      v28 = __p;
      if (v100 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v100 = v26;
      operator delete(v28);
    }
    v17 = v97;
    if (!v97)
      goto LABEL_78;
    v29 = v98;
    v19 = v97;
    if (v98 == v97)
      goto LABEL_77;
    do
    {
      v31 = *--v29;
      v30 = v31;
      *v29 = 0;
      if (v31)
        MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
    }
    while (v29 != v17);
    goto LABEL_76;
  }
  v81 = *(_OWORD *)(a5 + 8);
  v80[0] = (mlir::ShapedType *)v86;
  v80[1] = (mlir::ShapedType *)&v84;
  v80[2] = (mlir::ShapedType *)&v81;
  v80[3] = (mlir::ShapedType *)&v82;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v84);
  v11 = v10;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v81);
  if (v12 == 2)
  {
    if (*(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v81) + 8) != v11)
    {
      mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
      if (v90)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
      if (!v101)
        return v13;
      v14 = __p;
      if (__p)
      {
        v15 = v100;
        v16 = __p;
        if (v100 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v100 = v14;
        operator delete(v16);
      }
      v17 = v97;
      if (!v97)
        goto LABEL_78;
      v18 = v98;
      v19 = v97;
      if (v98 == v97)
        goto LABEL_77;
      do
      {
        v21 = *--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
      }
      while (v18 != v17);
      goto LABEL_76;
    }
  }
  else if (v12 != 1 || v11 != 1)
  {
    mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
    if (v90)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    if (!v101)
      return v13;
    v44 = __p;
    if (__p)
    {
      v45 = v100;
      v46 = __p;
      if (v100 != __p)
      {
        do
          v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        v46 = __p;
      }
      v100 = v44;
      operator delete(v46);
    }
    v17 = v97;
    if (!v97)
      goto LABEL_78;
    v47 = v98;
    v19 = v97;
    if (v98 == v97)
      goto LABEL_77;
    do
    {
      v49 = *--v47;
      v48 = v49;
      *v47 = 0;
      if (v49)
        MEMORY[0x20BD002D4](v48, 0x1000C8077774924);
    }
    while (v47 != v17);
    goto LABEL_76;
  }
  v32 = *(_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v81);
  if (v32 == *(_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v82))
  {
    v79[0] = v86;
    v79[1] = &v84;
    mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(&v83, (uint64_t)&v90);
    v33 = v90;
    v34 = v91;
    v35 = v92;
    if (*(_BYTE *)(v83 + 24))
    {
      if (v91)
        v36 = 0;
      else
        v36 = v92;
      v87 = (const char **)v89;
      HIDWORD(v88) = 6;
      v37 = *(_QWORD *)(v90 + 8 * v36);
      if (v11 < 7)
      {
        if (v11)
        {
          v89[0] = *(_QWORD *)(v90 + 8 * v36);
          if (v11 != 1)
          {
            v89[1] = v37;
            if (v11 != 2)
            {
              v89[2] = v37;
              if (v11 != 3)
              {
                v89[3] = v37;
                if (v11 != 4)
                {
                  v89[4] = v37;
                  if (v11 != 5)
                    v89[5] = v37;
                }
              }
            }
          }
        }
        v38 = (const char **)v89;
      }
      else
      {
        LODWORD(v88) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v11, 8);
        v38 = v87;
        v39 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        v40 = v11 & 3;
        v41 = vdupq_n_s64(v37);
        v42 = v87 + 2;
        v43 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          *((int64x2_t *)v42 - 1) = v41;
          *(int64x2_t *)v42 = v41;
          v42 += 4;
          v43 -= 4;
        }
        while (v43);
        if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
        {
          do
          {
            v38[v39++] = (const char *)v37;
            --v40;
          }
          while (v40);
        }
      }
      LODWORD(v88) = v11;
      if ((mlir::ElementsAttr::isValidIndex(v84, v85, v38, v11) & 1) != 0)
      {
        v13 = 1;
      }
      else
      {
        mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()((uint64_t)&v90, v79, 0, v87, v88);
        v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
        if (v90)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
        if (v101)
        {
          v61 = __p;
          if (__p)
          {
            v62 = v100;
            v63 = __p;
            if (v100 != __p)
            {
              do
                v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
              while (v62 != v61);
              v63 = __p;
            }
            v100 = v61;
            operator delete(v63);
          }
          v64 = v97;
          if (v97)
          {
            v65 = v98;
            v66 = v97;
            if (v98 != v97)
            {
              do
              {
                v68 = *--v65;
                v67 = v68;
                *v65 = 0;
                if (v68)
                  MEMORY[0x20BD002D4](v67, 0x1000C8077774924);
              }
              while (v65 != v64);
              v66 = v97;
            }
            v98 = v64;
            operator delete(v66);
          }
          if (v93 != v96)
            free(v93);
        }
      }
      v56 = v87;
      if (v87 != v89)
        goto LABEL_79;
    }
    else
    {
      if (!v32)
        return 1;
      v58 = 0;
      while (1)
      {
        v59 = v34 ? 0 : v35;
        v60 = (const char **)(v33 + 8 * v59);
        if ((mlir::ElementsAttr::isValidIndex(v84, v85, v60, v11) & 1) == 0)
          break;
        ++v58;
        v35 += v11;
        if (v32 == v58)
          return 1;
      }
      mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()((uint64_t)&v90, v79, v58, v60, v11);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
      if (v90)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
      if (v101)
      {
        v69 = __p;
        if (__p)
        {
          v70 = v100;
          v71 = __p;
          if (v100 != __p)
          {
            do
              v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            v71 = __p;
          }
          v100 = v69;
          operator delete(v71);
        }
        v72 = v97;
        if (v97)
        {
          v73 = v98;
          v74 = v97;
          if (v98 != v97)
          {
            do
            {
              v76 = *--v73;
              v75 = v76;
              *v73 = 0;
              if (v76)
                MEMORY[0x20BD002D4](v75, 0x1000C8077774924);
            }
            while (v73 != v72);
            v74 = v97;
          }
          v98 = v72;
          operator delete(v74);
        }
        v56 = (const char **)v93;
        if (v93 != v96)
          goto LABEL_79;
      }
    }
    return v13;
  }
  mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
  if (v90)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
  if (!v101)
    return v13;
  v50 = __p;
  if (__p)
  {
    v51 = v100;
    v52 = __p;
    if (v100 != __p)
    {
      do
        v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
      while (v51 != v50);
      v52 = __p;
    }
    v100 = v50;
    operator delete(v52);
  }
  v17 = v97;
  if (v97)
  {
    v53 = v98;
    v19 = v97;
    if (v98 == v97)
      goto LABEL_77;
    do
    {
      v55 = *--v53;
      v54 = v55;
      *v53 = 0;
      if (v55)
        MEMORY[0x20BD002D4](v54, 0x1000C8077774924);
    }
    while (v53 != v17);
LABEL_76:
    v19 = v97;
LABEL_77:
    v98 = v17;
    operator delete(v19);
  }
LABEL_78:
  v56 = (const char **)v93;
  if (v93 != v96)
LABEL_79:
    free(v56);
  return v13;
}

void mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()(uint64_t a1, mlir::ShapedType **a2)
{
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  const char **Shape;
  uint64_t v9;
  const char **v10;
  char *v11;
  char *v12;
  __int128 v13;
  const char **v14;
  uint64_t v15;
  const char **v16;
  char *v17;
  char *v18;
  __int128 v19;
  const char **v20;
  uint64_t v21;
  uint64_t v22;
  const char **v23;
  char *v24;
  char *v25;
  __int128 v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *__src;
  unsigned int v63;
  unsigned int v64;
  _BYTE v65[96];
  __int128 v66;
  uint64_t v67;
  __int128 __p;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr, _QWORD))*a2)(&v59, *((_QWORD *)*a2 + 1));
  if (v59)
  {
    LODWORD(v56) = 3;
    v57 = "expected shape ([";
    v58 = 17;
    v4 = &v56;
    v5 = (char *)__src;
    if (v63 >= v64)
    {
      v48 = v63 + 1;
      if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v48, 24);
        v5 = (char *)__src;
        v4 = (const char **)((char *)__src + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v48, 24);
        v4 = &v56;
        v5 = (char *)__src;
      }
    }
    v6 = &v5[24 * v63];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v63;
  }
  Shape = (const char **)mlir::ShapedType::getShape(a2[1]);
  if (v59)
  {
    v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(Shape, &Shape[v9], (uint64_t)&v60, (uint64_t)&v60, &v56);
    if (v59)
    {
      LODWORD(v56) = 3;
      v57 = "]); inferred shape of indices literal ([";
      v58 = 40;
      v10 = &v56;
      v11 = (char *)__src;
      if (v63 >= v64)
      {
        v49 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v49, 24);
          v11 = (char *)__src;
          v10 = (const char **)((char *)__src + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v49, 24);
          v10 = &v56;
          v11 = (char *)__src;
        }
      }
      v12 = &v11[24 * v63];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = v10[2];
      *(_OWORD *)v12 = v13;
      ++v63;
    }
  }
  v14 = (const char **)mlir::ShapedType::getShape(a2[2]);
  if (v59)
  {
    v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v14, &v14[v15], (uint64_t)&v60, (uint64_t)&v60, &v56);
    if (v59)
    {
      LODWORD(v56) = 3;
      v57 = "]); inferred shape of values literal ([";
      v58 = 39;
      v16 = &v56;
      v17 = (char *)__src;
      if (v63 >= v64)
      {
        v50 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v50, 24);
          v17 = (char *)__src;
          v16 = (const char **)((char *)__src + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v50, 24);
          v16 = &v56;
          v17 = (char *)__src;
        }
      }
      v18 = &v17[24 * v63];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v63;
    }
  }
  v20 = (const char **)mlir::ShapedType::getShape(a2[3]);
  v22 = v59;
  if (v59)
  {
    v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v20, &v20[v21], (uint64_t)&v60, (uint64_t)&v60, &v56);
    v22 = v59;
    if (v59)
    {
      LODWORD(v56) = 3;
      v57 = "])";
      v58 = 2;
      v23 = &v56;
      v24 = (char *)__src;
      if (v63 >= v64)
      {
        v51 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          v55 = (char *)&v56 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v51, 24);
          v24 = (char *)__src;
          v23 = (const char **)((char *)__src + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v51, 24);
          v23 = &v56;
          v24 = (char *)__src;
        }
      }
      v25 = &v24[24 * v63];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = v23[2];
      *(_OWORD *)v25 = v26;
      ++v63;
      v22 = v59;
    }
  }
  *(_QWORD *)a1 = v22;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v70)
  {
    *(_QWORD *)(a1 + 8) = v60;
    v27 = v63;
    *(_DWORD *)(a1 + 16) = v61;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)"";
    if (!(_DWORD)v27 || &v59 == (uint64_t *)a1)
    {
      v29 = 1;
      goto LABEL_29;
    }
    if (__src != v65)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v28 = v64;
      *(_DWORD *)(a1 + 32) = v27;
      *(_DWORD *)(a1 + 36) = v28;
      __src = v65;
      v64 = 0;
      v29 = 1;
LABEL_28:
      v63 = 0;
LABEL_29:
      v31 = v69;
      *(_QWORD *)(a1 + 152) = v67;
      *(_OWORD *)(a1 + 136) = v66;
      v66 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(_QWORD *)(a1 + 176) = v31;
      v67 = 0;
      __p = 0uLL;
      v69 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v29)
      {
        v32 = (_QWORD *)__p;
        if ((_QWORD)__p)
        {
          v33 = (_QWORD *)*((_QWORD *)&__p + 1);
          v34 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v32;
          operator delete(v34);
        }
        v35 = (_QWORD *)v66;
        if ((_QWORD)v66)
        {
          v36 = (_QWORD *)*((_QWORD *)&v66 + 1);
          v37 = (void *)v66;
          if (*((_QWORD *)&v66 + 1) != (_QWORD)v66)
          {
            do
            {
              v39 = *--v36;
              v38 = v39;
              *v36 = 0;
              if (v39)
                MEMORY[0x20BD002D4](v38, 0x1000C8077774924);
            }
            while (v36 != v35);
            v37 = (void *)v66;
          }
          *((_QWORD *)&v66 + 1) = v35;
          operator delete(v37);
        }
        if (__src != v65)
          free(__src);
        v70 = 0;
      }
      goto LABEL_46;
    }
    if (v27 < 5)
    {
      v30 = v27;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v27, 24);
      v30 = v63;
      if (!v63)
        goto LABEL_27;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v30);
LABEL_27:
    *(_DWORD *)(a1 + 32) = v27;
    v29 = v70;
    goto LABEL_28;
  }
LABEL_46:
  mlir::InFlightDiagnostic::abandon(&v59);
  if (v59)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
  if (v70)
  {
    v40 = (_QWORD *)__p;
    if ((_QWORD)__p)
    {
      v41 = (_QWORD *)*((_QWORD *)&__p + 1);
      v42 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v40;
      operator delete(v42);
    }
    v43 = (_QWORD *)v66;
    if ((_QWORD)v66)
    {
      v44 = (_QWORD *)*((_QWORD *)&v66 + 1);
      v45 = (void *)v66;
      if (*((_QWORD *)&v66 + 1) != (_QWORD)v66)
      {
        do
        {
          v47 = *--v44;
          v46 = v47;
          *v44 = 0;
          if (v47)
            MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
        }
        while (v44 != v43);
        v45 = (void *)v66;
      }
      *((_QWORD *)&v66 + 1) = v43;
      operator delete(v45);
    }
    if (__src != v65)
      free(__src);
  }
}

void mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()(uint64_t a1, _QWORD **a2, unsigned int a3, const char **a4, uint64_t a5)
{
  uint64_t v10;
  const char **v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  const char **v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  const char **v21;
  char *v22;
  char *v23;
  __int128 v24;
  const char **v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  const char **v30;
  char *v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  void *__src;
  unsigned int v74;
  unsigned int v75;
  _BYTE v76[96];
  __int128 v77;
  uint64_t v78;
  __int128 __p;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  ((void (*)(uint64_t *__return_ptr, _QWORD))**a2)(&v70, (*a2)[1]);
  v10 = v70;
  if (v70)
  {
    LODWORD(v67) = 3;
    v68 = "sparse index #";
    v69 = 14;
    v11 = &v67;
    v12 = (char *)__src;
    if (v74 >= v75)
    {
      v55 = v74 + 1;
      if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
      {
        v62 = (char *)&v67 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v55, 24);
        v12 = (char *)__src;
        v11 = (const char **)((char *)__src + v62);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v55, 24);
        v11 = &v67;
        v12 = (char *)__src;
      }
    }
    v13 = &v12[24 * v74];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    v15 = ++v74;
    v10 = v70;
    if (v70)
    {
      LODWORD(v67) = 5;
      v68 = (const char *)a3;
      v16 = &v67;
      v17 = (char *)__src;
      if (v15 >= v75)
      {
        v56 = v15 + 1;
        v57 = (char *)__src + 24 * v15 > (char *)&v67;
        if (__src <= &v67 && v57)
        {
          v63 = (char *)&v67 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v56, 24);
          v17 = (char *)__src;
          v16 = (const char **)((char *)__src + v63);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v56, 24);
          v16 = &v67;
          v17 = (char *)__src;
        }
      }
      v18 = &v17[24 * v74];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      v20 = ++v74;
      v10 = v70;
      if (v70)
      {
        LODWORD(v67) = 3;
        v68 = " is not contained within the value shape, with index=[";
        v69 = 54;
        v21 = &v67;
        v22 = (char *)__src;
        if (v20 >= v75)
        {
          v58 = v20 + 1;
          v59 = (char *)__src + 24 * v20 > (char *)&v67;
          if (__src <= &v67 && v59)
          {
            v64 = (char *)&v67 - (_BYTE *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v58, 24);
            v22 = (char *)__src;
            v21 = (const char **)((char *)__src + v64);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v58, 24);
            v21 = &v67;
            v22 = (char *)__src;
          }
        }
        v23 = &v22[24 * v74];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = v21[2];
        *(_OWORD *)v23 = v24;
        ++v74;
        v10 = v70;
        if (v70)
        {
          v67 = ", ";
          llvm::interleave<unsigned long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(llvm::ArrayRef<unsigned long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(void)#1},void>(a4, &a4[a5], (uint64_t)&v71, (uint64_t)&v71, &v67);
          v10 = v70;
          if (v70)
          {
            LODWORD(v67) = 3;
            v68 = "], and type=";
            v69 = 12;
            v25 = &v67;
            v26 = (char *)__src;
            if (v74 >= v75)
            {
              v60 = v74 + 1;
              if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
              {
                v65 = (char *)&v67 - (_BYTE *)__src;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v60, 24);
                v26 = (char *)__src;
                v25 = (const char **)((char *)__src + v65);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v60, 24);
                v25 = &v67;
                v26 = (char *)__src;
              }
            }
            v27 = &v26[24 * v74];
            v28 = *(_OWORD *)v25;
            *((_QWORD *)v27 + 2) = v25[2];
            *(_OWORD *)v27 = v28;
            ++v74;
            v10 = v70;
            if (v70)
            {
              v29 = *a2[1];
              v30 = &v67;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v29);
              v31 = (char *)__src;
              if (v74 >= v75)
              {
                v61 = v74 + 1;
                if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
                {
                  v66 = (char *)&v67 - (_BYTE *)__src;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v61, 24);
                  v31 = (char *)__src;
                  v30 = (const char **)((char *)__src + v66);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v61, 24);
                  v30 = &v67;
                  v31 = (char *)__src;
                }
              }
              v32 = &v31[24 * v74];
              v33 = *(_OWORD *)v30;
              *((_QWORD *)v32 + 2) = v30[2];
              *(_OWORD *)v32 = v33;
              ++v74;
              v10 = v70;
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a1 = v10;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v81)
  {
    *(_QWORD *)(a1 + 8) = v71;
    v34 = v74;
    *(_DWORD *)(a1 + 16) = v72;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)"";
    if (!(_DWORD)v34 || &v70 == (uint64_t *)a1)
    {
      v36 = 1;
      goto LABEL_26;
    }
    if (__src != v76)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v35 = v75;
      *(_DWORD *)(a1 + 32) = v34;
      *(_DWORD *)(a1 + 36) = v35;
      __src = v76;
      v75 = 0;
      v36 = 1;
LABEL_25:
      v74 = 0;
LABEL_26:
      v38 = v80;
      *(_QWORD *)(a1 + 152) = v78;
      *(_OWORD *)(a1 + 136) = v77;
      v77 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(_QWORD *)(a1 + 176) = v38;
      v78 = 0;
      __p = 0uLL;
      v80 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v36)
      {
        v39 = (_QWORD *)__p;
        if ((_QWORD)__p)
        {
          v40 = (_QWORD *)*((_QWORD *)&__p + 1);
          v41 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            v41 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v39;
          operator delete(v41);
        }
        v42 = (_QWORD *)v77;
        if ((_QWORD)v77)
        {
          v43 = (_QWORD *)*((_QWORD *)&v77 + 1);
          v44 = (void *)v77;
          if (*((_QWORD *)&v77 + 1) != (_QWORD)v77)
          {
            do
            {
              v46 = *--v43;
              v45 = v46;
              *v43 = 0;
              if (v46)
                MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
            }
            while (v43 != v42);
            v44 = (void *)v77;
          }
          *((_QWORD *)&v77 + 1) = v42;
          operator delete(v44);
        }
        if (__src != v76)
          free(__src);
        v81 = 0;
      }
      goto LABEL_43;
    }
    if (v34 < 5)
    {
      v37 = v34;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v34, 24);
      v37 = v74;
      if (!v74)
        goto LABEL_24;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v37);
LABEL_24:
    *(_DWORD *)(a1 + 32) = v34;
    v36 = v81;
    goto LABEL_25;
  }
LABEL_43:
  mlir::InFlightDiagnostic::abandon(&v70);
  if (v70)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
  if (v81)
  {
    v47 = (_QWORD *)__p;
    if ((_QWORD)__p)
    {
      v48 = (_QWORD *)*((_QWORD *)&__p + 1);
      v49 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
        while (v48 != v47);
        v49 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v47;
      operator delete(v49);
    }
    v50 = (_QWORD *)v77;
    if ((_QWORD)v77)
    {
      v51 = (_QWORD *)*((_QWORD *)&v77 + 1);
      v52 = (void *)v77;
      if (*((_QWORD *)&v77 + 1) != (_QWORD)v77)
      {
        do
        {
          v54 = *--v51;
          v53 = v54;
          *v51 = 0;
          if (v54)
            MEMORY[0x20BD002D4](v53, 0x1000C8077774924);
        }
        while (v51 != v50);
        v52 = (void *)v77;
      }
      *((_QWORD *)&v77 + 1) = v50;
      operator delete(v52);
    }
    if (__src != v76)
      free(__src);
  }
}

_QWORD *mlir::DistinctAttr::create(uint64_t a1)
{
  uint64_t Context;
  uint64_t v3;

  v3 = a1;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v3);
  return mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(Context, &v3);
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 64)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v14);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

__n128 llvm::interleave<unsigned long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(llvm::ArrayRef<unsigned long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(void)#1},void>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v12;
  unint64_t *v13;
  const char *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __n128 result;
  const char **v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  __int128 v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  BOOL v35;
  char *v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  unint64_t *v43;
  int v44;
  const char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a1 != a2)
  {
    v47 = v5;
    v48 = v6;
    v13 = (unint64_t *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 16);
    v14 = *a1;
    v44 = 5;
    v45 = v14;
    v15 = *(unsigned int *)(a3 + 24);
    v16 = (__n128 *)&v44;
    if (v15 >= *(_DWORD *)(a3 + 28))
    {
      v37 = v15 + 1;
      v38 = v12 + 24 * v15 > (unint64_t)&v44;
      if (v12 <= (unint64_t)&v44 && v38)
      {
        v39 = (char *)&v44 - v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        v12 = *(_QWORD *)(a3 + 16);
        v16 = (__n128 *)&v39[v12];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        v12 = *(_QWORD *)(a3 + 16);
        v16 = (__n128 *)&v44;
      }
    }
    v17 = (__n128 *)(v12 + 24 * *(unsigned int *)(a3 + 24));
    result = *v16;
    v17[1].n128_u64[0] = v16[1].n128_u64[0];
    *v17 = result;
    ++*(_DWORD *)(a3 + 24);
    v19 = a1 + 1;
    if (a1 + 1 != a2)
    {
      v42 = (void *)(a4 + 32);
      v43 = (unint64_t *)(a4 + 16);
      v41 = (void *)(a3 + 32);
      do
      {
        v20 = *a5;
        if (*a5)
        {
          v21 = strlen(*a5);
          v44 = 3;
          v45 = v20;
          v46 = v21;
          v22 = *(unsigned int *)(a4 + 24);
          v23 = *(_QWORD *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28))
            goto LABEL_9;
        }
        else
        {
          v44 = 3;
          v45 = 0;
          v46 = 0;
          v22 = *(unsigned int *)(a4 + 24);
          v23 = *(_QWORD *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28))
            goto LABEL_9;
        }
        v32 = v22 + 1;
        v33 = v23 + 24 * v22 > (unint64_t)&v44;
        if (v23 > (unint64_t)&v44 || !v33)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
          v23 = *v43;
LABEL_9:
          v24 = &v44;
          goto LABEL_10;
        }
        v40 = (char *)&v44 - v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
        v23 = *v43;
        v24 = (int *)&v40[*v43];
LABEL_10:
        v25 = v23 + 24 * *(unsigned int *)(a4 + 24);
        v26 = *(_OWORD *)v24;
        *(_QWORD *)(v25 + 16) = *((_QWORD *)v24 + 2);
        *(_OWORD *)v25 = v26;
        ++*(_DWORD *)(a4 + 24);
        v27 = *v19;
        v44 = 5;
        v45 = v27;
        v28 = *(unsigned int *)(a3 + 24);
        v29 = *(_QWORD *)(a3 + 16);
        if (v28 >= *(_DWORD *)(a3 + 28))
        {
          v34 = v28 + 1;
          v35 = v29 + 24 * v28 > (unint64_t)&v44;
          if (v29 <= (unint64_t)&v44 && v35)
          {
            v36 = (char *)&v44 - v29;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
            v29 = *v13;
            v30 = (__n128 *)&v36[*v13];
            goto LABEL_12;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
          v29 = *v13;
        }
        v30 = (__n128 *)&v44;
LABEL_12:
        v31 = (__n128 *)(v29 + 24 * *(unsigned int *)(a3 + 24));
        result = *v30;
        v31[1].n128_u64[0] = v30[1].n128_u64[0];
        *v31 = result;
        ++*(_DWORD *)(a3 + 24);
        ++v19;
      }
      while (v19 != a2);
    }
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  unsigned int v9;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  _OWORD v16[4];
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15[0] = a2;
  v15[1] = a3;
  v14 = *a5;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v8 = &unk_254519000;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      v8 = (_QWORD *)&unk_254519000;
    }
  }
  v19 = v8[373];
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v16, 0, v16, (char *)v17, &v14);
  v13 = &v14;
  *(_QWORD *)&v16[0] = &v14;
  *((_QWORD *)&v16[0] + 1) = v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, unint64_t *a5)
{
  unint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v17 = a2;
  v7 = *a5;
  v9 = &unk_254519000;
  if ((v8 & 1) == 0)
  {
    v15 = *a5;
    v16 = a3;
    v9 = &unk_254519000;
    v7 = v15;
    a3 = v16;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v9 = (_QWORD *)&unk_254519000;
      v7 = v15;
      a3 = v16;
    }
  }
  v10 = (v9[373] + 8 * v7) ^ HIDWORD(v7);
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v17, a3, (unint64_t)a4, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ ((0x9DDFEA08EB382D69 * v10) >> 47) ^ (0x9DDFEA08EB382D69 * v10))) ^ ((0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ ((0x9DDFEA08EB382D69 * v10) >> 47) ^ (0x9DDFEA08EB382D69 * v10))) >> 47)));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v17, v11, a4);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void (*v14)(uint64_t, _QWORD *);

  v4 = **a1;
  a2[10] += 16;
  v5 = *a2;
  v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v7 = v6 + 16 > a2[1] - *a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    v12 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
      goto LABEL_13;
  }
  else
  {
    v12 = (_QWORD *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
LABEL_13:
      v14(v13[1], v12);
  }
  return v12;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;
  _QWORD v16[2];
  __int128 *v17;
  __int128 v18;
  _QWORD v19[2];

  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v8 = &unk_254519000;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      v8 = (_QWORD *)&unk_254519000;
    }
  }
  v9 = v8[373];
  v10 = llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>((_DWORD *)v18, (_DWORD *)(v18 + 8 * *((_QWORD *)&v18 + 1)));
  v11 = v9 ^ HIDWORD(v10);
  v12 = 0x9DDFEA08EB382D69 * ((8 * v10 + 8) ^ v11);
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 32) >> 15) ^ (-348639895* (v11 ^ (v12 >> 47) ^ v12))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>(_DWORD *a1, _DWORD *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v50;
  __int128 *v51;
  char v52;
  char v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  BOOL v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _DWORD *v78;
  _DWORD *v79;
  int v80;
  int v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _QWORD v88[2];

  v88[1] = *MEMORY[0x24BDAC8D0];
  if ((v2 & 1) == 0)
  {
    v78 = a1;
    v79 = a2;
    a2 = v79;
    v81 = v80;
    a1 = v78;
    if (v81)
    {
      v82 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v82 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v82;
      a1 = v78;
      a2 = v79;
    }
  }
  if (a1 == a2)
  {
    v72 = 0;
  }
  else
  {
    v3 = (*a1 >> 4) ^ (*a1 >> 9);
    *(_QWORD *)&v84 = v3;
    if (a1 + 2 == a2)
    {
      v72 = 8;
    }
    else
    {
      v4 = (a1[2] >> 4) ^ (a1[2] >> 9);
      *((_QWORD *)&v84 + 1) = v4;
      if (a1 + 4 == a2)
      {
        v72 = 16;
      }
      else
      {
        v5 = (a1[4] >> 4) ^ (a1[4] >> 9);
        *(_QWORD *)&v85 = v5;
        if (a1 + 6 == a2)
        {
          v72 = 24;
        }
        else
        {
          v6 = (a1[6] >> 4) ^ (a1[6] >> 9);
          *((_QWORD *)&v85 + 1) = v6;
          if (a1 + 8 == a2)
          {
            v72 = 32;
          }
          else
          {
            v7 = (a1[8] >> 4) ^ (a1[8] >> 9);
            *(_QWORD *)&v86 = v7;
            if (a1 + 10 == a2)
            {
              v72 = 40;
            }
            else
            {
              v8 = (a1[10] >> 4) ^ (a1[10] >> 9);
              *((_QWORD *)&v86 + 1) = v8;
              if (a1 + 12 == a2)
              {
                v72 = 48;
              }
              else
              {
                v9 = (a1[12] >> 4) ^ (a1[12] >> 9);
                *(_QWORD *)&v87 = v9;
                if (a1 + 14 == a2)
                {
                  v72 = 56;
                }
                else
                {
                  v10 = (a1[14] >> 4) ^ (a1[14] >> 9);
                  *((_QWORD *)&v87 + 1) = v10;
                  v11 = a1 + 16;
                  if (a1 + 16 != a2)
                  {
                    v12 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
                    v13 = 0x9DDFEA08EB382D69
                        * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                                    * (v12 ^ (0xB492B66FBE98F273
                                                                                            * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
                    v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
                    v15 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69
                          * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    v16 = __ROR8__(v12 - 0x622015F714C7D297 * (v15 ^ (v15 >> 47)), 33);
                    v17 = 0xB492B66FBE98F273 * v16;
                    v18 = v14 + v7 - 0x4B6D499041670D8DLL * v16;
                    v19 = v8 + v9 + v18 + v10;
                    v20 = __ROR8__(v8 + v9 + v18, 44) + v18;
                    v21 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
                    v22 = v21
                        + v8
                        - 0x4B6D499041670D8DLL
                        * __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed+ v9- 0x4B6D499041670D8DLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
                    v23 = v20 + __ROR8__(v22 + v5 + v10 + v18, 21);
                    v24 = v3 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
                    v25 = v24 + v4 + v5;
                    v26 = v25 + v6;
                    v27 = (0xB492B66FBE98F273
                         * __ROR8__(v21 + llvm::hashing::detail::get_execution_seed(void)::seed + v4, 37)) ^ v14;
                    v28 = __ROR8__(v25, 44) + v24 + __ROR8__(v27 + v12 + v24 + v6, 21);
                    v83 = (char *)&v86;
                    v29 = 64;
                    while (1)
                    {
                      *(_QWORD *)&v84 = (*v11 >> 4) ^ (*v11 >> 9);
                      v37 = v11 + 2 == a2;
                      if (v11 + 2 == a2)
                      {
                        v39 = 0;
                        v40 = 8;
                        v11 += 2;
                        v41 = (char *)&v84 + 8;
                      }
                      else
                      {
                        *((_QWORD *)&v84 + 1) = (v11[2] >> 4) ^ (v11[2] >> 9);
                        v37 = v11 + 4 == a2;
                        if (v11 + 4 == a2)
                        {
                          v39 = 8;
                          v40 = 16;
                          v11 += 4;
                          v41 = (char *)&v85;
                        }
                        else
                        {
                          *(_QWORD *)&v85 = (v11[4] >> 4) ^ (v11[4] >> 9);
                          v37 = v11 + 6 == a2;
                          if (v11 + 6 == a2)
                          {
                            v39 = 16;
                            v40 = 24;
                            v11 += 6;
                            v41 = (char *)&v85 + 8;
                          }
                          else
                          {
                            *((_QWORD *)&v85 + 1) = (v11[6] >> 4) ^ (v11[6] >> 9);
                            v37 = v11 + 8 == a2;
                            if (v11 + 8 == a2)
                            {
                              v39 = 24;
                              v40 = 32;
                              v11 += 8;
                              v41 = v83;
                            }
                            else
                            {
                              *(_QWORD *)&v86 = (v11[8] >> 4) ^ (v11[8] >> 9);
                              v37 = v11 + 10 == a2;
                              if (v11 + 10 == a2)
                              {
                                v39 = 32;
                                v40 = 40;
                                v11 += 10;
                                v41 = (char *)&v86 + 8;
                              }
                              else
                              {
                                *((_QWORD *)&v86 + 1) = (v11[10] >> 4) ^ (v11[10] >> 9);
                                v37 = v11 + 12 == a2;
                                if (v11 + 12 == a2)
                                {
                                  v39 = 40;
                                  v40 = 48;
                                  v11 += 12;
                                  v41 = (char *)&v87;
                                }
                                else
                                {
                                  *(_QWORD *)&v87 = (v11[12] >> 4) ^ (v11[12] >> 9);
                                  v37 = v11 + 14 == a2;
                                  if (v11 + 14 == a2)
                                  {
                                    v39 = 48;
                                    v40 = 56;
                                    v11 += 14;
                                    v41 = (char *)&v87 + 8;
                                  }
                                  else
                                  {
                                    v38 = (v11[14] >> 4) ^ (v11[14] >> 9);
                                    v11 += 16;
                                    *((_QWORD *)&v87 + 1) = v38;
                                    v37 = v11 == a2;
                                    v39 = 56;
                                    v40 = 64;
                                    v41 = (char *)v88;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if ((v40 & 0x38) == 0)
                        goto LABEL_12;
                      v42 = 56 - v39;
                      v43 = v40;
                      if (v40 != 56 - v39)
                      {
                        do
                        {
                          v50 = v43;
                          v43 = v42;
                          v42 = v50 % v42;
                        }
                        while (v42);
                        if (v43)
                        {
                          v51 = (__int128 *)((char *)&v84 + v43);
                          do
                          {
                            v53 = *((_BYTE *)v51 - 1);
                            v51 = (__int128 *)((char *)v51 - 1);
                            v52 = v53;
                            v54 = (__int128 *)((char *)v51 + v40);
                            v55 = v51;
                            do
                            {
                              v56 = v55;
                              v55 = v54;
                              *(_BYTE *)v56 = *(_BYTE *)v54;
                              v57 = v40 < (char *)v88 - (char *)v54;
                              v58 = (char *)&v84 + v40 - ((char *)v88 - (char *)v54);
                              v54 = (__int128 *)((char *)v54 + v40);
                              if (!v57)
                                v54 = (__int128 *)v58;
                            }
                            while (v54 != v51);
                            *(_BYTE *)v55 = v52;
                          }
                          while (v51 != &v84);
                        }
                        goto LABEL_12;
                      }
                      v44 = v39 | 7;
                      if (55 - v39 < (v39 | 7uLL))
                        v44 = 55 - v39;
                      v45 = (char *)&v84;
                      if (&v84 < (__int128 *)((char *)&v84 + v39 + v44 + 9))
                      {
                        v46 = v40;
                        if (v41 < (char *)&v84 + v44 + 1)
                          goto LABEL_34;
                      }
                      if (v44 >= 0x1F)
                      {
                        v60 = v44 + 1;
                        v59 = (v44 + 1) & 0x60;
                        v61 = (__int128 *)((char *)&v84 + v40);
                        v62 = v84;
                        v63 = v85;
                        v64 = *(__int128 *)((char *)&v84 + v40 + 16);
                        v84 = *(__int128 *)((char *)&v84 + v40);
                        v85 = v64;
                        *v61 = v62;
                        v61[1] = v63;
                        if (v59 != 32)
                        {
                          v65 = (__int128 *)((char *)&v86 + v40);
                          v66 = v86;
                          v67 = v87;
                          v68 = *(__int128 *)((char *)&v86 + v40 + 16);
                          v86 = *(__int128 *)((char *)&v86 + v40);
                          v87 = v68;
                          *v65 = v66;
                          v65[1] = v67;
                        }
                        if (v60 == v59)
                          goto LABEL_12;
                        if ((v60 & 0x18) == 0)
                        {
                          v45 = (char *)&v84 + v59;
                          v46 = v40 + v59;
LABEL_34:
                          v47 = v45 + 1;
                          do
                          {
                            v48 = *(v47 - 1);
                            *(v47 - 1) = *((_BYTE *)&v84 + v46);
                            *((_BYTE *)&v84 + v46) = v48;
                            if (v47 == v41)
                              break;
                            ++v47;
                          }
                          while (v46++ != 63);
                          goto LABEL_12;
                        }
                      }
                      else
                      {
                        v59 = 0;
                      }
                      v69 = (uint64_t *)((char *)&v84 + v59);
                      v70 = v44 - v59 + 1;
                      do
                      {
                        v71 = *v69;
                        *v69 = v69[(unint64_t)v40 / 8];
                        v69[(unint64_t)v40 / 8] = v71;
                        ++v69;
                        v70 -= 8;
                      }
                      while (v70);
LABEL_12:
                      v30 = v22 + v26 + v17 + *((_QWORD *)&v84 + 1);
                      v22 = *((_QWORD *)&v86 + 1) + v26 - 0x4B6D499041670D8DLL * __ROR8__(v22 + v28 + v87, 42);
                      v31 = v84 - 0x4B6D499041670D8DLL * v28;
                      v32 = v31 + *((_QWORD *)&v84 + 1) + v85;
                      v33 = __ROR8__(v27 + v19, 33);
                      v34 = (0xB492B66FBE98F273 * __ROR8__(v30, 37)) ^ v23;
                      v28 = __ROR8__(v32, 44) + v31 + __ROR8__(v34 + v19 + v31 + *((_QWORD *)&v85 + 1), 21);
                      v17 = 0xB492B66FBE98F273 * v33;
                      v35 = 0xB492B66FBE98F273 * v33 + v23 + v86;
                      v36 = *((_QWORD *)&v86 + 1) + v87 + v35;
                      v26 = v32 + *((_QWORD *)&v85 + 1);
                      v23 = __ROR8__(v22 + v85 + v35 + *((_QWORD *)&v87 + 1), 21) + v35 + __ROR8__(v36, 44);
                      v19 = v36 + *((_QWORD *)&v87 + 1);
                      v29 += v40;
                      v27 = v34;
                      if (v37)
                      {
                        v73 = 0x9DDFEA08EB382D69
                            * (v19 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v19)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v19)));
                        v74 = 0x9DDFEA08EB382D69
                            * (v23 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v23)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v23)));
                        v75 = 0x9DDFEA08EB382D69 * (v74 ^ (v74 >> 47))
                            - 0x4B6D499041670D8DLL * ((v29 ^ (v29 >> 47)) + v33);
                        v76 = 0x9DDFEA08EB382D69
                            * (v75 ^ (v34
                                    - 0x4B6D499041670D8DLL * (v22 ^ (v22 >> 47))
                                    - 0x622015F714C7D297 * (v73 ^ (v73 >> 47))));
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v75 ^ (v76 >> 47) ^ v76)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v75 ^ (v76 >> 47) ^ v76)) >> 47));
                      }
                    }
                  }
                  v72 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v84, v72, llvm::hashing::detail::get_execution_seed(void)::seed);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1])
    return 0;
  if (!v2)
    return 1;
  v3 = *(uint64_t **)(a2 + 8);
  v4 = **a1;
  v5 = 8 * (_QWORD)v2 - 8;
  do
  {
    v7 = *v4++;
    v6 = v7;
    v8 = *v3++;
    result = v8 == v6;
    v10 = v8 != v6 || v5 == 0;
    v5 -= 8;
  }
  while (!v10);
  return result;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::ArrayAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::ArrayAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  char *buffer;
  uint64_t v21;
  _QWORD *result;

  v3 = a2[1];
  if (v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    v7 = v6;
    if ((unint64_t)(8 * v3 - 8) < 0x18)
    {
      v8 = (_QWORD *)v6;
      v9 = (uint64_t *)v4;
    }
    else
    {
      v8 = (_QWORD *)v6;
      v9 = (uint64_t *)v4;
      if ((unint64_t)(v6 - v4) >= 0x20)
      {
        v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
        v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
        v8 = (_QWORD *)(v6 + v11);
        v9 = (uint64_t *)(v4 + v11);
        v12 = (__int128 *)(v4 + 16);
        v13 = (_OWORD *)(v6 + 16);
        v14 = v10 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v15 = *v12;
          *(v13 - 1) = *(v12 - 1);
          *v13 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 4;
        }
        while (v14);
        if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    do
    {
      v16 = *v9++;
      *v8++ = v16;
    }
    while (v9 != (uint64_t *)(v4 + v5));
  }
  else
  {
    v7 = 0;
  }
LABEL_11:
  *(_QWORD *)(__sz + 80) += 24;
  if (*(_QWORD *)__sz)
    v17 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 24 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v17 = 1;
  if (v17)
  {
    v18 = *(_DWORD *)(__sz + 24) >> 7;
    if (v18 >= 0x1E)
      LOBYTE(v18) = 30;
    v19 = 4096 << v18;
    buffer = (char *)llvm::allocate_buffer(4096 << v18, (std::align_val_t)8uLL);
    v21 = *(unsigned int *)(__sz + 24);
    if (v21 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v21) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v19];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 3;
  *result = 0;
  result[1] = v7;
  result[2] = v3;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v10;
  int v11;
  int v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v17[4];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  if ((v4 & 1) == 0)
  {
    v14 = a1;
    v10 = a2;
    a2 = v10;
    v12 = v11;
    a1 = v14;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a1 = v14;
      a2 = v10;
    }
  }
  v5 = (*a1 >> 4) ^ (*a1 >> 9);
  v20 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v17[0] = v5;
  v15 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v15, (_QWORD *)v17 + 1, (unint64_t)v18, *a2);
  v16 = v15;
  v7 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v16, v6, (unint64_t)v18, v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v17, v16, v8, (char *)v18);
}

_QWORD *mlir::detail::DenseArrayAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  char *buffer;
  uint64_t v20;
  _QWORD *result;

  v3 = *a2;
  v4 = a2[1];
  v6 = (char *)a2[2];
  v5 = a2[3];
  if (!v5)
    goto LABEL_18;
  v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, a2[3], 3);
  if (v5 < 8 || (unint64_t)(v7 - (_QWORD)v6) < 0x20)
  {
    v9 = (_BYTE *)v7;
    v10 = v6;
  }
  else
  {
    if (v5 < 0x20)
    {
      v8 = 0;
      goto LABEL_11;
    }
    v11 = 0;
    v8 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v12 = (_OWORD *)(v7 + v11);
      v13 = *(_OWORD *)&v6[v11 + 16];
      *v12 = *(_OWORD *)&v6[v11];
      v12[1] = v13;
      v11 += 32;
    }
    while (v8 != v11);
    if (v5 == v8)
      goto LABEL_17;
    if ((v5 & 0x18) != 0)
    {
LABEL_11:
      v14 = v5 & 0xFFFFFFFFFFFFFFF8;
      v9 = (_BYTE *)(v7 + (v5 & 0xFFFFFFFFFFFFFFF8));
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        *(_QWORD *)(v7 + v8) = *(_QWORD *)&v6[v8];
        v8 += 8;
      }
      while (v14 != v8);
      if (v5 == v14)
        goto LABEL_17;
      goto LABEL_16;
    }
    v10 = &v6[v8];
    v9 = (_BYTE *)(v7 + v8);
  }
  do
  {
LABEL_16:
    v15 = *v10++;
    *v9++ = v15;
  }
  while (v10 != &v6[v5]);
LABEL_17:
  v6 = (char *)v7;
LABEL_18:
  *(_QWORD *)(__sz + 80) += 40;
  if (*(_QWORD *)__sz)
    v16 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 40 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v16 = 1;
  if (v16)
  {
    v17 = *(_DWORD *)(__sz + 24) >> 7;
    if (v17 >= 0x1E)
      LOBYTE(v17) = 30;
    v18 = 4096 << v17;
    buffer = (char *)llvm::allocate_buffer(4096 << v17, (std::align_val_t)8uLL);
    v20 = *(unsigned int *)(__sz + 24);
    if (v20 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v20 + 1, 8);
      LODWORD(v20) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v20) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v18];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 5;
  *result = 0;
  result[1] = v3;
  result[2] = v4;
  result[3] = v6;
  result[4] = v5;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)*a1
    && *(_QWORD *)(a2 + 16) == v2[1]
    && (v3 = *(_QWORD *)(a2 + 32), v3 == v2[3]))
  {
    return memcmp(*(const void **)(a2 + 24), (const void *)v2[2], v3) == 0;
  }
  else
  {
    return 0;
  }
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::DenseArrayAttrStorage::construct(__sz, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  _QWORD *v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD v16[8];
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  _OWORD v20[3];
  char v21[48];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v18[0] = a2;
  v18[1] = a3;
  mlir::detail::DenseStringElementsAttrStorage::getKey(*(_QWORD *)a5, *(_QWORD *)(a5 + 8), *(const void ***)a6, *(_QWORD *)(a6 + 8), *a7, (uint64_t)v16);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v9 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v9 = &unk_254519000;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v9 = (_QWORD *)&unk_254519000;
    }
  }
  v23 = v9[373];
  *(_QWORD *)&v19 = (v16[0] >> 4) ^ (v16[0] >> 9);
  *((_QWORD *)&v19 + 1) = v17;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v19, 0, (char *)v20, v21);
  v15 = v16;
  *(_QWORD *)&v19 = v16;
  *((_QWORD *)&v19 + 1) = v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

unint64_t mlir::detail::DenseStringElementsAttrStorage::getKey@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v8;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16[2];
  unint64_t v17;

  v8 = result;
  if (a4)
  {
    if (a5)
    {
      result = llvm::hash_value(*a3, (uint64_t)a3[1]);
      *(_QWORD *)a6 = v8;
      *(_QWORD *)(a6 + 8) = a2;
      *(_QWORD *)(a6 + 16) = a3;
      *(_QWORD *)(a6 + 24) = a4;
      *(_QWORD *)(a6 + 32) = result;
      *(_BYTE *)(a6 + 40) = 1;
      return result;
    }
    result = llvm::hash_value(*a3, (uint64_t)a3[1]);
    v11 = result;
    v17 = result;
    if (a4 == 1)
    {
LABEL_6:
      *(_QWORD *)a6 = v8;
      *(_QWORD *)(a6 + 8) = a2;
      *(_QWORD *)(a6 + 16) = a3;
      *(_QWORD *)(a6 + 24) = 1;
      *(_QWORD *)(a6 + 32) = v11;
      *(_BYTE *)(a6 + 40) = 1;
      return result;
    }
    v12 = (size_t)a3[1];
    v13 = 1;
    v14 = 3;
    while (1)
    {
      v15 = &a3[v14];
      if ((const void *)v12 != a3[v14])
        break;
      if (v12)
      {
        result = memcmp(*a3, *(v15 - 1), v12);
        if ((_DWORD)result)
          break;
      }
      ++v13;
      v14 += 2;
      if (a4 == v13)
        goto LABEL_6;
    }
    v16[0] = (uint64_t)(v15 - 1);
    v16[1] = a4 - v13;
    result = llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<llvm::StringRef>>(&v17, v16);
    *(_QWORD *)a6 = v8;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 16) = a3;
    *(_QWORD *)(a6 + 24) = a4;
    *(_QWORD *)(a6 + 32) = result;
  }
  else
  {
    *(_QWORD *)a6 = result;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 16) = a3;
  }
  *(_BYTE *)(a6 + 40) = 0;
  return result;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<llvm::StringRef>>(_QWORD *a1, uint64_t *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t *v7;
  int v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = *a1;
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_range_impl<llvm::StringRef const*>(*a2, *a2 + 16 * a2[1]);
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::StringRef const*>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  char v66;
  uint64_t v68;
  unint64_t *v69;
  char v70;
  char v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  char *v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  {
    v90 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v90 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v90;
  }
  v5 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 == a2)
  {
    v84 = 0;
  }
  else
  {
    v6 = llvm::hash_value(*(_QWORD **)a1, *(_QWORD *)(a1 + 8));
    v96 = v6;
    if (a1 + 16 == a2)
    {
      v84 = 8;
    }
    else
    {
      v7 = v6;
      v8 = llvm::hash_value(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24));
      v97 = v8;
      if (a1 + 32 == a2)
      {
        v84 = 16;
      }
      else
      {
        v9 = v8;
        v10 = llvm::hash_value(*(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
        v98 = v10;
        if (a1 + 48 == a2)
        {
          v84 = 24;
        }
        else
        {
          v11 = v10;
          v12 = llvm::hash_value(*(_QWORD **)(a1 + 48), *(_QWORD *)(a1 + 56));
          v99 = v12;
          if (a1 + 64 == a2)
          {
            v84 = 32;
          }
          else
          {
            v13 = v12;
            v14 = llvm::hash_value(*(_QWORD **)(a1 + 64), *(_QWORD *)(a1 + 72));
            v100 = v14;
            if (a1 + 80 == a2)
            {
              v84 = 40;
            }
            else
            {
              v15 = v14;
              v16 = llvm::hash_value(*(_QWORD **)(a1 + 80), *(_QWORD *)(a1 + 88));
              v101 = v16;
              if (a1 + 96 == a2)
              {
                v84 = 48;
              }
              else
              {
                v17 = v16;
                v18 = llvm::hash_value(*(_QWORD **)(a1 + 96), *(_QWORD *)(a1 + 104));
                v102 = v18;
                if (a1 + 112 == a2)
                {
                  v84 = 56;
                }
                else
                {
                  v94 = v18;
                  v19 = llvm::hash_value(*(_QWORD **)(a1 + 112), *(_QWORD *)(a1 + 120));
                  v103 = v19;
                  v20 = a1 + 128;
                  if (a1 + 128 != a2)
                  {
                    v92 = v19;
                    llvm::hash_value(*(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136));
                    v21 = v5 ^ (v5 >> 47);
                    v22 = 0x9DDFEA08EB382D69
                        * (v5 ^ (((0x9DDFEA08EB382D69 * (v21 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ (0xB492B66FBE98F273 * v5))));
                    v23 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    v24 = __ROR8__(v21 - 0x622015F714C7D297 * (v23 ^ (v23 >> 47)), 33);
                    v25 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
                    v26 = v13;
                    v27 = 0xB492B66FBE98F273 * v24;
                    v28 = v25 + v15 - 0x4B6D499041670D8DLL * v24;
                    v29 = v17 + v94 + v28 + v92;
                    v30 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
                    v31 = v17 + v30 - 0x4B6D499041670D8DLL * __ROR8__(v94 + v5 - 0x4B6D499041670D8DLL * v5, 42);
                    v32 = __ROR8__(v17 + v94 + v28, 44) + v28 + __ROR8__(v31 + v11 + v92 + v28, 21);
                    v33 = v7 - 0x6D8ED9027DD26057 * v5;
                    v34 = v33 + v9 + v11 + v26;
                    v35 = (0xB492B66FBE98F273 * __ROR8__(v30 + v5 + v9, 37)) ^ v25;
                    v36 = __ROR8__(v33 + v9 + v11, 44) + v33 + __ROR8__(v35 + v21 + v33 + v26, 21);
                    v91 = ~(unint64_t)&v96;
                    v37 = 64;
                    while (1)
                    {
                      v93 = v35;
                      v95 = v32;
                      v96 = llvm::hash_value(*(_QWORD **)v20, *(_QWORD *)(v20 + 8));
                      if (v20 + 16 == a2)
                      {
                        v40 = 8;
                        v41 = &v97;
                      }
                      else
                      {
                        v97 = llvm::hash_value(*(_QWORD **)(v20 + 16), *(_QWORD *)(v20 + 24));
                        if (v20 + 32 == a2)
                        {
                          v40 = 16;
                          v41 = &v98;
                        }
                        else
                        {
                          v98 = llvm::hash_value(*(_QWORD **)(v20 + 32), *(_QWORD *)(v20 + 40));
                          if (v20 + 48 == a2)
                          {
                            v40 = 24;
                            v41 = &v99;
                          }
                          else
                          {
                            v99 = llvm::hash_value(*(_QWORD **)(v20 + 48), *(_QWORD *)(v20 + 56));
                            if (v20 + 64 == a2)
                            {
                              v40 = 32;
                              v41 = &v100;
                            }
                            else
                            {
                              v100 = llvm::hash_value(*(_QWORD **)(v20 + 64), *(_QWORD *)(v20 + 72));
                              if (v20 + 80 == a2)
                              {
                                v40 = 40;
                                v41 = &v101;
                              }
                              else
                              {
                                v101 = llvm::hash_value(*(_QWORD **)(v20 + 80), *(_QWORD *)(v20 + 88));
                                if (v20 + 96 == a2)
                                {
                                  v40 = 48;
                                  v41 = &v102;
                                }
                                else
                                {
                                  v102 = llvm::hash_value(*(_QWORD **)(v20 + 96), *(_QWORD *)(v20 + 104));
                                  if (v20 + 112 != a2)
                                  {
                                    v103 = llvm::hash_value(*(_QWORD **)(v20 + 112), *(_QWORD *)(v20 + 120));
                                    if (v20 + 128 == a2)
                                    {
                                      v20 = a2;
                                    }
                                    else
                                    {
                                      v38 = *(_QWORD **)(v20 + 128);
                                      v39 = *(_QWORD *)(v20 + 136);
                                      v20 += 128;
                                      llvm::hash_value(v38, v39);
                                    }
                                    v40 = 64;
                                    goto LABEL_55;
                                  }
                                  v40 = 56;
                                  v41 = &v103;
                                }
                              }
                            }
                          }
                        }
                      }
                      v42 = 64 - v40;
                      v43 = v40;
                      if (v40 != 64 - v40)
                      {
                        do
                        {
                          v68 = v43;
                          v43 = v42;
                          v42 = v68 % v42;
                        }
                        while (v42);
                        v69 = (unint64_t *)((char *)&v96 + v43);
                        do
                        {
                          v71 = *((_BYTE *)v69 - 1);
                          v69 = (unint64_t *)((char *)v69 - 1);
                          v70 = v71;
                          v72 = &v69[(unint64_t)v40 / 8];
                          v73 = v69;
                          do
                          {
                            v74 = v73;
                            v73 = v72;
                            *(_BYTE *)v74 = *(_BYTE *)v72;
                            v75 = (char *)((char *)&v104 - (char *)v72);
                            v76 = __OFSUB__(v40, v75);
                            v78 = v40 - (_QWORD)v75;
                            v77 = (v78 < 0) ^ v76;
                            v72 = (unint64_t *)((char *)&v96 + v78);
                            if (v77)
                              v72 = &v73[(unint64_t)v40 / 8];
                          }
                          while (v72 != v69);
                          *(_BYTE *)v73 = v70;
                        }
                        while (v69 != &v96);
                        goto LABEL_54;
                      }
                      if ((unint64_t)v41 + v91 >= (v40 ^ 0x3FuLL))
                        v44 = v40 ^ 0x3F;
                      else
                        v44 = (unint64_t)v41 + v91;
                      v45 = &v96;
                      v46 = v40;
                      if (v44 >= 0xF)
                      {
                        if (&v96 >= (unint64_t *)((char *)&v96 + v40 + v44 + 1)
                          || (v46 = v40, (char *)&v96 + v40 >= (char *)&v96 + v44 + 1))
                        {
                          v47 = v44 + 1;
                          v48 = (v44 + 1) & 0x70;
                          v49 = (unint64_t *)((char *)&v96 + v40);
                          v50 = v96;
                          v51 = v97;
                          v52 = *(unint64_t *)((char *)&v96 + v40 + 8);
                          v96 = *(unint64_t *)((char *)&v96 + v40);
                          v97 = v52;
                          *v49 = v50;
                          v49[1] = v51;
                          if (v48 != 16)
                          {
                            v53 = (unint64_t *)((char *)&v98 + v40);
                            v54 = v98;
                            v55 = v99;
                            v56 = *(unint64_t *)((char *)&v98 + v40 + 8);
                            v98 = *(unint64_t *)((char *)&v98 + v40);
                            v99 = v56;
                            *v53 = v54;
                            v53[1] = v55;
                            if (v48 != 32)
                            {
                              v57 = (unint64_t *)((char *)&v100 + v40);
                              v58 = v100;
                              v59 = v101;
                              v60 = *(unint64_t *)((char *)&v100 + v40 + 8);
                              v100 = *(unint64_t *)((char *)&v100 + v40);
                              v101 = v60;
                              *v57 = v58;
                              v57[1] = v59;
                              if (v48 != 48)
                              {
                                v61 = (unint64_t *)((char *)&v102 + v40);
                                v62 = v102;
                                v63 = v103;
                                v64 = *(unint64_t *)((char *)&v102 + v40 + 8);
                                v102 = *(unint64_t *)((char *)&v102 + v40);
                                v103 = v64;
                                *v61 = v62;
                                v61[1] = v63;
                              }
                            }
                          }
                          if (v47 == v48)
                            goto LABEL_54;
                          v46 = v40 + v48;
                          v45 = (unint64_t *)((char *)&v96 + v48);
                        }
                      }
                      v65 = (unint64_t *)((char *)v45 + 1);
                      do
                      {
                        v66 = *((_BYTE *)v65 - 1);
                        *((_BYTE *)v65 - 1) = *((_BYTE *)&v96 + v46);
                        *((_BYTE *)&v96 + v46) = v66;
                        if (v65 == v41)
                          break;
                        v65 = (unint64_t *)((char *)v65 + 1);
                      }
                      while (v46++ != 63);
LABEL_54:
                      v20 = a2;
LABEL_55:
                      v79 = v31 + v34 + v27 + v97;
                      v31 = v101 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v31 + v36 + v102, 42);
                      v80 = v96 - 0x4B6D499041670D8DLL * v36;
                      v81 = (0xB492B66FBE98F273 * __ROR8__(v79, 37)) ^ v95;
                      v82 = __ROR8__(v93 + v29, 33);
                      v36 = __ROR8__(v80 + v97 + v98, 44) + v80 + __ROR8__(v81 + v29 + v80 + v99, 21);
                      v27 = 0xB492B66FBE98F273 * v82;
                      v34 = v80 + v97 + v98 + v99;
                      v83 = 0xB492B66FBE98F273 * v82 + v95 + v100;
                      v32 = __ROR8__(v31 + v98 + v83 + v103, 21) + v83 + __ROR8__(v101 + v102 + v83, 44);
                      v29 = v101 + v102 + v83 + v103;
                      v37 += v40;
                      v35 = v81;
                      if (v20 == a2)
                      {
                        v85 = 0x9DDFEA08EB382D69
                            * (v29 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v29)));
                        v86 = v81
                            - 0x4B6D499041670D8DLL * (v31 ^ (v31 >> 47))
                            - 0x622015F714C7D297 * (v85 ^ (v85 >> 47));
                        v87 = 0x9DDFEA08EB382D69
                            * (v32 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v32)));
                        v88 = 0x9DDFEA08EB382D69 * (v87 ^ (v87 >> 47))
                            - 0x4B6D499041670D8DLL * ((v37 ^ (v37 >> 47)) + v82);
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69
                               * (v88 ^ ((0x9DDFEA08EB382D69 * (v88 ^ v86)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                      * (v88 ^ v86)))) ^ ((0x9DDFEA08EB382D69 * (v88 ^ ((0x9DDFEA08EB382D69 * (v88 ^ v86)) >> 47) ^ (0x9DDFEA08EB382D69 * (v88 ^ v86)))) >> 47));
                      }
                    }
                  }
                  v84 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v96, v84, v5);
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)*a1 != a2[1])
    return 0;
  v3 = v2[3];
  if (v3 != a2[5])
    return 0;
  if (v3)
  {
    v4 = v2[2];
    v5 = a2[4];
    v6 = v4 + 16 * v3;
    while (1)
    {
      v7 = *(_QWORD *)(v4 + 8);
      if (v7 != *(_QWORD *)(v5 + 8) || v7 && memcmp(*(const void **)v4, *(const void **)v5, v7))
        break;
      v4 += 16;
      v5 += 16;
      if (v4 == v6)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__n128 **a1, size_t a2)
{
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  __n128 v10[3];

  v3 = **a1;
  v4 = (*a1)[2];
  v10[1] = (*a1)[1];
  v10[2] = v4;
  v10[0] = v3;
  v6 = mlir::detail::DenseStringElementsAttrStorage::construct(a2, v10);
  v7 = v5;
  v8 = a1[1];
  if (v8->n128_u64[0])
    ((void (*)(unint64_t, uint64_t, __n128))v8->n128_u64[0])(v8->n128_u64[1], v5, v6);
  return v7;
}

__n128 mlir::detail::DenseStringElementsAttrStorage::construct(size_t __sz, __n128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  const double *v20;
  uint64_t v21;
  const double *v22;
  unsigned __int128 v23;
  unsigned __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char *buffer;
  uint64_t v38;
  unsigned __int8 v39;
  __n128 result;
  unint64_t v41;
  unsigned __int8 v42;

  v4 = a2[1].n128_u64[1];
  if (v4)
  {
    if (a2[2].n128_u8[8])
      LODWORD(v4) = 1;
    v5 = (int)v4;
    v6 = 16 * (int)v4;
    if ((int)v4 <= 0)
    {
      v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 16 * (int)v4, 3);
    }
    else
    {
      v7 = a2[1].n128_u64[0];
      v8 = v4;
      if (v4 >= 5)
      {
        v17 = v4 & 3;
        if ((v5 & 3) == 0)
          v17 = 4;
        v9 = v8 - v17;
        v18 = 0uLL;
        v19 = (int64x2_t)(unint64_t)v6;
        v20 = (const double *)(v7 + 40);
        v21 = v9;
        do
        {
          v22 = v20 - 4;
          v23 = (unsigned __int128)vld2q_f64(v22);
          v24 = (unsigned __int128)vld2q_f64(v20);
          v19 = vaddq_s64((int64x2_t)v23, v19);
          v18 = vaddq_s64((int64x2_t)v24, v18);
          v20 += 8;
          v21 -= 4;
        }
        while (v21);
        v10 = vaddvq_s64(vaddq_s64(v18, v19));
      }
      else
      {
        v9 = 0;
        v10 = v6;
      }
      v25 = (uint64_t *)(v7 + 16 * v9 + 8);
      v26 = v8 - v9;
      do
      {
        v27 = *v25;
        v25 += 2;
        v10 += v27;
        --v26;
      }
      while (v26);
      v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v10, 3);
      v28 = 0;
      v29 = (char *)(v16 + v6);
      v30 = 16 * v8;
      do
      {
        memcpy(v29, *(const void **)(v7 + v28), *(_QWORD *)(v7 + v28 + 8));
        v31 = *(_QWORD *)(v7 + v28 + 8);
        v32 = (_QWORD *)(v16 + v28);
        *v32 = v29;
        v32[1] = v31;
        v29 += *(_QWORD *)(v7 + v28 + 8);
        v28 += 16;
      }
      while (v30 != v28);
    }
    *(_QWORD *)(__sz + 80) += 48;
    v33 = *(_QWORD *)__sz;
    if (*(_QWORD *)__sz && ((v33 + 7) & 0xFFFFFFFFFFFFFFF8) - v33 + 48 <= *(_QWORD *)(__sz + 8) - v33)
    {
      v34 = (v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v35 = *(_DWORD *)(__sz + 24) >> 7;
      if (v35 >= 0x1E)
        LOBYTE(v35) = 30;
      v36 = 4096 << v35;
      buffer = (char *)llvm::allocate_buffer(4096 << v35, (std::align_val_t)8uLL);
      v38 = *(unsigned int *)(__sz + 24);
      if (v38 >= *(_DWORD *)(__sz + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v38 + 1, 8);
        LODWORD(v38) = *(_DWORD *)(__sz + 24);
      }
      *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v38) = buffer;
      ++*(_DWORD *)(__sz + 24);
      *(_QWORD *)(__sz + 8) = &buffer[v36];
      v34 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)__sz = v34 + 48;
    v39 = a2[2].n128_u8[8];
    result = *a2;
    *(_QWORD *)v34 = 0;
    *(__n128 *)(v34 + 8) = result;
    *(_BYTE *)(v34 + 24) = v39;
    *(_QWORD *)(v34 + 32) = v16;
    *(_QWORD *)(v34 + 40) = v5;
  }
  else
  {
    *(_QWORD *)(__sz + 80) += 48;
    if (*(_QWORD *)__sz)
      v11 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 48 > *(_QWORD *)(__sz + 8)
                                                                                    - *(_QWORD *)__sz;
    else
      v11 = 1;
    if (v11)
    {
      v12 = *(_DWORD *)(__sz + 24) >> 7;
      if (v12 >= 0x1E)
        LOBYTE(v12) = 30;
      v13 = 4096 << v12;
      v14 = (char *)llvm::allocate_buffer(4096 << v12, (std::align_val_t)8uLL);
      v15 = *(unsigned int *)(__sz + 24);
      if (v15 >= *(_DWORD *)(__sz + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v15 + 1, 8);
        LODWORD(v15) = *(_DWORD *)(__sz + 24);
      }
      *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v15) = v14;
      ++*(_DWORD *)(__sz + 24);
      *(_QWORD *)(__sz + 8) = &v14[v13];
      v41 = (unint64_t)(v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v41 = (*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)__sz = v41 + 48;
    v42 = a2[2].n128_u8[8];
    result = *a2;
    *(_QWORD *)v41 = 0;
    *(__n128 *)(v41 + 8) = result;
    *(_BYTE *)(v41 + 24) = v42;
    *(_QWORD *)(v41 + 32) = 0;
    *(_QWORD *)(v41 + 40) = 0;
  }
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  const llvm::detail::DoubleAPFloat *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v14[2];
  uint64_t *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v16[0] = a2;
  v16[1] = a3;
  v17 = *a5;
  v8 = (const llvm::detail::DoubleAPFloat *)(a6 + 8);
  v9 = *(void **)(a6 + 8);
  v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v8);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v19, v8);
  v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  v15 = &v17;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  return ParametricStorageTypeImpl;
}

unint64_t llvm::hash_combine<mlir::Type,llvm::APFloat>(_DWORD *a1, llvm *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  llvm *v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = this;
    this = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      this = v7;
    }
  }
  v3 = (*a1 >> 4) ^ (*a1 >> 9);
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hash_value(this, this);
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  _QWORD *v2;
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)(a2 + 8) != **(_QWORD **)a1)
    return 0;
  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  v4 = *(void **)(a2 + 24);
  v6 = (void *)v2[2];
  v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6)
    return 0;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::FloatAttrStorage::construct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  char *buffer;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v15[3];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2 + 2;
  v5 = (void *)a2[2];
  v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v6 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, v4);
    a1[10] += 48;
    v7 = *a1;
    if (!*a1)
      goto LABEL_7;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v16, (uint64_t)v4);
    a1[10] += 48;
    v7 = *a1;
    if (!*a1)
      goto LABEL_7;
  }
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 48 <= a1[1] - v7)
  {
    v8 = (_QWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_12;
  }
LABEL_7:
  v9 = *((_DWORD *)a1 + 6) >> 7;
  if (v9 >= 0x1E)
    LOBYTE(v9) = 30;
  v10 = 4096 << v9;
  buffer = (char *)llvm::allocate_buffer(4096 << v9, (std::align_val_t)8uLL);
  v12 = *((unsigned int *)a1 + 6);
  if (v12 >= *((_DWORD *)a1 + 7))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v12 + 1, 8);
    LODWORD(v12) = *((_DWORD *)a1 + 6);
  }
  *(_QWORD *)(a1[2] + 8 * v12) = buffer;
  ++*((_DWORD *)a1 + 6);
  a1[1] = (uint64_t)&buffer[v10];
  v8 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
LABEL_12:
  *a1 = (uint64_t)(v8 + 6);
  if (v6 == (void *)v16[0])
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, v16);
    *v8 = 0;
    v8[1] = v3;
    v13 = v8 + 3;
    if (v6 != (void *)v15[0])
    {
LABEL_14:
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v13, (uint64_t)v15);
      if (v6 != (void *)v15[0])
        goto LABEL_15;
LABEL_20:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v15);
      if (v6 != (void *)v16[0])
        goto LABEL_16;
LABEL_21:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
      return v8;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v15, (uint64_t)v16);
    *v8 = 0;
    v8[1] = v3;
    v13 = v8 + 3;
    if (v6 != (void *)v15[0])
      goto LABEL_14;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v15);
  if (v6 == (void *)v15[0])
    goto LABEL_20;
LABEL_15:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v15);
  if (v6 == (void *)v16[0])
    goto LABEL_21;
LABEL_16:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
  return v8;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  const llvm::detail::DoubleAPFloat *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v14[2];
  uint64_t *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v16[0] = a2;
  v16[1] = a3;
  v17 = *a5;
  v8 = (const llvm::detail::DoubleAPFloat *)(a6 + 8);
  v9 = *(void **)(a6 + 8);
  v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v8);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v19, v8);
  v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  v15 = &v17;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  return ParametricStorageTypeImpl;
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  _QWORD *v2;
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)(a2 + 8) != **(_QWORD **)a1)
    return 0;
  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  v4 = *(void **)(a2 + 24);
  v6 = (void *)v2[2];
  v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6)
    return 0;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v14[2];
  uint64_t *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v16[0] = a2;
  v16[1] = a3;
  v17 = *a5;
  v8 = (_QWORD *)(a6 + 8);
  v9 = *(void **)(a6 + 8);
  v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v8);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v19, (uint64_t)v8);
  v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  v15 = &v17;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  return ParametricStorageTypeImpl;
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  _QWORD *v2;
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)(a2 + 8) != **(_QWORD **)a1)
    return 0;
  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  v4 = *(void **)(a2 + 24);
  v6 = (void *)v2[2];
  v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6)
    return 0;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeENS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(mlir::MLIRContext *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t *v14;
  uint64_t v15;
  const void *v16;
  unsigned int v17;
  _QWORD v18[2];

  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v12[0] = a2;
  v12[1] = a1;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERKNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v18[1] = v12;
  v15 = *a3;
  v17 = *(_DWORD *)(a4 + 8);
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)a4);
  else
    v16 = *(const void **)a4;
  v9 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v15, (llvm *)&v16);
  v13[0] = &v15;
  v13[1] = v18;
  v14 = &v15;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, a2, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
  if (v17 >= 0x41 && v16)
    MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  return ParametricStorageTypeImpl;
}

unint64_t llvm::hash_combine<mlir::Type,llvm::APInt>(_DWORD *a1, llvm *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  llvm *v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = this;
    this = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      this = v7;
    }
  }
  v3 = (*a1 >> 4) ^ (*a1 >> 9);
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hash_value(this, this);
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  const void **v4;
  const void **v5;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)*a1)
    return 0;
  v4 = (const void **)(a2 + 16);
  v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u)
    return llvm::APInt::equalSlowCase(v4, v5);
  else
    return *v4 == *v5;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::detail::IntegerAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  char *buffer;
  uint64_t v10;
  unint64_t result;

  v3 = *((_DWORD *)a2 + 4);
  v5 = *a2;
  v4 = a2[1];
  *((_DWORD *)a2 + 4) = 0;
  *(_QWORD *)(a1 + 80) += 32;
  if (*(_QWORD *)a1)
    v6 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 32 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v6 = 1;
  if (v6)
  {
    v7 = *(_DWORD *)(a1 + 24) >> 7;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    v10 = *(unsigned int *)(a1 + 24);
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v8];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 32;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 16) = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERKNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt &>(mlir::MLIRContext *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t *v14;
  uint64_t v15;
  const void *v16;
  unsigned int v17;
  _QWORD v18[2];

  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v12[0] = a2;
  v12[1] = a1;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v18[1] = v12;
  v15 = *a3;
  v17 = *(_DWORD *)(a4 + 8);
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)a4);
  else
    v16 = *(const void **)a4;
  v9 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v15, (llvm *)&v16);
  v13[0] = &v15;
  v13[1] = v18;
  v14 = &v15;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, a2, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
  if (v17 >= 0x41 && v16)
    MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  return ParametricStorageTypeImpl;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  const void **v4;
  const void **v5;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)*a1)
    return 0;
  v4 = (const void **)(a2 + 16);
  v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u)
    return llvm::APInt::equalSlowCase(v4, v5);
  else
    return *v4 == *v5;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  unsigned int v9;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  _OWORD v16[4];
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15[0] = a2;
  v15[1] = a3;
  v14 = *a5;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v8 = &unk_254519000;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      v8 = (_QWORD *)&unk_254519000;
    }
  }
  v19 = v8[373];
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v16, 0, v16, (char *)v17, &v14);
  v13 = &v14;
  *(_QWORD *)&v16[0] = &v14;
  *((_QWORD *)&v16[0] + 1) = v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void (*v14)(uint64_t, _QWORD *);

  v4 = **a1;
  a2[10] += 16;
  v5 = *a2;
  v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v7 = v6 + 16 > a2[1] - *a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    v12 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
      goto LABEL_13;
  }
  else
  {
    v12 = (_QWORD *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
LABEL_13:
      v14(v13[1], v12);
  }
  return v12;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(_DWORD *a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v17[4];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  if ((v4 & 1) == 0)
  {
    v14 = a1;
    v10 = a2;
    a2 = v10;
    v12 = v11;
    a1 = v14;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a1 = v14;
      a2 = v10;
    }
  }
  v5 = (*a1 >> 4) ^ (*a1 >> 9);
  v20 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v17[0] = v5;
  v15 = 0;
  v6 = llvm::hash_value(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v15, (_QWORD *)v17 + 1, (unint64_t)v18, v6);
  v16 = v15;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v16, v7, (unint64_t)v18, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v17, v16, v8, (char *)v18);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v4;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)*a1
    && (v4 = *(_QWORD *)(a2 + 24), v4 == v2[2])
    && (!v4 || !memcmp(*(const void **)(a2 + 16), (const void *)v2[1], v4)))
  {
    return *(_QWORD *)(a2 + 32) == v2[3];
  }
  else
  {
    return 0;
  }
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::OpaqueAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::OpaqueAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  char *buffer;
  uint64_t v25;
  _QWORD *result;

  v3 = *a2;
  v4 = a2[2];
  v5 = a2[3];
  if (!v4)
  {
    v8 = 0;
    goto LABEL_19;
  }
  v6 = a2[1];
  v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
  v8 = v7;
  if (v4 < 8)
  {
    v9 = (_BYTE *)v7;
    v10 = (char *)v6;
  }
  else
  {
    v9 = (_BYTE *)v7;
    v10 = (char *)v6;
    if ((unint64_t)(v7 - v6) >= 0x20)
    {
      if (v4 < 0x20)
      {
        v11 = 0;
        goto LABEL_12;
      }
      v11 = v4 & 0xFFFFFFFFFFFFFFE0;
      v12 = (__int128 *)(v6 + 16);
      v13 = (_OWORD *)(v7 + 16);
      v14 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 32;
      }
      while (v14);
      if (v4 == v11)
        goto LABEL_18;
      if ((v4 & 0x18) != 0)
      {
LABEL_12:
        v9 = (_BYTE *)(v7 + (v4 & 0xFFFFFFFFFFFFFFF8));
        v10 = (char *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
        v16 = (uint64_t *)(v6 + v11);
        v17 = (_QWORD *)(v7 + v11);
        v18 = v11 - (v4 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v19 = *v16++;
          *v17++ = v19;
          v18 += 8;
        }
        while (v18);
        if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_18;
        goto LABEL_17;
      }
      v10 = (char *)(v6 + v11);
      v9 = (_BYTE *)(v7 + v11);
    }
  }
  do
  {
LABEL_17:
    v20 = *v10++;
    *v9++ = v20;
  }
  while (v10 != (char *)(v6 + v4));
LABEL_18:
  *(_BYTE *)(v7 + v4) = 0;
LABEL_19:
  *(_QWORD *)(__sz + 80) += 40;
  if (*(_QWORD *)__sz)
    v21 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 40 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v21 = 1;
  if (v21)
  {
    v22 = *(_DWORD *)(__sz + 24) >> 7;
    if (v22 >= 0x1E)
      LOBYTE(v22) = 30;
    v23 = 4096 << v22;
    buffer = (char *)llvm::allocate_buffer(4096 << v22, (std::align_val_t)8uLL);
    v25 = *(unsigned int *)(__sz + 24);
    if (v25 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v25 + 1, 8);
      LODWORD(v25) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v25) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v23];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 5;
  *result = 0;
  result[1] = v3;
  result[2] = v8;
  result[3] = v4;
  result[4] = v5;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v4 & 1) == 0)
  {
    v11 = a2;
    v12 = a1;
    a2 = v11;
    a1 = v12;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a2 = v11;
      a1 = v12;
    }
  }
  v5 = (*a1 >> 4) ^ (*a1 >> 9);
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = v5;
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, (*a2 >> 4) ^ (*a2 >> 9));
  v14 = v13;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v14, v6, (unint64_t)v16, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v7, (char *)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*a1;
  if (a2[1] != *(_QWORD *)*a1)
    return 0;
  if (a2[3] == v2[2])
    return a2[4] == v2[3];
  return 0;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::SparseElementsAttrStorage::construct(a2, *(__int128 **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::detail::SparseElementsAttrStorage::construct(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t result;
  __int128 v11;
  __int128 v12;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v5 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v5 = 1;
  if (v5)
  {
    v11 = v4;
    v12 = v3;
    v6 = *(_DWORD *)(a1 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a1 + 24);
    if (v9 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v7];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v4 = v11;
    v3 = v12;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 40;
  *(_QWORD *)result = 0;
  *(_OWORD *)(result + 8) = v3;
  *(_OWORD *)(result + 24) = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*a1;
  if (a2[1] != *(_QWORD *)*a1)
    return 0;
  if (a2[3] == v2[2])
    return a2[4] == v2[3];
  return 0;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::SparseElementsAttrStorage::construct(a2, *(__int128 **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeERNS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<long long,llvm::ArrayRef<long long>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = *a1;
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)*a1 && (v3 = *(_QWORD *)(a2 + 24), v3 == v2[2]))
    return memcmp(*(const void **)(a2 + 16), (const void *)v2[1], 8 * v3) == 0;
  else
    return 0;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StridedLayoutAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::StridedLayoutAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  char *buffer;
  uint64_t v22;
  _QWORD *result;

  v3 = *a2;
  v4 = a2[2];
  if (v4)
  {
    v5 = a2[1];
    v6 = 8 * v4;
    v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v4, 3);
    v8 = v7;
    if ((unint64_t)(8 * v4 - 8) < 0x18)
    {
      v9 = (_QWORD *)v7;
      v10 = (uint64_t *)v5;
    }
    else
    {
      v9 = (_QWORD *)v7;
      v10 = (uint64_t *)v5;
      if ((unint64_t)(v7 - v5) >= 0x20)
      {
        v11 = ((unint64_t)(v6 - 8) >> 3) + 1;
        v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
        v9 = (_QWORD *)(v7 + v12);
        v10 = (uint64_t *)(v5 + v12);
        v13 = (__int128 *)(v5 + 16);
        v14 = (_OWORD *)(v7 + 16);
        v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 4;
        }
        while (v15);
        if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    do
    {
      v17 = *v10++;
      *v9++ = v17;
    }
    while (v10 != (uint64_t *)(v5 + v6));
  }
  else
  {
    v8 = 0;
  }
LABEL_11:
  *(_QWORD *)(__sz + 80) += 32;
  if (*(_QWORD *)__sz)
    v18 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 32 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v18 = 1;
  if (v18)
  {
    v19 = *(_DWORD *)(__sz + 24) >> 7;
    if (v19 >= 0x1E)
      LOBYTE(v19) = 30;
    v20 = 4096 << v19;
    buffer = (char *)llvm::allocate_buffer(4096 << v19, (std::align_val_t)8uLL);
    v22 = *(unsigned int *)(__sz + 24);
    if (v22 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v22) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v20];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 4;
  *result = 0;
  result[1] = v3;
  result[2] = v8;
  result[3] = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(_DWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = (*a1 >> 4) ^ (*a1 >> 9);
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>(*(_DWORD **)a2, (_DWORD *)(*(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8)));
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  BOOL v11;

  v2 = (_QWORD *)*a1;
  if (a2[1] != *(_QWORD *)*a1)
    return 0;
  v3 = a2[3];
  if (v3 != v2[2])
    return 0;
  if (!v3)
    return 1;
  v4 = (uint64_t *)a2[2];
  v5 = (uint64_t *)v2[1];
  v6 = 8 * v3 - 8;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v9 = *v4++;
    result = v9 == v7;
    v11 = v9 != v7 || v6 == 0;
    v6 -= 8;
  }
  while (!v11);
  return result;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StridedLayoutAttrStorage::construct(__sz, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 **v15;
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = a4;
  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v7 = &unk_254519000;
  if ((v6 & 1) == 0)
  {
    v15 = a1;
    v7 = &unk_254519000;
    v12 = v11;
    v5 = a4;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      v7 = (_QWORD *)&unk_254519000;
      v5 = a4;
      a1 = v15;
    }
  }
  v8 = v7[373];
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (8 * ((v18 >> 4) ^ (v18 >> 9)) + 8));
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void (*v14)(uint64_t, _QWORD *);

  v4 = **a1;
  a2[10] += 16;
  v5 = *a2;
  v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v7 = v6 + 16 > a2[1] - *a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    v12 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
      goto LABEL_13;
  }
  else
  {
    v12 = (_QWORD *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
LABEL_13:
      v14(v13[1], v12);
  }
  return v12;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t *mlir::Dialect::addAttribute<mlir::AffineMapAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::AffineMapAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::ArrayAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, unint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::ArrayAttr,mlir::Attribute,mlir::detail::ArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSB_16ArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSA_16ArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseArrayAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::DenseArrayAttr,mlir::Attribute,mlir::detail::DenseArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSB_21DenseArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSA_21DenseArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseIntOrFPElementsAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::DenseIntOrFPElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseStringElementsAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::DenseStringElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseResourceElementsAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::DenseResourceElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DictionaryAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::DictionaryAttr,mlir::Attribute,mlir::detail::DictionaryAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSB_21DictionaryAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSA_21DictionaryAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::FloatAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  _BYTE v10[8];
  void *v11;
  unsigned int v12;
  uint64_t v13;
  llvm *v14[2];
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::FloatAttr>(a1, (uint64_t)v10);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t)v10);
  v2 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0)
        v3 = v14;
      else
        v3 = (llvm **)v14[0];
      (*(void (**)(llvm **))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v14[0], v14[1]);
  }
  v4 = (uint64_t *)v11;
  if (v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v11;
  }
  if (v4 != &v13)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::FloatAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::IntegerAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  _BYTE v10[8];
  void *v11;
  unsigned int v12;
  uint64_t v13;
  llvm *v14[2];
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::IntegerAttr>(a1, (uint64_t)v10);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t)v10);
  v2 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0)
        v3 = v14;
      else
        v3 = (llvm **)v14[0];
      (*(void (**)(llvm **))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v14[0], v14[1]);
  }
  v4 = (uint64_t *)v11;
  if (v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v11;
  }
  if (v4 != &v13)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::IntegerSetAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::IntegerSetAttr,mlir::Attribute,mlir::detail::IntegerSetAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSB_21IntegerSetAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSA_21IntegerSetAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::OpaqueAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::OpaqueAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::SparseElementsAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::SparseElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::StridedLayoutAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::StridedLayoutAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::StringAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  mlir::AbstractAttribute::get<mlir::StringAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::SymbolRefAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::SymbolRefAttr,mlir::Attribute,mlir::detail::SymbolRefAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSB_20SymbolRefAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSA_20SymbolRefAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::TypeAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::TypeAttr,mlir::Attribute,mlir::detail::TypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSB_15TypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSA_15TypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, 0, v10);
}

_QWORD *mlir::Dialect::addAttribute<mlir::UnitAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  mlir::MLIRContext *v9;
  uint64_t *AttributeUniquer;
  char v12;
  _QWORD *(**v13)(uint64_t *, _QWORD *);
  _QWORD *(*v14)(uint64_t *, _QWORD *);
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  mlir::MLIRContext *v25;
  void *v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = (mlir::MLIRContext *)v27;
  LODWORD(v26) = 0;
  v14 = (_QWORD *(*)(uint64_t *, _QWORD *))a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::UnitAttr,mlir::Attribute,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  v9 = *(mlir::MLIRContext **)(a1 + 32);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(v9);
  v25 = v9;
  v26 = &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id;
  v14 = _ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_8UnitAttrEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v15 = &v25;
  v13 = &v14;
  return mlir::StorageUniquer::registerSingletonImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::AttributeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::AttributeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v13);
}

void mlir::AbstractAttribute::get<mlir::AffineMapAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::AffineMapAttr,mlir::Attribute,mlir::detail::AffineMapAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSB_20AffineMapAttrStorageENSB_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSA_20AffineMapAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::getAffineMap;
  v2[1] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::isIdentity;
  v2[2] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::verifyLayout;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[386], v2);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::getAffineMap(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::isIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  return mlir::AffineMap::isIdentity((mlir::AffineMap *)&v3);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::detail::verifyAffineMapAsLayout(*(_QWORD *)(a2 + 8), a3, a4, a5, a6);
}

BOOL mlir::detail::StorageUserBase<mlir::AffineMapAttr,mlir::Attribute,mlir::detail::AffineMapAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface::Trait<Empty>]";
      v15 = 95;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemRefLayoutAttrInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return v2[87] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSA_20AffineMapAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  mlir::MLIRContext *LHS;
  unsigned __int8 **AttributeUniquer;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  v6 = a2;
  v2 = *(_QWORD *)(a2 + 8);
  mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(LHS);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  v8[1] = LHS;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, &v7);
}

uint64_t mlir::detail::StorageUserBase<mlir::ArrayAttr,mlir::Attribute,mlir::detail::ArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSB_16ArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];

  v7 = *(uint64_t **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  if (v6)
  {
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, v9);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSA_16ArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];

  v9 = a2;
  if (a4 >= *(unsigned int *)(a2 + 16))
    v5 = *(unsigned int *)(a2 + 16);
  else
    v5 = a4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  *(_QWORD *)&v10 = a3;
  *((_QWORD *)&v10 + 1) = v5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::DenseArrayAttr,mlir::Attribute,mlir::detail::DenseArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSB_21DenseArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSA_21DenseArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v8 = a3;
  *((_QWORD *)&v8 + 1) = a4;
  *(_QWORD *)&v7 = a5;
  *((_QWORD *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseArrayAttr>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseArrayAttr>(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v14;
  uint64_t ParametricStorageTypeImpl;
  _OWORD v17[2];
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[2];
  uint64_t v28;
  unsigned int *v29;
  void *v30;
  __int128 v31;
  _BYTE v32[40];
  uint64_t v33;
  unsigned int *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD v37[6];

  v37[5] = *MEMORY[0x24BDAC8D0];
  v19 = a1;
  v3 = *(_OWORD *)(a1 + 24);
  v18[0] = *(_OWORD *)(a1 + 8);
  v18[1] = v3;
  v4 = *a2;
  v17[0] = *a3;
  v17[1] = v4;
  mlir::AttrTypeSubElementHandler<std::tuple<mlir::Type,long long,llvm::ArrayRef<char>>,void>::replace((uint64_t)v18, (uint64_t)v17, (uint64_t)&v33);
  mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v5 = v33;
  v6 = v34;
  v28 = v33;
  v29 = v34;
  v30 = v32;
  v31 = xmmword_207AB5450;
  v7 = v36;
  if (!v36)
  {
    v10 = v32;
    goto LABEL_9;
  }
  if (v36 < 0x29)
  {
    v9 = v32;
    v8 = v36;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v30, v32, v36, 1);
  v8 = v36;
  if (v36)
  {
    v9 = v30;
LABEL_7:
    memcpy(v9, v35, v8);
  }
  *(_QWORD *)&v31 = v7;
  v5 = v28;
  v6 = v29;
  v10 = v30;
LABEL_9:
  v11 = *v6;
  v20 = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v21[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v21[1] = Context;
  v27[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v27[1] = v21;
  v24 = v20;
  v25 = v11;
  v26[0] = v10;
  v26[1] = v7;
  v14 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v24, &v25, (uint64_t)v26);
  v22[0] = &v24;
  v22[1] = v27;
  v23 = &v24;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v23, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v22);
  if (v30 != v32)
    free(v30);
  if (v35 != v37)
    free(v35);
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<mlir::Type,long long,llvm::ArrayRef<char>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  size_t v10;
  size_t v11;
  void *__src;
  size_t __n;
  uint64_t v14;
  _QWORD v15[6];

  v15[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  if (*(_QWORD *)a1)
  {
    v5 = *(uint64_t **)a2;
    v6 = *(_QWORD *)(a2 + 8) - 1;
    *(_QWORD *)a2 += 8;
    *(_QWORD *)(a2 + 8) = v6;
    v7 = *v5;
  }
  else
  {
    v7 = 0;
  }
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<char>,void>::replace(*(_BYTE **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&__src);
  v8 = (void *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = a3 + 40;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 24) = xmmword_207AB5450;
  v9 = __src;
  if ((void **)(a3 + 16) == &__src)
    goto LABEL_14;
  v10 = __n;
  if (!__n)
    goto LABEL_14;
  if (__src != v15)
  {
    *(_QWORD *)(a3 + 16) = __src;
    *(_QWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a3 + 32) = v14;
    return;
  }
  if (__n < 0x29)
  {
    v11 = __n;
    goto LABEL_12;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod(a3 + 16, (void *)(a3 + 40), __n, 1);
  v9 = __src;
  v11 = __n;
  if (__n)
  {
    v8 = *(void **)(a3 + 16);
LABEL_12:
    memcpy(v8, v9, v11);
    v9 = __src;
  }
  *(_QWORD *)(a3 + 24) = v10;
  __n = 0;
LABEL_14:
  if (v9 != v15)
    free(v9);
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<char>,void>::replace(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD v19[6];

  v19[5] = *MEMORY[0x24BDAC8D0];
  v17 = v19;
  v4 = xmmword_207AB5450;
  v18 = xmmword_207AB5450;
  if (a2)
  {
    v5 = a2;
    v6 = 0;
    v7 = v19;
    do
    {
      if (v6 >= *((_QWORD *)&v18 + 1))
      {
        v8 = *a1;
        v9 = v6 + 1;
        if (v6 + 1 > *((_QWORD *)&v18 + 1))
        {
          v15 = v5;
          v16 = a1;
          v10 = v7;
          v14 = *a1;
          v13 = v4;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v17, v7, v9, 1);
          v4 = v13;
          v8 = v14;
          v5 = v15;
          a1 = v16;
          v7 = v10;
          v6 = v18;
        }
        *((_BYTE *)v17 + v6) = v8;
      }
      else
      {
        *((_BYTE *)v17 + v6) = *a1;
      }
      v6 = v18 + 1;
      *(_QWORD *)&v18 = v18 + 1;
      ++a1;
      --v5;
    }
    while (v5);
    v11 = v17;
    *(_QWORD *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = v4;
    if (v6 && &v17 != (_QWORD **)a3)
    {
      if (v11 != v19)
      {
        *(_QWORD *)a3 = v11;
        *(_QWORD *)(a3 + 8) = v6;
        *(_QWORD *)(a3 + 16) = *((_QWORD *)&v18 + 1);
        return;
      }
      v12 = v6;
      if (v6 < 0x29
        || (llvm::SmallVectorBase<unsigned long long>::grow_pod(a3, (void *)(a3 + 24), v6, 1),
            v7 = v17,
            (v12 = v18) != 0))
      {
        memcpy(*(void **)a3, v7, v12);
        v7 = v17;
      }
      *(_QWORD *)(a3 + 8) = v6;
      *(_QWORD *)&v18 = 0;
      v11 = v7;
    }
    if (v11 != v19)
      free(v11);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = xmmword_207AB5450;
  }
}

void mlir::AbstractAttribute::get<mlir::DenseIntOrFPElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseIntOrFPElementsAttr,mlir::DenseElementsAttr,mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSB_31DenseIntOrFPElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSA_31DenseIntOrFPElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getType;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[268], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc_type_malloc(0x20uLL, 0xE0040DD5D8FE3uLL);
  *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::isSplat;
  v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getShapedType;
  v2[3] = 0;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)&unk_254519000;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v14 = 68;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[403], v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getValuesImpl(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;

  v9 = a1;
  mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(&v9, a2, (uint64_t)v10);
  if (v12)
  {
    v5 = v10[0];
    *(_BYTE *)a3 = v10[0];
    *(_BYTE *)(a3 + 1) = v10[1];
    v6 = v11;
    if (!v5)
      v11 = 0;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = 1;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>((mlir::DenseElementsAttr *)&v9, a2, a3);
    if (v12)
      v7 = v10[0] == 0;
    else
      v7 = 0;
    if (v7)
    {
LABEL_11:
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::isSplat(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 24);
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned char]";
      *((_QWORD *)&v21 + 1) = 63;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[89] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned char,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      *((_QWORD *)&v21 + 1) = 64;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[91] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 8)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v14);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      *((_QWORD *)&v21 + 1) = 62;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[93] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 16)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v14);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long long]";
      *((_QWORD *)&v21 + 1) = 68;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[95] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 32)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v14);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = signed char]";
      *((_QWORD *)&v21 + 1) = 61;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<signed char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[97] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<signed char,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      *((_QWORD *)&v21 + 1) = 55;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[99] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<signed char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 8)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v14);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      *((_QWORD *)&v21 + 1) = 53;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[101] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 16)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v14);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = long long]";
      *((_QWORD *)&v21 + 1) = 59;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[103] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 32)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v14);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      *((_QWORD *)&v21 + 1) = 55;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[99] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 64)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v14);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      *((_QWORD *)&v21 + 1) = 64;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[91] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      *((_QWORD *)&v21 + 1) = 53;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[101] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      *((_QWORD *)&v21 + 1) = 62;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[93] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = long]";
      *((_QWORD *)&v21 + 1) = 54;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[105] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long]";
      *((_QWORD *)&v21 + 1) = 63;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[107] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned char>]";
      *((_QWORD *)&v21 + 1) = 77;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<unsigned char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[109] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned short>]";
      *((_QWORD *)&v21 + 1) = 78;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<unsigned short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[111] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 8)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v15);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned int>]";
      *((_QWORD *)&v21 + 1) = 76;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<unsigned int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[113] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 16)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v15);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned long long>]";
      *((_QWORD *)&v21 + 1) = 82;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<unsigned long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[115] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 16 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 32)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v15);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<signed char>]";
      *((_QWORD *)&v21 + 1) = 75;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<signed char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[117] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 64)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v15);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<short>]";
      *((_QWORD *)&v21 + 1) = 69;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[119] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 8)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v15);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<int>]";
      *((_QWORD *)&v21 + 1) = 67;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[121] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 16)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v15);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<long long>]";
      *((_QWORD *)&v21 + 1) = 73;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[123] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 16 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 32)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v15);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = float]";
      *((_QWORD *)&v21 + 1) = 55;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<float,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[125] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<float,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Shape;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 64)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v15);
    result = mlir::ShapedType::getNumElements(Shape, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = double]";
      *((_QWORD *)&v21 + 1) = 56;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<double,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[127] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<double,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<float,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t OperandRange;
  unint64_t result;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *Shape;
  uint64_t v24;
  char v25;
  __int128 v26;

  v26 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  result = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (result != 32)
    goto LABEL_38;
  v6 = *(void **)(*(_QWORD *)OperandRange + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  v16 = v15 || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (v16 || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v18 = *a1;
    v19 = *(_QWORD *)(*a1 + 32);
    v20 = *(unsigned __int8 *)(v18 + 24);
    v22 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)&v26 = *(_QWORD *)(v18 + 8);
    v21 = v26;
    *((_QWORD *)&v26 + 1) = v22;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v26);
    result = mlir::ShapedType::getNumElements(Shape, v24);
    *(_QWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v20;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    *(_QWORD *)(a2 + 40) = result;
    v25 = 1;
    *(_QWORD *)(a2 + 48) = v21;
    *(_QWORD *)(a2 + 56) = v22;
  }
  else
  {
LABEL_38:
    v25 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v25;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<float>]";
      *((_QWORD *)&v21 + 1) = 69;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<float>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[129] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIdEEJENS5_17integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(a1, a2, a3);
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<double,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t OperandRange;
  unint64_t result;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *Shape;
  uint64_t v24;
  char v25;
  __int128 v26;

  v26 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  result = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (result != 64)
    goto LABEL_38;
  v6 = *(void **)(*(_QWORD *)OperandRange + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  v16 = v15 || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (v16 || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v18 = *a1;
    v19 = *(_QWORD *)(*a1 + 32);
    v20 = *(unsigned __int8 *)(v18 + 24);
    v22 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)&v26 = *(_QWORD *)(v18 + 8);
    v21 = v26;
    *((_QWORD *)&v26 + 1) = v22;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v26);
    result = mlir::ShapedType::getNumElements(Shape, v24);
    *(_QWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v20;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    *(_QWORD *)(a2 + 40) = result;
    v25 = 1;
    *(_QWORD *)(a2 + 48) = v21;
    *(_QWORD *)(a2 + 56) = v22;
  }
  else
  {
LABEL_38:
    v25 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v25;
  return result;
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIdEEJENS5_17integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  char v7;
  uint64_t *Shape;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v21 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v21;
    if (v13)
    {
      *(_QWORD *)&v22 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<double>]";
      *((_QWORD *)&v22 + 1) = 70;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v22 + 1) >= v14)
        v15 = v14;
      else
        v15 = *((_QWORD *)&v22 + 1);
      v16 = v22 + v15;
      v17 = *((_QWORD *)&v22 + 1) - v15;
      if (*((_QWORD *)&v22 + 1) - v15 >= 0x12)
        v18 = 18;
      else
        v18 = *((_QWORD *)&v22 + 1) - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<std::complex<double>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v16 + v18, v20);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v21;
    }
  }
  if (v6[131] != a2)
  {
    v7 = 0;
LABEL_4:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
    return;
  }
  v22 = *(_OWORD *)(*a1 + 8);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v22);
  if (mlir::ShapedType::getNumElements(Shape, v9))
  {
    mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>(a1, (uint64_t)&v22);
    v7 = v24;
    if (!v24)
      goto LABEL_4;
    v10 = *(_BYTE *)(*a1 + 24);
    if (BYTE8(v22))
      v11 = 0;
    else
      v11 = v23;
    v12 = v22 + 16 * v11;
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 1) = v10;
    *(_QWORD *)(a3 + 8) = v12;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_WORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  unint64_t result;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *Shape;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t OperandRange;
  __int128 v26;

  v26 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(Value);
  if (result != 32)
    goto LABEL_36;
  v6 = *(void **)(*(_QWORD *)Value + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v15
    || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (v24 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (v24 = 1),
        v24))
  {
    v16 = *a1;
    v17 = *(_QWORD *)(*a1 + 32);
    v18 = *(unsigned __int8 *)(v16 + 24);
    v20 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)&v26 = *(_QWORD *)(v16 + 8);
    v19 = v26;
    *((_QWORD *)&v26 + 1) = v20;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v26);
    result = mlir::ShapedType::getNumElements(Shape, v22);
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v18;
    *(_QWORD *)(a2 + 40) = result;
    v23 = 1;
    *(_QWORD *)(a2 + 48) = v19;
    *(_QWORD *)(a2 + 56) = v20;
  }
  else
  {
LABEL_36:
    v23 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v23;
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  unint64_t result;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *Shape;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t OperandRange;
  __int128 v26;

  v26 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(Value);
  if (result != 64)
    goto LABEL_36;
  v6 = *(void **)(*(_QWORD *)Value + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v15
    || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (v24 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (v24 = 1),
        v24))
  {
    v16 = *a1;
    v17 = *(_QWORD *)(*a1 + 32);
    v18 = *(unsigned __int8 *)(v16 + 24);
    v20 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)&v26 = *(_QWORD *)(v16 + 8);
    v19 = v26;
    *((_QWORD *)&v26 + 1) = v20;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v26);
    result = mlir::ShapedType::getNumElements(Shape, v22);
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v18;
    *(_QWORD *)(a2 + 40) = result;
    v23 = 1;
    *(_QWORD *)(a2 + 48) = v19;
    *(_QWORD *)(a2 + 56) = v20;
  }
  else
  {
LABEL_36:
    v23 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v23;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *Shape;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v6 = &unk_25451A000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451A000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      *((_QWORD *)&v21 + 1) = 65;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451A000;
      a2 = v20;
    }
  }
  if (v6[266] == a2)
  {
    v7 = *(_QWORD *)a1;
    v21 = *(_OWORD *)(*(_QWORD *)a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v21);
    mlir::ShapedType::getNumElements(Shape, v9);
    v10 = *(_BYTE *)(*(_QWORD *)a1 + 24);
    v11 = (_QWORD *)operator new();
    *v11 = &unk_24C052708;
    v11[1] = v7;
    v11[2] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 1) = v10;
    *(_QWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[64];
  char v21;
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25451A000;
  if ((v5 & 1) == 0)
  {
    v19 = a2;
    v6 = (_QWORD *)&unk_25451A000;
    a2 = v19;
    if (v11)
    {
      *(_QWORD *)v20 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      *(_QWORD *)&v20[8] = 61;
      v12 = llvm::StringRef::find((uint64_t *)v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(_QWORD *)&v20[8] >= v12)
        v13 = v12;
      else
        v13 = *(_QWORD *)&v20[8];
      v14 = *(_QWORD *)v20 + v13;
      v15 = *(_QWORD *)&v20[8] - v13;
      if (*(_QWORD *)&v20[8] - v13 >= 0x12)
        v16 = 18;
      else
        v16 = *(_QWORD *)&v20[8] - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      v6 = (_QWORD *)&unk_25451A000;
      a2 = v19;
    }
  }
  if (v6[274] == a2)
  {
    mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>(a1, (uint64_t)v20);
    v7 = v21;
    if (v21)
    {
      v8 = v20[0];
      v22[0] = *(_OWORD *)&v20[1];
      *(_OWORD *)((char *)v22 + 15) = *(_OWORD *)&v20[16];
      v9 = *(_BYTE *)(*(_QWORD *)a1 + 24);
      v10 = operator new();
      *(_QWORD *)v10 = &unk_24C052678;
      *(_BYTE *)(v10 + 8) = v8;
      *(_OWORD *)(v10 + 9) = v22[0];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)((char *)v22 + 15);
      *(_BYTE *)(a3 + 1) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v7 = 1;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::AttributeElementIterator,mlir::Attribute>::~OpaqueIterator()
{
  JUMPOUT(0x20BD002F8);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::AttributeElementIterator,mlir::Attribute>::clone@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_24C052708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *a2 = v4;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::AttributeElementIterator,mlir::Attribute>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = *(_QWORD *)(a1 + 16) + a2;
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mlir::DenseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = BOOL]";
      v18 = 54;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<BOOL,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[133] == a2)
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::buildValueResult<BOOL>((uint64_t)a1, a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::IntElementIterator,llvm::APInt>::~OpaqueIterator()
{
  JUMPOUT(0x20BD002F8);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::IntElementIterator,llvm::APInt>::clone@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_24C052678;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::IntElementIterator,llvm::APInt>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 24) + a2;
  v7 = v5 + 7;
  v8 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == 1)
    v8 = 1;
  v9 = v8 * v6;
  if (v5 == 1)
  {
    v10 = (*(unsigned __int8 *)(v4 + (v9 >> 3)) >> (v9 & 7)) & 1;
    *((_DWORD *)a3 + 2) = 1;
    *(_QWORD *)a3 = v10;
    return;
  }
  *((_DWORD *)a3 + 2) = v5;
  if (v5 <= 0x40)
  {
    *(_QWORD *)a3 = 0;
    if (v7 < 8)
      return;
    goto LABEL_10;
  }
  llvm::APInt::initSlowCase(a3, 0, 0);
  if (*((_DWORD *)a3 + 2) >= 0x41u)
    a3 = *(llvm::APInt **)a3;
  if (v7 >= 8)
LABEL_10:
    memmove(a3, (const void *)(v4 + (v9 >> 3)), v7 >> 3);
}

uint64_t mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::buildValueResult<BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *Shape;
  uint64_t v8;
  char v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)a1 + 8);
  *(_QWORD *)&v11 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v11);
  result = mlir::Type::isInteger((mlir::Type *)&v11, 1);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v6 = *(unsigned __int8 *)(*(_QWORD *)a1 + 24);
    v11 = *(_OWORD *)(*(_QWORD *)a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v11);
    mlir::ShapedType::getNumElements(Shape, v8);
    v9 = *(_BYTE *)(*(_QWORD *)a1 + 24);
    result = operator new();
    *(_QWORD *)result = &unk_24C0526A8;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = v6;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(a2 + 1) = v9;
    *(_QWORD *)(a2 + 8) = result;
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = v10;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[64];
  char v21;
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v19 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v19;
    if (v11)
    {
      *(_QWORD *)v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APInt>]";
      *(_QWORD *)&v20[8] = 75;
      v12 = llvm::StringRef::find((uint64_t *)v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(_QWORD *)&v20[8] >= v12)
        v13 = v12;
      else
        v13 = *(_QWORD *)&v20[8];
      v14 = *(_QWORD *)v20 + v13;
      v15 = *(_QWORD *)&v20[8] - v13;
      if (*(_QWORD *)&v20[8] - v13 >= 0x12)
        v16 = 18;
      else
        v16 = *(_QWORD *)&v20[8] - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<std::complex<llvm::APInt>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v19;
    }
  }
  if (v6[135] == a2)
  {
    mlir::DenseElementsAttr::tryGetComplexIntValues(this, (uint64_t)v20);
    v7 = v21;
    if (v21)
    {
      v8 = v20[0];
      v22[0] = *(_OWORD *)&v20[1];
      *(_OWORD *)((char *)v22 + 15) = *(_OWORD *)&v20[16];
      v9 = *(_BYTE *)(*(_QWORD *)this + 24);
      v10 = operator new();
      *(_QWORD *)v10 = &unk_24C052738;
      *(_BYTE *)(v10 + 8) = v8;
      *(_OWORD *)(v10 + 9) = v22[0];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)((char *)v22 + 15);
      *(_BYTE *)(a3 + 1) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v7 = 1;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(this, a2, a3);
  }
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::BoolElementIterator,BOOL>::~OpaqueIterator()
{
  JUMPOUT(0x20BD002F8);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::BoolElementIterator,BOOL>::clone@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_24C0526A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *a2 = v4;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::BoolElementIterator,BOOL>::at(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  if (*(_BYTE *)(a1 + 16))
    v2 = 0;
  else
    v2 = *(_QWORD *)(a1 + 24) + a2;
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + (v2 >> 3)) >> (v2 & 7)) & 1;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[17];
  _OWORD v22[4];
  char v23;
  __int128 v24;
  _BYTE v25[23];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25451A000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451A000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)v21 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      *(_QWORD *)&v21[8] = 63;
      v13 = llvm::StringRef::find((uint64_t *)v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(_QWORD *)&v21[8] >= v13)
        v14 = v13;
      else
        v14 = *(_QWORD *)&v21[8];
      v15 = *(_QWORD *)v21 + v14;
      v16 = *(_QWORD *)&v21[8] - v14;
      if (*(_QWORD *)&v21[8] - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *(_QWORD *)&v21[8] - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451A000;
      a2 = v20;
    }
  }
  if (v6[270] == a2)
  {
    mlir::DenseElementsAttr::tryGetFloatValues(this, (uint64_t)v21);
    v7 = v23;
    if (v23)
    {
      v8 = v21[0];
      v24 = *(_OWORD *)&v21[1];
      *(_OWORD *)v25 = v22[0];
      *(_QWORD *)&v25[15] = *(_QWORD *)((char *)v22 + 15);
      v9 = *(_BYTE *)(*(_QWORD *)this + 24);
      v10 = operator new();
      *(_QWORD *)v10 = &unk_24C0526D8;
      *(_BYTE *)(v10 + 8) = v8;
      v11 = *(_OWORD *)v25;
      *(_OWORD *)(v10 + 9) = v24;
      *(_OWORD *)(v10 + 25) = v11;
      *(_QWORD *)(v10 + 40) = *(_QWORD *)&v25[15];
      *(_BYTE *)(a3 + 1) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v7 = 1;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIN4llvm7APFloatEEEJENS5_17integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(this, a2, a3);
  }
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexIntElementIterator,std::complex<llvm::APInt>>::~OpaqueIterator()
{
  JUMPOUT(0x20BD002F8);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexIntElementIterator,std::complex<llvm::APInt>>::clone@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_24C052738;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

llvm::APInt *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexIntElementIterator,std::complex<llvm::APInt>>::at@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 24) + a2;
  v7 = v3;
  return mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v5, a3);
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIN4llvm7APFloatEEEJENS5_17integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[17];
  _OWORD v22[4];
  char v23;
  __int128 v24;
  _BYTE v25[23];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APFloat>]";
      *(_QWORD *)&v21[8] = 77;
      v13 = llvm::StringRef::find((uint64_t *)v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(_QWORD *)&v21[8] >= v13)
        v14 = v13;
      else
        v14 = *(_QWORD *)&v21[8];
      v15 = *(_QWORD *)v21 + v14;
      v16 = *(_QWORD *)&v21[8] - v14;
      if (*(_QWORD *)&v21[8] - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *(_QWORD *)&v21[8] - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<llvm::APFloat>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v20;
    }
  }
  if (v6[137] == a2)
  {
    mlir::DenseElementsAttr::tryGetComplexFloatValues(this, (uint64_t)v21);
    v7 = v23;
    if (v23)
    {
      v8 = v21[0];
      v24 = *(_OWORD *)&v21[1];
      *(_OWORD *)v25 = v22[0];
      *(_QWORD *)&v25[15] = *(_QWORD *)((char *)v22 + 15);
      v9 = *(_BYTE *)(*(_QWORD *)this + 24);
      v10 = operator new();
      *(_QWORD *)v10 = &unk_24C052768;
      *(_BYTE *)(v10 + 8) = v8;
      v11 = *(_OWORD *)v25;
      *(_OWORD *)(v10 + 9) = v24;
      *(_OWORD *)(v10 + 25) = v11;
      *(_QWORD *)(v10 + 40) = *(_QWORD *)&v25[15];
      *(_BYTE *)(a3 + 1) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = v7;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::FloatElementIterator,llvm::APFloat>::~OpaqueIterator()
{
  JUMPOUT(0x20BD002F8);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::FloatElementIterator,llvm::APFloat>::clone@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_24C0526D8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a1 + 40);
  *a2 = v4;
  return result;
}

const llvm::APInt *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::FloatElementIterator,llvm::APFloat>::at@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v5 = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 32);
  v6 = v3 + a2;
  return llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*((const llvm::APInt **)&v5, a3);
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexFloatElementIterator,std::complex<llvm::APFloat>>::~OpaqueIterator()
{
  JUMPOUT(0x20BD002F8);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexFloatElementIterator,std::complex<llvm::APFloat>>::clone@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_24C052768;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a1 + 40);
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexFloatElementIterator,std::complex<llvm::APFloat>>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  v5 = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 32);
  v6 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v5, &v8);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v8, (llvm::APFloatBase *)&v5, a3);
  if (v11 >= 0x41 && v10)
    MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  if (v9 >= 0x41)
  {
    if (v8)
      MEMORY[0x20BD002D4](v8, 0x1000C8000313F17);
  }
}

BOOL mlir::detail::storage_user_base_impl::hasTrait<mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v27 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v9 = v8;
    a1 = v27;
    if (v9)
    {
      v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v30 = 79;
      v10 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v10)
        v11 = v10;
      else
        v11 = v30;
      v12 = &v29[v11];
      v13 = v30 - v11;
      if (v30 - v11 >= 0x12)
        v14 = 18;
      else
        v14 = v30 - v11;
      v15 = v13 - v14;
      if (v15 >= v15 - 1)
        v16 = v15 - 1;
      else
        v16 = v15;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v27;
    }
  }
  v3 = v2[31];
  v5 = &unk_25451B000;
  if ((v4 & 1) == 0)
  {
    v26 = v3;
    v28 = a1;
    v5 = (_QWORD *)&unk_25451B000;
    v18 = v17;
    v3 = v26;
    a1 = v28;
    if (v18)
    {
      v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr::Trait<Empty>]";
      v30 = 82;
      v19 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v19)
        v20 = v19;
      else
        v20 = v30;
      v21 = &v29[v20];
      v22 = v30 - v20;
      if (v30 - v20 >= 0x12)
        v23 = 18;
      else
        v23 = v30 - v20;
      v24 = v22 - v23;
      if (v24 >= v24 - 1)
        v25 = v24 - 1;
      else
        v25 = v24;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::ElementsAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      v5 = (_QWORD *)&unk_25451B000;
      v3 = v26;
      a1 = v28;
    }
  }
  return v3 == a1 || v5[139] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSA_31DenseIntOrFPElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void mlir::AbstractAttribute::get<mlir::DenseStringElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseStringElementsAttr,mlir::DenseElementsAttr,mlir::detail::DenseStringElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSB_30DenseStringElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSA_30DenseStringElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getType;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[268], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc_type_malloc(0x20uLL, 0xE0040DD5D8FE3uLL);
  *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::isSplat;
  v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getShapedType;
  v2[3] = 0;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)&unk_254519000;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v14 = 68;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[403], v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getValuesImpl(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;

  v9 = a1;
  _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb1EEEEEDaNS_6TypeIDET1_((uint64_t)&v9, a2, (uint64_t)v10);
  if (v12)
  {
    v5 = v10[0];
    *(_BYTE *)a3 = v10[0];
    *(_BYTE *)(a3 + 1) = v10[1];
    v6 = v11;
    if (!v5)
      v11 = 0;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = 1;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplINS_9AttributeEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(&v9, a2, a3);
    if (v12)
      v7 = v10[0] == 0;
    else
      v7 = 0;
    if (v7)
    {
LABEL_11:
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::isSplat(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 24);
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t *Shape;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v6 = &unk_25451B000;
  if ((v5 & 1) == 0)
  {
    v21 = a2;
    v6 = (_QWORD *)&unk_25451B000;
    a2 = v21;
    if (v13)
    {
      *(_QWORD *)&v22 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::StringRef]";
      *((_QWORD *)&v22 + 1) = 65;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v22 + 1) >= v14)
        v15 = v14;
      else
        v15 = *((_QWORD *)&v22 + 1);
      v16 = v22 + v15;
      v17 = *((_QWORD *)&v22 + 1) - v15;
      if (*((_QWORD *)&v22 + 1) - v15 >= 0x12)
        v18 = 18;
      else
        v18 = *((_QWORD *)&v22 + 1) - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<llvm::StringRef,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v16 + v18, v20);
      v6 = (_QWORD *)&unk_25451B000;
      a2 = v21;
    }
  }
  if (v6[141] == a2)
  {
    v22 = *(_OWORD *)(*(_QWORD *)a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v22);
    if (mlir::ShapedType::getNumElements(Shape, v8))
    {
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v22 = *(_OWORD *)(*(_QWORD *)a1 + 8);
      v10 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v22);
      mlir::ShapedType::getNumElements(v10, v11);
      v12 = *(_BYTE *)(*(_QWORD *)a1 + 24);
    }
    else
    {
      v12 = 0;
      v9 = 0;
    }
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 1) = v12;
    *(_QWORD *)(a3 + 8) = v9;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplINS_9AttributeEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t *Shape;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v6 = &unk_25451A000;
  if ((v5 & 1) == 0)
  {
    v21 = a2;
    v6 = (_QWORD *)&unk_25451A000;
    a2 = v21;
    if (v13)
    {
      *(_QWORD *)&v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      *((_QWORD *)&v22 + 1) = 65;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v22 + 1) >= v14)
        v15 = v14;
      else
        v15 = *((_QWORD *)&v22 + 1);
      v16 = v22 + v15;
      v17 = *((_QWORD *)&v22 + 1) - v15;
      if (*((_QWORD *)&v22 + 1) - v15 >= 0x12)
        v18 = 18;
      else
        v18 = *((_QWORD *)&v22 + 1) - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v16 + v18, v20);
      v6 = (_QWORD *)&unk_25451A000;
      a2 = v21;
    }
  }
  if (v6[266] == a2)
  {
    v8 = *a1;
    v22 = *(_OWORD *)(*a1 + 8);
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v22);
    mlir::ShapedType::getNumElements(Shape, v10);
    v11 = *(_BYTE *)(*a1 + 24);
    v12 = (_QWORD *)operator new();
    *v12 = &unk_24C052708;
    v12[1] = v8;
    v12[2] = 0;
    *(_BYTE *)(a3 + 1) = v11;
    *(_QWORD *)(a3 + 8) = v12;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = v7;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSA_30DenseStringElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void mlir::AbstractAttribute::get<mlir::DenseResourceElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseResourceElementsAttr,mlir::Attribute,mlir::detail::DenseResourceElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSB_32DenseResourceElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSA_32DenseResourceElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getType;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[268], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc_type_malloc(0x20uLL, 0xE0040DD5D8FE3uLL);
  *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::isSplat;
  v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getShapedType;
  v2[3] = 0;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)&unk_254519000;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v14 = 68;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[403], v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getValuesImpl(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

BOOL mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::isSplat(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)a2;
  if (a2)
    a2 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a2 + 8);
  return mlir::ElementsAttr::getNumElements(v2, (uint64_t)a2) == 1;
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSB_32DenseResourceElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSA_32DenseResourceElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v7[2];
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseResourceElementsAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseResourceElementsAttr>(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v3 = *(_QWORD *)(a1 + 8);
  v14 = *(_OWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (_QWORD *)**a3;
    if (v4)
      v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  v10 = v14;
  v11 = v15;
  *(_QWORD *)&v12 = v4;
  *((_QWORD *)&v12 + 1) = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v13[0] = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  v13[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, &v12, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::DictionaryAttr,mlir::Attribute,mlir::detail::DictionaryAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

void _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSB_21DictionaryAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t NumNeededNEs;
  _QWORD v11[4];
  __int128 v12;

  v7 = *(__int128 **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  if (v6)
  {
    v8 = 16 * v6;
    do
    {
      v9 = *v7++;
      v12 = v9;
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v12);
      mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, NumNeededNEs);
      mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, *((uint64_t *)&v12 + 1));
      v8 -= 16;
    }
    while (v8);
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSA_21DictionaryAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;

  *(_QWORD *)&v5 = a3;
  *((_QWORD *)&v5 + 1) = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DictionaryAttr>(a2, &v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DictionaryAttr>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  mlir::DictionaryAttr *Context;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  mlir::MLIRContext *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[48];
  _QWORD *v16;
  unsigned int v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v2 = *(_OWORD *)(a1 + 8);
  v10 = *a2;
  v11 = v2;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::NamedAttribute>>,void>::replace((uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v16);
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v13 = v15;
  v14 = 0x300000000;
  v4 = v17;
  if (!v17)
  {
    v4 = 0;
    v7 = (mlir::MLIRContext *)v15;
    goto LABEL_9;
  }
  if (v17 < 4)
  {
    v6 = v15;
    v5 = v17;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v17, 16);
  v5 = v17;
  if (v17)
  {
    v6 = v13;
LABEL_7:
    memcpy(v6, v16, 16 * v5);
  }
  LODWORD(v14) = v4;
  v7 = (mlir::MLIRContext *)v13;
LABEL_9:
  v8 = mlir::DictionaryAttr::get(Context, v7, v4);
  if (v13 != v15)
    free(v13);
  if (v16 != v18)
    free(v16);
  return v8;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::NamedAttribute>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  unsigned int v5;
  _QWORD *v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  void *__src;
  unsigned int v11;
  int v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::NamedAttribute>,void>::replace(*(_QWORD *)(a1 + 8), a2, (uint64_t)&__src);
  v4 = (void *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x300000000;
  v5 = v11;
  v6 = __src;
  if (v11)
    v7 = &__src == (void **)a3;
  else
    v7 = 1;
  if (v7)
    goto LABEL_14;
  if (__src == v13)
  {
    if (v11 < 4)
    {
      v9 = v11;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11, 16);
      v9 = v11;
      v6 = __src;
      if (!v11)
      {
LABEL_12:
        *(_DWORD *)(a3 + 8) = v5;
        goto LABEL_13;
      }
      v4 = *(void **)a3;
    }
    memcpy(v4, v6, 16 * v9);
    v6 = __src;
    goto LABEL_12;
  }
  *(_QWORD *)a3 = __src;
  v8 = v12;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v8;
  __src = v13;
  v12 = 0;
  v6 = v13;
LABEL_13:
  v11 = 0;
LABEL_14:
  if (v6 != v13)
    free(v6);
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::NamedAttribute>,void>::replace(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  unsigned int v17;
  _QWORD v18[2];
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x300000000;
  if (a1)
  {
    v5 = v21;
    v6 = 16 * a1;
    do
    {
      while (1)
      {
        v7 = *(uint64_t **)a2;
        v8 = *(_QWORD *)(a2 + 8) - 2;
        *(_QWORD *)a2 += 16;
        *(_QWORD *)(a2 + 8) = v8;
        ZinMirCacheTensors::ZinMirCacheTensors(v18, *v7, v7[1]);
        v10 = v18[0];
        v9 = v18[1];
        v11 = v20;
        if (v20 >= HIDWORD(v20))
          break;
        v12 = &v19[2 * v20];
        *v12 = v18[0];
        v12[1] = v9;
        v13 = (v11 + 1);
        LODWORD(v20) = v11 + 1;
        v6 -= 16;
        if (!v6)
          goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      v14 = &v19[2 * v20];
      *v14 = v10;
      v14[1] = v9;
      v13 = (v20 + 1);
      LODWORD(v20) = v20 + 1;
      v6 -= 16;
    }
    while (v6);
LABEL_7:
    v15 = v19;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x300000000;
    if ((_DWORD)v13 && &v19 != (_QWORD **)a3)
    {
      if (v15 == v21)
      {
        v17 = v13;
        if (v13 < 4
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13, 16),
              v17 = v20,
              v5 = v19,
              (_DWORD)v20))
        {
          memcpy(*(void **)a3, v5, 16 * v17);
          v5 = v19;
        }
        *(_DWORD *)(a3 + 8) = v13;
      }
      else
      {
        *(_QWORD *)a3 = v15;
        v16 = HIDWORD(v20);
        *(_DWORD *)(a3 + 8) = v13;
        *(_DWORD *)(a3 + 12) = v16;
        v19 = v21;
        HIDWORD(v20) = 0;
      }
      LODWORD(v20) = 0;
      v15 = v5;
    }
    if (v15 != v21)
      free(v15);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x300000000;
  }
}

void mlir::AbstractAttribute::get<mlir::FloatAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::FloatAttr,mlir::Attribute,mlir::detail::FloatAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSB_16FloatAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSA_16FloatAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>::getType;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[268], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::FloatAttr,mlir::Attribute,mlir::detail::FloatAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return v2[31] == a1;
}

void _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSB_16FloatAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::detail::walkImmediateSubElementsImpl<mlir::FloatAttr>(a2, a3, a4, a5, a6);
}

void mlir::detail::walkImmediateSubElementsImpl<mlir::FloatAttr>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const llvm::detail::DoubleAPFloat *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  uint64_t v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v9 = (const llvm::detail::DoubleAPFloat *)(a1 + 3);
  v10 = (void *)a1[3];
  v13 = a1[1];
  v11 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v11 == v10)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v14, v9);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v14, v9);
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v13);
  if (v11 == (void *)v14[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSA_16FloatAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v7[2];
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FloatAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FloatAttr>(_QWORD *a1, uint64_t a2, uint64_t **a3)
{
  const llvm::detail::DoubleAPFloat *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  llvm::APFloatBase *AttributeUniquer;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v4 = (const llvm::detail::DoubleAPFloat *)(a1 + 3);
  v5 = (void *)a1[3];
  v15 = a1[1];
  v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v6 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v17, v4);
    if (v15)
      goto LABEL_3;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v17, v4);
    if (v15)
    {
LABEL_3:
      v7 = **a3;
      goto LABEL_6;
    }
  }
  v7 = 0;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v13 = v7;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v14[1] = Context;
  v10 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, &v13, (uint64_t)&v16);
  if (v6 == (void *)v17[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
  return v10;
}

void llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::FloatAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v2 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  v3 = *(void **)(a2 + 24);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v3)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  else
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
}

void mlir::AbstractAttribute::get<mlir::IntegerAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::IntegerAttr,mlir::Attribute,mlir::detail::IntegerAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSB_18IntegerAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSA_18IntegerAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>::getType;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[268], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::IntegerAttr,mlir::Attribute,mlir::detail::IntegerAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return v2[31] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSB_18IntegerAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void **v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[4];
  uint64_t v15;
  const void *v16;
  unsigned int v17;

  v11 = (const void **)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 8);
  v15 = v12;
  v17 = *(_DWORD *)(a2 + 24);
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, v11);
    v12 = v15;
  }
  else
  {
    v16 = *v11;
  }
  v14[0] = a3;
  v14[1] = a4;
  v14[2] = a5;
  v14[3] = a6;
  result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v14, v12);
  if (v17 >= 0x41)
  {
    result = (uint64_t)v16;
    if (v16)
      return MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSA_18IntegerAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v7[2];
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::IntegerAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::IntegerAttr>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 isSignlessInteger;
  mlir::MLIRContext *Context;
  mlir::BoolAttr *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  const void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v4 = (const void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v15 = v5;
  v17 = *(_DWORD *)(a1 + 24);
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, v4);
    if (v15)
      goto LABEL_3;
  }
  else
  {
    v16 = *v4;
    if (v5)
    {
LABEL_3:
      v6 = **a3;
      goto LABEL_6;
    }
  }
  v6 = 0;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v19 = v6;
  isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)&v19, 1);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v9 = Context;
  if (isSignlessInteger)
  {
    v10 = v17;
    if (v17 > 0x40)
      v11 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v16) == v10;
    else
      v11 = v16 == 0;
    v14 = v11;
    v12 = mlir::BoolAttr::get(v9, (mlir::MLIRContext *)(v14 ^ 1u));
    if (v17 < 0x41)
      return v12;
  }
  else
  {
    v12 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v19, (uint64_t)&v16);
    if (v17 < 0x41)
      return v12;
  }
  if (!v16)
    return v12;
  MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a2 + 24) >= 0x41u)
  {
    result = *(_QWORD *)(a2 + 16);
    if (result)
      JUMPOUT(0x20BD002D4);
  }
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::IntegerSetAttr,mlir::Attribute,mlir::detail::IntegerSetAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSA_21IntegerSetAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  v6 = a2;
  v2 = *(_QWORD *)(a2 + 8);
  mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext((mlir::IntegerSet *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, &v7);
}

void mlir::AbstractAttribute::get<mlir::OpaqueAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::OpaqueAttr,mlir::Attribute,mlir::detail::OpaqueAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSB_17OpaqueAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSA_17OpaqueAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>::getType;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[268], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

BOOL mlir::detail::StorageUserBase<mlir::OpaqueAttr,mlir::Attribute,mlir::detail::OpaqueAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return v2[31] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSB_17OpaqueAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 32);
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSA_17OpaqueAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v7[2];
  uint64_t *v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueAttr>(a2, v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueAttr>(_QWORD *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[2];

  v12 = a1;
  v3 = a1[4];
  if (!a1[1])
  {
    v4 = 0;
    v6 = a1[2];
    v5 = a1[3];
    if (v3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v4 = **a2;
  v6 = a1[2];
  v5 = a1[3];
  if (!v3)
    goto LABEL_5;
LABEL_3:
  v7 = **a3;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v13 = v4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  v14[1] = Context;
  v20[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v20[1] = v14;
  v17 = v13;
  v18[0] = v6;
  v18[1] = v5;
  v19 = v7;
  v10 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(&v17, (uint64_t)v18, &v19);
  v15[0] = &v17;
  v15[1] = v20;
  v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

void mlir::AbstractAttribute::get<mlir::SparseElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::SparseElementsAttr,mlir::Attribute,mlir::detail::SparseElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSB_25SparseElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSA_25SparseElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getType;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[268], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc_type_malloc(0x20uLL, 0xE0040DD5D8FE3uLL);
  *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::isSplat;
  v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getShapedType;
  v2[3] = 0;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)&unk_254519000;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v14 = 68;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[403], v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getValuesImpl(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  v3 = a1;
  mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>((mlir::SparseElementsAttr *)&v3, a2, a3);
}

BOOL mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::isSplat(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)a2;
  if (a2)
    a2 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a2 + 8);
  return mlir::ElementsAttr::getNumElements(v2, (uint64_t)a2) == 1;
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451A000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      v18 = 65;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451A000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[266] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<mlir::Attribute>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<mlir::Attribute>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<mlir::Attribute>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451A000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      v18 = 61;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451A000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[274] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<mlir::Attribute>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APFloatBase *ZeroAttr;
  uint64_t v5;
  uint64_t *Shape;
  uint64_t v7;
  uint64_t *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _OWORD v30[2];
  _OWORD *v31;
  unsigned __int8 v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  ZeroAttr = mlir::SparseElementsAttr::getZeroAttr(a1);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v30[0] = *(_OWORD *)(v5 + 8);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
  mlir::ShapedType::getNumElements(Shape, v7);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v26);
  v8 = v26;
  v9 = (char *)v27 - (char *)v26;
  if (v27 == v26)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    if (v9 < 0)
      abort();
    v10 = (char *)operator new((char *)v27 - (char *)v26);
    v11 = &v10[8 * (v9 >> 3)];
    memcpy(v10, v8, v9);
  }
  v12 = operator new(0x38uLL);
  *v12 = &unk_24C0050C0;
  v12[1] = v10;
  v12[2] = v11;
  v12[3] = v11;
  v12[4] = v5;
  v12[5] = 0;
  v12[6] = ZeroAttr;
  v34 = v12;
  v13 = *(_QWORD **)a1;
  if (v13)
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v13 + 8);
  else
    v14 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v13, v14);
  v15 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
  v29 = v15;
  *(_QWORD *)&v30[0] = 0;
  v17 = (_QWORD *)v30 + 1;
  if (!v15)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)&v30[0];
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_16:
    v19 = (_QWORD *)(a2 + 32);
    goto LABEL_17;
  }
  if (v15 == v28)
  {
    v31 = (_OWORD *)((char *)v30 + 8);
    (*(void (**)(_QWORD *, char *))(v28[0] + 24))(v28, (char *)v30 + 8);
    v18 = v31;
  }
  else
  {
    v18 = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    v31 = v18;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)&v30[0];
  *(_BYTE *)(a2 + 8) = 0;
  v16 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v18)
    goto LABEL_16;
  if (v18 == (_OWORD *)((char *)v30 + 8))
  {
    *(_QWORD *)(a2 + 32) = v16;
    (*(void (**)(char *))(*((_QWORD *)&v30[0] + 1) + 24))((char *)v30 + 8);
    v25 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v25)
      goto LABEL_23;
    goto LABEL_18;
  }
  v19 = &v31;
  *(_QWORD *)(a2 + 32) = v18;
LABEL_17:
  *v19 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_18:
  if (v31 == (_OWORD *)((char *)v30 + 8))
  {
    v20 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_23;
    v20 = 5;
    v17 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v20))(v17, v16);
LABEL_23:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_28;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_28:
  v23 = v34;
  if (v34 == v33)
  {
    v24 = 4;
    v23 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_33;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_33:
  if (v8)
    operator delete(v8);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0523D8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0050C0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0050C0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x38uLL);
  *v2 = &unk_24C0050C0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  v2[6] = *(_QWORD *)(a1 + 48);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7__cloneEPNS0_6__baseIST_EE(__n128 *a1, __n128 *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&unk_24C0050C0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  v5 = (_BYTE *)a1->n128_u64[1];
  v4 = (_BYTE *)a1[1].n128_u64[0];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    a2->n128_u64[1] = (unint64_t)v7;
    a2[1].n128_u64[0] = (unint64_t)v7;
    v8 = &v7[8 * (v6 >> 3)];
    a2[1].n128_u64[1] = (unint64_t)v8;
    memcpy(v7, v5, v6);
    a2[1].n128_u64[0] = (unint64_t)v8;
  }
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEEclEOl(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];

  v2 = a1[1];
  v3 = a1[2] - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return a1[6];
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return a1[6];
  }
  v7 = a1[5] + v4;
  v8[0] = a1[4];
  v8[1] = v7;
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v8);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207AB8FF9)
    return a1 + 8;
  if (((v3 & 0x8000000207AB8FF9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207AB8FF9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207AB8FF9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_9AttributeEEENS_9FailureOrIN4llvm15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0523D8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0523D8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0523D8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::APInt>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = BOOL]";
      v18 = 54;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<BOOL,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[133] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::APInt>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  int64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int Width;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _OWORD v35[2];
  _BYTE v36[32];
  _BYTE *v37;
  unsigned __int8 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  *(_QWORD *)v36 = mlir::ElementsAttr::getElementType((uint64_t)v4, v5);
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v36);
  if (Width > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v29, 0, 0);
  else
    v29 = 0;
  v33[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)v33, (uint64_t)v36);
  if (!v39)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_40;
  }
  v6 = v36[0];
  v35[0] = *(_OWORD *)&v36[1];
  *(_OWORD *)((char *)v35 + 15) = *(_OWORD *)&v36[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v27);
  v7 = v27;
  v8 = (char *)v28 - (char *)v27;
  if (v28 == v27)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new((char *)v28 - (char *)v27);
    v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  v11 = Width;
  v12 = v29;
  Width = 0;
  v13 = (char *)operator new(0x50uLL);
  *(_QWORD *)v13 = &unk_24C004FB8;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = v10;
  *((_QWORD *)v13 + 3) = v10;
  v13[32] = v6;
  *(_OWORD *)(v13 + 33) = v35[0];
  *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v35 + 15);
  *((_DWORD *)v13 + 18) = v11;
  *((_QWORD *)v13 + 8) = v12;
  v34 = v13;
  v14 = *(_QWORD **)a1;
  if (v14)
  {
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
    v16 = v34;
    mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
    if (v16)
      goto LABEL_15;
LABEL_19:
    v32 = 0;
    *(_QWORD *)v36 = 0;
    v18 = &v36[8];
    goto LABEL_20;
  }
  v16 = v13;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v16)
    goto LABEL_19;
LABEL_15:
  if (v16 == v33)
  {
    v32 = v31;
    (*(void (**)(_QWORD *, _QWORD *))(v33[0] + 24))(v33, v31);
    v17 = v32;
    *(_QWORD *)v36 = 0;
    v18 = &v36[8];
    if (v32)
      goto LABEL_45;
LABEL_20:
    v37 = 0;
    v38 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v36;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_21:
    v19 = (_QWORD *)(a2 + 32);
    goto LABEL_22;
  }
  v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
  v32 = v17;
  *(_QWORD *)v36 = 0;
  v18 = &v36[8];
  if (!v17)
    goto LABEL_20;
LABEL_45:
  if (v17 == v31)
  {
    v37 = &v36[8];
    (*(void (**)(_QWORD *, _BYTE *))(v31[0] + 24))(v31, &v36[8]);
    v25 = v37;
  }
  else
  {
    v25 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
    v37 = v25;
  }
  v38 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v36;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v25)
    goto LABEL_21;
  if (v25 == &v36[8])
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v36[8] + 24))(&v36[8]);
    v26 = v38;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v26)
      goto LABEL_28;
    goto LABEL_23;
  }
  v19 = &v37;
  *(_QWORD *)(a2 + 32) = v25;
LABEL_22:
  *v19 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_23:
  if (v37 == &v36[8])
  {
    v20 = 4;
  }
  else
  {
    if (!v37)
      goto LABEL_28;
    v20 = 5;
    v18 = v37;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v20))(v18);
LABEL_28:
  v21 = v32;
  if (v32 == v31)
  {
    v22 = 4;
    v21 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_33;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_33:
  v23 = v34;
  if (v34 == v33)
  {
    v24 = 4;
    v23 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_38;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_38:
  if (v7)
    operator delete(v7);
LABEL_40:
  if (Width >= 0x41)
  {
    if (v29)
      MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
  }
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052108;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24C004FB8;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24C004FB8;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  llvm::APInt *v9;
  const void **v10;
  unsigned int v11;

  v2 = operator new(0x50uLL);
  *v2 = &unk_24C004FB8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v9 = (llvm::APInt *)(v2 + 8);
  v10 = (const void **)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 72);
  *((_DWORD *)v2 + 18) = v11;
  if (v11 > 0x40)
    llvm::APInt::initSlowCase(v9, v10);
  else
    *(_QWORD *)v9 = *v10;
  return v2;
}

llvm::APInt *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  llvm::APInt *result;
  const void **v11;
  unsigned int v12;

  *(_QWORD *)a2 = &unk_24C004FB8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  result = (llvm::APInt *)(a2 + 64);
  v11 = (const void **)(a1 + 64);
  v12 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 72) = v12;
  if (v12 > 0x40)
    return (llvm::APInt *)llvm::APInt::initSlowCase(result, v11);
  *(_QWORD *)result = *v11;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  void *v3;

  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    v2 = __p[8];
    if (v2)
      MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl(uint64_t a1@<X0>, _QWORD *a2@<X1>, llvm::APInt *a3@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN4llvm5APIntELb0EE6__callB8nn180100IJRZNK4mlir18SparseElementsAttr20try_value_begin_implIS2_EENS5_9FailureOrINS1_15mapped_iteratorINS1_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS5_6detail17ElementsAttrTraitIS6_E13OverloadTokenISE_EEEUllE_lEEES2_DpOT_(a1 + 8, a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207AB939DLL)
    return a1 + 8;
  if (((v3 & 0x8000000207AB939DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207AB939DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207AB939DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

void _ZNSt3__128__invoke_void_return_wrapperIN4llvm5APIntELb0EE6__callB8nn180100IJRZNK4mlir18SparseElementsAttr20try_value_begin_implIS2_EENS5_9FailureOrINS1_15mapped_iteratorINS1_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS5_6detail17ElementsAttrTraitIS6_E13OverloadTokenISE_EEEUllE_lEEES2_DpOT_(uint64_t a1@<X0>, _QWORD *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((v4 & 0x7FFFFFFF8) == 0)
  {
LABEL_5:
    v7 = (const void **)(a1 + 56);
    v8 = *(_DWORD *)(a1 + 64);
    *((_DWORD *)a3 + 2) = v8;
    if (v8 > 0x40)
    {
      llvm::APInt::initSlowCase(a3, v7);
      return;
    }
    v9 = (uint64_t)*v7;
    goto LABEL_14;
  }
  v5 = 0;
  v6 = (v4 >> 3);
  while (*(_QWORD *)(*(_QWORD *)a1 + 8 * v5) != *a2)
  {
    if (v6 == ++v5)
      goto LABEL_5;
  }
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 40) + v5;
  if (*(_BYTE *)(a1 + 32))
    v12 = 0;
  v13 = v11 + 7;
  v14 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v11 == 1)
    v14 = 1;
  v15 = v14 * v12;
  if (v11 == 1)
  {
    v9 = (*(unsigned __int8 *)(v10 + (v15 >> 3)) >> (v15 & 7)) & 1;
    *((_DWORD *)a3 + 2) = 1;
LABEL_14:
    *(_QWORD *)a3 = v9;
    return;
  }
  *((_DWORD *)a3 + 2) = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase(a3, 0, 0);
    if (*((_DWORD *)a3 + 2) >= 0x41u)
      a3 = *(llvm::APInt **)a3;
    if (v13 >= 8)
      goto LABEL_22;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    if (v13 >= 8)
LABEL_22:
      memmove(a3, (const void *)(v10 + (v15 >> 3)), v13 >> 3);
  }
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052108;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052108;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052108;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<BOOL>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned char]";
      v18 = 63;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[89] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<BOOL>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *Shape;
  uint64_t v8;
  uint64_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _OWORD v31[2];
  _OWORD *v32;
  unsigned __int8 v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v31[0] = *(_OWORD *)(v4 + 8);
  *(_QWORD *)&v31[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v31);
  if (!mlir::Type::isInteger((mlir::Type *)v31, 1))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(unsigned __int8 *)(v4 + 24);
  v31[0] = *(_OWORD *)(v4 + 8);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v31);
  mlir::ShapedType::getNumElements(Shape, v8);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v27);
  v9 = v27;
  v10 = (char *)v28 - (char *)v27;
  if (v28 == v27)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 < 0)
      abort();
    v11 = (char *)operator new((char *)v28 - (char *)v27);
    v12 = &v11[8 * (v10 >> 3)];
    memcpy(v11, v9, v10);
  }
  v13 = operator new(0x40uLL);
  *v13 = &unk_24C005590;
  v13[1] = v11;
  v13[2] = v12;
  v13[3] = v12;
  v13[4] = v5;
  v13[5] = v6;
  v13[6] = 0;
  *((_BYTE *)v13 + 56) = 0;
  v35 = v13;
  v14 = *(_QWORD **)a1;
  if (v14)
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
  else
    v15 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
  v30 = v16;
  *(_QWORD *)&v31[0] = 0;
  v18 = (_QWORD *)v31 + 1;
  if (!v16)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)&v31[0];
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v20 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v16 == v29)
  {
    v32 = (_OWORD *)((char *)v31 + 8);
    (*(void (**)(_QWORD *, char *))(v29[0] + 24))(v29, (char *)v31 + 8);
    v19 = v32;
  }
  else
  {
    v19 = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    v32 = v19;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)&v31[0];
  *(_BYTE *)(a2 + 8) = 0;
  v17 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v19)
    goto LABEL_18;
  if (v19 == (_OWORD *)((char *)v31 + 8))
  {
    *(_QWORD *)(a2 + 32) = v17;
    (*(void (**)(char *))(*((_QWORD *)&v31[0] + 1) + 24))((char *)v31 + 8);
    v26 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v26)
      goto LABEL_25;
    goto LABEL_20;
  }
  v20 = &v32;
  *(_QWORD *)(a2 + 32) = v19;
LABEL_19:
  *v20 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v32 == (_OWORD *)((char *)v31 + 8))
  {
    v21 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_25;
    v21 = 5;
    v18 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v18 + 8 * v21))(v18, v17);
LABEL_25:
  v22 = v30;
  if (v30 == v29)
  {
    v23 = 4;
    v22 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_30;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_30:
  v24 = v35;
  if (v35 == v34)
  {
    v25 = 4;
    v24 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_35;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_35:
  if (v9)
    operator delete(v9);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052438;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005590;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005590;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C005590;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C005590;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

BOOL _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_BYTE *)(a1 + 56) != 0;
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_BYTE *)(a1 + 56) != 0;
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + (v7 >> 3)) >> (v7 & 7)) & 1;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207AB9723)
    return a1 + 8;
  if (((v3 & 0x8000000207AB9723 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207AB9723))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207AB9723 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052438;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052438;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052438;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned char>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      v18 = 64;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[91] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned char,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005698;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  v9[56] = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0524C8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005698;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005698;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C005698;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C005698;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned __int8 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned __int8 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207AB9A91)
    return a1 + 8;
  if (((v3 & 0x8000000207AB9A91 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207AB9A91))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207AB9A91 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0524C8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0524C8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0524C8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned short>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      v18 = 62;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[93] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C0058A8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_WORD *)v9 + 28) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0525E8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0058A8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0058A8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C0058A8;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C0058A8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned __int16 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned __int16 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207AB9E53)
    return a1 + 8;
  if (((v3 & 0x8000000207AB9E53 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207AB9E53))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207AB9E53 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0525E8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0525E8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0525E8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned int>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long long]";
      v18 = 68;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[95] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005748;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052528;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005748;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005748;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C005748;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C005748;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned int *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned int *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABA215)
    return a1 + 8;
  if (((v3 & 0x8000000207ABA215 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABA215))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABA215 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052528;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052528;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052528;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned long long>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = signed char]";
      v18 = 61;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<signed char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[97] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005958;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052648;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005958;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005958;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_24C005958;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C005958;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABA5D7)
    return a1 + 8;
  if (((v3 & 0x8000000207ABA5D7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABA5D7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABA5D7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052648;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052648;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052648;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<signed char>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      v18 = 55;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[99] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<signed char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<signed char,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005538;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  v9[56] = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052408;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005538;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005538;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C005538;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C005538;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(char *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(char *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(char *)(*(_QWORD *)(a1 + 32) + v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABA999)
    return a1 + 8;
  if (((v3 & 0x8000000207ABA999 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABA999))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABA999 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052408;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052408;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052408;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<short>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      v18 = 53;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[101] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<short,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005850;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_WORD *)v9 + 28) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0525B8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005850;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005850;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C005850;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C005850;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(__int16 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(__int16 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(__int16 *)(*(_QWORD *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABAD5BLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABAD5BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABAD5BLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABAD5BLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0525B8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0525B8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0525B8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<int>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = long long]";
      v18 = 59;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[103] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<int,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C0056F0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0524F8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0056F0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0056F0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C0056F0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C0056F0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned int *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned int *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABB11DLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABB11DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABB11DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABB11DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0524F8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0524F8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0524F8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<long long>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      v18 = 55;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[99] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<long long,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005900;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052618;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005900;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005900;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_24C005900;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C005900;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABB4DFLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABB4DFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABB4DFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABB4DFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052618;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052618;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052618;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(v3, v4, v5);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      v18 = 64;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[91] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      v18 = 53;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[101] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      v18 = 62;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[93] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = long]";
      v18 = 54;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[105] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<long>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long]";
      v18 = 63;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[107] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<long long,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C0057A0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052558;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0057A0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0057A0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_24C0057A0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C0057A0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABB8A1)
    return a1 + 8;
  if (((v3 & 0x8000000207ABB8A1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABB8A1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABB8A1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052558;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052558;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052558;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned long>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APInt>]";
      v18 = 75;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<llvm::APInt>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[135] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C0057F8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052588;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0057F8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0057F8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_24C0057F8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C0057F8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABBC63)
    return a1 + 8;
  if (((v3 & 0x8000000207ABBC63 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABBC63))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABBC63 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052588;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052588;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052588;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APInt>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned char>]";
      v18 = 77;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<unsigned char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[109] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APInt>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _OWORD v39[2];
  _BYTE v40[32];
  _BYTE *v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APInt>>((_QWORD **)a1, &v31);
  v37[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetComplexIntValues((mlir::DenseElementsAttr *)v37, (uint64_t)v40);
  if (!v43)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_34;
  }
  v4 = v40[0];
  v39[0] = *(_OWORD *)&v40[1];
  *(_OWORD *)((char *)v39 + 15) = *(_OWORD *)&v40[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v29);
  v5 = v29;
  v6 = (char *)v30 - (char *)v29;
  v28 = v29;
  if (v30 == v29)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v30 - (char *)v29);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = v32;
  v10 = v31;
  v11 = v34;
  v12 = v33;
  v32 = 0;
  v34 = 0;
  v13 = (char *)operator new(0x60uLL);
  *(_QWORD *)v13 = &unk_24C005118;
  *((_QWORD *)v13 + 1) = v7;
  *((_QWORD *)v13 + 2) = v8;
  *((_QWORD *)v13 + 3) = v8;
  v13[32] = v4;
  *(_OWORD *)(v13 + 33) = v39[0];
  *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v39 + 15);
  *((_DWORD *)v13 + 18) = v9;
  *((_QWORD *)v13 + 8) = v10;
  *((_DWORD *)v13 + 22) = v11;
  *((_QWORD *)v13 + 10) = v12;
  v38 = v13;
  v14 = *(_QWORD **)a1;
  if (v14)
  {
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
    v16 = v38;
    v17 = v28;
    if (v38)
      goto LABEL_9;
LABEL_13:
    v36 = 0;
    *(_QWORD *)v40 = 0;
    v19 = &v40[8];
    goto LABEL_14;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  v16 = v38;
  v17 = v28;
  if (!v38)
    goto LABEL_13;
LABEL_9:
  if (v16 == v37)
  {
    v36 = v35;
    (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v35);
    v18 = v36;
    *(_QWORD *)v40 = 0;
    v19 = &v40[8];
    if (v36)
      goto LABEL_42;
LABEL_14:
    v41 = 0;
    v42 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v40;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_15:
    v20 = (_QWORD *)(a2 + 32);
    goto LABEL_16;
  }
  v18 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
  v36 = v18;
  *(_QWORD *)v40 = 0;
  v19 = &v40[8];
  if (!v18)
    goto LABEL_14;
LABEL_42:
  if (v18 == v35)
  {
    v41 = &v40[8];
    (*(void (**)(_QWORD *, _BYTE *))(v35[0] + 24))(v35, &v40[8]);
    v26 = v41;
  }
  else
  {
    v26 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
    v41 = v26;
  }
  v42 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v40;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v26)
    goto LABEL_15;
  if (v26 == &v40[8])
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v40[8] + 24))(&v40[8]);
    v27 = v42;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v27)
      goto LABEL_22;
    goto LABEL_17;
  }
  v20 = &v41;
  *(_QWORD *)(a2 + 32) = v26;
LABEL_16:
  *v20 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_17:
  if (v41 == &v40[8])
  {
    v21 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_22;
    v21 = 5;
    v19 = v41;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_22:
  v22 = v36;
  if (v36 == v35)
  {
    v23 = 4;
    v22 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_27;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_27:
  v24 = v38;
  if (v38 == v37)
  {
    v25 = 4;
    v24 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_32;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_32:
  if (v17)
    operator delete(v17);
LABEL_34:
  if (v34 >= 0x41 && v33)
    MEMORY[0x20BD002D4](v33, 0x1000C8000313F17);
  if (v32 >= 0x41)
  {
    if (v31)
      MEMORY[0x20BD002D4](v31, 0x1000C8000313F17);
  }
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052198;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

uint64_t mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APInt>>@<X0>(_QWORD **a1@<X0>, _DWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  const void *v6;
  _QWORD *v7;
  unsigned int v8;
  const void *v9;
  unsigned int v10;
  uint64_t ElementType;

  v3 = *a1;
  if (*a1)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  ElementType = mlir::ElementsAttr::getElementType((uint64_t)v3, v4);
  result = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementType);
  v10 = result;
  if (result <= 0x40)
  {
    v6 = 0;
    v9 = 0;
    a2[2] = result;
LABEL_8:
    *(_QWORD *)a2 = v6;
    v7 = a2 + 4;
    a2[6] = result;
LABEL_9:
    *v7 = v9;
    return result;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v9, 0, 0);
  result = v10;
  a2[2] = v10;
  if (result <= 0x40)
  {
    v6 = v9;
    goto LABEL_8;
  }
  result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)a2, &v9);
  v8 = v10;
  v7 = a2 + 4;
  a2[6] = v10;
  if (v8 <= 0x40)
    goto LABEL_9;
  result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)(a2 + 4), &v9);
  if (v10 >= 0x41)
  {
    result = (uint64_t)v9;
    if (v9)
      return MEMORY[0x20BD002D4](v9, 0x1000C8000313F17);
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = &unk_24C005118;
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
      MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      MEMORY[0x20BD002D4](v3, 0x1000C8000313F17);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED0Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = &unk_24C005118;
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
      MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      MEMORY[0x20BD002D4](v3, 0x1000C8000313F17);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  llvm::APInt *v9;
  const void **v10;
  unsigned int v11;
  llvm::APInt *v12;
  const void **v13;
  unsigned int v14;
  unsigned int v16;

  v2 = operator new(0x60uLL);
  *v2 = &unk_24C005118;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v9 = (llvm::APInt *)(v2 + 8);
  v10 = (const void **)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 72);
  *((_DWORD *)v2 + 18) = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase(v9, v10);
    v12 = (llvm::APInt *)(v2 + 10);
    v13 = (const void **)(a1 + 80);
    v16 = *(_DWORD *)(a1 + 88);
    *((_DWORD *)v2 + 22) = v16;
    if (v16 > 0x40)
      goto LABEL_6;
  }
  else
  {
    *(_QWORD *)v9 = *v10;
    v12 = (llvm::APInt *)(v2 + 10);
    v13 = (const void **)(a1 + 80);
    v14 = *(_DWORD *)(a1 + 88);
    *((_DWORD *)v2 + 22) = v14;
    if (v14 > 0x40)
    {
LABEL_6:
      llvm::APInt::initSlowCase(v12, v13);
      return v2;
    }
  }
  *(_QWORD *)v12 = *v13;
  return v2;
}

llvm::APInt *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEPNS0_6__baseISV_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  llvm::APInt *v10;
  const void **v11;
  unsigned int v12;
  llvm::APInt *result;
  const void **v14;
  unsigned int v15;
  unsigned int v16;

  *(_QWORD *)a2 = &unk_24C005118;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  v10 = (llvm::APInt *)(a2 + 64);
  v11 = (const void **)(a1 + 64);
  v12 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 72) = v12;
  if (v12 > 0x40)
  {
    llvm::APInt::initSlowCase(v10, v11);
    result = (llvm::APInt *)(a2 + 80);
    v14 = (const void **)(a1 + 80);
    v16 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 88) = v16;
    if (v16 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v14);
  }
  else
  {
    *(_QWORD *)v10 = *v11;
    result = (llvm::APInt *)(a2 + 80);
    v14 = (const void **)(a1 + 80);
    v15 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 88) = v15;
    if (v15 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v14);
  }
  *(_QWORD *)result = *v14;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
      MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      MEMORY[0x20BD002D4](v3, 0x1000C8000313F17);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*((_DWORD *)__p + 22) >= 0x41u)
  {
    v2 = __p[10];
    if (v2)
      MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
  }
  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    v3 = __p[8];
    if (v3)
      MEMORY[0x20BD002D4](v3, 0x1000C8000313F17);
  }
  v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }
  operator delete(__p);
}

llvm::APInt *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEclEOl@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  unsigned int v10;
  llvm::APInt *result;
  const void **v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16) - v5;
  if ((v6 & 0x7FFFFFFF8) == 0)
  {
LABEL_5:
    v9 = (const void **)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 72);
    a3[2] = v10;
    if (v10 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, v9);
      result = (llvm::APInt *)(a3 + 4);
      v12 = (const void **)(a1 + 80);
      v15 = *(_DWORD *)(a1 + 88);
      a3[6] = v15;
      if (v15 > 0x40)
        return (llvm::APInt *)llvm::APInt::initSlowCase(result, v12);
    }
    else
    {
      *(_QWORD *)a3 = *v9;
      result = (llvm::APInt *)(a3 + 4);
      v12 = (const void **)(a1 + 80);
      v13 = *(_DWORD *)(a1 + 88);
      a3[6] = v13;
      if (v13 > 0x40)
        return (llvm::APInt *)llvm::APInt::initSlowCase(result, v12);
    }
    *(_QWORD *)result = *v12;
    return result;
  }
  v7 = 0;
  v8 = (v6 >> 3);
  while (*(_QWORD *)(v5 + 8 * v7) != *a2)
  {
    if (v8 == ++v7)
      goto LABEL_5;
  }
  v16 = *(_OWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 48) + v7;
  v18 = v14;
  return mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v16, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABC059)
    return a1 + 8;
  if (((v3 & 0x8000000207ABC059 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABC059))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABC059 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm5APIntEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052198;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052198;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052198;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned char>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned short>]";
      v18 = 78;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<unsigned short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[111] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C0052D0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_WORD *)v9 + 28) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052288;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0052D0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0052D0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C0052D0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C0052D0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned __int16 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned __int16 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABC41BLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABC41BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABC41BLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABC41BLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIhEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052288;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052288;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052288;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned short>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned int>]";
      v18 = 76;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<unsigned int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[113] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005430;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052348;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005430;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005430;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C005430;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C005430;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned int *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned int *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABC82FLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABC82FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABC82FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABC82FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexItEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052348;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052348;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052348;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned int>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned long long>]";
      v18 = 82;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<unsigned long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[115] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005380;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0522E8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005380;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005380;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_24C005380;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C005380;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABCC43)
    return a1 + 8;
  if (((v3 & 0x8000000207ABCC43 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABCC43))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABCC43 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIjEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0522E8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0522E8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0522E8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned long long>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<signed char>]";
      v18 = 75;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<signed char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[117] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28[3];
  uint64_t *v29;
  _OWORD v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v28[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>(v28, (uint64_t)v31);
  if (!v34)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v31[0];
  v30[0] = *(_OWORD *)&v31[1];
  *(_QWORD *)((char *)v30 + 15) = *(_QWORD *)&v31[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v24);
  v5 = v24;
  v6 = (char *)v25 - (char *)v24;
  if (v25 == v24)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v25 - (char *)v24);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &unk_24C0054E0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v30[0];
  v10 = *(_QWORD *)((char *)v30 + 15);
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 6) = v10;
  v29 = (uint64_t *)v9;
  v11 = *(_QWORD **)a1;
  if (v11)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
  else
    v12 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
  v13 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v27 = v13;
  *(_QWORD *)v31 = 0;
  v15 = &v31[8];
  if (!v13)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v31;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v17 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v13 == v26)
  {
    v32 = &v31[8];
    (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, &v31[8]);
    v16 = v32;
  }
  else
  {
    v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    v32 = v16;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v31;
  *(_BYTE *)(a2 + 8) = 0;
  v14 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v16)
    goto LABEL_18;
  if (v16 == &v31[8])
  {
    *(_QWORD *)(a2 + 32) = v14;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v31[8] + 24))(&v31[8]);
    v23 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v23)
      goto LABEL_25;
    goto LABEL_20;
  }
  v17 = &v32;
  *(_QWORD *)(a2 + 32) = v16;
LABEL_19:
  *v17 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v32 == &v31[8])
  {
    v18 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_25;
    v18 = 5;
    v15 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v18))(v15, v14);
LABEL_25:
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_30:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0523A8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0054E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0054E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &unk_24C0054E0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C0054E0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABD057)
    return a1 + 8;
  if (((v3 & 0x8000000207ABD057 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABD057))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABD057 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIyEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0523A8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0523A8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0523A8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<signed char>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<short>]";
      v18 = 69;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[119] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<signed char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C0051C8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_WORD *)v9 + 28) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0521F8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0051C8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0051C8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C0051C8;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C0051C8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned __int16 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned __int16 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABD46BLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABD46BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABD46BLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABD46BLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIaEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0521F8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0521F8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0521F8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<short>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<int>]";
      v18 = 67;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[121] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C0053D8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052318;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0053D8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0053D8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C0053D8;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C0053D8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned int *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned int *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABD87FLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABD87FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABD87FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABD87FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIsEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052318;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052318;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052318;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<int>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<long long>]";
      v18 = 73;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[123] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005328;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0522B8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005328;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005328;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_24C005328;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C005328;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABDC93)
    return a1 + 8;
  if (((v3 & 0x8000000207ABDC93 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABDC93))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABDC93 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIiEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0522B8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0522B8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0522B8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<long long>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451A000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      v18 = 63;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451A000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[270] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28[3];
  uint64_t *v29;
  _OWORD v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v28[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>(v28, (uint64_t)v31);
  if (!v34)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v31[0];
  v30[0] = *(_OWORD *)&v31[1];
  *(_QWORD *)((char *)v30 + 15) = *(_QWORD *)&v31[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v24);
  v5 = v24;
  v6 = (char *)v25 - (char *)v24;
  if (v25 == v24)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v25 - (char *)v24);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &unk_24C005488;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v30[0];
  v10 = *(_QWORD *)((char *)v30 + 15);
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 6) = v10;
  v29 = (uint64_t *)v9;
  v11 = *(_QWORD **)a1;
  if (v11)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
  else
    v12 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
  v13 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v27 = v13;
  *(_QWORD *)v31 = 0;
  v15 = &v31[8];
  if (!v13)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v31;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v17 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v13 == v26)
  {
    v32 = &v31[8];
    (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, &v31[8]);
    v16 = v32;
  }
  else
  {
    v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    v32 = v16;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v31;
  *(_BYTE *)(a2 + 8) = 0;
  v14 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v16)
    goto LABEL_18;
  if (v16 == &v31[8])
  {
    *(_QWORD *)(a2 + 32) = v14;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v31[8] + 24))(&v31[8]);
    v23 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v23)
      goto LABEL_25;
    goto LABEL_20;
  }
  v17 = &v32;
  *(_QWORD *)(a2 + 32) = v16;
LABEL_19:
  *v17 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v32 == &v31[8])
  {
    v18 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_25;
    v18 = 5;
    v15 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v18))(v15, v14);
LABEL_25:
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_30:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052378;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005488;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005488;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &unk_24C005488;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C005488;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABE0A7)
    return a1 + 8;
  if (((v3 & 0x8000000207ABE0A7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABE0A7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABE0A7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIxEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052378;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052378;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052378;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::APFloat>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = float]";
      v18 = 55;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<float,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[125] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::APFloat>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  llvm::APFloatBase *FloatSemantics;
  llvm::APFloatBase *v7;
  char v8;
  uint64_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  llvm::APFloatBase *v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD v33[3];
  _QWORD *v34;
  void *__p[2];
  char *v36;
  _BYTE v37[40];
  _QWORD v38[3];
  _QWORD v39[3];
  _QWORD *v40;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43[3];
  _BYTE v44[17];
  _BYTE v45[23];
  unsigned __int8 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  *(_QWORD *)v44 = mlir::ElementsAttr::getElementType((uint64_t)v4, v5);
  FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)v44);
  v7 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
  if (v7 == FloatSemantics)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v43, (uint64_t)FloatSemantics);
  else
    llvm::detail::IEEEFloat::IEEEFloat(v43, (uint64_t)FloatSemantics);
  v39[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetFloatValues((mlir::DenseElementsAttr *)v39, (uint64_t)v44);
  if (!v47)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_49;
  }
  v8 = v44[0];
  v41 = *(_OWORD *)&v44[1];
  v42[0] = *(_OWORD *)v45;
  *(_QWORD *)((char *)v42 + 15) = *(_QWORD *)&v45[15];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v31);
  __p[1] = 0;
  v36 = 0;
  __p[0] = 0;
  v9 = v31;
  v10 = (char *)v32 - (char *)v31;
  if (v32 != v31)
  {
    if (v10 < 0)
      abort();
    __p[0] = operator new((char *)v32 - (char *)v31);
    __p[1] = __p[0];
    v11 = (char *)__p[0] + 8 * (v10 >> 3);
    v36 = v11;
    memcpy(__p[0], v9, v10);
    __p[1] = v11;
  }
  v37[0] = v8;
  *(_OWORD *)&v37[1] = v41;
  *(_OWORD *)&v37[17] = v42[0];
  *(_QWORD *)&v37[32] = *(_QWORD *)((char *)v42 + 15);
  if (v7 == (llvm::APFloatBase *)v43[0])
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v38, v43);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v38, (uint64_t)v43);
  v40 = 0;
  v12 = (char *)operator new(0x68uLL);
  *(_QWORD *)v12 = &unk_24C005010;
  v13 = (llvm::APFloatBase *)v38[0];
  *((_QWORD *)v12 + 3) = v36;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v36 = 0;
  v14 = *(_OWORD *)v37;
  v15 = *(_OWORD *)&v37[16];
  *((_QWORD *)v12 + 8) = *(_QWORD *)&v37[32];
  v16 = v12 + 80;
  *((_OWORD *)v12 + 2) = v14;
  *((_OWORD *)v12 + 3) = v15;
  if (v7 == v13)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, v38);
    v40 = v12;
    if (v7 != (llvm::APFloatBase *)v38[0])
    {
LABEL_17:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v38);
      v17 = __p[0];
      if (!__p[0])
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v16, (uint64_t)v38);
    v40 = v12;
    if (v7 != (llvm::APFloatBase *)v38[0])
      goto LABEL_17;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v38);
  v17 = __p[0];
  if (__p[0])
  {
LABEL_18:
    __p[1] = v17;
    operator delete(v17);
  }
LABEL_19:
  v18 = *(_QWORD **)a1;
  if (v18)
  {
    v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v18 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v18, v19);
    v20 = v40;
    if (v40)
      goto LABEL_21;
LABEL_28:
    v34 = 0;
    *(_QWORD *)v44 = 0;
    v22 = &v44[8];
    goto LABEL_29;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  v20 = v40;
  if (!v40)
    goto LABEL_28;
LABEL_21:
  if (v20 == v39)
  {
    v34 = v33;
    (*(void (**)(_QWORD *, _QWORD *))(v39[0] + 24))(v39, v33);
    v21 = v34;
    *(_QWORD *)v44 = 0;
    v22 = &v44[8];
    if (v34)
      goto LABEL_53;
LABEL_29:
    *(_QWORD *)&v45[15] = 0;
    v46 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v44;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_30:
    v23 = (_QWORD *)(a2 + 32);
    goto LABEL_31;
  }
  v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v20 + 16))(v20);
  v34 = v21;
  *(_QWORD *)v44 = 0;
  v22 = &v44[8];
  if (!v21)
    goto LABEL_29;
LABEL_53:
  if (v21 == v33)
  {
    *(_QWORD *)&v45[15] = &v44[8];
    (*(void (**)(_QWORD *, _BYTE *))(v33[0] + 24))(v33, &v44[8]);
    v29 = *(_BYTE **)&v45[15];
  }
  else
  {
    v29 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
    *(_QWORD *)&v45[15] = v29;
  }
  v46 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v44;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v29)
    goto LABEL_30;
  if (v29 == &v44[8])
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v44[8] + 24))(&v44[8]);
    v30 = v46;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v30)
      goto LABEL_37;
    goto LABEL_32;
  }
  v23 = &v45[15];
  *(_QWORD *)(a2 + 32) = v29;
LABEL_31:
  *v23 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_32:
  if (*(_BYTE **)&v45[15] == &v44[8])
  {
    v24 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v45[15])
      goto LABEL_37;
    v24 = 5;
    v22 = *(_QWORD **)&v45[15];
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_37:
  v25 = v34;
  if (v34 == v33)
  {
    v26 = 4;
    v25 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_42;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_42:
  v27 = v40;
  if (v40 == v39)
  {
    v28 = 4;
    v27 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_47;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
  if (v9)
    operator delete(v9);
LABEL_49:
  if (v7 == (llvm::APFloatBase *)v43[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v43);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v43);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052138;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;

  *a1 = &unk_24C005010;
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      return a1;
    goto LABEL_3;
  }
  llvm::detail::IEEEFloat::~IEEEFloat(v2);
  v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;

  *a1 = &unk_24C005010;
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      goto LABEL_6;
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      goto LABEL_6;
  }
  a1[2] = v4;
  operator delete(v4);
LABEL_6:
  JUMPOUT(0x20BD002F8);
}

llvm::APFloatBase *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(_QWORD *a1)
{
  llvm::APFloatBase *v2;
  llvm::APFloatBase *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  const llvm::detail::DoubleAPFloat *v9;
  void *v10;
  __int128 v11;

  v2 = (llvm::APFloatBase *)operator new(0x68uLL);
  v3 = v2;
  *(_QWORD *)v2 = &unk_24C005010;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v5 = (_BYTE *)a1[1];
  v4 = (_BYTE *)a1[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)v3 + 1) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *((_QWORD *)v3 + 3) = v8;
    v2 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *((_QWORD *)v3 + 2) = v8;
  }
  v10 = (void *)a1[10];
  v9 = (const llvm::detail::DoubleAPFloat *)(a1 + 10);
  v11 = *((_OWORD *)v9 - 2);
  *((_OWORD *)v3 + 2) = *((_OWORD *)v9 - 3);
  *((_OWORD *)v3 + 3) = v11;
  *((_QWORD *)v3 + 8) = *((_QWORD *)v9 - 2);
  if (llvm::APFloatBase::PPCDoubleDouble(v2) == v10)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)v3 + 10, v9);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v3 + 80), v9);
  return v3;
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::APFloatBase *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  llvm::detail::IEEEFloat *v11;
  const llvm::detail::DoubleAPFloat *v12;
  void *v13;

  v3 = a1;
  *(_QWORD *)a2 = &unk_24C005010;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_BYTE *)*((_QWORD *)a1 + 1);
  v4 = (_BYTE *)*((_QWORD *)a1 + 2);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    a1 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v9 = *((_OWORD *)v3 + 2);
  v10 = *((_OWORD *)v3 + 3);
  *(_QWORD *)(a2 + 64) = *((_QWORD *)v3 + 8);
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  v11 = (llvm::detail::IEEEFloat *)(a2 + 80);
  v13 = (void *)*((_QWORD *)v3 + 10);
  v12 = (llvm::APFloatBase *)((char *)v3 + 80);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v13)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
  else
    return (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(_QWORD *a1)
{
  llvm::detail::IEEEFloat *v2;
  void *v3;
  void *v4;

  v2 = (llvm::detail::IEEEFloat *)(a1 + 10);
  v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      return;
    goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;

  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::detail::IEEEFloat::~IEEEFloat(v2);
  v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
LABEL_4:
  operator delete(a1);
}

const llvm::APInt *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::detail::IEEEFloat *v7;
  const llvm::detail::DoubleAPFloat *v8;
  void *v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16) - v3;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    v6 = (v4 >> 3);
    while (*(_QWORD *)(v3 + 8 * v5) != *a2)
    {
      if (v6 == ++v5)
        goto LABEL_5;
    }
    v12 = *(_OWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 48);
    v14 = *(_OWORD *)(a1 + 56);
    v13 = v11 + v5;
    return llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*((const llvm::APInt **)&v12, a3);
  }
  else
  {
LABEL_5:
    v7 = (llvm::detail::IEEEFloat *)(a3 + 8);
    v8 = (const llvm::detail::DoubleAPFloat *)(a1 + 80);
    v9 = *(void **)(a1 + 80);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v9)
      return (const llvm::APInt *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v8);
    else
      return (const llvm::APInt *)llvm::detail::IEEEFloat::IEEEFloat(v7, v8);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABE4B9)
    return a1 + 8;
  if (((v3 & 0x8000000207ABE4B9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABE4B9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABE4B9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052138;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052138;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052138;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<float>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = double]";
      v18 = 56;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<double,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[127] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<float>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<float,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005640;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052498;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005640;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005640;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C005640;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_24C005640;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

float _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(float *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(float *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(float *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABE843)
    return a1 + 8;
  if (((v3 & 0x8000000207ABE843 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABE843))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABE843 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052498;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052498;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052498;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<double>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APFloat>]";
      v18 = 77;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<llvm::APFloat>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[137] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<double>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<double,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C0055E8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052468;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0055E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0055E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_24C0055E8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C0055E8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

double _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(double *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(double *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(double *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABEC05)
    return a1 + 8;
  if (((v3 & 0x8000000207ABEC05 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABEC05))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABEC05 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052468;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052468;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052468;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APFloat>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<float>]";
      v18 = 69;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<float>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[129] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APFloat>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APFloatBase *ComplexFloatValues;
  char v5;
  llvm::APFloatBase *v6;
  uint64_t *v7;
  int64_t v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD v28[3];
  _QWORD *v29;
  void *__p;
  void *v31;
  char *v32;
  char v33;
  __int128 v34;
  _BYTE v35[23];
  _QWORD v36[4];
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD *v39;
  __int128 v40;
  _OWORD v41[2];
  _BYTE v42[8];
  _QWORD v43[4];
  _QWORD v44[3];
  _BYTE v45[17];
  _BYTE v46[23];
  unsigned __int8 v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APFloat>>((_QWORD **)a1, (uint64_t)v42);
  v38[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  ComplexFloatValues = (llvm::APFloatBase *)mlir::DenseElementsAttr::tryGetComplexFloatValues((mlir::DenseElementsAttr *)v38, (uint64_t)v45);
  if (!v48)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    v11 = llvm::APFloatBase::PPCDoubleDouble(ComplexFloatValues);
    goto LABEL_46;
  }
  v5 = v45[0];
  v40 = *(_OWORD *)&v45[1];
  v41[0] = *(_OWORD *)v46;
  *(_QWORD *)((char *)v41 + 15) = *(_QWORD *)&v46[15];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v26);
  v31 = 0;
  v32 = 0;
  __p = 0;
  v7 = v26;
  v8 = (char *)v27 - (char *)v26;
  if (v27 != v26)
  {
    if (v8 < 0)
      abort();
    __p = operator new((char *)v27 - (char *)v26);
    v31 = __p;
    v9 = (char *)__p + 8 * (v8 >> 3);
    v32 = v9;
    v6 = (llvm::APFloatBase *)memcpy(__p, v7, v8);
    v31 = v9;
  }
  v33 = v5;
  v34 = v40;
  *(_OWORD *)v35 = v41[0];
  *(_QWORD *)&v35[15] = *(_QWORD *)((char *)v41 + 15);
  v10 = (void *)v43[0];
  v11 = llvm::APFloatBase::PPCDoubleDouble(v6);
  if (v11 == v10)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v36, v43);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v36, (uint64_t)v43);
  if (v11 == (void *)v44[0])
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, v44);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v37, (uint64_t)v44);
  _ZNSt3__110__function12__value_funcIFNS_7complexIN4llvm7APFloatEEElEEC2B8nn180100IZNK4mlir18SparseElementsAttr20try_value_begin_implIS5_EENS9_9FailureOrINS3_15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISK_EEdeclL_ZNS_7declvalB8nn180100ISG_EEDTclsr3stdE9__declvalISI_ELi0EEEvEEEEEEEENS9_6detail17ElementsAttrTraitISA_E13OverloadTokenISI_EEEUllE_NS_9allocatorISV_EEEEOSI_RKT0_((uint64_t)v38, (uint64_t)&__p);
  if (v11 == (void *)v37[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v37);
    if (v11 != (void *)v36[0])
    {
LABEL_14:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v36);
      v12 = __p;
      if (!__p)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v37);
    if (v11 != (void *)v36[0])
      goto LABEL_14;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v36);
  v12 = __p;
  if (__p)
  {
LABEL_15:
    v31 = v12;
    operator delete(v12);
  }
LABEL_16:
  v13 = *(_QWORD **)a1;
  if (v13)
  {
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v13 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v13, v14);
    v15 = v39;
    if (v39)
      goto LABEL_18;
LABEL_25:
    v29 = 0;
    *(_QWORD *)v45 = 0;
    v17 = &v45[8];
    goto LABEL_26;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  v15 = v39;
  if (!v39)
    goto LABEL_25;
LABEL_18:
  if (v15 == v38)
  {
    v29 = v28;
    (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v28);
    v16 = v29;
    *(_QWORD *)v45 = 0;
    v17 = &v45[8];
    if (v29)
      goto LABEL_52;
LABEL_26:
    *(_QWORD *)&v46[15] = 0;
    v47 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v45;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_27:
    v18 = (_QWORD *)(a2 + 32);
    goto LABEL_28;
  }
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
  v29 = v16;
  *(_QWORD *)v45 = 0;
  v17 = &v45[8];
  if (!v16)
    goto LABEL_26;
LABEL_52:
  if (v16 == v28)
  {
    *(_QWORD *)&v46[15] = &v45[8];
    (*(void (**)(_QWORD *, _BYTE *))(v28[0] + 24))(v28, &v45[8]);
    v24 = *(_BYTE **)&v46[15];
  }
  else
  {
    v24 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    *(_QWORD *)&v46[15] = v24;
  }
  v47 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v45;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v24)
    goto LABEL_27;
  if (v24 == &v45[8])
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v45[8] + 24))(&v45[8]);
    v25 = v47;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v25)
      goto LABEL_34;
    goto LABEL_29;
  }
  v18 = &v46[15];
  *(_QWORD *)(a2 + 32) = v24;
LABEL_28:
  *v18 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_29:
  if (*(_BYTE **)&v46[15] == &v45[8])
  {
    v19 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v46[15])
      goto LABEL_34;
    v19 = 5;
    v17 = *(_QWORD **)&v46[15];
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_34:
  v20 = v29;
  if (v29 == v28)
  {
    v21 = 4;
    v20 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_39;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_39:
  v22 = v39;
  if (v39 == v38)
  {
    v23 = 4;
    v22 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_44;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_44:
  if (v7)
    operator delete(v7);
LABEL_46:
  if (v11 == (void *)v44[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v44);
    if (v11 != (void *)v43[0])
      goto LABEL_48;
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v44);
    if (v11 != (void *)v43[0])
    {
LABEL_48:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v43);
      return;
    }
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v43);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C0521C8;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

void mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APFloat>>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  llvm::APFloatBase *FloatSemantics;
  llvm::APFloatBase *v6;
  llvm::detail::IEEEFloat *v7;
  llvm::detail::IEEEFloat *v8;
  uint64_t ElementType;
  uint64_t v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (*a1)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  ElementType = mlir::ElementsAttr::getElementType((uint64_t)v3, v4);
  FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&ElementType);
  v6 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
  if (v6 == FloatSemantics)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (uint64_t)FloatSemantics);
    v7 = (llvm::detail::IEEEFloat *)(a2 + 8);
    if (v6 != (llvm::APFloatBase *)v10[0])
    {
LABEL_6:
      llvm::detail::IEEEFloat::IEEEFloat(v7, (const llvm::detail::IEEEFloat *)v10);
      v8 = (llvm::detail::IEEEFloat *)(a2 + 40);
      if (v6 != (llvm::APFloatBase *)v10[0])
        goto LABEL_7;
LABEL_12:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v8, (const llvm::detail::DoubleAPFloat *)v10);
      if (v6 != (llvm::APFloatBase *)v10[0])
        goto LABEL_8;
LABEL_13:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat(v10, (uint64_t)FloatSemantics);
    v7 = (llvm::detail::IEEEFloat *)(a2 + 8);
    if (v6 != (llvm::APFloatBase *)v10[0])
      goto LABEL_6;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (const llvm::detail::DoubleAPFloat *)v10);
  v8 = (llvm::detail::IEEEFloat *)(a2 + 40);
  if (v6 == (llvm::APFloatBase *)v10[0])
    goto LABEL_12;
LABEL_7:
  llvm::detail::IEEEFloat::IEEEFloat(v8, (const llvm::detail::IEEEFloat *)v10);
  if (v6 == (llvm::APFloatBase *)v10[0])
    goto LABEL_13;
LABEL_8:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
}

uint64_t _ZNSt3__110__function12__value_funcIFNS_7complexIN4llvm7APFloatEEElEEC2B8nn180100IZNK4mlir18SparseElementsAttr20try_value_begin_implIS5_EENS9_9FailureOrINS3_15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISK_EEdeclL_ZNS_7declvalB8nn180100ISG_EEDTclsr3stdE9__declvalISI_ELi0EEEvEEEEEEEENS9_6detail17ElementsAttrTraitISA_E13OverloadTokenISI_EEEUllE_NS_9allocatorISV_EEEEOSI_RKT0_(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x88uLL);
  *(_QWORD *)v4 = &unk_24C005170;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_OWORD *)(a2 + 40);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 24);
  *((_OWORD *)v4 + 3) = v5;
  *((_QWORD *)v4 + 8) = *(_QWORD *)(a2 + 56);
  v6 = v4 + 80;
  v7 = *(void **)(a2 + 72);
  v8 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v4);
  if (v8 == v7)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, (_QWORD *)(a2 + 72));
    v9 = v4 + 112;
    v10 = (_QWORD *)(a2 + 104);
    if (v8 != *(void **)(a2 + 104))
      goto LABEL_3;
LABEL_5:
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v10);
    goto LABEL_6;
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v6, a2 + 72);
  v9 = v4 + 112;
  v10 = (_QWORD *)(a2 + 104);
  if (v8 == *(void **)(a2 + 104))
    goto LABEL_5;
LABEL_3:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)v10);
LABEL_6:
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED1Ev(_QWORD *a1)
{
  llvm::detail::IEEEFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;

  *a1 = &unk_24C005170;
  v2 = (llvm::detail::IEEEFloat *)(a1 + 14);
  v3 = (void *)a1[14];
  v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
      goto LABEL_3;
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
    v6 = (void *)a1[1];
    if (!v6)
      return a1;
    goto LABEL_4;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  if (v4 == (void *)a1[10])
    goto LABEL_7;
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED0Ev(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::IEEEFloat *v5;
  void *v6;

  *a1 = &unk_24C005170;
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 14);
  v3 = (void *)a1[14];
  v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
    {
LABEL_3:
      llvm::detail::IEEEFloat::~IEEEFloat(v5);
      v6 = (void *)a1[1];
      if (!v6)
        goto LABEL_8;
      goto LABEL_4;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
  v6 = (void *)a1[1];
  if (!v6)
    goto LABEL_8;
LABEL_4:
  a1[2] = v6;
  operator delete(v6);
LABEL_8:
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x88uLL);
  *v2 = &unk_24C005170;
  _ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((llvm::APFloatBase *)(v2 + 1), v1);
  return v2;
}

llvm::APFloatBase *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEPNS0_6__baseISV_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C005170;
  return _ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((llvm::APFloatBase *)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7destroyEv(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::IEEEFloat *v5;
  void *v6;

  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 14);
  v3 = (void *)a1[14];
  v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
    {
LABEL_3:
      llvm::detail::IEEEFloat::~IEEEFloat(v5);
      v6 = (void *)a1[1];
      if (!v6)
        return;
      goto LABEL_4;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE18destroy_deallocateEv(_QWORD *a1)
{
  llvm::detail::IEEEFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v2 = (llvm::detail::IEEEFloat *)(a1 + 14);
  v3 = (void *)a1[14];
  v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
      goto LABEL_3;
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
    v6 = (void *)a1[1];
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  if (v4 == (void *)a1[10])
    goto LABEL_7;
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
LABEL_5:
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEclEOl(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _ZZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm7APFloatEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEENKUllE_clEl(a1 + 8, *a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABEFFFLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABEFFFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABEFFFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABEFFFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm7APFloatEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEEUllE_;
}

llvm::APFloatBase *_ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::APFloatBase *v3;
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;
  llvm::detail::IEEEFloat *v13;
  const llvm::detail::IEEEFloat *v14;

  v3 = a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)v3 = v7;
    *((_QWORD *)v3 + 1) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *((_QWORD *)v3 + 2) = v8;
    a1 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *((_QWORD *)v3 + 1) = v8;
  }
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v3 + 7) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)((char *)v3 + 40) = v10;
  *(_OWORD *)((char *)v3 + 24) = v9;
  v11 = *(void **)(a2 + 72);
  v12 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v12 == v11)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)v3 + 9, (const llvm::detail::DoubleAPFloat *)(a2 + 72));
    v13 = (llvm::APFloatBase *)((char *)v3 + 104);
    v14 = (const llvm::detail::IEEEFloat *)(a2 + 104);
    if (v12 != *(void **)(a2 + 104))
      goto LABEL_6;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v3 + 72), (const llvm::detail::IEEEFloat *)(a2 + 72));
    v13 = (llvm::APFloatBase *)((char *)v3 + 104);
    v14 = (const llvm::detail::IEEEFloat *)(a2 + 104);
    if (v12 != *(void **)(a2 + 104))
    {
LABEL_6:
      llvm::detail::IEEEFloat::IEEEFloat(v13, v14);
      return v3;
    }
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v14);
  return v3;
}

void _ZZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm7APFloatEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEENKUllE_clEl(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  llvm::detail::IEEEFloat *v9;
  const llvm::detail::IEEEFloat *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;

  v5 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (!(_DWORD)v5)
  {
LABEL_5:
    v7 = *(void **)(a1 + 72);
    v8 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    if (v8 == v7)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)(a3 + 8), (const llvm::detail::DoubleAPFloat *)(a1 + 72));
      v9 = (llvm::detail::IEEEFloat *)(a3 + 40);
      v10 = (const llvm::detail::IEEEFloat *)(a1 + 104);
      if (v8 != *(void **)(a1 + 104))
        goto LABEL_7;
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)(a3 + 8), (const llvm::detail::IEEEFloat *)(a1 + 72));
      v9 = (llvm::detail::IEEEFloat *)(a3 + 40);
      v10 = (const llvm::detail::IEEEFloat *)(a1 + 104);
      if (v8 != *(void **)(a1 + 104))
      {
LABEL_7:
        llvm::detail::IEEEFloat::IEEEFloat(v9, v10);
        return;
      }
    }
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v10);
    return;
  }
  v6 = 0;
  while (*(_QWORD *)(*(_QWORD *)a1 + 8 * v6) != a2)
  {
    if ((_DWORD)v5 == (_DWORD)++v6)
      goto LABEL_5;
  }
  v12 = *(_OWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  v14 = *(_OWORD *)(a1 + 48);
  v13 = v11 + v6;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v12, &v15);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v15, (llvm::APFloatBase *)&v12, a3);
  if (v18 >= 0x41 && v17)
    MEMORY[0x20BD002D4](v17, 0x1000C8000313F17);
  if (v16 >= 0x41)
  {
    if (v15)
      MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
  }
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0521C8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0521C8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C0521C8;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<float>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = (_QWORD *)&unk_25451B000;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<double>]";
      v18 = 70;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<double>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[131] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(a1, (uint64_t)a3);
  else
    _ZNK4mlir6detail17ElementsAttrTraitINS_18SparseElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<float>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_24C005278;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052258;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005278;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005278;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_24C005278;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C005278;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

float _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(float *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(float *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(float *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABF3C5)
    return a1 + 8;
  if (((v3 & 0x8000000207ABF3C5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABF3C5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABF3C5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIfEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052258;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052258;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052258;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<double>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_18SparseElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v15 = a3;
    v16 = a1;
    v14 = a2;
    v4 = (_QWORD *)&unk_25451B000;
    a2 = v14;
    a3 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::StringRef]";
      v18 = 65;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<llvm::StringRef,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = (_QWORD *)&unk_25451B000;
      a2 = v14;
      a3 = v15;
      a1 = v16;
    }
  }
  if (v4[141] == a2)
  {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(a1, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[16] = 0;
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<double>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28[3];
  uint64_t *v29;
  _OWORD v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v28[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>(v28, (uint64_t)v31);
  if (!v34)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v31[0];
  v30[0] = *(_OWORD *)&v31[1];
  *(_QWORD *)((char *)v30 + 15) = *(_QWORD *)&v31[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v24);
  v5 = v24;
  v6 = (char *)v25 - (char *)v24;
  if (v25 == v24)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v25 - (char *)v24);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &unk_24C005220;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v30[0];
  v10 = *(_QWORD *)((char *)v30 + 15);
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 6) = v10;
  v29 = (uint64_t *)v9;
  v11 = *(_QWORD **)a1;
  if (v11)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
  else
    v12 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
  v13 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v27 = v13;
  *(_QWORD *)v31 = 0;
  v15 = &v31[8];
  if (!v13)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v31;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v17 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v13 == v26)
  {
    v32 = &v31[8];
    (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, &v31[8]);
    v16 = v32;
  }
  else
  {
    v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    v32 = v16;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v31;
  *(_BYTE *)(a2 + 8) = 0;
  v14 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v16)
    goto LABEL_18;
  if (v16 == &v31[8])
  {
    *(_QWORD *)(a2 + 32) = v14;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v31[8] + 24))(&v31[8]);
    v23 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v23)
      goto LABEL_25;
    goto LABEL_20;
  }
  v17 = &v32;
  *(_QWORD *)(a2 + 32) = v16;
LABEL_19:
  *v17 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v32 == &v31[8])
  {
    v18 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_25;
    v18 = 5;
    v15 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v18))(v15, v14);
LABEL_25:
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_30:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052228;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005220;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005220;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &unk_24C005220;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C005220;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

double _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(double *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(double *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(double *)(*(_QWORD *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABF7D9)
    return a1 + 8;
  if (((v3 & 0x8000000207ABF7D9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABF7D9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABF7D9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIdEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052228;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052228;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052228;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::SparseElementsAttr *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  }
  else
  {
    v3 = (mlir::SparseElementsAttr *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(v3, v4);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::StringRef>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::StringRef>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *Shape;
  uint64_t v8;
  uint64_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _OWORD v31[2];
  _OWORD *v32;
  unsigned __int8 v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(unsigned __int8 *)(v4 + 24);
  v31[0] = *(_OWORD *)(v4 + 8);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v31);
  mlir::ShapedType::getNumElements(Shape, v8);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v27);
  v9 = v27;
  v10 = (char *)v28 - (char *)v27;
  if (v28 == v27)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    if (v10 < 0)
      abort();
    v11 = (char *)operator new((char *)v28 - (char *)v27);
    v12 = &v11[8 * (v10 >> 3)];
    memcpy(v11, v9, v10);
  }
  v13 = operator new(0x48uLL);
  *v13 = &unk_24C005068;
  v13[1] = v11;
  v13[2] = v12;
  v13[3] = v12;
  v13[4] = v5;
  v13[5] = v6;
  v13[7] = 0;
  v13[8] = 0;
  v13[6] = 0;
  v35 = v13;
  v14 = *(_QWORD **)a1;
  if (v14)
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
  else
    v15 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
  v30 = v16;
  *(_QWORD *)&v31[0] = 0;
  v18 = (_QWORD *)v31 + 1;
  if (!v16)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)&v31[0];
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_16:
    v20 = (_QWORD *)(a2 + 32);
    goto LABEL_17;
  }
  if (v16 == v29)
  {
    v32 = (_OWORD *)((char *)v31 + 8);
    (*(void (**)(_QWORD *, char *))(v29[0] + 24))(v29, (char *)v31 + 8);
    v19 = v32;
  }
  else
  {
    v19 = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    v32 = v19;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)&v31[0];
  *(_BYTE *)(a2 + 8) = 0;
  v17 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v19)
    goto LABEL_16;
  if (v19 == (_OWORD *)((char *)v31 + 8))
  {
    *(_QWORD *)(a2 + 32) = v17;
    (*(void (**)(char *))(*((_QWORD *)&v31[0] + 1) + 24))((char *)v31 + 8);
    v26 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v26)
      goto LABEL_23;
    goto LABEL_18;
  }
  v20 = &v32;
  *(_QWORD *)(a2 + 32) = v19;
LABEL_17:
  *v20 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_18:
  if (v32 == (_OWORD *)((char *)v31 + 8))
  {
    v21 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_23;
    v21 = 5;
    v18 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v18 + 8 * v21))(v18, v17);
LABEL_23:
  v22 = v30;
  if (v30 == v29)
  {
    v23 = 4;
    v22 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_28;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_28:
  v24 = v35;
  if (v35 == v34)
  {
    v25 = 4;
    v24 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_33;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_33:
  if (v9)
    operator delete(v9);
}

uint64_t mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v13 = *a2;
  v4 = v14;
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v5 = (uint64_t *)a2[4];
    if (v5)
    {
      if (v5 == a2 + 1)
      {
        v15 = v14;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v14);
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  result = operator new();
  v7 = result;
  *(_QWORD *)result = &unk_24C052168;
  *(_QWORD *)(result + 8) = v13;
  *(_BYTE *)(result + 16) = 0;
  v8 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (!v16)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (v15 == v14)
    {
      *(_QWORD *)(v7 + 40) = v8;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
      *(_BYTE *)(v7 + 48) = 1;
      v11 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v11)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(void))(*v15 + 16))();
      *(_QWORD *)(v7 + 40) = result;
      *(_BYTE *)(v7 + 48) = 1;
      v9 = v16;
      *(_QWORD *)(a3 + 8) = v7;
      if (!v9)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 1;
    v10 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    if (!v10)
      return result;
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005068;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C005068;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &unk_24C005068;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_24C005068;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000207ABFBEFLL)
    return a1 + 8;
  if (((v3 & 0x8000000207ABFBEFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000207ABFBEFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000207ABFBEFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052168;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C052168;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24C052168;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = 0;
  v7 = result + 16;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      if (result == a1 + 16)
      {
        *(_QWORD *)(v5 + 40) = v7;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 40) = 0;
    }
    *(_BYTE *)(v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::StorageUserBase<mlir::SparseElementsAttr,mlir::Attribute,mlir::detail::SparseElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(v4);
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSB_25SparseElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v6 = a2[1];
  v7 = a2[3];
  v8 = a2[4];
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v6);
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v7);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v8);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSA_25SparseElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v7[2];
  uint64_t *v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::SparseElementsAttr>(a2, v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::SparseElementsAttr>(_QWORD *a1, uint64_t **a2, _QWORD **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v11;
  _QWORD *v13;
  __int128 v14;
  _QWORD v15[2];
  _QWORD v16[2];
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v13 = a1;
  v4 = a1[3];
  v3 = a1[4];
  v5 = *a2;
  if (!a1[1])
  {
    v7 = 0;
    v6 = 0;
    if (!v4)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = (_QWORD *)**a3;
  if (v6)
  {
    v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
    if (!v4)
      goto LABEL_7;
LABEL_6:
    v8 = *v5++;
    v4 = v8;
    goto LABEL_7;
  }
  v7 = 0;
  if (v4)
    goto LABEL_6;
LABEL_7:
  if (v3)
    v3 = *v5;
  mlir::Attribute::getContext((mlir::Attribute *)&v13);
  *(_QWORD *)&v14 = v6;
  *((_QWORD *)&v14 + 1) = v7;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v15[1] = Context;
  v21[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v21[1] = v15;
  v18 = v14;
  v19 = v4;
  v20 = v3;
  v11 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(&v18, &v19, &v20);
  v16[0] = &v18;
  v16[1] = v21;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

void mlir::AbstractAttribute::get<mlir::StridedLayoutAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::StridedLayoutAttr,mlir::Attribute,mlir::detail::StridedLayoutAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSB_24StridedLayoutAttrStorageENSB_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSA_24StridedLayoutAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::getAffineMap;
  v2[1] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::isIdentity;
  v2[2] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::verifyLayout;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[386], v2);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::getAffineMap(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  mlir *v4;
  mlir::MLIRContext *Context;
  _QWORD *v7;

  v7 = a2;
  v3 = a2[2];
  v2 = a2[3];
  v4 = (mlir *)a2[1];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  return mlir::makeStridedLinearLayoutMap(v3, v2, v4, Context);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::isIdentity(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  mlir *v4;
  mlir::MLIRContext *Context;
  _QWORD *v7;
  uint64_t StridedLinearLayoutMap;

  v7 = a2;
  v3 = a2[2];
  v2 = a2[3];
  v4 = (mlir *)a2[1];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  StridedLinearLayoutMap = mlir::makeStridedLinearLayoutMap(v3, v2, v4, Context);
  return mlir::AffineMap::isIdentity((mlir::AffineMap *)&StridedLinearLayoutMap);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::StridedLayoutAttr::verifyLayout((uint64_t)&v7, a3, a4, a5, a6);
}

BOOL mlir::detail::StorageUserBase<mlir::StridedLayoutAttr,mlir::Attribute,mlir::detail::StridedLayoutAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface::Trait<Empty>]";
      v15 = 95;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemRefLayoutAttrInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return v2[87] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSA_24StridedLayoutAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::StridedLayoutAttr>(a2);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::StridedLayoutAttr>(uint64_t a1)
{
  mlir::MLIRContext *Context;
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t ParametricStorageTypeImpl;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[48];
  uint64_t *v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x24BDAC8D0];
  v14 = a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_OWORD *)(a1 + 16);
  mlir::AttrTypeSubElementHandler<std::tuple<long long,llvm::ArrayRef<long long>>,void>::replace((uint64_t)&v12, (uint64_t)&v25);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v2 = v25;
  v21 = v25;
  v22 = v24;
  v23 = 0x600000000;
  v3 = v27;
  if (!v27)
  {
    v3 = 0;
    v6 = v24;
    goto LABEL_9;
  }
  if (v27 < 7)
  {
    v5 = v24;
    v4 = v27;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v27, 8);
  v4 = v27;
  if (v27)
  {
    v5 = v22;
LABEL_7:
    memcpy(v5, v26, 8 * v4);
  }
  LODWORD(v23) = v3;
  v2 = v21;
  v6 = v22;
LABEL_9:
  v7 = *v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  v15[1] = Context;
  v20[0] = _ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v20[1] = v15;
  v18 = v7;
  v19[0] = v6;
  v19[1] = v3;
  v9 = llvm::hash_combine<long long,llvm::ArrayRef<long long>>(&v18, (uint64_t)v19);
  v16[0] = &v18;
  v16[1] = v20;
  v17 = &v18;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
  if (v22 != v24)
    free(v22);
  if (v26 != v28)
    free(v26);
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<long long,llvm::ArrayRef<long long>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *__src;
  unsigned int v10;
  int v11;
  _QWORD v12[7];

  v12[6] = *MEMORY[0x24BDAC8D0];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)&__src);
  v4 = (void *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 16) = 0x600000000;
  v5 = __src;
  if ((void **)(a2 + 8) == &__src)
    goto LABEL_12;
  v6 = v10;
  if (!v10)
    goto LABEL_12;
  if (__src == v12)
  {
    if (v10 < 7)
    {
      v8 = v10;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 8, (void *)(a2 + 24), v10, 8);
      v8 = v10;
      v5 = __src;
      if (!v10)
      {
LABEL_10:
        *(_DWORD *)(a2 + 16) = v6;
        goto LABEL_11;
      }
      v4 = *(void **)(a2 + 8);
    }
    memcpy(v4, v5, 8 * v8);
    v5 = __src;
    goto LABEL_10;
  }
  *(_QWORD *)(a2 + 8) = __src;
  v7 = v11;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  __src = v12;
  v11 = 0;
  v5 = v12;
LABEL_11:
  v10 = 0;
LABEL_12:
  if (v5 != v12)
    free(v5);
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = 0x600000000;
  if (a2)
  {
    LODWORD(v5) = 0;
    v6 = v15;
    v7 = 8 * a2;
    do
    {
      while (v5 < HIDWORD(v14))
      {
        v8 = *a1++;
        v13[v5] = v8;
        v5 = (v5 + 1);
        LODWORD(v14) = v5;
        v7 -= 8;
        if (!v7)
          goto LABEL_7;
      }
      v9 = *a1++;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v5 + 1, 8);
      v13[v14] = v9;
      v5 = (v14 + 1);
      LODWORD(v14) = v14 + 1;
      v7 -= 8;
    }
    while (v7);
LABEL_7:
    v10 = v13;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x600000000;
    if ((_DWORD)v5 && &v13 != (_QWORD **)a3)
    {
      if (v10 == v15)
      {
        v12 = v5;
        if (v5 < 7
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5, 8),
              v12 = v14,
              v6 = v13,
              (_DWORD)v14))
        {
          memcpy(*(void **)a3, v6, 8 * v12);
          v6 = v13;
        }
        *(_DWORD *)(a3 + 8) = v5;
      }
      else
      {
        *(_QWORD *)a3 = v10;
        v11 = HIDWORD(v14);
        *(_DWORD *)(a3 + 8) = v5;
        *(_DWORD *)(a3 + 12) = v11;
        v13 = v15;
        HIDWORD(v14) = 0;
      }
      LODWORD(v14) = 0;
      v10 = v6;
    }
    if (v10 != v15)
      free(v10);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x600000000;
  }
}

void mlir::AbstractAttribute::get<mlir::StringAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::StringAttr,mlir::Attribute,mlir::detail::StringAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSB_17StringAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSA_17StringAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>::getType;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[268], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::StringAttr,mlir::Attribute,mlir::detail::StringAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return v2[31] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSA_17StringAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t mlir::detail::StorageUserBase<mlir::SymbolRefAttr,mlir::Attribute,mlir::detail::SymbolRefAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSB_20SymbolRefAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v6 = a2[1];
  v7 = (uint64_t *)a2[2];
  v8 = a2[3];
  v12[0] = a3;
  v12[1] = a4;
  v12[2] = a5;
  v12[3] = a6;
  result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v6);
  if (v8)
  {
    v10 = 8 * v8;
    do
    {
      v11 = *v7++;
      result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v11);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSA_20SymbolRefAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];

  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::SymbolRefAttr>(a2, (uint64_t)v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::SymbolRefAttr>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t *v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v11 = a1;
  v3 = *(uint64_t **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    --v2;
    v5 = *v3++;
    v4 = v5;
  }
  else
  {
    v4 = 0;
  }
  if (v2 >= *(unsigned int *)(a1 + 24))
    v6 = *(unsigned int *)(a1 + 24);
  else
    v6 = v2;
  mlir::Attribute::getContext((mlir::Attribute *)&v11);
  v12 = v4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v13[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v13[1] = Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v18[1] = v13;
  v16 = v12;
  v17[0] = v3;
  v17[1] = v6;
  v9 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v16, (uint64_t)v17);
  v14[0] = &v16;
  v14[1] = v18;
  v15 = &v16;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
}

uint64_t mlir::detail::StorageUserBase<mlir::TypeAttr,mlir::Attribute,mlir::detail::TypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSB_15TypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSA_15TypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v9 = a2;
  if (*(_QWORD *)(a2 + 8))
    v5 = *a5;
  else
    v5 = 0;
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  v10 = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::UnitAttr,mlir::Attribute,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_8UnitAttrEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, *a1, a1[1]);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DistinctAttr>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  char v4;
  llvm **v5;
  uint64_t *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  llvm *v22[2];
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((v2 & 1) == 0
  {
    v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
    v19 = (void *)68;
    v11 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
    if ((unint64_t)v19 >= v11)
      v12 = (_BYTE *)v11;
    else
      v12 = v19;
    v13 = &v12[(_QWORD)v18];
    v14 = (char *)((_BYTE *)v19 - v12);
    if ((unint64_t)((_BYTE *)v19 - v12) >= 0x12)
      v15 = 18;
    else
      v15 = (_BYTE *)v19 - v12;
    v16 = (unint64_t)&v14[-v15];
    if (v16 >= v16 - 1)
      v17 = v16 - 1;
    else
      v17 = v16;
    mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  }
  v3 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  mlir::AbstractAttribute::get<mlir::DistinctAttr>(a1, &v18);
  mlir::Dialect::addAttribute(a1, v3, (uint64_t)&v18);
  v4 = v23;
  if (v23 >= 8)
  {
    if ((v23 & 4) != 0)
    {
      if ((v23 & 2) != 0)
        v5 = v22;
      else
        v5 = (llvm **)v22[0];
      (*(void (**)(llvm **))((v23 & 0xFFFFFFFFFFFFFFF8) + 16))(v5);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v22[0], v22[1]);
  }
  v6 = (uint64_t *)v19;
  if (v20)
  {
    v7 = 16 * v20;
    v8 = (void **)((char *)v19 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = (uint64_t *)v19;
  }
  if (v6 != &v21)
    free(v6);
  return mlir::detail::AttributeUniquer::registerAttribute<mlir::DistinctAttr>(*(mlir::MLIRContext **)(a1 + 32));
}

void mlir::AbstractAttribute::get<mlir::DistinctAttr>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  const char *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  _OWORD v28[3];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(v28, 0, sizeof(v28));
  v26 = v28;
  v27 = 0x300000000;
  *(_QWORD *)&v23 = mlir::detail::StorageUserBase<mlir::DistinctAttr,mlir::Attribute,mlir::detail::DistinctAttrStorage,mlir::detail::DistinctAttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v25 = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((v3 & 1) == 0)
  {
    v19 = a1;
    a1 = v19;
    if (v11)
    {
      v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v22 = 68;
      v12 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v12)
        v13 = v12;
      else
        v13 = v22;
      v14 = &v21[v13];
      v15 = v22 - v13;
      if (v22 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v22 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a1 = v19;
    }
  }
  v4 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  *a2 = a1;
  a2[1] = a2 + 3;
  a2[2] = 0x300000000;
  if ((_DWORD)v27)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)(a2 + 1), (uint64_t)&v26);
  v5 = (unint64_t)v25;
  a2[12] = v25;
  if (v5 >= 8)
  {
    v6 = a2 + 9;
    if ((v5 & 2) != 0 && (v5 & 4) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 8))((uint64_t)v6, (uint64_t)&v23);
    }
    else
    {
      *v6 = v23;
      a2[11] = v24;
    }
  }
  a2[13] = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSB_19DistinctAttrStorageENSB_24DistinctAttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  a2[14] = &v21;
  a2[15] = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSA_19DistinctAttrStorageENSA_24DistinctAttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  a2[16] = &v20;
  a2[17] = v4;
  v7 = v26;
  if ((_DWORD)v27)
  {
    v8 = 16 * v27;
    v9 = (void **)((char *)v26 + 8);
    do
    {
      v10 = *v9;
      v9 += 2;
      free(v10);
      v8 -= 16;
    }
    while (v8);
    v7 = v26;
  }
  if (v7 != v28)
    free(v7);
}

uint64_t *mlir::detail::AttributeUniquer::registerAttribute<mlir::DistinctAttr>(mlir::MLIRContext *a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t *AttributeUniquer;
  uint64_t v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  const char *v15;
  unint64_t v16;

  if ((v1 & 1) == 0)
  {
    v14 = a1;
    a1 = v14;
    if (v6)
    {
      v15 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v16 = 68;
      v7 = llvm::StringRef::find((uint64_t *)&v15, "DesiredTypeName = ", 0x12uLL, 0);
      if (v16 >= v7)
        v8 = v7;
      else
        v8 = v16;
      v9 = &v15[v8];
      v10 = v16 - v8;
      if (v16 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v16 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a1 = v14;
    }
  }
  v2 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(a1);
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, v2, 0, v4);
}

uint64_t mlir::detail::StorageUserBase<mlir::DistinctAttr,mlir::Attribute,mlir::detail::DistinctAttrStorage,mlir::detail::DistinctAttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSB_19DistinctAttrStorageENSB_24DistinctAttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

_QWORD *_ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSA_19DistinctAttrStorageENSA_24DistinctAttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t Context;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  if (*(_QWORD *)(a2 + 8))
    v3 = *a3;
  else
    v3 = 0;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v3;
  return mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(Context, &v7);
}

uint64_t llvm::array_pod_sort_comparator<mlir::NamedAttribute>(uint64_t *a1, uint64_t *a2)
{
  if ((mlir::NamedAttribute::operator<(a1, a2) & 1) != 0)
    return 0xFFFFFFFFLL;
  else
    return mlir::NamedAttribute::operator<(a2, a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;
  _QWORD v16[2];
  __int128 *v17;
  __int128 v18;
  _QWORD v19[2];

  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v8 = &unk_254519000;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      v8 = (_QWORD *)&unk_254519000;
    }
  }
  v9 = v8[373];
  v10 = llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>((_DWORD *)v18, (_DWORD *)(v18 + 16 * *((_QWORD *)&v18 + 1)));
  v11 = v9 ^ HIDWORD(v10);
  v12 = 0x9DDFEA08EB382D69 * ((8 * v10 + 8) ^ v11);
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 32) >> 15) ^ (-348639895* (v11 ^ (v12 >> 47) ^ v12))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>(_DWORD *a1, _DWORD *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BOOL4 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char v99;
  uint64_t v101;
  __int128 *v102;
  char v103;
  char v104;
  __int128 *v105;
  __int128 *v106;
  __int128 *v107;
  BOOL v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  _OWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _OWORD *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _DWORD *v129;
  _DWORD *v130;
  int v131;
  int v132;
  unint64_t v133;
  char *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _QWORD v139[2];

  v139[1] = *MEMORY[0x24BDAC8D0];
  if ((v2 & 1) == 0)
  {
    v129 = a1;
    v130 = a2;
    a2 = v130;
    v132 = v131;
    a1 = v129;
    if (v132)
    {
      v133 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v133 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v133;
      a1 = v129;
      a2 = v130;
    }
  }
  if (a1 == a2)
  {
    v123 = 0;
  }
  else
  {
    v3 = (a1[2] >> 4) ^ (a1[2] >> 9);
    v4 = (v3 | ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32)) + ~(v3 << 32);
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = ((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27));
    *(_QWORD *)&v135 = v7;
    if (a1 + 4 == a2)
    {
      v123 = 8;
    }
    else
    {
      v8 = ((a1[6] >> 4) ^ (a1[6] >> 9) | ((unint64_t)((a1[4] >> 4) ^ (a1[4] >> 9)) << 32))
         + ~((unint64_t)((a1[6] >> 4) ^ (a1[6] >> 9)) << 32);
      v9 = 9
         * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = (v10 >> 31) ^ v10;
      *((_QWORD *)&v135 + 1) = v11;
      if (a1 + 8 == a2)
      {
        v123 = 16;
      }
      else
      {
        v12 = (a1[10] >> 4) ^ (a1[10] >> 9);
        v13 = (v12 | ((unint64_t)((a1[8] >> 4) ^ (a1[8] >> 9)) << 32)) + ~(v12 << 32);
        v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
        v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
        v16 = ((v15 + ~(v15 << 27)) >> 31) ^ ((_DWORD)v15 + ~((_DWORD)v15 << 27));
        *(_QWORD *)&v136 = v16;
        if (a1 + 12 == a2)
        {
          v123 = 24;
        }
        else
        {
          v17 = ((a1[14] >> 4) ^ (a1[14] >> 9) | ((unint64_t)((a1[12] >> 4) ^ (a1[12] >> 9)) << 32))
              + ~((unint64_t)((a1[14] >> 4) ^ (a1[14] >> 9)) << 32);
          v18 = 9
              * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22))
                                                                        + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = (v19 >> 31) ^ v19;
          *((_QWORD *)&v136 + 1) = v20;
          if (a1 + 16 == a2)
          {
            v123 = 32;
          }
          else
          {
            v21 = (a1[18] >> 4) ^ (a1[18] >> 9);
            v22 = (v21 | ((unint64_t)((a1[16] >> 4) ^ (a1[16] >> 9)) << 32)) + ~(v21 << 32);
            v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
            v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
            v25 = ((v24 + ~(v24 << 27)) >> 31) ^ ((_DWORD)v24 + ~((_DWORD)v24 << 27));
            *(_QWORD *)&v137 = v25;
            if (a1 + 20 == a2)
            {
              v123 = 40;
            }
            else
            {
              v26 = ((a1[22] >> 4) ^ (a1[22] >> 9) | ((unint64_t)((a1[20] >> 4) ^ (a1[20] >> 9)) << 32))
                  + ~((unint64_t)((a1[22] >> 4) ^ (a1[22] >> 9)) << 32);
              v27 = 9
                  * (((v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13)) ^ (((v26 ^ (v26 >> 22))
                                                                            + ~((v26 ^ (v26 >> 22)) << 13)) >> 8));
              v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
              v29 = (v28 >> 31) ^ v28;
              *((_QWORD *)&v137 + 1) = v29;
              if (a1 + 24 == a2)
              {
                v123 = 48;
              }
              else
              {
                v30 = (a1[26] >> 4) ^ (a1[26] >> 9);
                v31 = (v30 | ((unint64_t)((a1[24] >> 4) ^ (a1[24] >> 9)) << 32)) + ~(v30 << 32);
                v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
                v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
                v34 = ((v33 + ~(v33 << 27)) >> 31) ^ ((_DWORD)v33 + ~((_DWORD)v33 << 27));
                *(_QWORD *)&v138 = v34;
                if (a1 + 28 == a2)
                {
                  v123 = 56;
                }
                else
                {
                  v35 = ((a1[30] >> 4) ^ (a1[30] >> 9) | ((unint64_t)((a1[28] >> 4) ^ (a1[28] >> 9)) << 32))
                      + ~((unint64_t)((a1[30] >> 4) ^ (a1[30] >> 9)) << 32);
                  v36 = 9
                      * (((v35 ^ (v35 >> 22)) + ~((v35 ^ (v35 >> 22)) << 13)) ^ (((v35 ^ (v35 >> 22))
                                                                                + ~((v35 ^ (v35 >> 22)) << 13)) >> 8));
                  v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
                  v38 = (v37 >> 31) ^ v37;
                  *((_QWORD *)&v138 + 1) = v38;
                  v39 = a1 + 32;
                  if (a1 + 32 != a2)
                  {
                    v40 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
                    v41 = 0x9DDFEA08EB382D69
                        * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                                    * (v40 ^ (0xB492B66FBE98F273
                                                                                            * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
                    v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
                    v43 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69
                          * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    v44 = __ROR8__(v40 - 0x622015F714C7D297 * (v43 ^ (v43 >> 47)), 33);
                    v45 = 0xB492B66FBE98F273 * v44;
                    v46 = v42 + v25 - 0x4B6D499041670D8DLL * v44;
                    v47 = __ROR8__(v29 + v34 + v46, 44);
                    v48 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
                    v49 = v29 + v34 + v46 + v38;
                    v50 = v29
                        + v48
                        - 0x4B6D499041670D8DLL
                        * __ROR8__(v34 - 0x4B6D499041670D8CLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
                    v51 = v47 + v46 + __ROR8__(v50 + v16 + v46 + v38, 21);
                    v52 = v7 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
                    v53 = v52 + v11 + v16;
                    v54 = v53 + v20;
                    v55 = (0xB492B66FBE98F273
                         * __ROR8__(v48 + llvm::hashing::detail::get_execution_seed(void)::seed + v11, 37)) ^ v42;
                    v56 = __ROR8__(v53, 44) + v52 + __ROR8__(v55 + v40 + v52 + v20, 21);
                    v134 = (char *)&v136 + 8;
                    v57 = 64;
                    while (1)
                    {
                      v65 = ((v39[2] >> 4) ^ (v39[2] >> 9) | ((unint64_t)((*v39 >> 4) ^ (*v39 >> 9)) << 32))
                          + ~((unint64_t)((v39[2] >> 4) ^ (v39[2] >> 9)) << 32);
                      v66 = (v65 ^ (v65 >> 22)) + ~((v65 ^ (v65 >> 22)) << 13);
                      v67 = (9 * (v66 ^ (v66 >> 8))) ^ ((9 * (v66 ^ (v66 >> 8))) >> 15);
                      *(_QWORD *)&v135 = ((v67 + ~(v67 << 27)) >> 31) ^ ((_DWORD)v67 + ~((_DWORD)v67 << 27));
                      v68 = v39 + 4 == a2;
                      if (v39 + 4 == a2)
                      {
                        v90 = 0;
                        v91 = 8;
                        v39 += 4;
                        v92 = (char *)&v135 + 8;
                      }
                      else
                      {
                        v69 = ((v39[6] >> 4) ^ (v39[6] >> 9) | ((unint64_t)((v39[4] >> 4) ^ (v39[4] >> 9)) << 32))
                            + ~((unint64_t)((v39[6] >> 4) ^ (v39[6] >> 9)) << 32);
                        v70 = (v69 ^ (v69 >> 22)) + ~((v69 ^ (v69 >> 22)) << 13);
                        v71 = (9 * (v70 ^ (v70 >> 8))) ^ ((9 * (v70 ^ (v70 >> 8))) >> 15);
                        *((_QWORD *)&v135 + 1) = ((v71 + ~(v71 << 27)) >> 31) ^ ((_DWORD)v71
                                                                                             + ~((_DWORD)v71 << 27));
                        v68 = v39 + 8 == a2;
                        if (v39 + 8 == a2)
                        {
                          v90 = 8;
                          v91 = 16;
                          v39 += 8;
                          v92 = (char *)&v136;
                        }
                        else
                        {
                          v72 = ((v39[10] >> 4) ^ (v39[10] >> 9) | ((unint64_t)((v39[8] >> 4) ^ (v39[8] >> 9)) << 32))
                              + ~((unint64_t)((v39[10] >> 4) ^ (v39[10] >> 9)) << 32);
                          v73 = (v72 ^ (v72 >> 22)) + ~((v72 ^ (v72 >> 22)) << 13);
                          v74 = (9 * (v73 ^ (v73 >> 8))) ^ ((9 * (v73 ^ (v73 >> 8))) >> 15);
                          *(_QWORD *)&v136 = ((v74 + ~(v74 << 27)) >> 31) ^ ((_DWORD)v74
                                                                                         + ~((_DWORD)v74 << 27));
                          v68 = v39 + 12 == a2;
                          if (v39 + 12 == a2)
                          {
                            v90 = 16;
                            v91 = 24;
                            v39 += 12;
                            v92 = v134;
                          }
                          else
                          {
                            v75 = ((v39[14] >> 4) ^ (v39[14] >> 9) | ((unint64_t)((v39[12] >> 4) ^ (v39[12] >> 9)) << 32))
                                + ~((unint64_t)((v39[14] >> 4) ^ (v39[14] >> 9)) << 32);
                            v76 = (v75 ^ (v75 >> 22)) + ~((v75 ^ (v75 >> 22)) << 13);
                            v77 = (9 * (v76 ^ (v76 >> 8))) ^ ((9 * (v76 ^ (v76 >> 8))) >> 15);
                            *((_QWORD *)&v136 + 1) = ((v77 + ~(v77 << 27)) >> 31) ^ ((_DWORD)v77
                                                                                                 + ~((_DWORD)v77 << 27));
                            v68 = v39 + 16 == a2;
                            if (v39 + 16 == a2)
                            {
                              v90 = 24;
                              v91 = 32;
                              v39 += 16;
                              v92 = (char *)&v137;
                            }
                            else
                            {
                              v78 = ((v39[18] >> 4) ^ (v39[18] >> 9) | ((unint64_t)((v39[16] >> 4) ^ (v39[16] >> 9)) << 32))
                                  + ~((unint64_t)((v39[18] >> 4) ^ (v39[18] >> 9)) << 32);
                              v79 = (v78 ^ (v78 >> 22)) + ~((v78 ^ (v78 >> 22)) << 13);
                              v80 = (9 * (v79 ^ (v79 >> 8))) ^ ((9 * (v79 ^ (v79 >> 8))) >> 15);
                              *(_QWORD *)&v137 = ((v80 + ~(v80 << 27)) >> 31) ^ ((_DWORD)v80
                                                                                             + ~((_DWORD)v80 << 27));
                              v68 = v39 + 20 == a2;
                              if (v39 + 20 == a2)
                              {
                                v90 = 32;
                                v91 = 40;
                                v39 += 20;
                                v92 = (char *)&v137 + 8;
                              }
                              else
                              {
                                v81 = ((v39[22] >> 4) ^ (v39[22] >> 9) | ((unint64_t)((v39[20] >> 4) ^ (v39[20] >> 9)) << 32))
                                    + ~((unint64_t)((v39[22] >> 4) ^ (v39[22] >> 9)) << 32);
                                v82 = (v81 ^ (v81 >> 22)) + ~((v81 ^ (v81 >> 22)) << 13);
                                v83 = (9 * (v82 ^ (v82 >> 8))) ^ ((9 * (v82 ^ (v82 >> 8))) >> 15);
                                *((_QWORD *)&v137 + 1) = ((v83 + ~(v83 << 27)) >> 31) ^ ((_DWORD)v83 + ~((_DWORD)v83 << 27));
                                v68 = v39 + 24 == a2;
                                if (v39 + 24 == a2)
                                {
                                  v90 = 40;
                                  v91 = 48;
                                  v39 += 24;
                                  v92 = (char *)&v138;
                                }
                                else
                                {
                                  v84 = ((v39[26] >> 4) ^ (v39[26] >> 9) | ((unint64_t)((v39[24] >> 4) ^ (v39[24] >> 9)) << 32))
                                      + ~((unint64_t)((v39[26] >> 4) ^ (v39[26] >> 9)) << 32);
                                  v85 = (v84 ^ (v84 >> 22)) + ~((v84 ^ (v84 >> 22)) << 13);
                                  v86 = (9 * (v85 ^ (v85 >> 8))) ^ ((9 * (v85 ^ (v85 >> 8))) >> 15);
                                  *(_QWORD *)&v138 = ((v86 + ~(v86 << 27)) >> 31) ^ ((_DWORD)v86
                                                                                                 + ~((_DWORD)v86 << 27));
                                  v68 = v39 + 28 == a2;
                                  if (v39 + 28 == a2)
                                  {
                                    v90 = 48;
                                    v91 = 56;
                                    v39 += 28;
                                    v92 = (char *)&v138 + 8;
                                  }
                                  else
                                  {
                                    v87 = ((v39[30] >> 4) ^ (v39[30] >> 9) | ((unint64_t)((v39[28] >> 4) ^ (v39[28] >> 9)) << 32))
                                        + ~((unint64_t)((v39[30] >> 4) ^ (v39[30] >> 9)) << 32);
                                    v88 = (v87 ^ (v87 >> 22)) + ~((v87 ^ (v87 >> 22)) << 13);
                                    v89 = (9 * (v88 ^ (v88 >> 8))) ^ ((9 * (v88 ^ (v88 >> 8))) >> 15);
                                    v39 += 32;
                                    *((_QWORD *)&v138 + 1) = ((v89 + ~(v89 << 27)) >> 31) ^ ((_DWORD)v89 + ~((_DWORD)v89 << 27));
                                    v68 = v39 == a2;
                                    v90 = 56;
                                    v91 = 64;
                                    v92 = (char *)v139;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if ((v91 & 0x38) == 0)
                        goto LABEL_12;
                      v93 = 56 - v90;
                      v94 = v91;
                      if (v91 != 56 - v90)
                      {
                        do
                        {
                          v101 = v94;
                          v94 = v93;
                          v93 = v101 % v93;
                        }
                        while (v93);
                        if (v94)
                        {
                          v102 = (__int128 *)((char *)&v135 + v94);
                          do
                          {
                            v104 = *((_BYTE *)v102 - 1);
                            v102 = (__int128 *)((char *)v102 - 1);
                            v103 = v104;
                            v105 = (__int128 *)((char *)v102 + v91);
                            v106 = v102;
                            do
                            {
                              v107 = v106;
                              v106 = v105;
                              *(_BYTE *)v107 = *(_BYTE *)v105;
                              v108 = v91 < (char *)v139 - (char *)v105;
                              v109 = (char *)&v135 + v91 - ((char *)v139 - (char *)v105);
                              v105 = (__int128 *)((char *)v105 + v91);
                              if (!v108)
                                v105 = (__int128 *)v109;
                            }
                            while (v105 != v102);
                            *(_BYTE *)v106 = v103;
                          }
                          while (v102 != &v135);
                        }
                        goto LABEL_12;
                      }
                      v95 = 55 - v90;
                      if (55 - v90 >= (v90 | 7uLL))
                        v95 = v90 | 7;
                      v96 = (char *)&v135;
                      if (&v135 < (__int128 *)((char *)&v135 + v90 + v95 + 9))
                      {
                        v97 = v91;
                        if (v92 < (char *)&v135 + v95 + 1)
                          goto LABEL_34;
                      }
                      if (v95 >= 0x1F)
                      {
                        v111 = v95 + 1;
                        v110 = (v95 + 1) & 0x60;
                        v112 = (__int128 *)((char *)&v135 + v91);
                        v113 = v135;
                        v114 = v136;
                        v115 = *(__int128 *)((char *)&v135 + v91 + 16);
                        v135 = *(__int128 *)((char *)&v135 + v91);
                        v136 = v115;
                        *v112 = v113;
                        v112[1] = v114;
                        if (v110 != 32)
                        {
                          v116 = (__int128 *)((char *)&v137 + v91);
                          v117 = v137;
                          v118 = v138;
                          v119 = *(__int128 *)((char *)&v137 + v91 + 16);
                          v137 = *(__int128 *)((char *)&v137 + v91);
                          v138 = v119;
                          *v116 = v117;
                          v116[1] = v118;
                        }
                        if (v111 == v110)
                          goto LABEL_12;
                        if ((v111 & 0x18) == 0)
                        {
                          v96 = (char *)&v135 + v110;
                          v97 = v91 + v110;
LABEL_34:
                          v98 = v96 + 1;
                          do
                          {
                            v99 = *(v98 - 1);
                            *(v98 - 1) = *((_BYTE *)&v135 + v97);
                            *((_BYTE *)&v135 + v97) = v99;
                            if (v98 == v92)
                              break;
                            ++v98;
                          }
                          while (v97++ != 63);
                          goto LABEL_12;
                        }
                      }
                      else
                      {
                        v110 = 0;
                      }
                      v120 = (uint64_t *)((char *)&v135 + v110);
                      v121 = v95 - v110 + 1;
                      do
                      {
                        v122 = *v120;
                        *v120 = v120[(unint64_t)v91 / 8];
                        v120[(unint64_t)v91 / 8] = v122;
                        ++v120;
                        v121 -= 8;
                      }
                      while (v121);
LABEL_12:
                      v58 = v50 + v54 + v45 + *((_QWORD *)&v135 + 1);
                      v50 = *((_QWORD *)&v137 + 1) + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v56 + v138, 42);
                      v59 = v135 - 0x4B6D499041670D8DLL * v56;
                      v60 = v59 + *((_QWORD *)&v135 + 1) + v136;
                      v61 = __ROR8__(v55 + v49, 33);
                      v62 = (0xB492B66FBE98F273 * __ROR8__(v58, 37)) ^ v51;
                      v56 = __ROR8__(v60, 44) + v59 + __ROR8__(v62 + v49 + v59 + *((_QWORD *)&v136 + 1), 21);
                      v45 = 0xB492B66FBE98F273 * v61;
                      v63 = 0xB492B66FBE98F273 * v61 + v51 + v137;
                      v64 = *((_QWORD *)&v137 + 1) + v138 + v63;
                      v54 = v60 + *((_QWORD *)&v136 + 1);
                      v51 = __ROR8__(v50 + v136 + v63 + *((_QWORD *)&v138 + 1), 21) + v63 + __ROR8__(v64, 44);
                      v49 = v64 + *((_QWORD *)&v138 + 1);
                      v57 += v91;
                      v55 = v62;
                      if (v68)
                      {
                        v124 = 0x9DDFEA08EB382D69
                             * (v49 ^ ((0x9DDFEA08EB382D69 * (v54 ^ v49)) >> 47) ^ (0x9DDFEA08EB382D69 * (v54 ^ v49)));
                        v125 = 0x9DDFEA08EB382D69
                             * (v51 ^ ((0x9DDFEA08EB382D69 * (v56 ^ v51)) >> 47) ^ (0x9DDFEA08EB382D69 * (v56 ^ v51)));
                        v126 = 0x9DDFEA08EB382D69 * (v125 ^ (v125 >> 47))
                             - 0x4B6D499041670D8DLL * ((v57 ^ (v57 >> 47)) + v61);
                        v127 = 0x9DDFEA08EB382D69
                             * (v126 ^ (v62
                                      - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47))
                                      - 0x622015F714C7D297 * (v124 ^ (v124 >> 47))));
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v126 ^ (v127 >> 47) ^ v127)) ^ ((0x9DDFEA08EB382D69
                                                                                        * (v126 ^ (v127 >> 47) ^ v127)) >> 47));
                      }
                    }
                  }
                  v123 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v135, v123, llvm::hashing::detail::get_execution_seed(void)::seed);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1])
    return 0;
  if (!v2)
    return 1;
  v3 = *(uint64_t **)(a2 + 8);
  v4 = **a1;
  v5 = &v3[2 * (_QWORD)v2];
  do
  {
    v6 = *v4;
    v7 = v4[1];
    v4 += 2;
    v8 = *v3;
    v9 = v3[1];
    v3 += 2;
    result = v8 == v6 && v9 == v7;
  }
  while (result && v3 != v5);
  return result;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::DictionaryAttrStorage::construct(a2, *(__int128 ***)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::DictionaryAttrStorage::construct(size_t __sz, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  char *buffer;
  uint64_t v13;
  _QWORD *result;

  v3 = a2[1];
  if (v3)
  {
    v4 = *a2;
    v5 = 16 * (_QWORD)v3;
    v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 16 * (_QWORD)v3, 3);
    v7 = (_OWORD *)v6;
    do
    {
      v8 = *v4++;
      *v7++ = v8;
      v5 -= 16;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(__sz + 80) += 24;
  if (*(_QWORD *)__sz)
    v9 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 24 > *(_QWORD *)(__sz + 8)
                                                                                 - *(_QWORD *)__sz;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_DWORD *)(__sz + 24) >> 7;
    if (v10 >= 0x1E)
      LOBYTE(v10) = 30;
    v11 = 4096 << v10;
    buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
    v13 = *(unsigned int *)(__sz + 24);
    if (v13 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v13) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v11];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 3;
  *result = 0;
  result[1] = v6;
  result[2] = v3;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;
  _QWORD v16[2];
  __int128 *v17;
  __int128 v18;
  _QWORD v19[2];

  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v8 = &unk_254519000;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      v8 = (_QWORD *)&unk_254519000;
    }
  }
  v9 = v8[373];
  v10 = llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>((_DWORD *)v18, (_DWORD *)(v18 + 16 * *((_QWORD *)&v18 + 1)));
  v11 = v9 ^ HIDWORD(v10);
  v12 = 0x9DDFEA08EB382D69 * ((8 * v10 + 8) ^ v11);
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 32) >> 15) ^ (-348639895* (v11 ^ (v12 >> 47) ^ v12))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1])
    return 0;
  if (!v2)
    return 1;
  v3 = *(uint64_t **)(a2 + 8);
  v4 = **a1;
  v5 = &v3[2 * (_QWORD)v2];
  do
  {
    v6 = *v4;
    v7 = v4[1];
    v4 += 2;
    v8 = *v3;
    v9 = v3[1];
    v3 += 2;
    result = v8 == v6 && v9 == v7;
  }
  while (result && v3 != v5);
  return result;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::DictionaryAttrStorage::construct(__sz, *(__int128 ***)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  return v3 == *(_QWORD *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v2 + 16);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::StringAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  char *buffer;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  *(_QWORD *)(a1 + 80) += 40;
  v4 = *(_QWORD *)a1;
  v5 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v6 = v5 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v6 = 1;
  if (v6)
  {
    v7 = *(_DWORD *)(a1 + 24) >> 7;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    v10 = *(unsigned int *)(a1 + 24);
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v8];
    v11 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)a1 = v11 + 5;
    v12 = a2[1];
    if (!v12)
      goto LABEL_16;
LABEL_11:
    v13 = *a2;
    v14 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, v12 + 1, 0);
    if (v12 < 8)
    {
      v15 = (_BYTE *)v14;
      v16 = (char *)v13;
    }
    else
    {
      v15 = (_BYTE *)v14;
      v16 = (char *)v13;
      if ((unint64_t)(v14 - v13) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v17 = 0;
          goto LABEL_22;
        }
        v17 = v12 & 0xFFFFFFFFFFFFFFE0;
        v18 = (__int128 *)(v13 + 16);
        v19 = (_OWORD *)(v14 + 16);
        v20 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 32;
        }
        while (v20);
        if (v12 == v17)
          goto LABEL_28;
        if ((v12 & 0x18) != 0)
        {
LABEL_22:
          v15 = (_BYTE *)(v14 + (v12 & 0xFFFFFFFFFFFFFFF8));
          v16 = (char *)(v13 + (v12 & 0xFFFFFFFFFFFFFFF8));
          v22 = (uint64_t *)(v13 + v17);
          v23 = (_QWORD *)(v14 + v17);
          v24 = v17 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v25 = *v22++;
            *v23++ = v25;
            v24 += 8;
          }
          while (v24);
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_28;
          goto LABEL_27;
        }
        v16 = (char *)(v13 + v17);
        v15 = (_BYTE *)(v14 + v17);
      }
    }
    do
    {
LABEL_27:
      v26 = *v16++;
      *v15++ = v26;
    }
    while (v16 != (char *)(v13 + v12));
LABEL_28:
    *(_BYTE *)(v14 + v12) = 0;
    goto LABEL_29;
  }
  v11 = (_QWORD *)(v4 + v5);
  *(_QWORD *)a1 = v4 + v5 + 40;
  v12 = a2[1];
  if (v12)
    goto LABEL_11;
LABEL_16:
  v14 = 0;
LABEL_29:
  v27 = a2[2];
  *v11 = 0;
  v11[1] = v27;
  v11[2] = v14;
  v11[3] = v12;
  v11[4] = 0;
  return v11;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJRA1_KcNS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  mlir::detail::StringAttrStorage::initialize(a2, (mlir::MLIRContext *)a1[1]);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  return v3 == *(_QWORD *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v2 + 16);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefENS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  mlir::detail::StringAttrStorage::initialize(a2, (mlir::MLIRContext *)a1[1]);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  return v3 == *(_QWORD *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v2 + 16);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  mlir::detail::StringAttrStorage::initialize(a2, (mlir::MLIRContext *)a1[1]);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  const void **v4;
  const void **v5;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)*a1)
    return 0;
  v4 = (const void **)(a2 + 16);
  v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u)
    return llvm::APInt::equalSlowCase(v4, v5);
  else
    return *v4 == *v5;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_11IntegerTypeENS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)*a1
    && *(_QWORD *)(a2 + 16) == v2[1]
    && (v3 = *(_QWORD *)(a2 + 32), v3 == v2[3]))
  {
    return memcmp(*(const void **)(a2 + 24), (const void *)v2[2], v3) == 0;
  }
  else
  {
    return 0;
  }
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::DenseArrayAttrStorage::construct(__sz, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(mlir::AsmParser &,mlir::Type)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (!mlir::AsmParser::parseInteger<long long>(*a1, &v6))
    return 0;
  v2 = a1[1];
  v3 = v6;
  v4 = *(unsigned int *)(v2 + 8);
  if (v4 >= *(_DWORD *)(v2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, (void *)(v2 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = v3;
  ++*(_DWORD *)(v2 + 8);
  return 1;
}

void llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  char *v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;

  v17 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v17);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = v4 + 16;
    v9 = v6 + 6;
    v10 = 32 * v7;
    do
    {
      *((_DWORD *)v8 - 2) = *(v9 - 4);
      *((_QWORD *)v8 - 2) = *((_QWORD *)v9 - 3);
      *(v9 - 4) = 0;
      *((_DWORD *)v8 + 2) = *v9;
      *(_QWORD *)v8 = *((_QWORD *)v9 - 1);
      v8 += 32;
      *v9 = 0;
      v9 += 8;
      v10 -= 32;
    }
    while (v10);
    v6 = *(_DWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      do
      {
        v13 = (char *)&v6[v12];
        if (v6[v12 - 2] >= 0x41u)
        {
          v14 = *((_QWORD *)v13 - 2);
          if (v14)
            MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v13 - 6) >= 0x41u)
        {
          v15 = *((_QWORD *)v13 - 4);
          if (v15)
            MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
        }
        v12 -= 8;
      }
      while (v12 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v16 = v17;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v16;
}

void llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::detail::DoubleAPFloat *v17;
  llvm::detail::DoubleAPFloat *v18;

  v2 = a1[2];
  if (!(_DWORD)v2)
    return;
  v5 = *(_QWORD *)a1;
  v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  v7 = (_QWORD *)(a2 + 40);
  v8 = v2 << 6;
  v9 = (_QWORD *)(v5 + 40);
  do
  {
    while (1)
    {
      v10 = v7 - 4;
      v11 = v9 - 4;
      if (v6 != (void *)*(v9 - 4))
        break;
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      v12 = v7;
      v13 = v9;
      if (v6 != (void *)*v9)
        goto LABEL_8;
LABEL_3:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, v13);
      v7 += 8;
      v9 += 8;
      v8 -= 64;
      if (!v8)
        goto LABEL_9;
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
    v12 = v7;
    v13 = v9;
    if (v6 == (void *)*v9)
      goto LABEL_3;
LABEL_8:
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v12, (uint64_t)v13);
    v7 += 8;
    v9 += 8;
    v8 -= 64;
  }
  while (v8);
LABEL_9:
  v14 = a1[2];
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)a1;
    v16 = v14 << 6;
    while (1)
    {
      v17 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 24);
      if (v6 == *(void **)v17)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v17);
        v18 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 56);
        if (v6 != *(void **)v18)
          goto LABEL_16;
LABEL_11:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v18);
        v16 -= 64;
        if (!v16)
          return;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v17);
        v18 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 56);
        if (v6 == *(void **)v18)
          goto LABEL_11;
LABEL_16:
        llvm::detail::IEEEFloat::~IEEEFloat(v18);
        v16 -= 64;
        if (!v16)
          return;
      }
    }
  }
}

char *llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::reserveForParamAndGetAddress(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  unsigned int *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  char *v15;
  unsigned int v16;
  unint64_t v17;

  v3 = a2;
  v4 = a1[2];
  v5 = v4 + a3;
  if (v5 > a1[3])
  {
    v8 = *(_QWORD *)a1 + (v4 << 6);
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = (uint64_t)(a2 - *(_QWORD *)a1) >> 6;
      v17 = 0;
      v14 = a1 + 4;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 64, &v17);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(unsigned int **)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      a1[3] = v16;
      return &v15[64 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 4;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 64, &v17);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(unsigned int **)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      a1[3] = v12;
    }
  }
  return (char *)v3;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned __int8 *a7)
{
  _QWORD *v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD v16[8];
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  _OWORD v20[3];
  char v21[48];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v18[0] = a2;
  v18[1] = a3;
  mlir::detail::DenseIntOrFPElementsAttrStorage::getKey(*a5, a5[1], *(unsigned __int8 **)a6, *(_QWORD *)(a6 + 8), *a7, (uint64_t)v16);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v9 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v9 = &unk_254519000;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v9 = (_QWORD *)&unk_254519000;
    }
  }
  v23 = v9[373];
  *(_QWORD *)&v19 = (v16[0] >> 4) ^ (v16[0] >> 9);
  *((_QWORD *)&v19 + 1) = v17;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v19, 0, (char *)v20, v21);
  v15 = v16;
  *(_QWORD *)&v19 = v16;
  *((_QWORD *)&v19 + 1) = v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

void mlir::detail::DenseIntOrFPElementsAttrStorage::getKey(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  _BOOL4 isInteger;
  _BOOL4 v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *Shape;
  uint64_t v19;
  char NumElements;
  unint64_t v21;
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  unint64_t v32;
  __int128 v33;

  *(_QWORD *)&v33 = a1;
  *((_QWORD *)&v33 + 1) = a2;
  if (!a4)
  {
    *(_QWORD *)a6 = a1;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 16) = a3;
    *(_BYTE *)(a6 + 40) = 0;
    return;
  }
  v31[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
  isInteger = mlir::Type::isInteger((mlir::Type *)v31, 1);
  v11 = isInteger;
  if (a5)
  {
    v12 = v33;
    if (isInteger)
    {
      if (*a3)
        v13 = (char *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
      else
        v13 = (char *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatFalse;
      v14 = *v13;
      if ((v15 & 1) == 0
      {
        v30 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v30 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v30;
      }
      v16 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v14) ^ HIDWORD(v14));
      v17 = 0x9DDFEA08EB382D69 * (HIDWORD(v14) ^ (v16 >> 47) ^ v16);
      *(_OWORD *)a6 = v12;
      *(_QWORD *)(a6 + 16) = v13;
      *(_QWORD *)(a6 + 24) = 1;
      *(_QWORD *)(a6 + 32) = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
      *(_BYTE *)(a6 + 40) = 1;
      return;
    }
    v21 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
    *(_OWORD *)a6 = v12;
    *(_QWORD *)(a6 + 16) = a3;
    *(_QWORD *)(a6 + 24) = a4;
    *(_QWORD *)(a6 + 32) = v21;
LABEL_21:
    *(_BYTE *)(a6 + 40) = 1;
    return;
  }
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v33);
  NumElements = mlir::ShapedType::getNumElements(Shape, v19);
  if (v11)
  {
    mlir::detail::DenseIntOrFPElementsAttrStorage::getKeyForBoolData(v33, *((uint64_t *)&v33 + 1), a3, a4, NumElements, a6);
    return;
  }
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  v24 = (DenseElementBitWidth + 7) >> 3;
  if (a4 >= v24)
    v25 = (DenseElementBitWidth + 7) >> 3;
  else
    v25 = a4;
  v26 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[v25]);
  v32 = v26;
  if (v24 == a4)
  {
LABEL_20:
    *(_OWORD *)a6 = v33;
    *(_QWORD *)(a6 + 16) = a3;
    *(_QWORD *)(a6 + 24) = v25;
    *(_QWORD *)(a6 + 32) = v26;
    goto LABEL_21;
  }
  v27 = v24;
  while (!memcmp(a3, &a3[v27], v24))
  {
    v27 += v24;
    if (a4 == v27)
      goto LABEL_20;
  }
  v28 = v33;
  v31[0] = &a3[v27];
  v31[1] = a4 - v27;
  v29 = llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<char>>(&v32, (uint64_t)v31);
  *(_OWORD *)a6 = v28;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = v29;
  *(_BYTE *)(a6 + 40) = 0;
}

unint64_t mlir::detail::DenseIntOrFPElementsAttrStorage::getKeyForBoolData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t result;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unint64_t v25;
  char v26;
  int v27;
  unint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;

  v6 = a4;
  v7 = a3;
  v11 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatFalse;
  v12 = *a3;
  if ((v12 & 1) != 0)
    v11 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
  v13 = a4 - 1;
  if (a4 != 1 || (v14 = *v11, v12 != v14))
  {
    if ((a5 & 7) != 0 && (v12 & 1) != 0)
    {
      if (0xFFu >> (8 - (a5 & 7)) != (char)a3[v13])
      {
LABEL_23:
        result = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
        v26 = 0;
        goto LABEL_24;
      }
      if (a4 == 1)
      {
        if ((v19 & 1) == 0
        {
          v32 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v32 = 0xFF51AFD7ED558CCDLL;
          llvm::hashing::detail::get_execution_seed(void)::seed = v32;
        }
        v20 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 0x7FFFFFFF8) ^ 0xFFFFFFFFLL)) ^ ((0x9DDFEA08EB382D69 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 0x7FFFFFFF8) ^ 0xFFFFFFFFLL)) >> 47) ^ 0xFFFFFFFF);
        result = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
        v6 = 1;
        v7 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = a4;
      if (!a4)
      {
LABEL_19:
        v15 = (char)*v11;
        if ((v24 & 1) == 0)
        {
          v33 = v11;
          v11 = v33;
          if (v27)
          {
            v28 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v28 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v28;
            v11 = v33;
          }
        }
        v17 = HIDWORD(v15);
        v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
        goto LABEL_21;
      }
    }
    v22 = 0;
    if ((v12 & 1) != 0)
      v23 = -1;
    else
      v23 = 0;
    while (a3[v22] == v23)
    {
      if (v13 == ++v22)
        goto LABEL_19;
    }
    goto LABEL_23;
  }
  v15 = (char)v14;
  if ((v16 & 1) == 0)
  {
    v29 = v11;
    v11 = v29;
    if (v30)
    {
      v31 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v31 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v31;
      v11 = v29;
    }
  }
  v17 = HIDWORD(v15);
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
LABEL_21:
  v25 = 0x9DDFEA08EB382D69 * ((v18 + 8 * v15) ^ v17);
  result = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v17 ^ (v25 >> 47) ^ v25)) ^ ((0x9DDFEA08EB382D69 * (v17 ^ (v25 >> 47) ^ v25)) >> 47));
  v6 = 1;
  v7 = v11;
LABEL_22:
  v26 = 1;
LABEL_24:
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_QWORD *)(a6 + 24) = v6;
  *(_QWORD *)(a6 + 32) = result;
  *(_BYTE *)(a6 + 40) = v26;
  return result;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<char>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = *a1;
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)*a1 == *(_QWORD *)(a2 + 8) && (v3 = v2[3], v3 == *(_QWORD *)(a2 + 40)))
    return memcmp((const void *)v2[2], *(const void **)(a2 + 32), v3) == 0;
  else
    return 0;
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__n128 **a1, size_t a2)
{
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  __n128 v10[3];

  v3 = **a1;
  v4 = (*a1)[2];
  v10[1] = (*a1)[1];
  v10[2] = v4;
  v10[0] = v3;
  v6 = mlir::detail::DenseIntOrFPElementsAttrStorage::construct(a2, v10);
  v7 = v5;
  v8 = a1[1];
  if (v8->n128_u64[0])
    ((void (*)(unint64_t, uint64_t, __n128))v8->n128_u64[0])(v8->n128_u64[1], v5, v6);
  return v7;
}

__n128 mlir::detail::DenseIntOrFPElementsAttrStorage::construct(size_t __sz, __n128 *a2)
{
  size_t v4;
  const void *v5;
  void *v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  __n128 result;

  v4 = a2[1].n128_u64[1];
  if (v4)
  {
    v5 = (const void *)a2[1].n128_u64[0];
    v6 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, a2[1].n128_i64[1], 3);
    memcpy(v6, v5, v4);
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(__sz + 80) += 48;
  if (*(_QWORD *)__sz)
    v7 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 48 > *(_QWORD *)(__sz + 8)
                                                                                 - *(_QWORD *)__sz;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *(_DWORD *)(__sz + 24) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *(unsigned int *)(__sz + 24);
    if (v11 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v11) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v9];
    v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v12 = (*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)__sz = v12 + 48;
  v13 = a2[2].n128_u8[8];
  result = *a2;
  *(_QWORD *)v12 = 0;
  *(__n128 *)(v12 + 8) = result;
  *(_BYTE *)(v12 + 24) = v13;
  *(_QWORD *)(v12 + 32) = v6;
  *(_QWORD *)(v12 + 40) = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail31DenseIntOrFPElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_24DenseIntOrFPElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefIcEERbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6)
{
  __int128 v8;
  unsigned __int8 v9;
  _QWORD *v10;
  unsigned int v11;
  int v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[2];
  _OWORD v20[4];
  char v21[48];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v19[0] = a2;
  v19[1] = a3;
  v8 = *a6;
  v16 = *a5;
  v17 = v8;
  v18 = *((_QWORD *)a6 + 2);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  v10 = &unk_254519000;
  if ((v9 & 1) == 0)
  {
    v10 = &unk_254519000;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v10 = (_QWORD *)&unk_254519000;
    }
  }
  v23 = v10[373];
  *(_QWORD *)&v20[0] = (v16 >> 4) ^ (v16 >> 9);
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v20, 0, (_QWORD *)v20 + 1, v21, (unint64_t *)&v17);
  v15 = &v16;
  *(_QWORD *)&v20[0] = &v16;
  *((_QWORD *)&v20[0] + 1) = v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **(_QWORD **)a1 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(*(_QWORD *)a1 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::detail::DenseResourceElementsAttrStorage::construct(a2, (__int128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::detail::DenseResourceElementsAttrStorage::construct(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __n128 v12;
  uint64_t v13;

  v3 = *a2;
  v12 = (__n128)a2[1];
  v13 = *((_QWORD *)a2 + 4);
  a1[10] += 48;
  v4 = *a1;
  if (*a1 && ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) - v4 + 48 <= a1[1] - v4)
  {
    v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v11 = v3;
    v6 = *((_DWORD *)a1 + 6) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *((unsigned int *)a1 + 6);
    if (v9 >= *((_DWORD *)a1 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v9 + 1, 8);
      LODWORD(v9) = *((_DWORD *)a1 + 6);
    }
    *(_QWORD *)(a1[2] + 8 * v9) = buffer;
    ++*((_DWORD *)a1 + 6);
    a1[1] = (uint64_t)&buffer[v7];
    v5 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v3 = v11;
  }
  *a1 = v5 + 48;
  *(_QWORD *)v5 = 0;
  *(_OWORD *)(v5 + 8) = v3;
  result = v12;
  *(__n128 *)(v5 + 24) = v12;
  *(_QWORD *)(v5 + 40) = v13;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

mlir::BuiltinDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::BuiltinDialect * mlir::MLIRContext::getOrLoadDialect<mlir::BuiltinDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::BuiltinDialect **a2@<X8>)
{
  mlir::MLIRContext *v3;
  mlir::BuiltinDialect *v4;
  mlir::BuiltinDialect *result;

  v3 = *a1;
  v4 = (mlir::BuiltinDialect *)operator new();
  result = mlir::BuiltinDialect::BuiltinDialect(v4, v3);
  *a2 = result;
  return result;
}

void mlir::DialectResourceBlobManager::insert<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(pthread_rwlock_t **a1@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X2>, const unsigned __int8 *a4@<X3>, __int128 *a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  char v16;
  __int128 *v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v29) = 0;
  v35 = 0;
  if (*((_BYTE *)a5 + 64))
  {
    v29 = *a5;
    v12 = *((_QWORD *)a5 + 6);
    v30 = *((_QWORD *)a5 + 2);
    v33 = v12;
    if (v12 >= 8)
    {
      v13 = (__int128 *)((char *)a5 + 24);
      if ((v12 & 2) != 0 && (v12 & 4) != 0)
      {
        (*(void (**)(__int128 *, __int128 *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(&v31, v13);
      }
      else
      {
        v31 = *v13;
        v32 = *((_QWORD *)a5 + 5);
      }
      *((_QWORD *)a5 + 6) = 0;
    }
    v34 = *((_BYTE *)a5 + 56);
    v35 = 1;
  }
  v14 = mlir::DialectResourceBlobManager::insert(a1, a3, a4, (uint64_t)&v29);
  if (v35 && v33 >= 8)
  {
    v15 = (v33 & 2) != 0 ? &v31 : (__int128 *)v31;
    (*(void (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v33 & 0xFFFFFFFFFFFFFFF8))(v15, v29, *((_QWORD *)&v29 + 1), v30);
    v16 = v33;
    if (v33 >= 8)
    {
      if ((v33 & 4) != 0)
      {
        if ((v33 & 2) != 0)
          v17 = &v31;
        else
          v17 = (__int128 *)v31;
        (*(void (**)(__int128 *))((v33 & 0xFFFFFFFFFFFFFFF8) + 16))(v17);
      }
      if ((v16 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v31, *((void **)&v31 + 1));
    }
  }
  if ((v18 & 1) == 0
  {
    v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
    v28 = 103;
    v20 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
    if (v28 >= v20)
      v21 = v20;
    else
      v21 = v28;
    v22 = &v27[v21];
    v23 = v28 - v21;
    if (v28 - v21 >= 0x12)
      v24 = 18;
    else
      v24 = v28 - v21;
    v25 = v23 - v24;
    if (v25 >= v25 - 1)
      v26 = v25 - 1;
    else
      v26 = v25;
    mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
  }
  v19 = mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id;
  *a6 = v14;
  a6[1] = v19;
  a6[2] = a2;
}

_QWORD *mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(uint64_t a1, uint64_t *a2)
{
  _QWORD *Storage;
  unsigned __int8 v4;
  _QWORD *v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;

  Storage = mlir::detail::DistinctAttributeUniquer::allocateStorage(a1, *a2);
  v5 = &unk_25451B000;
  if ((v4 & 1) == 0)
  {
    v5 = (_QWORD *)&unk_25451B000;
    if (v7)
    {
      v15 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v16 = 68;
      v8 = llvm::StringRef::find((uint64_t *)&v15, "DesiredTypeName = ", 0x12uLL, 0);
      if (v16 >= v8)
        v9 = v8;
      else
        v9 = v16;
      v10 = &v15[v9];
      v11 = v16 - v9;
      if (v16 - v9 >= 0x12)
        v12 = 18;
      else
        v12 = v16 - v9;
      v13 = v11 - v12;
      if (v13 >= v13 - 1)
        v14 = v13 - 1;
      else
        v14 = v13;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      v5 = (_QWORD *)&unk_25451B000;
    }
  }
  *Storage = mlir::AbstractAttribute::lookup(v5[85], a1);
  return Storage;
}

const char *mlir::BuiltinDialect::initialize(mlir::BuiltinDialect *this)
{
  _QWORD *v2;
  const char *v3;
  mlir::ResourceBlobManagerDialectInterface *v4;
  mlir::ResourceBlobManagerDialectInterface *v5;
  const char *v6;
  char *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  mlir::BuiltinDialect *v11;
  const char *v12;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const char *v24;
  unint64_t v25;

  mlir::BuiltinDialect::registerTypes(this);
  mlir::BuiltinDialect::registerAttributes(this);
  mlir::BuiltinDialect::registerLocationAttributes(this);
  v2 = (_QWORD *)operator new();
  v24 = (const char *)mlir::RegisteredOperationName::Model<mlir::ModuleOp>::Model(v2, (uint64_t)this);
  mlir::RegisteredOperationName::insert((uint64_t *)&v24, (uint64_t)&mlir::ModuleOp::getAttributeNames(void)::attrNames, 2);
  v3 = v24;
  v24 = 0;
  if (v3)
    (*(void (**)(const char *))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::UnrealizedConversionCastOp>((uint64_t)this);
  v4 = (mlir::ResourceBlobManagerDialectInterface *)operator new();
  v5 = mlir::ResourceBlobManagerDialectInterface::ResourceBlobManagerDialectInterface(v4, this);
  *(_QWORD *)v5 = &unk_24C04FD28;
  v24 = (const char *)v5;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v24);
  v6 = v24;
  v24 = 0;
  if (v6)
    (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
  v7 = (char *)operator new();
  v9 = &unk_25451A000;
  if ((v8 & 1) == 0)
  {
    v23 = v7;
    v9 = (_QWORD *)&unk_25451A000;
    v15 = v14;
    v7 = v23;
    if (v15)
    {
      v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      v25 = 77;
      v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
      if (v25 >= v16)
        v17 = v16;
      else
        v17 = v25;
      v18 = &v24[v17];
      v19 = v25 - v17;
      if (v25 - v17 >= 0x12)
        v20 = 18;
      else
        v20 = v25 - v17;
      v21 = v19 - v20;
      if (v21 >= v21 - 1)
        v22 = v21 - 1;
      else
        v22 = v21;
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v18[v20], v22);
      v9 = (_QWORD *)&unk_25451A000;
      v7 = v23;
    }
  }
  v10 = v9[382];
  *(_QWORD *)v7 = &off_24C02AE58;
  *((_QWORD *)v7 + 1) = this;
  *((_QWORD *)v7 + 2) = v10;
  *((_QWORD *)v7 + 3) = v4;
  v24 = v7;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v24);
  v12 = v24;
  v24 = 0;
  if (v12)
    (*(void (**)(const char *))(*(_QWORD *)v12 + 8))(v12);
  return mlir::builtin_dialect_detail::addBytecodeInterface(this, v11);
}

mlir::BuiltinDialect *mlir::BuiltinDialect::BuiltinDialect(mlir::BuiltinDialect *this, mlir::MLIRContext *a2)
{
  mlir::BuiltinDialect *v3;

  v3 = (mlir::BuiltinDialect *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"builtin", 7, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id);
  *(_QWORD *)v3 = off_24C034200;
  mlir::BuiltinDialect::initialize(v3);
  return this;
}

void mlir::BuiltinDialect::~BuiltinDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_2072F6198()
{
  JUMPOUT(0x20BD002F8);
}

void mlir::ModuleOp::build(mlir::StringAttr **a1, mlir::OperationState *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t StringAttr;
  uint64_t NamedAttr;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;

  v6 = (uint64_t *)mlir::OperationState::addRegion(a2);
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_QWORD *)(v7 + 32) = v7 + 32;
  *(_QWORD *)(v7 + 40) = v7 + 32;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v6, v7);
  v8 = *v6;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 8) = v8;
  v7 += 8;
  *(_QWORD *)(v8 + 8) = v7;
  *v6 = v7;
  if (*(_BYTE *)(a3 + 16))
  {
    v14 = 261;
    v9 = *(_QWORD *)(a3 + 8);
    v13[0] = *(_QWORD *)a3;
    v13[1] = v9;
    StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v13);
    NamedAttr = mlir::Builder::getNamedAttr(a1, (uint64_t)"sym_name", 8, StringAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, NamedAttr, v12);
  }
}

ZinIrHalH13g *mlir::ModuleOp::create(uint64_t a1, __int128 *a2)
{
  mlir::StringAttr *v4[4];
  uint64_t v5;

  v5 = a1;
  v4[0] = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  memset(&v4[1], 0, 24);
  return mlir::OpBuilder::create<mlir::ModuleOp,std::optional<llvm::StringRef> &>(v4, v5, a2);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::ModuleOp,std::optional<llvm::StringRef> &>(mlir::StringAttr **a1, uint64_t a2, __int128 *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"builtin.module";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  v12 = *a3;
  v13 = *((_QWORD *)a3 + 2);
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v19, (uint64_t)&v12);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v10;
}

uint64_t mlir::ModuleOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 *Value;
  uint64_t v4;
  void **p_s1;
  _BYTE *v6;
  size_t v7;
  _BYTE *v8;
  char *v9;
  const void *v10;
  size_t v11;
  const void *v12;
  void *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  MirInfoChannelAssignment *v17;
  uint64_t v18;
  const void **AttrData;
  const char *v20;
  _QWORD *v21;
  MirInfoChannelAssignment *v22;
  const char *v23;
  _QWORD *v24;
  const void **v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  const void ***v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  const void ***v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  const void ***v60;
  uint64_t v61;
  __int128 v62;
  const void **v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  const void ***v69;
  uint64_t v70;
  __int128 v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  BOOL v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  int64_t v93;
  const void ***p_NumNeededNEs;
  char *v96;
  char *v97;
  __int128 v98;
  const void **v99;
  const char *v100;
  const void ***v101;
  char *v102;
  char *v103;
  __int128 v104;
  _QWORD *v105;
  _QWORD *v106;
  void *v107;
  _QWORD *v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t v118;
  const void **v119;
  const char *v120;
  uint64_t v121;
  __int16 v122;
  __int128 v123;
  uint64_t v124;
  const void **NumNeededNEs;
  const char *v126;
  uint64_t v127;
  void *__src;
  uint64_t v129;
  _BYTE v130[96];
  __int128 v131;
  uint64_t v132;
  __int128 __p;
  uint64_t v134;
  unsigned __int8 v135;
  void *__s1;
  uint64_t v137;
  void *v138;
  void *__dst;
  uint64_t v140;
  _BYTE v141[96];
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  v1 = *this;
  if (*((_BYTE *)v1 + 47))
  {
    __s1 = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)v1);
    Value = (__int128 *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__s1);
    if (!v2)
    {
LABEL_23:
      v15 = *this;
      if (*((_BYTE *)*this + 47))
      {
        __s1 = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)v15);
        v17 = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__s1);
        v18 = 1;
        if (!v16)
          return v18;
      }
      else
      {
        v17 = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)(v15 + 7));
        v18 = 1;
        if (!v16)
          return v18;
      }
      AttrData = 0;
      v20 = 0;
      v21 = 0;
      v22 = (MirInfoChannelAssignment *)((char *)v17 + 16 * v16);
      while (1)
      {
        v24 = (_QWORD *)*((_QWORD *)v17 + 1);
        if (!mlir::detail::InterfaceMap::lookup<mlir::DataLayoutSpecInterface>(*v24 + 8))
          goto LABEL_29;
        mlir::detail::InterfaceMap::lookup<mlir::DataLayoutSpecInterface>(*v24 + 8);
        if (v21)
          break;
LABEL_28:
        __s1 = (void *)MirInfoChannelAssignment::GetNumNeededNEs(v17);
        AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__s1);
        v20 = v23;
        v21 = v24;
LABEL_29:
        v17 = (MirInfoChannelAssignment *)((char *)v17 + 16);
        if (v17 == v22)
          return 1;
      }
      v122 = 257;
      mlir::OpState::emitOpError(this, &v119, (uint64_t)&NumNeededNEs);
      v25 = NumNeededNEs;
      if (NumNeededNEs)
      {
        LODWORD(v123) = 3;
        *((_QWORD *)&v123 + 1) = "expects at most one data layout attribute";
        v124 = 41;
        v26 = (char *)__src;
        if (v129 >= HIDWORD(v129))
        {
          v88 = v129 + 1;
          if (__src <= &v123 && (char *)__src + 24 * v129 > (char *)&v123)
          {
            v93 = (char *)&v123 - (_BYTE *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v130, v88, 24);
            v26 = (char *)__src;
            v27 = (char *)__src + v93;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v130, v88, 24);
            v27 = (char *)&v123;
            v26 = (char *)__src;
          }
        }
        else
        {
          v27 = (char *)&v123;
        }
        v28 = &v26[24 * v129];
        v29 = *(_OWORD *)v27;
        *((_QWORD *)v28 + 2) = *((_QWORD *)v27 + 2);
        *(_OWORD *)v28 = v29;
        LODWORD(v129) = v129 + 1;
        v25 = NumNeededNEs;
      }
      __s1 = v25;
      LOBYTE(v137) = 0;
      v146 = 0;
      if (!v135)
      {
LABEL_52:
        mlir::InFlightDiagnostic::abandon(&NumNeededNEs);
        if (NumNeededNEs)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&NumNeededNEs);
        if (v135)
        {
          v34 = (_QWORD *)__p;
          if ((_QWORD)__p)
          {
            v35 = (_QWORD *)*((_QWORD *)&__p + 1);
            v36 = (void *)__p;
            if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
            {
              do
                v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
              while (v35 != v34);
              v36 = (void *)__p;
            }
            *((_QWORD *)&__p + 1) = v34;
            operator delete(v36);
          }
          v37 = (_QWORD *)v131;
          if ((_QWORD)v131)
          {
            v38 = (_QWORD *)*((_QWORD *)&v131 + 1);
            v39 = (void *)v131;
            if (*((_QWORD *)&v131 + 1) != (_QWORD)v131)
            {
              do
              {
                v41 = *--v38;
                v40 = v41;
                *v38 = 0;
                if (v41)
                  MEMORY[0x20BD002D4](v40, 0x1000C8077774924);
              }
              while (v38 != v37);
              v39 = (void *)v131;
            }
            *((_QWORD *)&v131 + 1) = v37;
            operator delete(v39);
          }
          if (__src != v130)
            free(__src);
        }
        v42 = mlir::Diagnostic::attachNote(&v137, 0, 0);
        v43 = v42 + 16;
        v44 = *(_QWORD *)(v42 + 16);
        LODWORD(NumNeededNEs) = 3;
        v126 = "'";
        v127 = 1;
        v45 = *(unsigned int *)(v42 + 24);
        if (v45 >= *(_DWORD *)(v42 + 28))
        {
          v80 = v45 + 1;
          v81 = v44 + 24 * v45 > (unint64_t)&NumNeededNEs;
          if (v44 <= (unint64_t)&NumNeededNEs && v81)
          {
            v89 = (char *)&NumNeededNEs - v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v43, (void *)(v42 + 32), v80, 24);
            v44 = *(_QWORD *)(v42 + 16);
            v46 = (const void ***)&v89[v44];
LABEL_72:
            v47 = v44 + 24 * *(unsigned int *)(v42 + 24);
            v48 = *(_OWORD *)v46;
            *(_QWORD *)(v47 + 16) = v46[2];
            *(_OWORD *)v47 = v48;
            ++*(_DWORD *)(v42 + 24);
            LOWORD(v129) = 261;
            NumNeededNEs = AttrData;
            v126 = v20;
            v49 = mlir::Diagnostic::operator<<(v42, &NumNeededNEs);
            v50 = v49 + 16;
            v51 = *(_QWORD *)(v49 + 16);
            LODWORD(v119) = 3;
            v120 = "' is a data layout attribute";
            v121 = 28;
            v52 = *(unsigned int *)(v49 + 24);
            if (v52 >= *(_DWORD *)(v49 + 28))
            {
              v82 = v52 + 1;
              v83 = v51 + 24 * v52 > (unint64_t)&v119;
              if (v51 <= (unint64_t)&v119 && v83)
              {
                v90 = (char *)&v119 - v51;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v50, (void *)(v49 + 32), v82, 24);
                v51 = *(_QWORD *)(v49 + 16);
                v53 = (const void ***)&v90[v51];
LABEL_74:
                v54 = v51 + 24 * *(unsigned int *)(v49 + 24);
                v55 = *(_OWORD *)v53;
                *(_QWORD *)(v54 + 16) = v53[2];
                *(_OWORD *)v54 = v55;
                ++*(_DWORD *)(v49 + 24);
                v56 = mlir::Diagnostic::attachNote(&v137, 0, 0);
                v57 = v56 + 16;
                v58 = *(_QWORD *)(v56 + 16);
                LODWORD(NumNeededNEs) = 3;
                v126 = "'";
                v127 = 1;
                v59 = *(unsigned int *)(v56 + 24);
                if (v59 >= *(_DWORD *)(v56 + 28))
                {
                  v84 = v59 + 1;
                  v85 = v58 + 24 * v59 > (unint64_t)&NumNeededNEs;
                  if (v58 <= (unint64_t)&NumNeededNEs && v85)
                  {
                    v91 = (char *)&NumNeededNEs - v58;
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v57, (void *)(v56 + 32), v84, 24);
                    v58 = *(_QWORD *)(v56 + 16);
                    v60 = (const void ***)&v91[v58];
LABEL_76:
                    v61 = v58 + 24 * *(unsigned int *)(v56 + 24);
                    v62 = *(_OWORD *)v60;
                    *(_QWORD *)(v61 + 16) = v60[2];
                    *(_OWORD *)v61 = v62;
                    ++*(_DWORD *)(v56 + 24);
                    *(_QWORD *)&v123 = MirInfoChannelAssignment::GetNumNeededNEs(v17);
                    v63 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v123);
                    LOWORD(v129) = 261;
                    NumNeededNEs = v63;
                    v126 = v64;
                    v65 = mlir::Diagnostic::operator<<(v56, &NumNeededNEs);
                    v66 = v65 + 16;
                    v67 = *(_QWORD *)(v65 + 16);
                    LODWORD(v119) = 3;
                    v120 = "' is a data layout attribute";
                    v121 = 28;
                    v68 = *(unsigned int *)(v65 + 24);
                    if (v68 >= *(_DWORD *)(v65 + 28))
                    {
                      v86 = v68 + 1;
                      v87 = v67 + 24 * v68 > (unint64_t)&v119;
                      if (v67 <= (unint64_t)&v119 && v87)
                      {
                        v92 = (char *)&v119 - v67;
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 32), v86, 24);
                        v67 = *(_QWORD *)(v65 + 16);
                        v69 = (const void ***)&v92[v67];
                        goto LABEL_78;
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 32), v86, 24);
                      v67 = *(_QWORD *)(v65 + 16);
                    }
                    v69 = &v119;
LABEL_78:
                    v70 = v67 + 24 * *(unsigned int *)(v65 + 24);
                    v71 = *(_OWORD *)v69;
                    *(_QWORD *)(v70 + 16) = v69[2];
                    *(_OWORD *)v70 = v71;
                    ++*(_DWORD *)(v65 + 24);
                    if (__s1)
                      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s1);
                    if (v146)
                    {
                      v72 = (_QWORD *)v144;
                      if ((_QWORD)v144)
                      {
                        v73 = (_QWORD *)*((_QWORD *)&v144 + 1);
                        v74 = (void *)v144;
                        if (*((_QWORD *)&v144 + 1) != (_QWORD)v144)
                        {
                          do
                            v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
                          while (v73 != v72);
                          v74 = (void *)v144;
                        }
                        *((_QWORD *)&v144 + 1) = v72;
                        operator delete(v74);
                      }
                      v75 = (_QWORD *)v142;
                      if ((_QWORD)v142)
                      {
                        v76 = (_QWORD *)*((_QWORD *)&v142 + 1);
                        v77 = (void *)v142;
                        if (*((_QWORD *)&v142 + 1) != (_QWORD)v142)
                        {
                          do
                          {
                            v79 = *--v76;
                            v78 = v79;
                            *v76 = 0;
                            if (v79)
                              MEMORY[0x20BD002D4](v78, 0x1000C8077774924);
                          }
                          while (v76 != v75);
                          v77 = (void *)v142;
                        }
                        *((_QWORD *)&v142 + 1) = v75;
                        operator delete(v77);
                      }
                      if (__dst != v141)
                        free(__dst);
                    }
                    goto LABEL_28;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v57, (void *)(v56 + 32), v84, 24);
                  v58 = *(_QWORD *)(v56 + 16);
                }
                v60 = &NumNeededNEs;
                goto LABEL_76;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod(v50, (void *)(v49 + 32), v82, 24);
              v51 = *(_QWORD *)(v49 + 16);
            }
            v53 = &v119;
            goto LABEL_74;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(v43, (void *)(v42 + 32), v80, 24);
          v44 = *(_QWORD *)(v42 + 16);
        }
        v46 = &NumNeededNEs;
        goto LABEL_72;
      }
      v137 = (uint64_t)v126;
      LODWORD(v138) = v127;
      __dst = v141;
      v140 = 0x400000000;
      v30 = v129;
      if (!(_DWORD)v129)
      {
        v31 = 1;
        goto LABEL_48;
      }
      if (__src != v130)
      {
        __dst = __src;
        v140 = v129;
        __src = v130;
        HIDWORD(v129) = 0;
        v31 = 1;
LABEL_47:
        LODWORD(v129) = 0;
LABEL_48:
        v142 = v131;
        v33 = v132;
        v132 = 0;
        v131 = 0uLL;
        v144 = __p;
        v143 = v33;
        v145 = v134;
        v134 = 0;
        __p = 0uLL;
        v146 = 1;
        if (v31)
        {
          if (__src != v130)
            free(__src);
          v135 = 0;
        }
        goto LABEL_52;
      }
      if (v129 < 5)
      {
        v32 = v129;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v129, 24);
        v32 = v129;
        if (!(_DWORD)v129)
          goto LABEL_46;
      }
      memcpy(__dst, __src, 24 * v32);
LABEL_46:
      LODWORD(v140) = v30;
      v31 = v135;
      goto LABEL_47;
    }
  }
  else
  {
    Value = (__int128 *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)(v1 + 7));
    if (!v2)
      goto LABEL_23;
  }
  v4 = 16 * v2;
  while (1)
  {
    v123 = *Value;
    NumNeededNEs = (const void **)MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v123);
    v6 = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
    if (v7)
    {
      v8 = v6;
      v9 = (char *)memchr(v6, 46, v7);
      if (v9)
      {
        if (v9 - v8 != -1)
          goto LABEL_8;
      }
    }
    __s1 = "sym_name";
    v137 = 8;
    v138 = "sym_visibility";
    __dst = (void *)14;
    v119 = (const void **)MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v123);
    v10 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v119);
    if (v11)
    {
      v12 = v10;
      v13 = (void *)v11;
      if (v137 == v11 && !memcmp(__s1, v10, v11))
      {
LABEL_22:
        p_s1 = &__s1;
        goto LABEL_7;
      }
      if (__dst != v13 || (v14 = memcmp(v138, v12, (size_t)v13), p_s1 = &v138, v14))
        p_s1 = (void **)&v140;
    }
    else
    {
      if (!v137)
        goto LABEL_22;
      p_s1 = __dst ? (void **)&v140 : &v138;
    }
LABEL_7:
    if ((char *)p_s1 - (char *)&__s1 == 32)
      break;
LABEL_8:
    ++Value;
    v4 -= 16;
    if (!v4)
      goto LABEL_23;
  }
  v122 = 257;
  mlir::OpState::emitOpError(this, &v119, (uint64_t)&__s1);
  if (__s1)
  {
    LODWORD(NumNeededNEs) = 3;
    v126 = "can only contain attributes with dialect-prefixed names, found: '";
    v127 = 65;
    p_NumNeededNEs = &NumNeededNEs;
    v96 = (char *)__dst;
    if (v140 >= HIDWORD(v140))
    {
      v113 = v140 + 1;
      if (__dst <= &NumNeededNEs && (char *)__dst + 24 * v140 > (char *)&NumNeededNEs)
      {
        v115 = (char *)&NumNeededNEs - (_BYTE *)__dst;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v113, 24);
        v96 = (char *)__dst;
        p_NumNeededNEs = (const void ***)((char *)__dst + v115);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v113, 24);
        p_NumNeededNEs = &NumNeededNEs;
        v96 = (char *)__dst;
      }
    }
    v97 = &v96[24 * v140];
    v98 = *(_OWORD *)p_NumNeededNEs;
    *((_QWORD *)v97 + 2) = p_NumNeededNEs[2];
    *(_OWORD *)v97 = v98;
    LODWORD(v140) = v140 + 1;
  }
  v118 = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v123);
  v99 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v118);
  if (__s1)
  {
    LOWORD(v129) = 261;
    NumNeededNEs = v99;
    v126 = v100;
    mlir::Diagnostic::operator<<((uint64_t)&v137, &NumNeededNEs);
    if (__s1)
    {
      LODWORD(NumNeededNEs) = 3;
      v126 = "'";
      v127 = 1;
      v101 = &NumNeededNEs;
      v102 = (char *)__dst;
      if (v140 >= HIDWORD(v140))
      {
        v114 = v140 + 1;
        if (__dst <= &NumNeededNEs && (char *)__dst + 24 * v140 > (char *)&NumNeededNEs)
        {
          v116 = (char *)&NumNeededNEs - (_BYTE *)__dst;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v114, 24);
          v102 = (char *)__dst;
          v101 = (const void ***)((char *)__dst + v116);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v114, 24);
          v101 = &NumNeededNEs;
          v102 = (char *)__dst;
        }
      }
      v103 = &v102[24 * v140];
      v104 = *(_OWORD *)v101;
      *((_QWORD *)v103 + 2) = v101[2];
      *(_OWORD *)v103 = v104;
      LODWORD(v140) = v140 + 1;
    }
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__s1);
  if (__s1)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s1);
  if (v146)
  {
    v105 = (_QWORD *)v144;
    if ((_QWORD)v144)
    {
      v106 = (_QWORD *)*((_QWORD *)&v144 + 1);
      v107 = (void *)v144;
      if (*((_QWORD *)&v144 + 1) != (_QWORD)v144)
      {
        do
          v106 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v106 - 1);
        while (v106 != v105);
        v107 = (void *)v144;
      }
      *((_QWORD *)&v144 + 1) = v105;
      operator delete(v107);
    }
    v108 = (_QWORD *)v142;
    if ((_QWORD)v142)
    {
      v109 = (_QWORD *)*((_QWORD *)&v142 + 1);
      v110 = (void *)v142;
      if (*((_QWORD *)&v142 + 1) != (_QWORD)v142)
      {
        do
        {
          v112 = *--v109;
          v111 = v112;
          *v109 = 0;
          if (v112)
            MEMORY[0x20BD002D4](v111, 0x1000C8077774924);
        }
        while (v109 != v108);
        v110 = (void *)v142;
      }
      *((_QWORD *)&v142 + 1) = v108;
      operator delete(v110);
    }
    if (__dst != v141)
      free(__dst);
  }
  return v18;
}

uint64_t mlir::UnrealizedConversionCastOp::fold(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t DefiningOp;
  uint64_t v17;
  uint64_t v18;
  mlir::detail::OpResultImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  const double *v30;
  int8x16_t *v31;
  unint64_t v32;
  const double *v33;
  unsigned __int128 v34;
  unsigned __int128 v35;
  int8x16_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  const double *v41;
  int8x16_t *v42;
  unint64_t v43;
  const double *v44;
  unsigned __int128 v45;
  unsigned __int128 v46;
  int8x16_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];
  uint64_t v53[4];
  uint64_t v54[2];
  uint64_t v55;
  unint64_t v56;
  uint64_t v57[2];

  v4 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(v4 + 68);
    v6 = *(_QWORD *)(v4 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v55 = v6;
  v56 = v5;
  v7 = *(unsigned int *)(v4 + 36);
  v8 = v4 - 16;
  if (!(_DWORD)v7)
    v8 = 0;
  v54[0] = v8;
  v54[1] = v7;
  mlir::OperandRange::getTypes(&v55, v53);
  mlir::OperandRange::getTypes(v54, v52);
  if (mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v53, v52))
  {
    v10 = v55;
    v9 = v56;
    v11 = *(unsigned int *)(a3 + 8);
    if (v56 + v11 > *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v56 + v11, 8);
      LODWORD(v11) = *(_DWORD *)(a3 + 8);
    }
    if (!v9)
      goto LABEL_40;
    v12 = *(_QWORD *)a3;
    v13 = (uint64_t *)(*(_QWORD *)a3 + 8 * v11);
    if (v9 >= 0xB
      && ((v14 = v11, (unint64_t)v13 >= v10 + 32 * v9)
       || v10 + 24 >= v12 + 8 * (v9 + v11)))
    {
      v29 = v9 & 3;
      if ((v9 & 3) == 0)
        v29 = 4;
      v15 = v9 - v29;
      v13 += v15;
      v30 = (const double *)(v10 + 88);
      v31 = (int8x16_t *)(v12 + 8 * v14 + 16);
      v32 = v15;
      do
      {
        v33 = v30 - 8;
        v34 = (unsigned __int128)vld4q_f64(v33);
        v35 = (unsigned __int128)vld4q_f64(v30);
        v36 = (int8x16_t)vdupq_n_s64(4uLL);
        v31[-1] = vorrq_s8((int8x16_t)v34, v36);
        *v31 = vorrq_s8((int8x16_t)v35, v36);
        v30 += 16;
        v31 += 2;
        v32 -= 4;
      }
      while (v32);
    }
    else
    {
      v15 = 0;
    }
    v37 = v9 - v15;
    v38 = (uint64_t *)(v10 + 32 * v15 + 24);
    do
    {
      v39 = *v38;
      v38 += 4;
      *v13++ = v39 | 4;
      --v37;
    }
    while (v37);
    goto LABEL_39;
  }
  if (!v56)
    return 0;
  v51 = *(_QWORD *)(v55 + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v51);
  if (!DefiningOp)
    return 0;
  v17 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id)
    return 0;
  v18 = *(unsigned int *)(DefiningOp + 36);
  if (v56 != v18)
    return 0;
  v19 = (_DWORD)v18 ? (mlir::detail::OpResultImpl *)(DefiningOp - 16) : 0;
  if (!_ZNSt3__112__equal_implB8nn180100IN4llvm6detail27indexed_accessor_range_baseIN4mlir11ResultRangeEPNS4_6detail12OpResultImplENS4_8OpResultES9_S9_E8iteratorESB_NS3_INS4_12OperandRangeEPNS4_9OpOperandENS4_5ValueESF_SF_E8iteratorESH_NS_10__equal_toENS_10__identityESJ_EEbT_T0_T1_T2_RT3_RT4_RT5_(v19, 0, v19, v18, v55, 0, v55, v18))return 0;
  if ((*(_BYTE *)(v17 + 46) & 0x80) != 0)
  {
    v20 = *(_QWORD *)(v17 + 72);
    v21 = *(unsigned int *)(v17 + 68);
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v57[0] = v20;
  v57[1] = v21;
  mlir::OperandRange::getTypes(v57, v53);
  mlir::OperandRange::getTypes(v54, v52);
  if (!mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v53, v52))
    return 0;
  if ((*(_BYTE *)(v17 + 46) & 0x80) != 0)
  {
    v22 = *(_QWORD *)(v17 + 72);
    v9 = *(unsigned int *)(v17 + 68);
    v11 = *(unsigned int *)(a3 + 8);
    v23 = v9 + v11;
    if (v9 + v11 <= *(unsigned int *)(a3 + 12))
      goto LABEL_27;
    goto LABEL_26;
  }
  v22 = 0;
  v9 = 0;
  v11 = *(unsigned int *)(a3 + 8);
  v23 = v11;
  if (v11 > *(unsigned int *)(a3 + 12))
  {
LABEL_26:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
LABEL_27:
  if (v9)
  {
    v24 = *(_QWORD *)a3;
    v25 = (uint64_t *)(*(_QWORD *)a3 + 8 * v11);
    if (v9 >= 0xB
      && ((v26 = v11, (unint64_t)v25 >= v22 + 32 * v9)
       || v22 + 24 >= v24 + 8 * (v9 + v11)))
    {
      v40 = v9 & 3;
      if ((v9 & 3) == 0)
        v40 = 4;
      v27 = v9 - v40;
      v25 += v27;
      v41 = (const double *)(v22 + 88);
      v42 = (int8x16_t *)(v24 + 8 * v26 + 16);
      v43 = v27;
      do
      {
        v44 = v41 - 8;
        v45 = (unsigned __int128)vld4q_f64(v44);
        v46 = (unsigned __int128)vld4q_f64(v41);
        v47 = (int8x16_t)vdupq_n_s64(4uLL);
        v42[-1] = vorrq_s8((int8x16_t)v45, v47);
        *v42 = vorrq_s8((int8x16_t)v46, v47);
        v41 += 16;
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
    }
    else
    {
      v27 = 0;
    }
    v48 = v9 - v27;
    v49 = (uint64_t *)(v22 + 32 * v27 + 24);
    do
    {
      v50 = *v49;
      v49 += 4;
      *v25++ = v50 | 4;
      --v48;
    }
    while (v48);
LABEL_39:
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
LABEL_40:
  *(_DWORD *)(a3 + 8) = v11 + v9;
  return 1;
}

uint64_t mlir::UnrealizedConversionCastOp::verify(uint64_t **this)
{
  uint64_t v1;
  int *v3;
  char *v4;
  char *v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  const void **v17;
  __int16 v18;
  int v19;
  const char *v20;
  uint64_t v21;
  _QWORD v22[3];
  void *v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE v26[96];
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)*this + 9))
    return 1;
  v18 = 257;
  mlir::OpState::emitOpError(this, &v17, (uint64_t)v22);
  if (v22[0])
  {
    v19 = 3;
    v20 = "expected at least one result for cast operation";
    v21 = 47;
    v3 = &v19;
    v4 = (char *)v23;
    if (v24 >= v25)
    {
      v15 = v24 + 1;
      if (v23 <= &v19 && (char *)v23 + 24 * v24 > (char *)&v19)
      {
        v16 = (char *)&v19 - (_BYTE *)v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v15, 24);
        v4 = (char *)v23;
        v3 = (int *)((char *)v23 + v16);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v15, 24);
        v3 = &v19;
        v4 = (char *)v23;
      }
    }
    v5 = &v4[24 * v24];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    ++v24;
  }
  v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  if (v31)
  {
    v7 = __p;
    if (__p)
    {
      v8 = v30;
      v9 = __p;
      if (v30 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v30 = v7;
      operator delete(v9);
    }
    v10 = v27;
    if (v27)
    {
      v11 = v28;
      v12 = v27;
      if (v28 != v27)
      {
        do
        {
          v14 = *--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            MEMORY[0x20BD002D4](v13, 0x1000C8077774924);
        }
        while (v11 != v10);
        v12 = v27;
      }
      v28 = v10;
      operator delete(v12);
    }
    if (v23 != v26)
      free(v23);
  }
  return v1;
}

uint64_t mlir::ModuleOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  int v64;
  const char *v65;
  uint64_t v66;
  _QWORD v67[3];
  void *v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE v71[96];
  void *v72;
  _QWORD *v73;
  void *__p;
  _QWORD *v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v63 = v6;
  if (!v6)
  {
    a3(v67, a4);
    if (v67[0])
    {
      v64 = 3;
      v65 = "expected DictionaryAttr to set properties";
      v66 = 41;
      v26 = &v64;
      v27 = (char *)v68;
      if (v69 >= v70)
      {
        v53 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          v58 = (char *)&v64 - (_BYTE *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          v27 = (char *)v68;
          v26 = (int *)((char *)v68 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          v26 = &v64;
          v27 = (char *)v68;
        }
      }
      v28 = &v27[24 * v69];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v69;
      if (v67[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
    }
    if (!v76)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v75;
      v32 = __p;
      if (v75 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v75 = v30;
      operator delete(v32);
    }
    v21 = v72;
    if (!v72)
      goto LABEL_64;
    v33 = v73;
    v23 = v72;
    if (v73 == v72)
      goto LABEL_63;
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
    goto LABEL_62;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v63, "sym_name", 8uLL);
  if (v8)
  {
    v9 = v8;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v67, a4);
      if (v67[0])
      {
        v64 = 3;
        v66 = 53;
        v10 = &v64;
        v11 = (char *)v68;
        if (v69 >= v70)
        {
          v54 = v69 + 1;
          if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
          {
            v59 = (char *)&v64 - (_BYTE *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            v11 = (char *)v68;
            v10 = (int *)((char *)v68 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            v10 = &v64;
            v11 = (char *)v68;
          }
        }
        v12 = &v11[24 * v69];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v12 = v13;
        ++v69;
        if (v67[0])
        {
          v14 = &v64;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v9);
          v15 = (char *)v68;
          if (v69 >= v70)
          {
            v55 = v69 + 1;
            if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
            {
              v60 = (char *)&v64 - (_BYTE *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
              v15 = (char *)v68;
              v14 = (int *)((char *)v68 + v60);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
              v14 = &v64;
              v15 = (char *)v68;
            }
          }
          v16 = &v15[24 * v69];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v16 = v17;
          ++v69;
          if (v67[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
        }
      }
      if (!v76)
        return 0;
      v18 = __p;
      if (__p)
      {
        v19 = v75;
        v20 = __p;
        if (v75 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v75 = v18;
        operator delete(v20);
      }
      v21 = v72;
      if (!v72)
        goto LABEL_64;
      v22 = v73;
      v23 = v72;
      if (v73 == v72)
        goto LABEL_63;
      do
      {
        v25 = *--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  v36 = mlir::DictionaryAttr::get((uint64_t)&v63, "sym_visibility", 0xEuLL);
  if (!v36)
    return 1;
  v37 = v36;
  if (*(_UNKNOWN **)(*(_QWORD *)v36 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v36;
    return 1;
  }
  a3(v67, a4);
  if (v67[0])
  {
    v64 = 3;
    v66 = 59;
    v38 = &v64;
    v39 = (char *)v68;
    if (v69 >= v70)
    {
      v56 = v69 + 1;
      if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
      {
        v61 = (char *)&v64 - (_BYTE *)v68;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        v39 = (char *)v68;
        v38 = (int *)((char *)v68 + v61);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        v38 = &v64;
        v39 = (char *)v68;
      }
    }
    v40 = &v39[24 * v69];
    v41 = *(_OWORD *)v38;
    *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
    *(_OWORD *)v40 = v41;
    ++v69;
    if (v67[0])
    {
      v42 = &v64;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v37);
      v43 = (char *)v68;
      if (v69 >= v70)
      {
        v57 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          v62 = (char *)&v64 - (_BYTE *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          v43 = (char *)v68;
          v42 = (int *)((char *)v68 + v62);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          v42 = &v64;
          v43 = (char *)v68;
        }
      }
      v44 = &v43[24 * v69];
      v45 = *(_OWORD *)v42;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      ++v69;
      if (v67[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
    }
  }
  if (v76)
  {
    v46 = __p;
    if (__p)
    {
      v47 = v75;
      v48 = __p;
      if (v75 != __p)
      {
        do
          v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        v48 = __p;
      }
      v75 = v46;
      operator delete(v48);
    }
    v21 = v72;
    if (!v72)
      goto LABEL_64;
    v49 = v73;
    v23 = v72;
    if (v73 == v72)
    {
LABEL_63:
      v73 = v21;
      operator delete(v23);
LABEL_64:
      if (v68 != v71)
        free(v68);
      return 0;
    }
    do
    {
      v51 = *--v49;
      v50 = v51;
      *v49 = 0;
      if (v51)
        MEMORY[0x20BD002D4](v50, 0x1000C8077774924);
    }
    while (v49 != v21);
LABEL_62:
    v23 = v72;
    goto LABEL_63;
  }
  return 0;
}

uint64_t mlir::ModuleOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t DictionaryAttr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  mlir::DictionaryAttr *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  v18 = a1;
  v19 = v21;
  v20 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_name", 8, *a2);
    v5 = v4;
    v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      v6 = v20;
    }
    v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *v7 = NamedAttr;
    v7[1] = v5;
    v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      v10 = (mlir::MLIRContext *)v19;
      if (v8)
        goto LABEL_6;
LABEL_13:
      DictionaryAttr = 0;
      if (v10 == (mlir::MLIRContext *)v21)
        return DictionaryAttr;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_5;
  }
  v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_visibility", 14, v9);
  v15 = v14;
  v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    v16 = v20;
  }
  v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  v8 = v20 + 1;
  LODWORD(v20) = v8;
  v10 = (mlir::MLIRContext *)v19;
  if (!v8)
    goto LABEL_13;
LABEL_6:
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  v10 = (mlir::MLIRContext *)v19;
  if (v19 != v21)
LABEL_7:
    free(v10);
  return DictionaryAttr;
}

unint64_t mlir::ModuleOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  _OWORD v31[3];
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3 = &unk_254519000;
  if ((v2 & 1) == 0)
  {
    v24 = a1;
    v27 = *a1;
    v3 = &unk_254519000;
    v15 = v14;
    a1 = v24;
    v1 = v27;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      a1 = v24;
      v1 = v27;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v4 = v3[373];
  v5 = a1[1];
  if ((v6 & 1) == 0)
  {
    v25 = a1[1];
    v28 = v1;
    v22 = v3[373];
    v4 = v22;
    v5 = v25;
    v1 = v28;
    v3 = &unk_254519000;
    if (v17)
    {
      v18 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v18 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v18;
      v4 = v22;
      v5 = v25;
      v1 = v28;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v7 = v3[373];
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  memset(v31, 0, sizeof(v31));
  v30 = 0u;
  if ((v8 & 1) == 0)
  {
    v26 = v5;
    v29 = v1;
    v21 = v7;
    v23 = v4;
    v7 = v21;
    v4 = v23;
    v5 = v26;
    v1 = v29;
    v3 = &unk_254519000;
    if (v19)
    {
      v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v20 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      v7 = v21;
      v4 = v23;
      v5 = v26;
      v1 = v29;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v9 = HIDWORD(v5);
  v10 = (v7 + 8 * v5) ^ HIDWORD(v5);
  v11 = 0x9DDFEA08EB382D69 * (v9 ^ ((0x9DDFEA08EB382D69 * v10) >> 47) ^ (0x9DDFEA08EB382D69 * v10));
  v12 = 0x9DDFEA08EB382D69 * ((v4 + 8 * v1) ^ HIDWORD(v1));
  v34 = v3[373];
  *(_QWORD *)&v30 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (HIDWORD(v1) ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (HIDWORD(v1) ^ (v12 >> 47) ^ v12)) >> 47));
  *((_QWORD *)&v30 + 1) = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v30, 0, (char *)v31, (char *)v32);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::ModuleOpGenericAdaptorBase::Properties]";
        v15 = 102;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::detail::ModuleOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[161];
    return a1[32];
  }
  return result;
}

BOOL mlir::ModuleOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  BOOL v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  _QWORD v32[4];
  __int16 v33;
  const void **v34[4];
  __int16 v35;
  const void **v36;
  __int16 v37;
  int v38;
  const char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE v46[96];
  void *v47;
  _QWORD *v48;
  void *__p;
  _QWORD *v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *v3;
  v5 = v3[1];
  v41 = v2;
  if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v4, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::__mlir_ods_local_attr_constraint_BuiltinOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v41))return 0;
  v41 = *this;
  if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v5, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::__mlir_ods_local_attr_constraint_BuiltinOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v41))return 0;
  v6 = *this;
  v7 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
       + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *((unsigned int *)*this + 10);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 != v7 && *(_QWORD *)(v8 + 8) == v7)
    return 1;
  v36 = (const void **)"region #";
  v37 = 259;
  mlir::Operation::emitOpError(v6, &v36, (uint64_t)&v41);
  if (v41)
  {
    LODWORD(v34[0]) = 5;
    v34[1] = 0;
    v9 = v34;
    v10 = (char *)v43;
    if (v44 >= v45)
    {
      v28 = v44 + 1;
      if (v43 <= v34 && (char *)v43 + 24 * v44 > (char *)v34)
      {
        v30 = (char *)v34 - (_BYTE *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        v10 = (char *)v43;
        v9 = (const void ***)((char *)v43 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        v9 = v34;
        v10 = (char *)v43;
      }
    }
    v11 = &v10[24 * v44];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v44;
    v13 = v41 == 0;
  }
  else
  {
    v13 = 1;
  }
  v33 = 1283;
  v32[0] = " ('";
  v32[2] = "bodyRegion";
  v32[3] = 10;
  v34[0] = (const void **)v32;
  v34[2] = (const void **)"') ";
  v35 = 770;
  if (!v13)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v42, v34);
    if (v41)
    {
      v38 = 3;
      v39 = "failed to verify constraint: region with 1 blocks";
      v40 = 49;
      v14 = &v38;
      v15 = (char *)v43;
      if (v44 >= v45)
      {
        v29 = v44 + 1;
        if (v43 <= &v38 && (char *)v43 + 24 * v44 > (char *)&v38)
        {
          v31 = (char *)&v38 - (_BYTE *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          v15 = (char *)v43;
          v14 = (int *)((char *)v43 + v31);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          v14 = &v38;
          v15 = (char *)v43;
        }
      }
      v16 = &v15[24 * v44];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v44;
    }
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v51)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v50;
      v21 = __p;
      if (v50 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v50 = v19;
      operator delete(v21);
    }
    v22 = v47;
    if (v47)
    {
      v23 = v48;
      v24 = v47;
      if (v48 != v47)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v47;
      }
      v48 = v22;
      operator delete(v24);
    }
    if (v43 != v46)
      free(v43);
  }
  return v18 != 0;
}

BOOL mlir::ModuleOp::verifyInvariants(uint64_t **this)
{
  return mlir::ModuleOp::verifyInvariantsImpl(this) && mlir::ModuleOp::verify(this);
}

uint64_t mlir::ModuleOp::parse(uint64_t a1, _QWORD *a2)
{
  mlir::Region *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  mlir::Region *v17;
  uint64_t v18;

  v18 = 0;
  v4 = (mlir::Region *)operator new();
  *(_QWORD *)v4 = v4;
  *((_QWORD *)v4 + 1) = v4;
  *((_QWORD *)v4 + 2) = 0;
  v17 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 496))(a1, &v18);
  if (v18)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
    *v5 = v18;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 464))(a1, a2 + 14)
    || (v6 = a2[1],
        v15[0] = a1,
        v15[1] = &v16,
        v15[2] = a2,
        (v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v6 + 96))) != 0)
    && !mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v7, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15)|| (v8 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8))) != 0&& !mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v8, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15)|| !(*(unsigned __int8 (**)(uint64_t, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    v11 = 0;
    v17 = 0;
LABEL_14:
    mlir::Region::~Region(v4);
    MEMORY[0x20BD002F8](v12, 0x20C40960023A9, v13);
    return v11;
  }
  if (*(mlir::Region **)v4 == v4)
  {
    v9 = operator new();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)(v9 + 32) = v9 + 32;
    *(_QWORD *)(v9 + 40) = v9 + 32;
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 48) = 0;
    llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v4, v9);
    v10 = *(_QWORD *)v4;
    *(_QWORD *)(v9 + 16) = v4;
    *(_QWORD *)(v9 + 8) = v10;
    v9 += 8;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)v4 = v9;
  }
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v17);
  v4 = v17;
  v17 = 0;
  v11 = 1;
  if (v4)
    goto LABEL_14;
  return v11;
}

