uint64_t ZinLargeKernelSizeUtils::DecomposeLargeKernelConvDesc(uint64_t *a1, __int128 *a2, int64x2_t *a3, int a4, uint64_t a5, int *a6, int64x2_t *a7, uint64_t **a8, uint64_t **a9)
{
  __int32 v15;
  __int32 v16;
  __int32 v17;
  __int32 v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int32x2_t v26;
  int64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  uint64_t v97;
  int *v98;
  int64x2_t *v99;
  float64x2_t v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  void *v106[2];
  char v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[26];
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  void *v141;
  void *v142;
  unint64_t v143;
  __int16 v144;
  void *v145[4];
  int v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  int v159;
  char v160;
  __int16 v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  __int128 v168;
  int64x2_t v169;
  __int128 v170;
  __int128 v171;
  _BYTE v172[28];
  void **v173;
  void (**v174)(ZinIrConvUnitInfo *__hidden);
  __int128 v175;
  __int128 v176;
  void *__p[2];
  char v178;
  _QWORD v179[45];

  v179[43] = *MEMORY[0x24BDAC8D0];
  if (ZinConvLayerUtils::IsDilatedConv(&a3[4].i32[2]))
    ZinAssertImpl("Error: dilated conv with large kernel size is not supported");
  if (a3[6].i8[1])
    ZinAssertImpl("Error: deconv with large kernel size is not supported");
  if (a3[5].i64[1] != 1)
    ZinAssertImpl("Error: grouped conv with large kernel size is not supported");
  if (a3[5].i32[1] != 1)
    ZinAssertImpl("Error: only support zero padding for conv with large kernel");
  v15 = a3[1].i32[2];
  v16 = a3[2].i32[1];
  if (v15 != v16)
    ZinAssertImpl("Error: input and output x strides should be the same for conv with large kernel but are %d and %d", a3[1].i32[2], v16);
  v17 = a3[1].i32[3];
  v18 = a3[2].i32[2];
  if (v17 != v18)
    ZinAssertImpl("Error: input and output y strides should be the same for conv with large kernel but are %d and %d", a3[1].i32[3], v18);
  if ((v15 - 1) >= 2)
    ZinAssertImpl("Error: x strides should be 1 or 2 for conv with large kernel but is %d", a3[1].i32[2]);
  if ((v17 - 1) >= 2)
    ZinAssertImpl("Error: y strides should be 1 or 2 for conv with large kernel but is %d", a3[1].i32[3]);
  v19 = a3->i64[1];
  if (((a3->i64[0] | v19) & 7) != 0)
    ZinAssertImpl("Error: kernel width and height should be multiple of 8 for large kernel but are %zd and %zd", a3->i64[0], v19);
  if (a3[1].i64[0] != 1)
    ZinAssertImpl("Error: kernel with depth = %zd > 1 is not supported for large kernel", a3[1].u64[0]);
  *(_QWORD *)a6 = 0x800000008;
  v20 = a3[2];
  v21 = *a3;
  a7[1] = a3[1];
  a7[2] = v20;
  *a7 = v21;
  v22 = a3[3];
  v23 = a3[4];
  v24 = (float64x2_t)a3[5];
  a7[6].i64[0] = a3[6].i64[0];
  a7[4] = v23;
  a7[5] = (int64x2_t)v24;
  a7[3] = v22;
  a7[1].i64[1] = 0x100000001;
  v25 = (float64x2_t)a3[3];
  a7[4].i64[0] = a3[4].i64[0];
  a7[3] = (int64x2_t)v25;
  v25.f64[0] = (double)a3[3].i32[2];
  v24.f64[0] = (double)a3[3].i32[0];
  v26 = *(int32x2_t *)a6;
  v27.i64[0] = (int)*(_QWORD *)a6;
  v27.i64[1] = (int)HIDWORD(*(_QWORD *)a6);
  v102 = v27.i64[1];
  v28 = vcvtq_f64_s64(v27);
  v24.f64[1] = (double)a3[3].i32[1] + 1.0;
  v25.f64[1] = (double)a3[3].i32[3] + 1.0;
  a7[3] = (int64x2_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v24, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28.f64[0], 0)))), (int32x4_t)vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1)))));
  v99 = a3;
  v24.f64[0] = NAN;
  v24.f64[1] = NAN;
  v100 = v28;
  *a7 = vcvtq_s64_f64(vrndpq_f64(vdivq_f64(vcvtq_f64_s64(vaddq_s64(vaddw_s32(*a3, v26), (int64x2_t)v24)), v28)));
  v147 = 0u;
  v148 = 0u;
  v149 = -1;
  v150 = 0;
  v151 = -1;
  v152 = -1;
  v153 = -1;
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v154 = -1;
  v158 = 0;
  v159 = 1;
  v160 = 0;
  v161 = 0;
  v162 = -1;
  v163 = -1;
  v164 = -1;
  v165 = -1;
  v166 = 0x3F80000000000006;
  v29 = a7[1].i64[0];
  *(_QWORD *)((char *)&v171 + 4) = a7[1].i64[1];
  memset(&v145[1], 0, 24);
  v145[0] = off_24C01CAD8;
  *((_QWORD *)&v168 + 1) = 1;
  *((_QWORD *)&v170 + 1) = 0x100000001;
  LODWORD(v171) = 1;
  v167 = 0;
  LODWORD(v168) = 1;
  HIDWORD(v171) = a7[2].i32[0];
  *(_QWORD *)&v170 = v29;
  v169 = *a7;
  *(_QWORD *)&v172[16] = a7[4].i64[0];
  *(int64x2_t *)v172 = a7[3];
  *(_DWORD *)&v172[24] = a7[5].i32[1];
  v146 = 0;
  DWORD2(v148) = a4;
  BYTE4(v168) = a7[6].i8[0];
  v30 = a1[1];
  v104 = *a1;
  v105 = a1[4];
  v31 = a1[2];
  v32 = a1[3];
  std::string::basic_string[abi:ne180100]<0>(&v127, "conv");
  LODWORD(v173) = 1;
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v174, (const ZinIrKernelUnitInfo *)v145);
  v33 = v170;
  v34 = *(_OWORD *)v172;
  v35[18] = v171;
  v35[19] = v34;
  v176 = *(_OWORD *)&v172[12];
  v36 = v168;
  v35[16] = v169;
  v35[17] = v33;
  v174 = off_24C01CAD8;
  v175 = v36;
  std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, &v127, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
  std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(a8, __p, (__int128 *)__p);
  v37 = vcvtpd_u64_f64((double)v32 / v100.f64[0]);
  v38 = v27.i64[0];
  v39 = (double)v31 / v100.f64[1];
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v179);
  if (v178 < 0)
    operator delete(__p[0]);
  v40 = vcvtpd_u64_f64(v39);
  v41 = v38 * v37;
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
  if (SHIBYTE(v128) < 0)
    operator delete((void *)v127);
  v42 = v102 * v40;
  v43 = a1[2];
  v44 = a1[3];
  if (v41 != v44 || v42 != v43)
  {
    v130 = 0;
    v128 = 0;
    v129 = 0;
    v131 = 0u;
    v132 = 0u;
    v133 = -1;
    v134 = 0u;
    v135 = 0u;
    v136 = 0u;
    memset(v137, 0, sizeof(v137));
    *(_QWORD *)&v127 = &off_24C01BAC0;
    *((_QWORD *)&v127 + 1) = 0;
    v138 = 0u;
    v139 = 0u;
    v140 = 0;
    v142 = 0;
    v141 = 0;
    v144 = 0;
    v143 = 0;
    v45 = v42 - v43;
    DWORD1(v138) = v41 - v44;
    HIDWORD(v138) = v45;
    if ((int)v41 - (int)v44 < 1)
    {
      v49 = 0;
    }
    else
    {
      v46 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v143, 1uLL);
      v48 = &v46[v47];
      *v46 = 0x100000004;
      v49 = v46 + 1;
      v50 = (char *)v142;
      v51 = (char *)v141;
      if (v142 != v141)
      {
        do
        {
          v52 = *((_QWORD *)v50 - 1);
          v50 -= 8;
          *--v46 = v52;
        }
        while (v50 != v51);
        v50 = (char *)v141;
      }
      v141 = v46;
      v142 = v49;
      v143 = (unint64_t)v48;
      if (v50)
        operator delete(v50);
      v142 = v49;
      v45 = HIDWORD(v138);
    }
    if (v45 >= 1)
    {
      if ((unint64_t)v49 >= v143)
      {
        v54 = ((char *)v49 - (_BYTE *)v141) >> 3;
        if ((unint64_t)(v54 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v55 = (uint64_t)(v143 - (_QWORD)v141) >> 2;
        if (v55 <= v54 + 1)
          v55 = v54 + 1;
        if (v143 - (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v143, v56);
        else
          v57 = 0;
        v58 = &v57[8 * v54];
        v59 = &v57[8 * v56];
        *(_QWORD *)v58 = 0x100000003;
        v53 = v58 + 8;
        v60 = (char *)v142;
        v61 = (char *)v141;
        if (v142 != v141)
        {
          do
          {
            v62 = *((_QWORD *)v60 - 1);
            v60 -= 8;
            *((_QWORD *)v58 - 1) = v62;
            v58 -= 8;
          }
          while (v60 != v61);
          v60 = (char *)v141;
        }
        v141 = v58;
        v142 = v53;
        v143 = (unint64_t)v59;
        if (v60)
          operator delete(v60);
      }
      else
      {
        *v49 = 0x100000003;
        v53 = v49 + 1;
      }
      v142 = v53;
    }
    std::string::basic_string[abi:ne180100]<0>(&v118, "pad");
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173, (ZinIrPadUnitInfo *)&v127);
    std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, &v118, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(a8, __p, (__int128 *)__p);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v179);
    if (v178 < 0)
      operator delete(__p[0]);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
    if (SHIBYTE(v119) < 0)
      operator delete((void *)v118);
    std::string::basic_string[abi:ne180100]<0>(__p, "pad");
    v173 = __p;
    v63 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v173);
    *((_QWORD *)v63 + 7) = v104;
    *((_QWORD *)v63 + 8) = v30;
    *((_QWORD *)v63 + 9) = v42;
    *((_QWORD *)v63 + 10) = v41;
    *((_QWORD *)v63 + 11) = v105;
    if (v178 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v127 = &off_24C01BAC0;
    if (v141)
    {
      v142 = v141;
      operator delete(v141);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v127);
  }
  v64 = *a6;
  v65 = a6[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "unshuffle");
  v173 = __p;
  v66 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v173);
  v101 = a8;
  v67 = v41 / v64;
  *((_QWORD *)v66 + 7) = v104;
  *((_QWORD *)v66 + 8) = v30 * (int)v65 * (uint64_t)(int)v64;
  v68 = v42 / v65;
  *((_QWORD *)v66 + 9) = v68;
  *((_QWORD *)v66 + 10) = v67;
  *((_QWORD *)v66 + 11) = v105;
  if (v178 < 0)
    operator delete(__p[0]);
  v96 = a2;
  v69 = *((_QWORD *)a2 + 1);
  v70 = *a6;
  v71 = a6[1];
  v73 = a7[3].i32[2];
  v72 = a7[3].i32[3];
  v74 = a7[3].i32[1];
  v97 = a7[3].i32[0];
  v98 = a6;
  v76 = a7->i64[0];
  v75 = a7->i64[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  v173 = __p;
  v77 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v173);
  v78 = v69 * v70 * v71;
  v79 = v68 + v73 + v72 - v75 + 1;
  v80 = v67 + v97 + v74 - v76 + 1;
  *((_QWORD *)v77 + 7) = v104;
  *((_QWORD *)v77 + 8) = v78;
  *((_QWORD *)v77 + 9) = v79;
  *((_QWORD *)v77 + 10) = v80;
  *((_QWORD *)v77 + 11) = v105;
  if (v178 < 0)
    operator delete(__p[0]);
  v81 = *v98;
  v82 = v98[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "shuffle");
  v173 = __p;
  v83 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v173);
  v84 = v78 / ((int)v82 * (uint64_t)(int)v81);
  v85 = v79 * v82;
  v86 = v80 * v81;
  *((_QWORD *)v83 + 7) = v104;
  *((_QWORD *)v83 + 8) = v84;
  *((_QWORD *)v83 + 9) = v85;
  *((_QWORD *)v83 + 10) = v86;
  *((_QWORD *)v83 + 11) = v105;
  if (v178 < 0)
    operator delete(__p[0]);
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  *(_QWORD *)&v127 = off_24C023650;
  *((_QWORD *)&v127 + 1) = 0;
  v130 = 31;
  v121 = 0;
  v119 = 0;
  v120 = 0;
  v122 = 0u;
  v123 = 0u;
  *(_QWORD *)&v118 = off_24C024450;
  *((_QWORD *)&v118 + 1) = 0;
  v87 = *(_QWORD *)v98;
  DWORD2(v134) = v98[2];
  v133 = -1;
  *(_QWORD *)&v134 = v87;
  v124 = -1;
  v125 = v87;
  v126 = DWORD2(v134);
  std::string::basic_string[abi:ne180100]<0>(&v108, "shuffle");
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173, (ZinIrPixelShuffleUnitInfo *)&v127);
  std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, &v108, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
  std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(v101, __p, (__int128 *)__p);
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v179);
  if (v178 < 0)
    operator delete(__p[0]);
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
  if (SHIBYTE(v109) < 0)
    operator delete((void *)v108);
  std::string::basic_string[abi:ne180100]<0>(&v108, "unshuffle");
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173, (ZinIrPixelUnshuffleUnitInfo *)&v118);
  std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, &v108, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
  std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(v101, __p, (__int128 *)__p);
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v179);
  if (v178 < 0)
    operator delete(__p[0]);
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
  if (SHIBYTE(v109) < 0)
    operator delete((void *)v108);
  v88 = *((_QWORD *)v96 + 2);
  if (v85 > v88)
  {
    v111 = 0;
    v109 = 0;
    v110 = 0;
    v112 = 0u;
    v113 = 0u;
    v114 = -1;
    *(_QWORD *)&v108 = off_24C021970;
    *((_QWORD *)&v108 + 1) = 0;
    v115 = v98[1] * a7[3].i32[2] - v99[3].i32[2];
    v116 = v88;
    v117 = 0x300000001;
    std::string::basic_string[abi:ne180100]<0>(v106, "view_h");
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173, (ZinIrInputViewUnitInfo *)&v108);
    std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, (__int128 *)v106, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(v101, __p, (__int128 *)__p);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v179);
    if (v178 < 0)
      operator delete(__p[0]);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
    if (v107 < 0)
      operator delete(v106[0]);
    v89 = *((_QWORD *)v96 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "view_h");
    v173 = __p;
    v90 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v173);
    *((_QWORD *)v90 + 7) = v104;
    *((_QWORD *)v90 + 8) = v84;
    *((_QWORD *)v90 + 9) = v89;
    *((_QWORD *)v90 + 10) = v86;
    *((_QWORD *)v90 + 11) = v105;
    if (v178 < 0)
      operator delete(__p[0]);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v108);
  }
  v91 = *((_QWORD *)v96 + 3);
  if (v86 > v91)
  {
    v111 = 0;
    v109 = 0;
    v110 = 0;
    v112 = 0u;
    v113 = 0u;
    v114 = -1;
    *(_QWORD *)&v108 = off_24C021970;
    *((_QWORD *)&v108 + 1) = 0;
    v115 = *v98 * a7[3].i32[0] - v99[3].i32[0];
    v116 = v91;
    v117 = 0x400000001;
    std::string::basic_string[abi:ne180100]<0>(v106, "view_w");
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173, (ZinIrInputViewUnitInfo *)&v108);
    std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, (__int128 *)v106, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(v101, __p, (__int128 *)__p);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v179);
    if (v178 < 0)
      operator delete(__p[0]);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v173);
    if (v107 < 0)
      operator delete(v106[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "view_w");
    v173 = __p;
    v92 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v173);
    v93 = *v96;
    v94 = v96[1];
    *((_QWORD *)v92 + 11) = *((_QWORD *)v96 + 4);
    *(_OWORD *)(v92 + 72) = v94;
    *(_OWORD *)(v92 + 56) = v93;
    if (v178 < 0)
      operator delete(__p[0]);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v108);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v118);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v127);
  v145[0] = off_24C01ED88;
  if ((_QWORD)v157)
  {
    *((_QWORD *)&v157 + 1) = v157;
    operator delete((void *)v157);
  }
  if (*((_QWORD *)&v155 + 1))
  {
    *(_QWORD *)&v156 = *((_QWORD *)&v155 + 1);
    operator delete(*((void **)&v155 + 1));
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v145);
  return 1;
}

void sub_20701DE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&a49);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x228]);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::~pair(uint64_t a1)
{
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ZinLargeKernelSizeUtils::CreateLargeKernelDecomposedConvLayer(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t i;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  ZinKernelSparsityCache *KernelSparsityCache;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  ZinIrKernel *v60;
  ZinIrKernel *v61;
  uint64_t v63;
  uint64_t v65;
  int *v67;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int128 v84;
  ZinIrKernel *v85;
  ZinIrKernel *v86;
  std::string v87;
  void *v88[2];
  int64_t v89;
  std::string v90;
  void *__p[2];
  std::string::size_type v92;
  _QWORD v93[6];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v65 = *(_QWORD *)(a2 + 16);
  v72 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(a2 + 136), (uint64_t)&v98);
  v95 = v98;
  v96 = v99;
  v11 = *a4;
  v67 = a4;
  v76 = a4[1];
  v12 = (int)v76 * (uint64_t)(int)v11;
  v13 = *((_QWORD *)&v98 + 1);
  v14 = v98 * v12;
  *(_QWORD *)&v95 = v98 * v12;
  *((_QWORD *)&v95 + 1) = *((_QWORD *)&v98 + 1) * v12;
  v15 = a6[1];
  v71 = a6;
  *((_QWORD *)&v96 + 1) = *a6;
  v97 = v100;
  *(_QWORD *)&v96 = v15;
  v74 = *((_QWORD *)&v98 + 1) * v12;
  v84 = __PAIR128__(*((unint64_t *)&v96 + 1), v15);
  v16 = *((_QWORD *)&v98 + 1) * v12 * v98 * v12 * *((_QWORD *)&v96 + 1) * v15 * v100;
  details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)v93, v16);
  if (v16)
  {
    v17 = 0;
    do
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      v19 = (_QWORD *)(v94 + v17);
      if (!v18)
        v19 = v93;
      *v19 = v14 + 1;
      *(_OWORD *)(v19 + 1) = 0u;
      *(_OWORD *)(v19 + 3) = 0u;
      v17 += 40;
      --v16;
    }
    while (v16);
  }
  v69 = a7;
  v70 = a2;
  if ((int)v76 >= 1)
  {
    v73 = 0;
    v20 = 0;
    v79 = v84 * v76;
    v21 = *((_QWORD *)&v84 + 1) * v11;
    v83 = v14 + 1;
    v63 = v13 * v11 * v12;
    do
    {
      if ((int)v11 >= 1)
      {
        v80 = 0;
        v22 = 0;
        v23 = *((_QWORD *)&v98 + 1);
        v75 = v73;
        do
        {
          if (v23 >= 1)
          {
            v77 = 0;
            v81 = 0;
            v24 = v98;
            do
            {
              if (v24 >= 1)
              {
                v82 = 0;
                v78 = v75;
                do
                {
                  if (v79 >= 1)
                  {
                    for (i = 0; i != v79; ++i)
                    {
                      if (v21 >= 1)
                      {
                        v26 = 0;
                        v27 = i - v20;
                        do
                        {
                          v28 = v26 / v11
                              + (i / v76 + (v78 + v11 * (v77 + i - i / v76 * v76) + v26 - v11 * (v26 / v11)) * v84)
                              * *((_QWORD *)&v84 + 1);
                          if (i < v20
                            || v26 < v22
                            || (uint64_t)v99 <= v27
                            || (uint64_t)(*((_QWORD *)&v99 + 1) + v22) <= v26)
                          {
                            v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            v32 = (uint64_t *)(v94 + 40 * v28);
                            if (!v31)
                              v32 = v93;
                            *v32 = v83;
                            *(_OWORD *)(v32 + 1) = 0u;
                            *(_OWORD *)(v32 + 3) = 0u;
                          }
                          else
                          {
                            v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            v30 = (uint64_t *)(v94 + 40 * v28);
                            if (!v29)
                              v30 = v93;
                            *v30 = v82;
                            v30[1] = v81;
                            v30[2] = v27;
                            v30[3] = v80 + v26;
                            v30[4] = 0;
                          }
                          ++v26;
                        }
                        while (v21 != v26);
                      }
                    }
                    v24 = v98;
                  }
                  v78 += v63 * v76;
                  ++v82;
                }
                while (v24 > v82);
                v23 = *((_QWORD *)&v98 + 1);
              }
              v77 += v76;
              ++v81;
            }
            while (v23 > v81);
          }
          ++v22;
          v75 += v74;
          --v80;
        }
        while (v22 != v11);
      }
      ++v20;
      v73 += v63;
    }
    while (v20 != v76);
  }
  v33 = *(_QWORD *)(v70 + 136);
  if (*(char *)(v72 + 47) >= 0)
    v34 = *(unsigned __int8 *)(v72 + 47);
  else
    v34 = *(_QWORD *)(v72 + 32);
  v35 = &v90;
  std::string::basic_string[abi:ne180100]((uint64_t)&v90, v34 + 1);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = (std::string *)v90.__r_.__value_.__r.__words[0];
  if (v34)
  {
    if (*(char *)(v72 + 47) >= 0)
      v36 = (const void *)(v72 + 24);
    else
      v36 = *(const void **)(v72 + 24);
    memmove(v35, v36, v34);
  }
  *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v87, "lks_kernel");
  v37 = std::string::append(&v87, "_xfm", 4uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v89 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)v88 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v89 >= 0)
    v39 = v88;
  else
    v39 = (void **)v88[0];
  if (v89 >= 0)
    v40 = HIBYTE(v89);
  else
    v40 = (std::string::size_type)v88[1];
  v41 = std::string::append(&v90, (const std::string::value_type *)v39, v40);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v92 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v44 = *((_DWORD *)v71 + 6);
  v43 = *((_DWORD *)v71 + 7);
  v45 = *((_DWORD *)v71 + 8);
  v46 = *((_DWORD *)v71 + 9);
  v48 = *((_DWORD *)v71 + 10);
  v47 = *((int *)v71 + 11);
  KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v70 + 16));
  ZinIrKernel::ShuffleKernel(v33, (__int128 *)__p, (uint64_t)v93, v44, v43, v45, v46, v48, (uint64_t *)&v86, v47, (uint64_t)&v95, v69, KernelSparsityCache, (__int128 *)v71 + 3, *((_BYTE *)v71 + 97), *((_DWORD *)v71 + 21));
  if (SHIBYTE(v92) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v93);
  v50 = (uint64_t)v86;
  if (v86)
  {
    v51 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
    v53 = *(_QWORD *)(v50 + 264);
    v52 = *(_QWORD *)(v50 + 272);
    v93[0] = v51[6];
    v54 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0, 0);
    v55 = v51[9];
    v56 = v51[8] - v53 + *(int *)(v50 + 360) + (uint64_t)*(int *)(v50 + 364) + 1;
    v93[1] = *(_QWORD *)(v54 + 56) * *v67 * v67[1];
    v93[2] = v56;
    v57 = v51[10];
    v93[3] = v55 - v52 + *(int *)(v50 + 352) + (uint64_t)*(int *)(v50 + 356) + 1;
    v93[4] = v57;
    v58 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0, 0) + 88);
    v59 = *a5;
    v85 = v86;
    v86 = 0;
    v50 = ZinBuilder::CreateConv(v65, a1, (uint64_t)v93, v59, v58, &v85);
    v60 = v85;
    v85 = 0;
    if (v60)
    {
      ZinIrKernel::~ZinIrKernel(v60);
      MEMORY[0x20BD002F8]();
    }
    v61 = v86;
    v86 = 0;
    if (v61)
    {
      ZinIrKernel::~ZinIrKernel(v61);
      MEMORY[0x20BD002F8]();
    }
  }
  return v50;
}

void sub_20701E680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,ZinIrKernel *a40,ZinIrKernel *a41)
{
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a41, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>(uint64_t a1, __int128 *a2, ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *a3)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)(a1 + 24), a3);
  return a1;
}

void sub_20701E770(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(uint64_t **a1, void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__construct_node<std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__construct_node<std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x190uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20701E86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)(a1 + 24), (const ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)a2 + 24));
  return a1;
}

void sub_20701E8C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

__int128 *ZinIrHalT1::GetParams(ZinIrHalT1 *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  _OWORD v11[3];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[5];
  int v24;
  int64x2_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int64x2_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[3];
  int v40;
  uint64_t v41;
  _QWORD v42[2];
  _OWORD v43[10];
  uint64_t v44;
  _OWORD v45[7];
  int v46;
  _OWORD v47[3];
  __int128 v48;
  int64x2_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalT1::GetParams(void)const::ZinIrHalT1Parameters = xmmword_207AB2BB0;
    dword_254528710 = 8;
    unk_254528718 = xmmword_207A7D320;
    unk_254528728 = xmmword_207A7D330;
    unk_254528738 = xmmword_207A7D340;
    unk_254528748 = xmmword_207A7D350;
    unk_254528758 = xmmword_207A7D360;
    unk_254528768 = xmmword_207A7D340;
    unk_254528778 = xmmword_207A7F390;
    unk_254528788 = xmmword_207AB2BC0;
    unk_254528798 = xmmword_207A7D390;
    unk_2545287A8 = xmmword_207A7D3A0;
    unk_2545287B8 = vdupq_n_s64(4uLL);
    qword_2545287C8 = 4;
    xmmword_2545287D0 = xmmword_207AB2BD0;
    unk_2545287E0 = unk_207AB2BE0;
    xmmword_2545287F0 = xmmword_207AB2BD0;
    unk_254528800 = unk_207AB2BE0;
    qword_254528820 = 4;
    xmmword_254528810 = xmmword_207AB2BF0;
    xmmword_254528828 = xmmword_207A7D3B0;
    xmmword_254528838 = xmmword_207A7D3C0;
    xmmword_254528848 = xmmword_207A7D3C0;
    xmmword_254528858 = xmmword_207A7D3C0;
    xmmword_254528868 = xmmword_207A7D3D0;
    xmmword_254528878 = xmmword_207A7D3E0;
    xmmword_254528888 = xmmword_207A7D3F0;
    xmmword_254528898 = xmmword_207A7D400;
    xmmword_2545288A8 = xmmword_207A7D410;
    xmmword_2545288B8 = xmmword_207A7D420;
    xmmword_2545288C8 = xmmword_207A7D430;
    xmmword_2545288D8 = xmmword_207A7D440;
    xmmword_2545288E8 = xmmword_207A7D450;
    xmmword_2545288F8 = xmmword_207A7D460;
    xmmword_254528908 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_254528918 = xmmword_207A80420;
    xmmword_254528928 = xmmword_207A7D480;
    xmmword_254528938 = xmmword_207A7D490;
    xmmword_254528948 = xmmword_207A7D4A0;
    qword_254528958 = 64;
    xmmword_254528960 = 0u;
    unk_254528970 = xmmword_207AB06D0;
    word_254528980 = 256;
    xmmword_254528988 = xmmword_207A7D4C0;
    xmmword_254528998 = xmmword_207A7D4D0;
    xmmword_2545289A8 = xmmword_207A7D4E0;
    qword_2545289B8 = 0x10000;
    byte_2545289C0 = 32;
    xmmword_2545289C8 = xmmword_207A7D4F0;
    dword_2545289D8 = 520097776;
    qword_2545289DC = 0xFFFFFFEB0000000BLL;
    xmmword_2545289E8 = xmmword_207A7D500;
    xmmword_2545289F8 = xmmword_207A7D510;
    xmmword_254528A08 = xmmword_207A7D520;
    v49 = vdupq_n_s64(8uLL);
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_254528A18, (uint64_t)&v49, 1uLL);
    xmmword_254528A30 = xmmword_207A7D530;
    unk_254528A40 = xmmword_207A7D540;
    xmmword_254528A50 = (__int128)vdupq_n_s64(0x20uLL);
    unk_254528A60 = xmmword_207A7D370;
    xmmword_254528A70 = (__int128)vdupq_n_s64(8uLL);
    unk_254528A80 = xmmword_207A7D550;
    xmmword_254528A90 = xmmword_207A7D560;
    unk_254528AA0 = vdupq_n_s64(0x100uLL);
    xmmword_254528AB0 = (__int128)vdupq_n_s64(0x80uLL);
    unk_254528AC0 = xmmword_207A7D570;
    xmmword_254528AD0 = xmmword_207A7D580;
    unk_254528AE0 = xmmword_207A7D590;
    xmmword_254528AF0 = xmmword_207A7D5A0;
    unk_254528B00 = xmmword_207A7D5B0;
    xmmword_254528B10 = (__int128)vdupq_n_s64(2uLL);
    unk_254528B20 = xmmword_207A7D3C0;
    xmmword_254528B30 = (__int128)vdupq_n_s64(0x4000uLL);
    unk_254528B40 = xmmword_207A7D5C0;
    word_254528B50 = 257;
    byte_254528B56 = 0;
    dword_254528B52 = 0;
    dword_254528B57 = 16842753;
    byte_254528B5B = 1;
    xmmword_254528B5C = 0u;
    dword_254528B6C = 0;
    byte_254528B70 = 1;
    byte_254528B75 = 0;
    dword_254528B71 = 0;
    qword_254528B76 = 0x101000000010101;
    word_254528B7E = 0;
    xmmword_254528B80 = xmmword_207A7D5D0;
    unk_254528B90 = xmmword_207A7D5E0;
    qword_254528BA0 = 40;
    xmmword_254528BA8 = 0u;
    dword_254528BB8 = 16843009;
    *(int *)((char *)&dword_254528BB8 + 3) = 16843009;
    word_254528BBF = 0;
    qword_254528BC8 = 0;
    byte_254528BD0 = 0;
    dword_254528BD1 = 16843009;
    word_254528BD9 = 0;
    dword_254528BD5 = 0;
    dword_254528BDB = 16842753;
    qword_254528BDF = 0;
    byte_254528BE7 = 0;
    dword_254528BE8 = 65793;
    word_254528BEC = 0;
    byte_254528BEE = 1;
    dword_254528BEF = 0;
    word_254528BF3 = 257;
    dword_254528BF5 = 0;
    byte_254528BF9 = 0;
    qword_254528C08 = -1;
    unk_254528C10 = -1;
    qword_254528C00 = 128;
    word_254528C18 = 0;
    dword_254528C1C = 0;
    word_254528C20 = 1;
    byte_254528C22 = 1;
    *(uint64_t *)((char *)&qword_254528C23 + 6) = 0;
    qword_254528C23 = 0;
    dword_254528C31 = 1542;
    byte_254528C35 = 1;
    dword_254528C36 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_254528C40, "Simple");
    qword_254528C58 = 0x1000000;
    unk_254528C70 = xmmword_207A7D5F0;
    dword_254528C64 = 0;
    unk_254528C68 = 0;
    dword_254528C60 = 1071225242;
    unk_254528C80 = vdupq_n_s64(0x40uLL);
    unk_254528C90 = xmmword_207A7D530;
    qword_254528CA0 = 8;
    byte_254528CA8 = 0;
    unk_254528CAC = 1048576000;
    byte_254528CB4 = 0;
    v48 = xmmword_207A7D610;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_254528CB8, &v48, 4uLL);
    v47[0] = xmmword_207AB2C08;
    v47[1] = unk_207AB2C18;
    v47[2] = xmmword_207AB2C28;
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_254528CD0, v47, 0xCuLL);
    v46 = 25;
    v45[4] = xmmword_207AB2C78;
    v45[5] = unk_207AB2C88;
    v45[6] = xmmword_207AB2C98;
    v45[0] = xmmword_207AB2C38;
    v45[1] = unk_207AB2C48;
    v45[2] = xmmword_207AB2C58;
    v45[3] = unk_207AB2C68;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_254528CE8, v45, 0x1DuLL);
    v44 = 0x2A00000029;
    v43[6] = xmmword_207AB2D0C;
    v43[7] = unk_207AB2D1C;
    v43[8] = xmmword_207AB2D2C;
    v43[9] = unk_207AB2D3C;
    v43[2] = xmmword_207AB2CCC;
    v43[3] = unk_207AB2CDC;
    v43[4] = xmmword_207AB2CEC;
    v43[5] = unk_207AB2CFC;
    v43[0] = xmmword_207AB2CAC;
    v43[1] = unk_207AB2CBC;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_254528D00, v43, 0x2AuLL);
    v32 = 2;
    v33 = xmmword_207A7D620;
    v34 = 0x1100000002;
    v35 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v9, &v32, 1uLL);
    v36 = 641877825;
    memset(v37, 0, sizeof(v37));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v37, v9, (uint64_t)v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - (_BYTE *)v9) >> 3));
    v28 = 10;
    v29 = vdupq_n_s64(1uLL);
    v30 = 0x800000001;
    v31 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v7, &v28, 1uLL);
    v38 = 642527542;
    memset(v39, 0, sizeof(v39));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v39, v7, (uint64_t)v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)v7) >> 3));
    v24 = 3;
    v25 = vdupq_n_s64(1uLL);
    v26 = 0x700000002;
    v27 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v24, 1uLL);
    v40 = 642527336;
    v42[0] = 0;
    v42[1] = 0;
    v41 = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v41, __p, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_254528D18, &v36, 3);
    word_254528D30 = 0;
    byte_254528D32 = 1;
    *(_DWORD *)algn_254528D33 = 0;
    qword_254528D38 = 0;
    dword_254528D40 = 0;
    unk_254528D48 = 0u;
    unk_254528D58 = 0u;
    word_254528D68 = 257;
    qword_254528D90 = 8;
    xmmword_254528D70 = xmmword_207AB2D58;
    unk_254528D80 = unk_207AB2D68;
    unk_254528D98 = xmmword_207A7D630;
    v23[2] = xmmword_207AB2DA0;
    v23[3] = unk_207AB2DB0;
    v23[4] = xmmword_207AB2DC0;
    v23[0] = xmmword_207AB2D80;
    v23[1] = unk_207AB2D90;
    std::vector<double>::vector[abi:ne180100](&qword_254528DA8, v23, 0xAuLL);
    v13 = xmmword_207AB2DD0;
    *(_QWORD *)&v14 = 0x41CAD27480000000;
    std::vector<double>::vector[abi:ne180100](&qword_254528DC0, &v13, 3uLL);
    v13 = xmmword_207AB2DE8;
    *(_QWORD *)&v14 = 0x41DFC8BFD0000000;
    std::vector<double>::vector[abi:ne180100](&qword_254528DD8, &v13, 3uLL);
    v19 = xmmword_207AB2E60;
    v20 = unk_207AB2E70;
    v21 = xmmword_207AB2E80;
    v22 = unk_207AB2E90;
    v15 = xmmword_207AB2E20;
    v16 = unk_207AB2E30;
    v17 = xmmword_207AB2E40;
    v18 = unk_207AB2E50;
    v13 = xmmword_207AB2E00;
    v14 = unk_207AB2E10;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_254528DF0, (double *)&v13, 10);
    xmmword_254528E08 = xmmword_207A7D640;
    v11[0] = xmmword_207AB2EA0;
    v11[1] = unk_207AB2EB0;
    v11[2] = xmmword_207AB2EC0;
    v12 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_254528E18, v11, 0xDuLL);
    v3 = 0;
    xmmword_254528E30 = xmmword_207A7D4F0;
    unk_254528E40 = xmmword_207A7D650;
    word_254528F49 = 257;
    qword_254528E50 = 64;
    unk_254528E58 = 0x101010101010101;
    unk_254528E5D = 0x101010101010101;
    dword_254528E68 = 257;
    xmmword_254528E70 = xmmword_207AB2ED8;
    unk_254528E80 = unk_207AB2EE8;
    xmmword_254528E90 = xmmword_207AB2EF8;
    unk_254528EA0 = unk_207AB2F08;
    byte_254528E65 = 0;
    xmmword_254528ED0 = xmmword_207AB2F38;
    unk_254528EE0 = unk_207AB2F48;
    xmmword_254528EB0 = xmmword_207AB2F18;
    unk_254528EC0 = unk_207AB2F28;
    word_254528EF0 = 0;
    byte_254528EF2 = 0;
    byte_254528EF8 = 0;
    byte_254528F00 = 0;
    dword_254528F10 = 0;
    word_254528F14 = 0;
    qword_254528F30 = 0;
    byte_254528F38 = 0;
    qword_254528F40 = 0;
    byte_254528F48 = 0;
    dword_254528F08 = 0;
    qword_254528F18 = 0;
    unk_254528F20 = 0;
    byte_254528F28 = 0;
    do
    {
      v4 = (void *)v42[v3 - 1];
      if (v4)
      {
        v42[v3] = v4;
        operator delete(v4);
      }
      v3 -= 4;
    }
    while (v3 != -12);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalT1::GetParams(void)const::ZinIrHalT1Parameters, &dword_2069AB000);
  }
  return &ZinIrHalT1::GetParams(void)const::ZinIrHalT1Parameters;
}

void sub_20701F3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v23, *(_QWORD **)(v23 + 8));
  if (qword_254528DD8)
  {
    qword_254528DE0 = qword_254528DD8;
    operator delete((void *)qword_254528DD8);
  }
  if (qword_254528DC0)
  {
    qword_254528DC8 = qword_254528DC0;
    operator delete((void *)qword_254528DC0);
  }
  if (qword_254528DA8)
  {
    qword_254528DB0 = qword_254528DA8;
    operator delete((void *)qword_254528DA8);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v22, *(_QWORD **)(v22 + 8));
  v25 = 0;
  while (1)
  {
    v26 = *(void **)((char *)&STACK[0x230] + v25 + 72);
    if (v26)
    {
      *(unint64_t *)((char *)&STACK[0x230] + v25 + 80) = (unint64_t)v26;
      operator delete(v26);
    }
    v25 -= 32;
    if (v25 == -96)
    {
      if (__p)
        operator delete(__p);
      if (a19)
        operator delete(a19);
      if (a22)
        operator delete(a22);
      if (qword_254528D00)
      {
        qword_254528D08 = qword_254528D00;
        operator delete((void *)qword_254528D00);
      }
      if (qword_254528CE8)
      {
        qword_254528CF0 = qword_254528CE8;
        operator delete((void *)qword_254528CE8);
      }
      if (qword_254528CD0)
      {
        qword_254528CD8 = qword_254528CD0;
        operator delete((void *)qword_254528CD0);
      }
      if (qword_254528CB8)
      {
        qword_254528CC0 = qword_254528CB8;
        operator delete((void *)qword_254528CB8);
      }
      if (byte_254528C57 < 0)
        operator delete((void *)qword_254528C40);
      if (qword_254528A18)
      {
        qword_254528A20 = qword_254528A18;
        operator delete((void *)qword_254528A18);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20701F5A0()
{
  JUMPOUT(0x20701F4FCLL);
}

void sub_20701F5A8()
{
  JUMPOUT(0x20701F514);
}

void sub_20701F5B0()
{
  JUMPOUT(0x20701F52CLL);
}

void sub_20701F5B8()
{
  JUMPOUT(0x20701F544);
}

void sub_20701F5C0()
{
  JUMPOUT(0x20701F55CLL);
}

void sub_20701F5C8()
{
  JUMPOUT(0x20701F574);
}

void sub_20701F5D0()
{
  JUMPOUT(0x20701F58CLL);
}

double ZinComputeAddressTranslationRegisters::ComputeAddressTranslation@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = xmmword_207AAF500;
  v18 = xmmword_207AAF500;
  v6 = (int8x16_t *)a2[1];
  v7 = *a2;
  v8 = (uint64_t)v6->i64 - *a2;
  v9 = 1;
  if ((unint64_t)v8 >= 0x10)
  {
    v10 = 126 - 2 * __clz(v8 >> 3);
    if (v6 == (int8x16_t *)v7)
      v11 = 0;
    else
      v11 = v10;
    std::__introsort<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **,false>(v7, v6, v11, 1);
    v12 = *a2;
    v13 = *(_QWORD *)(*a2 + 8);
    v14 = *(uint64_t **)(a1 + 8);
    v9 = CalculateBoundaryRegisters(*(_QWORD *)*a2, v13, v14, 0, 0, (unint64_t *)&v17);
    if ((unint64_t)(a2[1] - v12) >= 0x11)
      v9 &= CalculateBoundaryRegisters(v13, *(_QWORD *)(v12 + 16), v14, *((uint64_t *)&v17 + 1), 1, (unint64_t *)&v18);
  }
  result = *(double *)&v17;
  v16 = v18;
  *(_OWORD *)a3 = v17;
  *(_OWORD *)(a3 + 16) = v16;
  *(_BYTE *)(a3 + 32) = v9;
  *(_BYTE *)(a3 + 40) = 1;
  return result;
}

BOOL CalculateBoundaryRegisters(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 184);
  if (a5)
    v8 = a4;
  else
    v8 = *(_QWORD *)(a1 + 16);
  v9 = v7 + v8;
  a6[1] = v9;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 >= v9)
  {
    v12 = v10 - (v7 + v6);
    v11 = *a3;
  }
  else
  {
    v11 = *a3;
    v12 = v10 - (v7 + v6) + *(_QWORD *)(*a3 + 408);
  }
  *a6 = v12;
  v13 = *(_QWORD *)(v11 + 632);
  v14 = v12 / v13;
  v15 = v12 % v13;
  if (!v15)
    *a6 = v14;
  return v15 == 0;
}

uint64_t ZinComputeAddressTranslationRegisters::Execute(ZinIrOpLayer ****this)
{
  ZinIrOpLayer **v1;
  ZinIrOpLayer **v2;
  NSObject *v4;
  ZinIrOpLayer *v5;
  int v6;
  int v7;
  int v8;
  char v10;
  _BYTE v11[7];
  void *__p[3];
  char v13;
  _BYTE v14[15];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 v18;
  void *v19[3];
  char v20;
  _BYTE v21[15];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned __int8 v25;
  void *v26[4];

  v1 = **this;
  v2 = (*this)[1];
  if (v1 == v2)
    return 0;
  v4 = MEMORY[0x24BDACB70];
  while (1)
  {
    v5 = *v1;
    if (ZinIrOpLayer::IsANELayer(*v1))
      break;
LABEL_41:
    if (++v1 == v2)
      return 0;
  }
  ZinEngineLayerMirInfo::GetL2WrSymbols(*((ZinEngineLayerMirInfo **)v5 + 33), v26);
  ZinComputeAddressTranslationRegisters::ComputeAddressTranslation((uint64_t)this, (uint64_t *)v26, (uint64_t)&v22);
  v6 = v25;
  if (!v25)
  {
LABEL_7:
    ZinEngineLayerMirInfo::GetL2RdSymbols(*((_QWORD *)v5 + 33), 0, v19);
    ZinComputeAddressTranslationRegisters::ComputeAddressTranslation((uint64_t)this, (uint64_t *)v19, (uint64_t)&v15);
    if (v6 == v18)
    {
      if (v6)
      {
        v22 = v15;
        v23 = v16;
        LOBYTE(v24) = v17;
LABEL_17:
        v15 = v22;
        v16 = v23;
        v17 = v24;
        if (!(_BYTE)v24)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            ZinComputeAddressTranslationRegisters::Execute(&v13, v14);
          v8 = 1;
          goto LABEL_36;
        }
        ZinEngineLayerMirInfo::SetAddressTranslationBoundaryRegisters(*((_QWORD *)v5 + 33), 0, (uint64_t)&v15);
        v7 = 0;
        v6 = 1;
LABEL_19:
        ZinEngineLayerMirInfo::GetL2RdSymbols(*((_QWORD *)v5 + 33), 1, __p);
        ZinComputeAddressTranslationRegisters::ComputeAddressTranslation((uint64_t)this, (uint64_t *)__p, (uint64_t)&v15);
        if (v6 == v18)
        {
          if (v7)
          {
LABEL_26:
            v8 = 0;
            goto LABEL_34;
          }
          v22 = v15;
          v23 = v16;
          LOBYTE(v24) = v17;
        }
        else
        {
          if ((v7 & 1) == 0)
          {
            v8 = 0;
            v25 = 0;
LABEL_34:
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
LABEL_36:
            if (v19[0])
            {
              v19[1] = v19[0];
              operator delete(v19[0]);
            }
            goto LABEL_38;
          }
          v22 = v15;
          v23 = v16;
          v24 = v17;
          v25 = 1;
        }
        v15 = v22;
        v16 = v23;
        v17 = v24;
        if (!(_BYTE)v24)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            ZinComputeAddressTranslationRegisters::Execute(&v10, v11);
          v8 = 1;
          goto LABEL_34;
        }
        ZinEngineLayerMirInfo::SetAddressTranslationBoundaryRegisters(*((_QWORD *)v5 + 33), 1, (uint64_t)&v15);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v6)
      {
        v22 = v15;
        v23 = v16;
        v24 = v17;
        v25 = 1;
        goto LABEL_17;
      }
      v6 = 0;
      v25 = 0;
    }
    v7 = 1;
    goto LABEL_19;
  }
  v15 = v22;
  v16 = v23;
  v17 = v24;
  if ((_BYTE)v24)
  {
    ZinEngineLayerMirInfo::SetAddressTranslationBoundaryRegisters(*((_QWORD *)v5 + 33), 3, (uint64_t)&v15);
    goto LABEL_7;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    ZinComputeAddressTranslationRegisters::Execute(&v20, v21);
  v8 = 1;
LABEL_38:
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (!v8)
    goto LABEL_41;
  return 3;
}

void sub_20701FA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  v27 = *(void **)(v25 - 112);
  if (v27)
  {
    *(_QWORD *)(v25 - 104) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v18;
  int8x16_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int8x16_t *v41;
  __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  __int8 *v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int8x16_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  int8x16_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t *v94;
  uint64_t *i64;
  uint64_t v96;
  uint64_t *v97;
  int64_t v98;

  v7 = (int8x16_t *)result;
LABEL_2:
  i64 = a2[-1].i64;
  v97 = &a2[-1].i64[1];
  v94 = &a2[-2].i64[1];
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ZinLiveRange::operator<((_QWORD *)(a2[-1].i64[1] + 192), (_QWORD *)(v7->i64[0] + 192));
        if ((_DWORD)result)
        {
          v40 = v7->i64[0];
          v7->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v40;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v7->i64, &v7->i64[1], v97);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v7->i64, &v7->i64[1], v7[1].i64, v97);
      case 5:
        v41 = v7 + 1;
        v42 = &v7[1].i8[8];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1]);
        result = ZinLiveRange::operator<((_QWORD *)(a2[-1].i64[1] + 192), (_QWORD *)(v7[1].i64[1] + 192));
        if ((_DWORD)result)
        {
          v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = a2[-1].i64[1];
          a2[-1].i64[1] = v43;
          result = ZinLiveRange::operator<((_QWORD *)(*(_QWORD *)v42 + 192), (_QWORD *)(v41->i64[0] + 192));
          if ((_DWORD)result)
          {
            v44 = v41->i64[0];
            v45 = *(_QWORD *)v42;
            v41->i64[0] = *(_QWORD *)v42;
            *(_QWORD *)v42 = v44;
            result = ZinLiveRange::operator<((_QWORD *)(v45 + 192), (_QWORD *)(v7->i64[1] + 192));
            if ((_DWORD)result)
            {
              v47 = v7->i64[1];
              v46 = v7[1].i64[0];
              v48 = v7->i64[0];
              v7->i64[1] = v46;
              v7[1].i64[0] = v47;
              result = ZinLiveRange::operator<((_QWORD *)(v46 + 192), (_QWORD *)(v48 + 192));
              if ((_DWORD)result)
                *v7 = vextq_s8(*v7, *v7, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = (int8x16_t *)&v7->u64[1];
          v51 = v7 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 0;
              v53 = (uint64_t *)v7;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = (uint64_t *)v49;
                result = ZinLiveRange::operator<((_QWORD *)(v54 + 192), (_QWORD *)(v55 + 192));
                if ((_DWORD)result)
                {
                  v56 = a2;
                  v57 = *v53;
                  v58 = (_QWORD *)(*v53 + 192);
                  v59 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)&v7->i64[1] + v59) = *(uint64_t *)((char *)v7->i64 + v59);
                    if (!v59)
                      break;
                    result = ZinLiveRange::operator<(v58, (_QWORD *)(*(uint64_t *)((char *)&v7->i64[-1] + v59) + 192));
                    v59 -= 8;
                    if ((result & 1) == 0)
                    {
                      v60 = (uint64_t *)((char *)&v7->i64[1] + v59);
                      goto LABEL_78;
                    }
                  }
                  v60 = (uint64_t *)v7;
LABEL_78:
                  *v60 = v57;
                  a2 = v56;
                }
                v49 = (int8x16_t *)(v53 + 1);
                v52 += 8;
              }
              while (v53 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v87 = v7->i64[0];
              v86 = v7->i64[1];
              v7 = v49;
              result = ZinLiveRange::operator<((_QWORD *)(v86 + 192), (_QWORD *)(v87 + 192));
              if ((_DWORD)result)
              {
                v88 = v7->i64[0];
                v89 = (_QWORD *)(v7->i64[0] + 192);
                v90 = (uint64_t *)v7;
                do
                {
                  v91 = v90;
                  v92 = *--v90;
                  *v91 = v92;
                  result = ZinLiveRange::operator<(v89, (_QWORD *)(*(v91 - 2) + 192));
                }
                while ((result & 1) != 0);
                *v90 = v88;
              }
              v49 = (int8x16_t *)&v7->u64[1];
            }
            while (&v7->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v61 = (unint64_t)(v10 - 2) >> 1;
            v98 = v61;
            v93 = a2;
            do
            {
              v62 = v61;
              if (v98 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v7->i64[v63];
                if (2 * v61 + 2 < v10 && ZinLiveRange::operator<((_QWORD *)(*v64 + 192), (_QWORD *)(v64[1] + 192)))
                {
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                v65 = &v7->i8[8 * v62];
                result = ZinLiveRange::operator<((_QWORD *)(*v64 + 192), (_QWORD *)(*(_QWORD *)v65 + 192));
                if ((result & 1) == 0)
                {
                  v96 = *(_QWORD *)v65;
                  v66 = (_QWORD *)(*(_QWORD *)v65 + 192);
                  do
                  {
                    v67 = v64;
                    *(_QWORD *)v65 = *v64;
                    if (v98 < v63)
                      break;
                    v68 = (2 * v63) | 1;
                    v64 = &v7->i64[v68];
                    if (2 * v63 + 2 < v10 && ZinLiveRange::operator<((_QWORD *)(*v64 + 192), (_QWORD *)(v64[1] + 192)))
                    {
                      ++v64;
                      v68 = 2 * v63 + 2;
                    }
                    result = ZinLiveRange::operator<((_QWORD *)(*v64 + 192), v66);
                    v65 = (__int8 *)v67;
                    v63 = v68;
                  }
                  while (!(_DWORD)result);
                  *v67 = v96;
                  a2 = v93;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v69 = (unint64_t)v9 >> 3;
            do
            {
              v70 = a2;
              v71 = 0;
              v72 = v7->i64[0];
              v73 = v7->i64;
              do
              {
                v74 = (uint64_t)&v73[v71 + 1];
                v75 = (2 * v71) | 1;
                v76 = 2 * v71 + 2;
                if (v76 < v69)
                {
                  result = ZinLiveRange::operator<((_QWORD *)(v73[v71 + 1] + 192), (_QWORD *)(v73[v71 + 2] + 192));
                  if ((_DWORD)result)
                  {
                    v74 += 8;
                    v75 = v76;
                  }
                }
                *v73 = *(_QWORD *)v74;
                v73 = (_QWORD *)v74;
                v71 = v75;
              }
              while (v75 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
              v77 = &v70[-1].i64[1];
              if ((uint64_t *)v74 == v77)
              {
                v78 = (int8x16_t *)v77;
                *(_QWORD *)v74 = v72;
              }
              else
              {
                *(_QWORD *)v74 = *v77;
                v78 = (int8x16_t *)v77;
                *v77 = v72;
                v79 = v74 - (_QWORD)v7 + 8;
                if (v79 >= 9)
                {
                  v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                  v81 = &v7->i64[v80];
                  result = ZinLiveRange::operator<((_QWORD *)(*v81 + 192), (_QWORD *)(*(_QWORD *)v74 + 192));
                  if ((_DWORD)result)
                  {
                    v82 = *(_QWORD *)v74;
                    v83 = (_QWORD *)(*(_QWORD *)v74 + 192);
                    do
                    {
                      v84 = v81;
                      *(_QWORD *)v74 = *v81;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = &v7->i64[v80];
                      result = ZinLiveRange::operator<((_QWORD *)(*v81 + 192), v83);
                      v74 = (uint64_t)v84;
                    }
                    while ((result & 1) != 0);
                    *v84 = v82;
                  }
                }
              }
              v85 = v69-- <= 2;
              a2 = v78;
            }
            while (!v85);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7->i64[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v12, v7->i64, v97);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v7->i64, v12, v97);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(&v7->i64[1], v12 - 1, i64);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v7[1].i64, &v7->i64[v11 + 1], v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v12 - 1, v12, &v7->i64[v11 + 1]);
          v13 = v7->i64[0];
          v7->i64[0] = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && !ZinLiveRange::operator<((_QWORD *)(v7[-1].i64[1] + 192), (_QWORD *)(v7->i64[0] + 192)))
        {
          v30 = v7->i64[0];
          v31 = (_QWORD *)(v7->i64[0] + 192);
          result = ZinLiveRange::operator<(v31, (_QWORD *)(*v97 + 192));
          if ((result & 1) != 0)
          {
            v8 = v7;
            do
            {
              v32 = v8->i64[1];
              v8 = (int8x16_t *)((char *)v8 + 8);
              result = ZinLiveRange::operator<(v31, (_QWORD *)(v32 + 192));
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = &v7->i64[1];
            do
            {
              v8 = (int8x16_t *)v33;
              if (v33 >= (uint64_t *)a2)
                break;
              ++v33;
              result = ZinLiveRange::operator<(v31, (_QWORD *)(v8->i64[0] + 192));
            }
            while (!(_DWORD)result);
          }
          v34 = a2;
          if (v8 < a2)
          {
            v34 = a2;
            do
            {
              v35 = v34[-1].i64[1];
              v34 = (int8x16_t *)((char *)v34 - 8);
              result = ZinLiveRange::operator<(v31, (_QWORD *)(v35 + 192));
            }
            while ((result & 1) != 0);
          }
          while (v8 < v34)
          {
            v36 = v8->i64[0];
            v8->i64[0] = v34->i64[0];
            v34->i64[0] = v36;
            do
            {
              v37 = v8->i64[1];
              v8 = (int8x16_t *)((char *)v8 + 8);
            }
            while (!ZinLiveRange::operator<(v31, (_QWORD *)(v37 + 192)));
            do
            {
              v38 = v34[-1].i64[1];
              v34 = (int8x16_t *)((char *)v34 - 8);
              result = ZinLiveRange::operator<(v31, (_QWORD *)(v38 + 192));
            }
            while ((result & 1) != 0);
          }
          v39 = &v8[-1].i64[1];
          if (&v8[-1].u64[1] != (unint64_t *)v7)
            v7->i64[0] = *v39;
          a4 = 0;
          *v39 = v30;
          continue;
        }
        v14 = 0;
        v15 = v7->i64[0];
        v16 = (_QWORD *)(v7->i64[0] + 192);
        while (ZinLiveRange::operator<((_QWORD *)(v7->i64[++v14] + 192), v16))
          ;
        v18 = &v7->i8[v14 * 8];
        v19 = a2;
        if (v14 == 1)
        {
          do
          {
            if (v18 >= (char *)a2)
              break;
            v21 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!ZinLiveRange::operator<((_QWORD *)(v21 + 192), v16));
        }
        else
        {
          do
          {
            v20 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!ZinLiveRange::operator<((_QWORD *)(v20 + 192), v16));
        }
        if (v18 >= (char *)a2)
        {
          v27 = (int8x16_t *)(v18 - 8);
        }
        else
        {
          v22 = &v7->i64[v14];
          v23 = (uint64_t *)a2;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v25 = v22[1];
              ++v22;
            }
            while (ZinLiveRange::operator<((_QWORD *)(v25 + 192), v16));
            do
              v26 = *--v23;
            while (!ZinLiveRange::operator<((_QWORD *)(v26 + 192), v16));
          }
          while (v22 < v23);
          v27 = (int8x16_t *)(v22 - 1);
        }
        if (v27 != v7)
          v7->i64[0] = v27->i64[0];
        v27->i64[0] = v15;
        v28 = v18 >= (char *)a2;
        a2 = v19;
        if (!v28)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = (int8x16_t *)&v27->u64[1];
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v7, v27);
        v8 = (int8x16_t *)&v27->u64[1];
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>((int8x16_t *)&v27->u64[1], v19);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = v27;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = ZinLiveRange::operator<((_QWORD *)(*a2 + 192), (_QWORD *)(*a1 + 192));
  result = ZinLiveRange::operator<((_QWORD *)(*a3 + 192), (_QWORD *)(*a2 + 192));
  if (v6)
  {
    v8 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      result = ZinLiveRange::operator<((_QWORD *)(*a3 + 192), (_QWORD *)(v8 + 192));
      if (!result)
        return result;
      v8 = *a2;
      *a2 = *a3;
    }
    *a3 = v8;
  }
  else if (result)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    result = ZinLiveRange::operator<((_QWORD *)(*a2 + 192), (_QWORD *)(*a1 + 192));
    if (result)
    {
      v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  int8x16_t *v16;
  __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (ZinLiveRange::operator<((_QWORD *)(a2[-1].i64[1] + 192), (_QWORD *)(a1->i64[0] + 192)))
      {
        v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v16 = a1 + 1;
      v17 = &a1[1].i8[8];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
      if (ZinLiveRange::operator<((_QWORD *)(a2[-1].i64[1] + 192), (_QWORD *)(a1[1].i64[1] + 192)))
      {
        v18 = *(_QWORD *)v17;
        *(_QWORD *)v17 = a2[-1].i64[1];
        a2[-1].i64[1] = v18;
        if (ZinLiveRange::operator<((_QWORD *)(*(_QWORD *)v17 + 192), (_QWORD *)(v16->i64[0] + 192)))
        {
          v19 = v16->i64[0];
          v20 = *(_QWORD *)v17;
          v16->i64[0] = *(_QWORD *)v17;
          *(_QWORD *)v17 = v19;
          if (ZinLiveRange::operator<((_QWORD *)(v20 + 192), (_QWORD *)(a1->i64[1] + 192)))
          {
            v22 = a1->i64[1];
            v21 = a1[1].i64[0];
            v23 = a1->i64[0];
            a1->i64[1] = v21;
            a1[1].i64[0] = v22;
            if (ZinLiveRange::operator<((_QWORD *)(v21 + 192), (_QWORD *)(v23 + 192)))
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 1;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1->i64, &a1->i64[1], a1[1].i64);
      v8 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (ZinLiveRange::operator<((_QWORD *)(v8->i64[0] + 192), (_QWORD *)(v7->i64[0] + 192)))
    {
      v11 = v8->i64[0];
      v12 = (_QWORD *)(v8->i64[0] + 192);
      v13 = v9;
      while (1)
      {
        *(uint64_t *)((char *)&a1[1].i64[1] + v13) = *(uint64_t *)((char *)a1[1].i64 + v13);
        if (v13 == -16)
          break;
        v14 = ZinLiveRange::operator<(v12, (_QWORD *)(*(uint64_t *)((char *)&a1->i64[1] + v13) + 192));
        v13 -= 8;
        if (!v14)
        {
          v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
          goto LABEL_13;
        }
      }
      v15 = (uint64_t *)a1;
LABEL_13:
      *v15 = v11;
      if (++v10 == 8)
        return &v8->u64[1] == (unint64_t *)a2;
    }
    v7 = v8;
    v9 += 8;
    v8 = (int8x16_t *)((char *)v8 + 8);
    if (v8 == a2)
      return 1;
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1, a2, a3);
  result = ZinLiveRange::operator<((_QWORD *)(*a4 + 192), (_QWORD *)(*a3 + 192));
  if (result)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    result = ZinLiveRange::operator<((_QWORD *)(*a3 + 192), (_QWORD *)(*a2 + 192));
    if (result)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      result = ZinLiveRange::operator<((_QWORD *)(*a2 + 192), (_QWORD *)(*a1 + 192));
      if (result)
      {
        v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void ZinComputeAddressTranslationRegisters::Execute(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "Invalid Src2 Boundary Registers", v3);
}

{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "Invalid Src1 Boundary Register", v3);
}

{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "Invalid Write Boundary Register", v3);
}

uint64_t ZinIrReductionInfo::ZinIrReductionInfo(uint64_t a1, int a2, _QWORD *a3, int a4, int a5, int a6, char a7, float a8, float a9)
{
  uint64_t result;

  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 32);
  *(_QWORD *)result = &unk_24C01E0E0;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = *a3;
  *(float *)(result + 32) = a8;
  *(float *)(result + 36) = a9;
  *(_DWORD *)(result + 40) = a5;
  *(_DWORD *)(result + 44) = a6;
  *(_BYTE *)(result + 48) = a7;
  *(_BYTE *)(result + 49) = 0;
  return result;
}

double ZinIrReductionInfo::ZinIrReductionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 32);
  *(_QWORD *)v3 = &unk_24C01E0E0;
  *(_QWORD *)(v3 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 40);
  *(double *)(v3 + 40) = result;
  *(_WORD *)(v3 + 48) = *(unsigned __int8 *)(a2 + 48);
  return result;
}

uint64_t ZinIrReductionInfo::ComputeOutputDimensions(uint64_t this, ZinTensorDimensions *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  if ((v2 & 0x10) != 0)
  {
    *((_QWORD *)a2 + 3) = 1;
    v2 = *(_QWORD *)(this + 24);
    if ((v2 & 8) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_3;
  }
  *((_QWORD *)a2 + 2) = 1;
  v2 = *(_QWORD *)(this + 24);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *((_QWORD *)a2 + 1) = 1;
  v2 = *(_QWORD *)(this + 24);
  if ((v2 & 2) == 0)
  {
LABEL_5:
    if ((v2 & 1) == 0)
      return this;
LABEL_11:
    *(_QWORD *)a2 = 1;
    return this;
  }
LABEL_10:
  *((_QWORD *)a2 + 4) = 1;
  if ((*(_QWORD *)(this + 24) & 1) != 0)
    goto LABEL_11;
  return this;
}

uint64_t ZinIrReductionInfo::TensorDimensions(ZinIrReductionInfo *this, const ZinTensorDimensions *a2, ZinTensorDimensions *a3)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 1);
  *((_QWORD *)a3 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a3 = v3;
  *((_OWORD *)a3 + 1) = v4;
  ZinIrReductionInfo::ComputeOutputDimensions((uint64_t)this, a3);
  return 0;
}

void ZinIrReductionInfo::~ZinIrReductionInfo(ZinIrReductionInfo *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinIrUnflattenInfo::ZinIrUnflattenInfo(uint64_t a1, int a2)
{
  uint64_t result;

  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 11);
  *(_QWORD *)result = &unk_24C01E2C0;
  *(_DWORD *)(result + 12) = a2;
  return result;
}

_QWORD *ZinUnflattenLayer::ZinUnflattenLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C01D5B0;
  return a1;
}

void sub_207020958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinUnflattenLayer::Lower()
{
  return 0;
}

_QWORD *ZinUnflattenLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  const ZinIrOpLayerOpCode *v7;
  ZinIrOpLayerOpCode *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  ZinIrOpLayerOpCode *v18;

  v6 = (_QWORD *)operator new();
  v7 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v8 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, v7);
  *(_QWORD *)v8 = &unk_24C01E2C0;
  *((_DWORD *)v8 + 3) = *((_DWORD *)v7 + 3);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinUnflattenLayer::ZinUnflattenLayer(v6, (uint64_t *)&v18, v17, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v18)
    (*(void (**)(ZinIrOpLayerOpCode *))(*(_QWORD *)v18 + 8))(v18);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_207020ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

_QWORD *ZinUnflattenLayer::OpCodeKindToString@<X0>(ZinUnflattenLayer *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (*(_DWORD *)(*((_QWORD *)this + 8) + 12))
    v2 = "NHWC";
  else
    v2 = "NCHW";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t ZinUnflattenLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_207020C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinUnflattenLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void *__p[2];
  char v24;

  if (a2[1] - *a2 != 120)
    ZinAssertImpl("Unflatten layer can only have one bottom");
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  v5 = (_QWORD *)*a2;
  v6 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v7 = v5[3];
  std::string::basic_string[abi:ne180100]<0>(__p, "height");
  if (v7 != 1)
  {
    if (v24 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    ZinAssertImpl("Error: invalid input %s = %zd for unflatten layer. It should be 1", (const char *)v18, v7);
  }
  if (v24 < 0)
    operator delete(__p[0]);
  v8 = v5[4];
  std::string::basic_string[abi:ne180100]<0>(__p, "width");
  if (v8 != 1)
  {
    if (v24 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    ZinAssertImpl("Error: invalid input %s = %zd for unflatten layer. It should be 1", (const char *)v19, v8);
  }
  if (v24 < 0)
    operator delete(__p[0]);
  v9 = v5[5];
  std::string::basic_string[abi:ne180100]<0>(__p, "depth");
  if (v9 != 1)
  {
    if (v24 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    ZinAssertImpl("Error: invalid input %s = %zd for unflatten layer. It should be 1", (const char *)v20, v9);
  }
  if (v24 < 0)
    operator delete(__p[0]);
  v10 = v5[2];
  v11 = v6[7];
  v12 = v6[8];
  v13 = v6[9];
  if (v10 != v12 * v11 * v13)
    ZinAssertImpl("Error: input elements count (%zu) must equal output with shape C%zdH%zdW%zd (%zu)", v10, v11, v12, v6[9], v12 * v11 * v13);
  v14 = v5[1];
  v15 = v6[6];
  std::string::basic_string[abi:ne180100]<0>(__p, "batch");
  if (v14 != v15)
  {
    if (v24 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    ZinAssertImpl("Error: input %s (%zd) is not equal to output (%zd) for unflatten layer", (const char *)v21, v14, v15);
  }
  if (v24 < 0)
    operator delete(__p[0]);
  v16 = v5[5];
  v17 = v6[10];
  std::string::basic_string[abi:ne180100]<0>(__p, "depth");
  if (v16 != v17)
  {
    if (v24 >= 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    ZinAssertImpl("Error: input %s (%zd) is not equal to output (%zd) for unflatten layer", (const char *)v22, v16, v17);
  }
  if (v24 < 0)
    operator delete(__p[0]);
  if (*(_DWORD *)(*((_QWORD *)a1 + 8) + 12) >= 2u)
    ZinAssertImpl("Error: unknown unflatten mode. It should be NCHW or NHWC");
}

void sub_207020E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GetAddressOfRelocationCommand(_DWORD *a1)
{
  return 4 * (*a1 & 0x7FFFu);
}

uint64_t GetSizeInWordsOfRelocationCommand(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 1) & 0x80) != 0)
    return 3;
  else
    return 2;
}

void ZinAneRelocationCommand_v11::ZinAneRelocationCommand_v11(ZinAneRelocationCommand_v11 *this, const unsigned int *a2)
{
  int v2;

  *(_QWORD *)this = &off_24C024370;
  v2 = *a2;
  *((_DWORD *)this + 2) = *a2;
  *(_QWORD *)((char *)this + 12) = a2[1];
  if ((v2 & 0x8000) != 0)
    *((_DWORD *)this + 4) = a2[2];
}

uint64_t ZinAneRelocationCommand_v11::SizeInWords(ZinAneRelocationCommand_v11 *this)
{
  if ((*((_BYTE *)this + 9) & 0x80) != 0)
    return 3;
  else
    return 2;
}

void ZinAneRelocationCommand_v11::GetRegistersSpecified(ZinAneRelocationCommand_v11 *this@<X0>, char **a2@<X8>)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (*(uint64_t (**)(ZinAneRelocationCommand_v11 *))(*(_QWORD *)this + 64))(this);
  v5 = a2 + 2;
  v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a2 + 2), 1uLL);
  v8 = *a2;
  v9 = a2[1];
  *(_DWORD *)v7 = v4;
  v10 = v7 + 4;
  v11 = v7;
  while (v9 != v8)
  {
    v12 = *((_DWORD *)v9 - 1);
    v9 -= 4;
    *((_DWORD *)v11 - 1) = v12;
    v11 -= 4;
  }
  *a2 = v11;
  a2[1] = v10;
  a2[2] = &v7[4 * v6];
  if (v8)
    operator delete(v8);
  a2[1] = v10;
  if ((*((_BYTE *)this + 9) & 0x80) != 0)
  {
    v13 = v4 + 4;
    if ((unint64_t)v10 >= *v5)
    {
      v15 = *a2;
      v16 = (v10 - *a2) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v18 = *v5 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a2 + 2), v19);
        v15 = *a2;
        v10 = a2[1];
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *(_DWORD *)v21 = v13;
      v14 = v21 + 4;
      while (v10 != v15)
      {
        v23 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v23;
        v21 -= 4;
      }
      *a2 = v21;
      a2[1] = v14;
      a2[2] = v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *((_DWORD *)v7 + 1) = v13;
      v14 = v7 + 8;
    }
    a2[1] = v14;
  }
}

void sub_207021060(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneRelocationCommand_v11::GetNthRegisterAddress(ZinAneRelocationCommand_v11 *this, int a2)
{
  return (*(unsigned int (**)(ZinAneRelocationCommand_v11 *))(*(_QWORD *)this + 64))(this) + 4 * a2;
}

uint64_t ZinAneRelocationCommand_v11::GetNthRegisterValue(ZinAneRelocationCommand_v11 *this, int a2)
{
  uint64_t v2;

  v2 = 16;
  if (!a2)
    v2 = 12;
  return *(unsigned int *)((char *)this + v2);
}

uint64_t ZinAneRelocationCommand_v11::CommandHeaderToRawString@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v7 - 24)) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v7 - 24)) & 0xFFFFFFB5 | 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Raw: 0x", 7);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)" 0x", 3);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" 0x", 3);
  std::ostream::operator<<();
  std::ostream::put();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a1);
  v6[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v7 = v4;
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v10);
}

void sub_2070211F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinAneRelocationCommand_v11::CommandHeaderToString@<X0>(ZinAneRelocationCommand_v11 *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  std::string __p;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Relocation Command: Address ", 28);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  (*(void (**)(ZinAneRelocationCommand_v11 *))(*(_QWORD *)this + 64))(this);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; ", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"BarId: ", 7);
  std::to_string(&__p, (*((_DWORD *)this + 2) >> 22) & 0x7F);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Mode: ", 6);
  if ((*((_DWORD *)this + 2) & 0x100000) != 0)
    v11 = "XOR";
  else
    v11 = "Add";
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; ", 2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Size: ", 6);
  if ((*((_DWORD *)this + 2) & 0x8000) != 0)
    v14 = "64b";
  else
    v14 = "32b";
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"DataLo: ", 8);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; ", 2);
  if ((*((_BYTE *)this + 9) & 0x80) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"DataHi: ", 8);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; ", 2);
  }
  std::ostream::put();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23, a2);
  v21[0] = *MEMORY[0x24BEDB7F0];
  v18 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v22 = v18;
  v23[0] = MEMORY[0x24BEDB848] + 16;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v25);
}

void sub_20702148C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ZinAneRelocationCommand_v11::GetAddress(ZinAneRelocationCommand_v11 *this)
{
  return 4 * (*((_DWORD *)this + 2) & 0x7FFFu);
}

uint64_t ZinAneRelocationCommand_v11::SetAddress(uint64_t this, unsigned int a2)
{
  *(_DWORD *)(this + 8) = *(_DWORD *)(this + 8) & 0xFFFF8000 | (a2 >> 2) & 0x7FFF;
  return this;
}

uint64_t *GetRegistersProgrammedAsRelocationCommands@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = *result;
  v4 = result[1];
  while (v3 != v4)
  {
    v6 = 4 * (*(_DWORD *)(v3 + 32) & 0x7FFF);
    result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, (unsigned int *)&v6, &v6);
    if ((*(_BYTE *)(v3 + 33) & 0x80) != 0)
    {
      v5 = v6 + 4;
      result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, (unsigned int *)&v5, &v5);
    }
    v3 += 40;
  }
  return result;
}

void sub_207021568(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinAneRelocInfo::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*a1 != *a2 || *((_DWORD *)a1 + 8) != *((_DWORD *)a2 + 8))
    return 0;
  v2 = a1[31];
  if ((v2 & 0x80u) == 0)
    v3 = a1[31];
  else
    v3 = *((_QWORD *)a1 + 2);
  v4 = a2[31];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 2);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 8);
  v9 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v7 = a2 + 8;
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *((_QWORD *)a1 + 2)) == 0;
  if (!a1[31])
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t ZinAneRelocInfo::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3[3];
  unsigned __int8 *v4[3];

  v4[0] = a1;
  v4[1] = a1 + 32;
  v4[2] = a1 + 8;
  v3[0] = a2;
  v3[1] = a2 + 32;
  v3[2] = a2 + 8;
  return (std::__tuple_compare_three_way[abi:ne180100]<BOOL const&,unsigned int const&,std::string const&,BOOL const&,unsigned int const&,std::string const&,0ul,1ul,2ul>(v4, v3) >> 7) & 1;
}

void ZinAneRelocInfo::ZinAneRelocInfo(ZinAneRelocInfo *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_WORD *)this = 1;
  *((_DWORD *)this + 8) = 0;
}

uint64_t ZinAneRelocInfo::ZinAneRelocInfo(uint64_t a1, const std::string *a2, __int16 a3, char a4, char a5, char a6, char a7, int a8)
{
  int v13;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)a1 = a6;
  *(_BYTE *)(a1 + 1) = a7;
  std::string::operator=((std::string *)(a1 + 8), a2);
  if (a8)
    v13 = 0x100000;
  else
    v13 = 0;
  *(_DWORD *)(a1 + 32) = a3 & 0x7FFF | ((a4 & 0x7F) << 22) | ((a5 & 1) << 15) | v13 | *(_DWORD *)(a1 + 32) & 0x2F0000 | 0x20000000;
  return a1;
}

void sub_207021734(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *FindRelocationInfo@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t i;

  for (i = *result; ; i += 40)
  {
    if (i == result[1])
    {
      *a3 = 0;
      a3[40] = 0;
      return result;
    }
    if (4 * (*(_DWORD *)(i + 32) & 0x7FFF) == a2)
      break;
  }
  return (uint64_t *)std::__optional_destruct_base<ZinAneRelocInfo,false>::__optional_destruct_base[abi:ne180100]<ZinAneRelocInfo const&>((uint64_t)a3, i);
}

void ZinAneRelocationCommand_v11::~ZinAneRelocationCommand_v11(ZinAneRelocationCommand_v11 *this)
{
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<BOOL const&,unsigned int const&,std::string const&,BOOL const&,unsigned int const&,std::string const&,0ul,1ul,2ul>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;

  v2 = **a1;
  v3 = **a2;
  v4 = v2 == v3;
  if (v2 < v3)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v4
    && ((v6 = *(_DWORD *)a1[1], v7 = *(_DWORD *)a2[1], v8 = v6 == v7, v6 < v7) ? (v5 = 0xFFFFFFFFLL) : (v5 = 1), v8))
  {
    return std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1[2], (void **)a2[2]);
  }
  else
  {
    return v5;
  }
}

uint64_t std::__optional_destruct_base<ZinAneRelocInfo,false>::__optional_destruct_base[abi:ne180100]<ZinAneRelocInfo const&>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

uint64_t ZinMirHandleUnflattenLayer(uint64_t **a1, ZinUnflattenCompositeLayer *a2)
{
  ZinIrOpLayer *v4;
  char *v5;
  _BOOL4 v6;
  uint64_t **v7;
  uint64_t *v8;
  int v9;
  ZinIrOpLayer *v10;
  _BOOL4 v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  ZinIrOpLayer **v19;
  char *v20;
  char *v21;
  char *v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer *v24;
  _BOOL4 v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  ZinIrOpLayer **v33;
  char *v34;
  char *v35;
  char *v36;
  ZinIrOpLayer *v37;
  char *v38;
  char *v39;
  ZinIrKernel **v40;
  ZinIrKernel *v41;
  size_t v42;
  void **v43;
  ZinIrKernel *v44;
  uint64_t v45;
  uint64_t Hal;
  ZinIrKernel *v47;
  ZinIrKernel *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t i;
  void *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  unint64_t v70;
  unint64_t j;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int64x2_t v108;
  uint64_t v109;
  uint64_t v110;
  int8x16_t v111;
  int64x2_t v112;
  char *v113;
  uint64_t v114;
  uint64_t k;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  ZinIrKernel *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t *m;
  unint64_t v133;
  ZinIrKernel *v134;
  ZinIrKernel *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  ZinIrKernel *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  ZinIrKernel *v149;
  ZinIrKernel **v150;
  size_t v151;
  _BYTE *v152;
  ZinIrKernel *v153;
  std::string *v154;
  std::string *v155;
  __int128 v156;
  void **v157;
  std::string::size_type v158;
  std::string *v159;
  __int128 v160;
  ZinIrKernel *v161;
  ZinIrKernel *v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  int v168;
  size_t v169;
  void **v170;
  const void *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  void *v185;
  _QWORD *v186;
  uint64_t v187;
  _DWORD *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  size_t v197;
  void **v198;
  const void *v199;
  _QWORD *v200;
  uint64_t v201;
  _DWORD *v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  int v208;
  _QWORD *v209;
  ZinIrOpLayer *Alias;
  _QWORD *v211;
  _BOOL4 v212;
  int v213;
  _QWORD *v214;
  _QWORD *v215;
  _BOOL4 v216;
  int v217;
  _QWORD *v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  size_t v224;
  void **v225;
  const void *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  _QWORD *v230;
  ZinIrCopyInfo *v231;
  ZinIrOpLayer *v232;
  unint64_t *v233;
  unint64_t v234;
  size_t v235;
  void **v236;
  const void *v237;
  std::__shared_weak_count *v238;
  unint64_t *p_shared_owners;
  unint64_t v240;
  _BOOL4 v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _DWORD *v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  int v252;
  _QWORD *v253;
  ZinIrOpLayer *v254;
  _QWORD *v255;
  _BOOL4 v256;
  int v257;
  int v258;
  _QWORD *v259;
  _QWORD *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v265;
  ZinIrOpLayer *v266;
  int v267;
  uint64_t v268;
  const ZinTensorDimensions *v269;
  uint64_t **v270;
  ZinUnflattenCompositeLayer *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  _OWORD v275[2];
  int v276;
  _QWORD *v277;
  void *v278;
  std::__shared_weak_count *v279;
  _QWORD *v280;
  _OWORD v281[2];
  int v282;
  _QWORD *v283;
  void *v284;
  uint64_t v285;
  char *v286;
  ZinIrKernel *v287[2];
  ZinIrKernel *v288;
  char v289;
  _QWORD *v290;
  void *v291[2];
  __int128 v292;
  uint64_t v293;
  void *v294[4];
  int64x2_t v295;
  _QWORD *v296;
  ZinIrKernel *v297;
  void *v298;
  _BYTE *v299;
  void *v300[3];
  void *v301;
  char *v302;
  char *v303;
  ZinUnflattenCompositeLayer *v304;
  _QWORD *v305;
  _QWORD *v306;
  void *__p[2];
  void *v308[4];
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  int v313;
  int64x2_t v314;
  char v315;
  _BYTE v316[32];
  uint64_t v317;
  uint64_t v318;

  v318 = *MEMORY[0x24BDAC8D0];
  v273 = *((_QWORD *)a2 + 2);
  v4 = (ZinIrOpLayer *)*((_QWORD *)a2 + 24);
  v5 = (char *)operator new(8uLL);
  v301 = v5;
  *(_QWORD *)v5 = v4;
  v302 = v5 + 8;
  v303 = v5 + 8;
  *(_QWORD *)v316 = a2;
  v297 = (ZinIrKernel *)v316;
  v298 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v297);
  v6 = ZinIrOpLayerGraph::AddNode(a1, v4, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    v308[0] = __p[1];
    operator delete(__p[1]);
  }
  v297 = a2;
  __p[0] = &v297;
  v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, (unint64_t **)__p);
  if (v7)
    v8 = (uint64_t *)(v7 + 3);
  else
    v8 = (uint64_t *)(a1 + 13);
  v9 = v6 & ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>((uint64_t)a1, v8, (uint64_t)v4);
  v10 = (ZinIrOpLayer *)*((_QWORD *)a2 + 25);
  if (v10)
  {
    *(_QWORD *)v316 = a2;
    v297 = (ZinIrKernel *)v316;
    v298 = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v297);
    v11 = ZinIrOpLayerGraph::AddNode(a1, v10, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v308[0] = __p[1];
      operator delete(__p[1]);
    }
    v12 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v4, (uint64_t)v10, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v13 = v302;
    if (v302 >= v303)
    {
      v15 = (v302 - (_BYTE *)v301) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v16 = (v303 - (_BYTE *)v301) >> 2;
      if (v16 <= v15 + 1)
        v16 = v15 + 1;
      if ((unint64_t)(v303 - (_BYTE *)v301) >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v303, v17);
      else
        v18 = 0;
      v19 = (ZinIrOpLayer **)&v18[8 * v15];
      v20 = &v18[8 * v17];
      *v19 = v10;
      v14 = (char *)(v19 + 1);
      v22 = (char *)v301;
      v21 = v302;
      if (v302 != v301)
      {
        do
        {
          v23 = (ZinIrOpLayer *)*((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)v301;
      }
      v301 = v19;
      v302 = v14;
      v303 = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v302 = v10;
      v14 = v13 + 8;
    }
    v302 = v14;
    v9 &= v11 & v12;
  }
  v24 = (ZinIrOpLayer *)*((_QWORD *)a2 + 26);
  if (v24)
  {
    *(_QWORD *)v316 = a2;
    v297 = (ZinIrKernel *)v316;
    v298 = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v297);
    v25 = ZinIrOpLayerGraph::AddNode(a1, v24, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v308[0] = __p[1];
      operator delete(__p[1]);
    }
    v26 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, *((_QWORD *)v302 - 1), (uint64_t)v24, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v27 = v302;
    if (v302 >= v303)
    {
      v29 = (v302 - (_BYTE *)v301) >> 3;
      if ((unint64_t)(v29 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v30 = (v303 - (_BYTE *)v301) >> 2;
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      if ((unint64_t)(v303 - (_BYTE *)v301) >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      if (v31)
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v303, v31);
      else
        v32 = 0;
      v33 = (ZinIrOpLayer **)&v32[8 * v29];
      v34 = &v32[8 * v31];
      *v33 = v24;
      v28 = (char *)(v33 + 1);
      v36 = (char *)v301;
      v35 = v302;
      if (v302 != v301)
      {
        do
        {
          v37 = (ZinIrOpLayer *)*((_QWORD *)v35 - 1);
          v35 -= 8;
          *--v33 = v37;
        }
        while (v35 != v36);
        v35 = (char *)v301;
      }
      v301 = v33;
      v302 = v28;
      v303 = v34;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_QWORD *)v302 = v24;
      v28 = v27 + 8;
    }
    v302 = v28;
    v9 &= v25 & v26;
  }
  else
  {
    v28 = v302;
  }
  v268 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v28 - 1) + 32))(*((_QWORD *)v28 - 1), 0, 0);
  v266 = v4;
  v267 = v9;
  v270 = a1;
  v272 = (*(uint64_t (**)(ZinUnflattenCompositeLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v271 = a2;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 27) + 64) + 12) == 1)
  {
    v38 = (char *)v301;
    v39 = v302;
    if (v301 != v302)
    {
      do
      {
        v40 = (ZinIrKernel **)(*(_QWORD *)v38 + 136);
        v41 = *v40;
        if (*v40)
        {
          if (*((char *)v41 + 23) >= 0)
            v42 = *((unsigned __int8 *)v41 + 23);
          else
            v42 = *((_QWORD *)v41 + 1);
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v42 + 9);
          if (SHIBYTE(v308[0]) >= 0)
            v43 = __p;
          else
            v43 = (void **)__p[0];
          if (v42)
          {
            if (*((char *)v41 + 23) >= 0)
              v44 = v41;
            else
              v44 = *(ZinIrKernel **)v41;
            memmove(v43, v44, v42);
          }
          strcpy((char *)v43 + v42, "_remapped");
          v45 = (uint64_t)*v40;
          Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v273 + 160));
          (*(void (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
          ZinIrKernel::RemapWeightForUnflatten(v45, (__int128 *)__p, (const ZinTensorDimensions *)(v272 + 48), (uint64_t *)&v297);
          v47 = v297;
          if (!v297)
            ZinAssertImpl("Error: fail to remap unflatten kernel");
          v297 = 0;
          std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v40, v47);
          v48 = v297;
          v297 = 0;
          if (v48)
          {
            ZinIrKernel::~ZinIrKernel(v48);
            MEMORY[0x20BD002F8]();
          }
          if (SHIBYTE(v308[0]) < 0)
            operator delete(__p[0]);
        }
        v38 += 8;
      }
      while (v38 != v39);
    }
  }
  v49 = ZinIrTarget::GetHal(*(ZinIrTarget **)(v273 + 160));
  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
  v50 = *(_QWORD *)(v272 + 48);
  v51 = *(_QWORD *)(v272 + 56);
  v52 = *(_QWORD *)(v272 + 64);
  v53 = *(_QWORD *)(v272 + 72);
  v269 = (const ZinTensorDimensions *)(v272 + 48);
  memset(v308, 0, sizeof(v308));
  *(_OWORD *)__p = 0u;
  v54 = v51 * v50 * v52;
  v55 = v54 * v53;
  if (v53 <= 4)
  {
    v56 = operator new(8uLL);
    *v56 = v53;
    v308[0] = v56 + 1;
    __p[0] = v56;
    __p[1] = v56 + 1;
    if (v55)
    {
      v57 = 0;
      for (i = 0; i != v55; ++i)
      {
        if (v57 >= v308[3])
        {
          v60 = (char *)v308[1];
          v61 = (v57 - (char *)v308[1]) >> 3;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v63 = (char *)v308[3] - (char *)v308[1];
          if (((char *)v308[3] - (char *)v308[1]) >> 2 > v62)
            v62 = v63 >> 2;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
            v64 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
          {
            v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v308[3], v64);
            v57 = (char *)v308[2];
            v60 = (char *)v308[1];
          }
          else
          {
            v65 = 0;
          }
          v66 = &v65[8 * v61];
          *(_QWORD *)v66 = i;
          v59 = v66 + 8;
          while (v57 != v60)
          {
            v67 = *((_QWORD *)v57 - 1);
            v57 -= 8;
            *((_QWORD *)v66 - 1) = v67;
            v66 -= 8;
          }
          v308[1] = v66;
          v308[2] = v59;
          v308[3] = &v65[8 * v64];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_QWORD *)v57 = i;
          v59 = v57 + 8;
        }
        v308[2] = v59;
        v57 = (char *)v59;
      }
    }
    goto LABEL_231;
  }
  if (v53 <= 8)
  {
    v68 = operator new(8uLL);
    *v68 = 8;
    v308[0] = v68 + 1;
    __p[0] = v68;
    __p[1] = v68 + 1;
    if (!v55)
      goto LABEL_231;
    v69 = 0;
    v70 = 0;
    while (1)
    {
      for (j = 0; j != 8; ++j)
      {
        if (j >= v53)
        {
          if (v69 < v308[3])
          {
            *(_QWORD *)v69 = v55;
            v69 += 8;
            goto LABEL_124;
          }
          v73 = (char *)v308[1];
          v79 = (v69 - (char *)v308[1]) >> 3;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v81 = (char *)v308[3] - (char *)v308[1];
          if (((char *)v308[3] - (char *)v308[1]) >> 2 > v80)
            v80 = v81 >> 2;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v77 = v80;
          if (v77)
          {
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v308[3], v77);
            v69 = (char *)v308[2];
            v73 = (char *)v308[1];
          }
          else
          {
            v78 = 0;
          }
          v82 = &v78[8 * v79];
          *(_QWORD *)v82 = v55;
          v83 = v82 + 8;
          while (v69 != v73)
          {
            v85 = *((_QWORD *)v69 - 1);
            v69 -= 8;
            *((_QWORD *)v82 - 1) = v85;
            v82 -= 8;
          }
        }
        else
        {
          v72 = j + v70;
          if (v69 < v308[3])
          {
            *(_QWORD *)v69 = v72;
            v69 += 8;
            goto LABEL_124;
          }
          v73 = (char *)v308[1];
          v74 = (v69 - (char *)v308[1]) >> 3;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v76 = (char *)v308[3] - (char *)v308[1];
          if (((char *)v308[3] - (char *)v308[1]) >> 2 > v75)
            v75 = v76 >> 2;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v308[3], v77);
            v69 = (char *)v308[2];
            v73 = (char *)v308[1];
          }
          else
          {
            v78 = 0;
          }
          v82 = &v78[8 * v74];
          *(_QWORD *)v82 = v72;
          v83 = v82 + 8;
          while (v69 != v73)
          {
            v84 = *((_QWORD *)v69 - 1);
            v69 -= 8;
            *((_QWORD *)v82 - 1) = v84;
            v82 -= 8;
          }
        }
        v308[1] = v82;
        v308[2] = v83;
        v308[3] = &v78[8 * v77];
        if (v73)
          operator delete(v73);
        v69 = (char *)v83;
LABEL_124:
        v308[2] = v69;
      }
      v70 += v53;
      if (v70 >= v55)
        goto LABEL_231;
    }
  }
  if (v53 >= 0x11)
  {
    if (v53 >= 0x19)
    {
      if (v53 >= 0x21)
      {
        if (v53 > 0x40)
        {
          v316[0] = 0;
          std::pair<BOOL,ZinMirUnflatten::ShuffleInfo>::pair[abi:ne180100]<BOOL,ZinMirUnflatten::ShuffleInfo&,0>((uint64_t)&v297, v316, (uint64_t)__p);
          goto LABEL_232;
        }
        v86 = 8;
      }
      else
      {
        v86 = 4;
      }
    }
    else
    {
      v86 = 3;
    }
  }
  else
  {
    v86 = 2;
  }
  v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v308, 1uLL);
  v89 = (char *)__p[1];
  v90 = (char *)__p[0];
  v91 = &v88[8 * v87];
  *(_QWORD *)v88 = 8;
  v92 = v88 + 8;
  v93 = v88;
  while (v89 != v90)
  {
    v94 = *((_QWORD *)v89 - 1);
    v89 -= 8;
    *((_QWORD *)v93 - 1) = v94;
    v93 -= 8;
  }
  __p[0] = v93;
  __p[1] = v88 + 8;
  v308[0] = &v88[8 * v87];
  if (v90)
  {
    operator delete(v90);
    v91 = (char *)v308[0];
  }
  __p[1] = v88 + 8;
  if (v92 >= v91)
  {
    v96 = (char *)__p[0];
    v97 = (v92 - (char *)__p[0]) >> 3;
    v98 = v97 + 1;
    if ((unint64_t)(v97 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v99 = v91 - (char *)__p[0];
    if (v99 >> 2 > v98)
      v98 = v99 >> 2;
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
      v100 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v100 = v98;
    if (v100)
    {
      v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v308, v100);
      v92 = (char *)__p[1];
      v96 = (char *)__p[0];
    }
    else
    {
      v101 = 0;
    }
    v102 = (unint64_t *)&v101[8 * v97];
    v103 = &v101[8 * v100];
    *v102 = v86;
    v95 = v102 + 1;
    while (v92 != v96)
    {
      v104 = *((_QWORD *)v92 - 1);
      v92 -= 8;
      *--v102 = v104;
    }
    __p[0] = v102;
    __p[1] = v95;
    v308[0] = v103;
    if (v96)
      operator delete(v96);
  }
  else
  {
    *((_QWORD *)v88 + 1) = v86;
    v95 = v88 + 16;
  }
  __p[1] = v95;
  v314.i64[0] = 0;
  std::vector<unsigned long>::vector(v291, 8uLL, &v314);
  std::vector<std::vector<unsigned long>>::vector(v316, v86, (uint64_t)v291);
  if (v291[0])
  {
    v291[1] = v291[0];
    operator delete(v291[0]);
  }
  v105 = 0;
  v106 = 0;
  v107 = *(_QWORD *)v316;
  v108 = vdupq_n_s64(2uLL);
  do
  {
    v109 = 0;
    v110 = *(_QWORD *)(v107 + 24 * v105);
    v111 = (int8x16_t)vdupq_n_s64(v106);
    v106 += 8;
    v112 = (int64x2_t)vorrq_s8(v111, (int8x16_t)xmmword_207A80930);
    do
    {
      *(int64x2_t *)(v110 + v109) = v112;
      v112 = vaddq_s64(v112, v108);
      v109 += 16;
    }
    while (v109 != 64);
    ++v105;
  }
  while (v105 != v86);
  v265 = v54;
  v274 = v54 * v53;
  v113 = 0;
  v114 = 0;
  v291[0] = 0;
  v291[1] = 0;
  *(_QWORD *)&v292 = 0;
  do
  {
    for (k = 0; k != v86; ++k)
    {
      v116 = *(_QWORD *)(*(_QWORD *)v316 + 24 * k);
      if ((unint64_t)v113 >= (unint64_t)v292)
      {
        v117 = (char *)v291[0];
        v118 = (v113 - (char *)v291[0]) >> 3;
        v119 = v118 + 1;
        if ((unint64_t)(v118 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v120 = v292 - (unint64_t)v291[0];
        if ((uint64_t)(v292 - (unint64_t)v291[0]) >> 2 > v119)
          v119 = v120 >> 2;
        if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8)
          v121 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v121 = v119;
        if (v121)
        {
          v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v292, v121);
          v117 = (char *)v291[0];
          v113 = (char *)v291[1];
        }
        else
        {
          v122 = 0;
        }
        v123 = &v122[8 * v118];
        *(_QWORD *)v123 = *(_QWORD *)(v116 + 8 * v114);
        v124 = v123 + 8;
        while (v113 != v117)
        {
          v125 = *((_QWORD *)v113 - 1);
          v113 -= 8;
          *((_QWORD *)v123 - 1) = v125;
          v123 -= 8;
        }
        v291[0] = v123;
        v291[1] = v124;
        *(_QWORD *)&v292 = &v122[8 * v121];
        if (v117)
          operator delete(v117);
        v113 = (char *)v124;
      }
      else
      {
        *(_QWORD *)v113 = *(_QWORD *)(v116 + 8 * v114);
        v113 += 8;
      }
      v291[1] = v113;
    }
    ++v114;
  }
  while (v114 != 8);
  v287[0] = 0;
  std::vector<unsigned long>::vector(&v314, 8 * v86, v287);
  v126 = 0;
  v127 = v291[0];
  v128 = (_QWORD *)v314.i64[0];
  do
  {
    v128[v127[v126]] = v126;
    ++v126;
  }
  while (8 * v86 != v126);
  v287[0] = 0;
  v287[1] = 0;
  v288 = 0;
  if (!v265)
  {
LABEL_225:
    v314.i64[1] = (uint64_t)v128;
    operator delete(v128);
    goto LABEL_226;
  }
  v129 = 0;
  v130 = 0;
  do
  {
    v131 = v314.i64[1];
    for (m = (unint64_t *)v314.i64[0]; m != (unint64_t *)v131; ++m)
    {
      if (*m >= v53)
      {
        if (v129 < v288)
        {
          *(_QWORD *)v129 = v55;
          v134 = (ZinIrKernel *)((char *)v129 + 8);
          goto LABEL_222;
        }
        v135 = v287[0];
        v141 = (v129 - v287[0]) >> 3;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v143 = v288 - v287[0];
        if ((v288 - v287[0]) >> 2 > v142)
          v142 = v143 >> 2;
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
          v139 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v139 = v142;
        if (v139)
        {
          v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v288, v139);
          v135 = v287[0];
          v129 = v287[1];
        }
        else
        {
          v140 = 0;
        }
        v144 = (ZinIrKernel *)&v140[8 * v141];
        *(_QWORD *)v144 = v55;
        v134 = (ZinIrKernel *)((char *)v144 + 8);
        while (v129 != v135)
        {
          v146 = *((_QWORD *)v129 - 1);
          v129 = (ZinIrKernel *)((char *)v129 - 8);
          *((_QWORD *)v144 - 1) = v146;
          v144 = (ZinIrKernel *)((char *)v144 - 8);
        }
      }
      else
      {
        v133 = *m + v130;
        if (v129 < v288)
        {
          *(_QWORD *)v129 = v133;
          v134 = (ZinIrKernel *)((char *)v129 + 8);
          v55 = v274;
          goto LABEL_222;
        }
        v135 = v287[0];
        v136 = (v129 - v287[0]) >> 3;
        v137 = v136 + 1;
        if ((unint64_t)(v136 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v138 = v288 - v287[0];
        if ((v288 - v287[0]) >> 2 > v137)
          v137 = v138 >> 2;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
          v139 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        if (v139)
        {
          v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v288, v139);
          v135 = v287[0];
          v129 = v287[1];
        }
        else
        {
          v140 = 0;
        }
        v144 = (ZinIrKernel *)&v140[8 * v136];
        *(_QWORD *)v144 = v133;
        v134 = (ZinIrKernel *)((char *)v144 + 8);
        if (v129 == v135)
        {
          v55 = v274;
        }
        else
        {
          v55 = v274;
          do
          {
            v145 = *((_QWORD *)v129 - 1);
            v129 = (ZinIrKernel *)((char *)v129 - 8);
            *((_QWORD *)v144 - 1) = v145;
            v144 = (ZinIrKernel *)((char *)v144 - 8);
          }
          while (v129 != v135);
        }
      }
      v287[0] = v144;
      v287[1] = v134;
      v288 = (ZinIrKernel *)&v140[8 * v139];
      if (v135)
        operator delete(v135);
LABEL_222:
      v287[1] = v134;
      v129 = v134;
    }
    v130 += v53;
  }
  while (v130 < v55);
  v128 = (_QWORD *)v314.i64[0];
  if (v314.i64[0])
    goto LABEL_225;
LABEL_226:
  if (v291[0])
  {
    v291[1] = v291[0];
    operator delete(v291[0]);
  }
  v291[0] = v316;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v291);
  if (v308[1])
  {
    v308[2] = v308[1];
    operator delete(v308[1]);
  }
  *(_OWORD *)&v308[1] = *(_OWORD *)v287;
  v308[3] = v288;
LABEL_231:
  v316[0] = 1;
  std::pair<BOOL,ZinMirUnflatten::ShuffleInfo>::pair[abi:ne180100]<BOOL,ZinMirUnflatten::ShuffleInfo&,0>((uint64_t)&v297, v316, (uint64_t)__p);
LABEL_232:
  if (v308[1])
  {
    v308[2] = v308[1];
    operator delete(v308[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!(_BYTE)v297)
    ZinAssertImpl("Error: failed to obtain the shuffling info. Only width in [1, 64] is valid but get %zd", *(_QWORD *)(v272 + 72));
  v147 = (char *)v301;
  v148 = v302;
  if (v301 != v302)
  {
    do
    {
      v150 = (ZinIrKernel **)(*(_QWORD *)v147 + 136);
      v149 = *v150;
      if (*v150)
      {
        if (*((char *)v149 + 23) >= 0)
          v151 = *((unsigned __int8 *)v149 + 23);
        else
          v151 = *((_QWORD *)v149 + 1);
        std::string::basic_string[abi:ne180100]((uint64_t)v316, v151 + 1);
        if (v316[23] >= 0)
          v152 = v316;
        else
          v152 = *(_BYTE **)v316;
        if (v151)
        {
          if (*((char *)v149 + 23) >= 0)
            v153 = v149;
          else
            v153 = *(ZinIrKernel **)v149;
          memmove(v152, v153, v151);
        }
        *(_WORD *)&v152[v151] = 95;
        v154 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v314, "unflat_shuf");
        v155 = std::string::append(v154, "_xfm", 4uLL);
        v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        *(_QWORD *)&v292 = *((_QWORD *)&v155->__r_.__value_.__l + 2);
        *(_OWORD *)v291 = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        if ((SBYTE7(v292) & 0x80u) == 0)
          v157 = v291;
        else
          v157 = (void **)v291[0];
        if ((SBYTE7(v292) & 0x80u) == 0)
          v158 = BYTE7(v292);
        else
          v158 = (std::string::size_type)v291[1];
        v159 = std::string::append((std::string *)v316, (const std::string::value_type *)v157, v158);
        v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
        v308[0] = (void *)v159->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v160;
        v159->__r_.__value_.__l.__size_ = 0;
        v159->__r_.__value_.__r.__words[2] = 0;
        v159->__r_.__value_.__r.__words[0] = 0;
        ZinIrKernel::ShuffleChannels((uint64_t)v149, (__int128 *)__p, (uint64_t)v300, (uint64_t *)v287);
        if (SHIBYTE(v308[0]) < 0)
          operator delete(__p[0]);
        if (SBYTE7(v292) < 0)
          operator delete(v291[0]);
        if (v315 < 0)
          operator delete((void *)v314.i64[0]);
        if ((v316[23] & 0x80000000) != 0)
          operator delete(*(void **)v316);
        v161 = v287[0];
        v287[0] = 0;
        std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v150, v161);
        v162 = v287[0];
        v287[0] = 0;
        if (v162)
        {
          ZinIrKernel::~ZinIrKernel(v162);
          MEMORY[0x20BD002F8]();
        }
      }
      v147 += 8;
    }
    while (v147 != v148);
  }
  v163 = *(_OWORD *)(v268 + 64);
  *(_OWORD *)v316 = *(_OWORD *)(v268 + 48);
  *(_OWORD *)&v316[16] = v163;
  v317 = *(_QWORD *)(v268 + 80);
  v164 = *(_QWORD *)(v272 + 64) * *(_QWORD *)(v272 + 56) * *(_QWORD *)v298;
  *(_QWORD *)&v316[8] = v164;
  if (v299 - (_BYTE *)v298 == 16)
    *(_QWORD *)&v316[8] = *((_QWORD *)v298 + 1) * v164;
  v317 = 1;
  v165 = (char *)v301;
  v166 = v302;
  if (v301 != v302)
  {
    do
    {
      v167 = *(char **)v165;
      v168 = *(_DWORD *)(v268 + 88);
      if (*(char *)(*(_QWORD *)v165 + 47) >= 0)
        v169 = *(unsigned __int8 *)(*(_QWORD *)v165 + 47);
      else
        v169 = *(_QWORD *)(*(_QWORD *)v165 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)v291, v169 + 13);
      if ((SBYTE7(v292) & 0x80u) == 0)
        v170 = v291;
      else
        v170 = (void **)v291[0];
      if (v169)
      {
        if (v167[47] >= 0)
          v171 = v167 + 24;
        else
          v171 = (const void *)*((_QWORD *)v167 + 3);
        memmove(v170, v171, v169);
      }
      strcpy((char *)v170 + v169, "_interleave_0");
      v296 = 0;
      v287[0] = 0;
      v287[1] = 0;
      LODWORD(__p[0]) = 0;
      memset(v308, 0, 20);
      __p[1] = 0;
      ZinIrTensor::CreateTensor(v273, v168, (__int128 *)v316, (__int128 *)v291, &v296, (uint64_t *)v287, (unsigned int *)__p, v314.i64);
      v172 = (std::__shared_weak_count *)v287[1];
      if (v287[1])
      {
        v173 = (unint64_t *)((char *)v287[1] + 8);
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      v175 = v296;
      v296 = 0;
      if (v175)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v296, v175);
      if (SBYTE7(v292) < 0)
        operator delete(v291[0]);
      if (ZinIrTensor::SetInterleave((uint64_t *)v314.i64[0], *(_QWORD *)v298, 1, 1))
        ZinAssertImpl("Error: failed to set the interleave factor");
      v295 = v314;
      if (v314.i64[1])
      {
        v176 = (unint64_t *)(v314.i64[1] + 8);
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
      }
      (*(void (**)(char *, int64x2_t *))(*(_QWORD *)v167 + 24))(v167, &v295);
      v178 = (std::__shared_weak_count *)v295.i64[1];
      if (v295.i64[1])
      {
        v179 = (unint64_t *)(v295.i64[1] + 8);
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
      v181 = (std::__shared_weak_count *)v314.i64[1];
      if (v314.i64[1])
      {
        v182 = (unint64_t *)(v314.i64[1] + 8);
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      v165 += 8;
    }
    while (v165 != v166);
  }
  DimensionOrderHint::DimensionOrderHint(v294, 2);
  if (v299 - (_BYTE *)v298 == 8)
  {
    ZinObjectNameFactory::ZinObjectNameFactory(v291, (char *)v266 + 24);
    v184 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v302 - 1) + 32))(*((_QWORD *)v302 - 1), 0, 0);
    ZinIrTensor::CreateDefaultStride(v269, *(_DWORD *)(v184 + 88), 2, (uint64_t)v294, 64, 1, 1, &v314);
    v185 = (void *)operator new();
    ZinIrTensor::MirInfo::MirInfo(v185, 2, 1, 1, v294, &v314);
    v284 = v185;
    v186 = (_QWORD *)*((_QWORD *)v302 - 1);
    v187 = v186[2];
    (*(void (**)(void **__return_ptr, _QWORD *, _QWORD, _QWORD))(*v186 + 80))(__p, v186, 0, 0);
    v188 = operator new(0x78uLL);
    v287[1] = (ZinIrKernel *)(v188 + 30);
    v288 = (ZinIrKernel *)(v188 + 30);
    v188[28] = v313;
    v189 = v312;
    v190 = v310;
    *((_OWORD *)v188 + 5) = v311;
    *((_OWORD *)v188 + 6) = v189;
    v191 = *(_OWORD *)v308;
    *(_OWORD *)v188 = *(_OWORD *)__p;
    *((_OWORD *)v188 + 1) = v191;
    v192 = v309;
    *((_OWORD *)v188 + 2) = *(_OWORD *)&v308[2];
    *((_OWORD *)v188 + 3) = v192;
    *((_OWORD *)v188 + 4) = v190;
    v287[0] = (ZinIrKernel *)v188;
    v193 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v186 + 32))(v186, 0, 0) + 104);
    if (v193)
      v194 = *(_DWORD *)(v193 + 96);
    else
      v194 = 0;
    v209 = v284;
    v284 = 0;
    v290 = v209;
    Alias = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v187, (uint64_t)v291, (uint64_t)v287, v194, (__int128 *)v269, (uint64_t)&v290);
    v211 = v290;
    v290 = 0;
    if (v211)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v290, v211);
    if (v287[0])
    {
      v287[1] = v287[0];
      operator delete(v287[0]);
    }
    v306 = v271;
    v287[0] = (ZinIrKernel *)&v306;
    v287[1] = (ZinIrKernel *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v287);
    v212 = ZinIrOpLayerGraph::AddNode(v270, Alias, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v308[0] = __p[1];
      operator delete(__p[1]);
    }
    v284 = 0;
    v213 = v212 & ZinIrOpLayerGraph::AddEdge((uint64_t)v270, (uint64_t)v186, (uint64_t)Alias, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v291[0] = off_24C01FBB0;
    if (SHIBYTE(v292) < 0)
      operator delete(v291[1]);
  }
  else
  {
    v292 = *(_OWORD *)&v316[16];
    v293 = v317;
    *(_OWORD *)v291 = *(_OWORD *)v316;
    v291[1] = (void *)(*(_QWORD *)&v316[8] / *(_QWORD *)v298);
    *(_QWORD *)&v292 = *(_QWORD *)&v316[16];
    *((_QWORD *)&v292 + 1) = *(_QWORD *)v298;
    v293 = 1;
    v195 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v302 - 1) + 32))(*((_QWORD *)v302 - 1), 0, 0);
    ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)v291, *(_DWORD *)(v195 + 88), 2, (uint64_t)v294, 64, 1, 1, &v314);
    v196 = operator new();
    ZinIrTensor::MirInfo::MirInfo(v196, 2, 1, 1, v294, &v314);
    v306 = (_QWORD *)v196;
    if (*((char *)v271 + 47) >= 0)
      v197 = *((unsigned __int8 *)v271 + 47);
    else
      v197 = *((_QWORD *)v271 + 4);
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v197 + 8);
    if (SHIBYTE(v308[0]) >= 0)
      v198 = __p;
    else
      v198 = (void **)__p[0];
    if (v197)
    {
      if (*((char *)v271 + 47) >= 0)
        v199 = (char *)v271 + 24;
      else
        v199 = (const void *)*((_QWORD *)v271 + 3);
      memmove(v198, v199, v197);
    }
    strcpy((char *)v198 + v197, "_alias_0");
    ZinObjectNameFactory::ZinObjectNameFactory(v287, __p);
    if (SHIBYTE(v308[0]) < 0)
      operator delete(__p[0]);
    v200 = (_QWORD *)*((_QWORD *)v302 - 1);
    v201 = v200[2];
    (*(void (**)(void **__return_ptr, _QWORD *, _QWORD, _QWORD))(*v200 + 80))(__p, v200, 0, 0);
    v202 = operator new(0x78uLL);
    v285 = (uint64_t)(v202 + 30);
    v286 = (char *)(v202 + 30);
    v202[28] = v313;
    v203 = v312;
    v204 = v310;
    *((_OWORD *)v202 + 5) = v311;
    *((_OWORD *)v202 + 6) = v203;
    v205 = *(_OWORD *)v308;
    *(_OWORD *)v202 = *(_OWORD *)__p;
    *((_OWORD *)v202 + 1) = v205;
    v206 = v309;
    *((_OWORD *)v202 + 2) = *(_OWORD *)&v308[2];
    *((_OWORD *)v202 + 3) = v206;
    *((_OWORD *)v202 + 4) = v204;
    v284 = v202;
    v207 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v200 + 32))(v200, 0, 0) + 104);
    if (v207)
      v208 = *(_DWORD *)(v207 + 96);
    else
      v208 = 0;
    v214 = v306;
    v306 = 0;
    v283 = v214;
    Alias = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v201, (uint64_t)v287, (uint64_t)&v284, v208, (__int128 *)v291, (uint64_t)&v283);
    v215 = v283;
    v283 = 0;
    if (v215)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v283, v215);
    if (v284)
    {
      v285 = (uint64_t)v284;
      operator delete(v284);
    }
    v305 = v271;
    v284 = &v305;
    v285 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v284);
    v216 = ZinIrOpLayerGraph::AddNode(v270, Alias, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v308[0] = __p[1];
      operator delete(__p[1]);
    }
    v217 = ZinIrOpLayerGraph::AddEdge((uint64_t)v270, (uint64_t)v200, (uint64_t)Alias, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v287[0] = (ZinIrKernel *)off_24C01FBB0;
    if (v289 < 0)
      operator delete(v287[1]);
    v213 = v216 & v217;
    v218 = v306;
    v306 = 0;
    if (v218)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v306, v218);
  }
  v219 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Alias + 32))(Alias, 0, 0);
  v220 = v267 & v213;
  if (v299 - (_BYTE *)v298 == 8)
  {
    memset(v281, 0, sizeof(v281));
    v282 = 1065353216;
    v221 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v270, (uint64_t **)v271, Alias, v281);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v281);
    if ((v220 & v221 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v270, v271, 0) & 1) == 0)
      ZinAssertImpl("ANE internal failure: graph manipulation error during unflatten layer decomposition");
  }
  else
  {
    v222 = v219;
    v223 = *(_DWORD *)(v272 + 88);
    if (*((char *)v271 + 47) >= 0)
      v224 = *((unsigned __int8 *)v271 + 47);
    else
      v224 = *((_QWORD *)v271 + 4);
    v225 = v291;
    std::string::basic_string[abi:ne180100]((uint64_t)v291, v224 + 14);
    if (SBYTE7(v292) < 0)
      v225 = (void **)v291[0];
    if (v224)
    {
      if (*((char *)v271 + 47) >= 0)
        v226 = (char *)v271 + 24;
      else
        v226 = (const void *)*((_QWORD *)v271 + 3);
      memmove(v225, v226, v224);
    }
    strcpy((char *)v225 + v224, "_enforced_copy");
    v280 = 0;
    v314 = 0uLL;
    LODWORD(__p[0]) = 0;
    __p[1] = 0;
    memset(v308, 0, 20);
    ZinIrTensor::CreateTensor(v273, v223, (__int128 *)(v222 + 48), (__int128 *)v291, &v280, v314.i64, (unsigned int *)__p, (uint64_t *)&v284);
    v227 = (std::__shared_weak_count *)v314.i64[1];
    if (v314.i64[1])
    {
      v228 = (unint64_t *)(v314.i64[1] + 8);
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
      }
    }
    v230 = v280;
    v280 = 0;
    if (v230)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v280, v230);
    if (SBYTE7(v292) < 0)
      operator delete(v291[0]);
    if (ZinIrTensor::SetInterleave((uint64_t *)v284, *((_QWORD *)v298 + 1), 1, 1))
      ZinAssertImpl("Error: failed to set the interleave factor");
    v231 = (ZinIrCopyInfo *)operator new();
    ZinIrCopyInfo::ZinIrCopyInfo(v231);
    v306 = v231;
    v232 = (ZinIrOpLayer *)operator new();
    v278 = v284;
    v279 = (std::__shared_weak_count *)v285;
    if (v285)
    {
      v233 = (unint64_t *)(v285 + 8);
      do
        v234 = __ldxr(v233);
      while (__stxr(v234 + 1, v233));
    }
    if (*((char *)v271 + 47) >= 0)
      v235 = *((unsigned __int8 *)v271 + 47);
    else
      v235 = *((_QWORD *)v271 + 4);
    v236 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v235 + 14);
    if (SHIBYTE(v308[0]) < 0)
      v236 = (void **)__p[0];
    if (v235)
    {
      if (*((char *)v271 + 47) >= 0)
        v237 = (char *)v271 + 24;
      else
        v237 = (const void *)*((_QWORD *)v271 + 3);
      memmove(v236, v237, v235);
    }
    strcpy((char *)v236 + v235, "_enforced_copy");
    ZinCopyLayer::ZinCopyLayer(v232, &v306, &v278, __p);
    if (SHIBYTE(v308[0]) < 0)
      operator delete(__p[0]);
    v238 = v279;
    if (v279)
    {
      p_shared_owners = (unint64_t *)&v279->__shared_owners_;
      do
        v240 = __ldaxr(p_shared_owners);
      while (__stlxr(v240 - 1, p_shared_owners));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    v314.i64[0] = (uint64_t)v271;
    v291[0] = &v314;
    v291[1] = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v291);
    v241 = ZinIrOpLayerGraph::AddNode(v270, v232, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v308[0] = __p[1];
      operator delete(__p[1]);
    }
    v242 = ZinIrOpLayerGraph::AddEdge((uint64_t)v270, (uint64_t)Alias, (uint64_t)v232, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    ZinObjectNameFactory::ZinObjectNameFactory(v291, (char *)v271 + 24);
    v243 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v232 + 32))(v232, 0, 0);
    ZinIrTensor::CreateDefaultStride(v269, *(_DWORD *)(v243 + 88), 2, (uint64_t)v294, 64, 1, 1, &v314);
    v244 = operator new();
    ZinIrTensor::MirInfo::MirInfo(v244, 2, 1, 1, v294, &v314);
    v305 = (_QWORD *)v244;
    v245 = *((_QWORD *)v232 + 2);
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v232 + 80))(__p, v232, 0, 0);
    v246 = operator new(0x78uLL);
    v287[1] = (ZinIrKernel *)(v246 + 30);
    v288 = (ZinIrKernel *)(v246 + 30);
    v246[28] = v313;
    v247 = v312;
    v248 = v310;
    *((_OWORD *)v246 + 5) = v311;
    *((_OWORD *)v246 + 6) = v247;
    v249 = *(_OWORD *)v308;
    *(_OWORD *)v246 = *(_OWORD *)__p;
    *((_OWORD *)v246 + 1) = v249;
    v250 = v309;
    *((_OWORD *)v246 + 2) = *(_OWORD *)&v308[2];
    *((_OWORD *)v246 + 3) = v250;
    *((_OWORD *)v246 + 4) = v248;
    v287[0] = (ZinIrKernel *)v246;
    v251 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v232 + 32))(v232, 0, 0)+ 104);
    if (v251)
      v252 = *(_DWORD *)(v251 + 96);
    else
      v252 = 0;
    v253 = v305;
    v305 = 0;
    v277 = v253;
    v254 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v245, (uint64_t)v291, (uint64_t)v287, v252, (__int128 *)v269, (uint64_t)&v277);
    v255 = v277;
    v277 = 0;
    if (v255)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v277, v255);
    if (v287[0])
    {
      v287[1] = v287[0];
      operator delete(v287[0]);
    }
    v304 = v271;
    v287[0] = (ZinIrKernel *)&v304;
    v287[1] = (ZinIrKernel *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v287);
    v256 = ZinIrOpLayerGraph::AddNode(v270, v254, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v308[0] = __p[1];
      operator delete(__p[1]);
    }
    v257 = ZinIrOpLayerGraph::AddEdge((uint64_t)v270, (uint64_t)v232, (uint64_t)v254, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    memset(v275, 0, sizeof(v275));
    v276 = 1065353216;
    v258 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v270, (uint64_t **)v271, v254, v275);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v275);
    if ((v220 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v270, v271, 0) & v241 & v242 & v256 & v257 & v258 & 1) == 0)
      ZinAssertImpl("ANE internal failure: graph manipulation error during unflatten layer decomposition");
    v259 = v305;
    v305 = 0;
    if (v259)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v305, v259);
    v291[0] = off_24C01FBB0;
    if (SHIBYTE(v292) < 0)
      operator delete(v291[1]);
    v260 = v306;
    v306 = 0;
    if (v260)
      (*(void (**)(_QWORD *))(*v260 + 8))(v260);
    v261 = (std::__shared_weak_count *)v285;
    if (v285)
    {
      v262 = (unint64_t *)(v285 + 8);
      do
        v263 = __ldaxr(v262);
      while (__stlxr(v263 - 1, v262));
      if (!v263)
      {
        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
        std::__shared_weak_count::__release_weak(v261);
      }
    }
  }
  if (v294[0])
  {
    v294[1] = v294[0];
    operator delete(v294[0]);
  }
  if (v300[0])
  {
    v300[1] = v300[0];
    operator delete(v300[0]);
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  if (v301)
  {
    v302 = (char *)v301;
    operator delete(v301);
  }
  return 0;
}

void sub_207023548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  ANEDebugInfo::DebugInfoInMem::Group::~Group((ANEDebugInfo::DebugInfoInMem::Group *)&STACK[0x200]);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<BOOL,ZinMirUnflatten::ShuffleInfo>::~pair(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::pair<BOOL,ZinMirUnflatten::ShuffleInfo>::pair[abi:ne180100]<BOOL,ZinMirUnflatten::ShuffleInfo&,0>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  *(_BYTE *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 8), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 32), *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3);
  return a1;
}

void sub_207023BBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ANECGetCompilerInputs(const __CFDictionary *a1, void **a2, CFArrayRef *a3)
{
  const __CFString *v6;
  NSObject *v7;
  __CFDictionary *v8;
  CFArrayRef theArray;
  uint64_t v10;
  uint8_t buf[4];
  const __CFString *v12;
  __int16 v13;
  const __CFString *v14;
  __int16 v15;
  const __CFString *v16;
  __int16 v17;
  const __CFString *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  theArray = 0;
  v10 = 0;
  v8 = 0;
  ANECGetArray(a1, CFSTR("InputNetworks"), &v10, &theArray);
  if (v10 != 1 || ANECGetArrayElem(theArray, 0, &v8))
  {
    v6 = CFSTR("UnsupportedFeature");
LABEL_4:
    ZinIrPlistCompilationStatus::SetError(a3, v6);
    return;
  }
  if (!ANECGetFileName(v8, CFSTR("NetworkPlistName"), CFSTR("NetworkPlistPath"), a2))
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      goto LABEL_15;
    *(_DWORD *)buf = 138413058;
    v12 = CFSTR("NetworkPlistName");
    v13 = 2112;
    v14 = CFSTR("NetworkPlistPath");
    v15 = 2112;
    v16 = CFSTR("NetworkSourceFileName");
    v17 = 2112;
    v18 = CFSTR("NetworkSourcePath");
    v7 = MEMORY[0x24BDACB70];
LABEL_14:
    _os_log_impl(&dword_2069AB000, v7, OS_LOG_TYPE_INFO, "ANEC Compiler Input used legacy key names '%@' '%@' - please update to use '%@' '%@'", buf, 0x2Au);
    goto LABEL_15;
  }
  if (!ANECGetFileName(v8, CFSTR("NetworkMILName"), CFSTR("NetworkMILPath"), a2))
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      goto LABEL_15;
    *(_DWORD *)buf = 138413058;
    v12 = CFSTR("NetworkMILName");
    v13 = 2112;
    v14 = CFSTR("NetworkMILPath");
    v15 = 2112;
    v16 = CFSTR("NetworkSourceFileName");
    v17 = 2112;
    v18 = CFSTR("NetworkSourcePath");
    v7 = MEMORY[0x24BDACB70];
    goto LABEL_14;
  }
  if (ANECGetFileName(v8, CFSTR("NetworkSourceFileName"), CFSTR("NetworkSourcePath"), a2))
  {
    v6 = CFSTR("InvalidNetworkSourceFileName");
    goto LABEL_4;
  }
LABEL_15:
  if (ANECGetFileName(a1, CFSTR("OutputFileName"), CFSTR("OutputFilePath"), a2 + 3))
  {
    v6 = CFSTR("InvalidMachOFileName");
    goto LABEL_4;
  }
}

void ANECGetJITCompilerInputs(const __CFDictionary *a1, void **a2, int *a3, CFArrayRef *a4)
{
  NSObject *v8;
  const char *v9;
  const __CFNumber *Value;
  const __CFNumber *v11;
  CFTypeID v12;
  uint8_t v13[8];
  CFDictionaryRef theDict;
  CFArrayRef theArray;
  uint64_t v16;

  theArray = 0;
  v16 = 0;
  theDict = 0;
  ANECGetArray(a1, CFSTR("InputNetworks"), &v16, &theArray);
  if (v16 != 1 || ANECGetArrayElem(theArray, 0, &theDict))
  {
    ZinIrPlistCompilationStatus::SetError(a4, CFSTR("UnsupportedFeature"));
    return;
  }
  if (ANECGetFileName(theDict, CFSTR("NetworkSourceFileName"), CFSTR("NetworkSourcePath"), a2))
  {
    ZinIrPlistCompilationStatus::SetError(a4, CFSTR("InvalidNetworkSourceFileName"));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      v8 = MEMORY[0x24BDACB70];
      v9 = "ANEC JIT Compiler Input is missing the input AOT file information";
LABEL_17:
      _os_log_impl(&dword_2069AB000, v8, OS_LOG_TYPE_INFO, v9, v13, 2u);
    }
  }
  else if (ANECGetFileName(theDict, CFSTR("NetworkJITShapesName"), CFSTR("NetworkJITShapesPath"), a2 + 6))
  {
    ZinIrPlistCompilationStatus::SetError(a4, CFSTR("InvalidJITShapesFileName"));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      v8 = MEMORY[0x24BDACB70];
      v9 = "ANEC JIT Compiler Input is missing the JIT shapes file information";
      goto LABEL_17;
    }
  }
  else
  {
    *a3 = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NetworkProcedureIndex"));
    if (Value)
    {
      v11 = Value;
      v12 = CFGetTypeID(Value);
      if (v12 == CFNumberGetTypeID())
        CFNumberGetValue(v11, kCFNumberSInt32Type, a3);
    }
    if (ANECGetFileName(a1, CFSTR("OutputFileName"), CFSTR("OutputFilePath"), a2 + 3))
    {
      ZinIrPlistCompilationStatus::SetError(a4, CFSTR("InvalidMachOFileName"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v13 = 0;
        v8 = MEMORY[0x24BDACB70];
        v9 = "ANEC JIT Compiler Input is missing the output JIT file information";
        goto LABEL_17;
      }
    }
  }
}

unint64_t ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_1::operator()(const __CFArray *a1, unint64_t *a2, int a3)
{
  unint64_t result;
  unint64_t i;
  const __CFString *ValueAtIndex;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  std::string *v13;
  std::string *v14;
  void *__p[2];
  uint64_t v16;

  result = CFArrayGetCount(a1);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
      __p[0] = 0;
      __p[1] = 0;
      v16 = 0;
      ZinGetString(ValueAtIndex, (uint64_t)__p);
      if (a3)
      {
        v9 = a2[4];
        if (v9 >= a2[5])
        {
          v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)(a2 + 3), (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v16) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)a2[4], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v10 = *(_OWORD *)__p;
            *(_QWORD *)(v9 + 16) = v16;
            *(_OWORD *)v9 = v10;
          }
          v13 = (std::string *)(v9 + 24);
          a2[4] = v9 + 24;
        }
        a2[4] = (unint64_t)v13;
      }
      else
      {
        v11 = a2[7];
        if (v11 >= a2[8])
        {
          v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)(a2 + 6), (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v16) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)a2[7], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v12 = *(_OWORD *)__p;
            *(_QWORD *)(v11 + 16) = v16;
            *(_OWORD *)v11 = v12;
          }
          v14 = (std::string *)(v11 + 24);
          a2[7] = v11 + 24;
        }
        a2[7] = (unint64_t)v14;
      }
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      result = CFArrayGetCount(a1);
    }
  }
  return result;
}

void sub_207024160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 56) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ZinIrCompilerParameters::SubGraphSpec>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ZinIrCompilerParameters::SubGraphSpec>::__push_back_slow_path<ZinIrCompilerParameters::SubGraphSpec const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,ZinIrCompilerParameters::SubGraphSpec const&,ZinIrCompilerParameters::SubGraphSpec*>(a1[1], a2);
    result = v3 + 96;
    a1[1] = v3 + 96;
  }
  a1[1] = result;
  return result;
}

void sub_2070241DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_2::operator()(CFDictionaryRef *a1, uint64_t a2)
{
  __CFString *Value;
  __CFString *v4;
  CFTypeID v5;
  CFIndex Length;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  _BOOL8 result;
  uint64_t v13;
  CFStringRef v14;
  __CFString *v15;
  CFRange v16;
  CFRange v17;
  CFRange v18;
  CFRange v19;
  CFRange v20;
  CFRange v21;

  Value = (__CFString *)CFDictionaryGetValue(*a1, CFSTR("SpatialSplitMode"));
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID())
    {
      v15 = v4;
      Length = CFStringGetLength(v4);
      if (Length != CFStringGetLength(CFSTR("Memory"))
        || (v16.length = CFStringGetLength(v4),
            v16.location = 0,
            CFStringCompareWithOptions(v4, CFSTR("Memory"), v16, 1uLL)))
      {
        v7 = CFStringGetLength(v4);
        if (v7 != CFStringGetLength(CFSTR("Auto"))
          || (v17.length = CFStringGetLength(v4),
              v17.location = 0,
              CFStringCompareWithOptions(v4, CFSTR("Auto"), v17, 1uLL)))
        {
          v8 = CFStringGetLength(v4);
          if (v8 != CFStringGetLength(CFSTR("Test"))
            || (v18.length = CFStringGetLength(v4),
                v18.location = 0,
                CFStringCompareWithOptions(v4, CFSTR("Test"), v18, 1uLL)))
          {
            v9 = CFStringGetLength(v4);
            if (v9 != CFStringGetLength(CFSTR("GenericDAG"))
              || (v19.length = CFStringGetLength(v4),
                  v19.location = 0,
                  CFStringCompareWithOptions(v4, CFSTR("GenericDAG"), v19, 1uLL)))
            {
              v10 = CFStringGetLength(v4);
              if (v10 != CFStringGetLength(CFSTR("GenericDAGExperimental"))
                || (v20.length = CFStringGetLength(v4),
                    v20.location = 0,
                    CFStringCompareWithOptions(v4, CFSTR("GenericDAGExperimental"), v20, 1uLL)))
              {
                v11 = CFStringGetLength(v4);
                if (v11 != CFStringGetLength(CFSTR("GenericDAGMemory"))
                  || (v21.length = CFStringGetLength(v4),
                      v21.location = 0,
                      CFStringCompareWithOptions(v4, CFSTR("GenericDAGMemory"), v21, 1uLL)))
                {
                  v14 = CFSTR("Disabled");
                  result = ZinCompareCFStringRef((CFStringRef *)&v15, &v14);
                  if (!result)
                    return result;
                  v4 = v15;
                }
              }
            }
          }
        }
      }
      LODWORD(v14) = CFStringRefToSpatialSplitMode(v4);
      v13 = *(_QWORD *)(a2 + 24);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, CFStringRef *))(*(_QWORD *)v13 + 48))(v13, &v14);
    }
  }
  return 1;
}

uint64_t ANECCreateProcedureInfoForSingleProcedureNetwork(const __CFDictionary *a1, ANECProcedureInfo *a2, CFArrayRef *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *Value;
  const void *v15;
  CFTypeID v16;
  const void *ValueAtIndex;
  const void *v18;
  CFTypeID v19;
  const void *v20;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef cf;

  cf = 0;
  if ((ZinAneCreateSanitizedPlist(a1, (const __CFDictionary **)&cf) & 1) != 0)
  {
    if (cf)
    {
      ANECProcedureInfo::SetANECIRDict((const void **)a2, cf);
      CFRelease(cf);
    }
    else
    {
      ANECProcedureInfo::SetANECIRDict((const void **)a2, a1);
    }
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)a2, CFSTR("Networks"));
    if (Value)
    {
      v15 = Value;
      v16 = CFGetTypeID(Value);
      if (v16 == CFArrayGetTypeID())
        Value = v15;
      else
        Value = 0;
    }
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, 0);
    if (ValueAtIndex)
    {
      v18 = ValueAtIndex;
      v19 = CFGetTypeID(ValueAtIndex);
      if (v19 == CFStringGetTypeID())
        v20 = v18;
      else
        v20 = 0;
    }
    else
    {
      v20 = 0;
    }
    v21 = CFDictionaryGetValue(*(CFDictionaryRef *)a2, v20);
    if (v21)
    {
      v22 = v21;
      v23 = CFGetTypeID(v21);
      if (v23 == CFDictionaryGetTypeID())
        v21 = v22;
      else
        v21 = 0;
    }
    if ((ZinAneCreateNameMaps((const __CFDictionary *)v21, (uint64_t **)a2 + 1, (uint64_t **)a2 + 4, (uint64_t **)a2 + 7) & 1) != 0)
      return 1;
    v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v25)
      ANECCreateProcedureInfoForSingleProcedureNetwork(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  else
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ANECCreateProcedureInfoForSingleProcedureNetwork(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  ZinIrPlistCompilationStatus::SetError(a3, CFSTR("CompilationFailure"));
  return 0;
}

void ANECProcedureInfo::SetANECIRDict(const void **this, CFTypeRef cf)
{
  const void *v4;

  v4 = *this;
  if (v4)
    CFRelease(v4);
  *this = cf;
  if (cf)
    CFRetain(cf);
}

uint64_t ANECCreateProcedureInfoForMultiProcedureNetwork(const __CFDictionary *a1, unsigned int a2, const void **a3, CFArrayRef *a4)
{
  __CFDictionary *ProcedureDict;
  __CFDictionary *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef cf;

  cf = 0;
  ProcedureDict = ZinAneCreateProcedureDict(a1, a2, (uint64_t)(a3 + 1), (uint64_t)(a3 + 4), (uint64_t)(a3 + 7), a4);
  if (!ProcedureDict)
    goto LABEL_4;
  v7 = ProcedureDict;
  if (CFArrayGetCount(a4[4]) >= 1)
  {
    CFRelease(v7);
LABEL_4:
    v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v8)
      ANECCreateProcedureInfoForMultiProcedureNetwork(v8, v9, v10, v11, v12, v13, v14, v15);
LABEL_6:
    ZinIrPlistCompilationStatus::SetError(a4, CFSTR("CompilationFailure"));
    return 0;
  }
  if ((ZinAneCreateSanitizedPlist(v7, (const __CFDictionary **)&cf) & 1) == 0)
  {
    if (cf)
      CFRelease(cf);
    CFRelease(v7);
    v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v18)
      ANECCreateProcedureInfoForMultiProcedureNetwork(v18, v19, v20, v21, v22, v23, v24, v25);
    goto LABEL_6;
  }
  if (cf)
    v17 = cf;
  else
    v17 = v7;
  ANECProcedureInfo::SetANECIRDict(a3, v17);
  if (cf)
    CFRelease(cf);
  CFRelease(v7);
  return 1;
}

const void *ANECCreateCompilerPlistDictionaryFromANECIR(uint64_t *a1, CFArrayRef *a2)
{
  _QWORD *v3;
  char *v4;
  CFPropertyListRef DictFromPlist;
  const void *v6;
  CFTypeID v7;

  v3 = a1;
  v4 = (char *)a1 + 23;
  if (*((char *)a1 + 23) < 0)
    a1 = (uint64_t *)*a1;
  DictFromPlist = ZinCreateDictFromPlist((const char *)a1);
  if (!DictFromPlist)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ANECCreateCompilerPlistDictionaryFromANECIR(v4, v3);
    goto LABEL_8;
  }
  v6 = DictFromPlist;
  v7 = CFGetTypeID(DictFromPlist);
  if (v7 != CFDictionaryGetTypeID())
  {
    CFRelease(v6);
LABEL_8:
    ZinIrPlistCompilationStatus::SetError(a2, CFSTR("InvalidNetworkSourceFileName"));
    return 0;
  }
  return v6;
}

void ANECCreatePrepareInfoFromANECIR(const ZinIrCompilerParameters *a1@<X0>, CFArrayRef *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  const void *v7;
  char ProcedureCount;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[3];
  void *__p;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;

  if (*((char *)a1 + 23) >= 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, v6);
  v7 = ANECCreateCompilerPlistDictionaryFromANECIR((uint64_t *)&__p, a2);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  if (CFArrayGetCount(a2[4]) >= 1)
  {
    if (v7)
      CFRelease(v7);
    *(_QWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  v40 = 0;
  ProcedureCount = ZinAnePlistGetProcedureCount((const __CFDictionary *)v7, &v40);
  v34 = 0uLL;
  v35 = 0;
  ZinIdentStrings::ZinIdentStrings((ZinIdentStrings *)&v36, (const __CFDictionary *)v7, a1);
  if ((ProcedureCount & 1) != 0)
  {
    memset(v14, 0, sizeof(v14));
    if (v40)
    {
      LODWORD(v9) = 0;
      while (1)
      {
        v17 = 0;
        v18 = 0;
        __p = 0;
        v16 = &v17;
        v20 = 0;
        v21 = 0;
        v23 = 0;
        v24 = 0;
        v19 = &v20;
        v22 = &v23;
        v25 = 0;
        v26 = 0;
        v28 = 0;
        v29 = 0;
        v31 = 0;
        v32 = 0;
        v27 = &v28;
        v30 = &v31;
        v33 = 0;
        if ((ANECCreateProcedureInfoForMultiProcedureNetwork((const __CFDictionary *)v7, v9, (const void **)&__p, a2) & 1) == 0)
          break;
        v10 = *((_QWORD *)&v34 + 1);
        if (*((_QWORD *)&v34 + 1) >= v35)
        {
          v11 = std::vector<ANECProcedureInfo>::__emplace_back_slow_path<ANECProcedureInfo>((uint64_t *)&v34, (const ANECProcedureInfo *)&__p);
        }
        else
        {
          ANECProcedureInfo::ANECProcedureInfo(*((ANECProcedureInfo **)&v34 + 1), (const ANECProcedureInfo *)&__p);
          v11 = v10 + 168;
        }
        *((_QWORD *)&v34 + 1) = v11;
        ANECProcedureInfo::~ANECProcedureInfo((char **)&__p);
        v9 = (v9 + 1);
        if (v40 <= v9)
          goto LABEL_18;
      }
      if (v7)
        CFRelease(v7);
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      ANECProcedureInfo::~ANECProcedureInfo((char **)&__p);
      __p = v14;
      std::vector<ANECProcedureInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_31;
    }
LABEL_18:
    __p = v14;
    std::vector<ANECProcedureInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    v17 = 0;
    v18 = 0;
    __p = 0;
    v16 = &v17;
    v19 = &v20;
    v20 = 0;
    v23 = 0;
    v24 = 0;
    v21 = 0;
    v22 = &v23;
    v25 = 0;
    v26 = 0;
    v27 = &v28;
    v28 = 0;
    v31 = 0;
    v32 = 0;
    v29 = 0;
    v30 = &v31;
    v33 = 0;
    if ((ANECCreateProcedureInfoForSingleProcedureNetwork((const __CFDictionary *)v7, (ANECProcedureInfo *)&__p, a2) & 1) == 0)
    {
      if (v7)
        CFRelease(v7);
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      ANECProcedureInfo::~ANECProcedureInfo((char **)&__p);
      goto LABEL_31;
    }
    v12 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) >= v35)
    {
      v13 = std::vector<ANECProcedureInfo>::__emplace_back_slow_path<ANECProcedureInfo>((uint64_t *)&v34, (const ANECProcedureInfo *)&__p);
    }
    else
    {
      ANECProcedureInfo::ANECProcedureInfo(*((ANECProcedureInfo **)&v34 + 1), (const ANECProcedureInfo *)&__p);
      v13 = v12 + 168;
    }
    *((_QWORD *)&v34 + 1) = v13;
    ANECProcedureInfo::~ANECProcedureInfo((char **)&__p);
  }
  CFRelease(v7);
  *(_OWORD *)a3 = v34;
  *(_QWORD *)(a3 + 16) = v35;
  v34 = 0uLL;
  *(_OWORD *)(a3 + 24) = v36;
  *(_QWORD *)(a3 + 40) = v37;
  v36 = 0uLL;
  v37 = 0;
  *(_OWORD *)(a3 + 48) = v38;
  *(_QWORD *)(a3 + 64) = v39;
  v35 = 0;
  v38 = 0uLL;
  v39 = 0;
LABEL_31:
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  __p = &v34;
  std::vector<ANECProcedureInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_207024AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  ANECProcedureInfo::~ANECProcedureInfo(&__p);
  __p = &a11;
  std::vector<ANECProcedureInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  ANECPrepareInfo::~ANECPrepareInfo((void **)(v19 - 176));
  _Unwind_Resume(a1);
}

uint64_t ANECGetAdditionalWeightFileName@<X0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  uint64_t result;
  void *v5;
  const void *v6;

  if (*((char *)a1 + 23) >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (size_t)a1[1];
  result = std::string::basic_string[abi:ne180100](a2, v3 + 23);
  if (*(char *)(result + 23) >= 0)
    v5 = (void *)result;
  else
    v5 = *(void **)result;
  if (v3)
  {
    if (*((char *)a1 + 23) >= 0)
      v6 = a1;
    else
      v6 = *a1;
    result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, ".additional_weights.bin");
  return result;
}

float ANECDescToUnitInfo<ANECNeuronLayerDesc,ZinIrNeuronUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int128 v7;
  float result;
  const char *v9;
  _QWORD v10[2];
  uint64_t v11;

  *(_DWORD *)(a4 + 32) = 6;
  *(_DWORD *)(a4 + 68) = a5;
  if (!CFStringToZinIrNeuronType(*(_QWORD *)a1, (int *)(a4 + 80)))
  {
    v10[0] = 0;
    v10[1] = 0;
    v11 = 0;
    if ((ZinGetString(*(CFStringRef *)a1, (uint64_t)v10) & 1) != 0)
    {
      v9 = (const char *)v10;
      if (v11 < 0)
        v9 = (const char *)v10[0];
      ZinAssertImpl("Could not convert neuron type \"%s\" to ZinIrNeuronType.", v9);
    }
    ZinAssertImpl("Could not retrieve neuron type from neuron unit");
  }
  ZinF16CheckInBounds(*(float *)(a1 + 8));
  ZinF16CheckInBounds(*(float *)(a1 + 12));
  ZinF16CheckInBounds(*(float *)(a1 + 16));
  ZinF16CheckInBounds(*(float *)(a1 + 20));
  ZinF16CheckInBounds(*(float *)(a1 + 24));
  ZinF16CheckInBounds(*(float *)(a1 + 28));
  ZinF16CheckInBounds(*(float *)(a1 + 32));
  *(_QWORD *)&v7 = vrev64q_s32(*(int32x4_t *)(a1 + 8)).u64[0];
  *((_QWORD *)&v7 + 1) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 84) = v7;
  *(_QWORD *)(a4 + 100) = *(_QWORD *)(a1 + 24);
  result = *(float *)(a1 + 32);
  *(float *)(a4 + 108) = result;
  return result;
}

void sub_207024CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t ANECDescToUnitInfo<ANECSpaceToChannelLayerDesc,ZinIrSpaceToChannelUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  int32x2_t result;

  a4[4].i32[0] = 36;
  a4[8].i32[1] = a5;
  a4[11].i32[0] = a1[1].i64[0];
  result = vmovn_s64(*a1);
  a4[10] = result;
  return result;
}

_QWORD *ANECDescToUnitInfo<ANECInstanceNormLayerDesc,ZinIrInstanceNormUnitInfo>(_QWORD *result, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  a4[8] = 25;
  a4[17] = a5;
  a4[30] = *((_DWORD *)result + 12);
  if (*result)
  {
    v5 = result;
    v6 = a4 + 20;
    v7 = 1;
    do
    {
      v14 = 0;
      if ((CFStringToZinIrDimension(v5[v7], &v14) & 1) == 0)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        if ((ZinGetString((CFStringRef)v5[v7], (uint64_t)&v11) & 1) != 0)
        {
          v10 = (const char *)&v11;
          if (v13 < 0)
            v10 = v11;
          ZinAssertImpl("Error: Invalid dimension:%s setting in the instance norm layer descriptor", v10);
        }
        ZinAssertImpl("Error: cannot extract the instance_norm dimension string from the InstanceNorm Layer Descriptor");
      }
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v6, &v14))
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        if ((ZinGetString((CFStringRef)v5[v7], (uint64_t)&v11) & 1) != 0)
        {
          v9 = (const char *)&v11;
          if (v13 < 0)
            v9 = v11;
          ZinAssertImpl("Error: duplicated dimension setting, %s, in InstanceNorm", v9);
        }
        ZinAssertImpl("Error: cannot extract the instance_norm dimension string from the InstanceNorm Layer Descriptor");
      }
      result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>((uint64_t)v6, &v14, &v14);
    }
    while (*v5 > v7++);
  }
  return result;
}

void sub_207024E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t ANECDescToUnitInfo<ANECChannelToSpaceLayerDesc,ZinIrChannelToSpaceUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  int32x2_t result;

  a4[4].i32[0] = 37;
  a4[8].i32[1] = a5;
  a4[11].i32[0] = a1[1].i64[0];
  result = vmovn_s64(*a1);
  a4[10] = result;
  return result;
}

uint64_t ANECDescToUnitInfo<ANECDynamicSliceLayerDesc,ZinIrDynamicSliceUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char **v7;
  char **v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  int v45;
  int v46;

  *(_DWORD *)(a4 + 32) = 47;
  *(_DWORD *)(a4 + 68) = a5;
  ANECTextureInfoToZin(a1 + 128, *(_QWORD *)a1, (void **)(a4 + 104));
  ANECTextureInfoToZin(a1 + 8, *(_QWORD *)a1, a4 + 80);
  v7 = (char **)(a4 + 184);
  *(_QWORD *)(a4 + 192) = *(_QWORD *)(a4 + 184);
  v8 = (char **)(a4 + 160);
  *(_QWORD *)(a4 + 168) = *(_QWORD *)(a4 + 160);
  if (*(_QWORD *)a1)
  {
    v9 = 0;
    do
    {
      v46 = 0;
      v10 = a1 + 16 * v9;
      if (!CFStringToZinIrCoordinate(*(_QWORD *)(v10 + 248), &v46))
        ZinAssertImpl("Invalid slice size information");
      v11 = v46;
      v12 = *(int *)(v10 + 256);
      v13 = *(_QWORD *)(a4 + 168);
      v14 = *(_QWORD *)(a4 + 176);
      if (v13 >= v14)
      {
        v16 = (uint64_t)(v13 - (_QWORD)*v8) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v18 = v14 - (_QWORD)*v8;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>(a4 + 176, v19);
        else
          v20 = 0;
        v21 = &v20[16 * v16];
        *(_DWORD *)v21 = v11;
        *((_DWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 1) = v12;
        v23 = *(char **)(a4 + 160);
        v22 = *(char **)(a4 + 168);
        v24 = v21;
        if (v22 != v23)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
            v24 -= 16;
            v22 -= 16;
          }
          while (v22 != v23);
          v22 = *v8;
        }
        v15 = v21 + 16;
        *(_QWORD *)(a4 + 160) = v24;
        *(_QWORD *)(a4 + 168) = v21 + 16;
        *(_QWORD *)(a4 + 176) = &v20[16 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_DWORD *)v13 = v46;
        *(_DWORD *)(v13 + 4) = 0;
        v15 = (char *)(v13 + 16);
        *(_QWORD *)(v13 + 8) = v12;
      }
      *(_QWORD *)(a4 + 168) = v15;
      v45 = 0;
      if (!CFStringToZinIrCoordinate(*(_QWORD *)(a1 + 8 * v9 + 208), &v45))
        ZinAssertImpl("Invalid offset order information");
      v25 = v45;
      v26 = *(_QWORD *)(a4 + 192);
      v27 = *(_QWORD *)(a4 + 200);
      if (v26 >= v27)
      {
        v29 = (uint64_t)(v26 - (_QWORD)*v7) >> 4;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v31 = v27 - (_QWORD)*v7;
        if (v31 >> 3 > v30)
          v30 = v31 >> 3;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
          v32 = 0xFFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>(a4 + 200, v32);
        else
          v33 = 0;
        v34 = &v33[16 * v29];
        *(_DWORD *)v34 = v25;
        *((_DWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 1) = v9;
        v36 = *(char **)(a4 + 184);
        v35 = *(char **)(a4 + 192);
        v37 = v34;
        if (v35 != v36)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
            v37 -= 16;
            v35 -= 16;
          }
          while (v35 != v36);
          v35 = *v7;
        }
        v28 = v34 + 16;
        *(_QWORD *)(a4 + 184) = v37;
        *(_QWORD *)(a4 + 192) = v34 + 16;
        *(_QWORD *)(a4 + 200) = &v33[16 * v32];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_DWORD *)v26 = v45;
        *(_DWORD *)(v26 + 4) = 0;
        v28 = (char *)(v26 + 16);
        *(_QWORD *)(v26 + 8) = v9;
      }
      *(_QWORD *)(a4 + 192) = v28;
      ++v9;
    }
    while (v9 < *(_QWORD *)a1);
  }
  _S0 = *(_DWORD *)(a1 + 328);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 152) = _S0;
  return ZinLayerValidationUtils::ValidateBackgroundPadding(a4, a5);
}

uint64_t ANECDescToUnitInfo<ANECInputViewLayerDesc,ZinIrInputViewUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  const char *v7;
  _QWORD v8[2];
  uint64_t v9;

  *(_DWORD *)(a4 + 32) = 17;
  *(_DWORD *)(a4 + 68) = a5;
  *(_QWORD *)(a4 + 80) = *(_QWORD *)a1;
  *(_DWORD *)(a4 + 88) = *(_DWORD *)(a1 + 8);
  result = CFStringToZinIrDimension(*(_QWORD *)(a1 + 16), a4 + 92);
  if ((result & 1) == 0)
  {
    v8[0] = 0;
    v8[1] = 0;
    v9 = 0;
    if ((ZinGetString(*(CFStringRef *)(a1 + 16), (uint64_t)v8) & 1) != 0)
    {
      v7 = (const char *)v8;
      if (v9 < 0)
        v7 = (const char *)v8[0];
      ZinAssertImpl("Error: cannot parse InputView dimension \"%s\"", v7);
    }
    ZinAssertImpl("Error: cannot extract the view dimension string from the InputView Layer Descriptor");
  }
  return result;
}

void sub_2070251D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t ANECDescToUnitInfo<ANECPixelShuffleLayerDesc,ZinIrPixelShuffleUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  int32x2_t result;

  result = vmovn_s64(*a1);
  a4[10] = result;
  a4[11].i32[0] = a1[1].i64[0];
  a4[8].i32[1] = a5;
  return result;
}

_QWORD *ANECDescToUnitInfo<ANECSoftmaxLayerDesc,ZinIrSoftmaxUnitInfo>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  _QWORD *result;
  unint64_t v9;
  unint64_t v10;
  int v11;

  *(_DWORD *)(a4 + 32) = 24;
  *(_DWORD *)(a4 + 68) = a5;
  v7 = a4 + 80;
  result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)(a4 + 80));
  if (*a1)
  {
    v9 = 0;
    do
    {
      v10 = a1[v9 + 1];
      v11 = 0;
      if ((CFStringToZinIrDimension(v10, &v11) & 1) == 0)
        ZinAssertImpl("Failed to get ZinIrDimension from CFString");
      result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>(v7, &v11, &v11);
      ++v9;
    }
    while (v9 < *a1);
  }
  *(_BYTE *)(a4 + 120) = 0;
  return result;
}

BOOL ANECDescToUnitInfo<ANECElementWiseLayerDesc,ZinIrEWUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  _BOOL8 result;

  a4[8] = 4;
  a4[17] = a5;
  result = CFStringToZinIrEWType(*(_QWORD *)(a1 + 8), a4 + 20);
  if (!result)
    ZinAssertImpl("Unknown element wise type.");
  return result;
}

BOOL ANECDescToUnitInfo<ANECScaledElementWiseLayerDesc,ZinIrScaledEWUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 result;

  *(_DWORD *)(a4 + 32) = 5;
  *(_DWORD *)(a4 + 68) = a5;
  *(_QWORD *)(a4 + 84) = *(_QWORD *)a1;
  *(_DWORD *)(a4 + 92) = *(_DWORD *)(a1 + 8);
  *(_WORD *)(a4 + 96) = *(_WORD *)(a1 + 12);
  result = CFStringToZinIrScaledEWType(*(_QWORD *)(a1 + 16), (int *)(a4 + 80));
  if (!result)
    ZinAssertImpl("Unknown scaled element wise type.");
  return result;
}

_QWORD *ANECDescToUnitInfo<ANECTensorDesc,ZinIrBroadcastUnitInfo>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;

  if (a3 != 1)
    ZinAssertImpl("One tensor descriptor is needed for broadcast layer");
  *(_DWORD *)(a4 + 32) = 19;
  *(_DWORD *)(a4 + 68) = a5;
  v7 = a4 + 80;
  result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)(a4 + 80));
  v9 = a2[1];
  v10 = a1[1];
  v19 = 0;
  if (v9 != v10)
  {
    v20 = &v19;
    result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v10;
  }
  v11 = a2[5];
  v12 = a1[5];
  v19 = 1;
  if (v11 != v12)
  {
    v20 = &v19;
    result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v12;
  }
  v13 = a2[2];
  v14 = a1[2];
  v19 = 2;
  if (v13 != v14)
  {
    v20 = &v19;
    result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v14;
  }
  v15 = a2[3];
  v16 = a1[3];
  v19 = 3;
  if (v15 != v16)
  {
    v20 = &v19;
    result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v16;
  }
  v17 = a2[4];
  v18 = a1[4];
  v19 = 4;
  if (v17 != v18)
  {
    v20 = &v19;
    result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v18;
  }
  return result;
}

__int16 ANECDescToUnitInfo<ANECCropResizeLayerDesc,ZinIrCropResizeUnitInfo>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>)
{
  __int16 result;

  *(_DWORD *)(a4 + 32) = 46;
  *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 156);
  CFStringToZinIrCropResizeBoxMode(*(const __CFString **)a1, (int *)(a4 + 156));
  ANECTextureInfoToZin(a1 + 8, 2, (void **)(a4 + 160));
  ANECTextureInfoToZin(a1 + 40, 2, (void **)(a4 + 128));
  ANECTextureInfoToZin(a1 + 72, 2, (void **)(a4 + 104));
  ANECTextureInfoToZin(a1 + 104, 2, a4 + 80);
  _S0 = *(_DWORD *)(a1 + 152);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 152) = result;
  *(_DWORD *)(a4 + 68) = a5;
  return result;
}

int32x2_t ANECDescToUnitInfo<ANECBatchToSpaceLayerDesc,ZinIrBatchToSpaceUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  int32x2_t result;

  a4[4].i32[0] = 35;
  a4[8].i32[1] = a5;
  result = vmovn_s64(*a1);
  a4[10] = result;
  a4[11].i32[0] = a1[1].i64[0];
  return result;
}

int32x2_t ANECDescToUnitInfo<ANECSpaceToBatchLayerDesc,ZinIrSpaceToBatchUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  int32x2_t result;

  a4[4].i32[0] = 34;
  a4[8].i32[1] = a5;
  result = vmovn_s64(*a1);
  a4[10] = result;
  a4[11].i32[0] = a1[1].i64[0];
  return result;
}

unint64_t *ANECDescToUnitInfo<ANECLayerNormLayerDesc,ZinIrLayerNormUnitInfo>(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  _QWORD v10[2];
  uint64_t v11;
  int v12;

  *(_DWORD *)(a4 + 32) = 28;
  *(_DWORD *)(a4 + 68) = a5;
  *(_QWORD *)(a4 + 128) = result[1];
  if (*result)
  {
    v5 = result;
    v6 = a4 + 80;
    v7 = 2;
    do
    {
      v12 = 0;
      if ((CFStringToZinIrDimension(v5[v7], &v12) & 1) == 0)
      {
        v10[0] = 0;
        v10[1] = 0;
        v11 = 0;
        if ((ZinGetString((CFStringRef)v5[v7], (uint64_t)v10) & 1) != 0)
        {
          v9 = (const char *)v10;
          if (v11 < 0)
            v9 = (const char *)v10[0];
          ZinAssertImpl("Invalid LayerNorm dimension: %s", v9);
        }
        ZinAssertImpl("Invalid LayerNorm dimension");
      }
      result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>(v6, &v12, &v12);
      v8 = v7++ - 1;
    }
    while (*v5 > v8);
  }
  return result;
}

void sub_207025684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ANECDescToUnitInfo<ANECRingBufferWriterLayerDesc,ZinIrRingBufferUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const __CFString **v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  std::string *v23;
  std::string::size_type size;
  std::string::size_type v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  int *v31;
  std::string::size_type v32;
  _QWORD *v33;
  std::string *v34;
  std::string *v35;
  uint64_t v37;
  _OWORD v38[3];
  _OWORD v39[5];
  _OWORD v40[3];
  _OWORD v41[2];
  uint64_t v42;
  int v43;
  std::string v44;
  int *v45;
  __int128 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a4 + 32) = 61;
  *(_DWORD *)(a4 + 68) = a5;
  v5 = *(_OWORD *)(a1 + 176);
  v40[2] = *(_OWORD *)(a1 + 160);
  v41[0] = v5;
  v41[1] = *(_OWORD *)(a1 + 192);
  v42 = *(_QWORD *)(a1 + 208);
  v6 = *(_OWORD *)(a1 + 112);
  v39[3] = *(_OWORD *)(a1 + 96);
  v39[4] = v6;
  v7 = *(_OWORD *)(a1 + 144);
  v40[0] = *(_OWORD *)(a1 + 128);
  v40[1] = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v38[2] = *(_OWORD *)(a1 + 32);
  v39[0] = v8;
  v9 = *(_OWORD *)(a1 + 80);
  v39[1] = *(_OWORD *)(a1 + 64);
  v39[2] = v9;
  v10 = *(_OWORD *)(a1 + 16);
  v38[0] = *(_OWORD *)a1;
  v38[1] = v10;
  v11 = *(_QWORD *)&v38[0];
  v12 = (uint64_t *)MEMORY[0x24BDBD270];
  if (*(_QWORD *)&v38[0])
  {
    v13 = a4 + 120;
    v14 = *MEMORY[0x24BDBD270];
    v15 = (_QWORD *)v39 + 1;
    v16 = (const __CFString **)v38 + 1;
    do
    {
      LODWORD(v46) = 0;
      v17 = *v16;
      if ((CFStringToZinIrDimension(*v16, &v46) & 1) == 0)
      {
        memset(&v44, 0, sizeof(v44));
        if ((ZinGetString(v17, (uint64_t)&v44) & 1) != 0)
        {
          v34 = &v44;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
          ZinAssertImpl("Invalid dimension: %s", (const char *)v34);
        }
        ZinAssertImpl("Failed to get the axis name");
      }
      v18 = *(v15 - 1);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v13, (int *)&v46, (uint64_t)&std::piecewise_construct, &v44)[3] = v18;
      LOBYTE(v18) = *v15 == v14;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v13, (int *)&v46, (uint64_t)&std::piecewise_construct, &v44)+ 32) = v18;
      v15 += 2;
      ++v16;
      --v11;
    }
    while (v11);
  }
  v19 = *(_QWORD *)&v40[0];
  if (*(uint64_t *)&v40[0] >= 1)
  {
    v20 = 0;
    v21 = a4 + 80;
    v37 = *v12;
    do
    {
      v43 = 0;
      v22 = (const __CFString *)*((_QWORD *)v40 + v20 + 1);
      if ((CFStringToZinIrDimension(v22, &v43) & 1) == 0)
      {
        memset(&v44, 0, sizeof(v44));
        if ((ZinGetString(v22, (uint64_t)&v44) & 1) != 0)
        {
          v35 = &v44;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v35 = (std::string *)v44.__r_.__value_.__r.__words[0];
          ZinAssertImpl("Invalid dimension: %s", (const char *)v35);
        }
        ZinAssertImpl("Invalid dimension");
      }
      std::to_string(&v44, v20);
      v23 = std::string::insert(&v44, 0, "live_param", 0xAuLL);
      v25 = v23->__r_.__value_.__r.__words[0];
      size = v23->__r_.__value_.__l.__size_;
      v45 = &v43;
      *(_QWORD *)&v46 = size;
      *(_QWORD *)((char *)&v46 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      v26 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v27 = std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v21, &v43, (uint64_t)&std::piecewise_construct, &v45);
      v28 = v27;
      if (*((char *)v27 + 47) < 0)
        operator delete((void *)v27[3]);
      v29 = v46;
      v28[3] = v25;
      v28[4] = v29;
      *(_QWORD *)((char *)v28 + 39) = *(_QWORD *)((char *)&v46 + 7);
      *((_BYTE *)v28 + 47) = v26;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v30 = *((_QWORD *)v41 + v20) == v37;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v21, &v43, (uint64_t)&std::piecewise_construct, &v44)+ 48) = v30;
      ++v20;
    }
    while (v19 != v20);
  }
  GetAllZinIrDimensions(&v44.__r_.__value_.__l.__data_);
  v32 = v44.__r_.__value_.__l.__size_;
  v31 = (int *)v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__r.__words[0] != v44.__r_.__value_.__l.__size_)
  {
    v33 = (_QWORD *)(a4 + 120);
    do
    {
      if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v33, v31)&& !std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(a4 + 80), v31))
      {
        LODWORD(v46) = *v31;
        *((_QWORD *)&v46 + 1) = 0;
        v47 = 0;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,ZinIrStaticOffsetPerAxisInfo> const&>((uint64_t)v33, (int *)&v46, (uint64_t)&v46);
      }
      ++v31;
    }
    while (v31 != (int *)v32);
    v31 = (int *)v44.__r_.__value_.__r.__words[0];
  }
  if (v31)
  {
    v44.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
    operator delete(v31);
  }
}

void sub_207025A44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(_QWORD *)(v1 - 160) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__int16 ANECDescToUnitInfo<ANECPadLayerDesc,ZinIrPadUnitInfo>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>)
{
  unint64_t v7;
  char **v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int16 result;
  void **v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  void *__p[2];
  uint64_t v45;
  uint64_t v46;

  *(_DWORD *)(a4 + 32) = 44;
  *(_DWORD *)(a4 + 68) = a5;
  if (*(_QWORD *)a1)
  {
    v7 = 0;
    v41 = (_DWORD *)(a4 + 160);
    v42 = (_DWORD *)(a4 + 156);
    v39 = (_DWORD *)(a4 + 168);
    v40 = (_DWORD *)(a4 + 164);
    v37 = (_DWORD *)(a4 + 176);
    v38 = (_DWORD *)(a4 + 172);
    v35 = (_DWORD *)(a4 + 184);
    v36 = (_DWORD *)(a4 + 180);
    v8 = (char **)(a4 + 200);
    v43 = a4 + 216;
    do
    {
      v46 = 0;
      v9 = a1 + 24 * v7;
      CFStringToZinIrDimension(*(_QWORD *)(v9 + 8), (char *)&v46 + 4);
      v10 = CFStringToZinIrPaddingMode(*(const __CFString **)(v9 + 16), &v46);
      __p[0] = 0;
      __p[1] = 0;
      v45 = 0;
      ZinGetString(*(CFStringRef *)(v9 + 16), (uint64_t)__p);
      if ((v10 & 1) == 0)
      {
        v34 = __p;
        if (v45 < 0)
          v34 = (void **)__p[0];
        ZinAssertImpl("Unknown padding mode: %s.", (const char *)v34);
      }
      v11 = HIDWORD(v46);
      v12 = (_DWORD *)(a4 + 188);
      v13 = (_DWORD *)(a4 + 192);
      switch(HIDWORD(v46))
      {
        case 0:
          goto LABEL_9;
        case 1:
          v13 = v37;
          v12 = v38;
          goto LABEL_9;
        case 2:
          v13 = v35;
          v12 = v36;
          goto LABEL_9;
        case 3:
          v13 = v39;
          v12 = v40;
          goto LABEL_9;
        case 4:
          v13 = v41;
          v12 = v42;
LABEL_9:
          v14 = a1 + 24 * v7;
          *v12 = *(_DWORD *)(v14 + 24);
          *v13 = *(_DWORD *)(v14 + 28);
          break;
        default:
          break;
      }
      v15 = v46;
      v17 = *(unint64_t **)(a4 + 208);
      v16 = *(_QWORD *)(a4 + 216);
      if ((unint64_t)v17 >= v16)
      {
        v19 = ((char *)v17 - *v8) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v20 = v16 - (_QWORD)*v8;
        v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v43, v22);
        else
          v23 = 0;
        v24 = &v23[8 * v19];
        *(_QWORD *)v24 = v11 | (v15 << 32);
        v18 = v24 + 8;
        v26 = *(char **)(a4 + 200);
        v25 = *(char **)(a4 + 208);
        if (v25 != v26)
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *((_QWORD *)v24 - 1) = v27;
            v24 -= 8;
          }
          while (v25 != v26);
          v25 = *v8;
        }
        *(_QWORD *)(a4 + 200) = v24;
        *(_QWORD *)(a4 + 208) = v18;
        *(_QWORD *)(a4 + 216) = &v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v17 = v11 | ((unint64_t)v46 << 32);
        v18 = v17 + 1;
      }
      *(_QWORD *)(a4 + 208) = v18;
      if (SHIBYTE(v45) < 0)
        operator delete(__p[0]);
      ++v7;
    }
    while (v7 < *(_QWORD *)a1);
  }
  _S0 = *(_DWORD *)(a1 + 128);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 224) = result;
  return result;
}

void sub_207025CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ANECDescToUnitInfo<ANECTileLayerDesc,ZinIrTileUnitInfo>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  int v13;
  int *v14;

  *(_DWORD *)(a4 + 32) = 45;
  *(_DWORD *)(a4 + 68) = a5;
  v6 = *a1;
  v7 = a4 + 80;
  v13 = 0;
  v14 = &v13;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(a4 + 80, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 5) = v6;
  v8 = a1[4];
  v13 = 1;
  v14 = &v13;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 5) = v8;
  v9 = a1[1];
  v13 = 2;
  v14 = &v13;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 5) = v9;
  v10 = a1[2];
  v13 = 3;
  v14 = &v13;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 5) = v10;
  v11 = a1[3];
  v13 = 4;
  v14 = &v13;
  result = std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, &v14);
  *((_DWORD *)result + 5) = v11;
  return result;
}

uint64_t ANECDescToUnitInfo<ANECReductionLayerDesc,ZinIrReductionUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  unint64_t v8;
  const char *v9;
  _QWORD v10[2];
  uint64_t v11;
  unsigned int v12;

  *(_DWORD *)(a4 + 32) = 20;
  *(_DWORD *)(a4 + 68) = a5;
  *(_DWORD *)(a4 + 80) = CFStringToZinIrReductionType((const __CFString **)a1);
  result = CFStringToZinReductionPostOp((CFStringRef *)(a1 + 8));
  *(_DWORD *)(a4 + 84) = result;
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 24))
  {
    v8 = 0;
    do
    {
      v12 = 0;
      result = CFStringToZinIrDimension(*(_QWORD *)(a1 + 32 + 8 * v8), &v12);
      if ((result & 1) == 0)
      {
        v10[0] = 0;
        v10[1] = 0;
        v11 = 0;
        if ((ZinGetString(*(CFStringRef *)(a1 + 8 * v8 + 32), (uint64_t)v10) & 1) != 0)
        {
          v9 = (const char *)v10;
          if (v11 < 0)
            v9 = (const char *)v10[0];
          ZinAssertImpl("Unknown dimension for reduction: %s", v9);
        }
        ZinAssertImpl("Invalid reduction dimension");
      }
      if (v12 >= 5)
        std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
      *(_QWORD *)(a4 + 96) |= 1 << v12;
      ++v8;
    }
    while (v8 < *(_QWORD *)(a1 + 24));
  }
  return result;
}

void sub_207025F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ANECDescToUnitInfo<ANECGatherLayerDesc,ZinIrGatherUnitInfo>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t *v10;
  CFStringRef *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  const char *v24;
  _QWORD v25[2];
  uint64_t v26;
  int v27;

  *(_DWORD *)(a4 + 32) = 39;
  *(_DWORD *)(a4 + 68) = a5;
  if (*a1)
  {
    v7 = 0;
    v8 = (void **)(a4 + 160);
    v9 = a4 + 176;
    do
    {
      v27 = 0;
      v10 = &a1[v7];
      v12 = v10[1];
      v11 = (CFStringRef *)(v10 + 1);
      if ((CFStringToZinIrDimension(v12, &v27) & 1) == 0)
      {
        v25[0] = 0;
        v25[1] = 0;
        v26 = 0;
        if ((ZinGetString(*v11, (uint64_t)v25) & 1) != 0)
        {
          v24 = (const char *)v25;
          if (v26 < 0)
            v24 = (const char *)v25[0];
          ZinAssertImpl("Unknown dimension for gather: %s", v24);
        }
        ZinAssertImpl("Invalid gather dimension");
      }
      v14 = *(char **)(a4 + 168);
      v13 = *(_QWORD *)(a4 + 176);
      if ((unint64_t)v14 >= v13)
      {
        v16 = (char *)*v8;
        v17 = (v14 - (_BYTE *)*v8) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(v9, v20);
          v16 = *(char **)(a4 + 160);
          v14 = *(char **)(a4 + 168);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        *(_DWORD *)v22 = v27;
        v15 = v22 + 4;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        *(_QWORD *)(a4 + 160) = v22;
        *(_QWORD *)(a4 + 168) = v15;
        *(_QWORD *)(a4 + 176) = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v14 = v27;
        v15 = v14 + 4;
      }
      *(_QWORD *)(a4 + 168) = v15;
      ++v7;
    }
    while (v7 < *a1);
  }
}

void sub_2070260FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ANECDescToUnitInfo<ANECTopKLayerDesc,ZinIrTopKUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  _DWORD *v8;
  const char *v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t result;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)(a4 + 32) = 51;
  *(_DWORD *)(a4 + 68) = a5;
  *(_DWORD *)(a4 + 80) = CFStringToZinIrTopKType(*(_QWORD *)a1);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(a1 + 8);
  if ((CFStringToZinIrDimension(*(_QWORD *)(a1 + 16), a4 + 96) & 1) == 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    if ((ZinGetString(*(CFStringRef *)(a1 + 16), (uint64_t)&v14) & 1) != 0)
    {
      v13 = (const char *)&v14;
      if (v16 < 0)
        v13 = v14;
      ZinAssertImpl("Unknown sort_dimension for TopK: %s", v13);
    }
    ZinAssertImpl("Invalid TopK sort_dimension");
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (_DWORD *)(a4 + 100);
  if (v7)
  {
    if ((CFStringToZinIrDimension(v7, v8) & 1) == 0)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      if ((ZinGetString(*(CFStringRef *)(a1 + 24), (uint64_t)&v14) & 1) != 0)
      {
        v9 = (const char *)&v14;
        if (v16 < 0)
          v9 = v14;
        ZinAssertImpl("Unknown vector_dimension for TopK: %s", v9);
      }
      ZinAssertImpl("Invalid TopK vector_dimension");
    }
  }
  else
  {
    *v8 = 5;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v10 = 0;
    v11 = (unint64_t *)(a1 + 40);
    do
    {
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a4 + 104), v11, (uint64_t *)v11);
      ++v10;
      ++v11;
    }
    while (*(_QWORD *)(a1 + 32) > v10);
  }
  result = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 552));
  *(_BYTE *)(a4 + 128) = (_DWORD)result != 0;
  return result;
}

void sub_207026288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t ANECDescToUnitInfo<ANECPixelUnshuffleLayerDesc,ZinIrPixelUnshuffleUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  int32x2_t result;

  a4[4].i32[0] = 32;
  a4[8].i32[1] = a5;
  result = vmovn_s64(*a1);
  a4[10] = result;
  a4[11].i32[0] = a1[1].i64[0];
  return result;
}

uint64_t ANECDescToUnitInfo<ANECMatrixMultLayerDesc,ZinIrMatrixMultUnitInfo>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 18;
  *(_DWORD *)(a4 + 68) = a5;
  *(_QWORD *)(a4 + 72) = *(_QWORD *)(result + 8);
  *(_BYTE *)(a4 + 80) = *(_BYTE *)result;
  return result;
}

uint64_t ANECDescToUnitInfo<ANECResampleLayerDesc,ZinIrResampleUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(_DWORD *)(a4 + 32) = 43;
  *(_DWORD *)(a4 + 68) = a5;
  ANECTextureInfoToZin(a1 + 32, 2, (void **)(a4 + 104));
  ANECTextureInfoToZin(a1 + 64, 2, a4 + 80);
  ANECTextureInfoToZin(a1, 2, (void **)(a4 + 128));
  ANECTextureInfoToZin(a1 + 112, 2, (void **)(a4 + 160));
  *(_DWORD *)(a4 + 184) = 0;
  _S0 = *(_DWORD *)(a1 + 144);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 152) = _S0;
  return ZinLayerValidationUtils::ValidateBackgroundPadding(a4, a5);
}

void ANECDescToUnitInfo<ANECLinearLayerDesc,ZinIrLinearUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  const char *p_src;
  int v9;
  _BYTE v10[24];
  const char *__src;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  ZinIrUnitStatus::ZinIrUnitStatus((ZinIrUnitStatus *)v10);
  *(_DWORD *)(a4 + 32) = 60;
  *(_DWORD *)(a4 + 68) = a5;
  *(_DWORD *)(a4 + 80) = ZinGetKernelMode(*(const __CFString **)a1);
  *(_DWORD *)(a4 + 84) = ZinGetKernelFormat(*(const __CFString **)(a1 + 8), *(const __CFString **)a1);
  v9 = 0;
  if ((CFStringToZinIrDimension(*(_QWORD *)(a1 + 24), &v9) & 1) == 0)
  {
    __src = 0;
    v12 = 0;
    v13 = 0;
    if ((ZinGetString(*(CFStringRef *)(a1 + 24), (uint64_t)&__src) & 1) != 0)
    {
      p_src = (const char *)&__src;
      if (v13 < 0)
        p_src = __src;
      ZinAssertImpl("Unknown dimension for gather: %s", p_src);
    }
    ZinAssertImpl("Invalid gather dimension");
  }
  *(_DWORD *)(a4 + 240) = v9;
  LODWORD(__src) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 128), (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  __src = 0;
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a4 + 152), (char *)&__src, (uint64_t)&v12, 1uLL);
  *(_DWORD *)(a4 + 104) = 0;
  *(_DWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_OWORD *)(a4 + 112) = xmmword_207A80930;
  *(_QWORD *)(a4 + 72) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a4 + 180) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a4 + 184) = *(_BYTE *)(a1 + 33);
  *(_BYTE *)(a4 + 185) = *(_BYTE *)(a1 + 48);
  *(_DWORD *)(a4 + 224) = ZinGetKernelFormat(*(const __CFString **)(a1 + 40), 0);
  *(_DWORD *)(a4 + 228) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a4 + 232) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a4 + 176) = *(_DWORD *)(a1 + 56);
  ZinIrUnitStatus::~ZinIrUnitStatus((ZinIrUnitStatus *)v10);
}

void sub_207026510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  ZinIrUnitStatus::~ZinIrUnitStatus((ZinIrUnitStatus *)&a12);
  _Unwind_Resume(a1);
}

uint64_t ANECDescToUnitInfo<ANECFlattenLayerDesc,ZinIrFlattenUnitInfo>(const __CFString **a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  uint64_t result;

  a4[8] = 11;
  a4[17] = a5;
  result = CFStringToZinIrFlattenType(*a1);
  a4[20] = result;
  return result;
}

double ANECDescToUnitInfo<ANECUnflattenLayerDesc,ZinIrUnflattenUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  double result;

  *(_DWORD *)(a4 + 32) = 12;
  *(_DWORD *)(a4 + 68) = a5;
  *(_DWORD *)(a4 + 80) = CFStringToZinIrFlattenType(*(const __CFString **)a1);
  result = *(double *)(a1 + 8);
  *(double *)(a4 + 84) = result;
  *(_DWORD *)(a4 + 92) = *(_DWORD *)(a1 + 16);
  return result;
}

void ANECDescToUnitInfo<ANECMinMaxNormLayerDesc,ZinIrMinMaxNormUnitInfo>(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  uint64_t v6;
  CFStringRef *v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  a4[8] = 27;
  a4[17] = a5;
  v6 = (uint64_t)(a4 + 20);
  v7 = (CFStringRef *)(a1 + 1);
  v8 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "min/max norm");
  ANECDescDimsToNormUnitInfo(v6, v7, v8, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  a4[30] = 730643660;
}

void sub_207026650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ANECDescDimsToNormUnitInfo(uint64_t a1, CFStringRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *result;
  char String;
  const char *v10;
  const char *v11;
  _QWORD v12[2];
  uint64_t v13;
  int v14;

  if (a3)
  {
    v6 = a3;
    do
    {
      v14 = 0;
      if ((CFStringToZinIrDimension(*a2, &v14) & 1) == 0)
      {
        v12[0] = 0;
        v12[1] = 0;
        v13 = 0;
        String = ZinGetString(*a2, (uint64_t)v12);
        if (*(char *)(a4 + 23) >= 0)
          v10 = (const char *)a4;
        else
          v10 = *(const char **)a4;
        if ((String & 1) != 0)
        {
          v11 = (const char *)v12;
          if (v13 < 0)
            v11 = (const char *)v12[0];
          ZinAssertImpl("Error: unknown %s axis %s", v10, v11);
        }
        ZinAssertImpl("Error: invalid %s axis", v10);
      }
      result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>(a1, &v14, &v14);
      ++a2;
      --v6;
    }
    while (v6);
  }
  else
  {
    LODWORD(v12[0]) = 3;
    std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(a1, (int *)v12, v12);
    LODWORD(v12[0]) = 4;
    std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(a1, (int *)v12, v12);
    LODWORD(v12[0]) = 1;
    return std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(a1, (int *)v12, v12);
  }
  return result;
}

void sub_207026788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int16 ANECDescToUnitInfo<ANECAffineTransformLayerDesc,ZinIrAffineTransformUnitInfo>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>)
{
  uint64_t v7;
  __int16 result;

  *(_DWORD *)(a4 + 32) = 40;
  *(_DWORD *)(a4 + 68) = a5;
  v7 = *(unsigned int *)(a1 + 128);
  *(_QWORD *)(a4 + 160) = *(unsigned int *)(a1 + 116);
  *(_QWORD *)(a4 + 168) = v7;
  *(_DWORD *)(a4 + 64) = GetZinTensorFormat<__CFString const*>((uint64_t *)(a1 + 136));
  ANECTextureInfoToZin(a1, 2, (void **)(a4 + 128));
  ANECTextureInfoToZin(a1 + 32, 2, (void **)(a4 + 104));
  ANECTextureInfoToZin(a1 + 64, 2, a4 + 80);
  ANECTextureInfoToZin(a1 + 144, 2, a4 + 200);
  _S0 = *(_DWORD *)(a1 + 112);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 152) = result;
  return result;
}

_BYTE *ANECDescToUnitInfo<ANECDynamicGOCLayerDesc,ZinIrDynamicGOCUnitInfo>(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 9;
  *(_DWORD *)(a4 + 68) = a5;
  *(_BYTE *)(a4 + 210) = *result;
  *(_BYTE *)(a4 + 209) = result[1];
  return result;
}

void ANECDescToUnitInfo<ANECL2NormLayerDesc,ZinIrL2NormUnitInfo>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  CFStringRef *v6;
  uint64_t v7;
  void *__p[2];
  char v9;

  *(_DWORD *)(a4 + 32) = 26;
  *(_DWORD *)(a4 + 68) = a5;
  v5 = a4 + 80;
  v6 = (CFStringRef *)(a1 + 1);
  v7 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "L2 norm");
  ANECDescDimsToNormUnitInfo(v5, v6, v7, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_2070268C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ANECDescToUnitInfo<ANECArgMinMaxLayerDesc,ZinIrArgMinMaxUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  double result;

  *(_DWORD *)(a4 + 32) = 15;
  *(_DWORD *)(a4 + 68) = a5;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(const __CFString **)a1;
  *(_DWORD *)(a4 + 80) = v7;
  *(_DWORD *)(a4 + 84) = v8;
  *(int32x2_t *)(a4 + 88) = vrev64_s32(*(int32x2_t *)(a1 + 32));
  CFStringToZinArgMode(v9, (int *)(a4 + 120));
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a1 + 44);
  result = *(double *)(a1 + 60);
  *(double *)(a4 + 112) = result;
  return result;
}

const __CFString *ANECDescToUnitInfo<ANECGlobalArgMinMaxLayerDesc,ZinIrGlobalArgMinMaxUnitInfo>(const __CFString **a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  const __CFString *result;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  a4[8] = 16;
  a4[17] = a5;
  if ((CFStringToZinIrDimension(a1[1], a4 + 21) & 1) == 0)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if ((ZinGetString(a1[1], (uint64_t)&v10) & 1) != 0)
    {
      v8 = (const char *)&v10;
      if (v12 < 0)
        v8 = v10;
      ZinAssertImpl("Error: Invalid dimension:%s setting in the instance norm layer descriptor", v8);
    }
    ZinAssertImpl("Error: cannot extract the dimension string from the GlobalArgMinMax Layer Descriptor");
  }
  result = CFStringToGlobalArgType(a1, a4 + 20);
  if ((result & 1) == 0)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if ((ZinGetString(*a1, (uint64_t)&v10) & 1) != 0)
    {
      v9 = (const char *)&v10;
      if (v12 < 0)
        v9 = v10;
      ZinAssertImpl("Error: Invalid GlobalArgMinMax type %s", v9);
    }
    ZinAssertImpl("Error: cannot extract the dimension string from the GlobalArgMinMax Layer Descriptor");
  }
  return result;
}

void sub_207026A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 ANECDescToUnitInfo<ANECRandomLayerDesc,ZinIrRandomUnitInfo>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  *(_DWORD *)(a4 + 32) = 55;
  *(_DWORD *)(a4 + 68) = a5;
  *(_QWORD *)(a4 + 120) = a1[1];
  *(_QWORD *)(a4 + 128) = a1[2];
  v5 = *(_QWORD *)(a2 + 40);
  result = *(__n128 *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 24);
  *(__n128 *)(a4 + 80) = result;
  *(_OWORD *)(a4 + 96) = v7;
  *(_QWORD *)(a4 + 112) = v5;
  *(_QWORD *)(a4 + 72) = a1[3];
  return result;
}

const __CFString *ANECDescToUnitInfo<ANECNMSLayerDesc,ZinIrNMSUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  const __CFString *result;
  int v8;

  *(_DWORD *)(a4 + 32) = 52;
  *(_DWORD *)(a4 + 88) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a1 + 8);
  *(_WORD *)(a4 + 92) = *(_WORD *)(a1 + 20);
  result = CFStringToNMSType((const __CFString **)a1, (int *)(a4 + 96));
  if ((result & 1) == 0)
    ZinAssertImpl("Error: Invalid NMS type.");
  if (*(_DWORD *)(a4 + 96))
    v8 = a5;
  else
    v8 = 10;
  *(_DWORD *)(a4 + 68) = v8;
  return result;
}

float ANECDescToUnitInfo<ANECDropoutLayerDesc,ZinIrDropoutUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float result;

  *(_DWORD *)(a4 + 32) = 54;
  *(_DWORD *)(a4 + 68) = a5;
  result = *(float *)a1;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)a1;
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a4 + 96) = *(_BYTE *)(a1 + 16);
  return result;
}

const __CFString *ANECDescToUnitInfo<ANECLRNLayerDesc,ZinIrLRNUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  const __CFString *result;
  __n128 v8;
  uint64_t v9;

  *(_DWORD *)(a4 + 32) = 29;
  *(_DWORD *)(a4 + 68) = a5;
  ANECPaddingToZinIrPadding(a1 + 32, (uint64_t)&v8);
  *(__n128 *)(a4 + 112) = v8;
  *(_QWORD *)(a4 + 128) = v9;
  ANECKernelSizeToZinIrKernelSize((__n128 *)(a1 + 8), &v8);
  *(__n128 *)(a4 + 88) = v8;
  *(_QWORD *)(a4 + 104) = v9;
  result = CFStringToLRNType((const __CFString **)a1, (int *)(a4 + 80));
  if ((result & 1) == 0)
    ZinAssertImpl("Error: Invalid LRN type.");
  return result;
}

void ANECDescToUnitInfo<ANECCrossProductLayerDesc,ZinIrUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 57;
  *(_DWORD *)(a4 + 68) = a5;
}

double ANECDescToUnitInfo<ANECCrossCorrelationLayerDesc,ZinIrCrossCorrelationUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  double result;
  __int128 v8;
  uint64_t v9;

  *(_DWORD *)(a4 + 32) = 13;
  *(_DWORD *)(a4 + 68) = a5;
  *(_OWORD *)(a4 + 72) = *(_OWORD *)a1;
  ANECPaddingToZinIrPadding(a1 + 16, (uint64_t)&v8);
  *(_OWORD *)(a4 + 88) = v8;
  *(_QWORD *)(a4 + 104) = v9;
  result = *(double *)(a1 + 40);
  *(double *)(a4 + 112) = result;
  return result;
}

uint64_t *ANECDescToUnitInfo<ANECSortLayerDesc,ZinIrSortUnitInfo>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *result;
  unint64_t v8;
  uint64_t **v9;
  unint64_t *v10;

  *(_DWORD *)(a4 + 32) = 50;
  *(_DWORD *)(a4 + 68) = a5;
  *(_BYTE *)(a4 + 120) = a1[68] == *MEMORY[0x24BDBD270];
  *(_DWORD *)(a4 + 80) = CFStringToZinIrSortDirection(*a1);
  if ((CFStringToZinIrDimension(a1[1], a4 + 84) & 1) == 0)
    ZinAssertImpl("Error: cannot extract sort_dimension from Sort Layer Descriptor.");
  result = (uint64_t *)CFStringToZinIrDimension(a1[2], a4 + 88);
  if (!(_DWORD)result)
    ZinAssertImpl("Error: cannot extract vector_dimension from Sort Layer Descriptor.");
  if (a1[3])
  {
    v8 = 0;
    v9 = (uint64_t **)(a4 + 96);
    v10 = (unint64_t *)(a1 + 4);
    do
    {
      result = std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v9, v10, (uint64_t *)v10);
      ++v8;
      ++v10;
    }
    while (v8 < a1[3]);
  }
  return result;
}

uint64_t std::vector<ANECProcedureInfo>::__emplace_back_slow_path<ANECProcedureInfo>(uint64_t *a1, const ANECProcedureInfo *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ANECProcedureInfo *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x186186186186186)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xC30C30C30C30C3)
    v9 = 0x186186186186186;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ANECProcedureInfo *)&v10[168 * v4];
  v16 = &v10[168 * v9];
  ANECProcedureInfo::ANECProcedureInfo(v14, a2);
  v15 = (char *)v14 + 168;
  std::vector<ANECProcedureInfo>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ANECProcedureInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_207026DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ANECProcedureInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ANECProcedureInfo::ANECProcedureInfo(ANECProcedureInfo *this, const ANECProcedureInfo *a2)
{
  uint64_t **v4;
  uint64_t **v5;
  char *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  v9 = (uint64_t **)((char *)this + 8);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  v4 = (uint64_t **)((char *)this + 32);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  v5 = (uint64_t **)((char *)this + 56);
  *((_BYTE *)this + 80) = 0;
  v6 = (char *)this + 80;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  v7 = (uint64_t **)((char *)this + 112);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  v8 = (uint64_t **)((char *)this + 136);
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 160) = 0;
  ANECProcedureInfo::SetANECIRDict((const void **)this, *(CFTypeRef *)a2);
  if (this != a2)
  {
    std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ZinIrName>,std::__tree_node<std::__value_type<std::string,ZinIrName>,void *> *,long>>(v9, *((__int128 **)a2 + 1), (__int128 *)a2 + 1);
    std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ZinIrName>,std::__tree_node<std::__value_type<std::string,ZinIrName>,void *> *,long>>(v4, *((__int128 **)a2 + 4), (__int128 *)((char *)a2 + 40));
    std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ZinIrName>,std::__tree_node<std::__value_type<std::string,ZinIrName>,void *> *,long>>(v5, *((__int128 **)a2 + 7), (__int128 *)a2 + 4);
  }
  std::__optional_storage_base<std::map<std::string,std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::map<std::string,std::string>,false> const&>((uint64_t)v6, (uint64_t)a2 + 80);
  if (this != a2)
  {
    std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,long>,std::__tree_node<std::__value_type<std::string,long>,void *> *,long>>(v7, *((_QWORD **)a2 + 14), (_QWORD *)a2 + 15);
    std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,long>,std::__tree_node<std::__value_type<std::string,long>,void *> *,long>>(v8, *((_QWORD **)a2 + 17), (_QWORD *)a2 + 18);
  }
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
}

void sub_207026F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  _QWORD **v16;
  _QWORD **v17;

  ZinIrLiveIORankMaps::~ZinIrLiveIORankMaps(v15);
  if (*(_BYTE *)(v11 + 104))
    std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy(v14, *(_QWORD **)(v11 + 88));
  std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::destroy(v13, *v10);
  std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::destroy(v12, *v17);
  std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::destroy(a10, *v16);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ZinIrName>,std::__tree_node<std::__value_type<std::string,ZinIrName>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  std::string *v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (std::string *)(v8 + 4);
          v18[1] = (std::string *)(v8 + 7);
          std::pair<std::string &,ZinIrName &>::operator=[abi:ne180100]<std::string const,ZinIrName,(void *)0>(v18, (const std::string *)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(v5, (uint64_t)v18[0], leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__emplace_multi<std::pair<std::string const,ZinIrName> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_207027108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string **std::pair<std::string &,ZinIrName &>::operator=[abi:ne180100]<std::string const,ZinIrName,(void *)0>(std::string **a1, const std::string *a2)
{
  std::string *v4;

  std::string::operator=(*a1, a2);
  v4 = a1[1];
  std::string::operator=(v4, a2 + 1);
  std::string::operator=(v4 + 1, a2 + 2);
  std::string::operator=(v4 + 2, a2 + 3);
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__emplace_multi<std::pair<std::string const,ZinIrName> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__construct_node<std::pair<std::string const,ZinIrName> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrName>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrName>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_207027234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrName>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrName>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__construct_node<std::pair<std::string const,ZinIrName> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x80uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinIrName>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20702729C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrName>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrName>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ZinIrName>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_207027394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::map<std::string,std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::map<std::string,std::string>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)a1, *(__int128 **)a2, (__int128 *)(a2 + 8));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy(a1, *(_QWORD **)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2070275D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_2070276A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ANECProcedureInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ANECProcedureInfo>,std::reverse_iterator<ANECProcedureInfo*>,std::reverse_iterator<ANECProcedureInfo*>,std::reverse_iterator<ANECProcedureInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ANECProcedureInfo>,std::reverse_iterator<ANECProcedureInfo*>,std::reverse_iterator<ANECProcedureInfo*>,std::reverse_iterator<ANECProcedureInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ANECProcedureInfo *v12;

  v10 = 0;
  v11 = a7 - 168;
  while (a3 + v10 != a5)
  {
    v12 = (ANECProcedureInfo *)(v11 + v10);
    v10 -= 168;
    ANECProcedureInfo::ANECProcedureInfo(v12, (const ANECProcedureInfo *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ANECProcedureInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    ANECProcedureInfo::~ANECProcedureInfo((char **)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3>,void ()(SpatialSplitMode)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3>,void ()(SpatialSplitMode)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054070;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3>,void ()(SpatialSplitMode)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054070;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3>,void ()(SpatialSplitMode)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
  ZinIrCompilerParameters::setSpatialSplitMode(v3, v2, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_2070278CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3>,void ()(SpatialSplitMode)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_3>,void ()(SpatialSplitMode)>::target_type()
{
}

void std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0>,void ()(SpatialSplitMode)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0>,void ()(SpatialSplitMode)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C054018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0>,void ()(SpatialSplitMode)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C054018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0>,void ()(SpatialSplitMode)>::operator()(uint64_t a1, unsigned int *a2)
{
  return ZinIrCompilerParameters::setSpatialSplitMode(*(_QWORD *)(a1 + 8), *a2, *(__int128 **)(a1 + 16));
}

uint64_t std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0>,void ()(SpatialSplitMode)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0,std::allocator<ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_0>,void ()(SpatialSplitMode)>::target_type()
{
}

void ANECCreateProcedureInfoForSingleProcedureNetwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not find inputs or outputs in the plist.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not sanitize the ANEC IR plist.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateProcedureInfoForMultiProcedureNetwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not extract procedure from multi-procedure ANEC IR program.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerPlistDictionaryFromANECIR(char *a1, _QWORD *a2)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*a1 >= 0)
    v2 = a2;
  else
    v2 = (_QWORD *)*a2;
  v3 = 136315138;
  v4 = v2;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Could not create dictionary from file \"%s\"", (uint8_t *)&v3, 0xCu);
}

void ANECCreateFileBacking(uint64_t a1, uint8_t *buf, int a3)
{
  *(_DWORD *)buf = 67109378;
  *((_DWORD *)buf + 1) = a3;
  *((_WORD *)buf + 4) = 2080;
  *(_QWORD *)(buf + 10) = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to create temporary directory. %d: %s", buf, 0x12u);
}

uint64_t ZinIrNormUnitBase::TensorDimensions(ZinIrNormUnitBase *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  return 0;
}

uint64_t ZinPELayer::ZinPELayer(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v9 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  ZinANELayer::ZinANELayer(a1, a2, &v17, a4, a5, a6);
  v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)a1 = off_24C015248;
  v15 = *a7;
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a7 + 2);
  *(_OWORD *)(a1 + 368) = v15;
  return a1;
}

void sub_207027C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

ZinGOCLayer *ZinPELayer::GetPostScaleAndBiasFromGOC@<X0>(ZinGOCLayer *this@<X0>, _BYTE *a2@<X8>)
{
  ZinGOCLayer *v3;
  uint64_t v5;
  uint64_t v6;

  *a2 = 0;
  a2[8] = 0;
  a2[12] = 0;
  a2[20] = 0;
  if (this)
  {
    v3 = this;
    if (*((_QWORD *)this + 17))
    {
      if (!ZinGOCLayer::IsSingularScaleBias(this))
        ZinAssertImpl("Cannot create PELayer with non-singular scale and bias.");
      LODWORD(v6) = 0;
      BYTE4(v6) = 0;
      if (ZinGOCLayer::GetSingularScale(v3, (float *)&v6, (signed __int8 *)&v6 + 4))
      {
        *(_QWORD *)a2 = v6;
      }
      else
      {
        *(_DWORD *)a2 = 1065353216;
        a2[4] = 0;
      }
      a2[8] = 1;
      LODWORD(v5) = 0;
      BYTE4(v5) = 0;
      this = (ZinGOCLayer *)ZinGOCLayer::GetSingularBias(v3, (float *)&v5, (signed __int8 *)&v5 + 4);
      if ((_DWORD)this)
      {
        *(_QWORD *)(a2 + 12) = v5;
      }
      else
      {
        *((_DWORD *)a2 + 3) = 0;
        a2[16] = 0;
      }
      a2[20] = 1;
    }
  }
  return this;
}

uint64_t ZinPELayer::LowerEngineCore()
{
  return 0;
}

void ZinPELayer::GetProjectedCoreInputDims(ZinPELayer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  void *__p;
  void *v9;
  char *v10;

  ZinANELayer::GetTensorDimsAfterTexture(this, a2);
  if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)this + 640))(this))
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v4;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)this + 656))(this))
  {
    v5 = (*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)this + 696))(this);
    v6 = operator new(0x28uLL);
    v9 = (char *)v6 + 40;
    v10 = (char *)v6 + 40;
    v7 = *(_OWORD *)(a2 + 16);
    *v6 = *(_OWORD *)a2;
    v6[1] = v7;
    *((_QWORD *)v6 + 4) = *(_QWORD *)(a2 + 32);
    __p = v6;
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v5 + 216))(v5, &__p, a2);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
}

void sub_207027E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinPELayer::IsChainableProducer(ZinPELayer *this, const ZinIrHalParameters *a2)
{
  return (*(unsigned int (**)(ZinPELayer *, const ZinIrHalParameters *))(*(_QWORD *)this + 408))(this, a2) ^ 1;
}

uint64_t ZinPELayer::IsChainableConsumer(_QWORD *a1, int a2)
{
  if (a2 == 2)
    return 0;
  if (a2 == 1)
  {
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 664))(a1) & 1) != 0
      || ((*(uint64_t (**)(_QWORD *))(*a1 + 648))(a1) & 1) != 0
      || a1[25] && a1[24] == 1)
    {
      return 0;
    }
  }
  else if (!a2
         && (((*(uint64_t (**)(_QWORD *))(*a1 + 656))(a1) & 1) != 0
          || ((*(uint64_t (**)(_QWORD *))(*a1 + 640))(a1) & 1) != 0
          || a1[25] && !a1[24]))
  {
    return 0;
  }
  return 1;
}

uint64_t ZinPELayer::HasInputTranspose(ZinPELayer *this, uint64_t a2)
{
  uint64_t (*v2)(void);
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == 1)
  {
    v2 = *(uint64_t (**)(void))(*(_QWORD *)this + 648);
    return v2();
  }
  if (!a2)
  {
    v2 = *(uint64_t (**)(void))(*(_QWORD *)this + 640);
    return v2();
  }
  v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v4)
    ZinPELayer::HasInputTranspose(v4, v5, v6, v7, v8, v9, v10, v11);
  return 0;
}

uint64_t ZinPELayer::IsQualifiedForInPlace(ZinIrOpLayer *a1, unint64_t a2, int a3, ZinTensorFamilyUtil *a4)
{
  int IsQualifiedForInPlace;
  uint64_t v7;
  char v8;
  unsigned int v9;

  IsQualifiedForInPlace = ZinANELayer::IsQualifiedForInPlace(a1, a2, a3, a4);
  v7 = *(_QWORD *)a1;
  if (a2)
  {
    if (((*(uint64_t (**)(ZinIrOpLayer *))(v7 + 648))(a1) & 1) != 0)
      goto LABEL_7;
    v8 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 664))(a1);
  }
  else
  {
    if (((*(uint64_t (**)(ZinIrOpLayer *))(v7 + 640))(a1) & 1) != 0)
      goto LABEL_7;
    v8 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 656))(a1);
  }
  if ((v8 & 1) == 0)
  {
    v9 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 408))(a1) ^ 1;
    return IsQualifiedForInPlace & v9;
  }
LABEL_7:
  v9 = 0;
  return IsQualifiedForInPlace & v9;
}

double ZinPELayer::SetL2SrcStrides(ZinPELayer *this, unint64_t a2, const ZinTensorDimensions *a3, uint64_t a4)
{
  ZinIrTensor *InputTensor;
  _QWORD *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TileSrc;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BOOL4 IsResident;
  uint64_t Hal;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  double result;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, a2);
  v9 = (_QWORD *)((char *)InputTensor + 48);
  v34 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(this, a2, &v34))
  {
    v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v10)
      ZinPELayer::SetL2SrcStrides(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  TileSrc = ZinMirL2Config::GetTileSrc(*((_QWORD *)this + 33) + 120, v34);
  v30[0] = *(_OWORD *)TileSrc;
  v20 = *(_OWORD *)(TileSrc + 32);
  v19 = *(_OWORD *)(TileSrc + 48);
  v21 = *(_OWORD *)(TileSrc + 16);
  v33 = *(_QWORD *)(TileSrc + 64);
  v31 = v20;
  v32 = v19;
  v30[1] = v21;
  IsResident = ZinIrTensor::IsResident(InputTensor);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  ZinANELayer::SetL2SrcStridesCommon((uint64_t)this, (uint64_t *)a3, a4, IsResident, v9, v24, v30);
  v25 = ZinIrTensor::IsResident(InputTensor);
  v26 = *((_QWORD *)this + 33);
  if (v25)
  {
    v27 = *(_QWORD *)(v26 + 104);
    v28 = *v9 == 1 && v27 > 1;
    if (v28 || v27 == 1)
      *(_QWORD *)&v31 = 0;
  }
  *(_QWORD *)&result = ZinMirL2Config::SetTileSrc(v26 + 120, (uint64_t)v30, v34).n128_u64[0];
  return result;
}

BOOL ZinPELayer::HasOutputScaleOrBias(ZinPELayer *this)
{
  return *((_BYTE *)this + 376) || *((_BYTE *)this + 388) != 0;
}

uint64_t ZinPELayer::GetOutputScale(ZinPELayer *this)
{
  return (uint64_t)this + 368;
}

uint64_t ZinPELayer::GetOutputBias(ZinPELayer *this)
{
  return (uint64_t)this + 380;
}

uint64_t ZinPELayer::Hash(ZinPELayer *this, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  char v27;
  int v28;
  int v29;
  int v30;
  _DWORD *v32;
  unint64_t __p;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;

  v4 = ZinANELayer::Hash(this, a2);
  if (!(_DWORD)v4)
    return v4;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  __p = 0;
  v34 = 0;
  v35 = 0;
  if (*((_BYTE *)this + 376))
  {
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v38, 1uLL);
    *(_DWORD *)v5 = *((_DWORD *)this + 92);
    v36 = v5;
    v38 = &v5[4 * v6];
    v37 = v5 + 4;
    if (!*((_BYTE *)this + 376))
      goto LABEL_56;
    v7 = operator new(1uLL);
    *v7 = *((_BYTE *)this + 372);
    v8 = v7 + 1;
    __p = (unint64_t)v7;
    v35 = v7 + 1;
    v34 = v7 + 1;
  }
  else
  {
    v8 = 0;
  }
  if (!*((_BYTE *)this + 388))
    goto LABEL_43;
  v9 = v37;
  if (v37 >= v38)
  {
    v11 = v36;
    v12 = (v37 - v36) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v14 = v38 - v36;
    if ((v38 - v36) >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v38, v15);
      v11 = v36;
      v9 = v37;
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *(_DWORD *)v17 = *((_DWORD *)this + 95);
    v10 = v17 + 4;
    while (v9 != v11)
    {
      v19 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    v36 = v17;
    v38 = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_DWORD *)v37 = *((_DWORD *)this + 95);
    v10 = v37 + 4;
  }
  v37 = v10;
  if (!*((_BYTE *)this + 388))
LABEL_56:
    std::__throw_bad_optional_access[abi:ne180100]();
  v20 = v34;
  if (v34 >= v35)
  {
    v21 = &v34[-__p];
    v22 = (uint64_t)&v34[-__p + 1];
    if (v22 < 0)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v23 = (unint64_t)&v35[-__p];
    if (2 * (uint64_t)&v35[-__p] > (unint64_t)v22)
      v22 = 2 * v23;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v25 = (unint64_t)operator new(v24);
    else
      v25 = 0;
    v21[v25] = *((_BYTE *)this + 384);
    v8 = &v21[v25 + 1];
    if (v34 == (char *)__p)
    {
      v25 += (unint64_t)v21;
    }
    else
    {
      v26 = &v34[~__p];
      do
      {
        v27 = *--v20;
        (v26--)[v25] = v27;
      }
      while (v20 != (char *)__p);
      v20 = (char *)__p;
    }
    __p = v25;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v34 = *((_BYTE *)this + 384);
    v8 = v34 + 1;
  }
  v34 = v8;
LABEL_43:
  if (v37 == v36)
  {
    v8 = (char *)__p;
LABEL_48:
    if (!v8)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (v8 == (char *)__p)
    goto LABEL_48;
  v28 = *a2;
  v29 = ZinHash(v36, (int)v37 - (int)v36);
  if ((char *)__p == v34)
    v30 = 0;
  else
    v30 = ZinHash((const void *)__p, (int)v34 - (int)__p);
  v32 = operator new(0xCuLL);
  *v32 = v28;
  v32[1] = v29;
  v32[2] = v30;
  *a2 = ZinHash(v32, 0xCu);
  operator delete(v32);
  v8 = (char *)__p;
  if (!__p)
    goto LABEL_50;
LABEL_49:
  operator delete(v8);
LABEL_50:
  if (v36)
    operator delete(v36);
  return v4;
}

void sub_207028508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void ZinPELayer::HasInputTranspose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Checked for Input Transpose on invalid operand\n", a5, a6, a7, a8, 0);
}

void ZinPELayer::SetL2SrcStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Engine layer has a invalid L2 source.", a5, a6, a7, a8, 0);
}

_QWORD *FifoMode::GetFifoModeUtil@<X0>(FifoMode *this@<X0>, _QWORD *a2@<X8>)
{
  int v5;
  _QWORD *result;
  void (**v7)(ZinIrHalH13g *__hidden);

  v5 = *((_DWORD *)this + 424);
  if (v5 == 2)
  {
    result = (_QWORD *)operator new();
    v7 = &off_24C0185C0;
  }
  else if (v5 == 1)
  {
    result = (_QWORD *)operator new();
    v7 = &off_24C018580;
  }
  else
  {
    result = (_QWORD *)operator new();
    v7 = &off_24C018540;
  }
  *result = v7;
  result[1] = this;
  *a2 = result;
  return result;
}

uint64_t FifoModeUtilV1::CanEnableNEOutputFIFOMode(uint64_t a1, ZinEngineLayerMirInfo **a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v15;
  ZinMirL2Config *v17;
  const ZinIrTensor *v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  MirInfoChannelAssignment *ChannelAssignment;
  MirInfoChannelAssignment *v23;
  int v24;
  int v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  BOOL v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char L2FormatSize;
  uint64_t OCGSizeNextPow2;
  uint64_t NumNeededNEsNextPow2;
  void *__p;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD __src[3];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (!a2
    || *(_BYTE *)((*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0) + 164)
    || a3 == 3 && *(_BYTE *)(*(_QWORD *)(a1 + 8) + 1313))
  {
    return 0;
  }
  v49 = 0;
  v17 = (ZinMirL2Config *)(*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
  L2FormatSize = ZinMirL2Config::GetL2FormatSize(v17, v18);
  v19 = *(_DWORD *)ZinMirL2Config::GetTileSrc((uint64_t)a2[33] + 120, 0);
  if (IsFormatDMAConvertibleToFP16(v19))
    v20 = 3;
  else
    v20 = v19;
  ZinTensorFormatGetSize(v20, &v49);
  v21 = v49;
  ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  NumNeededNEsNextPow2 = MirInfoChannelAssignment::GetNumNeededNEsNextPow2(ChannelAssignment);
  v23 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  OCGSizeNextPow2 = MirInfoChannelAssignment::GetOCGSizeNextPow2(v23);
  v24 = (*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 43))(a2);
  v25 = (*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 51))(a2);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = a6;
  v48 = v26 + 1;
  v47 = v26 + 1;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1312))
  {
    __src[0] = a5;
    __src[1] = a6;
    __src[2] = a7;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__p, (char *)__src, (uint64_t)&v51, 3uLL);
  }
  v27 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 46))(a2, 4);
  v28 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 46))(a2, 2);
  v29 = OCGSizeNextPow2 * NumNeededNEsNextPow2;
  v30 = __p;
  if (__p != v47)
  {
    v31 = *(_QWORD *)(a1 + 8);
    do
    {
      v32 = OCGSizeNextPow2 * NumNeededNEsNextPow2;
      v33 = v28 <= v29;
      if ((v25 & 1) == 0)
      {
        v34 = *(_QWORD *)(v31 + 592) / *v30 / v21;
        v32 = v34 * v24;
        if (a8)
          v35 = 0;
        else
          v35 = v27 > v34;
        v33 = !v35;
      }
      v36 = (L2FormatSize * (_BYTE)a3 * v32) & 0x3F;
      if (*(_BYTE *)(v31 + 1880))
      {
        if (!v36)
          v33 = 1;
        if (!v33)
          goto LABEL_50;
      }
      else if (v36)
      {
        goto LABEL_50;
      }
      ++v30;
    }
    while (v30 != v47);
  }
  if (!v25)
  {
    if (v28 <= v29)
      goto LABEL_48;
    if (v29 % a3 || *((_DWORD *)a2[33] + 364))
      goto LABEL_50;
    v40 = *(_QWORD *)(a1 + 8);
LABEL_47:
    if (!*(_BYTE *)(v40 + 1233) && v28 % a3)
      goto LABEL_50;
LABEL_48:
    v15 = 1;
    goto LABEL_51;
  }
  v37 = v28;
  v38 = *((_DWORD *)a2[33] + 66);
  if (IsFormatDMAConvertibleToFP16(v38))
    v39 = 3;
  else
    v39 = v38;
  v28 = v37;
  if ((v39 - 1) >= 2)
  {
    if (v39 == 3)
    {
      if ((v29 & 7) == 0)
        goto LABEL_42;
      goto LABEL_50;
    }
    if (v39 != 12)
      goto LABEL_50;
  }
  if ((v29 & 0xF) == 0)
  {
LABEL_42:
    v41 = __p;
    v40 = *(_QWORD *)(a1 + 8);
    if (__p != v47)
    {
      while (1)
      {
        v42 = *(_QWORD *)(v40 + 592) / *v41 / v21;
        if (v27 > v42 && (v42 * v24 % a3 || *((_DWORD *)a2[33] + 364)))
          goto LABEL_50;
        if (++v41 == v47)
          goto LABEL_47;
      }
    }
    goto LABEL_47;
  }
LABEL_50:
  v15 = 0;
LABEL_51:
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_2070289A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL FifoModeUtilV1::CanEnablePEOutputFIFOMode(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9)
{
  unint64_t v15;
  unint64_t v16;

  if (!a2)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 408))(a2) & 1) != 0)
    return 0;
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0) + 164))
    return 0;
  v15 = *(_QWORD *)(a3 + 24);
  v16 = 0;
  ZinTensorFormatGetSize(a9, &v16);
  return v15 <= a4 || ((a8 * a6 * (a4 / v16)) & 0x3FLL) == 0;
}

ZinEngineLayerMirInfo **FifoModeUtilV2::CanEnableNEOutputFIFOMode(uint64_t a1, ZinEngineLayerMirInfo **a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, int a8, char a9)
{
  char v16;
  MirInfoChannelAssignment *ChannelAssignment;
  char NumNeededNEsNextPow2;
  MirInfoChannelAssignment *v19;
  char OCGSizeNextPow2;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  int v27;

  v16 = a9;
  ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  NumNeededNEsNextPow2 = MirInfoChannelAssignment::GetNumNeededNEsNextPow2(ChannelAssignment);
  v19 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  OCGSizeNextPow2 = MirInfoChannelAssignment::GetOCGSizeNextPow2(v19);
  if (!(*((unsigned int (**)(ZinEngineLayerMirInfo **))*a2 + 51))(a2))
    return UtilCanEnableNEOutputFIFOMode(a2, a3, a4, a5, a6, a8, v16, *(_QWORD **)(a1 + 8));
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a8;
  v26 = *((_DWORD *)a2[33] + 66);
  if (IsFormatDMAConvertibleToFP16(v26))
    v27 = 3;
  else
    v27 = v26;
  a8 = v25;
  a6 = v24;
  a5 = v23;
  a4 = v22;
  a3 = v21;
  v16 = a9;
  if ((v27 - 1) >= 2)
  {
    if (v27 == 3)
    {
      if (((OCGSizeNextPow2 * NumNeededNEsNextPow2) & 7) != 0)
        return 0;
      return UtilCanEnableNEOutputFIFOMode(a2, a3, a4, a5, a6, a8, v16, *(_QWORD **)(a1 + 8));
    }
    if (v27 != 12)
      return 0;
  }
  if (((OCGSizeNextPow2 * NumNeededNEsNextPow2) & 0xF) != 0)
    return 0;
  return UtilCanEnableNEOutputFIFOMode(a2, a3, a4, a5, a6, a8, v16, *(_QWORD **)(a1 + 8));
}

ZinEngineLayerMirInfo **UtilCanEnableNEOutputFIFOMode(ZinEngineLayerMirInfo **result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, char a7, _QWORD *a8)
{
  ZinEngineLayerMirInfo **v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  ZinIrTarget *ChannelAssignment;
  char Lut;
  unint64_t v20;
  unint64_t v21;
  MirInfoChannelAssignment *v22;
  unint64_t v23;
  MirInfoChannelAssignment *v24;
  uint64_t NumNeededNEsNextPow2;
  MirInfoChannelAssignment *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  _BOOL4 v32;
  int v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t v37;
  const ZinIrTensor *v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  _BOOL4 v42;
  int v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v48;
  int v49;

  if (!result)
    return result;
  v14 = result;
  v49 = 0;
  v15 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD))*result + 63))(result, 0);
  v16 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
  if (GetHWChannelFormat(*(_DWORD *)(v16 + 88), &v49))
    ZinAssertImpl("[Error] FifoModeUtil: Invalid input tensor format.");
  v17 = v49 == 2;
  ChannelAssignment = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(v14[33]);
  Lut = ZinIrTarget::GetLut(ChannelAssignment);
  if (a6 == 3)
  {
    v20 = a8[148];
    v21 = v20 >> (a7 + v17);
    goto LABEL_7;
  }
  if (a6 == 4)
  {
    v20 = a8[146];
    v21 = v20 >> v17;
LABEL_7:
    a4 = a8[103] / v20;
    goto LABEL_9;
  }
  v22 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v14[33]);
  v21 = (a8[74] / a5) >> (a7 + v17) << MirInfoChannelAssignment::GetFatTileEnable(v22);
LABEL_9:
  v23 = a4 << Lut;
  v24 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v14[33]);
  NumNeededNEsNextPow2 = MirInfoChannelAssignment::GetNumNeededNEsNextPow2(v24);
  v26 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v14[33]);
  v27 = MirInfoChannelAssignment::GetOCGSizeNextPow2(v26) * NumNeededNEsNextPow2;
  v28 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*v14 + 46))(v14, 4);
  v29 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*v14 + 46))(v14, 2);
  v30 = (*((uint64_t (**)(ZinEngineLayerMirInfo **))*v14 + 43))(v14);
  v31 = v28 <= v21;
  v32 = v29 <= v27;
  v33 = (*((uint64_t (**)(ZinEngineLayerMirInfo **))*v14 + 51))(v14);
  v34 = (int)v30 * v21;
  if (v33)
    v35 = v31;
  else
    v35 = v32;
  if (v33)
  {
    v36 = (int)v30 * v21;
  }
  else
  {
    v32 = v31;
    v36 = v27;
  }
  if (!v33)
    v27 = v34;
  v37 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*v14 + 46))(v14, 3);
  if (!*(_BYTE *)((*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*v14 + 4))(v14, 0, 0) + 164))
  {
    LODWORD(v48) = 0;
    v41 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*v14 + 4))(v14, 0, 0);
    if (!GetHWDMAFormatMode(*(_DWORD *)(v41 + 88), (int *)&v48))
    {
      v39 = GetHWDMAFormatBytes((int *)&v48, a2) * v27 % a8[66];
      v40 = 1;
      goto LABEL_23;
    }
    return 0;
  }
  v48 = 1;
  v38 = (const ZinIrTensor *)(*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*v14 + 4))(v14, 0, 0);
  if (GetImbSize(v38, &v48))
    return 0;
  v39 = v27 % v48;
  v40 = (v30 >> 32) * v23 % v48 == 0;
LABEL_23:
  if (v36 % a2)
    v42 = 0;
  else
    v42 = *((_DWORD *)v14[33] + 364) == 0;
  result = 0;
  v43 = v37 <= v23 || v40;
  v44 = v35 || v42;
  if (v39)
    v45 = !v32;
  else
    v45 = 0;
  if (!v45 && v43)
  {
    if (v44)
    {
      v46 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*v14 + 4))(v14, 0, 0);
      return (ZinEngineLayerMirInfo **)!ZinCropOffsetUtil::HasUnalignedOutputCropX(*(_DWORD *)(v46 + 88), a3, (uint64_t)a8);
    }
  }
  return result;
}

uint64_t FifoModeUtilV2::CanEnablePEOutputFIFOMode(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  return UtilCanEnablePEOutputFIFOMode(a2, a4, a5, a6, a7, *(_QWORD *)(a1 + 8));
}

uint64_t UtilCanEnablePEOutputFIFOMode(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  const ZinIrTensor *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int HWDMAFormatMode;
  uint64_t HWDMAFormatBytes;
  uint64_t v22;
  int v23;
  unint64_t v24;

  if (result)
  {
    v11 = (_QWORD *)result;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 344))(result) == 0x200000002)
      return 0;
    if (((*(uint64_t (**)(_QWORD *))(*v11 + 408))(v11) & 1) != 0)
      return 0;
    v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v11 + 368))(v11, 4);
    if (*(_DWORD *)(v11[33] + 1456))
      return 0;
    v13 = v12;
    if (*(_DWORD *)(v11[8] + 8) == 81 && v11[63])
      return 1;
    if (*(_BYTE *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v11 + 32))(v11, 0, 0) + 164))
    {
      v24 = 1;
      v14 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v11 + 32))(v11, 0, 0);
      if (GetImbSize(v14, &v24))
        return 0;
      v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v11 + 368))(v11, 3);
      v16 = v15;
      v17 = *(_QWORD *)(v11[33] + 200);
      if (v15 > v17)
      {
        if (v17 % v24)
          return 0;
      }
      if (v13 <= a2)
      {
        if (v15 <= a3)
          return 1;
        v18 = v24;
      }
      else
      {
        v18 = v24;
        result = a2 % v24 == 0;
        if (v16 <= a3 || a2 % v24)
          return result;
      }
      return a3 % v18 == 0;
    }
    v23 = 0;
    v19 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v11 + 32))(v11, 0, 0);
    HWDMAFormatMode = GetHWDMAFormatMode(*(_DWORD *)(v19 + 88), &v23);
    result = 0;
    if (!HWDMAFormatMode)
    {
      HWDMAFormatBytes = GetHWDMAFormatBytes(&v23, a4);
      if (v13 <= a2 || !(HWDMAFormatBytes * a2 % *(_QWORD *)(a6 + 528)))
      {
        v22 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v11 + 32))(v11, 0, 0);
        return !ZinCropOffsetUtil::HasUnalignedOutputCropX(*(_DWORD *)(v22 + 88), a5, a6);
      }
      return 0;
    }
  }
  return result;
}

BOOL FifoModeUtilV2::CanEnableNEInputFIFOMode(FifoModeUtilV2 *this, const ZinNELayer *a2, unint64_t a3, const ZinMirL2Config::NE *a4, unint64_t a5, unint64_t a6)
{
  return UtilCanEnableNEInputFIFOMode((_BOOL8)a2, a3, a4, a5, a6);
}

BOOL UtilCanEnableNEInputFIFOMode(_BOOL8 result, unint64_t a2, const ZinMirL2Config::NE *a3, unint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  const ZinIrTensor *InputTensor;
  uint64_t v11;
  ZinIrTarget *ChannelAssignment;
  uint64_t v13;
  MirInfoChannelAssignment *v14;
  uint64_t OCGSizeNextPow2;
  MirInfoChannelAssignment *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  char v21;
  _QWORD v22[4];
  int v23;
  _QWORD v24[12];
  _QWORD v25[11];
  char v26;

  if (result)
  {
    v9 = (_QWORD *)result;
    InputTensor = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)result, a2);
    result = HasValidL2AndDMAGranularityConstraintForDRAMInputFIFOMode(InputTensor, a5);
    if ((_DWORD)result)
    {
      if ((*((_DWORD *)a3 + 6) - 3) < 2)
        return 0;
      v11 = *((_QWORD *)a3 + 2);
      ChannelAssignment = (ZinIrTarget *)ZinMirL2Config::NE::GetChannelAssignment(a3);
      if (v11 * (1 << ZinIrTarget::GetLut(ChannelAssignment)) < a4)
        return 0;
      result = 0;
      v13 = *((_QWORD *)a3 + 2);
      if (v13 != *(_QWORD *)a3 || v13 != *((_QWORD *)a3 + 1))
        return result;
      v14 = (MirInfoChannelAssignment *)ZinMirL2Config::NE::GetChannelAssignment(a3);
      OCGSizeNextPow2 = MirInfoChannelAssignment::GetOCGSizeNextPow2(v14);
      v16 = (MirInfoChannelAssignment *)ZinMirL2Config::NE::GetChannelAssignment(a3);
      v17 = MirInfoChannelAssignment::GetActiveNEPerCluster(v16) * OCGSizeNextPow2;
      if (v17 < (*(uint64_t (**)(_QWORD *, uint64_t))(*v9 + 368))(v9, 2))
        return 0;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*v9 + 136))(v25, v9);
      if (v26)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*v9 + 136))(v24, v9);
        if (v24[2] != 1)
          return 0;
        (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*v9 + 136))(v22, v9);
        if (v23 != 1)
          return 0;
      }
      if (*(_DWORD *)(v9[8] + 8) == 90)
      {
        v18 = v9[33];
        if (v18)
        {
          if (a2 >= 2)
            std::__throw_out_of_range[abi:ne180100]("array::at");
          v19 = *(_DWORD *)(v18 + 8 * a2 + 1464);
          v20 = *(_DWORD *)(v18 + 4 * a2 + 1448);
        }
        else
        {
          v19 = 0;
          LOBYTE(v20) = 0;
        }
        v21 = ZinCountOnes<unsigned int>(v19);
        result = ZinIsEven(a5 - v21);
        if ((_DWORD)result)
          return ZinIsEven(v20);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t FifoModeUtilV2::CanEnablePEInputFIFOMode(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  return UtilCanEnablePEInputFIFOMode(a2, a3, a4, a5, a6);
}

uint64_t UtilCanEnablePEInputFIFOMode(uint64_t result, int a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  ZinIrOpLayer *v9;
  const ZinIrTensor *InputTensor;
  _BOOL4 valid;
  int v12;
  unint64_t v13;

  if (result)
  {
    v9 = (ZinIrOpLayer *)result;
    v13 = 0;
    if (ZinMemSourceIndexTranslator::GetIncomingSrcIndexFromL2SrcType((_QWORD *)result, a2, &v13))
      ZinAssertImpl("L2 index translator failed.");
    InputTensor = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v9, v13);
    valid = HasValidL2AndDMAGranularityConstraintForDRAMInputFIFOMode(InputTensor, a5);
    result = 0;
    if (a3 >= a4 && valid)
    {
      if (a2 == 1)
      {
        if (((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 664))(v9) & 1) != 0
          || ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 648))(v9) & 1) != 0)
        {
          return 0;
        }
        v12 = *(_DWORD *)(*((_QWORD *)v9 + 8) + 8);
        if (v12 == 83)
        {
          if (((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 568))(v9) & 1) != 0)
            return 0;
          v12 = *(_DWORD *)(*((_QWORD *)v9 + 8) + 8);
        }
        if (v12 != 84)
          return 1;
      }
      else if (a2
             || ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 656))(v9) & 1) == 0
             && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 640))(v9) & 1) == 0)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

ZinEngineLayerMirInfo **FifoModeUtilV3::CanEnableNEOutputFIFOMode(uint64_t a1, ZinEngineLayerMirInfo **a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, int a8, char a9)
{
  return UtilCanEnableNEOutputFIFOMode(a2, a3, a4, a5, a6, a8, a9, *(_QWORD **)(a1 + 8));
}

uint64_t FifoModeUtilV3::CanEnablePEOutputFIFOMode(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  return UtilCanEnablePEOutputFIFOMode(a2, a4, a5, a6, a7, *(_QWORD *)(a1 + 8));
}

BOOL FifoModeUtilV3::CanEnableNEInputFIFOMode(FifoModeUtilV3 *this, const ZinNELayer *a2, unint64_t a3, const ZinMirL2Config::NE *a4, unint64_t a5, unint64_t a6)
{
  return UtilCanEnableNEInputFIFOMode((_BOOL8)a2, a3, a4, a5, a6);
}

uint64_t FifoModeUtilV3::CanEnablePEInputFIFOMode(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  return UtilCanEnablePEInputFIFOMode(a2, a3, a4, a5, a6);
}

uint64_t GetImbSize(const ZinIrTensor *a1, unint64_t *a2)
{
  uint64_t InterchangeDescriptor;
  uint64_t result;
  unint64_t v5;

  *a2 = 1;
  if (!*((_BYTE *)a1 + 164))
    return 0;
  InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor(a1);
  if (HIDWORD(InterchangeDescriptor))
  {
    if (HIDWORD(InterchangeDescriptor) == 1)
    {
      result = 0;
      v5 = 32;
      goto LABEL_11;
    }
    if (HIDWORD(InterchangeDescriptor) == 2)
    {
      result = 0;
      v5 = 16;
LABEL_11:
      *a2 = v5;
      return result;
    }
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    GetImbSize();
  return 3;
}

BOOL HasValidL2AndDMAGranularityConstraintForDRAMInputFIFOMode(const ZinIrTensor *a1, unint64_t a2)
{
  unsigned int v4;
  int v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v11;

  v4 = *((_DWORD *)a1 + 22);
  if (IsFormatDMAConvertibleToFP16(v4))
    v5 = 3;
  else
    v5 = v4;
  if (!IsPrimaryFormat(v5))
    ZinAssertImpl("L2 format should be one of the supported primary formats.");
  if ((v5 - 1) < 2 || v5 == 12)
  {
    v7 = 16;
  }
  else
  {
    if (v5 != 3)
      ZinAssertImpl("Invalid primary format");
    v7 = 8;
  }
  if (a2 == 3)
    a2 = 1;
  v11 = 0;
  if (GetHWDMAFormatMode(v4, &v11))
    ZinAssertImpl("Invalid input DMA format");
  if (*((_BYTE *)a1 + 164))
  {
    switch(v11)
    {
      case 0:
        goto LABEL_22;
      case 1:
      case 3:
        ZinAssertImpl("Invalid input DMA format for compressed tensor");
      case 2:
        v8 = 8;
        return v8 <= v7;
      default:
        goto LABEL_21;
    }
  }
  switch(v11)
  {
    case 0:
      v9 = 64;
      goto LABEL_25;
    case 1:
LABEL_22:
      v8 = 16;
      return v8 <= v7;
    case 2:
      v9 = 32;
      goto LABEL_25;
    case 3:
      v9 = 16;
LABEL_25:
      v8 = v9 / a2;
      break;
    default:
LABEL_21:
      v8 = 1;
      break;
  }
  return v8 <= v7;
}

void GetImbSize()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Attempting to get invalid interchange macro block size.", v0, 2u);
}

__int128 *ZinIrHalH13::GetParams(ZinIrHalH13 *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  _OWORD v11[3];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[5];
  int v26;
  int64x2_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int64x2_t v31;
  uint64_t v32;
  int v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  _QWORD v39[3];
  int v40;
  _QWORD v41[3];
  int v42;
  uint64_t v43;
  _QWORD v44[2];
  _OWORD v45[10];
  int v46;
  _OWORD v47[7];
  int v48;
  _OWORD v49[2];
  _OWORD v50[2];
  __int128 v51;
  int64x2_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalH13::GetParams(void)const::ZinIrHalH13Parameters = xmmword_207A7D310;
    dword_25451EDE0 = 8;
    unk_25451EDE8 = xmmword_207A7D320;
    unk_25451EDF8 = xmmword_207A7D330;
    unk_25451EE08 = xmmword_207A7D340;
    unk_25451EE18 = xmmword_207A7D350;
    unk_25451EE28 = xmmword_207A7D360;
    unk_25451EE38 = xmmword_207A7D340;
    unk_25451EE48 = xmmword_207A7D370;
    unk_25451EE58 = xmmword_207A7D380;
    unk_25451EE68 = xmmword_207A7D390;
    unk_25451EE78 = xmmword_207A7D3A0;
    unk_25451EE88 = vdupq_n_s64(4uLL);
    qword_25451EE98 = 4;
    xmmword_25451EEA0 = xmmword_207AB32B8;
    unk_25451EEB0 = unk_207AB32C8;
    xmmword_25451EEC0 = xmmword_207AB32B8;
    unk_25451EED0 = unk_207AB32C8;
    qword_25451EEF0 = 4;
    xmmword_25451EEE0 = xmmword_207AB32D8;
    xmmword_25451EEF8 = xmmword_207A7D3B0;
    xmmword_25451EF08 = xmmword_207A7D3C0;
    xmmword_25451EF18 = xmmword_207A7D3C0;
    xmmword_25451EF28 = xmmword_207A7D3C0;
    xmmword_25451EF38 = xmmword_207A7D3D0;
    xmmword_25451EF48 = xmmword_207A7D3E0;
    xmmword_25451EF58 = xmmword_207A7D3F0;
    xmmword_25451EF68 = xmmword_207A7D400;
    xmmword_25451EF78 = xmmword_207A7D410;
    xmmword_25451EF88 = xmmword_207A7D420;
    xmmword_25451EF98 = xmmword_207A7D430;
    xmmword_25451EFA8 = xmmword_207A7D440;
    xmmword_25451EFB8 = xmmword_207A7D450;
    xmmword_25451EFC8 = xmmword_207A7D460;
    xmmword_25451EFD8 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_25451EFE8 = xmmword_207A7D550;
    xmmword_25451EFF8 = xmmword_207A7D480;
    xmmword_25451F008 = xmmword_207A7D490;
    xmmword_25451F018 = xmmword_207A7D4A0;
    qword_25451F028 = 64;
    xmmword_25451F030 = 0u;
    unk_25451F040 = xmmword_207A7D4B0;
    word_25451F050 = 256;
    xmmword_25451F058 = xmmword_207A7D4C0;
    xmmword_25451F068 = xmmword_207A7D4D0;
    xmmword_25451F078 = xmmword_207A7D4E0;
    qword_25451F088 = 0x10000;
    byte_25451F090 = 32;
    xmmword_25451F098 = xmmword_207A7D4F0;
    dword_25451F0A8 = 520097776;
    qword_25451F0AC = 0xFFFFFFEB0000000BLL;
    xmmword_25451F0B8 = xmmword_207A7D500;
    xmmword_25451F0C8 = xmmword_207A7D510;
    xmmword_25451F0D8 = xmmword_207A7D520;
    v52 = vdupq_n_s64(8uLL);
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_25451F0E8, (uint64_t)&v52, 1uLL);
    xmmword_25451F100 = xmmword_207A7D530;
    *(_OWORD *)algn_25451F110 = xmmword_207A7D540;
    xmmword_25451F120 = (__int128)vdupq_n_s64(0x20uLL);
    unk_25451F130 = xmmword_207A7D370;
    xmmword_25451F140 = (__int128)vdupq_n_s64(8uLL);
    unk_25451F150 = xmmword_207A7D550;
    xmmword_25451F160 = xmmword_207A7D560;
    unk_25451F170 = vdupq_n_s64(0x100uLL);
    xmmword_25451F180 = (__int128)vdupq_n_s64(0x80uLL);
    unk_25451F190 = xmmword_207A7D570;
    xmmword_25451F1A0 = xmmword_207A7D580;
    unk_25451F1B0 = xmmword_207A7D590;
    xmmword_25451F1C0 = xmmword_207A7D5A0;
    unk_25451F1D0 = xmmword_207A7D5B0;
    xmmword_25451F1E0 = (__int128)vdupq_n_s64(2uLL);
    unk_25451F1F0 = xmmword_207A7D3C0;
    xmmword_25451F200 = (__int128)vdupq_n_s64(0x4000uLL);
    unk_25451F210 = xmmword_207A7D5C0;
    word_25451F220 = 257;
    byte_25451F226 = 0;
    dword_25451F222 = 0;
    word_25451F227 = 1;
    dword_25451F229 = 16843009;
    xmmword_25451F22D = 0u;
    *(_DWORD *)((char *)&xmmword_25451F22D + 15) = 0;
    byte_25451F240 = 1;
    byte_25451F245 = 0;
    dword_25451F241 = 0;
    qword_25451F246 = 0x101000000010101;
    word_25451F24E = 0;
    xmmword_25451F250 = xmmword_207A7D5D0;
    unk_25451F260 = xmmword_207A7D5E0;
    qword_25451F270 = 40;
    xmmword_25451F278 = 0u;
    dword_25451F288 = 16843009;
    *(int *)((char *)&dword_25451F288 + 3) = 16843009;
    word_25451F28F = 0;
    qword_25451F298 = 0;
    byte_25451F2A0 = 0;
    dword_25451F2A1 = 16843009;
    word_25451F2A9 = 0;
    dword_25451F2A5 = 0;
    dword_25451F2AB = 16842753;
    qword_25451F2AF = 0;
    byte_25451F2B7 = 0;
    dword_25451F2B8 = 65793;
    word_25451F2BC = 0;
    byte_25451F2BE = 1;
    dword_25451F2BF = 0;
    byte_25451F2C3 = 1;
    dword_25451F2C4 = 0;
    word_25451F2C8 = 0;
    qword_25451F2D8 = -1;
    unk_25451F2E0 = -1;
    qword_25451F2D0 = 128;
    word_25451F2E8 = 0;
    dword_25451F2EC = 0;
    word_25451F2F0 = 1;
    byte_25451F2F2 = 1;
    *(uint64_t *)((char *)&qword_25451F2F3 + 6) = 0;
    qword_25451F2F3 = 0;
    dword_25451F301 = 1542;
    byte_25451F305 = 1;
    dword_25451F306 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_25451F310, "Simple");
    qword_25451F328 = 0x1000000;
    dword_25451F334 = 0;
    unk_25451F338 = 0;
    dword_25451F330 = 1071225242;
    unk_25451F340 = xmmword_207A7D5F0;
    unk_25451F350 = vdupq_n_s64(0x40uLL);
    unk_25451F360 = xmmword_207A7D600;
    qword_25451F370 = 8;
    byte_25451F378 = 0;
    unk_25451F37C = 0xF3E800000;
    byte_25451F384 = 0;
    v51 = xmmword_207A7D610;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_25451F388, &v51, 4uLL);
    v49[0] = xmmword_207AB32F0;
    v49[1] = unk_207AB3300;
    v50[0] = xmmword_207AB3310;
    *(_OWORD *)((char *)v50 + 12) = *(__int128 *)((char *)&xmmword_207AB3310 + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_25451F3A0, v49, 0xFuLL);
    v48 = 25;
    v47[4] = xmmword_207AB336C;
    v47[5] = unk_207AB337C;
    v47[6] = xmmword_207AB338C;
    v47[0] = xmmword_207AB332C;
    v47[1] = unk_207AB333C;
    v47[2] = xmmword_207AB334C;
    v47[3] = unk_207AB335C;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_25451F3B8, v47, 0x1DuLL);
    v46 = 42;
    v45[6] = xmmword_207AB3400;
    v45[7] = unk_207AB3410;
    v45[8] = xmmword_207AB3420;
    v45[9] = unk_207AB3430;
    v45[2] = xmmword_207AB33C0;
    v45[3] = unk_207AB33D0;
    v45[4] = xmmword_207AB33E0;
    v45[5] = unk_207AB33F0;
    v45[0] = xmmword_207AB33A0;
    v45[1] = unk_207AB33B0;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_25451F3D0, v45, 0x29uLL);
    v34 = 2;
    v35 = xmmword_207A7D620;
    v36 = 0x1100000002;
    v37 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v9, &v34, 1uLL);
    v38 = 641877825;
    memset(v39, 0, sizeof(v39));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v39, v9, (uint64_t)v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - (_BYTE *)v9) >> 3));
    v30 = 10;
    v31 = vdupq_n_s64(1uLL);
    v32 = 0x800000001;
    v33 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v7, &v30, 1uLL);
    v40 = 642527542;
    memset(v41, 0, sizeof(v41));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v41, v7, (uint64_t)v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)v7) >> 3));
    v26 = 3;
    v27 = vdupq_n_s64(1uLL);
    v28 = 0x700000002;
    v29 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v26, 1uLL);
    v42 = 642527336;
    v44[0] = 0;
    v44[1] = 0;
    v43 = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v43, __p, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_25451F3E8, &v38, 3);
    word_25451F400 = 0;
    byte_25451F402 = 1;
    *(_DWORD *)algn_25451F403 = 0;
    qword_25451F408 = 0;
    dword_25451F410 = 0;
    unk_25451F418 = 0u;
    unk_25451F428 = 0u;
    word_25451F438 = 257;
    qword_25451F460 = 8;
    xmmword_25451F440 = xmmword_207AB3448;
    unk_25451F450 = unk_207AB3458;
    unk_25451F468 = xmmword_207A7D630;
    v25[2] = xmmword_207AB3490;
    v25[3] = unk_207AB34A0;
    v25[4] = xmmword_207AB34B0;
    v25[0] = xmmword_207AB3470;
    v25[1] = unk_207AB3480;
    std::vector<double>::vector[abi:ne180100](&qword_25451F478, v25, 0xAuLL);
    v13 = xmmword_207AB34C0;
    *(_QWORD *)&v14 = 0x41CAD27480000000;
    std::vector<double>::vector[abi:ne180100](&qword_25451F490, &v13, 3uLL);
    v23 = xmmword_207AB34D8;
    v24 = 0x41DFC8BFD0000000;
    std::vector<double>::vector[abi:ne180100](&qword_25451F4A8, &v23, 3uLL);
    v19 = xmmword_207AB3550;
    v20 = unk_207AB3560;
    v21 = xmmword_207AB3570;
    v22 = unk_207AB3580;
    v15 = xmmword_207AB3510;
    v16 = unk_207AB3520;
    v17 = xmmword_207AB3530;
    v18 = unk_207AB3540;
    v13 = xmmword_207AB34F0;
    v14 = unk_207AB3500;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_25451F4C0, (double *)&v13, 10);
    xmmword_25451F4D8 = xmmword_207A7D640;
    v11[0] = xmmword_207AB3590;
    v11[1] = unk_207AB35A0;
    v11[2] = xmmword_207AB35B0;
    v12 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](algn_25451F4E8, v11, 0xDuLL);
    v3 = 0;
    xmmword_25451F500 = xmmword_207A7D4F0;
    *(_OWORD *)algn_25451F510 = xmmword_207A7D650;
    word_25451F619 = 257;
    qword_25451F520 = 64;
    unk_25451F528 = 0x101010101010101;
    unk_25451F52D = 0x101010101010101;
    dword_25451F538 = 257;
    xmmword_25451F540 = xmmword_207AB35C8;
    unk_25451F550 = unk_207AB35D8;
    xmmword_25451F560 = xmmword_207AB35E8;
    unk_25451F570 = unk_207AB35F8;
    word_25451F5C0 = 1;
    byte_25451F535 = 0;
    xmmword_25451F5A0 = xmmword_207AB3628;
    unk_25451F5B0 = unk_207AB3638;
    xmmword_25451F580 = xmmword_207AB3608;
    unk_25451F590 = unk_207AB3618;
    byte_25451F5C2 = 0;
    byte_25451F5C8 = 0;
    byte_25451F5D0 = 0;
    dword_25451F5E0 = 0;
    word_25451F5E4 = 0;
    qword_25451F600 = 0;
    byte_25451F608 = 0;
    qword_25451F610 = 0;
    byte_25451F618 = 0;
    dword_25451F5D8 = 0;
    qword_25451F5E8 = 0;
    unk_25451F5F0 = 0;
    byte_25451F5F8 = 0;
    do
    {
      v4 = (void *)v44[v3 - 1];
      if (v4)
      {
        v44[v3] = v4;
        operator delete(v4);
      }
      v3 -= 4;
    }
    while (v3 != -12);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH13::GetParams(void)const::ZinIrHalH13Parameters, &dword_2069AB000);
  }
  return &ZinIrHalH13::GetParams(void)const::ZinIrHalH13Parameters;
}

void sub_20702A198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v25, *(_QWORD **)(v25 + 8));
  if (qword_25451F4A8)
  {
    qword_25451F4B0 = qword_25451F4A8;
    operator delete((void *)qword_25451F4A8);
  }
  if (qword_25451F490)
  {
    qword_25451F498 = qword_25451F490;
    operator delete((void *)qword_25451F490);
  }
  if (qword_25451F478)
  {
    qword_25451F480 = qword_25451F478;
    operator delete((void *)qword_25451F478);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v24, *(_QWORD **)(v24 + 8));
  v27 = 0;
  while (1)
  {
    v28 = *(void **)((char *)&STACK[0x260] + v27 + 72);
    if (v28)
    {
      *(unint64_t *)((char *)&STACK[0x260] + v27 + 80) = (unint64_t)v28;
      operator delete(v28);
    }
    v27 -= 32;
    if (v27 == -96)
    {
      if (__p)
        operator delete(__p);
      if (a21)
        operator delete(a21);
      if (a24)
        operator delete(a24);
      if (qword_25451F3D0)
      {
        qword_25451F3D8 = qword_25451F3D0;
        operator delete((void *)qword_25451F3D0);
      }
      if (qword_25451F3B8)
      {
        qword_25451F3C0 = qword_25451F3B8;
        operator delete((void *)qword_25451F3B8);
      }
      if (qword_25451F3A0)
      {
        qword_25451F3A8 = qword_25451F3A0;
        operator delete((void *)qword_25451F3A0);
      }
      if (qword_25451F388)
      {
        qword_25451F390 = qword_25451F388;
        operator delete((void *)qword_25451F388);
      }
      if (byte_25451F327 < 0)
        operator delete((void *)qword_25451F310);
      if (qword_25451F0E8)
      {
        qword_25451F0F0 = qword_25451F0E8;
        operator delete((void *)qword_25451F0E8);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20702A394()
{
  JUMPOUT(0x20702A2F0);
}

void sub_20702A39C()
{
  JUMPOUT(0x20702A308);
}

void sub_20702A3A4()
{
  JUMPOUT(0x20702A320);
}

void sub_20702A3AC()
{
  JUMPOUT(0x20702A338);
}

void sub_20702A3B4()
{
  JUMPOUT(0x20702A350);
}

void sub_20702A3BC()
{
  JUMPOUT(0x20702A368);
}

void sub_20702A3C4()
{
  JUMPOUT(0x20702A380);
}

uint64_t ZinIrSpaceToChannelInfo::ZinIrSpaceToChannelInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 40);
  *(_QWORD *)result = &unk_24C022328;
  v4 = *a2;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(result + 12) = v4;
  return result;
}

_QWORD *ZinSpaceToChannelLayer::ZinSpaceToChannelLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C021CC0;
  return a1;
}

void sub_20702A4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinSpaceToChannelLayer::LowerEngine(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  ZinIrKernel *v25;
  ZinIrOpLayer *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  BOOL v36;
  char v37;
  ZinIrKernel *v38;
  void *v39;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  __n128 v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  ZinIrOpLayer *Transpose;
  BOOL v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  ZinIrOpLayer *SpaceToBatch;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  ZinIrOpLayer *v77;
  BOOL v78;
  char v79;
  _QWORD v80[4];
  int v81;
  void *__p[2];
  __int128 v83;
  int v84;
  std::string v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  ZinIrKernel *v88;
  ZinIrKernel *v89;
  void *v90[3];
  void *v91;
  void *v92;
  char *v93;
  char v94;
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64x2_t v99;
  _BYTE v100[32];
  __int128 v101;
  _BYTE v102[32];
  __int128 v103;
  int v104;
  uint64_t v105;
  __int128 v106;
  std::string::size_type v107;
  __int128 *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 64);
  if (*(_DWORD *)(v6 + 12) == 2 && *(_DWORD *)(v6 + 16) == 2)
  {
    v7 = **(_QWORD **)(a1 + 88);
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    v108 = 0;
    v109 = 0;
    v110 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v108, *(const void **)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3);
    v10 = *(int *)(v6 + 12);
    v11 = *(int *)(v6 + 16);
    v12 = *(_QWORD *)(v9 + 56) / ((int)v11 * (uint64_t)(int)v10);
    v95.i64[0] = *(_QWORD *)(v9 + 56);
    v95.i64[1] = v12;
    v96 = v11;
    v97 = v10;
    v98 = 1;
    ZinObjectNameFactory::ZinObjectNameFactory(&v91, a1 + 24);
    ZinObjectNameFactory::CreateName((uint64_t)&v91, 2u, (std::string *)&v99);
    v13 = std::string::append((std::string *)&v99, "_S2C_conv_kernel_", 0x11uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v107 = v13->__r_.__value_.__r.__words[2];
    v106 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((v100[7] & 0x80000000) != 0)
      operator delete((void *)v99.i64[0]);
    v99.i32[0] = 0;
    std::vector<float>::vector(v90, v95.i64[1] * v95.i64[0] * v96 * v97 * v98, &v99);
    v15 = v95.i64[0];
    if (v95.i64[0] >= 1)
    {
      v16 = 0;
      v17 = 0;
      v18 = v95.i64[1];
      v19 = v90[0];
      v20 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12);
      do
      {
        v19[v16 + v17 / v18 + (int)(v20 * (v17 % v18))] = 1065353216;
        ++v17;
        v16 += v15;
      }
      while (v15 != v17);
    }
    v99 = vdupq_n_s64(2uLL);
    *(_QWORD *)v100 = 1;
    *(_OWORD *)&v100[8] = xmmword_207A9B450;
    *(_QWORD *)&v100[24] = 0x100000001;
    v101 = 0uLL;
    *(_QWORD *)&v21 = 0x100000001;
    *((_QWORD *)&v21 + 1) = 0x100000001;
    *(_OWORD *)&v102[8] = v21;
    *(_QWORD *)v102 = 0;
    *(_QWORD *)&v102[24] = 1;
    LOWORD(v103) = 0;
    DWORD1(v103) = 0;
    ZinIrKernel::CreateDynamicKernel(&v106, (uint64_t)&v99, (float **)v90, 4, &v95, 2uLL, **a3, 0, (uint64_t *)&v89);
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v8 + 88);
    v88 = v89;
    v89 = 0;
    v24 = ZinBuilder::CreateConv(v22, (uint64_t)&v91, v9 + 48, v23, v23, &v88);
    v25 = v88;
    v88 = 0;
    if (v25)
    {
      ZinIrKernel::~ZinIrKernel(v25);
      MEMORY[0x20BD002F8]();
    }
    v26 = (ZinIrOpLayer *)operator new();
    v27 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 40))(v24, 0, 0);
    v28 = v27[1];
    v86 = *v27;
    v87 = (std::__shared_weak_count *)v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    ZinObjectNameFactory::CreateName((uint64_t)&v91, 1u, &v85);
    v31 = std::string::append(&v85, "_s2c_fused_neconv", 0x11uLL);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    *(_QWORD *)&v83 = *((_QWORD *)&v31->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    ZinNEConvLayer::ZinNEConvLayer(v26, &v86, (__int128 *)__p, 0, v24, 0, 0, 0, 0, 0, 0);
    if (SBYTE7(v83) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v33 = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v105 = a1;
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    v85.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v85);
    v36 = ZinIrOpLayerGraph::AddNode(a2, v26, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v83 = __p[1];
      operator delete(__p[1]);
    }
    if (!v36)
      ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): failed to AddNode() for neconv_layer");
    if (!ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v7, (uint64_t)v26, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): failed to AddEdge() for neconv_layer");
    *(_OWORD *)__p = 0u;
    v83 = 0u;
    v84 = 1065353216;
    v37 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, v26, __p);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
    if ((v37 & 1) == 0)
      ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): Failed in moving outgoing edges.");
    if (!ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0))
      ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): Failed to RemoveNode");
    v38 = v89;
    v89 = 0;
    if (v38)
    {
      ZinIrKernel::~ZinIrKernel(v38);
      MEMORY[0x20BD002F8]();
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    if (SHIBYTE(v107) < 0)
      operator delete((void *)v106);
    v91 = off_24C01FBB0;
    if (v94 < 0)
      operator delete(v92);
    v39 = v108;
    if (!v108)
      return 0;
    v109 = (uint64_t)v108;
    goto LABEL_84;
  }
  if (*(_BYTE *)((*a3)[1] + 492))
    return 3;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v93, 1uLL);
  v43 = &v42[8 * v41];
  *(_QWORD *)v42 = 2;
  v44 = v42 + 8;
  v46 = (char *)v91;
  v45 = (char *)v92;
  v47 = v42;
  if (v92 != v91)
  {
    do
    {
      v48 = *((_QWORD *)v45 - 1);
      v45 -= 8;
      *((_QWORD *)v47 - 1) = v48;
      v47 -= 8;
    }
    while (v45 != v46);
    v45 = (char *)v91;
  }
  v91 = v47;
  v92 = v42 + 8;
  v93 = &v42[8 * v41];
  if (v45)
  {
    operator delete(v45);
    v43 = v93;
  }
  v92 = v42 + 8;
  if (v44 >= v43)
  {
    v50 = (v44 - (_BYTE *)v91) >> 3;
    if ((unint64_t)(v50 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v51 = v43 - (_BYTE *)v91;
    v52 = v51 >> 2;
    if (v51 >> 2 <= (unint64_t)(v50 + 1))
      v52 = v50 + 1;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    if (v53)
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v93, v53);
    else
      v54 = 0;
    v55 = &v54[8 * v50];
    v56 = &v54[8 * v53];
    *(_QWORD *)v55 = 0x200000000;
    v49 = v55 + 8;
    v58 = (char *)v91;
    v57 = (char *)v92;
    if (v92 != v91)
    {
      do
      {
        v59 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *((_QWORD *)v55 - 1) = v59;
        v55 -= 8;
      }
      while (v57 != v58);
      v57 = (char *)v91;
    }
    v91 = v55;
    v92 = v49;
    v93 = v56;
    if (v57)
      operator delete(v57);
  }
  else
  {
    *((_QWORD *)v42 + 1) = 0x200000000;
    v49 = v42 + 16;
  }
  v92 = v49;
  v60 = ZinObjectNameFactory::ZinObjectNameFactory(&v95, a1 + 24);
  v61 = **(_QWORD ***)(a1 + 88);
  v62 = v61[2];
  v63 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, __n128))(*v61 + 32))(v61, 0, 0, v60);
  v64 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v62, (uint64_t)&v95, v63 + 48, *(_DWORD *)(v64 + 88), (uint64_t)&v91);
  if (!Transpose)
    ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): ZinBuilder failed to create cb_transpose");
  v108 = (__int128 *)a1;
  __p[0] = &v108;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v99, __p);
  v66 = ZinIrOpLayerGraph::AddNode(a2, Transpose, (ZinIrOpLayer ***)&v99);
  v99.i64[0] = (uint64_t)&unk_24C02BB18;
  if (v99.i64[1])
  {
    *(_QWORD *)v100 = v99.i64[1];
    operator delete((void *)v99.i64[1]);
  }
  if (!v66)
    ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): failed to AddNode() for cb_transpose");
  if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, **(_QWORD **)(a1 + 88), (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): failed to AddEdge() for cb_transpose");
  ZinIrSpaceToBatchInfo::ZinIrSpaceToBatchInfo((uint64_t)__p, (uint64_t *)(*(_QWORD *)(a1 + 64) + 12));
  v67 = *((_QWORD *)Transpose + 2);
  (*(void (**)(int64x2_t *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 80))(&v99, Transpose, 0, 0);
  v68 = operator new(0x78uLL);
  v109 = (uint64_t)v68 + 120;
  v110 = (char *)v68 + 120;
  v69 = *(_OWORD *)&v102[16];
  v68[4] = *(_OWORD *)v102;
  v68[5] = v69;
  v68[6] = v103;
  *((_DWORD *)v68 + 28) = v104;
  v70 = *(_OWORD *)v100;
  *v68 = v99;
  v68[1] = v70;
  v71 = v101;
  v68[2] = *(_OWORD *)&v100[16];
  v68[3] = v71;
  v108 = v68;
  SpaceToBatch = (ZinIrOpLayer *)ZinBuilder::CreateSpaceToBatch(v67, (uint64_t)&v95, (uint64_t *)&v108, (uint64_t)__p);
  if (v108)
  {
    v109 = (uint64_t)v108;
    operator delete(v108);
  }
  if (!SpaceToBatch)
    ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): ZinBuilder failed to create s2b");
  *(_QWORD *)&v106 = a1;
  v108 = &v106;
  v109 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v99, &v108);
  v73 = ZinIrOpLayerGraph::AddNode(a2, SpaceToBatch, (ZinIrOpLayer ***)&v99);
  v99.i64[0] = (uint64_t)&unk_24C02BB18;
  if (v99.i64[1])
  {
    *(_QWORD *)v100 = v99.i64[1];
    operator delete((void *)v99.i64[1]);
  }
  if (!v73)
    ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): failed to AddNode() for s2b");
  if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Transpose, (uint64_t)SpaceToBatch, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): failed to AddEdge() for s2b");
  v74 = *((_QWORD *)SpaceToBatch + 2);
  v75 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
  v76 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v77 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v74, (uint64_t)&v95, v75 + 48, *(_DWORD *)(v76 + 88), (uint64_t)&v91);
  if (!v77)
    ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): ZinBuilder failed to create bc_transpose");
  *(_QWORD *)&v106 = a1;
  v108 = &v106;
  v109 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v99, &v108);
  v78 = ZinIrOpLayerGraph::AddNode(a2, v77, (ZinIrOpLayer ***)&v99);
  v99.i64[0] = (uint64_t)&unk_24C02BB18;
  if (v99.i64[1])
  {
    *(_QWORD *)v100 = v99.i64[1];
    operator delete((void *)v99.i64[1]);
  }
  if (!v78)
    ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): failed to AddNode() for bc_transpose");
  if (!ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)SpaceToBatch, (uint64_t)v77, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): failed to AddEdge() for bc_transpose");
  memset(v80, 0, sizeof(v80));
  v81 = 1065353216;
  v79 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, v77, v80);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v80);
  if ((v79 & 1) == 0)
    ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): Failed in moving outgoing edges.");
  if (!ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0))
    ZinAssertImpl("ZinSpaceToChannelLayer::Lower(): Failed to RemoveNode");
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)__p);
  v95.i64[0] = (uint64_t)off_24C01FBB0;
  if (SHIBYTE(v97) < 0)
    operator delete((void *)v95.i64[1]);
  v39 = v91;
  if (v91)
  {
    v92 = v91;
LABEL_84:
    operator delete(v39);
  }
  return 0;
}

void sub_20702AF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *__p,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinSpaceToChannelLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *GroupId;
  uint64_t v18[2];
  uint64_t v19;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C022328;
  v9 = *(_QWORD *)(v7 + 12);
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(v7 + 20);
  *(_QWORD *)(v8 + 12) = v9;
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v18[0] = v10;
  v18[1] = (uint64_t)v11;
  v19 = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  ZinSpaceToChannelLayer::ZinSpaceToChannelLayer(v6, &v19, v18, a3);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_20702B2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void ZinSpaceToChannelLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, uint64_t a3)
{
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v10[3];
  int *v11;
  int *v12;
  uint64_t v13;

  v3 = (int *)*((_QWORD *)a1 + 8);
  if (v3[5] != 1)
    ZinAssertImpl("SpaceToChannel in z dimension is not supported, current factor.z = %d.", v3[5]);
  v5 = *(_QWORD *)(*a2 + 32);
  v6 = v3[3];
  v7 = v3[4];
  if (v5 % v6 || *(_QWORD *)(*a2 + 24) % v7)
    ZinAssertImpl("Spatial dimensions cannot be divived by the given factors. Current w=%zd, factor_x=%d, h=%zd, factor_y=%d", v5, v6, *(_QWORD *)(*a2 + 24), v7);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v11, (uint64_t *)(a3 + 1656), (uint64_t *)(a3 + 1688), 4uLL);
  memset(v10, 0, sizeof(v10));
  if (!Factorize(v3[3], &v11, v10) || !Factorize(v3[4], &v11, v10))
    ZinAssertImpl("SpaceToChannel factor cannot be completely factorized into legal interleave factors. The legal interleaves are {1,2,3,4,8}");
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, (unsigned __int8 *)a3);
  std::deque<int>::~deque[abi:ne180100](v10);
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
}

void sub_20702B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  v7 = *(void **)(v5 - 56);
  if (v7)
  {
    *(_QWORD *)(v5 - 48) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

_QWORD *ZinSpaceToChannelLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "SPACE_TO_CHANNEL");
}

uint64_t ZinSpaceToChannelLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_20702B50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrNEMatMulUnit::ZinIrNEMatMulUnit(ZinIrNEMatMulUnit *this, const ZinIrNEMatMulUnitInfo *a2)
{
  _QWORD *v3;

  ZinIrNEUnit::ZinIrNEUnit(this, a2);
  *v3 = &off_24C01CBA8;
  ZinIrNEMatMulUnitInfo::ZinIrNEMatMulUnitInfo((ZinIrNEMatMulUnitInfo *)(v3 + 55), a2);
}

void sub_20702B560(_Unwind_Exception *a1)
{
  ZinIrNEUnit *v1;

  ZinIrNEUnit::~ZinIrNEUnit(v1);
  _Unwind_Resume(a1);
}

void ZinIrNEMatMulUnitInfo::ZinIrNEMatMulUnitInfo(ZinIrNEMatMulUnitInfo *this, const ZinIrNEMatMulUnitInfo *a2)
{
  uint64_t v4;
  __int128 v5;

  ZinIrNEUnitInfo::ZinIrNEUnitInfo(this, a2);
  *(_QWORD *)v4 = &unk_24C020860;
  *(_QWORD *)(v4 + 368) = off_24C017CA0;
  if (*((char *)a2 + 399) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 376), *((const std::string::value_type **)a2 + 47), *((_QWORD *)a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 376);
    *(_QWORD *)(v4 + 392) = *((_QWORD *)a2 + 49);
    *(_OWORD *)(v4 + 376) = v5;
  }
  *((_DWORD *)this + 100) = *((_DWORD *)a2 + 100);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 51) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 17, *((__int128 **)a2 + 51), *((__int128 **)a2 + 52), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 52) - *((_QWORD *)a2 + 51)) >> 3));
  *((_OWORD *)this + 27) = *((_OWORD *)a2 + 27);
  *((_QWORD *)this + 46) = off_24C0221F8;
  *((_DWORD *)this + 112) = *((_DWORD *)a2 + 112);
}

void sub_20702B644(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = &unk_24C01AB80;
  if (*(_BYTE *)(v1 + 352))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)(v1 + 240));
  if (*(_BYTE *)(v1 + 232))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)(v1 + 80));
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrNEMatMulUnit::CreateLayer(uint64_t a1, uint64_t a2, ZinIrTensor ***a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  ZinIrTensor *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t SubLayers;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  ZinIrTensor **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *__p;
  void *v41;
  _QWORD *v42;
  void **p_p;
  char v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 808;
  v9 = operator new();
  __p = 0;
  v41 = 0;
  v42 = 0;
  ZinIrMatrixMultUnit::ZinIrMatrixMultUnit(v9, v8, &__p);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  ZinIrUnit::SetBottomInfo(v9, a1 + 8);
  v10 = **a3;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9);
  ZinIrTensor::CreateTensor(v10, (__int128 *)(v11 + 8), &v38);
  v13 = v38;
  v12 = v39;
  v45[0] = v38;
  v45[1] = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  __p = 0;
  v41 = 0;
  v42 = 0;
  p_p = &__p;
  v44 = 0;
  v16 = operator new(0x10uLL);
  __p = v16;
  v42 = v16 + 2;
  *v16 = v13;
  v16[1] = v12;
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v41 = v16 + 2;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, &__p, a4);
  p_p = &__p;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v45);
  SubLayers = ZinIrNEUnit::CreateSubLayers((_BYTE *)a1, a2, a3);
  v22 = v21;
  v23 = (_QWORD *)operator new();
  v24 = v23;
  v25 = a3[1];
  v36 = (uint64_t)*(v25 - 2);
  v26 = (std::__shared_weak_count *)*(v25 - 1);
  v37 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  ZinNEMatMulLayer::ZinNEMatMulLayer(v23, &v36, (__int128 *)(a1 + 448), 0, 0, 0, v19, 0, SubLayers, v22, 0, 0, 0);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (*(_BYTE *)(a1 + 420))
  {
    *((_DWORD *)v24 + 105) = *(_DWORD *)(a1 + 416);
    *((_BYTE *)v24 + 424) = 1;
  }
  v32 = v39;
  if (v39)
  {
    v33 = (unint64_t *)&v39->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v24;
}

void sub_20702B958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x20BD002F8](v23, 0x10B3C402A00DFB5);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNEMatMulUnit::CreateKernel(ZinIrNEUnit *a1, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, uint64_t a5, uint64_t a6, ZinIrUnitStatus *a7)
{
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a5)
    ZinAssertImpl("NEMatMul does not support Espresso weight format", a2, a3, a4, a5, a6, a7, v7, v8);
  return ZinIrNEUnit::CreateSubKernels(a1, a2, a3, a4, a7);
}

uint64_t ZinIrNEMatMulUnit::TensorDimensions(ZinIrNEMatMulUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  return ZinGetOutputTensorDimensionMatrixMult((const ZinTensorDimensions *)(*((_QWORD *)this + 1) + 8), (const ZinTensorDimensions *)(*((_QWORD *)this + 1) + 128), *((_QWORD *)this + 64), a3);
}

void ZinIrNEMatMulUnit::~ZinIrNEMatMulUnit(ZinIrNEMatMulUnit *this)
{
  ZinIrNEMatMulUnit::~ZinIrNEMatMulUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  void **v2;

  *(_QWORD *)this = &off_24C01CBA8;
  v2 = (void **)((char *)this + 440);
  *((_QWORD *)this + 55) = &unk_24C020860;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 101);
  *((_QWORD *)this + 55) = &unk_24C01AB80;
  if (*((_BYTE *)this + 792))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 85);
  if (*((_BYTE *)this + 672))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 65);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrNEUnit::~ZinIrNEUnit(this);
}

uint64_t *ZinIrBindings::GetLiveIOInfoMap(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return std::map<ZinIrDimension,unsigned long>::at(a1, &v3);
}

__n128 ZinIrBindings::AddIO(uint64_t a1, __int128 *a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  __n128 result;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 *v17;

  v16 = a3;
  v6 = std::map<ZinIrDimension,unsigned long>::at(a1, &v16);
  if (v6 + 1 == (uint64_t *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v6, (void **)a2))
  {
    v17 = a2;
    v8 = std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v6, (void **)a2, (uint64_t)&std::piecewise_construct, &v17);
    std::string::operator=((std::string *)(v8 + 7), (const std::string *)a4);
    std::string::operator=((std::string *)(v8 + 10), (const std::string *)(a4 + 24));
    v9 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(v8 + 13) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(v8 + 15) = v9;
    v10 = *(_OWORD *)(a4 + 112);
    v11 = *(_OWORD *)(a4 + 128);
    v12 = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(v8 + 17) = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(v8 + 23) = v11;
    *(_OWORD *)(v8 + 21) = v10;
    *(_OWORD *)(v8 + 19) = v12;
    v13 = *(_OWORD *)(a4 + 176);
    v14 = *(_OWORD *)(a4 + 192);
    v15 = *(_OWORD *)(a4 + 160);
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(v8 + 31) = v14;
    *(_OWORD *)(v8 + 29) = v13;
    *(_OWORD *)(v8 + 27) = v15;
    if (v8 + 7 != (uint64_t *)a4)
      std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)v8 + 264, *(char **)(a4 + 208), *(_QWORD *)(a4 + 216), (uint64_t)(*(_QWORD *)(a4 + 216) - *(_QWORD *)(a4 + 208)) >> 4);
    result = *(__n128 *)(a4 + 232);
    *((__n128 *)v8 + 18) = result;
  }
  return result;
}

__n128 ZinIrBindings::AddUncompressedMapping(uint64_t a1, __int128 *a2, int a3, __n128 *a4)
{
  uint64_t **v7;
  __n128 result;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  __n128 v12;
  __int128 *v13;

  v7 = (uint64_t **)(a1 + 72);
  if ((void **)(a1 + 80) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1 + 72, (void **)a2))
  {
    v12 = *a4;
    v9 = a4[1].n128_i64[0];
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    v13 = a2;
    v10 = std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, &v13);
    *((_DWORD *)v10 + 14) = a3;
    v11 = (void *)v10[8];
    if (v11)
    {
      v10[9] = (uint64_t)v11;
      operator delete(v11);
      v10[8] = 0;
      v10[9] = 0;
      v10[10] = 0;
    }
    result = v12;
    *((__n128 *)v10 + 4) = v12;
    v10[10] = v9;
  }
  return result;
}

void sub_20702BCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

__n128 ZinIrBindings::AddCompressedMapping(uint64_t a1, __int128 *a2, int a3, __n128 *a4)
{
  uint64_t **v7;
  __n128 result;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  __n128 v12;
  __int128 *v13;

  v7 = (uint64_t **)(a1 + 48);
  if ((void **)(a1 + 56) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1 + 48, (void **)a2))
  {
    v12 = *a4;
    v9 = a4[1].n128_i64[0];
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    v13 = a2;
    v10 = std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, &v13);
    *((_DWORD *)v10 + 14) = a3;
    v11 = (void *)v10[8];
    if (v11)
    {
      v10[9] = (uint64_t)v11;
      operator delete(v11);
      v10[8] = 0;
      v10[9] = 0;
      v10[10] = 0;
    }
    result = v12;
    *((__n128 *)v10 + 4) = v12;
    v10[10] = v9;
  }
  return result;
}

void sub_20702BDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrBindings::IsIOCircular(uint64_t a1, int a2, void **a3, BOOL *a4)
{
  uint64_t *v6;
  void **v7;
  void **v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v12 = a2;
  *a4 = 0;
  v6 = std::map<ZinIrDimension,unsigned long>::at(a1, &v12);
  v7 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v6, a3);
  if (v6 + 1 == (uint64_t *)v7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrBindings::IsIOCircular((uint64_t *)a3, v10, v11);
    return 3;
  }
  else
  {
    v8 = v7;
    result = 0;
    *a4 = *((_DWORD *)v8 + 72) != 5;
  }
  return result;
}

uint64_t ZinIrBindings::GetIOBarRequirement(uint64_t a1, int a2, uint64_t *a3)
{
  void **v6;
  void **v7;
  uint64_t v8;
  char v9;
  void **v10;
  void **v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v17;

  *a3 = 0;
  v6 = *(void ***)(a1 + 72);
  v7 = (void **)(a1 + 80);
  if (v6 != (void **)(a1 + 80))
  {
    v8 = 0;
    v17 = 0;
    while (1)
    {
      if (*((_DWORD *)v6 + 14) == a2)
      {
        if (ZinIrBindings::IsIOCircular(a1, a2, v6 + 4, &v17))
          return 3;
        if (v17)
          v9 = 2;
        else
          v9 = 3;
        v8 = (((_BYTE *)v6[9] - (_BYTE *)v6[8]) >> v9) + *a3;
        *a3 = v8;
      }
      v10 = (void **)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (void **)v6[2];
          v12 = *v11 == v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
      if (v11 == v7)
        goto LABEL_17;
    }
  }
  v8 = 0;
LABEL_17:
  v13 = *(_QWORD **)(a1 + 48);
  if (v13 != (_QWORD *)(a1 + 56))
  {
    do
    {
      if (*((_DWORD *)v13 + 14) == a2)
      {
        v8 += (uint64_t)(v13[9] - v13[8]) >> 2;
        *a3 = v8;
      }
      v14 = (_QWORD *)v13[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v13[2];
          v12 = *v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v12);
      }
      v13 = v15;
    }
    while (v15 != (_QWORD *)(a1 + 56));
  }
  return 0;
}

uint64_t ZinIrBindings::GetSinglePlaneUncompressedDescriptor(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  int64x2_t **v11;
  int64x2_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  std::string *v19;
  uint64_t v20;
  int64x2_t v21;
  __int128 v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t Hal;
  uint64_t *v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  __int128 v33;
  __int128 v34;
  int64x2_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  __int128 v43;
  __int128 v44;
  int64x2_t v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  int64x2_t v50;
  uint64_t **v51;
  _OWORD v53[13];
  _BYTE v54[48];
  int64x2_t v55;
  int64x2_t v56;
  _BYTE v57[48];
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  std::string __p;
  uint64_t v64;
  __int128 v65;
  __int16 v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)(a3 + 8);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = v7;
  v51 = (uint64_t **)a3;
  *(_QWORD *)(a3 + 16) = 0;
  *v7 = 0;
  v8 = *(_QWORD **)(a1 + 72);
  v9 = (_QWORD *)(a1 + 80);
  if (v8 != (_QWORD *)(a1 + 80))
  {
    v50 = vdupq_n_s64(1uLL);
    v10 = 0uLL;
    while (1)
    {
      if (*((_DWORD *)v8 + 14) == a2)
      {
        v11 = (int64x2_t **)v8[8];
        if (v8[9] - (_QWORD)v11 == 8)
          break;
      }
LABEL_20:
      v46 = (_QWORD *)v8[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v8[2];
          v48 = *v47 == (_QWORD)v8;
          v8 = v47;
        }
        while (!v48);
      }
      v8 = v47;
      if (v47 == v9)
        return 0;
    }
    v12 = *v11;
    v13 = (*v11)[6].i64[1];
    if (!v13 || (v14 = *(uint64_t **)(v13 + 40), v14 == *(uint64_t **)(v13 + 48)))
      v15 = 0;
    else
      v15 = *v14;
    if (*(_BYTE *)(v15 + 88))
    {
      v16 = *(_DWORD *)(v15 + 64);
      v17 = *(_QWORD *)(v15 + 72);
      v18 = *(unsigned __int8 *)(v15 + 80);
      *(_DWORD *)v54 = 0;
      *(_OWORD *)&v54[8] = v10;
      *(_OWORD *)&v54[24] = v10;
      *(_QWORD *)&v54[40] = 0;
      v55 = vdupq_n_s64(1uLL);
      v56 = v55;
      *(int64x2_t *)v57 = v55;
      *(int64x2_t *)&v57[16] = v55;
      *(int64x2_t *)&v57[32] = v55;
      v58 = v55;
      v59 = v55;
      v60 = v55;
      v61 = v55;
      v62 = v55;
      v19 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
      v64 = 0;
      LODWORD(v65) = 5;
      *((_QWORD *)&v65 + 1) = 0;
      v66 = 0;
      *(_DWORD *)v54 = v12[5].i32[2];
      v20 = v12[5].i64[0];
      v21 = v12[4];
      v55 = v12[3];
      v56 = v21;
      *(_QWORD *)v57 = v20;
      memset(&v54[8], 0, 40);
      *(_QWORD *)&v57[40] = *(_QWORD *)(v15 + 328);
      v22 = *(_OWORD *)(v15 + 312);
      *(_OWORD *)&v57[8] = *(_OWORD *)(v15 + 296);
      *(_OWORD *)&v57[24] = v22;
      v23 = *(int64x2_t *)(v15 + 336);
      v24 = *(int64x2_t *)(v15 + 352);
      v25 = *(int64x2_t *)(v15 + 400);
      v61 = *(int64x2_t *)(v15 + 384);
      v62 = v25;
      v26 = *(int64x2_t *)(v15 + 368);
      v59 = v24;
      v60 = v26;
      v58 = v23;
      std::string::operator=(v19, (const std::string *)(v15 + 160));
      v64 = *(_QWORD *)(v15 + 184);
      LODWORD(v65) = v16;
      *((_QWORD *)&v65 + 1) = v17;
      Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v12[1].i64[0] + 160));
      v66 = v18 >> (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1308) != 0);
      *(_QWORD *)&v53[0] = v8 + 4;
      v28 = std::__tree<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (void **)v8 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
      v30 = v61;
      v29 = v62;
      v31 = v58;
      *(int64x2_t *)(v28 + 25) = v59;
      *(int64x2_t *)(v28 + 27) = v60;
      *(int64x2_t *)(v28 + 29) = v30;
      *(int64x2_t *)(v28 + 31) = v29;
      v32 = v56;
      *(_OWORD *)(v28 + 17) = *(_OWORD *)v57;
      v33 = *(_OWORD *)&v57[32];
      *(_OWORD *)(v28 + 19) = *(_OWORD *)&v57[16];
      *(_OWORD *)(v28 + 21) = v33;
      *(int64x2_t *)(v28 + 23) = v31;
      v34 = *(_OWORD *)v54;
      *(_OWORD *)(v28 + 9) = *(_OWORD *)&v54[16];
      v35 = v55;
      *(_OWORD *)(v28 + 11) = *(_OWORD *)&v54[32];
      *(int64x2_t *)(v28 + 13) = v35;
      *(int64x2_t *)(v28 + 15) = v32;
      *(_OWORD *)(v28 + 7) = v34;
      std::string::operator=((std::string *)v28 + 11, &__p);
      v28[36] = v64;
      *(_OWORD *)(v28 + 37) = v65;
      *((_WORD *)v28 + 156) = v66;
LABEL_17:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 = 0uLL;
      goto LABEL_20;
    }
    *(_DWORD *)v54 = 0;
    *(_OWORD *)&v54[8] = v10;
    *(_OWORD *)&v54[24] = v10;
    *(_QWORD *)&v54[40] = 0;
    v55 = v50;
    v56 = v50;
    *(int64x2_t *)v57 = v50;
    *(int64x2_t *)&v57[16] = v50;
    *(int64x2_t *)&v57[32] = v50;
    v58 = v50;
    v59 = v50;
    v60 = v50;
    v61 = v50;
    v62 = v50;
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
    v64 = 0;
    v68 = 0;
    ZinIrTensor::InferDescriptor((ZinIrTensor *)v12, (uint64_t)v67, (uint64_t)v53);
    v60 = (int64x2_t)v53[10];
    v61 = (int64x2_t)v53[11];
    v62 = (int64x2_t)v53[12];
    *(_OWORD *)&v57[16] = v53[6];
    *(_OWORD *)&v57[32] = v53[7];
    v58 = (int64x2_t)v53[8];
    v59 = (int64x2_t)v53[9];
    *(_OWORD *)&v54[32] = v53[2];
    v55 = (int64x2_t)v53[3];
    v56 = (int64x2_t)v53[4];
    *(_OWORD *)v57 = v53[5];
    *(_OWORD *)v54 = v53[0];
    *(_OWORD *)&v54[16] = v53[1];
    v36 = v68;
    if (v68 == v67)
    {
      v36 = v67;
      v37 = 4;
    }
    else
    {
      if (!v68)
      {
LABEL_16:
        std::string::operator=(&__p, (const std::string *)(v15 + 160));
        v64 = *(_QWORD *)(v15 + 184);
        *(_QWORD *)&v53[0] = v8 + 4;
        v38 = std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v51, (void **)v8 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
        v40 = v61;
        v39 = v62;
        v41 = v58;
        *(int64x2_t *)(v38 + 25) = v59;
        *(int64x2_t *)(v38 + 27) = v60;
        *(int64x2_t *)(v38 + 29) = v40;
        *(int64x2_t *)(v38 + 31) = v39;
        v42 = v56;
        *(_OWORD *)(v38 + 17) = *(_OWORD *)v57;
        v43 = *(_OWORD *)&v57[32];
        *(_OWORD *)(v38 + 19) = *(_OWORD *)&v57[16];
        *(_OWORD *)(v38 + 21) = v43;
        *(int64x2_t *)(v38 + 23) = v41;
        v44 = *(_OWORD *)v54;
        *(_OWORD *)(v38 + 9) = *(_OWORD *)&v54[16];
        v45 = v55;
        *(_OWORD *)(v38 + 11) = *(_OWORD *)&v54[32];
        *(int64x2_t *)(v38 + 13) = v45;
        *(int64x2_t *)(v38 + 15) = v42;
        *(_OWORD *)(v38 + 7) = v44;
        std::string::operator=((std::string *)v38 + 11, &__p);
        v38[36] = v64;
        goto LABEL_17;
      }
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
    goto LABEL_16;
  }
  return 0;
}

void sub_20702C434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v71;
  _QWORD *v73;
  uint64_t v74;

  v73 = *(_QWORD **)(v71 - 104);
  if (v73 == (_QWORD *)(v71 - 128))
  {
    v74 = 4;
    v73 = (_QWORD *)(v71 - 128);
  }
  else
  {
    if (!v73)
      goto LABEL_6;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_6:
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrBindings::GetMultiPlaneUncompressedDescriptor(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ZinIrTensor **v15;
  ZinIrTensor **v16;
  ZinIrTensor *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *p_p;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v31;
  uint64_t *v33;
  int64x2_t v34;
  _OWORD v35[13];
  _OWORD v36[3];
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  std::string __p;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[16];
  void *v57;
  void *v58;
  int v59;
  _BYTE v60[24];
  _BYTE *v61;
  uint8_t v62[4];
  _QWORD v63[3];

  *(_QWORD *)((char *)&v63[1] + 4) = *MEMORY[0x24BDAC8D0];
  v59 = a2;
  v33 = std::map<ZinIrDimension,unsigned long>::at(a1, &v59);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 72);
  if (v4 == a1 + 80)
    return 0;
  v34 = vdupq_n_s64(1uLL);
  while (1)
  {
    if (*(_DWORD *)(v4 + 56) != v59 || *(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64) < 9uLL)
      goto LABEL_41;
    v5 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v33, (void **)(v4 + 32));
    v6 = v5;
    if (v33 + 1 == (uint64_t *)v5)
      break;
    ZinIr4CCInfo::ZinIr4CCInfo(v56, *((unsigned int *)v5 + 65));
    v54 = 0;
    v55 = 0;
    v8 = *(_QWORD *)(v4 + 64);
    v7 = *(_QWORD *)(v4 + 72);
    v9 = v7 - v8;
    if (v7 == v8)
    {
      v13 = 0;
      v14 = *(_QWORD *)(v4 + 72);
      goto LABEL_15;
    }
    v10 = 0;
    v11 = v9 >> 3;
    if (v11 <= 1)
      v11 = 1;
    while (1)
    {
      v12 = *(_QWORD *)(v8 + 8 * v10);
      if (v12)
        break;
      if (v11 == ++v10)
      {
        v13 = 0;
        v9 = 0;
        v14 = *(_QWORD *)(v4 + 72);
        v7 = *(_QWORD *)(v4 + 64);
        goto LABEL_15;
      }
    }
    if (ZinIr4CCInfo::GetBaseDimensions((ZinIr4CCInfo *)v56, v10, *(_QWORD *)(v12 + 72), *(_QWORD *)(v12 + 64), &v55, &v54))
    {
      v13 = v54;
      v9 = v55;
      v7 = *(_QWORD *)(v4 + 64);
      v14 = *(_QWORD *)(v4 + 72);
LABEL_15:
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v50 = *((_DWORD *)v6 + 65);
      *(_QWORD *)&v49 = v9;
      *((_QWORD *)&v49 + 1) = v13;
      std::vector<ZinPlaneDescriptor>::reserve(&v51, (v14 - v7) >> 3);
      v16 = *(ZinIrTensor ***)(v4 + 64);
      v15 = *(ZinIrTensor ***)(v4 + 72);
      while (2)
      {
        if (v16 == v15)
        {
          *(_QWORD *)&v35[0] = v4 + 32;
          v25 = std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (void **)(v4 + 32), (uint64_t)&std::piecewise_construct, (__int128 **)v35);
          *(_OWORD *)(v25 + 7) = v49;
          *((_DWORD *)v25 + 18) = v50;
          if (v25 + 7 != (uint64_t *)&v49)
            std::vector<ZinPlaneDescriptor>::__assign_with_size[abi:ne180100]<ZinPlaneDescriptor*,ZinPlaneDescriptor*>(v25 + 10, v51, v52, 0xEEEEEEEEEEEEEEEFLL * ((v52 - v51) >> 4));
          *(_QWORD *)&v36[0] = &v51;
          std::vector<ZinPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
          v26 = 1;
          goto LABEL_38;
        }
        v17 = *v16;
        LODWORD(v36[0]) = 0;
        memset((char *)v36 + 8, 0, 40);
        v37 = v34;
        v38 = v34;
        v39 = v34;
        v40 = v34;
        v41 = v34;
        v42 = v34;
        v43 = v34;
        v44 = v34;
        v45 = v34;
        v46 = v34;
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
        v48 = 0;
        if (v17)
        {
          v61 = 0;
          ZinIrTensor::InferDescriptor(v17, (uint64_t)v60, (uint64_t)v35);
          v44 = (int64x2_t)v35[10];
          v45 = (int64x2_t)v35[11];
          v46 = (int64x2_t)v35[12];
          v40 = (int64x2_t)v35[6];
          v41 = (int64x2_t)v35[7];
          v42 = (int64x2_t)v35[8];
          v43 = (int64x2_t)v35[9];
          v36[2] = v35[2];
          v37 = (int64x2_t)v35[3];
          v38 = (int64x2_t)v35[4];
          v39 = (int64x2_t)v35[5];
          v36[0] = v35[0];
          v36[1] = v35[1];
          v18 = v61;
          if (v61 == v60)
          {
            v18 = v60;
            v19 = 4;
LABEL_24:
            (*(void (**)(void))(*v18 + 8 * v19))();
          }
          else if (v61)
          {
            v19 = 5;
            goto LABEL_24;
          }
          v21 = *((_QWORD *)v17 + 13);
          if (!v21 || (v22 = *(uint64_t **)(v21 + 40), v22 == *(uint64_t **)(v21 + 48)))
            v23 = 0;
          else
            v23 = *v22;
          std::string::operator=(&__p, (const std::string *)(v23 + 160));
          v24 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v17 + 13) + 40) + 184);
        }
        else
        {
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          memset(v36, 0, sizeof(v36));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            __p.__r_.__value_.__l.__size_ = 0;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
            p_p = &__p;
          }
          v24 = 0;
          p_p->__r_.__value_.__s.__data_[0] = 0;
        }
        v48 = v24;
        std::vector<ZinPlaneDescriptor>::emplace_back<ZinPlaneDescriptor>(&v51, (uint64_t)v36);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v16;
        continue;
      }
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrBindings::GetMultiPlaneUncompressedDescriptor(v62, v4, (_QWORD *)(v4 + 32), v63);
    v26 = 0;
LABEL_38:
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if ((v26 & 1) == 0)
      return 3;
LABEL_41:
    v27 = *(_QWORD **)(v4 + 8);
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = *(_QWORD **)(v4 + 16);
        v29 = *v28 == v4;
        v4 = (uint64_t)v28;
      }
      while (!v29);
    }
    v4 = (uint64_t)v28;
    if (v28 == (_QWORD *)(a1 + 80))
      return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrBindings::GetMultiPlaneUncompressedDescriptor(v4, (_QWORD *)(v4 + 32), v31);
  return 3;
}

void sub_20702C900(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinPlaneDescriptor>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x111111111111112)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPlaneDescriptor>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 240 * v6;
    std::vector<ZinPlaneDescriptor>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<ZinPlaneDescriptor>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20702CA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinPlaneDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinPlaneDescriptor>::emplace_back<ZinPlaneDescriptor>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v37[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v19 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v7 - *a1) >> 4);
    v20 = v19 + 1;
    if (v19 + 1 > 0x111111111111111)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v21 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x88888888888888)
      v22 = 0x111111111111111;
    else
      v22 = v20;
    v37[4] = v4;
    v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPlaneDescriptor>>(v4, v22);
    v24 = &v23[240 * v19];
    v37[0] = v23;
    v37[1] = v24;
    v37[3] = &v23[240 * v25];
    v26 = *(_OWORD *)(a2 + 16);
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v24 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v24 + 4) = v28;
    *((_OWORD *)v24 + 2) = v27;
    v29 = *(_OWORD *)(a2 + 128);
    v31 = *(_OWORD *)(a2 + 80);
    v30 = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v24 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v24 + 8) = v29;
    *((_OWORD *)v24 + 5) = v31;
    *((_OWORD *)v24 + 6) = v30;
    v32 = *(_OWORD *)(a2 + 192);
    v34 = *(_OWORD *)(a2 + 144);
    v33 = *(_OWORD *)(a2 + 160);
    *((_OWORD *)v24 + 11) = *(_OWORD *)(a2 + 176);
    *((_OWORD *)v24 + 12) = v32;
    *((_OWORD *)v24 + 9) = v34;
    *((_OWORD *)v24 + 10) = v33;
    *((_OWORD *)v24 + 1) = v26;
    *(_OWORD *)v24 = *(_OWORD *)a2;
    v35 = *(_OWORD *)(a2 + 208);
    *((_QWORD *)v24 + 28) = *(_QWORD *)(a2 + 224);
    *((_OWORD *)v24 + 13) = v35;
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *((_QWORD *)v24 + 29) = *(_QWORD *)(a2 + 232);
    v37[2] = v24 + 240;
    std::vector<ZinPlaneDescriptor>::__swap_out_circular_buffer(a1, v37);
    v18 = a1[1];
    std::__split_buffer<ZinPlaneDescriptor>::~__split_buffer((uint64_t)v37);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v7 + 64) = v10;
    *(_OWORD *)(v7 + 16) = v8;
    *(_OWORD *)(v7 + 32) = v9;
    v11 = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 96);
    v13 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v7 + 128) = v13;
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 96) = v12;
    v14 = *(_OWORD *)(a2 + 144);
    v15 = *(_OWORD *)(a2 + 160);
    v16 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v7 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v7 + 192) = v16;
    *(_OWORD *)(v7 + 144) = v14;
    *(_OWORD *)(v7 + 160) = v15;
    v17 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(v7 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)(v7 + 208) = v17;
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(v7 + 232) = *(_QWORD *)(a2 + 232);
    v18 = v7 + 240;
    a1[1] = v7 + 240;
  }
  a1[1] = v18;
  return v18 - 240;
}

void sub_20702CBDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinPlaneDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrBindings::GetCompressedDescriptor(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  int8x16_t **v9;
  uint64_t v10;
  int8x16_t v11;
  ZinIrTensor **v12;
  ZinIrTensor **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v24;
  uint64_t **v25;
  std::string v26;
  uint64_t v27;
  std::string __p;
  uint64_t v29;
  _BYTE v30[28];
  std::string *v31;
  std::string *v32;
  uint64_t v33;
  int v34;
  __int128 *v35;

  v34 = a2;
  v5 = std::map<ZinIrDimension,unsigned long>::at(a1, &v34);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  v25 = (uint64_t **)a3;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (_QWORD *)(a1 + 56);
  if (v6 == a1 + 56)
    return 0;
  while (*(_DWORD *)(v6 + 56) != v34)
  {
LABEL_21:
    v20 = *(_QWORD **)(v6 + 8);
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = *(_QWORD **)(v6 + 16);
        v22 = *v21 == v6;
        v6 = (uint64_t)v21;
      }
      while (!v22);
    }
    v6 = (uint64_t)v21;
    if (v21 == v7)
      return 0;
  }
  v8 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v5, (void **)(v6 + 32));
  if (v5 + 1 != (uint64_t *)v8)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    *(_QWORD *)&v30[16] = 0;
    *(_OWORD *)v30 = 0uLL;
    *(_DWORD *)&v30[24] = *((_DWORD *)v8 + 65);
    v9 = *(int8x16_t ***)(v6 + 64);
    v10 = *(_QWORD *)(v6 + 72);
    v11 = (*v9)[4];
    *(_QWORD *)&v30[16] = (*v9)[3].i64[1];
    *(int8x16_t *)v30 = vextq_s8(v11, v11, 8uLL);
    std::vector<ZinTiledCompressedPlaneDescriptor>::reserve((uint64_t *)&v31, (v10 - (uint64_t)v9) >> 3);
    v12 = *(ZinIrTensor ***)(v6 + 64);
    v13 = *(ZinIrTensor ***)(v6 + 72);
    while (v12 != v13)
    {
      v14 = *((_QWORD *)*v12 + 13);
      if (!v14 || (v15 = *(uint64_t **)(v14 + 40), v15 == *(uint64_t **)(v14 + 48)))
        v16 = 0;
      else
        v16 = *v15;
      v17 = *((_QWORD *)ZinIrTensor::GetRootTensor(*v12) + 13);
      if (v17)
        v18 = *(_QWORD *)(v17 + 64);
      else
        v18 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v26, &byte_207AF6795);
      v27 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
      v29 = 0;
      std::string::operator=(&v26, (const std::string *)(v16 + 160));
      v27 = *(_QWORD *)(v16 + 184);
      std::string::operator=(&__p, (const std::string *)(v18 + 160));
      v29 = *(_QWORD *)(v18 + 184);
      std::vector<ZinTiledCompressedPlaneDescriptor>::emplace_back<ZinTiledCompressedPlaneDescriptor>((uint64_t *)&v31, (__int128 *)&v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      ++v12;
    }
    v35 = (__int128 *)(v6 + 32);
    v19 = std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (void **)(v6 + 32), (uint64_t)&std::piecewise_construct, &v35);
    *(_OWORD *)(v19 + 7) = *(_OWORD *)v30;
    *(_OWORD *)((char *)v19 + 68) = *(_OWORD *)&v30[12];
    if (v19 + 7 != (uint64_t *)v30)
      std::vector<ZinTiledCompressedPlaneDescriptor>::__assign_with_size[abi:ne180100]<ZinTiledCompressedPlaneDescriptor*,ZinTiledCompressedPlaneDescriptor*>((uint64_t)(v19 + 11), v31, v32, ((char *)v32 - (char *)v31) >> 6);
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    std::vector<ZinTiledCompressedPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    v7 = (_QWORD *)(a1 + 56);
    goto LABEL_21;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrBindings::GetMultiPlaneUncompressedDescriptor(v6, (_QWORD *)(v6 + 32), v24);
  return 3;
}

void sub_20702CE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::vector<ZinTiledCompressedPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinTiledCompressedPlaneDescriptor>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    std::vector<ZinTiledCompressedPlaneDescriptor>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<ZinTiledCompressedPlaneDescriptor>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20702CF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinTiledCompressedPlaneDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinTiledCompressedPlaneDescriptor>::emplace_back<ZinTiledCompressedPlaneDescriptor>(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v21[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = (uint64_t)(v7 - *a1) >> 6;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 58)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v13 = v5 - *a1;
    if (v13 >> 5 > v12)
      v12 = v13 >> 5;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFC0)
      v14 = 0x3FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v21[4] = v4;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>>(v4, v14);
    v16 = &v15[64 * v11];
    v21[0] = v15;
    v21[1] = v16;
    v21[3] = &v15[64 * v17];
    v18 = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = *a2;
    *((_QWORD *)v16 + 2) = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)v16 + 3) = *((_QWORD *)a2 + 3);
    v19 = a2[2];
    *((_QWORD *)v16 + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)v16 + 2) = v19;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)v16 + 7) = *((_QWORD *)a2 + 7);
    v21[2] = v16 + 64;
    std::vector<ZinTiledCompressedPlaneDescriptor>::__swap_out_circular_buffer(a1, v21);
    v10 = a1[1];
    std::__split_buffer<ZinTiledCompressedPlaneDescriptor>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 3);
    v9 = a2[2];
    *(_QWORD *)(v7 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(v7 + 32) = v9;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_QWORD *)(v7 + 56) = *((_QWORD *)a2 + 7);
    v10 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v10;
  return v10 - 64;
}

void sub_20702D0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinTiledCompressedPlaneDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrBindings::AddLiveInParam(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t result;
  uint64_t *v7;
  void **v8;

  v5 = (uint64_t **)(a1 + 24);
  if ((void **)(a1 + 32) != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1 + 24, a2))return 3;
  v8 = a2;
  v7 = std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
  std::string::operator=((std::string *)(v7 + 7), (const std::string *)a3);
  result = 0;
  *((_DWORD *)v7 + 20) = *(_DWORD *)(a3 + 24);
  return result;
}

uint64_t ZinIrBindings::GetLiveInParamDescriptor(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  std::string __p;
  uint64_t v14;
  __int128 *v15;

  v4 = (_QWORD *)(a2 + 8);
  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *v4 = 0;
  v5 = *(_QWORD **)(a1 + 24);
  if (v5 == (_QWORD *)(a1 + 32))
    return 0;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
    v14 = 0;
    v11 = 0;
    if (ZinTensorFormatGetSize(*((_DWORD *)v5 + 20), &v11))
      break;
    v12 = *((_DWORD *)v5 + 20);
    std::string::operator=(&__p, (const std::string *)(v5 + 7));
    v14 = v11;
    v15 = (__int128 *)(v5 + 7);
    v6 = std::__tree<std::__value_type<std::string,ZinLiveInputParamDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLiveInputParamDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLiveInputParamDescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (void **)v5 + 7, (uint64_t)&std::piecewise_construct, &v15);
    *((_DWORD *)v6 + 14) = v12;
    std::string::operator=((std::string *)(v6 + 8), &__p);
    v6[11] = v14;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v5 = v8;
    if (v8 == (_QWORD *)(a1 + 32))
      return 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 3;
}

void sub_20702D2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<ZinPlaneDescriptor>::__assign_with_size[abi:ne180100]<ZinPlaneDescriptor*,ZinPlaneDescriptor*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) < a4)
  {
    std::vector<ZinPlaneDescriptor>::__vdeallocate(a1);
    if (a4 > 0x111111111111111)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888)
      v11 = 0x111111111111111;
    else
      v11 = v10;
    std::vector<ZinPlaneDescriptor>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*,ZinPlaneDescriptor*,ZinPlaneDescriptor*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((a1[1] - v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinPlaneDescriptor *,ZinPlaneDescriptor *,ZinPlaneDescriptor *,0>(a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*,ZinPlaneDescriptor*,ZinPlaneDescriptor*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinPlaneDescriptor *,ZinPlaneDescriptor *,ZinPlaneDescriptor *,0>(a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 9) < 0)
        operator delete(*(void **)(v16 - 32));
      v16 -= 240;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_20702D448(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20702D450(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ZinPlaneDescriptor>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<ZinPlaneDescriptor>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinPlaneDescriptor *,ZinPlaneDescriptor *,ZinPlaneDescriptor *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    v6 = *(_OWORD *)(v4 + 16);
    v7 = *(_OWORD *)(v4 + 32);
    v8 = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(a3 + 64) = v8;
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = v7;
    v9 = *(_OWORD *)(v4 + 80);
    v10 = *(_OWORD *)(v4 + 96);
    v11 = *(_OWORD *)(v4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v4 + 112);
    *(_OWORD *)(a3 + 128) = v11;
    *(_OWORD *)(a3 + 80) = v9;
    *(_OWORD *)(a3 + 96) = v10;
    v12 = *(_OWORD *)(v4 + 144);
    v13 = *(_OWORD *)(v4 + 160);
    v14 = *(_OWORD *)(v4 + 192);
    *(_OWORD *)(a3 + 176) = *(_OWORD *)(v4 + 176);
    *(_OWORD *)(a3 + 192) = v14;
    *(_OWORD *)(a3 + 144) = v12;
    *(_OWORD *)(a3 + 160) = v13;
    std::string::operator=((std::string *)(a3 + 208), (const std::string *)(v4 + 208));
    *(_QWORD *)(a3 + 232) = *(_QWORD *)(v4 + 232);
    a3 += 240;
    v4 += 240;
  }
  while (v4 != v5);
  return v5;
}

uint64_t *std::vector<ZinTiledCompressedPlaneDescriptor>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 64) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      v9 = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 32) = v9;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ZinTiledCompressedPlaneDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,WeightFileProperties>,0>(i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<ZinTiledCompressedPlaneDescriptor>::__assign_with_size[abi:ne180100]<ZinTiledCompressedPlaneDescriptor*,ZinTiledCompressedPlaneDescriptor*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    std::vector<ZinTiledCompressedPlaneDescriptor>::__vdeallocate((void **)a1);
    if (a4 >> 58)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinTiledCompressedPlaneDescriptor>,ZinTiledCompressedPlaneDescriptor*,ZinTiledCompressedPlaneDescriptor*,ZinTiledCompressedPlaneDescriptor*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 64 * v14);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinTiledCompressedPlaneDescriptor *,ZinTiledCompressedPlaneDescriptor *,ZinTiledCompressedPlaneDescriptor *>((int)&v19, __str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinTiledCompressedPlaneDescriptor>,ZinTiledCompressedPlaneDescriptor*,ZinTiledCompressedPlaneDescriptor*,ZinTiledCompressedPlaneDescriptor*>(v8, (uint64_t)v15, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinTiledCompressedPlaneDescriptor *,ZinTiledCompressedPlaneDescriptor *,ZinTiledCompressedPlaneDescriptor *>((int)&v20, __str, a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 64;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,WeightFileProperties>,0>(v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_20702D764(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20702D76C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ZinTiledCompressedPlaneDescriptor>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,WeightFileProperties>,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinTiledCompressedPlaneDescriptor>,ZinTiledCompressedPlaneDescriptor*,ZinTiledCompressedPlaneDescriptor*,ZinTiledCompressedPlaneDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ZinTiledCompressedPlaneDescriptor,ZinTiledCompressedPlaneDescriptor&,ZinTiledCompressedPlaneDescriptor*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20702D834(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 64;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,WeightFileProperties>,0>(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ZinTiledCompressedPlaneDescriptor,ZinTiledCompressedPlaneDescriptor&,ZinTiledCompressedPlaneDescriptor*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  v5 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = a2[2];
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
  return this;
}

void sub_20702D8E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinTiledCompressedPlaneDescriptor *,ZinTiledCompressedPlaneDescriptor *,ZinTiledCompressedPlaneDescriptor *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
    this[2].__r_.__value_.__l.__size_ = v5[2].__r_.__value_.__l.__size_;
    this = (std::string *)((char *)this + 64);
    v5 = (std::string *)((char *)v5 + 64);
  }
  while (v5 != v6);
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_20702DAA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x140uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinSinglePlaneCircularIODescriptor>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20702DBB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ZinSinglePlaneCircularIODescriptor>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;
  int64x2_t v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = 0u;
  this[11].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[11].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  v4 = vdupq_n_s64(1uLL);
  *(int64x2_t *)&this[3].__r_.__value_.__l.__data_ = v4;
  *(int64x2_t *)&this[3].__r_.__value_.__r.__words[2] = v4;
  *(int64x2_t *)&this[4].__r_.__value_.__r.__words[1] = v4;
  *(int64x2_t *)&this[5].__r_.__value_.__l.__data_ = v4;
  *(int64x2_t *)&this[5].__r_.__value_.__r.__words[2] = v4;
  *(int64x2_t *)&this[6].__r_.__value_.__r.__words[1] = v4;
  *(int64x2_t *)&this[7].__r_.__value_.__l.__data_ = v4;
  *(int64x2_t *)&this[7].__r_.__value_.__r.__words[2] = v4;
  *(int64x2_t *)&this[8].__r_.__value_.__r.__words[1] = v4;
  *(int64x2_t *)&this[9].__r_.__value_.__l.__data_ = v4;
  std::string::basic_string[abi:ne180100]<0>(&this[9].__r_.__value_.__r.__words[2], &byte_207AF6795);
  this[10].__r_.__value_.__r.__words[2] = 0;
  LODWORD(this[11].__r_.__value_.__l.__data_) = 5;
  this[11].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[11].__r_.__value_.__r.__words[2]) = 0;
  return this;
}

void sub_20702DC80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinSinglePlaneLinearIODescriptor>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x128uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinSinglePlaneLinearIODescriptor>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20702DDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinSinglePlaneCircularIODescriptor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ZinSinglePlaneLinearIODescriptor>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;
  int64x2_t v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = 0u;
  v4 = vdupq_n_s64(1uLL);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  *(int64x2_t *)&this[3].__r_.__value_.__l.__data_ = v4;
  *(int64x2_t *)&this[3].__r_.__value_.__r.__words[2] = v4;
  *(int64x2_t *)&this[4].__r_.__value_.__r.__words[1] = v4;
  *(int64x2_t *)&this[5].__r_.__value_.__l.__data_ = v4;
  *(int64x2_t *)&this[5].__r_.__value_.__r.__words[2] = v4;
  *(int64x2_t *)&this[6].__r_.__value_.__r.__words[1] = v4;
  *(int64x2_t *)&this[7].__r_.__value_.__l.__data_ = v4;
  *(int64x2_t *)&this[7].__r_.__value_.__r.__words[2] = v4;
  *(int64x2_t *)&this[8].__r_.__value_.__r.__words[1] = v4;
  *(int64x2_t *)&this[9].__r_.__value_.__l.__data_ = v4;
  std::string::basic_string[abi:ne180100]<0>(&this[9].__r_.__value_.__r.__words[2], &byte_207AF6795);
  this[10].__r_.__value_.__r.__words[2] = 0;
  return this;
}

void sub_20702DE80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20702DFC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinMultiPlaneLinearIODescriptor>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 13) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20702E154(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinTiledCompressedIODescriptor>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,ZinLiveInputParamDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLiveInputParamDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLiveInputParamDescriptor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinLiveInputParamDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLiveInputParamDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLiveInputParamDescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,ZinLiveInputParamDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLiveInputParamDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLiveInputParamDescriptor>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinLiveInputParamDescriptor>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20702E2A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,WeightFileProperties>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ZinLiveInputParamDescriptor>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  std::string::basic_string[abi:ne180100]<0>(&this[1].__r_.__value_.__l.__size_, &byte_207AF6795);
  this[2].__r_.__value_.__l.__size_ = 0;
  return this;
}

void sub_20702E330(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ZinIrBindings::IsIOCircular(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = 136315138;
  v5 = v3;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing IO name in IO map %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4();
}

void ZinIrBindings::GetMultiPlaneUncompressedDescriptor(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 55) < 0)
    a2 = (_QWORD *)*a2;
  v3 = 136315138;
  v4 = a2;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing IO name in IO map %s", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

void ZinIrBindings::GetMultiPlaneUncompressedDescriptor(uint8_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (*(char *)(a2 + 55) < 0)
    a3 = (_QWORD *)*a3;
  *(_DWORD *)a1 = 136315138;
  *a4 = a3;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], (uint64_t)a3, "Unable to retrieve base dimension for 4cc IO %s", a1);
}

uint64_t ZinParseNeuronUnit(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const void *v8;
  _BOOL8 v9;
  CFTypeID v10;
  int *v11;
  int v12;
  uint64_t result;
  const __CFString *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t v31[16];
  uint8_t buf[16];

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v14 = CFSTR("InvalidParamSyntax");
LABEL_36:
    ZinIrUnitStatus::SetError(a3, v14);
    return 3;
  }
  v8 = CFDictionaryGetValue(v6, CFSTR("Type"));
  if (!v8 || (v9 = (_BOOL8)v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinParseNeuronUnit(v15, v16, v17, v18, v19, v20, v21, v22);
    v14 = CFSTR("InvalidUnitNeuronType");
    goto LABEL_36;
  }
  v11 = (int *)(a2 + 80);
  if (!CFStringToZinIrNeuronType(v9, (int *)(a2 + 80)))
    return 3;
  v12 = *v11;
  if (*v11 == 3)
  {
    result = ZinParseFP16Token(v6, CFSTR("ReluMin"), CFSTR("InvalidReluMinValSyntax"), (float *)(a2 + 92), a3, 0);
    if ((_DWORD)result)
      return result;
    result = ZinParseFP16Token(v6, CFSTR("ReluMax"), CFSTR("InvalidReluMaxValSyntax"), (float *)(a2 + 96), a3, 0);
    if ((_DWORD)result)
      return result;
    if (*(float *)(a2 + 92) < *(float *)(a2 + 96))
    {
      v12 = *v11;
      goto LABEL_11;
    }
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinParseNeuronUnit(v23, v24, v25, v26, v27, v28, v29, v30);
    v14 = CFSTR("InvalidReluMinMaxVal");
    goto LABEL_36;
  }
LABEL_11:
  if (v12 == 2)
  {
    result = ZinParseFP16Token(v6, CFSTR("ReluOffset"), CFSTR("InvalidReluOffsetSyntax"), (float *)(a2 + 84), a3, 0);
    if ((_DWORD)result)
      return result;
    result = ZinParseFP16Token(v6, CFSTR("ReluSlope"), CFSTR("InvalidReluSlopeSyntax"), (float *)(a2 + 88), a3, 0);
    if ((_DWORD)result)
      return result;
    v12 = *v11;
  }
  if (v12 == 4)
  {
    result = ZinParseFP16Token(v6, CFSTR("ReluSlope"), CFSTR("InvalidReluSlopeSyntax"), (float *)(a2 + 88), a3, 0);
    if ((_DWORD)result)
      return result;
    result = ZinParseFP16Token(v6, CFSTR("ReluMax"), CFSTR("InvalidReluMaxValSyntax"), (float *)(a2 + 96), a3, 0);
    if ((_DWORD)result)
      return result;
    v12 = *v11;
  }
  if (v12 == 18
    && ZinParseFP16Token(v6, CFSTR("EluAlpha"), CFSTR("InvalidEluAlpha"), (float *)(a2 + 100), a3, 0))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Missing Elu alpha inferred to 1.0f\n", v31, 2u);
    }
    *(_DWORD *)(a2 + 100) = 1065353216;
  }
  if (*v11 == 31
    && ZinParseFP16Token(v6, CFSTR("Alpha"), CFSTR("InvalidAlpha"), (float *)(a2 + 104), a3, 0))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Missing alpha inferred to 1.0f\n", buf, 2u);
    }
    *(_DWORD *)(a2 + 104) = 1065353216;
  }
  if ((*v11 - 13) > 2)
    return 0;
  *(_DWORD *)(a2 + 108) = 0;
  result = ZinParseFP16Token(v6, CFSTR("Epsilon"), CFSTR("InvalidEpsilon"), (float *)(a2 + 108), a3, 1);
  if (!(_DWORD)result)
    return 0;
  return result;
}

void ZinParseNeuronUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing required type in neuron parameter dictionary.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ReluMax should be larger than ReluMin.\n", a5, a6, a7, a8, 0);
}

uint64_t ZinIrVector::ZinIrVector(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, char a6, char a7)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v12 = a2[1];
  v23 = *a2;
  v24 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v20 = a3;
  v21 = vdupq_n_s64(1uLL);
  v22 = v21;
  ZinIrWeightBase::ZinIrWeightBase(a1, &v23, a4, (int64x2_t *)&v20, a5, 1262703187, a7);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &off_24C015D80;
  *(_BYTE *)(a1 + 280) = a6;
  *(_DWORD *)(a1 + 284) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  if (a3 == 1 && (a7 & 1) == 0)
  {
    ZinIrVector::GetValueAsFloat(a1, a5);
    *(_DWORD *)(a1 + 284) = v18;
    *(_BYTE *)(a1 + 288) = 1;
  }
  return a1;
}

void sub_20702E98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void **v15;

  ZinIrWeightBase::~ZinIrWeightBase(v15);
  _Unwind_Resume(a1);
}

uint64_t ZinIrVector::GetValueAsFloat(uint64_t this, uint64_t a2)
{
  switch(*(_DWORD *)(this + 8))
  {
    case 0:
    case 3:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
      ZinAssertImpl("Unsupported kernel format in GetValueAsFloat.");
    case 1:
      this = ZinIrVector::GetAt<signed char>(this, a2);
      break;
    case 2:
      this = ZinIrVector::GetAt<unsigned char>(this, a2);
      break;
    case 4:
      this = ZinIrVector::GetAt<half>(this, a2);
      __asm { FCVT            S0, H0 }
      break;
    case 5:
      this = ZinIrVector::GetAt<e4m3_t>(this, a2);
      break;
    case 6:
      this = ZinIrVector::GetAt<float>(this, a2);
      break;
    default:
      return this;
  }
  return this;
}

float ZinIrVector::GetSingularVal(ZinIrVector *this)
{
  if (!*((_BYTE *)this + 288))
    ZinAssertImpl("Trying to get singular value of a non-singular vector");
  return *((float *)this + 71);
}

uint64_t ZinIrVector::GetAt<half>(uint64_t result, uint64_t a2)
{
  uint64_t v7;

  if (*(_BYTE *)(result + 288))
  {
    _S0 = *(_DWORD *)(result + 284);
    __asm { FCVT            H0, S0 }
  }
  else
  {
    v7 = *(_QWORD *)(result + 136);
    if (!v7)
      ZinAssertImpl("Const data is null for GetAt call");
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v7 + 56))(*(_QWORD *)(result + 136), *(_QWORD *)(result + 16) + a2);
  }
  return result;
}

uint64_t ZinIrVector::GetAt<float>(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(result + 288))
  {
    v2 = *(_QWORD *)(result + 136);
    if (!v2)
      ZinAssertImpl("Const data is null for GetAt call");
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v2 + 40))(*(_QWORD *)(result + 136), *(_QWORD *)(result + 16) + a2);
  }
  return result;
}

uint64_t ZinIrVector::GetAt<e4m3_t>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 288))
    return ZinF32ToE4M3(*(float *)(a1 + 284), 1, 0);
  v3 = *(_QWORD *)(a1 + 136);
  if (!v3)
    ZinAssertImpl("Const data is null for GetAt call");
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v3 + 88))(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 16) + a2);
}

uint64_t ZinIrVector::GetAt<signed char>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 288))
    return (int)*(float *)(a1 + 284);
  v3 = *(_QWORD *)(a1 + 136);
  if (!v3)
    ZinAssertImpl("Const data is null for GetAt call");
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v3 + 72))(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 16) + a2);
}

uint64_t ZinIrVector::GetAt<unsigned char>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 288))
    return (int)*(float *)(a1 + 284);
  v3 = *(_QWORD *)(a1 + 136);
  if (!v3)
    ZinAssertImpl("Const data is null for GetAt call");
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v3 + 120))(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 16) + a2);
}

uint64_t ZinIrVector::GetValueAsInt32(ZinIrVector *this, uint64_t a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if (v2 == 1)
    return ZinIrVector::GetAt<signed char>((uint64_t)this, a2);
  if (v2 == 2)
    return ZinIrVector::GetAt<unsigned char>((uint64_t)this, a2);
  return 0;
}

void ZinIrVector::StdvectorToVector<float>(uint64_t *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v8 = *a1;
  v7 = a1[1];
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)a1, &v20);
  v9 = operator new();
  v10 = v9;
  v11 = (v7 - v8) >> 2;
  v12 = (std::__shared_weak_count *)v21;
  v22[0] = v20;
  v22[1] = v21;
  if (v21)
  {
    v13 = (unint64_t *)(v21 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ZinIrVector::ZinIrVector(v9, v22, v11, 6, 0, a3, a2);
  *a4 = v10;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v18 = (unint64_t *)(v21 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20702ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x20BD002F8](v11, 0x10B3C400A1ACBE3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrVector::StdvectorToVector<signed char>(uint64_t *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v8 = *a1;
  v7 = a1[1];
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)a1, &v20);
  v9 = operator new();
  v10 = v9;
  v11 = v7 - v8;
  v12 = (std::__shared_weak_count *)v21;
  v22[0] = v20;
  v22[1] = v21;
  if (v21)
  {
    v13 = (unint64_t *)(v21 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ZinIrVector::ZinIrVector(v9, v22, v11, 1, 0, a3, a2);
  *a4 = v10;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v18 = (unint64_t *)(v21 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20702EE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x20BD002F8](v11, 0x10B3C400A1ACBE3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrVector::StdvectorToVector<unsigned char>(uint64_t *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v8 = *a1;
  v7 = a1[1];
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)a1, &v20);
  v9 = operator new();
  v10 = v9;
  v11 = v7 - v8;
  v12 = (std::__shared_weak_count *)v21;
  v22[0] = v20;
  v22[1] = v21;
  if (v21)
  {
    v13 = (unint64_t *)(v21 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ZinIrVector::ZinIrVector(v9, v22, v11, 2, 0, a3, a2);
  *a4 = v10;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v18 = (unint64_t *)(v21 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20702EFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x20BD002F8](v11, 0x10B3C400A1ACBE3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrVector::GetValuesAsVector<float>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  unint64_t v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  std::vector<float>::reserve((void **)a4, a2);
  v8 = 1.0;
  if (a3)
    v8 = ldexpf(1.0, *(char *)(a1 + 280));
  if (a2)
  {
    v9 = 0;
    do
    {
      ZinIrVector::GetValueAsFloat(a1, v9);
      v11 = v8 * v10;
      v13 = *(float **)(a4 + 8);
      v12 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(float **)a4;
        v16 = ((uint64_t)v13 - *(_QWORD *)a4) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(a4 + 16, v19);
          v15 = *(float **)a4;
          v13 = *(float **)(a4 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = (float *)&v20[4 * v16];
        *v21 = v11;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v22 = *((_DWORD *)v13-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        *(_QWORD *)a4 = v21;
        *(_QWORD *)(a4 + 8) = v14;
        *(_QWORD *)(a4 + 16) = &v20[4 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = v11;
        v14 = v13 + 1;
      }
      *(_QWORD *)(a4 + 8) = v14;
      ++v9;
    }
    while (v9 != a2);
  }
}

void sub_20702F178(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrVector::GetValuesAsVector<signed char>(uint64_t a1@<X0>, size_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, a2);
  if (a2)
  {
    v6 = 0;
    do
    {
      v7 = ZinIrVector::GetAt<signed char>(a1, v6);
      v8 = v7;
      v10 = (_BYTE *)a3[1];
      v9 = a3[2];
      if ((unint64_t)v10 >= v9)
      {
        v12 = *a3;
        v13 = &v10[-*a3];
        v14 = (unint64_t)(v13 + 1);
        if ((uint64_t)(v13 + 1) < 0)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v15 = v9 - v12;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)operator new(v16);
        else
          v17 = 0;
        v18 = &v13[(_QWORD)v17];
        v19 = &v13[(_QWORD)v17];
        *v19 = v8;
        v11 = v19 + 1;
        if (v10 != (_BYTE *)v12)
        {
          v20 = &v10[~v12];
          do
          {
            v21 = *--v10;
            (v20--)[(_QWORD)v17] = v21;
          }
          while (v10 != (_BYTE *)v12);
          v10 = (_BYTE *)*a3;
          v18 = v17;
        }
        *a3 = (unint64_t)v18;
        a3[1] = (unint64_t)v11;
        a3[2] = (unint64_t)&v17[v16];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v10 = v7;
        v11 = v10 + 1;
      }
      a3[1] = (unint64_t)v11;
      ++v6;
    }
    while (v6 != a2);
  }
}

void sub_20702F2D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrVector::GetValuesAsVector<unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, a2);
  if (a2)
  {
    v6 = 0;
    do
    {
      v7 = ZinIrVector::GetAt<unsigned char>(a1, v6);
      v8 = v7;
      v10 = (_BYTE *)a3[1];
      v9 = a3[2];
      if ((unint64_t)v10 >= v9)
      {
        v12 = *a3;
        v13 = &v10[-*a3];
        v14 = (unint64_t)(v13 + 1);
        if ((uint64_t)(v13 + 1) < 0)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v15 = v9 - v12;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)operator new(v16);
        else
          v17 = 0;
        v18 = &v13[(_QWORD)v17];
        v19 = &v13[(_QWORD)v17];
        *v19 = v8;
        v11 = v19 + 1;
        if (v10 != (_BYTE *)v12)
        {
          v20 = &v10[~v12];
          do
          {
            v21 = *--v10;
            (v20--)[(_QWORD)v17] = v21;
          }
          while (v10 != (_BYTE *)v12);
          v10 = (_BYTE *)*a3;
          v18 = v17;
        }
        *a3 = (unint64_t)v18;
        a3[1] = (unint64_t)v11;
        a3[2] = (unint64_t)&v17[v16];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v10 = v7;
        v11 = v10 + 1;
      }
      a3[1] = (unint64_t)v11;
      ++v6;
    }
    while (v6 != a2);
  }
}

void sub_20702F428(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrTransformRemap::ZinIrTransformRemap(ZinIrTransformRemap *this, const ZinTensorDimensions *a2)
{
  __int128 v2;
  __int128 v3;

  *(_QWORD *)this = &off_24C01F088;
  *((_QWORD *)this + 1) = &unk_24C01F0C8;
  v2 = *(_OWORD *)a2;
  v3 = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 4);
  *((_OWORD *)this + 1) = v2;
  *((_OWORD *)this + 2) = v3;
}

void sub_20702F64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTransformRemap::Serialize(ZinIrTransformRemap *this, ZinIrSerializer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = ZinIrSerializer::WriteUint8(a2, 2);
  v5 = ZinIrSerializer::WriteUint64(a2, *((_QWORD *)this + 2)) + v4;
  v6 = ZinIrSerializer::WriteUint64(a2, *((_QWORD *)this + 3));
  v7 = v5 + v6 + ZinIrSerializer::WriteUint64(a2, *((_QWORD *)this + 4));
  return v7 + ZinIrSerializer::WriteUint64(a2, *((_QWORD *)this + 5));
}

uint64_t `non-virtual thunk to'ZinIrTransformRemap::Serialize(ZinIrTransformRemap *this, ZinIrSerializer *a2)
{
  return ZinIrTransformRemap::Serialize((ZinIrTransformRemap *)((char *)this - 8), a2);
}

uint64_t ZinIrTransformRemap::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_20702F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrTransformDuplicate::ZinIrTransformDuplicate(ZinIrTransformDuplicate *this, uint64_t a2, char a3)
{
  *(_QWORD *)this = &off_24C0223F8;
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 16) = a3;
}

uint64_t ZinIrTransformDuplicate::Apply(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  size_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  void *__p;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;

  v73 = 0;
  v74 = 0;
  v6 = *(_QWORD *)(a1 + 8) * *(_QWORD *)(a2 + 56);
  switch(*(_DWORD *)(a2 + 8))
  {
    case 1:
      __p = 0;
      v71 = 0;
      v72 = 0;
      std::vector<unsigned char>::reserve((unint64_t *)&__p, v6);
      ZinIrTransformDuplicate::Duplicate<signed char>(a1, a2, (unint64_t *)&__p);
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&__p, &v75);
      v8 = v75;
      v7 = v76;
      v66 = v76;
      v9 = *(unsigned __int8 *)(a2 + 152);
      v10 = operator new();
      v11 = v10;
      v75 = v8;
      v76 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      ZinIrVector::ZinIrVector(v10, &v75, v6, 1, 0, *(_BYTE *)(a2 + 280), v9 != 0);
      if (v7)
      {
        v14 = (unint64_t *)&v7->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v16 = *a3;
      *a3 = v11;
      if (v16)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a3, v16);
      v17 = v66;
      if (!v66)
        goto LABEL_59;
      v18 = (unint64_t *)&v66->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      break;
    case 2:
      __p = 0;
      v71 = 0;
      v72 = 0;
      std::vector<unsigned char>::reserve((unint64_t *)&__p, v6);
      ZinIrTransformDuplicate::Duplicate<unsigned char>(a1, a2, (unint64_t *)&__p);
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&__p, &v75);
      v21 = v75;
      v20 = v76;
      v67 = v76;
      v22 = *(unsigned __int8 *)(a2 + 152);
      v23 = operator new();
      v24 = v23;
      v75 = v21;
      v76 = v20;
      if (v20)
      {
        v25 = (unint64_t *)&v20->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      ZinIrVector::ZinIrVector(v23, &v75, v6, 2, 0, *(_BYTE *)(a2 + 280), v22 != 0);
      if (v20)
      {
        v27 = (unint64_t *)&v20->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v29 = *a3;
      *a3 = v24;
      if (v29)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a3, v29);
      v17 = v67;
      if (!v67)
        goto LABEL_59;
      v30 = (unint64_t *)&v67->__shared_owners_;
      do
        v19 = __ldaxr(v30);
      while (__stlxr(v19 - 1, v30));
      break;
    case 4:
      __p = 0;
      v71 = 0;
      v72 = 0;
      std::vector<half>::reserve(&__p, v6);
      ZinIrTransformDuplicate::Duplicate<half>(a1, a2, (uint64_t)&__p);
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&__p, &v75);
      v32 = v75;
      v31 = v76;
      v68 = v76;
      v33 = *(unsigned __int8 *)(a2 + 152);
      v34 = operator new();
      v35 = v34;
      v75 = v32;
      v76 = v31;
      if (v31)
      {
        v36 = (unint64_t *)&v31->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      ZinIrVector::ZinIrVector(v34, &v75, v6, 4, 0, *(_BYTE *)(a2 + 280), v33 != 0);
      if (v31)
      {
        v38 = (unint64_t *)&v31->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v40 = *a3;
      *a3 = v35;
      if (v40)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a3, v40);
      v17 = v68;
      if (!v68)
        goto LABEL_59;
      v41 = (unint64_t *)&v68->__shared_owners_;
      do
        v19 = __ldaxr(v41);
      while (__stlxr(v19 - 1, v41));
      break;
    case 6:
      __p = 0;
      v71 = 0;
      v72 = 0;
      std::vector<float>::reserve(&__p, v6);
      ZinIrTransformDuplicate::Duplicate<float>(a1, a2, (uint64_t)&__p);
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)&__p, &v75);
      v43 = v75;
      v42 = v76;
      v69 = v76;
      v44 = *(unsigned __int8 *)(a2 + 152);
      v45 = operator new();
      v46 = v45;
      v75 = v43;
      v76 = v42;
      if (v42)
      {
        v47 = (unint64_t *)&v42->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      ZinIrVector::ZinIrVector(v45, &v75, v6, 6, 0, *(_BYTE *)(a2 + 280), v44 != 0);
      if (v42)
      {
        v49 = (unint64_t *)&v42->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v51 = *a3;
      *a3 = v46;
      if (v51)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a3, v51);
      v17 = v69;
      if (!v69)
        goto LABEL_59;
      v52 = (unint64_t *)&v69->__shared_owners_;
      do
        v19 = __ldaxr(v52);
      while (__stlxr(v19 - 1, v52));
      break;
    default:
      v54 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v54)
        ZinIrTransformDuplicate::Apply(v54, v55, v56, v57, v58, v59, v60, v61);
      v53 = 3;
      goto LABEL_65;
  }
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_59:
  if (__p)
  {
    v71 = __p;
    operator delete(__p);
  }
  v53 = 0;
LABEL_65:
  v62 = v74;
  if (v74)
  {
    v63 = (unint64_t *)&v74->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  return v53;
}

void sub_20702FD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  MEMORY[0x20BD002F8](v17, 0x10B3C400A1ACBE3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void ZinIrTransformDuplicate::Duplicate<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  int v10;
  int v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t j;
  int v27;
  int v28;
  unint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;

  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a1 + 8);
      do
      {
        if (v8)
        {
          for (i = 0; i < v8; ++i)
          {
            ZinIrVector::GetAt<float>(a2, v7);
            v11 = v10;
            v13 = *(_DWORD **)(a3 + 8);
            v12 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v13 >= v12)
            {
              v15 = *(_DWORD **)a3;
              v16 = ((uint64_t)v13 - *(_QWORD *)a3) >> 2;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 62)
                goto LABEL_50;
              v18 = v12 - (_QWORD)v15;
              if (v18 >> 1 > v17)
                v17 = v18 >> 1;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
                v19 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              if (v19)
              {
                v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(a3 + 16, v19);
                v15 = *(_DWORD **)a3;
                v13 = *(_DWORD **)(a3 + 8);
              }
              else
              {
                v20 = 0;
              }
              v21 = &v20[4 * v16];
              *(_DWORD *)v21 = v11;
              v14 = v21 + 4;
              while (v13 != v15)
              {
                v22 = *--v13;
                *((_DWORD *)v21 - 1) = v22;
                v21 -= 4;
              }
              *(_QWORD *)a3 = v21;
              *(_QWORD *)(a3 + 8) = v14;
              *(_QWORD *)(a3 + 16) = &v20[4 * v19];
              if (v15)
                operator delete(v15);
            }
            else
            {
              *v13 = v10;
              v14 = v13 + 1;
            }
            *(_QWORD *)(a3 + 8) = v14;
            v8 = *(_QWORD *)(a1 + 8);
          }
          v6 = *(_QWORD *)(a2 + 56);
        }
        ++v7;
      }
      while (v6 > v7);
    }
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 8);
    if (v23)
    {
      v24 = 0;
      v25 = *(_QWORD *)(a2 + 56);
      do
      {
        if (v25)
        {
          for (j = 0; j < v25; ++j)
          {
            ZinIrVector::GetAt<float>(a2, j);
            v28 = v27;
            v30 = *(_DWORD **)(a3 + 8);
            v29 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v30 >= v29)
            {
              v32 = *(_DWORD **)a3;
              v33 = ((uint64_t)v30 - *(_QWORD *)a3) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
LABEL_50:
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(a3 + 16, v36);
                v32 = *(_DWORD **)a3;
                v30 = *(_DWORD **)(a3 + 8);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = v28;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *--v30;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)a3 = v38;
              *(_QWORD *)(a3 + 8) = v31;
              *(_QWORD *)(a3 + 16) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *v30 = v27;
              v31 = v30 + 1;
            }
            *(_QWORD *)(a3 + 8) = v31;
            v25 = *(_QWORD *)(a2 + 56);
          }
          v23 = *(_QWORD *)(a1 + 8);
        }
        ++v24;
      }
      while (v23 > v24);
    }
  }
}

void ZinIrTransformDuplicate::Duplicate<half>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  __int16 v10;
  __int16 v11;
  unint64_t v12;
  _WORD *v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t j;
  __int16 v28;
  __int16 v29;
  unint64_t v30;
  _WORD *v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int16 v41;

  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a1 + 8);
      do
      {
        if (v8)
        {
          for (i = 0; i < v8; ++i)
          {
            ZinIrVector::GetAt<half>(a2, v7);
            v11 = v10;
            v13 = *(_WORD **)(a3 + 8);
            v12 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v13 >= v12)
            {
              v15 = *(_WORD **)a3;
              v16 = (uint64_t)v13 - *(_QWORD *)a3;
              if (v16 <= -3)
                goto LABEL_52;
              v17 = v16 >> 1;
              v18 = v12 - (_QWORD)v15;
              if (v18 <= (v16 >> 1) + 1)
                v19 = v17 + 1;
              else
                v19 = v18;
              if (v18 >= 0x7FFFFFFFFFFFFFFELL)
                v20 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v20 = v19;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(a3 + 16, v20);
                v15 = *(_WORD **)a3;
                v13 = *(_WORD **)(a3 + 8);
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[2 * v17];
              *(_WORD *)v22 = v11;
              v14 = v22 + 2;
              while (v13 != v15)
              {
                v23 = *--v13;
                *((_WORD *)v22 - 1) = v23;
                v22 -= 2;
              }
              *(_QWORD *)a3 = v22;
              *(_QWORD *)(a3 + 8) = v14;
              *(_QWORD *)(a3 + 16) = &v21[2 * v20];
              if (v15)
                operator delete(v15);
            }
            else
            {
              *v13 = v10;
              v14 = v13 + 1;
            }
            *(_QWORD *)(a3 + 8) = v14;
            v8 = *(_QWORD *)(a1 + 8);
          }
          v6 = *(_QWORD *)(a2 + 56);
        }
        ++v7;
      }
      while (v6 > v7);
    }
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 8);
    if (v24)
    {
      v25 = 0;
      v26 = *(_QWORD *)(a2 + 56);
      do
      {
        if (v26)
        {
          for (j = 0; j < v26; ++j)
          {
            ZinIrVector::GetAt<half>(a2, j);
            v29 = v28;
            v31 = *(_WORD **)(a3 + 8);
            v30 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v31 >= v30)
            {
              v33 = *(_WORD **)a3;
              v34 = (uint64_t)v31 - *(_QWORD *)a3;
              if (v34 <= -3)
LABEL_52:
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v35 = v34 >> 1;
              v36 = v30 - (_QWORD)v33;
              if (v36 <= (v34 >> 1) + 1)
                v37 = v35 + 1;
              else
                v37 = v36;
              if (v36 >= 0x7FFFFFFFFFFFFFFELL)
                v38 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v38 = v37;
              if (v38)
              {
                v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(a3 + 16, v38);
                v33 = *(_WORD **)a3;
                v31 = *(_WORD **)(a3 + 8);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[2 * v35];
              *(_WORD *)v40 = v29;
              v32 = v40 + 2;
              while (v31 != v33)
              {
                v41 = *--v31;
                *((_WORD *)v40 - 1) = v41;
                v40 -= 2;
              }
              *(_QWORD *)a3 = v40;
              *(_QWORD *)(a3 + 8) = v32;
              *(_QWORD *)(a3 + 16) = &v39[2 * v38];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *v31 = v28;
              v32 = v31 + 1;
            }
            *(_QWORD *)(a3 + 8) = v32;
            v26 = *(_QWORD *)(a2 + 56);
          }
          v24 = *(_QWORD *)(a1 + 8);
        }
        ++v25;
      }
      while (v24 > v25);
    }
  }
}

void ZinIrTransformDuplicate::Duplicate<signed char>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  char v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t j;
  char v29;
  char v30;
  unint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  char v43;

  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a1 + 8);
      do
      {
        if (v8)
        {
          for (i = 0; i < v8; ++i)
          {
            v10 = ZinIrVector::GetAt<signed char>(a2, v7);
            v11 = v10;
            v13 = (_BYTE *)a3[1];
            v12 = a3[2];
            if ((unint64_t)v13 >= v12)
            {
              v15 = *a3;
              v16 = &v13[-*a3];
              v17 = (unint64_t)(v16 + 1);
              if ((uint64_t)(v16 + 1) < 0)
                goto LABEL_52;
              v18 = v12 - v15;
              if (2 * v18 > v17)
                v17 = 2 * v18;
              if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
                v19 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              if (v19)
                v20 = (char *)operator new(v19);
              else
                v20 = 0;
              v21 = &v16[(_QWORD)v20];
              v22 = &v16[(_QWORD)v20];
              *v22 = v11;
              v14 = v22 + 1;
              if (v13 != (_BYTE *)v15)
              {
                v23 = &v13[~v15];
                do
                {
                  v24 = *--v13;
                  (v23--)[(_QWORD)v20] = v24;
                }
                while (v13 != (_BYTE *)v15);
                v13 = (_BYTE *)*a3;
                v21 = v20;
              }
              *a3 = (unint64_t)v21;
              a3[1] = (unint64_t)v14;
              a3[2] = (unint64_t)&v20[v19];
              if (v13)
                operator delete(v13);
            }
            else
            {
              *v13 = v10;
              v14 = v13 + 1;
            }
            a3[1] = (unint64_t)v14;
            v8 = *(_QWORD *)(a1 + 8);
          }
          v6 = *(_QWORD *)(a2 + 56);
        }
        ++v7;
      }
      while (v6 > v7);
    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 8);
    if (v25)
    {
      v26 = 0;
      v27 = *(_QWORD *)(a2 + 56);
      do
      {
        if (v27)
        {
          for (j = 0; j < v27; ++j)
          {
            v29 = ZinIrVector::GetAt<signed char>(a2, j);
            v30 = v29;
            v32 = (_BYTE *)a3[1];
            v31 = a3[2];
            if ((unint64_t)v32 >= v31)
            {
              v34 = *a3;
              v35 = &v32[-*a3];
              v36 = (unint64_t)(v35 + 1);
              if ((uint64_t)(v35 + 1) < 0)
LABEL_52:
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v37 = v31 - v34;
              if (2 * v37 > v36)
                v36 = 2 * v37;
              if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
                v38 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
                v39 = (char *)operator new(v38);
              else
                v39 = 0;
              v40 = &v35[(_QWORD)v39];
              v41 = &v35[(_QWORD)v39];
              *v41 = v30;
              v33 = v41 + 1;
              if (v32 != (_BYTE *)v34)
              {
                v42 = &v32[~v34];
                do
                {
                  v43 = *--v32;
                  (v42--)[(_QWORD)v39] = v43;
                }
                while (v32 != (_BYTE *)v34);
                v32 = (_BYTE *)*a3;
                v40 = v39;
              }
              *a3 = (unint64_t)v40;
              a3[1] = (unint64_t)v33;
              a3[2] = (unint64_t)&v39[v38];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *v32 = v29;
              v33 = v32 + 1;
            }
            a3[1] = (unint64_t)v33;
            v27 = *(_QWORD *)(a2 + 56);
          }
          v25 = *(_QWORD *)(a1 + 8);
        }
        ++v26;
      }
      while (v25 > v26);
    }
  }
}

void ZinIrTransformDuplicate::Duplicate<unsigned char>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  char v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t j;
  char v29;
  char v30;
  unint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  char v43;

  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a1 + 8);
      do
      {
        if (v8)
        {
          for (i = 0; i < v8; ++i)
          {
            v10 = ZinIrVector::GetAt<unsigned char>(a2, v7);
            v11 = v10;
            v13 = (_BYTE *)a3[1];
            v12 = a3[2];
            if ((unint64_t)v13 >= v12)
            {
              v15 = *a3;
              v16 = &v13[-*a3];
              v17 = (unint64_t)(v16 + 1);
              if ((uint64_t)(v16 + 1) < 0)
                goto LABEL_52;
              v18 = v12 - v15;
              if (2 * v18 > v17)
                v17 = 2 * v18;
              if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
                v19 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              if (v19)
                v20 = (char *)operator new(v19);
              else
                v20 = 0;
              v21 = &v16[(_QWORD)v20];
              v22 = &v16[(_QWORD)v20];
              *v22 = v11;
              v14 = v22 + 1;
              if (v13 != (_BYTE *)v15)
              {
                v23 = &v13[~v15];
                do
                {
                  v24 = *--v13;
                  (v23--)[(_QWORD)v20] = v24;
                }
                while (v13 != (_BYTE *)v15);
                v13 = (_BYTE *)*a3;
                v21 = v20;
              }
              *a3 = (unint64_t)v21;
              a3[1] = (unint64_t)v14;
              a3[2] = (unint64_t)&v20[v19];
              if (v13)
                operator delete(v13);
            }
            else
            {
              *v13 = v10;
              v14 = v13 + 1;
            }
            a3[1] = (unint64_t)v14;
            v8 = *(_QWORD *)(a1 + 8);
          }
          v6 = *(_QWORD *)(a2 + 56);
        }
        ++v7;
      }
      while (v6 > v7);
    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 8);
    if (v25)
    {
      v26 = 0;
      v27 = *(_QWORD *)(a2 + 56);
      do
      {
        if (v27)
        {
          for (j = 0; j < v27; ++j)
          {
            v29 = ZinIrVector::GetAt<unsigned char>(a2, j);
            v30 = v29;
            v32 = (_BYTE *)a3[1];
            v31 = a3[2];
            if ((unint64_t)v32 >= v31)
            {
              v34 = *a3;
              v35 = &v32[-*a3];
              v36 = (unint64_t)(v35 + 1);
              if ((uint64_t)(v35 + 1) < 0)
LABEL_52:
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v37 = v31 - v34;
              if (2 * v37 > v36)
                v36 = 2 * v37;
              if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
                v38 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
                v39 = (char *)operator new(v38);
              else
                v39 = 0;
              v40 = &v35[(_QWORD)v39];
              v41 = &v35[(_QWORD)v39];
              *v41 = v30;
              v33 = v41 + 1;
              if (v32 != (_BYTE *)v34)
              {
                v42 = &v32[~v34];
                do
                {
                  v43 = *--v32;
                  (v42--)[(_QWORD)v39] = v43;
                }
                while (v32 != (_BYTE *)v34);
                v32 = (_BYTE *)*a3;
                v40 = v39;
              }
              *a3 = (unint64_t)v40;
              a3[1] = (unint64_t)v33;
              a3[2] = (unint64_t)&v39[v38];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *v32 = v29;
              v33 = v32 + 1;
            }
            a3[1] = (unint64_t)v33;
            v27 = *(_QWORD *)(a2 + 56);
          }
          v25 = *(_QWORD *)(a1 + 8);
        }
        ++v26;
      }
      while (v25 > v26);
    }
  }
}

uint64_t ZinIrTransformDuplicate::Serialize(ZinIrTransformDuplicate *this, ZinIrSerializer *a2)
{
  uint64_t v4;

  v4 = ZinIrSerializer::WriteUint8(a2, 11);
  return ZinIrSerializer::WriteUint64(a2, *((_QWORD *)this + 1)) + v4;
}

uint64_t ZinIrTransformDuplicate::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_207030790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 ZinIrTransformShuffle::ZinIrTransformShuffle(__n128 *a1, __n128 *a2, unint64_t a3)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&off_24C020C30;
  a1->n128_u64[1] = (unint64_t)&unk_24C020C70;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  a1[1] = *a2;
  a1[2].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a1[2].n128_u64[1] = a3;
  return result;
}

void sub_2070309E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTransformShuffle::Serialize(ZinIrTransformShuffle *this, ZinIrSerializer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
  v5 = ZinIrSerializer::WriteUint8(a2, 3);
  v6 = ZinIrSerializer::WriteUint64(a2, v4) + v5;
  v8 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v8 != v7)
  {
    v9 = *v8++;
    v6 += ZinIrSerializer::WriteUint64(a2, v9);
  }
  return v6;
}

uint64_t `non-virtual thunk to'ZinIrTransformShuffle::Serialize(ZinIrTransformShuffle *this, ZinIrSerializer *a2)
{
  return ZinIrTransformShuffle::Serialize((ZinIrTransformShuffle *)((char *)this - 8), a2);
}

uint64_t ZinIrTransformShuffle::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_207030B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrVectorEWMultiply::ZinIrVectorEWMultiply(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_24C020CA8;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t ZinIrVectorEWMultiply::Apply(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t i;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char v37[8];
  void *v38[3];
  void *__p;
  float *v40;
  float *v41;

  if (*(_QWORD *)(a2 + 56) == 1)
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  else
    v6 = *(_QWORD *)(a2 + 56);
  __p = 0;
  v40 = 0;
  v41 = 0;
  std::vector<float>::reserve(&__p, v6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      ZinIrVector::GetAt<float>(a2, i);
      v9 = v8;
      if (*(char *)(a2 + 280) >= 1)
        v10 = (float)(1 << *(_BYTE *)(a2 + 280));
      else
        v10 = 1.0 / (float)(1 << -*(_BYTE *)(a2 + 280));
      ZinIrVector::GetAt<float>(*(_QWORD *)(a1 + 8), i);
      v12 = 1.0 / (float)(1 << -*(_BYTE *)(*(_QWORD *)(a1 + 8) + 280));
      if (*(char *)(*(_QWORD *)(a1 + 8) + 280) >= 1)
        v12 = (float)(1 << *(_BYTE *)(*(_QWORD *)(a1 + 8) + 280));
      v13 = (float)(v9 * v10) * (float)(v11 * v12);
      v14 = v40;
      if (v40 >= v41)
      {
        v16 = (float *)__p;
        v17 = ((char *)v40 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v19 = (char *)v41 - (_BYTE *)__p;
        if (((char *)v41 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v41, v20);
          v16 = (float *)__p;
          v14 = v40;
        }
        else
        {
          v21 = 0;
        }
        v22 = (float *)&v21[4 * v17];
        *v22 = v13;
        v15 = v22 + 1;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v22-- - 1) = v23;
        }
        __p = v22;
        v40 = v15;
        v41 = (float *)&v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v40 = v13;
        v15 = v14 + 1;
      }
      v40 = v15;
    }
  }
  ZinDynamicRange::ZinConvertToFP32WithShift((float **)&__p, -31, 0, (uint64_t)v37);
  ZinIrVector::StdvectorToVector<float>((uint64_t *)v38, *(_BYTE *)(a2 + 152), v37[0], &v36);
  v24 = v36;
  v25 = *a3;
  *a3 = v36;
  if (v25)
  {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a3, v25);
    v24 = *a3;
  }
  if (v24)
  {
    v26 = 0;
  }
  else
  {
    v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v27)
      ZinIrVectorEWMultiply::Apply(v27, v28, v29, v30, v31, v32, v33, v34);
    v26 = 3;
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  if (__p)
  {
    v40 = (float *)__p;
    operator delete(__p);
  }
  return v26;
}

void sub_207030E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

float ZinIrVector::Unshift(ZinIrVector *this, float a2)
{
  float v2;

  v2 = 1.0 / (float)(1 << -(char)this);
  if ((int)this >= 1)
    v2 = (float)(1 << (char)this);
  return v2 * a2;
}

uint64_t ZinIrVectorEWMultiply::Serialize(ZinIrVector **this, ZinIrSerializer *a2)
{
  uint64_t v4;

  v4 = ZinIrSerializer::WriteUint8(a2, 4);
  return ZinIrVector::Serialize(this[1], a2) + v4;
}

uint64_t ZinIrVector::Serialize(ZinIrVector *this, ZinIrSerializer *a2)
{
  uint64_t v4;
  uint64_t SourceFileInfo;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ZinIrHalH13g *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  float v28;
  unint64_t *v29;
  unint64_t v30;
  std::string __p;
  unint64_t v32[2];
  int v33;

  if (*((_BYTE *)this + 152))
  {
    v4 = ZinIrSerializer::WriteUint8(a2, 1);
    SourceFileInfo = ZinIrWeightBase::GetSourceFileInfo(this);
    v6 = SourceFileInfo;
    if (*(char *)(SourceFileInfo + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)SourceFileInfo, *(_QWORD *)(SourceFileInfo + 8));
    }
    else
    {
      v7 = *(_OWORD *)SourceFileInfo;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(SourceFileInfo + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    }
    v10 = *(_OWORD *)(v6 + 24);
    v33 = *(_DWORD *)(v6 + 40);
    *(_OWORD *)v32 = v10;
    v11 = ZinIrSerializer::WriteUint32(a2, 0);
    v12 = ZinIrSerializer::WriteUint64(a2, v32[0]);
    v13 = ZinIrSerializer::WriteUint64(a2, v32[1]);
    v14 = (ZinIrVector *)((char *)this + 160);
    ZinIrHalH13g::~ZinIrHalH13g(v14);
    v16 = ZinIrSerializer::WriteUint64(a2, (uint64_t)(v15[1] - *v15) >> 4);
    ZinIrHalH13g::~ZinIrHalH13g(v14);
    v9 = v11 + v4 + v12 + v13 + v16;
    v18 = *(_QWORD **)v17;
    v19 = *(_QWORD **)(v17 + 8);
    while (v18 != v19)
    {
      v9 += (*(uint64_t (**)(_QWORD, ZinIrSerializer *))(*(_QWORD *)*v18 + 16))(*v18, a2);
      v18 += 2;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (*((_BYTE *)this + 288))
  {
    v8 = ZinIrSerializer::WriteUint8(a2, 2);
    if (!*((_BYTE *)this + 288))
      ZinAssertImpl("Trying to get singular value of a non-singular vector");
    return ZinIrSerializer::WriteFloat32(a2, *((float *)this + 71)) + v8;
  }
  else
  {
    v21 = ZinIrSerializer::WriteUint8(a2, 3);
    v22 = *((_QWORD *)this + 17);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    __p.__r_.__value_.__r.__words[0] = v22;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v26 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v22 + 24))(v22);
    v9 = ZinIrSerializer::WriteUint64(a2, v26) + v21;
    if (v26)
    {
      for (i = 0; i != v26; ++i)
      {
        ZinIrVector::GetAt<float>((uint64_t)this, i);
        v9 += ZinIrSerializer::WriteFloat32(a2, v28);
      }
    }
    if (v23)
    {
      v29 = (unint64_t *)&v23->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  return v9;
}

void sub_207031100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrVectorEWMultiply::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_2070311E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrVectorFoldBiasWithBotScaleBotBias::ZinIrVectorFoldBiasWithBotScaleBotBias(_QWORD *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  *result = &off_24C025FB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  result[3] = *a3;
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t ZinIrVectorFoldBiasWithBotScaleBotBias::Apply(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25[2];
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v5 = a1[1];
  v7 = (!v5 || !*(_BYTE *)(v5 + 152)) && ((v6 = a1[3]) == 0 || !*(_BYTE *)(v6 + 152)) && *(_BYTE *)(a2 + 152) == 0;
  std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector const&,void>(a2, &v28);
  v8 = (std::__shared_weak_count *)a1[2];
  v26 = a1[1];
  v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = a1[3];
  v12 = (std::__shared_weak_count *)a1[4];
  v25[0] = v11;
  v25[1] = (uint64_t)v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = ZinIrVectorMergeBiasAndScale(&v28, a3, &v26, v25, v7);
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v15;
}

void sub_2070313BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t ZinIrVectorMergeBiasAndScale(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, char a5)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  float *v44;
  float *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  float *v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v68;
  uint64_t v69;
  void *v70[3];
  void *__p;
  float *v72;
  float *v73;

  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *a4;
  v17 = (std::__shared_weak_count *)a4[1];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (v12)
    v20 = *(_QWORD *)(v12 + 56);
  else
    v20 = 1;
  v21 = *(_QWORD *)(v8 + 56);
  if (v16)
    v22 = *(_QWORD *)(v16 + 56);
  else
    v22 = 1;
  if (v21 <= v20)
    v21 = v20;
  if (v22 <= v21)
    v23 = v21;
  else
    v23 = v22;
  if (v17)
  {
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v13)
  {
    v26 = (unint64_t *)&v13->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v9)
  {
    v28 = (unint64_t *)&v9->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  __p = 0;
  v72 = 0;
  v73 = 0;
  if (*a4)
    v30 = *(_BYTE *)(*a4 + 280);
  else
    v30 = 0;
  if (*a3)
    v31 = *(_BYTE *)(*a3 + 280);
  else
    v31 = 0;
  std::vector<float>::reserve(&__p, v23);
  if (v23)
  {
    v32 = 0;
    if (v30 <= 0)
      v33 = 1.0 / (float)(1 << -v30);
    else
      v33 = (float)(1 << v30);
    if (v31 <= 0)
      v34 = 1.0 / (float)(1 << -v31);
    else
      v34 = (float)(1 << v31);
    do
    {
      ZinIrVector::GetAt<float>(*a1, v32);
      v36 = v35;
      if (*a4)
      {
        ZinIrVector::GetAt<float>(*a4, v32);
        v38 = v37;
      }
      else
      {
        v38 = 0.0;
      }
      if (*a3)
        ZinIrVector::GetAt<float>(*a3, v32);
      else
        v39 = 1.0;
      v40 = v39 * v34;
      v41 = 1.0 / (float)(1 << -*(_BYTE *)(*a1 + 280));
      if (*(char *)(*a1 + 280) >= 1)
        v41 = (float)(1 << *(_BYTE *)(*a1 + 280));
      v42 = (float)(v38 * v33) + (float)((float)(v36 * v41) / v40);
      v43 = v72;
      if (v72 >= v73)
      {
        v45 = (float *)__p;
        v46 = ((char *)v72 - (_BYTE *)__p) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v48 = (char *)v73 - (_BYTE *)__p;
        if (((char *)v73 - (_BYTE *)__p) >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v73, v49);
          v45 = (float *)__p;
          v43 = v72;
        }
        else
        {
          v50 = 0;
        }
        v51 = (float *)&v50[4 * v46];
        *v51 = v42;
        v44 = v51 + 1;
        while (v43 != v45)
        {
          v52 = *((_DWORD *)v43-- - 1);
          *((_DWORD *)v51-- - 1) = v52;
        }
        __p = v51;
        v72 = v44;
        v73 = (float *)&v50[4 * v49];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *v72 = v42;
        v44 = v43 + 1;
      }
      v72 = v44;
      ++v32;
    }
    while (v32 != v23);
  }
  if ((a5 & 1) != 0)
  {
    ZinDynamicRange::ZinConvertToFP32WithShift((float **)&__p, -16, 15, (uint64_t)&v69);
    ZinIrVector::StdvectorToVector<float>((uint64_t *)v70, *(_BYTE *)(*a1 + 152), v69, &v68);
    v53 = a2;
    v54 = *a2;
    *a2 = v68;
    if (v54)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a2, v54);
    if (v70[0])
    {
      v70[1] = v70[0];
      operator delete(v70[0]);
    }
  }
  else
  {
    ZinIrVector::StdvectorToVector<float>((uint64_t *)&__p, *(_BYTE *)(*a1 + 152), 0, &v69);
    v53 = a2;
    v55 = *a2;
    *a2 = v69;
    if (v55)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a2, v55);
  }
  if (*v53)
  {
    v56 = 0;
  }
  else
  {
    v57 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v57)
      ZinIrVectorEWMultiply::Apply(v57, v58, v59, v60, v61, v62, v63, v64);
    v56 = 3;
  }
  if (__p)
  {
    v72 = (float *)__p;
    operator delete(__p);
  }
  return v56;
}

void sub_20703182C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrVectorFoldBiasWithBotScaleBotBias::Serialize(ZinIrVectorFoldBiasWithBotScaleBotBias *this, ZinIrSerializer *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  ZinIrVector *v8;
  ZinIrVector *v9;

  v4 = ZinIrSerializer::WriteUint8(a2, 5);
  v5 = *((_QWORD *)this + 3) != 0;
  v6 = ZinIrSerializer::WriteUint8(a2, *((_QWORD *)this + 1) != 0) + v4;
  v7 = v6 + ZinIrSerializer::WriteUint8(a2, v5);
  v8 = (ZinIrVector *)*((_QWORD *)this + 1);
  if (v8)
    v7 += ZinIrVector::Serialize(v8, a2);
  v9 = (ZinIrVector *)*((_QWORD *)this + 3);
  if (v9)
    v7 += ZinIrVector::Serialize(v9, a2);
  return v7;
}

uint64_t ZinIrVectorFoldBiasWithBotScaleBotBias::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_2070319BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrVectorFoldBotBiasWithBotScaleBias::ZinIrVectorFoldBotBiasWithBotScaleBias(_QWORD *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  *result = &off_24C025FE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  result[3] = *a3;
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t ZinIrVectorFoldBotBiasWithBotScaleBias::Apply(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v4 = a1[3];
  v6 = (!v4 || !*(_BYTE *)(v4 + 152)) && ((v5 = a1[1]) == 0 || !*(_BYTE *)(v5 + 152)) && *(_BYTE *)(a2 + 152) == 0;
  v7 = (std::__shared_weak_count *)a1[4];
  v28 = a1[3];
  v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (std::__shared_weak_count *)a1[2];
  v26 = a1[1];
  v27 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector const&,void>(a2, &v24);
  v13 = ZinIrVectorMergeBiasAndScale(&v28, a3, &v26, &v24, v6);
  v14 = v25;
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v13;
}

void sub_207031B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t ZinIrVectorFoldBotBiasWithBotScaleBias::Serialize(ZinIrVectorFoldBotBiasWithBotScaleBias *this, ZinIrSerializer *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  ZinIrVector *v8;
  ZinIrVector *v9;

  v4 = ZinIrSerializer::WriteUint8(a2, 6);
  v5 = *((_QWORD *)this + 3) != 0;
  v6 = ZinIrSerializer::WriteUint8(a2, *((_QWORD *)this + 1) != 0) + v4;
  v7 = v6 + ZinIrSerializer::WriteUint8(a2, v5);
  v8 = (ZinIrVector *)*((_QWORD *)this + 1);
  if (v8)
    v7 += ZinIrVector::Serialize(v8, a2);
  v9 = (ZinIrVector *)*((_QWORD *)this + 3);
  if (v9)
    v7 += ZinIrVector::Serialize(v9, a2);
  return v7;
}

uint64_t ZinIrVectorFoldBotBiasWithBotScaleBias::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_207031CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrVectorFoldBotScaleWithBotBiasBias::ZinIrVectorFoldBotScaleWithBotBiasBias(_QWORD *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  *result = &off_24C026020;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  result[3] = *a3;
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t ZinIrVectorFoldBotScaleWithBotBiasBias::Apply(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25[2];
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v5 = a1[3];
  v7 = (!v5 || !*(_BYTE *)(v5 + 152)) && ((v6 = a1[1]) == 0 || !*(_BYTE *)(v6 + 152)) && *(_BYTE *)(a2 + 152) == 0;
  v8 = (std::__shared_weak_count *)a1[4];
  v28 = a1[3];
  v29 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector const&,void>(a2, &v26);
  v11 = a1[1];
  v12 = (std::__shared_weak_count *)a1[2];
  v25[0] = v11;
  v25[1] = (uint64_t)v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = ZinIrVectorMergeBiasAndScale(&v28, a3, &v26, v25, v7);
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v15;
}

void sub_207031ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t ZinIrVectorFoldBotScaleWithBotBiasBias::Serialize(ZinIrVectorFoldBotScaleWithBotBiasBias *this, ZinIrSerializer *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  ZinIrVector *v8;
  ZinIrVector *v9;

  v4 = ZinIrSerializer::WriteUint8(a2, 7);
  v5 = *((_QWORD *)this + 3) != 0;
  v6 = ZinIrSerializer::WriteUint8(a2, *((_QWORD *)this + 1) != 0) + v4;
  v7 = v6 + ZinIrSerializer::WriteUint8(a2, v5);
  v8 = (ZinIrVector *)*((_QWORD *)this + 1);
  if (v8)
    v7 += ZinIrVector::Serialize(v8, a2);
  v9 = (ZinIrVector *)*((_QWORD *)this + 3);
  if (v9)
    v7 += ZinIrVector::Serialize(v9, a2);
  return v7;
}

uint64_t ZinIrVectorFoldBotScaleWithBotBiasBias::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_20703203C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinIrVector::IsQualifiedToConvertPerCoutVectorToSingularVector(ZinIrVector *this, int a2, int a3)
{
  _BOOL8 result;
  int v6;

  result = 0;
  if (!*((_BYTE *)this + 152) && !*((_BYTE *)this + 288))
  {
    v6 = *((char *)this + 280);
    if (ZinIrVector::HasSingleUniqueValue(this) && v6 >= a2 && v6 <= a3)
      return 1;
  }
  return result;
}

BOOL ZinIrVector::HasSingleUniqueValue(ZinIrVector *this)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  float v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  float v38;

  if (!*((_QWORD *)this + 7))
    return 0;
  switch(*((_DWORD *)this + 2))
  {
    case 1:
      v2 = ZinIrVector::GetAt<signed char>((uint64_t)this, 0);
      if (*((_QWORD *)this + 7) < 2uLL)
        goto LABEL_33;
      v3 = v2;
      v4 = 2;
      v5 = 1;
      do
      {
        _ZF = ZinIrVector::GetAt<signed char>((uint64_t)this, v5) == v3;
        result = _ZF;
        if (!_ZF)
          break;
        v5 = v4;
        v8 = *((_QWORD *)this + 7) > (unint64_t)v4++;
      }
      while (v8);
      break;
    case 2:
      v9 = ZinIrVector::GetAt<unsigned char>((uint64_t)this, 0);
      if (*((_QWORD *)this + 7) < 2uLL)
        goto LABEL_33;
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        _ZF = ZinIrVector::GetAt<unsigned char>((uint64_t)this, v12) == v10;
        result = _ZF;
        if (!_ZF)
          break;
        v12 = v11;
        v8 = *((_QWORD *)this + 7) > (unint64_t)v11++;
      }
      while (v8);
      break;
    case 4:
      ZinIrVector::GetAt<half>((uint64_t)this, 0);
      if (*((_QWORD *)this + 7) < 2uLL)
        goto LABEL_33;
      v21 = 2;
      v22 = 1;
      __asm { FCVT            S8, H0 }
      do
      {
        ZinIrVector::GetAt<half>((uint64_t)this, v22);
        __asm { FCVT            S0, H0 }
        result = _S0 == _S8;
        if (_S0 != _S8)
          break;
        v22 = v21;
        v8 = *((_QWORD *)this + 7) > (unint64_t)v21++;
      }
      while (v8);
      break;
    case 5:
      v29 = ZinIrVector::GetAt<e4m3_t>((uint64_t)this, 0);
      if (*((_QWORD *)this + 7) < 2uLL)
        goto LABEL_33;
      v30 = v29;
      v31 = 2;
      v32 = 1;
      do
      {
        v33 = ZinIrVector::GetAt<e4m3_t>((uint64_t)this, v32);
        result = v33 == v30;
        if (v33 != v30)
          break;
        v32 = v31;
        v8 = *((_QWORD *)this + 7) > (unint64_t)v31++;
      }
      while (v8);
      break;
    case 6:
      ZinIrVector::GetAt<float>((uint64_t)this, 0);
      if (*((_QWORD *)this + 7) < 2uLL)
      {
LABEL_33:
        result = 1;
      }
      else
      {
        v35 = v34;
        v36 = 2;
        v37 = 1;
        do
        {
          ZinIrVector::GetAt<float>((uint64_t)this, v37);
          result = v38 == v35;
          if (v38 != v35)
            break;
          v37 = v36;
          v8 = *((_QWORD *)this + 7) > (unint64_t)v36++;
        }
        while (v8);
      }
      break;
    default:
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinIrVector::HasSingleUniqueValue(result, v13, v14, v15, v16, v17, v18, v19);
        return 0;
      }
      break;
  }
  return result;
}

void ZinIrVector::ConvertPerCoutVectorToSingularVector(ZinIrVector *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  char v7[8];
  void *__p[3];
  void *v9[3];

  ZinIrVector::GetValuesAsVector<float>((uint64_t)this, *((_QWORD *)this + 7), 1, (uint64_t)v9);
  std::vector<float>::resize((uint64_t)v9, 1uLL);
  ZinDynamicRange::ZinConvertToFP32WithShift((float **)v9, a2, a3, (uint64_t)v7);
  ZinIrVector::StdvectorToVector<float>((uint64_t *)__p, 0, v7[0], a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_207032364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void ZinIrVector::ConvertSingularVectorToPerCoutVector(ZinIrVector *this@<X0>, size_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *__p[3];
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  if (!*((_BYTE *)this + 288))
    ZinAssertImpl("This function should only be called for singular vectors.");
  v5 = *((_DWORD *)this + 2);
  if (v5 == 2)
  {
    v26 = (int)*((float *)this + 71);
    std::vector<unsigned char>::vector(__p, a2, &v26);
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)__p, &v28);
    v13 = operator new();
    v14 = v29;
    v30 = v28;
    v31 = v29;
    v28 = 0;
    v29 = 0;
    ZinIrVector::ZinIrVector(v13, &v30, a2, 2, 0, 0, 0);
    *a3 = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v10 = v29;
    if (!v29)
      goto LABEL_23;
    v17 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v17);
    while (__stlxr(v12 - 1, v17));
    goto LABEL_21;
  }
  if (v5 == 1)
  {
    v26 = (int)*((float *)this + 71);
    std::vector<signed char>::vector(__p, a2, &v26);
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)__p, &v28);
    v6 = operator new();
    v7 = v29;
    v30 = v28;
    v31 = v29;
    v28 = 0;
    v29 = 0;
    ZinIrVector::ZinIrVector(v6, &v30, a2, 1, 0, 0, 0);
    *a3 = v6;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v29;
    if (!v29)
      goto LABEL_23;
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_21:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_23:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return;
  }
  v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v18)
    ZinIrVector::ConvertSingularVectorToPerCoutVector(v18, v19, v20, v21, v22, v23, v24, v25);
  *a3 = 0;
}

void sub_2070325D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x20BD002F8](v15, 0x10B3C400A1ACBE3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrVector::Transform(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  int64x2_t v32;
  _QWORD v33[2];
  uint64_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  uint64_t v37;
  _QWORD *v38;

  v34 = 0;
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v7)
  {
    v8 = 0;
LABEL_7:
    v34 = 0;
    v10 = *a3;
    *a3 = v8;
    if (v10)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a3, v10);
    if (*(_BYTE *)(a1 + 152))
    {
      v32 = 0uLL;
      v33[0] = 0;
      v11 = *(_QWORD **)a2;
      v12 = *(_QWORD **)(a2 + 8);
      if (*(_QWORD **)a2 != v12)
      {
        v13 = 0;
        do
        {
          v14 = *(_OWORD *)v11;
          if (v11[1])
          {
            v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
            v13 = (_OWORD *)v32.i64[1];
          }
          if ((unint64_t)v13 >= v33[0])
          {
            v31 = v14;
            v17 = ((uint64_t)v13 - v32.i64[0]) >> 4;
            if ((unint64_t)(v17 + 1) >> 60)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v18 = (v33[0] - v32.i64[0]) >> 3;
            if (v18 <= v17 + 1)
              v18 = v17 + 1;
            if (v33[0] - v32.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
              v19 = 0xFFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            v38 = v33;
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)v33, v19);
            v22 = &v20[16 * v17];
            *(_OWORD *)v22 = v31;
            v23 = (_QWORD *)v32.i64[1];
            v24 = (_QWORD *)v32.i64[0];
            if (v32.i64[1] == v32.i64[0])
            {
              v27 = vdupq_n_s64(v32.u64[1]);
              v25 = &v20[16 * v17];
            }
            else
            {
              v25 = &v20[16 * v17];
              do
              {
                v26 = *((_OWORD *)v23 - 1);
                v23 -= 2;
                *((_OWORD *)v25 - 1) = v26;
                v25 -= 16;
                *v23 = 0;
                v23[1] = 0;
              }
              while (v23 != v24);
              v27 = v32;
            }
            v13 = v22 + 16;
            v32.i64[0] = (uint64_t)v25;
            v32.i64[1] = (uint64_t)(v22 + 16);
            v36 = v27;
            v28 = v33[0];
            v33[0] = &v20[16 * v21];
            v37 = v28;
            v35 = (int64x2_t *)v27.i64[0];
            std::__split_buffer<std::shared_ptr<ZinIrConstData>>::~__split_buffer((uint64_t)&v35);
          }
          else
          {
            *v13++ = v14;
          }
          v32.i64[1] = (uint64_t)v13;
          v11 += 2;
        }
        while (v11 != v12);
      }
      ZinIrWeightBase::SetupMutableHistory(a1, *a3, (__int128 **)&v32);
      v35 = &v32;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    }
    v9 = 0;
  }
  else
  {
    v8 = a1;
    while (1)
    {
      v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*v6 + 32))(*v6, v8, &v34);
      if ((_DWORD)v9)
        break;
      v8 = v34;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_7;
    }
  }
  v29 = v34;
  v34 = 0;
  if (v29)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v34, v29);
  return v9;
}

void sub_20703287C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;

  a11 = (void **)&a13;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a11);
  v18 = a17;
  a17 = 0;
  if (v18)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a17, v18);
  _Unwind_Resume(a1);
}

BOOL ZinIrVector::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v5;
  unsigned int v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  _BOOL8 result;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2 != *(_QWORD *)(a2 + 56))
    return 0;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8))
    return 0;
  if (v5 != 4)
  {
    if (v5 == 6)
    {
      if (v2 >= 2)
      {
        v6 = 2;
        v7 = 1;
        do
        {
          ZinIrVector::GetAt<float>(a1, v7);
          v9 = v8;
          ZinIrVector::GetAt<float>(a2, v7);
          result = v9 == v10;
          if (v9 != v10)
            break;
          v7 = v6;
          v12 = *(_QWORD *)(a1 + 56) > (unint64_t)v6++;
        }
        while (v12);
        return result;
      }
      return 1;
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinIrVector::operator==(result, v24, v25, v26, v27, v28, v29, v30);
    return 0;
  }
  if (v2 < 2)
    return 1;
  v13 = 2;
  v14 = 1;
  do
  {
    ZinIrVector::GetAt<half>(a1, v14);
    _H8 = v15;
    ZinIrVector::GetAt<half>(a2, v14);
    __asm
    {
      FCVT            S1, H8
      FCVT            S0, H0
    }
    result = _S1 == _S0;
    if (_S1 != _S0)
      break;
    v14 = v13;
    v12 = *(_QWORD *)(a1 + 56) > (unint64_t)v13++;
  }
  while (v12);
  return result;
}

uint64_t ZinIrVector::CreatePartial@<X0>(ZinIrVector *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v7;
  uint64_t result;

  *(_QWORD *)&v7 = std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector const&>((uint64_t)this, a4).n128_u64[0];
  if (!*a4)
    ZinAssertImpl("Failed copying ZinIrVector", v7);
  result = ZinIrWeightBase::UpdateDescriptorForPartialTransform((uint64_t *)*a4, a2, a3, 0);
  if ((_DWORD)result)
    ZinAssertImpl("Failed updating descriptor");
  return result;
}

void sub_207032A60(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrVector::GetElementIndex(uint64_t a1, _QWORD *a2)
{
  return (*a2 + *(_QWORD *)(a1 + 16)) * *(_QWORD *)(a1 + 96);
}

void ZinIrVector::Clone(ZinIrVector *this@<X0>, uint64_t *a2@<X8>)
{
  float v4;
  char v5;
  ZinIrVector *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  void **v28;
  char v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 288))
  {
    switch(*((_DWORD *)this + 2))
    {
      case 1:
        v14 = (int)*((float *)this + 71);
        v6 = (ZinIrVector *)operator new();
        ZinIrVector::ZinIrVector(v6, v14);
        goto LABEL_14;
      case 2:
        v13 = (int)*((float *)this + 71);
        v6 = (ZinIrVector *)operator new();
        ZinIrVector::ZinIrVector(v6, v13);
        goto LABEL_14;
      case 4:
      case 6:
        v4 = *((float *)this + 71);
        v5 = *((_BYTE *)this + 280);
        v6 = (ZinIrVector *)operator new();
        ZinIrVector::ZinIrVector(v6, v4, v5);
LABEL_14:
        *a2 = (uint64_t)v6;
        break;
      default:
        v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v15)
          ZinIrVector::Clone(v15, v16, v17, v18, v19, v20, v21, v22);
        *a2 = 0;
        break;
    }
  }
  else
  {
    v7 = (std::__shared_weak_count *)operator new(0x30uLL);
    v7->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BA38;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C0223F8;
    v7[1].__shared_owners_ = 1;
    LOBYTE(v7[1].__shared_weak_owners_) = 1;
    v26 = v7 + 1;
    v27 = v7;
    *a2 = 0;
    v30[0] = v7 + 1;
    v30[1] = v7;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v28 = (void **)&v23;
    v29 = 0;
    v10 = operator new(0x10uLL);
    v23 = v10;
    v25 = v10 + 2;
    *v10 = v7 + 1;
    v10[1] = v7;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v24 = v10 + 2;
    ZinIrVector::Transform((uint64_t)this, (uint64_t)&v23, a2);
    v28 = (void **)&v23;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v28);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v30);
    if (!*a2)
      ZinAssertImpl("Failed to clone scale", v23);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_207032CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

BOOL ZinIrVector::HasAllZero(ZinIrVector *this)
{
  uint64_t HasAllZero;
  ZinIrConstData *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (*((_BYTE *)this + 288))
    return *((float *)this + 71) == 0.0;
  v4 = (ZinIrConstData *)*((_QWORD *)this + 17);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  HasAllZero = ZinIrConstData::HasAllZero(v4);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return HasAllZero;
}

void sub_207032E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrTransformRemap::~ZinIrTransformRemap(ZinIrTransformRemap *this)
{
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'ZinIrTransformRemap::~ZinIrTransformRemap(ZinIrTransformRemap *this)
{
  JUMPOUT(0x20BD002F8);
}

void ZinIrTransformDuplicate::~ZinIrTransformDuplicate(ZinIrTransformDuplicate *this)
{
  JUMPOUT(0x20BD002F8);
}

void ZinIrTransformShuffle::~ZinIrTransformShuffle(ZinIrTransformShuffle *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C020C30;
  *((_QWORD *)this + 1) = &unk_24C020C70;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C020C30;
  *((_QWORD *)this + 1) = &unk_24C020C70;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'ZinIrTransformShuffle::~ZinIrTransformShuffle(ZinIrTransformShuffle *this)
{
  void *v1;

  *((_QWORD *)this - 1) = &off_24C020C30;
  *(_QWORD *)this = &unk_24C020C70;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
  {
    *((_QWORD *)this + 2) = v1;
    operator delete(v1);
  }
}

{
  void *v1;

  *((_QWORD *)this - 1) = &off_24C020C30;
  *(_QWORD *)this = &unk_24C020C70;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
  {
    *((_QWORD *)this + 2) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x20BD002F8);
}

void ZinIrVectorEWMultiply::~ZinIrVectorEWMultiply(ZinIrVectorEWMultiply *this)
{
  *(_QWORD *)this = &off_24C020CA8;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24C020CA8;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x20BD002F8);
}

void ZinIrVectorFoldBiasWithBotScaleBotBias::~ZinIrVectorFoldBiasWithBotScaleBotBias(ZinIrVectorFoldBiasWithBotScaleBotBias *this)
{
  char *v1;

  *(_QWORD *)this = &off_24C025FB0;
  v1 = (char *)this + 8;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24C025FB0;
  v1 = (char *)this + 8;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x20BD002F8);
}

void ZinIrVectorFoldBotBiasWithBotScaleBias::~ZinIrVectorFoldBotBiasWithBotScaleBias(ZinIrVectorFoldBotBiasWithBotScaleBias *this)
{
  char *v1;

  *(_QWORD *)this = &off_24C025FE8;
  v1 = (char *)this + 8;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24C025FE8;
  v1 = (char *)this + 8;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x20BD002F8);
}

void ZinIrVectorFoldBotScaleWithBotBiasBias::~ZinIrVectorFoldBotScaleWithBotBiasBias(ZinIrVectorFoldBotScaleWithBotBiasBias *this)
{
  char *v1;

  *(_QWORD *)this = &off_24C026020;
  v1 = (char *)this + 8;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24C026020;
  v1 = (char *)this + 8;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x140uLL);
  result = std::__shared_ptr_emplace<ZinIrVector>::__shared_ptr_emplace[abi:ne180100]<ZinIrVector const&,std::allocator<ZinIrVector>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2070331EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrVector>::__shared_ptr_emplace[abi:ne180100]<ZinIrVector const&,std::allocator<ZinIrVector>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05B290;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrVector,ZinIrVector const&,ZinIrVector*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_207033238(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrVector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrVector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrVector>::__on_zero_shared(uint64_t a1)
{
  return std::__destroy_at[abi:ne180100]<ZinIrVector,0>(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrVector,ZinIrVector const&,ZinIrVector*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)a1 = &unk_24C01AFB0;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  std::vector<std::shared_ptr<ZinIrTransform>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform>*,std::shared_ptr<ZinIrTransform>*>((char *)(a1 + 160), *(_QWORD **)(a2 + 160), *(_QWORD **)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 4);
  v14 = (std::string *)(a1 + 184);
  if (*(char *)(a2 + 207) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a2 + 184), *(_QWORD *)(a2 + 192));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  v16 = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v16;
  v17 = *(_OWORD *)(a2 + 232);
  v18 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 260) = *(_OWORD *)(a2 + 260);
  *(_OWORD *)(a1 + 248) = v18;
  *(_OWORD *)(a1 + 232) = v17;
  *(_QWORD *)a1 = &off_24C015D80;
  v19 = *(_QWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = v19;
  return a1;
}

void sub_2070333E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__destroy_at[abi:ne180100]<ZinIrVector,0>(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C01AFB0;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  v3 = (void **)(a1 + 160);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](a1 + 136);
}

void ZinIrTransformRemap::Apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported format in IrVector Remap transform\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrTransformDuplicate::Apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported kernel format in Vector Duplicate\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrTransformShuffle::Apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported scale/bias format in ShuffleChannels\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrVectorEWMultiply::Apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fail to allocate memory buffer\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrVector::HasSingleUniqueValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported kernel format for scale/bias/zero-point.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrVector::ConvertSingularVectorToPerCoutVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid kernel format for ConvertSingularVectorToPerCoutVector().", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrVector::operator==(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported kernel format for scale/bias.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrVector::Clone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported kernel format", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinCpBasedAllocator::ZinCpBasedAllocator(uint64_t a1, const ZinIrControlFlowGraph *a2, uint64_t *a3, __int128 *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  __int128 v18;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::string *v27;
  const std::string::value_type *v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  __int128 v35;
  void *__p[2];
  __int128 v38;
  uint64_t v39;
  std::string v40;
  std::string v41;
  std::string v42;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  v10 = operator new();
  ZinL2FootprintCalculator::ZinL2FootprintCalculator(v10, a2, a3);
  *(_QWORD *)(a1 + 272) = v10;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  if (*((_QWORD *)a2 + 45) == *((_QWORD *)a2 + 44))
    ZinAssertImpl("Must run scheduler first");
  *(_QWORD *)(a1 + 320) = (char *)a2 + 352;
  *(_QWORD *)(a1 + 328) = a2;
  v11 = *a3;
  *(_QWORD *)(a1 + 336) = *a3;
  *(_QWORD *)(a1 + 344) = a3[1];
  *(_QWORD *)(a1 + 352) = 1024;
  v12 = *(_QWORD *)(v11 + 408);
  *(_QWORD *)(a1 + 360) = v12 >> 2;
  *(_QWORD *)(a1 + 368) = v12;
  v13 = MEMORY[0x24BEDB840];
  v14 = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)(a1 + 792) = MEMORY[0x24BEDB840] + 64;
  v15 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *(_QWORD *)(a1 + 376) = v15;
  *(_QWORD *)(a1 + 376 + *(_QWORD *)(v15 - 24)) = v16;
  v17 = (std::ios_base *)(a1 + 376 + *(_QWORD *)(*(_QWORD *)(a1 + 376) - 24));
  std::ios_base::init(v17, (void *)(a1 + 384));
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 376) = v13 + 24;
  *(_QWORD *)(a1 + 792) = v14;
  MEMORY[0x20BCFFEA8](a1 + 384);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 944), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v18 = *a4;
    *(_QWORD *)(a1 + 960) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 944) = v18;
  }
  *(_BYTE *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 969) = a5;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 976) = _Q0;
  *(_OWORD *)(a1 + 992) = _Q0;
  *(_QWORD *)(a1 + 1008) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1024) = a1 + 1032;
  ZinTensorFamilyUtil::ZinTensorFamilyUtil((ZinTensorFamilyUtil *)(a1 + 1048), a2, 1, 0);
  *(_BYTE *)(a1 + 1152) = 1;
  v24 = *(_QWORD *)(***(_QWORD ***)(a1 + 320) + 16);
  if (*(char *)(v24 + 47) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(v24 + 24), *(_QWORD *)(v24 + 32));
  else
    v42 = *(std::string *)(v24 + 24);
  v25 = *(_QWORD *)(a1 + 344);
  if ((*(_BYTE *)(v25 + 96) & 4) != 0)
  {
    if (*((char *)a4 + 23) >= 0)
      v26 = *((unsigned __int8 *)a4 + 23);
    else
      v26 = *((_QWORD *)a4 + 1);
    v27 = &v40;
    std::string::basic_string[abi:ne180100]((uint64_t)&v40, v26 + 17);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if (v26)
    {
      if (*((char *)a4 + 23) >= 0)
        v28 = (const std::string::value_type *)a4;
      else
        v28 = *(const std::string::value_type **)a4;
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, ".CpSchedule.debug");
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v42;
    else
      v29 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      size = v42.__r_.__value_.__l.__size_;
    v31 = std::string::append(&v40, (const std::string::value_type *)v29, size);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v41, ".txt", 4uLL);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(_QWORD *)&v38 = *((_QWORD *)&v33->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    std::ofstream::open();
    if (SBYTE7(v38) < 0)
      operator delete(__p[0]);
    v25 = *(_QWORD *)(a1 + 344);
  }
  ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)(a1 + 336), *(double *)(v25 + 104), *(_DWORD *)(v25 + 112), *(_DWORD *)(v25 + 116), (uint64_t)__p);
  v35 = v38;
  *(_OWORD *)(a1 + 976) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 992) = v35;
  *(_QWORD *)(a1 + 1008) = v39;
  ZinCpBasedAllocator::Initialize((ZinCpBasedAllocator *)a1);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  return a1;
}

void sub_207033A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;

  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100](v40);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v38 + 1024, *(_QWORD **)(v38 + 1032));
  std::unique_ptr<ZinIrInPlaceUpdate>::reset[abi:ne180100]((uint64_t *)(v38 + 1016), 0);
  if (*(char *)(v38 + 967) < 0)
    operator delete(*v39);
  std::ofstream::~ofstream(v41);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a10);
  std::unique_ptr<ZinL2FootprintCalculator>::reset[abi:ne180100]((ZinL2FootprintCalculator **)(a17 + 40), 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a17);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a11);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::~__hash_table(a13);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a14);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a15, *(_QWORD **)(v38 + 56));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a16, *(_QWORD **)(v38 + 32));
  __p = (void *)v38;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_207033B78()
{
  uint64_t v0;

  MEMORY[0x20BD002F8](v0, 0x10E0C4067EF369CLL);
  JUMPOUT(0x207033B24);
}

void sub_207033B98()
{
  JUMPOUT(0x207033B24);
}

uint64_t *ZinCpBasedAllocator::Initialize(ZinCpBasedAllocator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *Hal;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const ZinIrTensor *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t RootTensor;

  v2 = (_QWORD *)*((_QWORD *)this + 41);
  v5 = (_QWORD *)*v2;
  v3 = v2 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    do
    {
      Hal = (_QWORD *)ZinIrTarget::GetHal((ZinIrTarget *)v4[4]);
      v7 = Hal + 1;
      v8 = (_QWORD *)*Hal;
      if ((_QWORD *)*Hal != Hal + 1)
      {
        do
        {
          v9 = (_QWORD *)v8[4];
          RootTensor = 0;
          v10 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v9 + 32))(v9, 0, 0);
          RootTensor = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v10);
          std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)this + 3, &RootTensor, &RootTensor);
          v9[7] = 0;
          v11 = (_QWORD *)v8[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v8[2];
              v13 = *v12 == (_QWORD)v8;
              v8 = v12;
            }
            while (!v13);
          }
          v8 = v12;
        }
        while (v12 != v7);
      }
      v14 = (_QWORD *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v4[2];
          v13 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v13);
      }
      v4 = v15;
    }
    while (v15 != v3);
  }
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges(*((ZinIrOpLayer ****)this + 40), (_QWORD *)this + 35);
  ZinCpBasedAllocator::InitializeWorkUnit(this);
  ZinCpBasedAllocator::InitializeTileHeight((uint64_t)this);
  ZinMirInterleaveInitializer::Run(*((uint64_t ***)this + 40), *((ZinIrTensor **)this + 42), 0, (_QWORD *)this + 19);
  if (ZinMirInputCropOffsetXLsbsInitializer::Run(*((ZinIrOpLayer ****)this + 40), *((_QWORD *)this + 42), (uint64_t)this + 192))ZinAssertImpl("Internal CP Allocation Error");
  ZinMirOutputCropOffsetXLsbsInitializer::Run(*((ZinIrOpLayer ****)this + 40), *((_QWORD *)this + 42), (uint64_t)this + 232);
  ZinCpBasedAllocator::InitializeEarlyAllocationDecision(this);
  *((_BYTE *)this + 968) = 0;
  v16 = operator new();
  ZinIrInPlaceUpdate::ZinIrInPlaceUpdate(v16, (uint64_t)this + 1048);
  return std::unique_ptr<ZinIrInPlaceUpdate>::reset[abi:ne180100]((uint64_t *)this + 127, v16);
}

void sub_207033D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10A2C406C64BEB0);
  _Unwind_Resume(a1);
}

void ZinCpBasedAllocator::~ZinCpBasedAllocator(ZinCpBasedAllocator *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 1048);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 1024, *((_QWORD **)this + 129));
  std::unique_ptr<ZinIrInPlaceUpdate>::reset[abi:ne180100]((uint64_t *)this + 127, 0);
  if (*((char *)this + 967) < 0)
    operator delete(*((void **)this + 118));
  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 47) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 376) = *(_QWORD *)(v2 + 24);
  MEMORY[0x20BCFFEB4]((char *)this + 384);
  std::ostream::~ostream();
  MEMORY[0x20BD0022C]((char *)this + 792);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 280);
  std::unique_ptr<ZinL2FootprintCalculator>::reset[abi:ne180100]((ZinL2FootprintCalculator **)this + 34, 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 192);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 152);
  std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 72);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  v4 = (void **)this;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t ZinCpBasedAllocator::Execute(ZinCpBasedAllocator *this)
{
  uint64_t ExecutionBehavior;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::unique_lock<std::mutex> *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  std::__thread_struct *v18;
  char *v19;
  int v20;
  unint64_t v21;
  std::__assoc_sub_state **v22;
  std::__assoc_sub_state **v23;
  std::__assoc_sub_state **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::__assoc_sub_state **v40;
  std::__assoc_sub_state **v41;
  uint64_t *v42;
  std::__assoc_sub_state *v43;
  void *ptr;
  std::exception_ptr *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::unique_lock<std::mutex> *v48;
  int v49;
  std::exception_ptr v51;
  std::unique_lock<std::mutex> *v52;
  std::unique_lock<std::mutex> v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  int v57;
  std::__assoc_sub_state **v58;
  uint64_t *v59;
  uint64_t *v60;
  ZinCpBasedAllocator *v61;
  std::unique_lock<std::mutex> __lk;
  uint64_t v63;
  pthread_t v64;
  std::exception_ptr v65;

  if (!*(_BYTE *)(*((_QWORD *)this + 42) + 1105))
    return 0;
  ExecutionBehavior = ZinCpBasedAllocator::CreateExecutionBehavior(this);
  if (!(_DWORD)ExecutionBehavior)
  {
    ZinCpBasedAllocator::CreateRegions(this);
    v61 = this;
    v3 = std::thread::hardware_concurrency();
    v4 = *((_QWORD *)this + 43);
    if (!*(_BYTE *)(v4 + 386))
    {
      v5 = *(_QWORD *)this;
      goto LABEL_55;
    }
    v5 = *(_QWORD *)this;
    if (!*(_BYTE *)(v4 + 385)
      || ((v6 = *((_QWORD *)this + 1), v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3), v7 >= 2) ? (v8 = v3 > 1) : (v8 = 0),
          !v8))
    {
LABEL_55:
      if (*((_QWORD *)this + 1) != v5)
      {
        v38 = 0;
        while (1)
        {
          v39 = v38 + 1;
          ZinCpBasedAllocator::Execute(void)::$_0::operator()(v38, (const CpAllocGraph *)&v61, v38 + 1, 0, (uint64_t)&v52);
          ExecutionBehavior = DWORD2(v55);
          if (DWORD2(v55))
            break;
          if (!BYTE12(v55))
          {
            *((_BYTE *)this + 968) = 0;
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 9);
            ZinCpBasedAllocator::UndoParallelPairSchedules(this);
            break;
          }
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v52);
          v38 = v39;
          if (v39 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3))
            goto LABEL_79;
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v52);
        return ExecutionBehavior;
      }
      goto LABEL_79;
    }
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v9 = v7 / v3;
    if (v9 >= 4)
      v9 = 4;
    if (v7 < v3)
      v10 = 1;
    else
      v10 = v9;
    if (v6 == v5)
      goto LABEL_78;
    v11 = 0;
    while (1)
    {
      v12 = (std::unique_lock<std::mutex> *)v61;
      __lk.__m_ = 0;
      *(_QWORD *)&__lk.__owns_ = 0;
      v63 = 0;
      std::vector<std::vector<ZinANELayer const*>>::__init_with_size[abi:ne180100]<std::vector<ZinANELayer const*>*,std::vector<ZinANELayer const*>*>(&__lk, v5, v6, v7);
      v13 = v11 + v10;
      v52 = v12;
      if (v11 + v10 >= v7)
        v14 = v7;
      else
        v14 = v11 + v10;
      v53 = __lk;
      v15 = v63;
      __lk.__m_ = 0;
      *(_QWORD *)&__lk.__owns_ = 0;
      v63 = 0;
      v54 = v15;
      *(_QWORD *)&v55 = v11;
      *((_QWORD *)&v55 + 1) = v14;
      LOBYTE(v56) = 1;
      v16 = operator new();
      *(_QWORD *)(v16 + 8) = 0;
      v17 = (unint64_t *)(v16 + 8);
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 850045863;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_QWORD *)(v16 + 80) = 0;
      *(_QWORD *)(v16 + 88) = 1018212795;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_OWORD *)(v16 + 124) = 0u;
      *(_QWORD *)v16 = off_24C005BC0;
      *(_QWORD *)(v16 + 192) = v52;
      *(std::unique_lock<std::mutex> *)(v16 + 200) = v53;
      *(_QWORD *)(v16 + 216) = v54;
      v54 = 0;
      v53 = (std::unique_lock<std::mutex>)0;
      *(_OWORD *)(v16 + 224) = v55;
      *(_BYTE *)(v16 + 240) = v56;
      v18 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v18);
      v19 = (char *)operator new();
      *(_QWORD *)v19 = v18;
      *(_OWORD *)(v19 + 8) = xmmword_207AB3840;
      *((_QWORD *)v19 + 3) = v16;
      v65.__ptr_ = v19;
      v20 = pthread_create(&v64, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::*)(void),std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>*>>, v19);
      if (v20)
      {
        std::__throw_system_error(v20, "thread constructor failed");
        goto LABEL_95;
      }
      v65.__ptr_ = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::*)(void),std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>*>>::~unique_ptr[abi:ne180100]((uint64_t **)&v65);
      std::thread::detach((std::thread *)&v64);
      std::thread::~thread((std::thread *)&v64);
      std::__assoc_sub_state::__attach_future[abi:ne180100](v16);
      v11 += v10;
      do
        v21 = __ldaxr(v17);
      while (__stlxr(v21 - 1, v17));
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v65.__ptr_ = &v53;
      std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      v65.__ptr_ = &__lk;
      std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      v22 = (std::__assoc_sub_state **)v59;
      if (v59 >= v60)
        break;
      *v59 = v16;
      v23 = v22 + 1;
LABEL_48:
      v59 = (uint64_t *)v23;
      v5 = *(_QWORD *)this;
      v6 = *((_QWORD *)this + 1);
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *(_QWORD *)this) >> 3);
      if (v13 >= v7)
      {
        v40 = v58;
        if (v58 != v23)
        {
          do
            std::__assoc_sub_state::wait(*v40++);
          while (v40 != v23);
          v41 = v58;
          v42 = v59;
          if (v58 != (std::__assoc_sub_state **)v59)
          {
            while (1)
            {
              v43 = *v41;
              *v41 = 0;
              __lk.__m_ = &v43->__mut_;
              __lk.__owns_ = 1;
              std::mutex::lock(&v43->__mut_);
              std::__assoc_sub_state::__sub_wait(v43, &__lk);
              v65.__ptr_ = 0;
              ptr = v43->__exception_.__ptr_;
              std::exception_ptr::~exception_ptr(&v65);
              if (ptr)
                break;
              std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)&v52, (uint64_t *)&v43[1]);
              DWORD2(v55) = *(_DWORD *)&v43[1].__mut_.__m_.__opaque[8];
              BYTE12(v55) = v43[1].__mut_.__m_.__opaque[12];
              if (__lk.__owns_)
                std::mutex::unlock(__lk.__m_);
              p_shared_owners = (unint64_t *)&v43->__shared_owners_;
              do
                v47 = __ldaxr(p_shared_owners);
              while (__stlxr(v47 - 1, p_shared_owners));
              if (!v47)
                ((void (*)(std::__assoc_sub_state *))v43->__on_zero_shared)(v43);
              ExecutionBehavior = DWORD2(v55);
              if (DWORD2(v55))
                goto LABEL_90;
              if (!BYTE12(v55))
              {
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 9);
                ZinCpBasedAllocator::UndoParallelPairSchedules(this);
                *((_BYTE *)this + 968) = 0;
LABEL_90:
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v52);
                std::vector<std::future<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult>>::~vector[abi:ne180100]((void **)&v58);
                return ExecutionBehavior;
              }
              v48 = *(std::unique_lock<std::mutex> **)&v53.__owns_;
              if (*(_QWORD *)&v53.__owns_)
              {
                do
                {
                  __lk = v48[1];
                  v49 = *(_DWORD *)&__lk.__owns_;
                  v65.__ptr_ = &__lk;
                  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &__lk, (uint64_t)&std::piecewise_construct, &v65)+ 6) = v49;
                  v48 = (std::unique_lock<std::mutex> *)v48->__m_;
                }
                while (v48);
              }
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v52);
              if (++v41 == (std::__assoc_sub_state **)v42)
                goto LABEL_78;
            }
            v51.__ptr_ = std::exception_ptr::exception_ptr(v45, &v43->__exception_);
            std::rethrow_exception(v51);
LABEL_95:
            __break(1u);
            JUMPOUT(0x2070346E8);
          }
        }
LABEL_78:
        std::vector<std::future<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult>>::~vector[abi:ne180100]((void **)&v58);
LABEL_79:
        ZinCpBasedAllocator::PropagateDimOrderForL2Inplace(this);
        ZinCpBasedAllocator::DemoteL2CircularDepToL2Circular(this);
        ZinCpBasedAllocator::UpdateScheduleForPipelineRunPair(this);
        v53 = (std::unique_lock<std::mutex>)0;
        LOBYTE(v54) = 0;
        v52 = &v53;
        v55 = 0u;
        v56 = 0u;
        v57 = 1065353216;
        ZinCpBasedAllocator::SetMemoryPressure(this, (ZinIrMemoryPressureAnalyzer *)&v52);
        ZinCpBasedAllocator::PromoteResidentToInplace(this, (ZinIrMemoryPressureAnalyzer *)&v52);
        ZinCpBasedAllocator::PromoteBoundaryToResident(this, (ZinIrMemoryPressureAnalyzer *)&v52);
        ExecutionBehavior = ZinCpBasedAllocator::PromoteChainToL2Dependent(this, (ZinIrMemoryPressureAnalyzer *)&v52);
        if (!(_DWORD)ExecutionBehavior)
        {
          ZinCpBasedAllocator::PromoteParallelExecutionBetweenSplitBranches((ZinIrOpLayer ****)this, (ZinIrMemoryPressureAnalyzer *)&v52);
          ExecutionBehavior = ZinCpBasedAllocator::VerifyAllocationDecision(this, (ZinIrMemoryPressureAnalyzer *)&v52);
          if (!(_DWORD)ExecutionBehavior)
          {
            if (*((_BYTE *)this + 968))
            {
              ZinCpBasedAllocatorUtil::PrintAllocationDecision((_QWORD *)this + 47, (uint64_t)this + 24, (_QWORD *)this + 9);
            }
            else
            {
              std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 9);
              ZinCpBasedAllocator::UndoParallelPairSchedules(this);
            }
            if (*((_QWORD *)this + 63))
              std::ofstream::close((_QWORD *)this + 47);
            ExecutionBehavior = 0;
          }
        }
        std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)&v55);
        std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)&v52, &v53.__m_->__m_.__sig);
        return ExecutionBehavior;
      }
    }
    v24 = v58;
    v25 = ((char *)v59 - (char *)v58) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v27 = v10;
    v28 = (char *)v60 - (char *)v58;
    if (((char *)v60 - (char *)v58) >> 2 > v26)
      v26 = v28 >> 2;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v26;
    if (v29)
    {
      if (v29 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v29);
    }
    else
    {
      v30 = 0;
    }
    v31 = (uint64_t *)&v30[8 * v25];
    *v31 = v16;
    v23 = (std::__assoc_sub_state **)(v31 + 1);
    if (v22 == v24)
    {
      v58 = (std::__assoc_sub_state **)v31;
      v59 = v31 + 1;
      v60 = (uint64_t *)&v30[8 * v29];
      v10 = v27;
    }
    else
    {
      do
      {
        v32 = (uint64_t)*--v22;
        *--v31 = v32;
        *v22 = 0;
      }
      while (v22 != v24);
      v22 = v58;
      v33 = v59;
      v58 = (std::__assoc_sub_state **)v31;
      v59 = (uint64_t *)v23;
      v60 = (uint64_t *)&v30[8 * v29];
      v10 = v27;
      if (v33 != (uint64_t *)v22)
      {
        do
        {
          v35 = (unint64_t *)*--v33;
          v34 = v35;
          if (v35)
          {
            v36 = v34 + 1;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
              (*(void (**)(unint64_t *))(*v34 + 16))(v34);
          }
        }
        while (v33 != (uint64_t *)v22);
        if (!v22)
          goto LABEL_48;
LABEL_47:
        operator delete(v22);
        goto LABEL_48;
      }
    }
    if (!v22)
      goto LABEL_48;
    goto LABEL_47;
  }
  return ExecutionBehavior;
}

void sub_2070346F8()
{
  __cxa_end_catch();
  JUMPOUT(0x207034700);
}

uint64_t ZinCpBasedAllocator::CreateExecutionBehavior(ZinCpBasedAllocator *this)
{
  ZinIrOpLayer ***v2;
  ZinIrOpLayer **v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer *v5;
  const ZinIrOpLayerGraph ****v6;
  const ZinIrOpLayerGraph ***v7;
  const ZinIrOpLayerGraph ***v8;
  const ZinIrOpLayerGraph **v9;
  ZinIrRegAllocUtil *v10;
  const ZinIrHalParameters *v11;
  ZinIrRegAllocUtil *v12;
  const ZinNELayer *v13;
  const ZinPELayer *v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  ZinIrTensor *v20;
  unint64_t v21;
  uint64_t v22;
  ZinIrTensor *v23;
  _BYTE *v24;
  char *v25;
  int *v26;
  int v27;
  _BOOL4 v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  ZinCpBasedAllocator *v37;
  ZinIrTensor *v38;
  int ShouldUseL2Dependent;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  const ZinPELayer *v43;
  const ZinNELayer *v44;
  ZinCpBasedAllocator *v45;
  ZinCpBasedAllocator *v46;
  ZinIrOpLayer ***v47;
  ZinIrOpLayer **v48;
  ZinIrOpLayer **v49;
  ZinIrOpLayer *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  _QWORD *v61;
  BOOL v62;
  const ZinIrOpLayerGraph ***v65;
  const ZinIrOpLayerGraph ***v66;
  char *v67;
  char *v68;
  void *__p;
  _BYTE *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t *v73;

  v2 = (ZinIrOpLayer ***)*((_QWORD *)this + 40);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    do
    {
      v5 = *v3;
      if (ZinIrOpLayer::IsANELayer(*v3)
        && ZinCpBasedAllocator::SetLayerExecutionBehavior(this, (size_t *)v5))
      {
        return 3;
      }
      ++v3;
    }
    while (v3 != v4);
    v6 = (const ZinIrOpLayerGraph ****)*((_QWORD *)this + 40);
    v7 = *v6;
    v8 = v6[1];
    if (*v6 != v8)
    {
      v65 = v6[1];
      while (1)
      {
        v9 = *v7;
        v10 = (ZinIrRegAllocUtil *)(*((uint64_t (**)(const ZinIrOpLayerGraph **, _QWORD, _QWORD))**v7 + 4))(*v7, 0, 0);
        if (!*((_BYTE *)this + 969))
        {
          v12 = v10;
          if (ZinIrRegAllocUtil::IsChainable(v10, *((const ZinIrTensor **)this + 42), v11))
          {
            v13 = (const ZinNELayer *)*((_QWORD *)v12 + 12);
            v14 = (const ZinPELayer *)**((_QWORD **)v13 + 14);
            if (ZinIrOpLayer::IsNELayer(v13))
            {
              if (ZinCpBasedAllocator::SetNPChainExecutionBehavior(this, v13, v14, 0, 0)
                || ZinCpBasedAllocator::SetNPChainExecutionBehavior(this, v13, v14, 1, 1))
              {
                return 3;
              }
            }
            else if (ZinCpBasedAllocator::SetPNChainExecutionBehavior(this, v13, v14, 0, 0)
                   || ZinCpBasedAllocator::SetPNChainExecutionBehavior(this, v13, v14, 1, 1))
            {
              return 3;
            }
          }
        }
        ZinIrInPlaceUpdate::IsInPlaceable(*((ZinIrTensor **)this + 127), (const ZinANELayer *)v9, v9[19], 2, *(_BYTE *)(*((_QWORD *)this + 42) + 1115), &v72);
        v15 = v73;
        if (v73 != v72)
        {
          v67 = (char *)v9;
          __p = &v67;
          v16 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)this + 112, &v67, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          v17 = *(_QWORD *)(*(_QWORD *)(v16[3] + 32) + 8);
          v18 = (*((uint64_t (**)(const ZinIrOpLayerGraph **, _QWORD, _QWORD))*v9 + 4))(v9, 0, 0);
          v15 = v72;
          v19 = v73;
          if (v72 != v73)
            break;
        }
LABEL_48:
        if (v15)
        {
          v73 = v15;
          operator delete(v15);
        }
        if (++v7 == v8)
          goto LABEL_51;
      }
      v20 = (ZinIrTensor *)v18;
      v66 = v7;
      while (2)
      {
        v21 = *v15;
        v22 = *((_QWORD *)v9[11] + *v15);
        v23 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0, 0);
        ZinIrTensor::GetDimensionOrderHint(v23, (uint64_t)&__p);
        ZinIrTensor::GetDimensionOrderHint(v20, (uint64_t)&v67);
        v24 = __p;
        if (v68 - v67 != v70 - (_BYTE *)__p)
        {
          v28 = 0;
          goto LABEL_28;
        }
        if (v67 == v68)
        {
          v28 = 1;
          if (v67)
            goto LABEL_29;
        }
        else
        {
          v25 = v67 + 4;
          v26 = (int *)__p;
          do
          {
            v27 = *v26++;
            v28 = *((_DWORD *)v25 - 1) == v27;
            v29 = *((_DWORD *)v25 - 1) != v27 || v25 == v68;
            v25 += 4;
          }
          while (!v29);
LABEL_28:
          if (v67)
          {
LABEL_29:
            v68 = v67;
            operator delete(v67);
            v24 = __p;
          }
        }
        if (v24)
        {
          v70 = v24;
          operator delete(v24);
        }
        v30 = *((_QWORD *)v23 + 13);
        if (v30)
          LODWORD(v30) = *(_DWORD *)(v30 + 96);
        v31 = *((_QWORD *)v20 + 13);
        if (v31)
          LODWORD(v31) = *(_DWORD *)(v31 + 96);
        if ((_DWORD)v30 == (_DWORD)v31 && v28)
        {
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v16[3], (char **)&__p);
          v33 = *((_QWORD *)__p + v21);
          v70 = __p;
          operator delete(__p);
          v34 = *(_QWORD *)(v33 + 8);
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v16[3], (char **)&__p);
          v35 = *((_QWORD *)__p + v21);
          v70 = __p;
          operator delete(__p);
          if (v34 <= v17)
            v36 = v17;
          else
            v36 = v34;
          *(_QWORD *)(v35 + 112) = v36;
        }
        if (++v15 == v19)
        {
          v15 = v72;
          v7 = v66;
          v8 = v65;
          goto LABEL_48;
        }
        continue;
      }
    }
  }
LABEL_51:
  v37 = (ZinCpBasedAllocator *)*((_QWORD *)this + 3);
  if (v37 != (ZinCpBasedAllocator *)((char *)this + 32))
  {
    do
    {
      v38 = (ZinIrTensor *)*((_QWORD *)v37 + 4);
      __p = 0;
      v70 = 0;
      v71 = 0;
      ShouldUseL2Dependent = ZinIrRegAllocUtil::ShouldUseL2Dependent(v38, *((const ZinIrTensor **)this + 42), (char **)&__p);
      v40 = (char *)__p;
      if (v70 == __p)
        ShouldUseL2Dependent = 0;
      if (ShouldUseL2Dependent == 1)
      {
        v41 = 0;
        v42 = 0;
        do
        {
          v44 = *(const ZinNELayer **)&v40[v41];
          v43 = *(const ZinPELayer **)&v40[v41 + 8];
          if (ZinIrOpLayer::IsNELayer(v44))
          {
            ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(this, v44, v43, 0, 0, 0);
            ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(this, v44, v43, 1u, 1, 1);
          }
          else
          {
            ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(this, v44, v43, 0, 0);
            ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(this, v44, v43, 1, 1u);
          }
          ++v42;
          v40 = (char *)__p;
          v41 += 16;
        }
        while (v42 < (v70 - (_BYTE *)__p) >> 4);
      }
      if (v40)
      {
        v70 = v40;
        operator delete(v40);
      }
      v45 = (ZinCpBasedAllocator *)*((_QWORD *)v37 + 1);
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = *(ZinCpBasedAllocator **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (ZinCpBasedAllocator *)*((_QWORD *)v37 + 2);
          v29 = *(_QWORD *)v46 == (_QWORD)v37;
          v37 = v46;
        }
        while (!v29);
      }
      v37 = v46;
    }
    while (v46 != (ZinCpBasedAllocator *)((char *)this + 32));
  }
  v47 = (ZinIrOpLayer ***)*((_QWORD *)this + 40);
  v48 = *v47;
  v49 = v47[1];
  if (*v47 != v49)
  {
    do
    {
      v50 = *v48;
      if (ZinIrOpLayer::IsANELayer(*v48))
      {
        v67 = (char *)v50;
        v51 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 14, &v67);
        if (v51)
        {
          v52 = v51[3];
          v53 = *(_QWORD **)(v52 + 32);
          if (v53[5])
            v54 = v53[9] == 0;
          else
            v54 = 1;
          if (!v54 || ((v55 = v53[7], v56 = v53[11], v55) ? (v57 = v56 == 0) : (v57 = 1), !v57))
LABEL_98:
            ZinAssertImpl("Either chain or l2-dep cost should be set, not both.");
          v58 = 0;
          while (1)
          {
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v67 + 512))(&__p);
            v59 = __p;
            v60 = v70;
            if (__p)
            {
              v70 = __p;
              operator delete(__p);
            }
            if (v58 >= (v60 - v59) >> 3)
              break;
            LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v52, (char **)&__p);
            v61 = (_QWORD *)*((_QWORD *)__p + v58);
            v70 = __p;
            operator delete(__p);
            if (v61[5])
              v62 = v61[9] == 0;
            else
              v62 = 1;
            if (v62)
            {
              ++v58;
              if (!v61[7] || v61[11] == 0)
                continue;
            }
            goto LABEL_98;
          }
        }
      }
      ++v48;
    }
    while (v48 != v49);
  }
  ZinCpBasedAllocator::NormalizeCycles(this);
  return 0;
}

void sub_207034C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCpBasedAllocator::CreateRegions(ZinCpBasedAllocator *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  ZinCpBasedAllocator *v10;
  _QWORD **v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  ZinIrOpLayer *v19;
  ZinIrOpLayer *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t MaxCycle;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  ZinIrOpLayer *v29;
  uint64_t v30;
  uint64_t v31;
  const ZinIrTensor *v32;
  _QWORD *RootTensor;
  const ZinIrHalParameters *v34;
  int IsChainable;
  uint64_t v36;
  char **v37;
  unint64_t *v38;
  char v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  int v43;
  const ZinIrHalParameters *v44;
  int v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  ZinANELayer **v53;
  char *v54;
  char *v55;
  ZinANELayer *v56;
  char v57;
  char v58;
  char v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD **v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  _QWORD *v68;
  _QWORD *v69;
  ZinTensorFamilyUtil *v70;
  _QWORD *Hal;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  const ZinIrTensor *v75;
  uint64_t **v76;
  ZinANELayer *v77;
  ZinANELayer *v78;
  ZinIrOpLayer *v79;
  _QWORD *v80;
  ZinIrOpLayer **v81;
  ZinIrOpLayer **v82;
  ZinIrOpLayer *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  ZinIrOpLayer *v98;
  ZinIrOpLayer *v99;
  ZinCpBasedAllocator *v100;
  char v101;
  ZinTensorFamilyUtil *v102;
  ZinTensorFamilyUtil *v103;
  unint64_t v104;
  _QWORD *v105;
  BOOL v106[8];
  ZinANELayer *v107;
  ZinANELayer *v108;
  ZinIrTensor *v109;
  void *__p;
  void *__dst;
  unint64_t v112;
  _QWORD **v113;
  _QWORD *v114[2];
  _OWORD v115[2];
  int v116;
  uint64_t *v117;
  _QWORD *v118;
  unint64_t v119;
  _QWORD **v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t *v126;
  _QWORD *v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  BOOL v132;
  _QWORD *v133[2];

  v1 = *((_QWORD *)this + 41);
  v2 = *((_QWORD *)this + 42);
  v3 = *(_BYTE *)(v2 + 1114) == 0;
  v4 = 3000;
  if (!*(_BYTE *)(v2 + 1114))
    v4 = 10500;
  v91 = v4;
  v5 = 70;
  v6 = *(_DWORD *)(v2 + 8);
  if (v3)
    v5 = 150;
  v94 = v5;
  v7 = 20;
  if (v3)
    v7 = 100;
  v90 = v7;
  v129 = 0;
  v130 = 0;
  v8 = v6 < 16;
  v9 = 12;
  v131 = 0;
  if (v8)
    v9 = 10;
  v96 = v9;
  v127 = 0;
  v128 = 0;
  v125 = 0;
  v126 = (uint64_t *)&v127;
  v123 = (uint64_t *)&v124;
  v124 = 0;
  v121 = 0;
  v122 = 0;
  v119 = 0;
  v120 = &v121;
  v117 = (uint64_t *)&v118;
  v118 = 0;
  memset(v115, 0, sizeof(v115));
  v116 = 1065353216;
  if (!*(_QWORD *)(v1 + 344))
    ZinAssertImpl("Must run scheduler first");
  v10 = this;
  std::map<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>,ScheduleComparator,std::allocator<std::pair<ZinIrBasicBlock * const,std::vector<ZinIrOpLayer *>>>>::map[abi:ne180100]((uint64_t *)&v113, v1 + 328);
  v11 = v113;
  v100 = v10;
  if (v113 != v114)
  {
    v101 = 0;
    v12 = 0;
    v13 = 0;
    v95 = 0;
    v103 = (ZinCpBasedAllocator *)((char *)v10 + 1048);
    v92 = (_QWORD *)((char *)v10 + 72);
    v93 = (_QWORD *)((char *)v10 + 112);
    do
    {
      v104 = v13;
      v14 = (char *)v11[5];
      v15 = (char *)v11[6] - v14;
      if (!v15)
        goto LABEL_103;
      v16 = 0;
      v17 = v15 >> 3;
      do
      {
        v18 = v16 + 1;
        if (v16 + 1 >= v17)
          v19 = 0;
        else
          v19 = *(ZinIrOpLayer **)&v14[8 * v18];
        v20 = *(ZinIrOpLayer **)&v14[8 * v16];
        if (!ZinIrOpLayer::IsANELayer(v20))
          goto LABEL_94;
        v107 = v20;
        v22 = *(_QWORD *)v10;
        v21 = *((_QWORD *)v10 + 1);
        __p = &v107;
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v115, &v107, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3] = 0xAAAAAAAAAAAAAAABLL * ((v21 - v22) >> 3);
        v23 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v93, &v107);
        v106[0] = 0;
        v132 = 0;
        ZinCpBasedAllocator::GetEarlyAllocationDecision(v10, v107, v106, &v132);
        MaxCycle = LayerCycleAndFootprintEstimator::GetMaxCycle((LayerCycleAndFootprintEstimator *)v23[3], v106[0], v132);
        if (*(_BYTE *)((*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0, 0)+ 144))
        {
          v25 = (*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0, 0);
          if (!*(_BYTE *)(v25 + 144))
            std::__throw_bad_optional_access[abi:ne180100]();
          v26 = *(unsigned __int16 *)(v25 + 128);
        }
        else
        {
          v26 = -1;
        }
        v98 = v19;
        v27 = v11[5];
        v28 = v16 + 1;
        if (v18 >= v11[6] - v27)
          goto LABEL_29;
        while (1)
        {
          v29 = (ZinIrOpLayer *)v27[v28];
          if (ZinIrOpLayer::IsEngineLayer(v29))
            break;
          ++v28;
          v27 = v11[5];
          if (v28 >= v11[6] - v27)
            goto LABEL_29;
        }
        if (*(_BYTE *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0, 0)+ 144))
        {
          v30 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0, 0);
          if (!*(_BYTE *)(v30 + 144))
            std::__throw_bad_optional_access[abi:ne180100]();
          v31 = *(unsigned __int16 *)(v30 + 128);
        }
        else
        {
LABEL_29:
          v31 = -1;
        }
        v133[0] = 0;
        v32 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0, 0);
        RootTensor = (_QWORD *)ZinTensorFamilyUtil::GetRootTensor(v103, v32);
        v133[0] = RootTensor;
        if (*((_BYTE *)v10 + 969)
          || (IsChainable = ZinIrRegAllocUtil::IsChainable((ZinIrRegAllocUtil *)RootTensor, *((const ZinIrTensor **)v10 + 42), v34), RootTensor = v133[0], !IsChainable))
        {
          v95 = v16;
          goto LABEL_45;
        }
        v36 = v133[0][12];
        v37 = **(char ****)(v36 + 112);
        __p = 0;
        __dst = 0;
        v112 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(v36 + 88), *(_QWORD *)(v36 + 96), (uint64_t)(*(_QWORD *)(v36 + 96) - *(_QWORD *)(v36 + 88)) >> 3);
        std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&__p, (uint64_t)__dst, v37[11], v37[12], (v37[12] - v37[11]) >> 3);
        v38 = (unint64_t *)__p;
        if (__p == __dst)
          goto LABEL_97;
        v39 = 0;
        do
        {
          while (!v118)
          {
LABEL_40:
            if (++v38 == __dst)
            {
              if ((v39 & 1) != 0)
                goto LABEL_98;
LABEL_97:
              std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v117, v118);
              v118 = 0;
              v119 = 0;
              v117 = (uint64_t *)&v118;
              goto LABEL_98;
            }
          }
          v40 = *v38;
          v41 = v118;
          while (1)
          {
            v42 = v41[4];
            if (v40 >= v42)
              break;
LABEL_39:
            v41 = (_QWORD *)*v41;
            if (!v41)
              goto LABEL_40;
          }
          if (v42 < v40)
          {
            ++v41;
            goto LABEL_39;
          }
          ++v38;
          v39 = 1;
        }
        while (v38 != __dst);
LABEL_98:
        v109 = (ZinIrTensor *)v36;
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v117, (unint64_t *)&v109, (uint64_t *)&v109);
        v109 = (ZinIrTensor *)v37;
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v117, (unint64_t *)&v109, (uint64_t *)&v109);
        v10 = v100;
        if (v119 >= 4)
          std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>((uint64_t *)&v120, v117, &v118);
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v123, (unint64_t *)v133, (uint64_t *)v133);
        if (__p)
        {
          __dst = __p;
          operator delete(__p);
        }
        RootTensor = v133[0];
LABEL_45:
        v43 = *((unsigned __int8 *)RootTensor + 144);
        if (!std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v92, v133))goto LABEL_49;
        v45 = ZinIrRegAllocUtil::IsPipelinable((ZinIrRegAllocUtil *)v133[0], *((const ZinIrTensor **)v10 + 42), v103) ^ 1;
        if (v43)
          LOBYTE(v45) = 0;
        if ((v45 & 1) == 0)
        {
LABEL_49:
          std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v126, (unint64_t *)v133, (uint64_t *)v133);
          goto LABEL_50;
        }
        if ((v101 & 1) != 0)
        {
LABEL_50:
          v46 = v130;
          if (v130 >= v131)
          {
            v48 = (v130 - v129) >> 3;
            if ((unint64_t)(v48 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v49 = (v131 - v129) >> 2;
            if (v49 <= v48 + 1)
              v49 = v48 + 1;
            if ((unint64_t)(v131 - v129) >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            if (v50)
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v131, v50);
            else
              v51 = 0;
            v53 = (ZinANELayer **)&v51[8 * v48];
            *v53 = v107;
            v47 = (char *)(v53 + 1);
            v55 = v129;
            v54 = v130;
            if (v130 != v129)
            {
              do
              {
                v56 = (ZinANELayer *)*((_QWORD *)v54 - 1);
                v54 -= 8;
                *--v53 = v56;
              }
              while (v54 != v55);
              v54 = v129;
            }
            v129 = (char *)v53;
            v130 = v47;
            v131 = &v51[8 * v50];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *(_QWORD *)v130 = v107;
            v47 = v46 + 8;
          }
          v130 = v47;
          v52 = v104 + 1;
          v101 = 1;
          v10 = v100;
        }
        else
        {
          v101 = 0;
          v52 = v104;
        }
        v12 += MaxCycle;
        v57 = 1;
        v104 = v52;
        if (v52 <= v94 && v12 <= v91 && v128 < v90 && v125 < v96 && v122 <= 0xB)
          v57 = ZinCpBasedAllocator::NeedSplitForInplaceAllocation(v10, v98);
        if (v26 == v31)
          v58 = 0;
        else
          v58 = v57;
        if (!v43)
          v58 = v57;
        if ((v58 & 1) != 0
          && !ZinIrRegAllocUtil::IsPipelinable((ZinIrRegAllocUtil *)v133[0], *((const ZinIrTensor **)v10 + 42), v103)|| v26 != v31|| v125 > v96&& (*((_BYTE *)v10 + 969)|| ((v59 = ZinIrRegAllocUtil::IsChainable((ZinIrRegAllocUtil *)v133[0], *((const ZinIrTensor **)v10 + 42), v44), (unint64_t)(v16 - v95) < 3)? (v60 = v59): (v60 = 0), (v60 & 1) == 0)))
        {
          if (v130 != v129)
          {
            v61 = *((_QWORD *)v10 + 1);
            if (v61 >= *((_QWORD *)v10 + 2))
            {
              v62 = std::vector<std::vector<ZinANELayer const*>>::__push_back_slow_path<std::vector<ZinANELayer const*> const&>((uint64_t *)v10, (uint64_t)&v129);
            }
            else
            {
              std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)v10, (uint64_t)&v129);
              v62 = v61 + 24;
            }
            *((_QWORD *)v10 + 1) = v62;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v126, v127);
            v127 = 0;
            v128 = 0;
            v126 = (uint64_t *)&v127;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v123, v124);
            v124 = 0;
            v125 = 0;
            v123 = (uint64_t *)&v124;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v117, v118);
            v118 = 0;
            v119 = 0;
            v117 = (uint64_t *)&v118;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v120, v121);
            v104 = 0;
            v12 = 0;
            v101 = 0;
            v121 = 0;
            v122 = 0;
            v120 = &v121;
            v130 = v129;
            v95 = v16;
          }
        }
LABEL_94:
        v14 = (char *)v11[5];
        v17 = ((char *)v11[6] - v14) >> 3;
        ++v16;
      }
      while (v18 < v17);
LABEL_103:
      v63 = v11[1];
      v13 = v104;
      if (v63)
      {
        do
        {
          v64 = (_QWORD **)v63;
          v63 = (_QWORD *)*v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          v64 = (_QWORD **)v11[2];
          v3 = *v64 == v11;
          v11 = v64;
        }
        while (!v3);
      }
      v11 = v64;
    }
    while (v64 != v114);
  }
  if (v130 != v129)
  {
    v65 = *((_QWORD *)v10 + 1);
    if (v65 >= *((_QWORD *)v10 + 2))
    {
      v66 = std::vector<std::vector<ZinANELayer const*>>::__push_back_slow_path<std::vector<ZinANELayer const*> const&>((uint64_t *)v10, (uint64_t)&v129);
    }
    else
    {
      std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)v10, (uint64_t)&v129);
      v66 = v65 + 24;
    }
    *((_QWORD *)v10 + 1) = v66;
  }
  v67 = (uint64_t **)((char *)v10 + 48);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v10 + 48, *((_QWORD **)v10 + 7));
  *((_QWORD *)v10 + 6) = (char *)v10 + 56;
  *((_QWORD *)v10 + 7) = 0;
  *((_QWORD *)v10 + 8) = 0;
  v68 = (_QWORD *)*((_QWORD *)v10 + 41);
  v69 = (_QWORD *)*v68;
  v97 = v68 + 1;
  if ((_QWORD *)*v68 != v68 + 1)
  {
    v70 = (ZinCpBasedAllocator *)((char *)v10 + 1048);
    v99 = (ZinCpBasedAllocator *)((char *)v10 + 72);
    v102 = (ZinCpBasedAllocator *)((char *)v10 + 1048);
    do
    {
      Hal = (_QWORD *)ZinIrTarget::GetHal((ZinIrTarget *)v69[4]);
      v73 = Hal + 1;
      v72 = (_QWORD *)*Hal;
      v105 = Hal + 1;
      if ((_QWORD *)*Hal != Hal + 1)
      {
        do
        {
          v74 = v72[4];
          v109 = 0;
          v75 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0, 0);
          v109 = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v70, v75);
          if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v67, (uint64_t *)&v109))
          {
            v76 = v67;
            __dst = 0;
            v112 = 0;
            __p = &__dst;
            ZinIrTensor::GetTensorFamily(v109, (uint64_t)&v107);
            v78 = v107;
            v77 = v108;
            if (v107 != v108)
            {
              do
              {
                v79 = *(ZinIrOpLayer **)(*(_QWORD *)v78 + 96);
                if (ZinIrOpLayer::IsANELayer(v79))
                {
                  *(_QWORD *)v106 = v79;
                  v133[0] = v106;
                  v80 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v115, v106, (uint64_t)&std::piecewise_construct, v133);
                  std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)&__p, v80 + 3, v80 + 3);
                }
                v82 = (ZinIrOpLayer **)*((_QWORD *)v79 + 14);
                v81 = (ZinIrOpLayer **)*((_QWORD *)v79 + 15);
                while (v82 != v81)
                {
                  v83 = *v82;
                  if (ZinIrOpLayer::IsANELayer(*v82))
                  {
                    *(_QWORD *)v106 = v83;
                    v133[0] = v106;
                    v84 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v115, v106, (uint64_t)&std::piecewise_construct, v133);
                    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)&__p, v84 + 3, v84 + 3);
                  }
                  ++v82;
                }
                v78 = (ZinANELayer *)((char *)v78 + 8);
              }
              while (v78 != v77);
              v78 = v107;
            }
            v67 = v76;
            if (v78)
            {
              v108 = v78;
              operator delete(v78);
            }
            v10 = v100;
            v70 = v102;
            v73 = v105;
            if (v112 > 1)
            {
              if (!std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v99, &v109))
              {
                v133[0] = v109;
                v107 = (ZinANELayer *)v133;
                *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v99, v133, (uint64_t)&std::piecewise_construct, (_QWORD **)&v107)+ 6) = 1;
              }
              std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v67, (uint64_t *)&v109, (uint64_t *)&v109);
            }
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&__p, __dst);
          }
          v85 = (_QWORD *)v72[1];
          if (v85)
          {
            do
            {
              v86 = v85;
              v85 = (_QWORD *)*v85;
            }
            while (v85);
          }
          else
          {
            do
            {
              v86 = (_QWORD *)v72[2];
              v3 = *v86 == (_QWORD)v72;
              v72 = v86;
            }
            while (!v3);
          }
          v72 = v86;
        }
        while (v86 != v73);
      }
      v87 = (_QWORD *)v69[1];
      if (v87)
      {
        do
        {
          v88 = v87;
          v87 = (_QWORD *)*v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          v88 = (_QWORD *)v69[2];
          v3 = *v88 == (_QWORD)v69;
          v69 = v88;
        }
        while (!v3);
      }
      v69 = v88;
    }
    while (v88 != v97);
  }
  ZinCpBasedAllocatorUtil::PrintRegionInformation((_QWORD *)v10 + 47, (uint64_t *)v10, v67);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v113, v114[0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v115);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v117, v118);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v120, v121);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v123, v124);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v126, v127);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  return 0;
}

void sub_20703579C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,char a36,_QWORD *a37,uint64_t a38,char a39)
{
  uint64_t v39;
  void *v41;

  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a36, a37);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a39);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v39 - 224, *(_QWORD **)(v39 - 216));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v39 - 200, *(_QWORD **)(v39 - 192));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v39 - 176, *(_QWORD **)(v39 - 168));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v39 - 152, *(_QWORD **)(v39 - 144));
  v41 = *(void **)(v39 - 128);
  if (v41)
  {
    *(_QWORD *)(v39 - 120) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

const CpAllocGraph *ZinCpBasedAllocator::Execute(void)::$_0::operator()@<X0>(unint64_t __val@<X1>, const CpAllocGraph *result@<X0>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  int v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  void *__p[2];
  std::string::size_type v42;
  _OWORD v43[2];
  int v44;
  uint64_t v45;
  _OWORD v46[2];
  int v47;
  const CpAllocGraph *v48;

  v5 = a5;
  v6 = *(_QWORD *)result;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  *(_DWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 44) = 1;
  if (__val < a3)
  {
    v7 = a3;
    v8 = __val;
    v36 = 0;
    v9 = v6 + 48;
    v10 = (_QWORD *)(v6 + 112);
    v11 = v6 + 72;
    if (a4)
      v11 = v5;
    v34 = v11;
    v12 = 24 * __val;
    v35 = v5;
    while (1)
    {
      v13 = (uint64_t **)(*(_QWORD *)v6 + v12);
      ZinORToolsConversionUtils::CreateORToolsGraph(v8, v13, v9, v10, (_QWORD *)(v6 + 280), *(const ZinIrTensor **)(v6 + 336), (uint64_t *)&v48);
      memset(v46, 0, sizeof(v46));
      v47 = 1065353216;
      ZinORToolsConversionUtils::ConvertEarlyAllocationDecision(v13, (_QWORD *)(v6 + 72), (uint64_t)v46);
      ZinCpBasedAllocator::CreateCpAllocGraphDotFile((ZinCpBasedAllocator *)v6, v48);
      v45 = 0;
      if (ZinCpBasedAllocator::CalculatesL2BudgetPerRegion(v6, (uint64_t *)v13, *(_QWORD *)(*(_QWORD *)(v6 + 336) + 408), &v45))
      {
        memset(v43, 0, sizeof(v43));
        v44 = 1065353216;
        if (*(_QWORD *)(v6 + 504))
        {
          v14 = v7;
          v15 = v10;
          v16 = v9;
          v17 = *(_QWORD *)(***(_QWORD ***)(v6 + 320) + 16);
          if (*(char *)(v6 + 967) >= 0)
            v18 = *(unsigned __int8 *)(v6 + 967);
          else
            v18 = *(_QWORD *)(v6 + 952);
          std::string::basic_string[abi:ne180100]((uint64_t)&v38, v18 + 11);
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &v38;
          else
            v19 = (std::string *)v38.__r_.__value_.__r.__words[0];
          if (v18)
          {
            if (*(char *)(v6 + 967) >= 0)
              v20 = (const void *)(v6 + 944);
            else
              v20 = *(const void **)(v6 + 944);
            memmove(v19, v20, v18);
          }
          strcpy((char *)v19 + v18, ".CpProblem.");
          if (*((char *)v48 + 255) < 0)
            std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)v48 + 29), *((_QWORD *)v48 + 30));
          else
            v37 = *(std::string *)((char *)v48 + 232);
          v9 = v16;
          if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &v37;
          else
            v22 = (std::string *)v37.__r_.__value_.__r.__words[0];
          if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
          else
            size = v37.__r_.__value_.__l.__size_;
          v24 = std::string::append(&v38, (const std::string::value_type *)v22, size);
          v10 = v15;
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v39.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          v26 = *(char *)(v17 + 47);
          if (v26 >= 0)
            v27 = (const std::string::value_type *)(v17 + 24);
          else
            v27 = *(const std::string::value_type **)(v17 + 24);
          if (v26 >= 0)
            v28 = *(unsigned __int8 *)(v17 + 47);
          else
            v28 = *(_QWORD *)(v17 + 32);
          v29 = std::string::append(&v39, v27, v28);
          v7 = v14;
          v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          v31 = std::string::append(&v40, ".txt", 4uLL);
          v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v42 = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          v5 = v35;
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
        }
        v33 = ZinCpBasedAllocatorUtil::AllocatorWrapper((uint64_t)v48, (uint64_t)v46, v45, (uint64_t)__p, (uint64_t)v43);
        *(_BYTE *)(v5 + 44) = v33;
        if ((v33 & 1) != 0)
        {
          ZinORToolsConversionUtils::ConvertMappingDecision(v13, v43, v34);
          v21 = 0;
        }
        else
        {
          *(_DWORD *)(v5 + 40) = 0;
          v21 = 1;
          v36 = 1;
        }
        if (SHIBYTE(v42) < 0)
          operator delete(__p[0]);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v43);
      }
      else
      {
        *(_BYTE *)(v5 + 44) = 0;
        *(_DWORD *)(v5 + 40) = 0;
        v21 = 1;
        v36 = 1;
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v46);
      result = v48;
      v48 = 0;
      if (result)
      {
        CpAllocGraph::~CpAllocGraph(result);
        result = (const CpAllocGraph *)MEMORY[0x20BD002F8]();
      }
      if (v21)
        break;
      ++v8;
      v12 += 24;
      if (v7 == v8)
        return result;
    }
    if ((v36 & 1) == 0)
      return (const CpAllocGraph *)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v5);
  }
  return result;
}

void sub_207035C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48)
{
  uint64_t v48;

  if (a26 < 0)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a48);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v48 - 144);
  std::unique_ptr<CpAllocGraph>::reset[abi:ne180100]((CpAllocGraph **)(v48 - 96), 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

void ZinCpBasedAllocator::UndoParallelPairSchedules(ZinCpBasedAllocator *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  ZinIrScheduleUtil *Hal;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  ZinIrOpLayer *v10;
  uint64_t v11;
  int IntermediateLayers;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  void *__p;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28[3];

  v1 = (_QWORD *)*((_QWORD *)this + 41);
  v4 = (_QWORD *)*v1;
  v2 = v1 + 1;
  v3 = v4;
  if (v4 != v2)
  {
    do
    {
      Hal = (ZinIrScheduleUtil *)ZinIrTarget::GetHal((ZinIrTarget *)v3[4]);
      ZinIrScheduleUtil::GetEngineScheduledLayerGroups(Hal, v28);
      v6 = v28[0];
      v7 = v28[1];
      while (v6 != v7)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v25, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
        v8 = v25;
        if (v26 - (_BYTE *)v25 == 16)
        {
          v9 = *(_QWORD *)v25;
          v10 = (ZinIrOpLayer *)*((_QWORD *)v25 + 1);
          v11 = *(_QWORD *)(*(_QWORD *)v25 + 48);
          __p = 0;
          v23 = 0;
          v24 = 0;
          IntermediateLayers = ZinTensorFamilyUtil::GetIntermediateLayers(v9, v10, 0, 0, &__p);
          v13 = v11 + 1;
          v14 = (uint64_t *)__p;
          if (IntermediateLayers)
          {
            v15 = v11 + 1;
          }
          else
          {
            v16 = v23;
            v17 = (uint64_t *)__p;
            v15 = v11 + 1;
            if (__p != v23)
            {
              do
              {
                v18 = *v17++;
                v15 = v13 + 1;
                *(_QWORD *)(v18 + 48) = v13++;
              }
              while (v17 != v16);
            }
          }
          *((_QWORD *)v10 + 6) = v15;
          *((_QWORD *)v10 + 7) = 0;
          if (v14)
          {
            v23 = v14;
            operator delete(v14);
          }
          v8 = v25;
        }
        if (v8)
        {
          v26 = v8;
          operator delete(v8);
        }
        v6 += 24;
      }
      v25 = v28;
      std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      v19 = (_QWORD *)v3[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v3[2];
          v21 = *v20 == (_QWORD)v3;
          v3 = v20;
        }
        while (!v21);
      }
      v3 = v20;
    }
    while (v20 != v2);
  }
}

void sub_207035EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char *a13, char *a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  if (a13)
  {
    a14 = a13;
    operator delete(a13);
  }
  a13 = &a16;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void **std::vector<std::future<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (unint64_t *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
        {
          v7 = v5 + 1;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
            (*(void (**)(unint64_t *))(*v5 + 16))(v5);
        }
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t ZinCpBasedAllocator::PropagateDimOrderForL2Inplace(ZinCpBasedAllocator *this)
{
  char *v1;
  char *v2;
  _QWORD *v3;
  ZinTensorFamilyUtil *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  const ZinIrTensor *v8;
  _QWORD *LastConsumer;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  const ZinIrTensor *v14;
  ZinIrTensor *RootTensor;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  BOOL v23;
  void *__p;
  unint64_t v26;
  ZinIrTensor *v27;

  v1 = (char *)*((_QWORD *)this + 3);
  v2 = (char *)this + 32;
  if (v1 != (char *)this + 32)
  {
    v3 = (_QWORD *)((char *)this + 72);
    v4 = (ZinCpBasedAllocator *)((char *)this + 1048);
    v5 = (uint64_t **)((char *)this + 1024);
    v6 = (_QWORD *)((char *)this + 1032);
    do
    {
      v27 = (ZinIrTensor *)*((_QWORD *)v1 + 4);
      __p = &v27;
      v7 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v3, &v27, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
      if (CpAllocUtils::IsL2Inplace(*((_DWORD *)v7 + 6)))
      {
        LastConsumer = (_QWORD *)ZinIrRegAllocUtil::GetLastConsumer(v27, v8);
        v10 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*LastConsumer + 32))(LastConsumer, 0, 0);
        v11 = LastConsumer[11];
        if (LastConsumer[12] == v11)
          goto LABEL_33;
        v12 = (uint64_t *)v10;
        v13 = 0;
        while (1)
        {
          v14 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v11 + 8 * v13)
                                                                                       + 32))(*(_QWORD *)(v11 + 8 * v13), 0, 0);
          RootTensor = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v4, v14);
          if (RootTensor == v27)
            break;
          ++v13;
          v11 = LastConsumer[11];
          if (v13 >= (LastConsumer[12] - v11) >> 3)
            goto LABEL_33;
        }
        v16 = (_QWORD *)*v6;
        if (*v6)
        {
          v17 = v6;
          do
          {
            v18 = v16[4];
            v19 = v18 >= (unint64_t)v12;
            if (v18 >= (unint64_t)v12)
              v20 = v16;
            else
              v20 = v16 + 1;
            if (v19)
              v17 = v16;
            v16 = (_QWORD *)*v20;
          }
          while (*v20);
          if (v17 != v6 && (unint64_t)v12 >= v17[4])
LABEL_33:
            ZinAssertImpl("internal error: PropagateDimOrderForL2Inplace");
        }
        if (ZinIrTensor::HasFlexDimensionOrderHint(RootTensor)
          && ZinTensorFamilyUtil::HasReshapeInTensorFamily(v4, v27))
        {
          DimensionOrderHint::DimensionOrderHint(&__p, 1);
          if (ZinIrTensor::SetDimensionOrderHint(v27, (const DimensionOrderHint *)&__p, 1))
            ZinAssertImpl("fail to set dim order in PropagateDimOrderForL2Inplace.");
          if (__p)
          {
            v26 = (unint64_t)__p;
            operator delete(__p);
          }
        }
        __p = v12;
        v26 = v13;
        std::__tree<std::__value_type<ZinIrTensor *,unsigned long>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,unsigned long>,std::less<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,unsigned long>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor *,unsigned long>>(v5, (unint64_t *)&__p, (uint64_t *)&__p);
        if ((ZinIrRegAllocUtil::AdjustDimOrderForInplace(v12[12], (uint64_t)v5, v3, v4) & 1) == 0)
          ZinAssertImpl("failed to post-process in PropagateDimOrderForL2Inplace.");
      }
      v21 = (char *)*((_QWORD *)v1 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (char *)*((_QWORD *)v1 + 2);
          v23 = *(_QWORD *)v22 == (_QWORD)v1;
          v1 = v22;
        }
        while (!v23);
      }
      v1 = v22;
    }
    while (v22 != v2);
  }
  return 0;
}

void sub_2070361A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCpBasedAllocator::DemoteL2CircularDepToL2Circular(ZinCpBasedAllocator *this)
{
  ZinCpBasedAllocator *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  ZinTensorFamilyUtil *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _BYTE *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  const ZinIrTensor *v20;
  _QWORD *v21;
  _QWORD *v22;
  const ZinIrTensor *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v31;
  _QWORD *v32;
  ZinCpBasedAllocator *v33;
  char *v34;
  char v35;
  unint64_t v36[2];
  void *__p;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  char *v41;
  char *v42;
  uint64_t v43;
  ZinIrTensor *v44;
  _QWORD **v45;
  _QWORD *v46[2];
  char v47;
  _OWORD v48[2];
  int v49;
  _BYTE buf[24];
  int v51;
  uint64_t v52;

  v1 = this;
  v52 = *MEMORY[0x24BDAC8D0];
  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  v45 = v46;
  memset(v48, 0, sizeof(v48));
  v49 = 1065353216;
  ZinCpBasedAllocator::SetMemoryPressure(this, (ZinIrMemoryPressureAnalyzer *)&v45);
  v2 = (_QWORD *)*((_QWORD *)v1 + 3);
  v3 = (_QWORD *)((char *)v1 + 32);
  if (v2 != (_QWORD *)((char *)v1 + 32))
  {
    v4 = (_QWORD *)((char *)v1 + 72);
    v5 = (ZinCpBasedAllocator *)((char *)v1 + 1048);
    v33 = v1;
    v31 = (char *)v1 + 32;
    do
    {
      v44 = (ZinIrTensor *)v2[4];
      *(_QWORD *)buf = &v44;
      if (*((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v4, &v44, (uint64_t)&std::piecewise_construct, (_QWORD **)buf)+ 6) == 7)
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v32 = v2;
        if ((ZinIrRegAllocUtil::IsL2Dependentable(v44, *((const ZinIrTensor **)v1 + 42), &v41, v5) & 1) == 0)
          ZinAssertImpl("Unsuccesfull CP result");
        v6 = v41;
        v34 = v42;
        if (v41 != v42)
        {
          v35 = 1;
          do
          {
            v7 = *(_QWORD *)v6;
            v8 = (_QWORD *)*((_QWORD *)v6 + 1);
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[16] = 0;
            LOBYTE(v51) = 0;
            *(_QWORD *)buf = &buf[8];
            v9 = *(_QWORD *)(v7 + 48);
            if (v9 <= v8[7] + v8[6])
            {
              do
              {
                v38 = 0;
                v39 = 0;
                v40 = 0;
                v36[1] = v9;
                __p = &v38;
                v36[0] = v9;
                ZinIrMemoryPressureAnalyzer::GetPeakPressure((uint64_t)&v45, v36, (uint64_t)&__p);
                std::set<ZinIrMemoryPressureAnalyzer::Allocation const*,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<ZinIrMemoryPressureAnalyzer::Allocation const*>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrMemoryPressureAnalyzer::Allocation const*,std::__tree_node<ZinIrMemoryPressureAnalyzer::Allocation const*,void *> *,long>>((uint64_t *)buf, __p, &v38);
                std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&__p, v38);
                ++v9;
              }
              while (v9 <= v8[7] + v8[6]);
              v10 = *(_QWORD **)buf;
              if (*(_BYTE **)buf != &buf[8])
              {
                v11 = 0;
                do
                {
                  v12 = (_QWORD *)v10[4];
                  if ((*(unsigned int (**)(_QWORD *))(*v12 + 24))(v12) == 1)
                    goto LABEL_12;
                  if (!(*(unsigned int (**)(_QWORD *))(*v12 + 24))(v12))
                  {
                    v13 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v4, v12 + 4);
                    if (!v13)
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    if (CpAllocUtils::IsResident(*((_DWORD *)v13 + 6)))
LABEL_12:
                      v11 += v12[1];
                  }
                  v14 = (_QWORD *)v10[1];
                  if (v14)
                  {
                    do
                    {
                      v15 = v14;
                      v14 = (_QWORD *)*v14;
                    }
                    while (v14);
                  }
                  else
                  {
                    do
                    {
                      v15 = (_BYTE *)v10[2];
                      v16 = *(_QWORD *)v15 == (_QWORD)v10;
                      v10 = v15;
                    }
                    while (!v16);
                  }
                  v10 = v15;
                }
                while (v15 != &buf[8]);
                if (v11 > *(_QWORD *)(*((_QWORD *)v33 + 42) + 408))
                {
                  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, *(_QWORD **)&buf[8]);
                  v1 = v33;
                  goto LABEL_44;
                }
              }
            }
            __p = 0;
            v38 = 0;
            v39 = 0;
            std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(v7 + 88), *(_QWORD *)(v7 + 96), (uint64_t)(*(_QWORD *)(v7 + 96) - *(_QWORD *)(v7 + 88)) >> 3);
            v17 = (uint64_t *)__p;
            v18 = v38;
            while (v17 != v18)
            {
              v19 = *v17;
              v36[0] = 0;
              v20 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0, 0);
              v36[0] = ZinTensorFamilyUtil::GetRootTensor(v5, v20);
              v21 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v4, v36);
              v22 = v21;
              if (v21
                && ((CpAllocUtils::IsL2Dependent(*((_DWORD *)v21 + 6)) & 1) != 0
                 || CpAllocUtils::IsChain(*((_DWORD *)v22 + 6))))
              {
                v35 = 0;
                break;
              }
              ++v17;
            }
            v23 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0);
            v36[0] = ZinTensorFamilyUtil::GetRootTensor(v5, v23);
            v24 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v4, v36);
            v25 = v24;
            if (v24
              && ((CpAllocUtils::IsL2Dependent(*((_DWORD *)v24 + 6)) & 1) != 0
               || CpAllocUtils::IsChain(*((_DWORD *)v25 + 6))))
            {
              v35 = 0;
              v26 = 6;
            }
            else if ((v35 & 1) != 0)
            {
              v26 = 0;
            }
            else
            {
              v26 = 6;
            }
            if (__p)
            {
              v38 = (uint64_t *)__p;
              operator delete(__p);
            }
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, *(_QWORD **)&buf[8]);
            if (v26)
              break;
            v6 += 16;
          }
          while (v6 != v34);
          v1 = v33;
          if ((v35 & 1) != 0)
            goto LABEL_49;
LABEL_44:
          *(_QWORD *)buf = &v44;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v4, &v44, (uint64_t)&std::piecewise_construct, (_QWORD **)buf)+ 6) = 6;
          if ((*(_BYTE *)(*((_QWORD *)v1 + 43) + 96) & 0x10) != 0
            && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            v27 = (_QWORD *)((char *)v44 + 24);
            if (*((char *)v44 + 47) < 0)
              v27 = (_QWORD *)*v27;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v27;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinIrSchedul"
                                  "e/src/ZinCpBasedAllocator.cpp";
            *(_WORD *)&buf[22] = 1024;
            v51 = 3004;
            _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "INFO: Tensor %s is demoted from kL2DependentAndCircular to kL2Circular (file %s, line %d)\n", buf, 0x1Cu);
          }
LABEL_49:
          v6 = v41;
        }
        if (v6)
        {
          v42 = v6;
          operator delete(v6);
        }
        v3 = v31;
        v2 = v32;
      }
      v28 = (_QWORD *)v2[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v2[2];
          v16 = *v29 == (_QWORD)v2;
          v2 = v29;
        }
        while (!v16);
      }
      v2 = v29;
    }
    while (v29 != v3);
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v48);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)&v45, v46[0]);
  return 0;
}

void sub_2070366D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29)
{
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table(a12);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

void ZinCpBasedAllocator::UpdateScheduleForPipelineRunPair(ZinCpBasedAllocator *this)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int ShouldUseL2Dependent;
  char *v9;
  unint64_t v10;
  uint64_t *v11;
  ZinIrOpLayer *v12;
  uint64_t v13;
  int IntermediateLayers;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  BOOL v21;
  void *__p;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  ZinIrTensor *v28;

  v2 = (char *)*((_QWORD *)this + 3);
  v3 = (char *)this + 32;
  if (v2 != (char *)this + 32)
  {
    do
    {
      v28 = (ZinIrTensor *)*((_QWORD *)v2 + 4);
      v4 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 9, &v28);
      if (v4)
      {
        v5 = v4;
        if (CpAllocUtils::IsChain(*((_DWORD *)v4 + 6)))
        {
          v6 = *((_QWORD *)v28 + 12);
          v7 = **(_QWORD **)(v6 + 112);
          *(_QWORD *)(v7 + 48) = *(_QWORD *)(v6 + 48);
          *(_QWORD *)(v7 + 56) = 1;
        }
        if (CpAllocUtils::IsL2Dependent(*((_DWORD *)v5 + 6)))
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          ShouldUseL2Dependent = ZinIrRegAllocUtil::ShouldUseL2Dependent(v28, *((const ZinIrTensor **)this + 42), &v25);
          v9 = v25;
          if (v26 == v25)
            ShouldUseL2Dependent = 0;
          if (ShouldUseL2Dependent == 1)
          {
            v10 = 0;
            do
            {
              v11 = (uint64_t *)&v9[16 * v10];
              v13 = *v11;
              v12 = (ZinIrOpLayer *)v11[1];
              *((_QWORD *)v12 + 6) = *(_QWORD *)(*v11 + 48);
              *((_QWORD *)v12 + 7) = 1;
              __p = 0;
              v23 = 0;
              v24 = 0;
              IntermediateLayers = ZinTensorFamilyUtil::GetIntermediateLayers(v13, v12, 0, 0, &__p);
              v15 = (uint64_t *)__p;
              if (!IntermediateLayers)
              {
                v16 = v23;
                v17 = (uint64_t *)__p;
                if (__p != v23)
                {
                  do
                  {
                    v18 = *v17++;
                    *(_QWORD *)(v18 + 48) = *(_QWORD *)(v13 + 48);
                  }
                  while (v17 != v16);
                }
              }
              if (v15)
              {
                v23 = v15;
                operator delete(v15);
              }
              ++v10;
              v9 = v25;
            }
            while (v10 < (v26 - v25) >> 4);
          }
          if (v9)
          {
            v26 = v9;
            operator delete(v9);
          }
        }
      }
      v19 = (char *)*((_QWORD *)v2 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v2 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v2;
          v2 = v20;
        }
        while (!v21);
      }
      v2 = v20;
    }
    while (v20 != v3);
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 35);
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges(*((ZinIrOpLayer ****)this + 40), (_QWORD *)this + 35);
}

void sub_207036920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinCpBasedAllocator::SetMemoryPressure(ZinCpBasedAllocator *this, ZinIrMemoryPressureAnalyzer *a2)
{
  _QWORD *v4;
  ZinCpBasedAllocator *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const ZinIrTensor *v9;
  uint64_t ChainBufferSize;
  ZinCpBasedAllocator *v11;
  ZinCpBasedAllocator *v12;
  BOOL v13;
  __int128 v14;
  ZinIrTensor *v15;

  v4 = (_QWORD *)((char *)a2 + 8);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)a2, *((_QWORD **)a2 + 1));
  *(_QWORD *)a2 = v4;
  *((_QWORD *)a2 + 2) = 0;
  *v4 = 0;
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,std::map<ZinIrOpLayer *,float,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,float>>>>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,std::map<ZinIrOpLayer *,float,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,float>>>>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,std::map<ZinIrOpLayer *,float,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,float>>>>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,std::map<ZinIrOpLayer *,float,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,float>>>>>>::clear((uint64_t)a2 + 32);
  v5 = (ZinCpBasedAllocator *)*((_QWORD *)this + 3);
  if (v5 != (ZinCpBasedAllocator *)((char *)this + 32))
  {
    do
    {
      v15 = (ZinIrTensor *)*((_QWORD *)v5 + 4);
      v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &v15);
      if (v6)
      {
        v7 = v6;
        v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 35, &v15);
        if (v8)
        {
          v14 = *(_OWORD *)(v8 + 3);
          switch(*((_DWORD *)v7 + 6))
          {
            case 0:
            case 3:
            case 6:
            case 7:
              goto LABEL_7;
            case 1:
            case 8:
              ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(this, v15, a2);
              break;
            case 2:
              ChainBufferSize = ZinL2FootprintCalculator::GetChainBufferSize(*((const ZinIrTensor ***)this + 34), (ZinIrRegAllocUtil **)v15);
              goto LABEL_8;
            case 4:
            case 5:
              *((_QWORD *)&v14 + 1) = *(_QWORD *)(ZinIrRegAllocUtil::GetLastConsumer(v15, v9) + 48) - 1;
LABEL_7:
              ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 34), v15);
LABEL_8:
              ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, ChainBufferSize, (const ZinLiveRange *)&v14, v15);
              break;
            default:
              break;
          }
        }
      }
      v11 = (ZinCpBasedAllocator *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(ZinCpBasedAllocator **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (ZinCpBasedAllocator *)*((_QWORD *)v5 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != (ZinCpBasedAllocator *)((char *)this + 32));
  }
}

uint64_t ZinCpBasedAllocator::PromoteResidentToInplace(ZinCpBasedAllocator *this, ZinIrMemoryPressureAnalyzer *a2)
{
  ZinCpBasedAllocator *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  ZinTensorFamilyUtil *v15;
  _QWORD *v16;
  uint64_t v17;
  ZinIrTensor *RootTensor;
  _QWORD *Usages;
  _QWORD *v20;
  _QWORD *v21;
  const ZinIrTensor *v22;
  const ZinANELayer *LastConsumer;
  uint64_t v24;
  int v25;
  unint64_t v26;
  char v27;
  const ZinIrTensor *v28;
  _QWORD *v29;
  const ZinIrTensor *v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t *v33;
  char v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  const ZinIrTensor *v38;
  ZinIrTensor *v39;
  uint64_t v40;
  unint64_t PeakPressure;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  const char *v46;
  const char *v47;
  uint64_t *v48;
  ZinCpBasedAllocator *v49;
  ZinIrMemoryPressureAnalyzer *v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54[2];
  _QWORD *v55[3];
  __int128 v56;
  __int128 v57;
  unint64_t *v58;
  unint64_t *v59;
  _QWORD *v60;
  ZinIrTensor *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;

  v3 = this;
  v4 = *((_QWORD *)this + 40);
  v5 = *(const void **)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (v6 - *(_QWORD *)v4) >> 3;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v62, v5, v6, v7);
  v9 = v62;
  v8 = v63;
  v10 = v63 - 1;
  if (v62 != v63 && v10 > v62)
  {
    v12 = (unint64_t)(v62 + 1);
    do
    {
      v13 = *(_QWORD *)(v12 - 8);
      *(_QWORD *)(v12 - 8) = *v10;
      *v10-- = v13;
      v14 = v12 >= (unint64_t)v10;
      v12 += 8;
    }
    while (!v14);
    v9 = v62;
    v8 = v63;
  }
  if (v9 != v8)
  {
    v15 = (ZinCpBasedAllocator *)((char *)v3 + 1048);
    v16 = (_QWORD *)((char *)v3 + 72);
    v52 = (uint64_t)v3 + 280;
    v53 = (uint64_t)v3 + 48;
    v51 = (uint64_t **)((char *)v3 + 1024);
    while (1)
    {
      v17 = *v9;
      v61 = 0;
      v61 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0);
      RootTensor = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v15, v61);
      if (RootTensor != v61)
        goto LABEL_13;
      Usages = ZinTensorFamilyUtil::GetReadUsages(v15, RootTensor);
      if (Usages[1] == *Usages)
        goto LABEL_13;
      v20 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v16, &v61);
      v21 = v20;
      if (!v20)
        ZinAssertImpl("The decision must exist");
      if (!CpAllocUtils::IsNonChainResident(*((_DWORD *)v20 + 6))
        || CpAllocUtils::IsL2Inplace(*((_DWORD *)v21 + 6)))
      {
        goto LABEL_13;
      }
      LastConsumer = (const ZinANELayer *)ZinIrRegAllocUtil::GetLastConsumer(v61, v22);
      v24 = *((_QWORD *)LastConsumer + 11);
      if (*((_QWORD *)LastConsumer + 12) == v24)
      {
        v27 = 0;
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        do
        {
          v58 = 0;
          v28 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v24 + 8 * v26)
                                                                                       + 32))(*(_QWORD *)(v24 + 8 * v26), 0, 0);
          v58 = (unint64_t *)ZinTensorFamilyUtil::GetRootTensor(v15, v28);
          v29 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v16, &v58);
          if (!v29)
            ZinAssertImpl("The decision must exist");
          v25 |= CpAllocUtils::IsL2Inplace(*((_DWORD *)v29 + 6));
          v27 |= std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v53, (uint64_t *)&v58) != 0;
          ++v26;
          v24 = *((_QWORD *)LastConsumer + 11);
        }
        while (v26 < (*((_QWORD *)LastConsumer + 12) - v24) >> 3);
        if ((v25 & 1) != 0)
          goto LABEL_13;
      }
      if ((v27 & 1) == 0)
      {
        v60 = 0;
        v30 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)LastConsumer
                                                                                                  + 32))(LastConsumer, 0, 0);
        v60 = (_QWORD *)ZinTensorFamilyUtil::GetRootTensor(v15, v30);
        v31 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v16, &v60);
        if (!v31)
          ZinAssertImpl("The decision must exist");
        if (CpAllocUtils::IsNonChainResident(*((_DWORD *)v31 + 6)))
        {
          ZinIrInPlaceUpdate::IsInPlaceable(*((ZinIrTensor **)v3 + 127), LastConsumer, *((const ZinIrOpLayerGraph **)LastConsumer + 19), 2, *(_BYTE *)(*((_QWORD *)v3 + 42) + 1115), &v58);
          v33 = v58;
          v32 = v59;
          if (v58 != v59)
          {
            v48 = v8;
            v49 = v3;
            v50 = a2;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = (_QWORD *)*v33;
              v37 = *(_QWORD *)(*((_QWORD *)LastConsumer + 11) + 8 * *v33);
              v38 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0, 0);
              v39 = v61;
              v40 = ZinTensorFamilyUtil::GetRootTensor(v15, v38);
              if (v39 == (ZinIrTensor *)v40)
                v35 = v36;
              v34 |= v39 == (ZinIrTensor *)v40;
              ++v33;
            }
            while (v33 != v32);
            v3 = v49;
            a2 = v50;
            if ((v34 & 1) != 0)
            {
              v55[0] = &v61;
              v57 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(v52, &v61, (uint64_t)&std::piecewise_construct, v55)+ 3);
              PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(v50, (const ZinLiveRange *)&v57);
              ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(v50, v61, (const ZinLiveRange *)&v57);
              v56 = v57 + __PAIR128__(-1, 0);
              ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)v49 + 34), v61);
              ZinIrMemoryPressureAnalyzer::AddTensorAllocation(v50, v42, (const ZinLiveRange *)&v56, v61);
              ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(v50, *(_QWORD *)(*((_QWORD *)v49 + 42) + 408), (uint64_t *)&v57, (uint64_t)v55);
              if (PeakPressure < ZinIrMemoryPressureAnalyzer::GetPeakPressure(v50, (const ZinLiveRange *)&v57))
              {
                v47 = (char *)v61 + 24;
                if (*((char *)v61 + 47) < 0)
                  v47 = *(const char **)v47;
                ZinAssertImpl("Invalid memory pressure analyzer while inplace update in %s", v47);
              }
              if (v55[2])
                ZinAssertImpl("Promotion from resident to inplace must succeed");
              v43 = ZinCpBasedAllocator::PromoteDecisionToInplace(v49, v61);
              v54[0] = v60;
              v54[1] = v35;
              std::__tree<std::__value_type<ZinIrTensor *,unsigned long>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,unsigned long>,std::less<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,unsigned long>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor *,unsigned long>>(v51, (unint64_t *)v54, (uint64_t *)v54);
              if ((v43 & ZinIrRegAllocUtil::AdjustDimOrderForInplace(v60[12], (uint64_t)v51, v16, v15) & 1) == 0)
              {
                v46 = (char *)v61 + 24;
                if (*((char *)v61 + 47) < 0)
                  v46 = *(const char **)v46;
                ZinAssertImpl("INFO: This tensor %s is not inplacable.(file %s, line %d)\n", v46, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinIrSchedule/src/ZinCpBasedAllocator.cpp", 3524);
              }
              v54[0] = &v61;
              v44 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(v52, &v61, (uint64_t)&std::piecewise_construct, v54);
              *(_OWORD *)(v44 + 3) = v56;
              std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v55, v55[1]);
            }
            v33 = v58;
            v8 = v48;
          }
          if (v33)
          {
            v59 = v33;
            operator delete(v33);
          }
        }
      }
LABEL_13:
      if (++v9 == v8)
      {
        v8 = v62;
        break;
      }
    }
  }
  if (v8)
  {
    v63 = v8;
    operator delete(v8);
  }
  return 0;
}

void sub_207036FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a20, a21);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  v30 = *(void **)(v28 - 120);
  if (v30)
  {
    *(_QWORD *)(v28 - 112) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::PromoteBoundaryToResident(ZinCpBasedAllocator *this, ZinIrMemoryPressureAnalyzer *a2)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  ZinIrTensor **v7;
  ZinIrTensor **v8;
  ZinIrTensor *v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[8];
  _QWORD *v14;
  uint64_t v15;
  ZinIrTensor **v16;

  v4 = *(_QWORD *)(*((_QWORD *)this + 42) + 408);
  v5 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 40) + 8) - **((_QWORD **)this + 40)) >> 3;
  v11 = 0;
  v12 = v5;
  ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a2, v4, (uint64_t *)&v11, (uint64_t)v13);
  if (!v15)
  {
    ZinCpBasedAllocator::GetSortedBoundaryTensors(this, &v11);
    v6 = v11;
    v7 = (ZinIrTensor **)v12;
    if (v11 != (void *)v12)
    {
      v8 = (ZinIrTensor **)v11;
      do
      {
        v10 = *v8;
        v16 = &v10;
        if (*((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &v10, (uint64_t)&std::piecewise_construct, &v16)+ 6) == 1&& !ZinCpBasedAllocator::IsDisqualifiedForInplacePromotion(this, v10)&& (ZinCpBasedAllocator::PromoteToInplace(this, (ZinIrTensor **)v10, a2) & 1) == 0)
        {
          ZinCpBasedAllocator::PromoteToResident((ZinL2FootprintCalculator **)this, v10, a2);
        }
        ++v8;
      }
      while (v8 != v7);
    }
    if (v6)
      operator delete(v6);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v13, v14);
  return 0;
}

void sub_207037164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::PromoteChainToL2Dependent(ZinCpBasedAllocator *this, ZinIrMemoryPressureAnalyzer *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ZinCpBasedAllocator *v8;
  _QWORD *v9;
  const ZinIrHalParameters *v10;
  ZinIrRegAllocUtil *v11;
  ZinIrOpLayer *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ZinIrOpLayer *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  const ZinIrTensor *InputTensor;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  const ZinIrTensor *v36;
  _QWORD *v37;
  unsigned int v38;
  const ZinIrTensor *v39;
  _QWORD *v40;
  _QWORD *v41;
  ZinIrTensor *v42;
  _QWORD *v43;
  const ZinIrTensor *v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  const ZinIrTensor *v53;
  uint64_t v54;
  uint64_t v55;
  ZinIrTensor *v56;
  _QWORD *v57;
  _QWORD *v58;
  const ZinIrTensor *v59;
  _QWORD *v60;
  uint64_t ChainBufferSize;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  const ZinIrTensor *v69;
  uint64_t v70;
  _QWORD *v71;
  ZinCpBasedAllocator *v72;
  ZinCpBasedAllocator *v73;
  BOOL v74;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  ZinIrRegAllocUtil **v83;
  const char *v84;
  uint64_t **v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t PeakPressure;
  unint64_t v96;
  unint64_t v97;
  ZinANELayer *v98;
  ZinIrOpLayer *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  ZinIrTensor *RootTensor;
  __int128 v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  uint64_t v110;
  __int128 v111;
  ZinIrRegAllocUtil **v112;
  char v113[8];
  _QWORD *v114;
  uint64_t v115;

  v4 = *(_QWORD *)(*((_QWORD *)this + 42) + 408);
  v5 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 40) + 8) - **((_QWORD **)this + 40)) >> 3;
  v108 = 0;
  v109 = (unint64_t *)v5;
  ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a2, v4, (uint64_t *)&v108, (uint64_t)v113);
  if (v115)
    goto LABEL_2;
  v8 = (ZinCpBasedAllocator *)*((_QWORD *)this + 3);
  if (v8 == (ZinCpBasedAllocator *)((char *)this + 32))
    goto LABEL_2;
  v9 = (_QWORD *)((char *)this + 72);
  v89 = (_QWORD *)((char *)this + 192);
  v90 = (_QWORD *)((char *)this + 152);
  v88 = (_QWORD *)((char *)this + 232);
  v94 = (_QWORD *)((char *)this + 72);
  v85 = (uint64_t **)((char *)this + 1024);
  do
  {
    v112 = (ZinIrRegAllocUtil **)*((_QWORD *)v8 + 4);
    v108 = (unint64_t *)&v112;
    if (*((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v9, &v112, (uint64_t)&std::piecewise_construct, &v108)+ 6) != 2)goto LABEL_103;
    v108 = (unint64_t *)&v112;
    v111 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v112, (uint64_t)&std::piecewise_construct, &v108)+ 3);
    PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(a2, (const ZinLiveRange *)&v111);
    if ((ZinIrRegAllocUtil::IsChainable((ZinIrRegAllocUtil *)v112, *((const ZinIrTensor **)this + 42), v10) & 1) == 0)
    {
      v75 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v75)
        ZinCpBasedAllocator::PromoteChainToL2Dependent(v75, v76, v77, v78, v79, v80, v81, v82);
LABEL_112:
      v6 = 3;
      goto LABEL_3;
    }
    if ((ZinIrRegAllocUtil::IsL2Dependentable((ZinIrTensor *)v112, *((const ZinIrTensor **)this + 42), (ZinCpBasedAllocator *)((char *)this + 1048)) & 1) == 0)goto LABEL_103;
    v11 = v112[12];
    v12 = (ZinIrOpLayer *)**((_QWORD **)v11 + 14);
    v99 = v11;
    v13 = *((_QWORD *)v11 + 33);
    v14 = *((_QWORD *)v12 + 33);
    v96 = v13 + 120;
    v15 = v14 + 120;
    if (ZinIrOpLayer::IsNELayer(v12) && ZinIrOpLayer::IsPELayer(v99))
    {
      v16 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v12, 0) + 88);
      ZinIrOpLayer::GetInputTensorDimensions(v12, (void **)&v108);
      v87 &= 0xFFFFFFFFFF000000;
      ZinMirL2Config::SetL2DependentBufferNEWorkUnit(v14 + 120, v12, v16, (uint64_t)v108, v87, 0);
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v106 = 0uLL;
      v107 = 0;
      *(_QWORD *)&v101 = 0;
      v103 = 0;
      ZinL2FootprintCalculator::GetInterleavesAndCropOffset(v90, v89, v88, (uint64_t)v99, (uint64_t)&v108, (uint64_t)&v106, &v101, &v103);
      ZinMirL2Config::SetL2DependentBufferPEWorkUnit(v96, *((_QWORD *)this + 42), v99, v12, &v108, &v106, v101, v103, 1u, 0);
      v15 = v14 + 120;
      if ((_QWORD)v106)
      {
        *((_QWORD *)&v106 + 1) = v106;
        operator delete((void *)v106);
      }
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
    }
    v98 = v12;
    if (ZinIrOpLayer::IsNELayer(v99) && ZinIrOpLayer::IsPELayer(v12))
    {
      v92 = v14;
      v17 = v15;
      v18 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v99, 0) + 88);
      ZinIrOpLayer::GetInputTensorDimensions(v99, (void **)&v108);
      v86 &= 0xFFFFFFFFFF000000;
      ZinMirL2Config::SetL2DependentBufferNEWorkUnit(v96, v99, v18, (uint64_t)v108, v86, 0);
      v19 = v17;
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v106 = 0uLL;
      v107 = 0;
      *(_QWORD *)&v101 = 0;
      v103 = 0;
      ZinL2FootprintCalculator::GetInterleavesAndCropOffset(v90, v89, v88, (uint64_t)v12, (uint64_t)&v108, (uint64_t)&v106, &v101, &v103);
      v14 = v92;
      ZinMirL2Config::SetL2DependentBufferPEWorkUnit(v19, *((_QWORD *)this + 42), v99, v12, &v108, &v106, v101, v103, 1u, 0);
      if ((_QWORD)v106)
      {
        *((_QWORD *)&v106 + 1) = v106;
        operator delete((void *)v106);
      }
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
    }
    v91 = *(_QWORD *)(v14 + 200);
    v93 = *(_QWORD *)(v13 + 200);
    v20 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v99 + 368))(v99, 3);
    if (!*(_BYTE *)(v13 + 233))
      *(_QWORD *)(v13 + 200) = v20;
    v21 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v12 + 368))(v12, 3);
    if (!*(_BYTE *)(v14 + 233))
      *(_QWORD *)(v14 + 200) = v21;
    if (*(_BYTE *)(*((_QWORD *)this + 42) + 1117))
    {
      if (ZinIrOpLayer::IsNELayer(v99))
        v22 = v99;
      else
        v22 = v12;
      v23 = *(_QWORD *)(*((_QWORD *)v22 + 33) + 128);
      if (v23 <= (*(uint64_t (**)(void))(*(_QWORD *)v99 + 368))()
        && (v24 = *(_QWORD *)(*((_QWORD *)v22 + 33) + 128),
            v24 <= (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v98 + 368))(v98, 3)))
      {
        v26 = *(_QWORD *)(*((_QWORD *)v22 + 33) + 128);
        if (!*(_BYTE *)(v13 + 233))
          *(_QWORD *)(v13 + 200) = v26;
      }
      else
      {
        v25 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v99 + 368))(v99, 3);
        if (!*(_BYTE *)(v13 + 233))
          *(_QWORD *)(v13 + 200) = v25;
        v26 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v98 + 368))(v98, 3);
      }
    }
    else
    {
      v27 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v99 + 368))(v99, 3);
      if (!*(_BYTE *)(v13 + 233))
        *(_QWORD *)(v13 + 200) = v27;
      v26 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v12 + 368))(v12, 3);
    }
    if (!*(_BYTE *)(v14 + 233))
      *(_QWORD *)(v14 + 200) = v26;
    ZinIrInPlaceUpdate::IsInPlaceable(*((ZinIrTensor **)this + 127), v112[12], *((const ZinIrOpLayerGraph **)v112[12] + 19), 2, *(_BYTE *)(*((_QWORD *)this + 42) + 1115), &v108);
    ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 34), (const ZinIrTensor *)v112);
    v28 = v108;
    v97 = v29;
    if (v29 <= *(_QWORD *)(*((_QWORD *)this + 42) + 408))
    {
      v30 = v109;
      while (1)
      {
        if (v28 == v30)
          goto LABEL_53;
        InputTensor = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v112[12], *v28);
        *(_QWORD *)&v106 = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), InputTensor);
        v32 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v9, &v106);
        if (!v32)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (CpAllocUtils::IsL2Inplace(*((_DWORD *)v32 + 6)))
          break;
        ++v28;
      }
      v28 = v108;
    }
    v109 = v28;
    while (1)
    {
      do
      {
LABEL_53:
        v34 = v108;
        v33 = v109;
        RootTensor = 0;
        if (v109 == v108)
        {
          v35 = 0;
          break;
        }
        v35 = *v108;
        if (v109 != v108 + 1)
          memmove(v108, v108 + 1, (char *)v109 - (char *)(v108 + 1));
        v109 = v33 - 1;
        v36 = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v112[12], v35);
        RootTensor = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v36);
        v37 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v9, &RootTensor);
        if (!v37)
        {
          v67 = 0;
          goto LABEL_100;
        }
        v38 = *((_DWORD *)v37 + 6);
      }
      while ((CpAllocUtils::IsL2Dependent(v38) & 1) != 0
           || CpAllocUtils::IsChain(v38)
           || std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)this + 48, (uint64_t *)&RootTensor));
      v39 = (const ZinIrTensor *)v112;
      *(_QWORD *)&v106 = &v112;
      v40 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v112, (uint64_t)&std::piecewise_construct, (_QWORD **)&v106);
      ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a2, v39, (const ZinLiveRange *)(v40 + 3));
      ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(this, v99, a2);
      ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(this, v98, a2);
      if (v33 == v34)
      {
        *(_QWORD *)&v106 = &v112;
        v48 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v112, (uint64_t)&std::piecewise_construct, (_QWORD **)&v106);
        ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, v97, (const ZinLiveRange *)(v48 + 3), (const ZinIrTensor *)v112);
        v47 = 0;
      }
      else
      {
        if (!RootTensor)
          ZinAssertImpl("Invalid inplaceable tensor");
        v41 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v9, &RootTensor);
        if (!v41)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (CpAllocUtils::IsNonChainResident(*((_DWORD *)v41 + 6)))
        {
          v42 = RootTensor;
          *(_QWORD *)&v106 = &RootTensor;
          v43 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&v106);
          ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a2, v42, (const ZinLiveRange *)(v43 + 3));
        }
        *(_QWORD *)&v101 = &RootTensor;
        v106 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101)+ 3);
        *((_QWORD *)&v106 + 1) = *(_QWORD *)(ZinIrRegAllocUtil::GetLastConsumer(RootTensor, v44) + 48) - 1;
        ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, v97, (const ZinLiveRange *)&v106, RootTensor);
        *(_QWORD *)&v101 = &v112;
        v45 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v112, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101);
        ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, v97, (const ZinLiveRange *)(v45 + 3), (const ZinIrTensor *)v112);
        v46 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v9, &RootTensor);
        if (!v46)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v47 = *((_DWORD *)v46 + 6);
        *(_QWORD *)&v101 = RootTensor;
        *(_QWORD *)&v106 = &v101;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v9, &v101, (uint64_t)&std::piecewise_construct, (_QWORD **)&v106)+ 6) = 4;
      }
      *(_QWORD *)&v101 = v112;
      *(_QWORD *)&v106 = &v101;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v9, &v101, (uint64_t)&std::piecewise_construct, (_QWORD **)&v106)+ 6) = 3;
      ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(this, v99, a2);
      ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(this, v98, a2);
      *(_QWORD *)&v101 = v112;
      *(_QWORD *)&v106 = &v101;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v9, &v101, (uint64_t)&std::piecewise_construct, (_QWORD **)&v106)+ 6) = 2;
      if (v33 == v34)
      {
        v55 = *((_QWORD *)v98 + 7) + *((_QWORD *)v98 + 6);
        v103 = *((_QWORD *)v99 + 6);
        v104 = v55;
      }
      else
      {
        *(_QWORD *)&v101 = RootTensor;
        *(_QWORD *)&v106 = &v101;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v9, &v101, (uint64_t)&std::piecewise_construct, (_QWORD **)&v106)+ 6) = v47;
        v49 = *((_QWORD *)v98 + 7) + *((_QWORD *)v98 + 6);
        v103 = *((_QWORD *)v99 + 6);
        v104 = v49;
        v50 = (uint64_t *)*((_QWORD *)v99 + 11);
        v51 = (uint64_t *)*((_QWORD *)v99 + 12);
        while (v50 != v51)
        {
          v52 = *v50;
          *(_QWORD *)&v101 = 0;
          v53 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0, 0);
          *(_QWORD *)&v101 = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v53);
          *(_QWORD *)&v106 = &v101;
          v54 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v101, (uint64_t)&std::piecewise_construct, (_QWORD **)&v106)[3];
          if (v54 >= v103)
            v54 = v103;
          v103 = v54;
          ++v50;
        }
      }
      ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a2, *(_QWORD *)(*((_QWORD *)this + 42) + 408), &v103, (uint64_t)&v106);
      v9 = (_QWORD *)((char *)this + 72);
      if (!v107)
        break;
      if (v33 != v34)
      {
        v56 = RootTensor;
        if (!RootTensor)
          ZinAssertImpl("Invalid inplaceable tensor");
        *(_QWORD *)&v101 = &RootTensor;
        v57 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101);
        ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a2, v56, (const ZinLiveRange *)(v57 + 3));
        v58 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v94, &RootTensor);
        if (!v58)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (CpAllocUtils::IsNonChainResident(*((_DWORD *)v58 + 6)))
          ZinCpBasedAllocator::AddL2BufferToPressureAnalyzer(this, RootTensor, a2);
      }
      v59 = (const ZinIrTensor *)v112;
      *(_QWORD *)&v101 = &v112;
      v60 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v112, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101);
      ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a2, v59, (const ZinLiveRange *)(v60 + 3));
      ChainBufferSize = ZinL2FootprintCalculator::GetChainBufferSize(*((const ZinIrTensor ***)this + 34), v112);
      *(_QWORD *)&v101 = &v112;
      v62 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v112, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101);
      ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, ChainBufferSize, (const ZinLiveRange *)(v62 + 3), (const ZinIrTensor *)v112);
      ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(this, v99, a2);
      ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(this, v98, a2);
      v63 = *((_QWORD *)v99 + 33);
      if (!*(_BYTE *)(v63 + 233))
        *(_QWORD *)(v63 + 200) = v93;
      v64 = *((_QWORD *)v98 + 33);
      if (!*(_BYTE *)(v64 + 233))
        *(_QWORD *)(v64 + 200) = v91;
      ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(this, v99, a2);
      ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(this, v98, a2);
      v65 = *(_QWORD *)(*((_QWORD *)this + 42) + 408);
      v100 = v111;
      ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a2, v65, (uint64_t *)&v100, (uint64_t)&v101);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v106, *((_QWORD **)&v106 + 1));
      v66 = (_QWORD *)*((_QWORD *)&v101 + 1);
      v106 = v101;
      v107 = v102;
      if (v102)
      {
        *(_QWORD *)(*((_QWORD *)&v101 + 1) + 16) = (char *)&v106 + 8;
        *(_QWORD *)&v101 = (char *)&v101 + 8;
        *((_QWORD *)&v101 + 1) = 0;
        v102 = 0;
        v66 = 0;
      }
      else
      {
        *(_QWORD *)&v106 = (char *)&v106 + 8;
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v101, v66);
      if (PeakPressure != ZinIrMemoryPressureAnalyzer::GetPeakPressure(a2, (const ZinLiveRange *)&v111))
      {
        v83 = v112 + 3;
        v84 = "Invalid memory pressure analyzer while chain to l2-dep update in %s";
        if ((*((char *)v112 + 47) & 0x80000000) == 0)
          goto LABEL_115;
        goto LABEL_114;
      }
      if (v107)
      {
        v83 = v112 + 3;
        v84 = "Invalid chain to l2-dep update in %s";
        if ((*((char *)v112 + 47) & 0x80000000) == 0)
LABEL_115:
          ZinAssertImpl(v84, v83);
LABEL_114:
        v83 = (ZinIrRegAllocUtil **)*v83;
        goto LABEL_115;
      }
      if (v108 == v109)
        goto LABEL_99;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v106, *((_QWORD **)&v106 + 1));
    }
    if (v33 != v34)
    {
      *(_QWORD *)&v100 = RootTensor;
      *(_QWORD *)&v101 = &v100;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v94, &v100, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101)+ 6) = 4;
      *(_QWORD *)&v101 = v112;
      *((_QWORD *)&v101 + 1) = v35;
      std::__tree<std::__value_type<ZinIrTensor *,unsigned long>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,unsigned long>,std::less<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,unsigned long>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor *,unsigned long>>(v85, (unint64_t *)&v101, (uint64_t *)&v101);
      if ((ZinIrRegAllocUtil::AdjustDimOrderForInplace((uint64_t)v112[12], (uint64_t)v85, v94, (ZinCpBasedAllocator *)((char *)this + 1048)) & 1) == 0)ZinAssertImpl("failed to propagate dim order for inplace");
      *(_QWORD *)&v101 = &RootTensor;
      v68 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101)[3];
      v70 = *(_QWORD *)(ZinIrRegAllocUtil::GetLastConsumer(RootTensor, v69) + 48);
      *(_QWORD *)&v101 = &RootTensor;
      v71 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101);
      v71[3] = v68;
      v71[4] = v70 - 1;
    }
    *(_QWORD *)&v100 = v112;
    *(_QWORD *)&v101 = &v100;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v94, &v100, (uint64_t)&std::piecewise_construct, (_QWORD **)&v101)+ 6) = 3;
LABEL_99:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v106, *((_QWORD **)&v106 + 1));
    v67 = 1;
LABEL_100:
    if (v108)
    {
      v109 = v108;
      operator delete(v108);
    }
    if (!v67)
      goto LABEL_112;
LABEL_103:
    v72 = (ZinCpBasedAllocator *)*((_QWORD *)v8 + 1);
    if (v72)
    {
      do
      {
        v73 = v72;
        v72 = *(ZinCpBasedAllocator **)v72;
      }
      while (v72);
    }
    else
    {
      do
      {
        v73 = (ZinCpBasedAllocator *)*((_QWORD *)v8 + 2);
        v74 = *(_QWORD *)v73 == (_QWORD)v8;
        v8 = v73;
      }
      while (!v74);
    }
    v8 = v73;
  }
  while (v73 != (ZinCpBasedAllocator *)((char *)this + 32));
LABEL_2:
  v6 = 0;
LABEL_3:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v113, v114);
  return v6;
}

void sub_207037F58(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 192, *(_QWORD **)(v1 - 184));
  v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(_QWORD *)(v1 - 160) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 120, *(_QWORD **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::PromoteParallelExecutionBetweenSplitBranches(ZinIrOpLayer ****this, ZinIrMemoryPressureAnalyzer *a2)
{
  ZinCpBasedAllocator *v2;
  ZinIrOpLayer ***v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  ZinIrOpLayer **v15;
  ZinIrOpLayer *v16;
  char *v17;
  ZinIrOpLayer **v18;
  ZinTensorFamilyUtil *v19;
  unint64_t v20;
  ZinIrMemoryPressureAnalyzer *v21;
  ZinANELayer **v22;
  const ZinANELayer *v23;
  ZinANELayer *v24;
  const ZinIrTensor *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t PeakPressure;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  const ZinIrTensor *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  const ZinIrTensor *v46;
  _QWORD *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  const ZinIrTensor *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  const ZinIrTensor *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  ZinTensorFamilyUtil *v79;
  ZinCpBasedAllocator *v80;
  uint64_t v81;
  _QWORD *v82;
  __int128 v83;
  uint64_t v84;
  ZinIrTensor *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD v89[2];
  int v90;
  _OWORD v91[2];
  int v92;
  __int128 v93;
  uint64_t v94[2];
  const ZinIrTensor *RootTensor;
  ZinIrOpLayer **v96;
  ZinIrOpLayer **v97;
  ZinIrOpLayer **v98;
  _QWORD *v99[2];

  v2 = (ZinCpBasedAllocator *)this;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v3 = this[40];
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    do
    {
      v6 = *v4;
      if (ZinIrOpLayer::IsANELayer(*v4))
      {
        v7 = v97;
        if (v97 >= v98)
        {
          v9 = v97 - v96;
          if ((unint64_t)(v9 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v10 = ((char *)v98 - (char *)v96) >> 2;
          if (v10 <= v9 + 1)
            v10 = v9 + 1;
          if ((unint64_t)((char *)v98 - (char *)v96) >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          if (v11)
            v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v98, v11);
          else
            v12 = 0;
          v13 = (ZinIrOpLayer **)&v12[8 * v9];
          *v13 = v6;
          v8 = v13 + 1;
          v15 = v96;
          v14 = v97;
          if (v97 != v96)
          {
            do
            {
              v16 = *--v14;
              *--v13 = v16;
            }
            while (v14 != v15);
            v14 = v96;
          }
          v96 = v13;
          v97 = v8;
          v98 = (ZinIrOpLayer **)&v12[8 * v11];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v97 = v6;
          v8 = v7 + 1;
        }
        v97 = v8;
      }
      ++v4;
    }
    while (v4 != v5);
    v17 = (char *)v96;
    v18 = v97;
  }
  if ((unint64_t)((char *)v18 - v17) >= 9)
  {
    v19 = (ZinCpBasedAllocator *)((char *)v2 + 1048);
    v81 = (uint64_t)v2 + 280;
    v82 = (_QWORD *)((char *)v2 + 72);
    v20 = 1;
    v21 = a2;
    v79 = (ZinCpBasedAllocator *)((char *)v2 + 1048);
    v80 = v2;
    do
    {
      v22 = (ZinANELayer **)&v17[8 * v20];
      v23 = *(v22 - 1);
      v24 = *v22;
      RootTensor = 0;
      v25 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0);
      RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v19, v25);
      if ((ZinCpBasedAllocator::IsDisqualifiedForParallelExecution(v2, v23, v24) & 1) == 0
        && *(_BYTE *)((*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0)+ 144)&& *(_BYTE *)((*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0, 0)+ 144))
      {
        v26 = (*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0);
        if (!*(_BYTE *)(v26 + 144))
          std::__throw_bad_optional_access[abi:ne180100]();
        v27 = *(unsigned __int16 *)(v26 + 128);
        v28 = (*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0, 0);
        if (!*(_BYTE *)(v28 + 144))
          std::__throw_bad_optional_access[abi:ne180100]();
        if (v27 != *(unsigned __int16 *)(v28 + 128))
        {
          v29 = *((_QWORD *)v24 + 7) + *((_QWORD *)v24 + 6);
          v94[0] = *((_QWORD *)v23 + 6);
          v94[1] = v29;
          PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(v21, (const ZinLiveRange *)v94);
          if (PeakPressure <= *(_QWORD *)(*((_QWORD *)v2 + 42) + 408))
          {
            v73 = PeakPressure;
            *(_QWORD *)&v91[0] = &RootTensor;
            v93 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(v81, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)v91)+ 3);
            v31 = *((_QWORD *)v23 + 6);
            v74 = *((_QWORD *)v23 + 7);
            v32 = *((_QWORD *)v24 + 6);
            v33 = *((_QWORD *)v24 + 7);
            ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(v80, v23, v21);
            *((_QWORD *)v23 + 7) = v32 - v31 + v33;
            ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(v80, v23, v21);
            memset(v91, 0, sizeof(v91));
            v92 = 1065353216;
            memset(v89, 0, sizeof(v89));
            v90 = 1065353216;
            v34 = (uint64_t *)*((_QWORD *)v23 + 11);
            v35 = (uint64_t *)*((_QWORD *)v23 + 12);
            while (v34 != v35)
            {
              v36 = *v34;
              v99[0] = 0;
              v37 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0, 0);
              v99[0] = (_QWORD *)ZinTensorFamilyUtil::GetRootTensor(v79, v37);
              v38 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v82, v99);
              if (!v38)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              v39 = *((_DWORD *)v38 + 6);
              *(_QWORD *)&v83 = v99;
              v86 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(v81, v99, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83)+ 3);
              ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)v80 + 34), (const ZinIrTensor *)v99[0]);
              v41 = v40;
              v42 = *((_QWORD *)&v86 + 1);
              v43 = *((_QWORD *)v24 + 6);
              v44 = *((_QWORD *)v24 + 7);
              *(_QWORD *)&v83 = v99;
              *((_BYTE *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,BOOL>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>((uint64_t)v89, v99, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83)+ 24) = v42 < v44 + v43;
              if (CpAllocUtils::IsResident(v39))
              {
                *(_QWORD *)&v83 = v99;
                if (*((_BYTE *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,BOOL>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>((uint64_t)v89, v99, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83)+ 24))
                {
                  ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a2, (const ZinIrTensor *)v99[0], (const ZinLiveRange *)&v86);
                  *((_QWORD *)&v86 + 1) = *((_QWORD *)v24 + 7) + *((_QWORD *)v24 + 6);
                  ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, v41, (const ZinLiveRange *)&v86, (const ZinIrTensor *)v99[0]);
                  *(_QWORD *)&v83 = v99;
                  v45 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v91, v99, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83);
                  *(_OWORD *)(v45 + 3) = v86;
                }
              }
              ++v34;
            }
            v88 = 0;
            v46 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0);
            v88 = ZinTensorFamilyUtil::GetRootTensor(v79, v46);
            v47 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v82, &v88);
            v21 = a2;
            if (!v47)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v48 = *((_DWORD *)v47 + 6);
            ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)v80 + 34), RootTensor);
            v77 = v49;
            v50 = *((_QWORD *)&v93 + 1);
            v51 = *((_QWORD *)v24 + 7) + *((_QWORD *)v24 + 6);
            if (CpAllocUtils::IsResident(v48) && v50 < v51)
            {
              ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a2, RootTensor, (const ZinLiveRange *)&v93);
              *((_QWORD *)&v93 + 1) = *((_QWORD *)v24 + 7) + *((_QWORD *)v24 + 6);
              ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, v77, (const ZinLiveRange *)&v93, RootTensor);
            }
            v2 = v80;
            ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a2, *(_QWORD *)(*((_QWORD *)v80 + 42) + 408), v94, (uint64_t)&v86);
            v19 = v79;
            v75 = v51;
            v76 = v50;
            if (v87)
            {
              ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(v80, v23, a2);
              *((_QWORD *)v23 + 7) = v74;
              ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(v80, v23, a2);
              v52 = (uint64_t *)*((_QWORD *)v23 + 11);
              v53 = (uint64_t *)*((_QWORD *)v23 + 12);
              while (v52 != v53)
              {
                v54 = *v52;
                v85 = 0;
                v55 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0, 0);
                v85 = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v79, v55);
                v56 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v82, &v85);
                if (!v56)
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                v57 = *((_DWORD *)v56 + 6);
                v99[0] = &v85;
                v83 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v91, &v85, (uint64_t)&std::piecewise_construct, v99)+ 3);
                ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)v80 + 34), v85);
                v59 = v58;
                if (CpAllocUtils::IsResident(v57))
                {
                  v99[0] = &v85;
                  if (*((_BYTE *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,BOOL>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>((uint64_t)v89, &v85, (uint64_t)&std::piecewise_construct, v99)+ 24))
                  {
                    ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a2, v85, (const ZinLiveRange *)&v83);
                    v99[0] = &v85;
                    v60 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(v81, &v85, (uint64_t)&std::piecewise_construct, v99);
                    ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, v59, (const ZinLiveRange *)(v60 + 3), v85);
                  }
                }
                ++v52;
              }
              if (CpAllocUtils::IsResident(v48) && v76 < v75)
              {
                ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a2, RootTensor, (const ZinLiveRange *)&v93);
                *(_QWORD *)&v83 = &RootTensor;
                v61 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(v81, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83);
                ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a2, v77, (const ZinLiveRange *)(v61 + 3), RootTensor);
              }
              ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a2, *(_QWORD *)(*((_QWORD *)v80 + 42) + 408), v94, (uint64_t)&v83);
              std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v86, *((_QWORD **)&v86 + 1));
              v62 = (_QWORD *)*((_QWORD *)&v83 + 1);
              v86 = v83;
              v87 = v84;
              if (v84)
              {
                *(_QWORD *)(*((_QWORD *)&v83 + 1) + 16) = (char *)&v86 + 8;
                *(_QWORD *)&v83 = (char *)&v83 + 8;
                *((_QWORD *)&v83 + 1) = 0;
                v84 = 0;
                v62 = 0;
              }
              else
              {
                *(_QWORD *)&v86 = (char *)&v86 + 8;
              }
              std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v83, v62);
              if (v73 != ZinIrMemoryPressureAnalyzer::GetPeakPressure(a2, (const ZinLiveRange *)v94))
              {
                v71 = (_QWORD *)((char *)RootTensor + 24);
                v72 = "Invalid memory pressure analyzer while parallel execution between tiles update in %s";
                if (*((char *)RootTensor + 47) < 0)
                  goto LABEL_82;
                goto LABEL_83;
              }
              if (v87)
              {
                v71 = (_QWORD *)((char *)RootTensor + 24);
                v72 = "Invalid parallel execution between tiles update in %s";
                if (*((char *)RootTensor + 47) < 0)
LABEL_82:
                  v71 = (_QWORD *)*v71;
LABEL_83:
                ZinAssertImpl(v72, v71);
              }
            }
            else
            {
              v63 = (uint64_t *)*((_QWORD *)v23 + 11);
              v64 = (uint64_t *)*((_QWORD *)v23 + 12);
              while (v63 != v64)
              {
                v65 = *v63;
                v99[0] = 0;
                v66 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0, 0);
                v99[0] = (_QWORD *)ZinTensorFamilyUtil::GetRootTensor(v79, v66);
                v67 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v82, v99);
                if (!v67)
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                if (CpAllocUtils::IsResident(*((_DWORD *)v67 + 6)))
                {
                  *(_QWORD *)&v83 = v99;
                  if (*((_BYTE *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,BOOL>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>((uint64_t)v89, v99, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83)+ 24))
                  {
                    *(_QWORD *)&v83 = v99;
                    v68 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v91, v99, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83);
                    *(_QWORD *)&v83 = v99;
                    *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(v81, v99, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83)+ 3) = *(_OWORD *)(v68 + 3);
                  }
                }
                ++v63;
              }
              if (CpAllocUtils::IsResident(v48) && v76 < v75)
              {
                *(_QWORD *)&v83 = &RootTensor;
                v69 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(v81, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&v83);
                *(_OWORD *)(v69 + 3) = v93;
              }
            }
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v86, *((_QWORD **)&v86 + 1));
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v89);
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v91);
          }
        }
      }
      ++v20;
      v17 = (char *)v96;
    }
    while (v20 < v97 - v96);
  }
  if (v17)
  {
    v97 = (ZinIrOpLayer **)v17;
    operator delete(v17);
  }
  return 0;
}

void sub_20703899C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v39;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a27, a28);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a31);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a37);
  v39 = *(void **)(v37 - 128);
  if (v39)
  {
    *(_QWORD *)(v37 - 120) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::VerifyAllocationDecision(ZinCpBasedAllocator *this, ZinIrMemoryPressureAnalyzer *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD **v20;
  _QWORD **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE __p[22];
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)*((_QWORD *)this + 3);
  v5 = (char *)this + 32;
  if (v4 == (char *)this + 32)
  {
LABEL_9:
    v9 = *(_QWORD *)(*((_QWORD *)this + 42) + 408);
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 40) + 8) - 8);
    v11 = *(_QWORD *)(v10 + 56) + *(_QWORD *)(v10 + 48);
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = v11;
    ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a2, v9, (uint64_t *)__p, (uint64_t)&v22);
    v12 = v24;
    *((_BYTE *)this + 968) = v24 == 0;
    if (v12)
    {
      if (*((_QWORD *)this + 63))
      {
        ZinIrMemoryPressureAnalyzer::GetDebugString(a2, *(_QWORD *)(*((_QWORD *)this + 42) + 408), __p);
        v13 = v26 >= 0 ? __p : *(_BYTE **)__p;
        v14 = v26 >= 0 ? HIBYTE(v26) : *(_QWORD *)&__p[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 47, (uint64_t)v13, v14);
        if (SHIBYTE(v26) < 0)
          operator delete(*(void **)__p);
      }
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 9);
      v15 = v22;
      if (v22 != &v23)
      {
        v16 = MEMORY[0x24BDACB70];
        do
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = v15[4];
            v18 = (_QWORD *)(v17 + 24);
            if (*(char *)(v17 + 47) < 0)
              v18 = (_QWORD *)*v18;
            *(_DWORD *)__p = 136315650;
            *(_QWORD *)&__p[4] = v18;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)&__p[14] = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinIrSchedul"
                                  "e/src/ZinCpBasedAllocator.cpp";
            v26 = 1024;
            v27 = 2079;
            _os_log_impl(&dword_2069AB000, v16, OS_LOG_TYPE_INFO, "INFO: Allocation decision in %s is beyond budget (file %s, line %d)\n", __p, 0x1Cu);
          }
          v19 = (_QWORD *)v15[1];
          if (v19)
          {
            do
            {
              v20 = (_QWORD **)v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (_QWORD **)v15[2];
              v8 = *v20 == v15;
              v15 = v20;
            }
            while (!v8);
          }
          v15 = v20;
        }
        while (v20 != &v23);
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v22, v23);
    return 0;
  }
  else
  {
    while (1)
    {
      *(_QWORD *)__p = *((_QWORD *)v4 + 4);
      if (!std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 9, __p))break;
      v6 = (char *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
      if (v7 == v5)
        goto LABEL_9;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinCpBasedAllocator::VerifyAllocationDecision((uint64_t)__p);
    return 3;
  }
}

void sub_207038CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::CalculatePerf(uint64_t a1, ZinANELayer *a2, uint64_t a3, _QWORD *a4, char a5, ZinPerfDescriptor *a6)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[10];
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  __int16 v43;
  __int128 __p;
  uint64_t v45;
  __int16 v46;
  char v47;
  char v48;
  __int16 v49;
  char v50;
  char v51;
  __int16 v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  __int16 v67;
  char v68;
  char v69;
  int v70;
  _BYTE v71[872];
  __int128 v72[2];

  ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)(a1 + 336), *(double *)(*(_QWORD *)(a1 + 344) + 104), *(_DWORD *)(*(_QWORD *)(a1 + 344) + 112), *(_DWORD *)(*(_QWORD *)(a1 + 344) + 116), (uint64_t)v72);
  v12 = *(_QWORD *)(a1 + 336);
  *(_WORD *)v15 = 257;
  v15[2] = 1;
  *(_DWORD *)&v15[3] = 0;
  *(_DWORD *)&v15[6] = 0;
  v16 = 1;
  v17 = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v71, v12, v72, (uint64_t *)v15);
  if (ZinIrOpLayer::IsNELayer(a2))
  {
    v15[8] = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    *(_QWORD *)v15 = &off_24C01F198;
    v43 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 256;
    __p = 0u;
    v45 = 0;
    v46 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    ZinCpBasedAllocator::GetCustomPerfInfo(a1, (uint64_t)a2, a4, a5, a3, (uint64_t)v15);
    v13 = ZinANELayer::CalculatePerf(a2, (ZinIrPerf *)v71, (const ZinCustomPerfInfo *)v15, a6);
    *(_QWORD *)v15 = &off_24C01F198;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  else
  {
    v15[8] = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    *(_QWORD *)v15 = &unk_24C01F1F0;
    LOBYTE(v43) = 0;
    LOBYTE(__p) = 0;
    BYTE8(__p) = 0;
    LOBYTE(v45) = 0;
    ZinCpBasedAllocator::GetCustomPerfInfo(a1, (uint64_t)a2, a4, a5, a3, (uint64_t)v15);
    v13 = ZinANELayer::CalculatePerf(a2, (ZinIrPerf *)v71, (const ZinCustomPerfInfo *)v15, a6);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v15);
  if ((_DWORD)v13)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinCpBasedAllocator::CalculatePerf();
    v13 = 3;
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v71);
  return v13;
}

void sub_207039004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)va);
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void ZinCpBasedAllocator::GetCustomPerfInfo(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v32;
  void *__p;
  _BYTE *v34;
  __int128 v35;
  _BYTE v36[24];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 512))(&__p, a2);
  v8 = __p;
  if (v34 != __p)
  {
    v9 = 0;
    v10 = 0;
    v11 = a6 + 56;
    do
    {
      v32 = 0;
      v32 = v8[v9];
      v12 = *(_BYTE *)(v32 + 48);
      v13 = *(_OWORD *)(v32 + 65);
      v35 = *(_OWORD *)(v32 + 49);
      *(_OWORD *)v36 = v13;
      *(_QWORD *)&v36[15] = *(_QWORD *)(v32 + 80);
      v14 = *(_DWORD *)(v32 + 88);
      v15 = *(_QWORD *)(*a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8));
      v16 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a1 + 152), &v32);
      if (v16)
      {
        v17 = v16[3];
        v10 = v17 >> 8;
        v18 = 1;
      }
      else
      {
        v18 = 0;
        LOBYTE(v17) = 0;
      }
      v19 = *(_OWORD *)v36;
      *(_OWORD *)(v11 - 47) = v35;
      v20 = *(unsigned __int8 *)(v11 + 56);
      *(_BYTE *)(v11 - 48) = v12;
      *(_OWORD *)(v11 - 31) = v19;
      *(_QWORD *)(v11 - 16) = *(_QWORD *)&v36[15];
      *(_BYTE *)(v11 - 8) = 1;
      *(_DWORD *)v11 = v14;
      *(_BYTE *)(v11 + 4) = 1;
      *(_BYTE *)(v11 + 8) = (v15 >> v9) & 1;
      *(_BYTE *)(v11 + 9) = 1;
      *(_QWORD *)(v11 + 16) = v17 | (v10 << 8);
      if (!v20)
        *(_BYTE *)(v11 + 56) = 1;
      *(_BYTE *)(v11 + 24) = v18;
      *(_BYTE *)(v11 + 32) = 0;
      *(_BYTE *)(v11 + 48) = 0;
      ++v9;
      v8 = __p;
      v11 += 112;
    }
    while (v9 < (v34 - (_BYTE *)__p) >> 3);
  }
  v21 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v22 = *(_OWORD *)(v21 + 64);
  v35 = *(_OWORD *)(v21 + 48);
  *(_OWORD *)v36 = v22;
  *(_QWORD *)&v36[16] = *(_QWORD *)(v21 + 80);
  v23 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0) + 88);
  v24 = *(_OWORD *)v36;
  *(_OWORD *)(a6 + 232) = v35;
  v25 = *(unsigned __int8 *)(a6 + 336);
  *(_OWORD *)(a6 + 248) = v24;
  *(_QWORD *)(a6 + 264) = *(_QWORD *)&v36[16];
  *(_BYTE *)(a6 + 272) = 1;
  *(_DWORD *)(a6 + 280) = v23;
  *(_BYTE *)(a6 + 284) = 1;
  *(_BYTE *)(a6 + 288) = a4;
  *(_BYTE *)(a6 + 289) = 1;
  *(_BYTE *)(a6 + 296) = 0;
  if (!v25)
    *(_BYTE *)(a6 + 336) = 1;
  *(_BYTE *)(a6 + 304) = 0;
  *(_BYTE *)(a6 + 312) = 0;
  *(_BYTE *)(a6 + 328) = 0;
  *(_QWORD *)&v35 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v26 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a1 + 152), &v35);
  if (v26)
  {
    v27 = v26[3];
    if (!*(_BYTE *)(a6 + 304))
      *(_BYTE *)(a6 + 304) = 1;
    *(_QWORD *)(a6 + 296) = v27;
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))a6)(a6, a5))
    ZinAssertImpl("Error: Failed to set custom perf info");
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
}

void sub_2070392D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCpBasedAllocator::CollectNEPerfNumbers(uint64_t a1, ZinEnginePerf ***this, int a3, uint64_t a4, _QWORD *a5, unint64_t *a6, uint64_t a7)
{
  ZinEngineLayerMirInfo *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  ZinEngineLayerMirInfo *v20;
  _QWORD *v21;
  ZinEngineLayerMirInfo *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t *v34;
  ZinEnginePerf *v35;
  __int128 v36;
  _BOOL4 HasDMAReadStall;
  double v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  _QWORD *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t *v55;
  char *v56;
  unint64_t v57;
  double v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  char *v68;
  unint64_t v69;
  double v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  double v88;
  double v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  _QWORD *v93;
  unint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t *v100;
  char *v101;
  unint64_t v102;
  void *v103;
  unint64_t v104;
  unint64_t *v105;
  char *v106;
  unint64_t v107;
  double v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  unint64_t *v119;
  char *v120;
  unint64_t v121;
  ZinEngineLayerMirInfo *v122;
  uint64_t v124;
  _BOOL4 v125;
  _OWORD v126[2];
  uint64_t v127;
  char v128;
  void *v129;
  _BYTE *v130;
  void *__p[56];
  int v132;
  uint64_t v133[5];
  int v134;
  uint64_t v135[5];
  int v136;
  uint64_t v137[5];
  ZinEngineLayerMirInfo *v138;

  ZinANELayer::CopyMirInfo((ZinANELayer *)this, &v138);
  if (!a3)
  {
    v124 = a4;
    v17 = a7;
    v18 = a5;
    v19 = a6;
    ZinL2FootprintCalculator::ComputeNonResidentWU(*(ZinL2FootprintCalculator **)(a1 + 272), (ZinEngineLayerMirInfo **)this, (uint64_t)__p);
    v20 = v138;
    memcpy((char *)v138 + 120, __p, 0x1C0uLL);
    *((_DWORD *)v20 + 142) = v132;
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)v20 + 576, v133);
    *((_DWORD *)v20 + 154) = v134;
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)v20 + 624, v135);
    *((_DWORD *)v20 + 166) = v136;
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)v20 + 672, v137);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v137);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v135);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v133);
    a6 = v19;
    a5 = v18;
    a7 = v17;
    a4 = v124;
    goto LABEL_7;
  }
  ZinMirL2Config::ZinMirSetTileHeight((ZinEngineLayerMirInfo *)((char *)v138 + 120), (const ZinANELayer *)this, 1);
  LODWORD(v129) = 65793;
  BYTE4(v129) = 0;
  v14 = v138;
  v15 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)this, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions((ZinIrOpLayer *)this, __p);
  v16 = ZinMirL2Config::ZinMirSetWorkUnitShape((uint64_t)v14 + 120, this, v15);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v16 & 1) != 0)
  {
    ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)v138 + 120), (const ZinIrOpLayer *)this);
LABEL_7:
    memset(__p, 0, 200);
    v21 = operator new(8uLL);
    __p[25] = v21;
    *v21 = 0;
    __p[26] = v21 + 1;
    __p[27] = v21 + 1;
    __p[28] = 0;
    __p[29] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&__p[30] = _Q0;
    *(_OWORD *)&__p[32] = _Q0;
    *(_OWORD *)&__p[34] = _Q0;
    *(_OWORD *)&__p[36] = _Q0;
    __p[38] = 0;
    LOBYTE(__p[39]) = 0;
    __p[40] = 0;
    v27 = v138;
    v128 = a3;
    std::vector<BOOL>::vector(&v129, &v128, 1);
    v28 = ZinCpBasedAllocator::CalculatePerf(a1, (ZinANELayer *)this, (uint64_t)v27, &v129, a3, (ZinPerfDescriptor *)__p);
    if (v129)
      operator delete(v129);
    if (v28)
    {
      v29 = 3;
    }
    else
    {
      ((void (*)(void **__return_ptr, ZinEnginePerf ***))(*this)[64])(&v129, this);
      if (a3)
      {
        v30 = (unint64_t)((double)(unint64_t)__p[17] / *(double *)(a1 + 984) * 1000.0 * 1000.0 * 1000.0);
        v32 = (_QWORD *)(a4 + 16);
        v31 = *(_QWORD *)(a4 + 16);
        v33 = *(unint64_t **)(a4 + 8);
        if ((unint64_t)v33 >= v31)
        {
          v43 = *(unint64_t **)a4;
          v44 = ((uint64_t)v33 - *(_QWORD *)a4) >> 3;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v46 = v31 - (_QWORD)v43;
          if (v46 >> 2 > v45)
            v45 = v46 >> 2;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v47);
            v43 = *(unint64_t **)a4;
            v33 = *(unint64_t **)(a4 + 8);
          }
          else
          {
            v48 = 0;
          }
          v55 = (unint64_t *)&v48[8 * v44];
          v56 = &v48[8 * v47];
          *v55 = v30;
          v34 = v55 + 1;
          while (v33 != v43)
          {
            v57 = *--v33;
            *--v55 = v57;
          }
          *(_QWORD *)a4 = v55;
          *(_QWORD *)(a4 + 8) = v34;
          *(_QWORD *)(a4 + 16) = v56;
          if (v43)
            operator delete(v43);
        }
        else
        {
          *v33 = v30;
          v34 = v33 + 1;
        }
        *(_QWORD *)(a4 + 8) = v34;
        v58 = *(double *)(a1 + 984);
        if ((unint64_t)(v130 - (_BYTE *)v129) >= 9)
        {
          v59 = (unint64_t)((double)(unint64_t)__p[17] / v58 * 1000.0 * 1000.0 * 1000.0);
          if ((unint64_t)v34 >= *v32)
          {
            v61 = *(unint64_t **)a4;
            v62 = ((uint64_t)v34 - *(_QWORD *)a4) >> 3;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v64 = *v32 - (_QWORD)v61;
            if (v64 >> 2 > v63)
              v63 = v64 >> 2;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
              v65 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            if (v65)
            {
              v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v65);
              v61 = *(unint64_t **)a4;
              v34 = *(unint64_t **)(a4 + 8);
            }
            else
            {
              v66 = 0;
            }
            v100 = (unint64_t *)&v66[8 * v62];
            v101 = &v66[8 * v65];
            *v100 = v59;
            v60 = v100 + 1;
            while (v34 != v61)
            {
              v102 = *--v34;
              *--v100 = v102;
            }
            *(_QWORD *)a4 = v100;
            *(_QWORD *)(a4 + 8) = v60;
            *(_QWORD *)(a4 + 16) = v101;
            if (v61)
              operator delete(v61);
          }
          else
          {
            *v34 = v59;
            v60 = v34 + 1;
          }
          *(_QWORD *)(a4 + 8) = v60;
          v58 = *(double *)(a1 + 984);
        }
        v103 = __p[19];
        *a5 = (unint64_t)((double)(unint64_t)__p[10] / *(double *)(a1 + 976) * 1000.0 * 1000.0 * 1000.0);
        v104 = (unint64_t)((double)(unint64_t)v103 / v58 * 1000.0 * 1000.0 * 1000.0);
      }
      else
      {
        v35 = *this[11];
        v36 = *(_OWORD *)(a1 + 992);
        v126[0] = *(_OWORD *)(a1 + 976);
        v126[1] = v36;
        v127 = *(_QWORD *)(a1 + 1008);
        HasDMAReadStall = ZinEnginePerf::HasDMAReadStall(v35, (const ZinANELayer *)this, (uint64_t)__p, (uint64_t)v126, 0);
        v38 = (double)(unint64_t)((unint64_t)__p[13] / *(_QWORD *)(*(_QWORD *)(a1 + 336) + 520))
            / *(double *)(a1 + 992)
            * 1000.0
            * 1000.0
            * 1000.0;
        if ((unint64_t)((double)(unint64_t)__p[17] / *(double *)(a1 + 984) * 1000.0 * 1000.0 * 1000.0) <= (unint64_t)v38)
          v39 = (unint64_t)v38;
        else
          v39 = (unint64_t)((double)(unint64_t)__p[17] / *(double *)(a1 + 984) * 1000.0 * 1000.0 * 1000.0);
        v40 = *(_QWORD *)(a4 + 16);
        v41 = *(unint64_t **)(a4 + 8);
        if ((unint64_t)v41 >= v40)
        {
          v49 = *(unint64_t **)a4;
          v50 = ((uint64_t)v41 - *(_QWORD *)a4) >> 3;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v52 = v40 - (_QWORD)v49;
          if (v52 >> 2 > v51)
            v51 = v52 >> 2;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v53);
            v49 = *(unint64_t **)a4;
            v41 = *(unint64_t **)(a4 + 8);
          }
          else
          {
            v54 = 0;
          }
          v67 = (unint64_t *)&v54[8 * v50];
          v68 = &v54[8 * v53];
          *v67 = v39;
          v42 = v67 + 1;
          while (v41 != v49)
          {
            v69 = *--v41;
            *--v67 = v69;
          }
          *(_QWORD *)a4 = v67;
          *(_QWORD *)(a4 + 8) = v42;
          *(_QWORD *)(a4 + 16) = v68;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *v41 = v39;
          v42 = v41 + 1;
        }
        *(_QWORD *)(a4 + 8) = v42;
        if (HasDMAReadStall)
        {
          v70 = (double)(unint64_t)((unint64_t)__p[13] / *(_QWORD *)(*(_QWORD *)(a1 + 336) + 520))
              / *(double *)(a1 + 992)
              * 1000.0
              * 1000.0
              * 1000.0;
          if ((unint64_t)v70 >= (unint64_t)((double)(unint64_t)__p[17]
                                                         / *(double *)(a1 + 984)
                                                         * 1000.0
                                                         * 1000.0
                                                         * 1000.0))
            v71 = (unint64_t)((double)(unint64_t)__p[17] / *(double *)(a1 + 984) * 1000.0 * 1000.0 * 1000.0);
          else
            v71 = (unint64_t)v70;
        }
        else
        {
          v71 = 0;
        }
        v72 = a1;
        v73 = *(_QWORD *)(a7 + 16);
        v74 = *(unint64_t **)(a7 + 8);
        v125 = HasDMAReadStall;
        if ((unint64_t)v74 >= v73)
        {
          v76 = *(unint64_t **)a7;
          v77 = ((uint64_t)v74 - *(_QWORD *)a7) >> 3;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v79 = v73 - (_QWORD)v76;
          if (v79 >> 2 > v78)
            v78 = v79 >> 2;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          if (v80)
          {
            v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a7 + 16, v80);
            v76 = *(unint64_t **)a7;
            v74 = *(unint64_t **)(a7 + 8);
          }
          else
          {
            v81 = 0;
          }
          v82 = (unint64_t *)&v81[8 * v77];
          v83 = &v81[8 * v80];
          *v82 = v71;
          v75 = v82 + 1;
          while (v74 != v76)
          {
            v84 = *--v74;
            *--v82 = v84;
          }
          *(_QWORD *)a7 = v82;
          *(_QWORD *)(a7 + 8) = v75;
          *(_QWORD *)(a7 + 16) = v83;
          if (v76)
            operator delete(v76);
        }
        else
        {
          *v74 = v71;
          v75 = v74 + 1;
        }
        *(_QWORD *)(a7 + 8) = v75;
        v85 = v72;
        v86 = *(double *)(v72 + 984);
        v87 = *(_QWORD *)(v72 + 336);
        v88 = *(double *)(v72 + 992);
        if ((unint64_t)(v130 - (_BYTE *)v129) >= 9)
        {
          v89 = (double)(unint64_t)((unint64_t)__p[14] / *(_QWORD *)(v87 + 520))
              / v88
              * 1000.0
              * 1000.0
              * 1000.0;
          if ((unint64_t)((double)(unint64_t)__p[17] / v86 * 1000.0 * 1000.0 * 1000.0) <= (unint64_t)v89)
            v90 = (unint64_t)v89;
          else
            v90 = (unint64_t)((double)(unint64_t)__p[17] / v86 * 1000.0 * 1000.0 * 1000.0);
          v92 = *(unint64_t **)(a4 + 8);
          v91 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v92 >= v91)
          {
            v94 = *(unint64_t **)a4;
            v95 = ((uint64_t)v92 - *(_QWORD *)a4) >> 3;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v97 = v91 - (_QWORD)v94;
            if (v97 >> 2 > v96)
              v96 = v97 >> 2;
            if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
              v98 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v98 = v96;
            if (v98)
            {
              v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v98);
              v94 = *(unint64_t **)a4;
              v92 = *(unint64_t **)(a4 + 8);
            }
            else
            {
              v99 = 0;
            }
            v105 = (unint64_t *)&v99[8 * v95];
            v106 = &v99[8 * v98];
            *v105 = v90;
            v93 = v105 + 1;
            v85 = v72;
            while (v92 != v94)
            {
              v107 = *--v92;
              *--v105 = v107;
            }
            *(_QWORD *)a4 = v105;
            *(_QWORD *)(a4 + 8) = v93;
            *(_QWORD *)(a4 + 16) = v106;
            if (v94)
              operator delete(v94);
          }
          else
          {
            *v92 = v90;
            v93 = v92 + 1;
          }
          *(_QWORD *)(a4 + 8) = v93;
          if (v125)
          {
            v108 = (double)(unint64_t)((unint64_t)__p[14] / *(_QWORD *)(*(_QWORD *)(v85 + 336) + 520))
                 / *(double *)(v85 + 992)
                 * 1000.0
                 * 1000.0
                 * 1000.0;
            if ((unint64_t)v108 >= (unint64_t)((double)(unint64_t)__p[17]
                                                            / *(double *)(v85 + 984)
                                                            * 1000.0
                                                            * 1000.0
                                                            * 1000.0))
              v109 = (unint64_t)((double)(unint64_t)__p[17]
                                      / *(double *)(v85 + 984)
                                      * 1000.0
                                      * 1000.0
                                      * 1000.0);
            else
              v109 = (unint64_t)v108;
          }
          else
          {
            v109 = 0;
          }
          v111 = *(unint64_t **)(a7 + 8);
          v110 = *(_QWORD *)(a7 + 16);
          if ((unint64_t)v111 >= v110)
          {
            v113 = *(unint64_t **)a7;
            v114 = ((uint64_t)v111 - *(_QWORD *)a7) >> 3;
            v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v116 = v110 - (_QWORD)v113;
            if (v116 >> 2 > v115)
              v115 = v116 >> 2;
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
              v117 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v117 = v115;
            if (v117)
            {
              v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a7 + 16, v117);
              v113 = *(unint64_t **)a7;
              v111 = *(unint64_t **)(a7 + 8);
            }
            else
            {
              v118 = 0;
            }
            v119 = (unint64_t *)&v118[8 * v114];
            v120 = &v118[8 * v117];
            *v119 = v109;
            v112 = v119 + 1;
            while (v111 != v113)
            {
              v121 = *--v111;
              *--v119 = v121;
            }
            *(_QWORD *)a7 = v119;
            *(_QWORD *)(a7 + 8) = v112;
            *(_QWORD *)(a7 + 16) = v120;
            if (v113)
              operator delete(v113);
          }
          else
          {
            *v111 = v109;
            v112 = v111 + 1;
          }
          *(_QWORD *)(a7 + 8) = v112;
          v86 = *(double *)(v85 + 984);
          v87 = *(_QWORD *)(v85 + 336);
          v88 = *(double *)(v85 + 992);
        }
        *a5 = (unint64_t)((double)(unint64_t)__p[10] / *(double *)(v85 + 976) * 1000.0 * 1000.0 * 1000.0);
        v104 = (unint64_t)((double)(unint64_t)((unint64_t)__p[15] / *(_QWORD *)(v87 + 520))
                                / v88
                                * 1000.0
                                * 1000.0
                                * 1000.0);
        if ((unint64_t)((double)(unint64_t)__p[19] / v86 * 1000.0 * 1000.0 * 1000.0) > v104)
          v104 = (unint64_t)((double)(unint64_t)__p[19] / v86 * 1000.0 * 1000.0 * 1000.0);
      }
      *a6 = v104;
      if (v129)
      {
        v130 = v129;
        operator delete(v129);
      }
      v29 = 0;
    }
    if (__p[25])
    {
      __p[26] = __p[25];
      operator delete(__p[25]);
    }
    goto LABEL_139;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinCpBasedAllocator::CollectNEPerfNumbers();
  v29 = 3;
LABEL_139:
  v122 = v138;
  v138 = 0;
  if (v122)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v122);
    MEMORY[0x20BD002F8]();
  }
  return v29;
}

void sub_207039CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  uint64_t v47;

  if (__p)
    operator delete(__p);
  if (a46)
    operator delete(a46);
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v47 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::CollectPEPerfNumbers(uint64_t a1, ZinANELayer *this, int a3, uint64_t a4, _QWORD *a5, unint64_t *a6, uint64_t a7)
{
  ZinEngineLayerMirInfo *v14;
  _QWORD *v15;
  ZinEngineLayerMirInfo *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  double v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t *v64;
  char *v65;
  unint64_t v66;
  double v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  char *v77;
  unint64_t v78;
  ZinEngineLayerMirInfo *v79;
  _QWORD *v81;
  _QWORD *v82;
  _BYTE v83[2];
  void *__p;
  void *v85;
  _OWORD __src[28];
  int v87;
  uint64_t v88[5];
  int v89;
  uint64_t v90[5];
  int v91;
  uint64_t v92[6];
  ZinEngineLayerMirInfo *v93;

  ZinANELayer::CopyMirInfo(this, &v93);
  if (a3)
  {
    ZinMirL2Config::ZinMirSetTileHeight((ZinEngineLayerMirInfo *)((char *)v93 + 120), this, 1);
    ZinMirL2Config::SetPatchShape((uint64_t)v93 + 120, this, 1, 1, *(const ZinIrHalParameters **)(a1 + 336));
  }
  else
  {
    v81 = a5;
    ZinL2FootprintCalculator::ComputeNonResidentWU(*(ZinL2FootprintCalculator **)(a1 + 272), (ZinEngineLayerMirInfo **)this, (uint64_t)__src);
    v14 = v93;
    memcpy((char *)v93 + 120, __src, 0x1C0uLL);
    *((_DWORD *)v14 + 142) = v87;
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)v14 + 576, v88);
    *((_DWORD *)v14 + 154) = v89;
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)v14 + 624, v90);
    *((_DWORD *)v14 + 166) = v91;
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)v14 + 672, v92);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v92);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v90);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v88);
    a5 = v81;
  }
  memset(__src, 0, 200);
  v15 = operator new(8uLL);
  *((_QWORD *)&__src[12] + 1) = v15;
  *v15 = 0;
  *(_QWORD *)&__src[13] = v15 + 1;
  *((_QWORD *)&__src[13] + 1) = v15 + 1;
  __src[14] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  __src[15] = _Q0;
  __src[16] = _Q0;
  __src[17] = _Q0;
  __src[18] = _Q0;
  *(_QWORD *)&__src[19] = 0;
  BYTE8(__src[19]) = 0;
  *(_QWORD *)&__src[20] = 0;
  v21 = v93;
  v83[0] = a3;
  v83[1] = a3;
  std::vector<BOOL>::vector(&__p, v83, 2);
  v22 = ZinCpBasedAllocator::CalculatePerf(a1, this, (uint64_t)v21, &__p, a3, (ZinPerfDescriptor *)__src);
  if (__p)
    operator delete(__p);
  if (v22)
  {
    v23 = 3;
    goto LABEL_94;
  }
  (*(void (**)(void **__return_ptr, ZinANELayer *))(*(_QWORD *)this + 512))(&__p, this);
  if ((a3 & 1) == 0)
  {
    v29 = v85;
    if (v85 == __p)
    {
LABEL_55:
      v55 = *(double *)(a1 + 984);
      *a5 = (unint64_t)((double)*(unint64_t *)&__src[6] / v55 * 1000.0 * 1000.0 * 1000.0);
      v56 = (unint64_t)((double)*((unint64_t *)&__src[9] + 1) / v55 * 1000.0 * 1000.0 * 1000.0);
      v57 = (double)(unint64_t)(*((_QWORD *)&__src[7] + 1) / *(_QWORD *)(*(_QWORD *)(a1 + 336) + 520))
          / *(double *)(a1 + 992)
          * 1000.0
          * 1000.0
          * 1000.0;
      if (v56 <= (unint64_t)v57)
        v56 = (unint64_t)v57;
      goto LABEL_91;
    }
    v82 = a5;
    v30 = 0;
    while (1)
    {
      if (v30 == 1)
      {
        if (((*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)this + 664))(this) & 1) == 0)
          goto LABEL_18;
      }
      else if (v30 || ((*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)this + 656))(this) & 1) == 0)
      {
LABEL_18:
        v32 = (double)(unint64_t)(*((_QWORD *)&__src[6] + v30 + 1) / *(_QWORD *)(*(_QWORD *)(a1 + 336) + 520))
            / *(double *)(a1 + 992)
            * 1000.0
            * 1000.0
            * 1000.0;
        if ((unint64_t)((double)*((unint64_t *)&__src[8] + 1)
                              / *(double *)(a1 + 984)
                              * 1000.0
                              * 1000.0
                              * 1000.0) <= (unint64_t)v32)
          v31 = (unint64_t)v32;
        else
          v31 = (unint64_t)((double)*((unint64_t *)&__src[8] + 1)
                                 / *(double *)(a1 + 984)
                                 * 1000.0
                                 * 1000.0
                                 * 1000.0);
        goto LABEL_21;
      }
      v31 = 1;
LABEL_21:
      v34 = *(unint64_t **)(a4 + 8);
      v33 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v34 >= v33)
      {
        v36 = *(unint64_t **)a4;
        v37 = ((uint64_t)v34 - *(_QWORD *)a4) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v39 = v33 - (_QWORD)v36;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v40);
          v36 = *(unint64_t **)a4;
          v34 = *(unint64_t **)(a4 + 8);
        }
        else
        {
          v41 = 0;
        }
        v42 = (unint64_t *)&v41[8 * v37];
        *v42 = v31;
        v35 = v42 + 1;
        while (v34 != v36)
        {
          v43 = *--v34;
          *--v42 = v43;
        }
        *(_QWORD *)a4 = v42;
        *(_QWORD *)(a4 + 8) = v35;
        *(_QWORD *)(a4 + 16) = &v41[8 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v34 = v31;
        v35 = v34 + 1;
      }
      *(_QWORD *)(a4 + 8) = v35;
      v45 = *(_QWORD **)(a7 + 8);
      v44 = *(_QWORD *)(a7 + 16);
      if ((unint64_t)v45 >= v44)
      {
        v47 = *(_QWORD **)a7;
        v48 = ((uint64_t)v45 - *(_QWORD *)a7) >> 3;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v50 = v44 - (_QWORD)v47;
        if (v50 >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a7 + 16, v51);
          v47 = *(_QWORD **)a7;
          v45 = *(_QWORD **)(a7 + 8);
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[8 * v48];
        *(_QWORD *)v53 = 0;
        v46 = v53 + 8;
        while (v45 != v47)
        {
          v54 = *--v45;
          *((_QWORD *)v53 - 1) = v54;
          v53 -= 8;
        }
        *(_QWORD *)a7 = v53;
        *(_QWORD *)(a7 + 8) = v46;
        *(_QWORD *)(a7 + 16) = &v52[8 * v51];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v45 = 0;
        v46 = v45 + 1;
      }
      *(_QWORD *)(a7 + 8) = v46;
      ++v30;
      v29 = __p;
      if (v30 >= ((_BYTE *)v85 - (_BYTE *)__p) >> 3)
      {
        a5 = v82;
        goto LABEL_55;
      }
    }
  }
  v24 = (unint64_t)((double)*((unint64_t *)&__src[8] + 1)
                         / *(double *)(a1 + 984)
                         * 1000.0
                         * 1000.0
                         * 1000.0);
  v26 = (_QWORD *)(a4 + 16);
  v25 = *(_QWORD *)(a4 + 16);
  v27 = *(unint64_t **)(a4 + 8);
  if ((unint64_t)v27 >= v25)
  {
    v58 = *(unint64_t **)a4;
    v59 = ((uint64_t)v27 - *(_QWORD *)a4) >> 3;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v61 = v25 - (_QWORD)v58;
    if (v61 >> 2 > v60)
      v60 = v61 >> 2;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v62 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v62);
      v58 = *(unint64_t **)a4;
      v27 = *(unint64_t **)(a4 + 8);
    }
    else
    {
      v63 = 0;
    }
    v64 = (unint64_t *)&v63[8 * v59];
    v65 = &v63[8 * v62];
    *v64 = v24;
    v28 = v64 + 1;
    while (v27 != v58)
    {
      v66 = *--v27;
      *--v64 = v66;
    }
    *(_QWORD *)a4 = v64;
    *(_QWORD *)(a4 + 8) = v28;
    *(_QWORD *)(a4 + 16) = v65;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *v27 = v24;
    v28 = v27 + 1;
  }
  *(_QWORD *)(a4 + 8) = v28;
  v29 = __p;
  v67 = *(double *)(a1 + 984);
  if ((unint64_t)((_BYTE *)v85 - (_BYTE *)__p) >= 9)
  {
    v68 = (unint64_t)((double)*((unint64_t *)&__src[8] + 1) / v67 * 1000.0 * 1000.0 * 1000.0);
    if ((unint64_t)v28 >= *v26)
    {
      v70 = *(unint64_t **)a4;
      v71 = ((uint64_t)v28 - *(_QWORD *)a4) >> 3;
      v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v73 = *v26 - (_QWORD)v70;
      if (v73 >> 2 > v72)
        v72 = v73 >> 2;
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
      {
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v74);
        v70 = *(unint64_t **)a4;
        v28 = *(unint64_t **)(a4 + 8);
      }
      else
      {
        v75 = 0;
      }
      v76 = (unint64_t *)&v75[8 * v71];
      v77 = &v75[8 * v74];
      *v76 = v68;
      v69 = v76 + 1;
      while (v28 != v70)
      {
        v78 = *--v28;
        *--v76 = v78;
      }
      *(_QWORD *)a4 = v76;
      *(_QWORD *)(a4 + 8) = v69;
      *(_QWORD *)(a4 + 16) = v77;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *v28 = v68;
      v69 = v28 + 1;
    }
    *(_QWORD *)(a4 + 8) = v69;
    v67 = *(double *)(a1 + 984);
    v29 = __p;
  }
  *a5 = (unint64_t)((double)*(unint64_t *)&__src[6] / v67 * 1000.0 * 1000.0 * 1000.0);
  v56 = (unint64_t)((double)*((unint64_t *)&__src[9] + 1) / v67 * 1000.0 * 1000.0 * 1000.0);
LABEL_91:
  *a6 = v56;
  if (v29)
  {
    v85 = v29;
    operator delete(v29);
  }
  v23 = 0;
LABEL_94:
  if (*((_QWORD *)&__src[12] + 1))
  {
    *(_QWORD *)&__src[13] = *((_QWORD *)&__src[12] + 1);
    operator delete(*((void **)&__src[12] + 1));
  }
  v79 = v93;
  v93 = 0;
  if (v79)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v79);
    MEMORY[0x20BD002F8]();
  }
  return v23;
}

void sub_20703A494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;

  if (__p)
    operator delete(__p);
  v18 = *(void **)(v15 + 200);
  if (v18)
  {
    *(_QWORD *)(v15 + 208) = v18;
    operator delete(v18);
  }
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v16 - 120), 0);
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::CollectEngineCycleBehavior(uint64_t a1, ZinEnginePerf ***this, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, unint64_t *a7, unint64_t *a8, uint64_t a9)
{
  uint64_t result;

  if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)this))
  {
    if (!ZinCpBasedAllocator::CollectNEPerfNumbers(a1, this, 1, a3, a5, a7, a9))
    {
      result = ZinCpBasedAllocator::CollectNEPerfNumbers(a1, this, 0, a4, a6, a8, a9);
      if (!(_DWORD)result)
        return result;
    }
    return 3;
  }
  if (ZinCpBasedAllocator::CollectPEPerfNumbers(a1, (ZinANELayer *)this, 1, a3, a5, a7, a9))
    return 3;
  result = ZinCpBasedAllocator::CollectPEPerfNumbers(a1, (ZinANELayer *)this, 0, a4, a6, a8, a9);
  if ((_DWORD)result)
    return 3;
  return result;
}

uint64_t ZinCpBasedAllocator::SetNPChainExecutionBehavior(ZinCpBasedAllocator *this, const ZinNELayer *a2, const ZinPELayer *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  ZinANELayer *v9;
  ZinANELayer *v10;
  ZinANELayer *v11;
  const ZinIrOpLayer *v12;
  uint64_t v13;
  ZinIrOpLayerGraph *v14;
  const ZinIrTensor **v15;
  ZinIrRegAllocUtil **v16;
  ZinEngineLayerMirInfo *v17;
  _OWORD *v18;
  ZinEngineLayerMirInfo *v19;
  _OWORD *v20;
  unint64_t IndexOfMatchedIncomingLayer;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t ***v33;
  _QWORD *v34;
  _BYTE *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  ZinEnginePerf *v40;
  __int128 v41;
  double v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  l2a *v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t *v49;
  const ZinANELayer *v50;
  _QWORD *v51;
  _OWORD *v52;
  uint64_t ***v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  __int128 v58;
  double v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  l2a *v65;
  uint64_t *v66;
  __int128 v67;
  _BOOL8 HasDMAReadStall;
  unint64_t ChainedOverheadCycleCount;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  double v74;
  uint64_t *v75;
  _QWORD *v76;
  ZinMirL2Config *v77;
  ZinEngineLayerMirInfo *v78;
  ZinEngineLayerMirInfo *v79;
  uint64_t v81;
  __int128 v82;
  ZinANELayer *v83;
  uint64_t ChainBufferSize;
  char v85;
  _OWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  _BOOL4 v89;
  int v90;
  _OWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  _OWORD v96[2];
  uint64_t v97;
  void *v98;
  _BYTE *v99;
  _OWORD v100[6];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  char v122;
  int v123;
  _OWORD v124[5];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  void *v133;
  void *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  void *__p[109];
  __int128 v146[2];
  void *v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  const ZinIrOpLayer *v158;
  int v159;
  uint64_t (***v160)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  char v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  char v179;
  void *v180[3];
  uint64_t (**v181)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  ZinANELayer *v192;
  int v193;
  void **v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  __int16 v210;
  __int128 v211;
  uint64_t v212;
  __int16 v213;
  char v214;
  char v215;
  __int16 v216;
  char v217;
  char v218;
  __int16 v219;
  char v220;
  char v221;
  char v222;
  char v223;
  char v224;
  char v225;
  char v226;
  char v227;
  char v228;
  char v229;
  char v230;
  char v231;
  char v232;
  char v233;
  __int16 v234;
  char v235;
  char v236;
  int v237;
  _OWORD __src[28];
  int v239;
  __int128 v240;
  __int128 v241;
  int v242;
  int v243;
  __int128 v244;
  __int128 v245;
  int v246;
  int v247;
  __int128 v248;
  __int128 v249;
  int v250;
  _OWORD v251[28];
  int v252;
  __int128 v253;
  __int128 v254;
  int v255;
  int v256;
  __int128 v257;
  __int128 v258;
  int v259;
  int v260;
  __int128 v261;
  __int128 v262;
  int v263;
  ZinEngineLayerMirInfo *v264;
  ZinEngineLayerMirInfo *v265;
  void **v266;
  void **v267;

  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v85 = v6;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v5;
  ZinANELayer::CopyMirInfo(v11, &v265);
  ZinANELayer::CopyMirInfo(v10, &v264);
  v14 = (ZinIrOpLayerGraph *)*((_QWORD *)v12 + 19);
  v251[0] = vdupq_n_s64(1uLL);
  BYTE8(v251[4]) = 0;
  *(_QWORD *)&v251[3] = 0;
  *((_QWORD *)&v251[2] + 1) = 0;
  BYTE8(v251[3]) = 0;
  v251[1] = 1uLL;
  LOBYTE(v251[2]) = 0;
  *(_QWORD *)&v251[4] = 0;
  v251[5] = 1uLL;
  memset(&v251[6], 0, 18);
  *(_OWORD *)((char *)&v251[7] + 8) = xmmword_207A7E150;
  BYTE8(v251[8]) = 0;
  DWORD2(v251[14]) = 0;
  *((_QWORD *)&v251[18] + 1) = 0;
  memset(&v251[15], 0, 49);
  LODWORD(v251[19]) = 0;
  *(_QWORD *)&v251[23] = 0;
  *(_OWORD *)((char *)&v251[19] + 8) = 0u;
  *(_OWORD *)((char *)&v251[20] + 8) = 0u;
  *(_OWORD *)((char *)&v251[21] + 8) = 0u;
  BYTE8(v251[22]) = 0;
  DWORD2(v251[23]) = 0;
  *((_QWORD *)&v251[27] + 1) = 0;
  memset(&v251[24], 0, 49);
  v252 = 0;
  v253 = 0u;
  v254 = 0u;
  *(_OWORD *)((char *)&v251[9] + 8) = 0u;
  *(_OWORD *)((char *)&v251[10] + 8) = 0u;
  *(_OWORD *)((char *)&v251[11] + 1) = 0u;
  memset(&v251[13], 0, 17);
  *((_QWORD *)&v251[12] + 1) = 0;
  v255 = 1065353216;
  v256 = 0;
  v257 = 0u;
  v258 = 0u;
  v259 = 1065353216;
  v260 = 0;
  v261 = 0u;
  v262 = 0u;
  v263 = 1065353216;
  __src[0] = v251[0];
  BYTE8(__src[4]) = 0;
  *(_QWORD *)&__src[3] = 0;
  *((_QWORD *)&__src[2] + 1) = 0;
  BYTE8(__src[3]) = 0;
  __src[1] = 1uLL;
  LOBYTE(__src[2]) = 0;
  *(_QWORD *)&__src[4] = 0;
  __src[5] = 1uLL;
  memset(&__src[6], 0, 18);
  *(_OWORD *)((char *)&__src[7] + 8) = xmmword_207A7E150;
  BYTE8(__src[8]) = 0;
  DWORD2(__src[14]) = 0;
  *((_QWORD *)&__src[18] + 1) = 0;
  memset(&__src[15], 0, 49);
  LODWORD(__src[19]) = 0;
  *(_QWORD *)&__src[23] = 0;
  *(_OWORD *)((char *)&__src[19] + 8) = 0u;
  *(_OWORD *)((char *)&__src[20] + 8) = 0u;
  *(_OWORD *)((char *)&__src[21] + 8) = 0u;
  BYTE8(__src[22]) = 0;
  DWORD2(__src[23]) = 0;
  *((_QWORD *)&__src[27] + 1) = 0;
  memset(&__src[24], 0, 49);
  v239 = 0;
  v240 = 0u;
  v241 = 0u;
  *(_OWORD *)((char *)&__src[9] + 8) = 0u;
  *(_OWORD *)((char *)&__src[10] + 8) = 0u;
  *(_OWORD *)((char *)&__src[11] + 1) = 0u;
  memset(&__src[13], 0, 17);
  *((_QWORD *)&__src[12] + 1) = 0;
  v242 = 1065353216;
  v243 = 0;
  v244 = 0u;
  v245 = 0u;
  v246 = 1065353216;
  v247 = 0;
  v248 = 0u;
  v249 = 0u;
  v250 = 1065353216;
  v15 = *(const ZinIrTensor ***)(v13 + 272);
  v16 = (ZinIrRegAllocUtil **)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
  ChainBufferSize = ZinL2FootprintCalculator::GetChainBufferSize(v15, v16, (ZinMirL2Config *)v251, (ZinMirL2Config *)__src);
  v17 = v265;
  v18 = (_OWORD *)((char *)v265 + 120);
  memcpy((char *)v265 + 120, v251, 0x1C0uLL);
  *((_DWORD *)v17 + 142) = v252;
  if (v18 == v251)
  {
    *((_DWORD *)v17 + 154) = v256;
    *((_DWORD *)v17 + 166) = v260;
  }
  else
  {
    *((_DWORD *)v17 + 152) = v255;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v17 + 72, (uint64_t *)v254, 0);
    *((_DWORD *)v17 + 154) = v256;
    *((_DWORD *)v17 + 164) = v259;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v17 + 78, (uint64_t *)v258, 0);
    *((_DWORD *)v17 + 166) = v260;
    *((_DWORD *)v17 + 176) = v263;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v17 + 84, (uint64_t *)v262, 0);
  }
  v19 = v264;
  v20 = (_OWORD *)((char *)v264 + 120);
  memcpy((char *)v264 + 120, __src, 0x1C0uLL);
  *((_DWORD *)v19 + 142) = v239;
  if (v20 == __src)
  {
    *((_DWORD *)v19 + 154) = v243;
    *((_DWORD *)v19 + 166) = v247;
  }
  else
  {
    *((_DWORD *)v19 + 152) = v242;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v19 + 72, (uint64_t *)v241, 0);
    *((_DWORD *)v19 + 154) = v243;
    *((_DWORD *)v19 + 164) = v246;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v19 + 78, (uint64_t *)v245, 0);
    *((_DWORD *)v19 + 166) = v247;
    *((_DWORD *)v19 + 176) = v250;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v19 + 84, (uint64_t *)v249, 0);
  }
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  LOBYTE(v192) = 0;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v181 = &off_24C01F198;
  v210 = 0;
  v214 = 0;
  v215 = 0;
  v216 = 256;
  v211 = 0u;
  v212 = 0;
  v213 = 0;
  v217 = 0;
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v221 = 0;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v229 = 0;
  v230 = 0;
  v231 = 0;
  v232 = 0;
  v233 = 0;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  v237 = 0;
  LOBYTE(v120) = v8;
  std::vector<BOOL>::vector(__p, &v120, 1);
  ZinCpBasedAllocator::GetCustomPerfInfo(v13, (uint64_t)v12, __p, v85, (uint64_t)v265, (uint64_t)&v181);
  if (__p[0])
    operator delete(__p[0]);
  LOBYTE(__p[0]) = v8;
  BYTE1(__p[0]) = v8;
  std::vector<BOOL>::vector(v180, __p, 2);
  IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(v14, v10, v12);
  *(_QWORD *)((char *)v180[0] + ((IndexOfMatchedIncomingLayer >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << IndexOfMatchedIncomingLayer;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  LOBYTE(v158) = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v147 = &unk_24C01F1F0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  ZinCpBasedAllocator::GetCustomPerfInfo(v13, (uint64_t)v10, v180, v85, (uint64_t)v264, (uint64_t)&v147);
  v158 = v12;
  v159 = 1;
  v160 = &v181;
  if (!v161)
    v161 = 1;
  v192 = v10;
  v193 = 1;
  v194 = &v147;
  if (!v195)
    v195 = 1;
  ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)(v13 + 336), *(double *)(*(_QWORD *)(v13 + 344) + 104), *(_DWORD *)(*(_QWORD *)(v13 + 344) + 112), *(_DWORD *)(*(_QWORD *)(v13 + 344) + 116), (uint64_t)v146);
  v22 = *(_QWORD *)(v13 + 336);
  v120 = 0x1000000010101;
  v121 = 0;
  v122 = 1;
  v123 = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)__p, v22, v146, &v120);
  v132 = 0;
  v131 = 0u;
  v130 = 0u;
  v129 = 0u;
  v128 = 0u;
  v127 = 0u;
  v126 = 0u;
  v125 = 0u;
  memset(v124, 0, sizeof(v124));
  v23 = operator new(8uLL);
  v133 = v23;
  *v23 = 0;
  v135 = v23 + 1;
  v134 = v23 + 1;
  v137 = 0;
  v136 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v138 = _Q0;
  v139 = _Q0;
  v140 = _Q0;
  v82 = _Q0;
  v141 = _Q0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (ZinANELayer::CalculatePerf(v12, (ZinIrPerf *)__p, (const ZinCustomPerfInfo *)&v181, (ZinPerfDescriptor *)v124))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinCpBasedAllocator::SetNPChainExecutionBehavior();
    v29 = 3;
  }
  else
  {
    v30 = *(_QWORD *)(v13 + 336);
    *(_QWORD *)&v100[0] = 0x1000000010101;
    WORD4(v100[0]) = 0;
    BYTE10(v100[0]) = 1;
    *(_DWORD *)((char *)v100 + 11) = 0;
    ZinIrPerf::ZinIrPerf((uint64_t)&v120, v30, v146, (uint64_t *)v100);
    v107 = 0;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    memset(v100, 0, sizeof(v100));
    v31 = operator new(8uLL);
    v108 = v31;
    *v31 = 0;
    v110 = v31 + 1;
    v109 = v31 + 1;
    v112 = 0;
    v111 = 0;
    v113 = v82;
    v114 = v82;
    v115 = v82;
    v116 = v82;
    v117 = 0;
    v118 = 0;
    v119 = 0;
    if (ZinANELayer::CalculatePerf(v10, (ZinIrPerf *)&v120, (const ZinCustomPerfInfo *)&v147, (ZinPerfDescriptor *)v100))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinCpBasedAllocator::SetNPChainExecutionBehavior();
      v29 = 3;
    }
    else
    {
      v83 = v10;
      v98 = v12;
      v266 = &v98;
      v32 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>(v13 + 112, &v98, (uint64_t)&std::piecewise_construct, &v266);
      (*(void (**)(void **__return_ptr, const ZinIrOpLayer *))(*(_QWORD *)v12 + 512))(&v98, v12);
      v33 = (uint64_t ***)(v32 + 3);
      v34 = v98;
      v35 = v99;
      if (v99 != v98)
      {
        v36 = 0;
        do
        {
          if ((v8 & 1) == 0)
          {
            v88 = 0;
            v88 = v34[v36];
            LayerCycleAndFootprintEstimator::GetReadBehaviors(*v33, (char **)&v266);
            v37 = v266[v36];
            v267 = v266;
            operator delete(v266);
            v38 = (unint64_t)((double)*((unint64_t *)&v128 + 1)
                                   / *(double *)(v13 + 984)
                                   * 1000.0
                                   * 1000.0
                                   * 1000.0);
            v39 = (char *)v124 + 8 * v36;
            if (v38 <= (unint64_t)((double)(unint64_t)(*((_QWORD *)v39 + 13)
                                                                    / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                                         / *(double *)(v13 + 992)
                                         * 1000.0
                                         * 1000.0
                                         * 1000.0))
              v38 = (unint64_t)((double)(unint64_t)(*((_QWORD *)v39 + 13)
                                                                / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                                     / *(double *)(v13 + 992)
                                     * 1000.0
                                     * 1000.0
                                     * 1000.0);
            v37[4] = v38;
            v40 = *(ZinEnginePerf **)(v88 + 96);
            v97 = *(_QWORD *)(v13 + 1008);
            v41 = *(_OWORD *)(v13 + 992);
            v96[0] = *(_OWORD *)(v13 + 976);
            v96[1] = v41;
            if (ZinEnginePerf::HasDMAReadStall(v40, v12, (uint64_t)v124, (uint64_t)v96, 0))
            {
              v42 = (double)(unint64_t)(*((_QWORD *)v39 + 13) / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                  / *(double *)(v13 + 992)
                  * 1000.0
                  * 1000.0
                  * 1000.0;
              if ((unint64_t)v42 >= (unint64_t)((double)*((unint64_t *)&v128 + 1)
                                                             / *(double *)(v13 + 984)
                                                             * 1000.0
                                                             * 1000.0
                                                             * 1000.0))
                v43 = (unint64_t)((double)*((unint64_t *)&v128 + 1)
                                       / *(double *)(v13 + 984)
                                       * 1000.0
                                       * 1000.0
                                       * 1000.0);
              else
                v43 = (unint64_t)v42;
            }
            else
            {
              v43 = 0;
            }
            LayerCycleAndFootprintEstimator::GetReadBehaviors(*v33, (char **)&v266);
            v44 = v266[v36];
            v267 = v266;
            operator delete(v266);
            v44[15] = v43;
            v94 = v12;
            v95 = v36 != 0;
            LayerCycleAndFootprintEstimator::GetReadBehaviors(*v33, (char **)&v266);
            v45 = v266[v36];
            v267 = v266;
            operator delete(v266);
            v266 = (void **)&v88;
            v46 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v13 + 152, &v88, (uint64_t)&std::piecewise_construct, &v266)[3];
            v47 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)(v13 + 192), (int *)&v94);
            if (!v47)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v45[5] = DMABuffer::CalculateSrcSize((uint64_t)v12, v36 != 0, v46, v47[4], 0, *(unsigned __int8 **)(v13 + 336), (uint64_t)v251);
            v34 = v98;
            v35 = v99;
          }
          ++v36;
        }
        while (v36 < (v35 - (_BYTE *)v34) >> 3);
      }
      v48 = *v33;
      (*v33)[3][5] = (unint64_t)((double)(unint64_t)v125
                                      / *(double *)(v13 + 976)
                                      * 1000.0
                                      * 1000.0
                                      * 1000.0);
      v49 = v48[4];
      v49[12] = (unint64_t)((double)*((unint64_t *)&v129 + 1)
                                 / *(double *)(v13 + 984)
                                 * 1000.0
                                 * 1000.0
                                 * 1000.0);
      v49[13] = ChainBufferSize;
      v50 = v83;
      v94 = v83;
      v266 = &v94;
      v51 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>(v13 + 112, &v94, (uint64_t)&std::piecewise_construct, &v266);
      (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(_QWORD *)v50 + 512))(&v94, v50);
      v52 = (_OWORD *)(v13 + 976);
      v53 = (uint64_t ***)(v51 + 3);
      v54 = v94;
      if ((void *)v95 == v94)
      {
        v81 = 0;
      }
      else
      {
        v55 = 0;
        v81 = 0;
        do
        {
          v93 = 0;
          v93 = v54[v55];
          if (*(const ZinIrOpLayer **)(v93 + 96) == v12)
          {
            LayerCycleAndFootprintEstimator::GetReadBehaviors(*v53, (char **)&v266);
            v61 = v266[v55];
            v267 = v266;
            operator delete(v266);
            v61[12] = (unint64_t)((double)*((unint64_t *)&v103 + 1)
                                       / *(double *)(v13 + 984)
                                       * 1000.0
                                       * 1000.0
                                       * 1000.0);
            LayerCycleAndFootprintEstimator::GetReadBehaviors(*v53, (char **)&v266);
            v62 = v266[v55];
            v267 = v266;
            operator delete(v266);
            v62[13] = ChainBufferSize;
            v81 = v55;
          }
          else if ((v8 & 1) == 0)
          {
            LayerCycleAndFootprintEstimator::GetReadBehaviors(*v53, (char **)&v266);
            v56 = v266[v55];
            v267 = v266;
            operator delete(v266);
            v57 = (unint64_t)((double)*((unint64_t *)&v103 + 1)
                                   / *(double *)(v13 + 984)
                                   * 1000.0
                                   * 1000.0
                                   * 1000.0);
            if (v57 <= (unint64_t)((double)(unint64_t)(*((_QWORD *)&v101 + v55 + 1)
                                                                    / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                                         / *(double *)(v13 + 992)
                                         * 1000.0
                                         * 1000.0
                                         * 1000.0))
              v57 = (unint64_t)((double)(unint64_t)(*((_QWORD *)&v101 + v55 + 1)
                                                                / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                                     / *(double *)(v13 + 992)
                                     * 1000.0
                                     * 1000.0
                                     * 1000.0);
            v56[6] = v57;
            v58 = *(_OWORD *)(v13 + 992);
            v91[0] = *v52;
            v91[1] = v58;
            v92 = *(_QWORD *)(v13 + 1008);
            if (ZinEnginePerf::HasDMAReadStall(v12, v50, (uint64_t)v100, (uint64_t)v91, 0))
            {
              v59 = (double)(unint64_t)(*((_QWORD *)&v101 + v55 + 1) / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                  / *(double *)(v13 + 992)
                  * 1000.0
                  * 1000.0
                  * 1000.0;
              if ((unint64_t)v59 >= (unint64_t)((double)*((unint64_t *)&v103 + 1)
                                                             / *(double *)(v13 + 984)
                                                             * 1000.0
                                                             * 1000.0
                                                             * 1000.0))
                v60 = (unint64_t)((double)*((unint64_t *)&v103 + 1)
                                       / *(double *)(v13 + 984)
                                       * 1000.0
                                       * 1000.0
                                       * 1000.0);
              else
                v60 = (unint64_t)v59;
            }
            else
            {
              v60 = 0;
            }
            LayerCycleAndFootprintEstimator::GetReadBehaviors(*v53, (char **)&v266);
            v63 = v266[v55];
            v267 = v266;
            operator delete(v266);
            v63[15] = v60 != 0;
            v88 = (uint64_t)v50;
            v89 = v55 != 0;
            v90 = 0;
            LayerCycleAndFootprintEstimator::GetReadBehaviors(*v53, (char **)&v266);
            v64 = v266[v55];
            v267 = v266;
            operator delete(v266);
            v266 = (void **)&v93;
            v65 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v13 + 152, &v93, (uint64_t)&std::piecewise_construct, &v266)[3];
            v66 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)(v13 + 192), (int *)&v88);
            if (!v66)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v64[7] = DMABuffer::CalculateSrcSize((uint64_t)v83, v55 != 0, v65, v66[4], 0, *(unsigned __int8 **)(v13 + 336), (uint64_t)__src);
            v50 = v83;
          }
          ++v55;
          v54 = v94;
        }
        while (v55 < (uint64_t)(v95 - (_QWORD)v94) >> 3);
      }
      *(_QWORD *)((*v53)[3][2] + 8 * v81) = (unint64_t)((double)(unint64_t)v101
                                                             / *(double *)(v13 + 984)
                                                             * 1000.0
                                                             * 1000.0
                                                             * 1000.0);
      v67 = *(_OWORD *)(v13 + 992);
      v86[0] = *v52;
      v86[1] = v67;
      v87 = *(_QWORD *)(v13 + 1008);
      HasDMAReadStall = ZinEnginePerf::HasDMAReadStall(v12, v50, (uint64_t)v100, (uint64_t)v86, 1);
      if (HasDMAReadStall)
      {
        ChainedOverheadCycleCount = ZinCpBasedAllocator::GetChainedOverheadCycleCount(HasDMAReadStall, (uint64_t)v33, v53, v81);
        (*v33)[4][16] = ChainedOverheadCycleCount;
        LayerCycleAndFootprintEstimator::GetReadBehaviors(*v53, (char **)&v266);
        v70 = v266[v81];
        v267 = v266;
        operator delete(v266);
        v70[16] = ChainedOverheadCycleCount;
      }
      if ((v85 & 1) == 0)
      {
        v266 = (void **)v50;
        v71 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)(v13 + 232), &v266);
        if (!v71)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v72 = v71[3];
        v73 = (unint64_t)((double)*((unint64_t *)&v104 + 1)
                               / *(double *)(v13 + 984)
                               * 1000.0
                               * 1000.0
                               * 1000.0);
        v74 = (double)(unint64_t)(*((_QWORD *)&v102 + 1) / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
            / *(double *)(v13 + 992)
            * 1000.0
            * 1000.0
            * 1000.0;
        if (v73 <= (unint64_t)v74)
          v73 = (unint64_t)v74;
        (*v53)[4][6] = v73;
        v88 = 0;
        v88 = (*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0, 0);
        v75 = (*v53)[4];
        v266 = (void **)&v88;
        v76 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v13 + 152, &v88, (uint64_t)&std::piecewise_construct, &v266);
        v75[7] = DMABuffer::CalculateDstSize((ZinEngineLayerMirInfo **)v50, (const ZinANELayer *)v76[3], v72, 0, *(ZinIrHalParameters **)(v13 + 336), (const ZinIrHalParameters *)__src, v77);
      }
      if (v94)
      {
        v95 = (unint64_t)v94;
        operator delete(v94);
      }
      if (v98)
      {
        v99 = v98;
        operator delete(v98);
      }
      v29 = 0;
    }
    if (v108)
    {
      v109 = v108;
      operator delete(v108);
    }
    ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&v120);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)__p);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v147);
  if (v180[0])
    operator delete(v180[0]);
  v181 = &off_24C01F198;
  if ((_QWORD)v211)
  {
    *((_QWORD *)&v211 + 1) = v211;
    operator delete((void *)v211);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v181);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v248);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v244);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v240);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v261);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v257);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v253);
  v78 = v264;
  v264 = 0;
  if (v78)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v78);
    MEMORY[0x20BD002F8]();
  }
  v79 = v265;
  v265 = 0;
  if (v79)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v79);
    MEMORY[0x20BD002F8]();
  }
  return v29;
}

void sub_20703B6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  uint64_t v46;
  void *v48;
  void *v49;

  if (__p)
    operator delete(__p);
  if (a46)
    operator delete(a46);
  v48 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v48;
    operator delete(v48);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x288]);
  v49 = (void *)STACK[0x6B8];
  if (STACK[0x6B8])
  {
    STACK[0x6C0] = (unint64_t)v49;
    operator delete(v49);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x740]);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&STACK[0xAD0]);
  if (STACK[0xD00])
    operator delete((void *)STACK[0xD00]);
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0xD18]);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0xFF0]);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x1240]);
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v46 - 160), 0);
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v46 - 152), 0);
  _Unwind_Resume(a1);
}

void sub_20703B7FC()
{
  JUMPOUT(0x20703B7C8);
}

unint64_t ZinCpBasedAllocator::GetChainedOverheadCycleCount(uint64_t a1, uint64_t a2, uint64_t ***a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  void *__p[3];

  if (**(_QWORD **)(*(_QWORD *)a2 + 24) > (unint64_t)*(*a3)[3])
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 96);
  LayerCycleAndFootprintEstimator::GetReadBehaviors(*a3, (char **)__p);
  v7 = *((_QWORD *)__p[0] + a4);
  __p[1] = __p[0];
  operator delete(__p[0]);
  if (*(_QWORD *)(v7 + 96) >= v6)
    return v6;
  else
    return *(_QWORD *)(v7 + 96);
}

uint64_t ZinCpBasedAllocator::SetPNChainExecutionBehavior(ZinCpBasedAllocator *this, const ZinPELayer *a2, const ZinNELayer *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  ZinANELayer *v9;
  ZinANELayer *v10;
  ZinANELayer *v11;
  ZinANELayer *v12;
  uint64_t v13;
  const ZinIrTensor **v14;
  ZinIrRegAllocUtil **v15;
  ZinEngineLayerMirInfo *v16;
  _OWORD *v17;
  uint64_t v18;
  ZinEngineLayerMirInfo *v19;
  _OWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _BYTE *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  ZinEnginePerf *v37;
  __int128 v38;
  double v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  l2a *v43;
  uint64_t *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  __int128 v53;
  double v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  l2a *v60;
  uint64_t *v61;
  __int128 v62;
  const ZinANELayer *v63;
  uint64_t v64;
  uint64_t **v65;
  unint64_t v66;
  _QWORD *v67;
  _BOOL4 IsLowThroughputPEPool;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  uint64_t v76;
  _QWORD *v77;
  ZinMirL2Config *v78;
  ZinEngineLayerMirInfo *v79;
  ZinEngineLayerMirInfo *v80;
  __int128 v82;
  unint64_t v83;
  char v84;
  uint64_t ChainBufferSize;
  ZinANELayer *v86;
  _OWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  int v91;
  _OWORD v92[2];
  uint64_t v93;
  uint64_t v94;
  void *v95;
  unint64_t v96;
  _OWORD v97[2];
  uint64_t v98;
  void *v99;
  _BYTE *v100;
  _OWORD v101[5];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  void *v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  char v124;
  int v125;
  _OWORD v126[6];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  void *v134;
  void *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  void *__p[109];
  __int128 v147[2];
  uint64_t (**v148)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  ZinANELayer *v159;
  int v160;
  void **v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  __int16 v177;
  __int128 v178;
  uint64_t v179;
  __int16 v180;
  char v181;
  char v182;
  __int16 v183;
  char v184;
  char v185;
  __int16 v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  __int16 v201;
  char v202;
  char v203;
  int v204;
  void *v205;
  char v206;
  char v207;
  char v208;
  char v209;
  char v210;
  char v211;
  char v212;
  char v213;
  char v214;
  char v215;
  ZinANELayer *v216;
  int v217;
  uint64_t (***v218)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  char v219;
  char v220;
  char v221;
  char v222;
  char v223;
  char v224;
  char v225;
  char v226;
  char v227;
  char v228;
  char v229;
  char v230;
  char v231;
  char v232;
  char v233;
  char v234;
  char v235;
  char v236;
  char v237;
  _OWORD __src[28];
  int v239;
  __int128 v240;
  __int128 v241;
  int v242;
  int v243;
  __int128 v244;
  __int128 v245;
  int v246;
  int v247;
  __int128 v248;
  __int128 v249;
  int v250;
  _OWORD v251[28];
  int v252;
  __int128 v253;
  __int128 v254;
  int v255;
  int v256;
  __int128 v257;
  __int128 v258;
  int v259;
  int v260;
  __int128 v261;
  __int128 v262;
  int v263;
  ZinEngineLayerMirInfo *v264;
  ZinEngineLayerMirInfo *v265;
  void **v266;
  void **v267;

  v5 = MEMORY[0x24BDAC7A8](this, a2, a3, a4, a5);
  v84 = v6;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v5;
  ZinANELayer::CopyMirInfo(v11, &v265);
  v86 = v10;
  ZinANELayer::CopyMirInfo(v10, &v264);
  v251[0] = vdupq_n_s64(1uLL);
  BYTE8(v251[4]) = 0;
  *(_QWORD *)&v251[3] = 0;
  *((_QWORD *)&v251[2] + 1) = 0;
  BYTE8(v251[3]) = 0;
  v251[1] = 1uLL;
  LOBYTE(v251[2]) = 0;
  *(_QWORD *)&v251[4] = 0;
  v251[5] = 1uLL;
  memset(&v251[6], 0, 18);
  *(_OWORD *)((char *)&v251[7] + 8) = xmmword_207A7E150;
  BYTE8(v251[8]) = 0;
  DWORD2(v251[14]) = 0;
  *((_QWORD *)&v251[18] + 1) = 0;
  memset(&v251[15], 0, 49);
  LODWORD(v251[19]) = 0;
  *(_QWORD *)&v251[23] = 0;
  *(_OWORD *)((char *)&v251[19] + 8) = 0u;
  *(_OWORD *)((char *)&v251[20] + 8) = 0u;
  *(_OWORD *)((char *)&v251[21] + 8) = 0u;
  BYTE8(v251[22]) = 0;
  DWORD2(v251[23]) = 0;
  *((_QWORD *)&v251[27] + 1) = 0;
  memset(&v251[24], 0, 49);
  v252 = 0;
  v253 = 0u;
  v254 = 0u;
  *(_OWORD *)((char *)&v251[9] + 8) = 0u;
  *(_OWORD *)((char *)&v251[10] + 8) = 0u;
  *(_OWORD *)((char *)&v251[11] + 1) = 0u;
  memset(&v251[13], 0, 17);
  *((_QWORD *)&v251[12] + 1) = 0;
  v255 = 1065353216;
  v256 = 0;
  v257 = 0u;
  v258 = 0u;
  v259 = 1065353216;
  v260 = 0;
  v261 = 0u;
  v262 = 0u;
  v263 = 1065353216;
  __src[0] = v251[0];
  BYTE8(__src[4]) = 0;
  *(_QWORD *)&__src[3] = 0;
  *((_QWORD *)&__src[2] + 1) = 0;
  BYTE8(__src[3]) = 0;
  __src[1] = 1uLL;
  LOBYTE(__src[2]) = 0;
  *(_QWORD *)&__src[4] = 0;
  __src[5] = 1uLL;
  memset(&__src[6], 0, 18);
  *(_OWORD *)((char *)&__src[7] + 8) = xmmword_207A7E150;
  BYTE8(__src[8]) = 0;
  DWORD2(__src[14]) = 0;
  *((_QWORD *)&__src[18] + 1) = 0;
  memset(&__src[15], 0, 49);
  LODWORD(__src[19]) = 0;
  *(_QWORD *)&__src[23] = 0;
  *(_OWORD *)((char *)&__src[19] + 8) = 0u;
  *(_OWORD *)((char *)&__src[20] + 8) = 0u;
  *(_OWORD *)((char *)&__src[21] + 8) = 0u;
  BYTE8(__src[22]) = 0;
  DWORD2(__src[23]) = 0;
  *((_QWORD *)&__src[27] + 1) = 0;
  memset(&__src[24], 0, 49);
  v239 = 0;
  v240 = 0u;
  v241 = 0u;
  *(_OWORD *)((char *)&__src[9] + 8) = 0u;
  *(_OWORD *)((char *)&__src[10] + 8) = 0u;
  *(_OWORD *)((char *)&__src[11] + 1) = 0u;
  memset(&__src[13], 0, 17);
  *((_QWORD *)&__src[12] + 1) = 0;
  v242 = 1065353216;
  v243 = 0;
  v244 = 0u;
  v245 = 0u;
  v246 = 1065353216;
  v247 = 0;
  v248 = 0u;
  v249 = 0u;
  v250 = 1065353216;
  v14 = *(const ZinIrTensor ***)(v13 + 272);
  v15 = (ZinIrRegAllocUtil **)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
  ChainBufferSize = ZinL2FootprintCalculator::GetChainBufferSize(v14, v15, (ZinMirL2Config *)v251, (ZinMirL2Config *)__src);
  if (ChainBufferSize)
  {
    v16 = v265;
    v17 = (_OWORD *)((char *)v265 + 120);
    memcpy((char *)v265 + 120, v251, 0x1C0uLL);
    *((_DWORD *)v16 + 142) = v252;
    if (v17 == v251)
    {
      *((_DWORD *)v16 + 154) = v256;
      *((_DWORD *)v16 + 166) = v260;
    }
    else
    {
      *((_DWORD *)v16 + 152) = v255;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v16 + 72, (uint64_t *)v254, 0);
      *((_DWORD *)v16 + 154) = v256;
      *((_DWORD *)v16 + 164) = v259;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v16 + 78, (uint64_t *)v258, 0);
      *((_DWORD *)v16 + 166) = v260;
      *((_DWORD *)v16 + 176) = v263;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v16 + 84, (uint64_t *)v262, 0);
    }
    v19 = v264;
    v20 = (_OWORD *)((char *)v264 + 120);
    memcpy((char *)v264 + 120, __src, 0x1C0uLL);
    *((_DWORD *)v19 + 142) = v239;
    if (v20 == __src)
    {
      *((_DWORD *)v19 + 154) = v243;
      *((_DWORD *)v19 + 166) = v247;
    }
    else
    {
      *((_DWORD *)v19 + 152) = v242;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v19 + 72, (uint64_t *)v241, 0);
      *((_DWORD *)v19 + 154) = v243;
      *((_DWORD *)v19 + 164) = v246;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v19 + 78, (uint64_t *)v245, 0);
      *((_DWORD *)v19 + 166) = v247;
      *((_DWORD *)v19 + 176) = v250;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)v19 + 84, (uint64_t *)v249, 0);
    }
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v215 = 0;
    LOBYTE(v216) = 0;
    v219 = 0;
    v220 = 0;
    v221 = 0;
    v222 = 0;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    v226 = 0;
    v227 = 0;
    v228 = 0;
    v229 = 0;
    v230 = 0;
    v231 = 0;
    v232 = 0;
    v233 = 0;
    v205 = &unk_24C01F1F0;
    v234 = 0;
    v235 = 0;
    v236 = 0;
    v237 = 0;
    LOBYTE(v122) = v8;
    BYTE1(v122) = v8;
    std::vector<BOOL>::vector(__p, &v122, 2);
    ZinCpBasedAllocator::GetCustomPerfInfo(v13, (uint64_t)v12, __p, 1, (uint64_t)v265, (uint64_t)&v205);
    if (__p[0])
      operator delete(__p[0]);
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = 0;
    LOBYTE(v159) = 0;
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v165 = 0;
    v166 = 0;
    v167 = 0;
    v168 = 0;
    v169 = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v173 = 0;
    v174 = 0;
    v175 = 0;
    v176 = 0;
    v148 = &off_24C01F198;
    v177 = 0;
    v181 = 0;
    v182 = 0;
    v183 = 256;
    v178 = 0u;
    v179 = 0;
    v180 = 0;
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v199 = 0;
    v200 = 0;
    v201 = 0;
    v202 = 0;
    v203 = 0;
    v204 = 0;
    LOBYTE(v122) = 1;
    std::vector<BOOL>::vector(__p, &v122, 1);
    ZinCpBasedAllocator::GetCustomPerfInfo(v13, (uint64_t)v10, __p, v84, (uint64_t)v264, (uint64_t)&v148);
    if (__p[0])
      operator delete(__p[0]);
    v216 = v10;
    v217 = 1;
    v218 = &v148;
    if (!v219)
      v219 = 1;
    v159 = v12;
    v160 = 0;
    v161 = &v205;
    if (!v162)
      v162 = 1;
    ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)(v13 + 336), *(double *)(*(_QWORD *)(v13 + 344) + 104), *(_DWORD *)(*(_QWORD *)(v13 + 344) + 112), *(_DWORD *)(*(_QWORD *)(v13 + 344) + 116), (uint64_t)v147);
    v21 = *(_QWORD *)(v13 + 336);
    v122 = 0x1000000010101;
    v123 = 0;
    v124 = 1;
    v125 = 0;
    ZinIrPerf::ZinIrPerf((uint64_t)__p, v21, v147, &v122);
    v133 = 0;
    v132 = 0u;
    v131 = 0u;
    v130 = 0u;
    v129 = 0u;
    v128 = 0u;
    v127 = 0u;
    memset(v126, 0, sizeof(v126));
    v22 = operator new(8uLL);
    v134 = v22;
    *v22 = 0;
    v136 = v22 + 1;
    v135 = v22 + 1;
    v138 = 0;
    v137 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v139 = _Q0;
    v140 = _Q0;
    v141 = _Q0;
    v82 = _Q0;
    v142 = _Q0;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    if (ZinANELayer::CalculatePerf(v12, (ZinIrPerf *)__p, (const ZinCustomPerfInfo *)&v205, (ZinPerfDescriptor *)v126))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinCpBasedAllocator::SetPNChainExecutionBehavior();
      v18 = 3;
    }
    else
    {
      v28 = *(_QWORD *)(v13 + 336);
      *(_QWORD *)&v101[0] = 0x1000000010101;
      WORD4(v101[0]) = 0;
      BYTE10(v101[0]) = 1;
      *(_DWORD *)((char *)v101 + 11) = 0;
      ZinIrPerf::ZinIrPerf((uint64_t)&v122, v28, v147, (uint64_t *)v101);
      v109 = 0;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v102 = 0u;
      memset(v101, 0, sizeof(v101));
      v29 = operator new(8uLL);
      v110 = v29;
      *v29 = 0;
      v112 = v29 + 1;
      v111 = v29 + 1;
      v114 = 0;
      v113 = 0;
      v115 = v82;
      v116 = v82;
      v117 = v82;
      v118 = v82;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      if (ZinANELayer::CalculatePerf(v10, (ZinIrPerf *)&v122, (const ZinCustomPerfInfo *)&v148, (ZinPerfDescriptor *)v101))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinCpBasedAllocator::SetPNChainExecutionBehavior();
        v18 = 3;
      }
      else
      {
        v99 = v12;
        v266 = &v99;
        v30 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>(v13 + 112, &v99, (uint64_t)&std::piecewise_construct, &v266);
        (*(void (**)(void **__return_ptr, ZinANELayer *))(*(_QWORD *)v12 + 512))(&v99, v12);
        v31 = v99;
        v32 = v100;
        if (v100 != v99)
        {
          v33 = 0;
          do
          {
            if ((v8 & 1) == 0)
            {
              v89 = 0;
              v89 = v31[v33];
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v30[3], (char **)&v266);
              v34 = v266[v33];
              v267 = v266;
              operator delete(v266);
              v35 = (unint64_t)((double)*((unint64_t *)&v129 + 1)
                                     / *(double *)(v13 + 984)
                                     * 1000.0
                                     * 1000.0
                                     * 1000.0);
              v36 = (char *)v126 + 8 * v33;
              if (v35 <= (unint64_t)((double)(unint64_t)(*((_QWORD *)v36 + 13)
                                                                      / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                                           / *(double *)(v13 + 992)
                                           * 1000.0
                                           * 1000.0
                                           * 1000.0))
                v35 = (unint64_t)((double)(unint64_t)(*((_QWORD *)v36 + 13)
                                                                  / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                                       / *(double *)(v13 + 992)
                                       * 1000.0
                                       * 1000.0
                                       * 1000.0);
              v34[4] = v35;
              v37 = *(ZinEnginePerf **)(v89 + 96);
              v98 = *(_QWORD *)(v13 + 1008);
              v38 = *(_OWORD *)(v13 + 992);
              v97[0] = *(_OWORD *)(v13 + 976);
              v97[1] = v38;
              if (ZinEnginePerf::HasDMAReadStall(v37, v12, (uint64_t)v126, (uint64_t)v97, 0))
              {
                v39 = (double)(unint64_t)(*((_QWORD *)v36 + 13) / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                    / *(double *)(v13 + 992)
                    * 1000.0
                    * 1000.0
                    * 1000.0;
                if ((unint64_t)v39 >= (unint64_t)((double)*((unint64_t *)&v129 + 1)
                                                               / *(double *)(v13 + 984)
                                                               * 1000.0
                                                               * 1000.0
                                                               * 1000.0))
                  v40 = (unint64_t)((double)*((unint64_t *)&v129 + 1)
                                         / *(double *)(v13 + 984)
                                         * 1000.0
                                         * 1000.0
                                         * 1000.0);
                else
                  v40 = (unint64_t)v39;
              }
              else
              {
                v40 = 0;
              }
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v30[3], (char **)&v266);
              v41 = v266[v33];
              v267 = v266;
              operator delete(v266);
              v41[15] = v40;
              v95 = v12;
              v96 = v33 != 0;
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v30[3], (char **)&v266);
              v42 = v266[v33];
              v267 = v266;
              operator delete(v266);
              v266 = (void **)&v89;
              v43 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v13 + 152, &v89, (uint64_t)&std::piecewise_construct, &v266)[3];
              v44 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)(v13 + 192), (int *)&v95);
              if (!v44)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              v42[5] = DMABuffer::CalculateSrcSize((uint64_t)v12, v33 != 0, v43, v44[4], 0, *(unsigned __int8 **)(v13 + 336), (uint64_t)v251);
              v31 = v99;
              v32 = v100;
            }
            ++v33;
          }
          while (v33 < (v32 - (_BYTE *)v31) >> 3);
        }
        v45 = v30[3];
        v46 = *(double *)(v13 + 984);
        *(_QWORD *)(*(_QWORD *)(v45 + 24) + 40) = (unint64_t)((double)(unint64_t)v127
                                                                     / v46
                                                                     * 1000.0
                                                                     * 1000.0
                                                                     * 1000.0);
        v47 = *(_QWORD *)(v45 + 32);
        *(_QWORD *)(v47 + 96) = (unint64_t)((double)*((unint64_t *)&v130 + 1)
                                                 / v46
                                                 * 1000.0
                                                 * 1000.0
                                                 * 1000.0);
        *(_QWORD *)(v47 + 104) = ChainBufferSize;
        v95 = v86;
        v266 = &v95;
        v48 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>(v13 + 112, &v95, (uint64_t)&std::piecewise_construct, &v266);
        (*(void (**)(void **__return_ptr, ZinANELayer *))(*(_QWORD *)v86 + 512))(&v95, v86);
        v49 = v95;
        if ((void *)v96 == v95)
        {
          v83 = 0;
        }
        else
        {
          v50 = 0;
          v83 = 0;
          do
          {
            v94 = 0;
            v94 = v49[v50];
            if (*(ZinANELayer **)(v94 + 96) == v12)
            {
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v48[3], (char **)&v266);
              v56 = v266[v50];
              v267 = v266;
              operator delete(v266);
              v56[12] = (unint64_t)((double)*((unint64_t *)&v105 + 1)
                                         / *(double *)(v13 + 984)
                                         * 1000.0
                                         * 1000.0
                                         * 1000.0);
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v48[3], (char **)&v266);
              v57 = v266[v50];
              v267 = v266;
              operator delete(v266);
              v57[13] = ChainBufferSize;
              v83 = v50;
            }
            else if ((v8 & 1) == 0)
            {
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v48[3], (char **)&v266);
              v51 = v266[v50];
              v267 = v266;
              operator delete(v266);
              v52 = (unint64_t)((double)*((unint64_t *)&v105 + 1)
                                     / *(double *)(v13 + 984)
                                     * 1000.0
                                     * 1000.0
                                     * 1000.0);
              if (v52 <= (unint64_t)((double)(unint64_t)(*((_QWORD *)&v103 + v50 + 1)
                                                                      / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                                           / *(double *)(v13 + 992)
                                           * 1000.0
                                           * 1000.0
                                           * 1000.0))
                v52 = (unint64_t)((double)(unint64_t)(*((_QWORD *)&v103 + v50 + 1)
                                                                  / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                                       / *(double *)(v13 + 992)
                                       * 1000.0
                                       * 1000.0
                                       * 1000.0);
              v51[6] = v52;
              v53 = *(_OWORD *)(v13 + 992);
              v92[0] = *(_OWORD *)(v13 + 976);
              v92[1] = v53;
              v93 = *(_QWORD *)(v13 + 1008);
              if (ZinEnginePerf::HasDMAReadStall(v12, v86, (uint64_t)v101, (uint64_t)v92, 0))
              {
                v54 = (double)(unint64_t)(*((_QWORD *)&v103 + v50 + 1)
                                               / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
                    / *(double *)(v13 + 992)
                    * 1000.0
                    * 1000.0
                    * 1000.0;
                if ((unint64_t)v54 >= (unint64_t)((double)*((unint64_t *)&v105 + 1)
                                                               / *(double *)(v13 + 984)
                                                               * 1000.0
                                                               * 1000.0
                                                               * 1000.0))
                  v55 = (unint64_t)((double)*((unint64_t *)&v105 + 1)
                                         / *(double *)(v13 + 984)
                                         * 1000.0
                                         * 1000.0
                                         * 1000.0);
                else
                  v55 = (unint64_t)v54;
              }
              else
              {
                v55 = 0;
              }
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v48[3], (char **)&v266);
              v58 = v266[v50];
              v267 = v266;
              operator delete(v266);
              v58[15] = v55;
              v89 = (uint64_t)v86;
              v90 = v50 != 0;
              v91 = 0;
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v48[3], (char **)&v266);
              v59 = v266[v50];
              v267 = v266;
              operator delete(v266);
              v266 = (void **)&v94;
              v60 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v13 + 152, &v94, (uint64_t)&std::piecewise_construct, &v266)[3];
              v61 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)(v13 + 192), (int *)&v89);
              if (!v61)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              v59[7] = DMABuffer::CalculateSrcSize((uint64_t)v86, v50 != 0, v60, v61[4], 0, *(unsigned __int8 **)(v13 + 336), (uint64_t)__src);
            }
            ++v50;
            v49 = v95;
          }
          while (v50 < (uint64_t)(v96 - (_QWORD)v95) >> 3);
        }
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48[3] + 24) + 16) + 8 * v83) = (unint64_t)((double)(unint64_t)v102
                                                                                                 / *(double *)(v13 + 976)
                                                                                                 * 1000.0
                                                                                                 * 1000.0
                                                                                                 * 1000.0);
        v62 = *(_OWORD *)(v13 + 992);
        v87[0] = *(_OWORD *)(v13 + 976);
        v87[1] = v62;
        v88 = *(_QWORD *)(v13 + 1008);
        if (ZinEnginePerf::HasDMAReadStall(v12, v86, (uint64_t)v101, (uint64_t)v87, 1))
        {
          v64 = v30[3];
          v65 = (uint64_t **)v48[3];
          if (**(_QWORD **)(v64 + 24) <= (unint64_t)*v65[3])
          {
            v66 = *(_QWORD *)(*(_QWORD *)(v64 + 32) + 96);
            LayerCycleAndFootprintEstimator::GetReadBehaviors(v65, (char **)&v266);
            v67 = v266[v83];
            v267 = v266;
            operator delete(v266);
            if (v67[12] < v66)
              v66 = v67[12];
          }
          else
          {
            v66 = 0;
          }
          IsLowThroughputPEPool = ZinEnginePerf::IsLowThroughputPEPool(v12, v63);
          v69 = v30[3];
          v70 = v66;
          if (IsLowThroughputPEPool)
            v70 = **(_QWORD **)(v69 + 24) + v66;
          *(_QWORD *)(*(_QWORD *)(v69 + 32) + 128) = v70;
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v48[3], (char **)&v266);
          v71 = v266[v83];
          v267 = v266;
          operator delete(v266);
          v71[16] = v66;
        }
        if ((v84 & 1) == 0)
        {
          v266 = (void **)v86;
          v72 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)(v13 + 232), &v266);
          if (!v72)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v73 = v72[3];
          v74 = (unint64_t)((double)*((unint64_t *)&v106 + 1)
                                 / *(double *)(v13 + 984)
                                 * 1000.0
                                 * 1000.0
                                 * 1000.0);
          v75 = (double)(unint64_t)(*((_QWORD *)&v104 + 1) / *(_QWORD *)(*(_QWORD *)(v13 + 336) + 520))
              / *(double *)(v13 + 992)
              * 1000.0
              * 1000.0
              * 1000.0;
          if (v74 <= (unint64_t)v75)
            v74 = (unint64_t)v75;
          *(_QWORD *)(*(_QWORD *)(v48[3] + 32) + 48) = v74;
          v89 = 0;
          v89 = (*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0, 0);
          v76 = *(_QWORD *)(v48[3] + 32);
          v266 = (void **)&v89;
          v77 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v13 + 152, &v89, (uint64_t)&std::piecewise_construct, &v266);
          *(_QWORD *)(v76 + 56) = DMABuffer::CalculateDstSize((ZinEngineLayerMirInfo **)v86, (const ZinANELayer *)v77[3], v73, 0, *(ZinIrHalParameters **)(v13 + 336), (const ZinIrHalParameters *)(*((_QWORD *)v86 + 33) + 120), v78);
        }
        if (v95)
        {
          v96 = (unint64_t)v95;
          operator delete(v95);
        }
        if (v99)
        {
          v100 = v99;
          operator delete(v99);
        }
        v18 = 0;
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&v122);
    }
    if (v134)
    {
      v135 = v134;
      operator delete(v134);
    }
    ZinIrPerf::~ZinIrPerf((ZinIrPerf *)__p);
    v148 = &off_24C01F198;
    if ((_QWORD)v178)
    {
      *((_QWORD *)&v178 + 1) = v178;
      operator delete((void *)v178);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v148);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v205);
  }
  else
  {
    v18 = 0;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v248);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v244);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v240);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v261);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v257);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v253);
  v79 = v264;
  v264 = 0;
  if (v79)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v79);
    MEMORY[0x20BD002F8]();
  }
  v80 = v265;
  v265 = 0;
  if (v80)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v80);
    MEMORY[0x20BD002F8]();
  }
  return v18;
}

void sub_20703C94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  uint64_t v46;
  void *v48;
  void *v49;

  if (__p)
    operator delete(__p);
  if (a46)
    operator delete(a46);
  v48 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v48;
    operator delete(v48);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x288]);
  v49 = (void *)STACK[0x6B8];
  if (STACK[0x6B8])
  {
    STACK[0x6C0] = (unint64_t)v49;
    operator delete(v49);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x738]);
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0xAC8]);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&STACK[0xDA0]);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0xFD0]);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x1220]);
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v46 - 160), 0);
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v46 - 152), 0);
  _Unwind_Resume(a1);
}

void sub_20703CA9C()
{
  JUMPOUT(0x20703CA68);
}

uint64_t ZinCpBasedAllocator::GetNPL2DepPerfDescriptor(ZinCpBasedAllocator *this, const ZinNELayer *a2, const ZinPELayer *a3, unsigned int a4, char a5, char a6, uint64_t a7, ZinPerfDescriptor *a8, ZinPerfDescriptor *a9)
{
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  ZinIrOpLayerGraph *v20;
  uint64_t v21;
  uint64_t IndexOfMatchedIncomingLayer;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v27;
  char v28;
  void *v29[3];
  uint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;

  v17 = *((_QWORD *)a2 + 33);
  v18 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a2, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions(a2, &__p);
  ZinMirL2Config::SetL2DependentBufferNEWorkUnit(v17 + 120, a2, v18, (uint64_t)__p, a4 | 0x10100, 0);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  v19 = *((_QWORD *)a2 + 33);
  if (!*(_BYTE *)(v19 + 233))
    *(_QWORD *)(v19 + 200) = a7;
  v20 = (ZinIrOpLayerGraph *)*((_QWORD *)a2 + 19);
  __p = 0;
  v36 = 0;
  v37 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v30 = 0;
  v31 = 0;
  ZinL2FootprintCalculator::GetInterleavesAndCropOffset((_QWORD *)this + 19, (_QWORD *)this + 24, (_QWORD *)this + 29, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v32, &v31, &v30);
  ZinMirL2Config::SetL2DependentBufferPEWorkUnit(*((_QWORD *)a3 + 33) + 120, *((_QWORD *)this + 42), a2, a3, &__p, &v32, v31, v30, 1u, 0);
  v21 = *((_QWORD *)a3 + 33);
  if (!*(_BYTE *)(v21 + 233))
    *(_QWORD *)(v21 + 200) = a7;
  IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(v20, a3, a2);
  v23 = *((_QWORD *)a2 + 33);
  v27 = a4;
  std::vector<BOOL>::vector(v29, &v27, 1);
  v24 = ZinCpBasedAllocator::CalculatePerf((uint64_t)this, a2, v23, v29, 1, a8);
  if (v29[0])
    operator delete(v29[0]);
  if (v24)
  {
    v25 = 3;
  }
  else
  {
    v27 = 1;
    v28 = a5;
    std::vector<BOOL>::vector(v29, &v27, 2);
    if (IndexOfMatchedIncomingLayer == 1)
    {
      v27 = a5;
      v28 = 1;
      std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v29, &v27, v29, 2uLL);
    }
    if (ZinCpBasedAllocator::CalculatePerf((uint64_t)this, a3, *((_QWORD *)a3 + 33), v29, a6, a9))
      v25 = 3;
    else
      v25 = 0;
    if (v29[0])
      operator delete(v29[0]);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  return v25;
}

void sub_20703CCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unint64_t ZinCpBasedAllocator::GetNPL2DepCircularBufferMemoryFootprint(ZinCpBasedAllocator *this, const ZinNELayer *a2, const ZinPELayer *a3, const ZinPerfDescriptor *a4, const ZinPerfDescriptor *a5)
{
  uint64_t v8;
  l2a *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t RootTensor;
  const ZinIrTensor *v17;
  l2a *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  ZinMirL2Config *v23;
  unint64_t v24;
  const ZinIrTensor ***v26;
  _BOOL4 v27;
  int v28;
  const ZinIrTensor *v29;
  _QWORD v30[2];
  void *__p;
  _BYTE *v32;
  uint64_t v33;
  const ZinIrTensor **v34;

  (*(void (**)(void **__return_ptr, const ZinNELayer *))(*(_QWORD *)a2 + 512))(&__p, a2);
  v8 = *(_QWORD *)__p;
  v32 = __p;
  operator delete(__p);
  v33 = v8;
  v30[0] = a2;
  v30[1] = 0;
  __p = &v33;
  v9 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v33, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3];
  v10 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)this + 24, (int *)v30);
  if (!v10
    || (v11 = DMABuffer::CalculateSrcSize((uint64_t)a2, 0, v9, v10[4], 0, *((unsigned __int8 **)this + 42), *((_QWORD *)a2 + 33) + 120), __p = a2, (v12 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 14, &__p)) == 0))
  {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v12[3] + 32) + 8) + v11;
  (*(void (**)(void **__return_ptr, const ZinPELayer *))(*(_QWORD *)a3 + 512))(&__p, a3);
  v14 = __p;
  if (v32 != __p)
  {
    v15 = 0;
    do
    {
      v29 = 0;
      v29 = (const ZinIrTensor *)v14[v15];
      RootTensor = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v29);
      v17 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      if (RootTensor != ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v17))
      {
        v26 = (const ZinIrTensor ***)a3;
        v27 = v15 != 0;
        v28 = 0;
        v34 = &v29;
        v18 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v29, (uint64_t)&std::piecewise_construct, &v34)[3];
        v19 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)this + 24, (int *)&v26);
        if (!v19)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v13 += DMABuffer::CalculateSrcSize((uint64_t)a3, v15 != 0, v18, v19[4], 0, *((unsigned __int8 **)this + 42), *((_QWORD *)a3 + 33) + 120);
      }
      ++v15;
      v14 = __p;
    }
    while (v15 < (v32 - (_BYTE *)__p) >> 3);
  }
  v34 = (const ZinIrTensor **)(*(uint64_t (**)(const ZinPELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  v26 = (const ZinIrTensor ***)a3;
  v20 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 29, &v26);
  if (!v20)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v21 = v20[3];
  v26 = &v34;
  v22 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v34, (uint64_t)&std::piecewise_construct, &v26);
  v24 = DMABuffer::CalculateDstSize((ZinEngineLayerMirInfo **)a3, (const ZinANELayer *)v22[3], v21, 0, *((ZinIrHalParameters **)this + 42), (const ZinIrHalParameters *)(*((_QWORD *)a3 + 33) + 120), v23);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  return v24 + v13;
}

void sub_20703CFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinCpBasedAllocator *this, const ZinNELayer *a2, const ZinPELayer *a3, unsigned __int8 a4, char a5, char a6)
{
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const ZinANELayer **v11;
  _QWORD *v12;
  _QWORD *v17;
  const ZinIrTensor *v18;
  ZinIrCircularBufferUtil *RootTensor;
  const ZinIrHalParameters *v20;
  StaticWrapInfo *v21;
  int v22;
  int v25;
  const ZinANELayer **v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _BYTE *v33;
  unint64_t v34;
  const ZinANELayer *v35;
  unint64_t v36;
  char *v37;
  ZinEnginePerf *v38;
  __int128 v39;
  double v40;
  unint64_t v41;
  const ZinANELayer *v42;
  const ZinANELayer *v43;
  ZinEnginePerf *v44;
  l2a *v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  const ZinIrTensor *v51;
  const ZinANELayer *v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  double v57;
  unint64_t v58;
  const ZinANELayer *v59;
  const ZinANELayer *v60;
  const ZinANELayer *v61;
  l2a *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  double v67;
  uint64_t v68;
  ZinEngineLayerMirInfo **v69;
  _QWORD *v70;
  ZinMirL2Config *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v75;
  const ZinANELayer *v76;
  _BOOL4 v77;
  int v78;
  _OWORD v79[2];
  uint64_t v80;
  const ZinIrTensor *v81;
  void *__p;
  unint64_t v83;
  _OWORD v84[2];
  uint64_t v85;
  void *v86;
  _BYTE *v87;
  uint64_t v88;
  _OWORD v89[7];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  void *v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  _OWORD v108[8];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _DWORD __src[113];
  uint64_t *v127[4];
  int v128;
  int v129;
  uint64_t *v130[4];
  int v131;
  int v132;
  uint64_t *v133[4];
  int v134;
  _DWORD __dst[113];
  uint64_t *v136[4];
  int v137;
  int v138;
  uint64_t *v139[4];
  int v140;
  int v141;
  uint64_t *v142[4];
  int v143;
  char v144;
  char v145;
  unsigned __int8 v146;
  const ZinANELayer *v147;
  ZinEnginePerf *v148;
  const ZinANELayer **p_p;
  const ZinANELayer **v150;
  _BYTE v151[24];
  _BYTE *v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  v147 = a3;
  v148 = a2;
  v146 = a4;
  v145 = a5;
  v144 = a6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 33);
  memcpy(__dst, v7 + 30, sizeof(__dst));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v136, (uint64_t)(v7 + 144));
  v138 = v7[154];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v139, (uint64_t)(v7 + 156));
  v141 = v7[166];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v142, (uint64_t)(v7 + 168));
  v8 = (_DWORD *)*((_QWORD *)v147 + 33);
  memcpy(__src, v8 + 30, sizeof(__src));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v127, (uint64_t)(v8 + 144));
  v129 = v8[154];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v130, (uint64_t)(v8 + 156));
  v132 = v8[166];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v133, (uint64_t)(v8 + 168));
  v9 = (*(uint64_t (**)(ZinEnginePerf *, uint64_t))(*(_QWORD *)v148 + 368))(v148, 3);
  v10 = *((_QWORD *)this + 42);
  if (*(_BYTE *)(v10 + 1117))
    v11 = *(const ZinANELayer ***)(v10 + 656);
  else
    v11 = (const ZinANELayer **)v9;
  v113 = 0;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  memset(v108, 0, sizeof(v108));
  v12 = operator new(8uLL);
  v114 = v12;
  *v12 = 0;
  v116 = v12 + 1;
  v115 = v12 + 1;
  v118 = 0;
  v117 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v119 = _Q0;
  v120 = _Q0;
  v121 = _Q0;
  v122 = _Q0;
  v75 = _Q0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v95 = 0;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v90 = 0u;
  memset(v89, 0, sizeof(v89));
  v17 = operator new(8uLL);
  v96 = v17;
  *v17 = 0;
  v97 = v17 + 1;
  v98 = v17 + 1;
  v99 = 0;
  v100 = 0;
  v101 = v75;
  v102 = v75;
  v103 = v75;
  v104 = v75;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v18 = (const ZinIrTensor *)(*(uint64_t (**)(ZinEnginePerf *, _QWORD, _QWORD))(*(_QWORD *)v148 + 32))(v148, 0, 0);
  RootTensor = (ZinIrCircularBufferUtil *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v18);
  v22 = ZinIrCircularBufferUtil::QualifyForCircularBuffer(RootTensor, *((const ZinIrTensor **)this + 42), v20, v21);
  if (v146)
    _ZF = v144 == 0;
  else
    _ZF = 1;
  if (_ZF || v145 == 0)
    v25 = v22;
  else
    v25 = 0;
  v88 = (uint64_t)v11;
  v26 = v11;
  if (v25 == 1)
    v26 = *(const ZinANELayer ***)(*((_QWORD *)this + 42) + 648);
  p_p = v26;
  v86 = v11;
  v152 = 0;
  v27 = operator new(0x58uLL);
  *v27 = &off_24C0012F0;
  v27[1] = this;
  v27[2] = &v148;
  v27[3] = &v147;
  v27[4] = &v146;
  v27[5] = &v145;
  v27[6] = &v144;
  v27[7] = v108;
  v27[8] = v89;
  v27[9] = __dst;
  v27[10] = __src;
  v152 = v27;
  v28 = BinarySearch((unint64_t *)&p_p, (unint64_t *)&v86, (unint64_t *)&v88, (uint64_t)v151);
  v29 = v152;
  if (v152 == v151)
  {
    v30 = 4;
    v29 = v151;
  }
  else
  {
    if (!v152)
      goto LABEL_20;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_20:
  if (((v25 ^ 1 | v28) & 1) != 0)
  {
    if (ZinCpBasedAllocator::GetNPL2DepPerfDescriptor(this, v148, v147, v146, v145, v144, v88, (ZinPerfDescriptor *)v108, (ZinPerfDescriptor *)v89))ZinAssertImpl("Perf descriptor must be valid");
    v86 = v148;
    p_p = (const ZinANELayer **)&v86;
    v31 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)this + 112, &v86, (uint64_t)&std::piecewise_construct, &p_p);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v148 + 512))(&v86);
    v32 = v86;
    v33 = v87;
    if (v87 != v86)
    {
      v34 = 0;
      do
      {
        if (!v146)
        {
          v76 = 0;
          v76 = (const ZinANELayer *)v32[v34];
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v31[3], (char **)&p_p);
          v35 = p_p[v34];
          v150 = p_p;
          operator delete(p_p);
          v36 = (unint64_t)((double)*((unint64_t *)&v109 + 1)
                                 / *((double *)this + 123)
                                 * 1000.0
                                 * 1000.0
                                 * 1000.0);
          v37 = (char *)v108 + 8 * v34;
          if (v36 <= (unint64_t)((double)(unint64_t)(*((_QWORD *)v37 + 13)
                                                                  / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                                       / *((double *)this + 124)
                                       * 1000.0
                                       * 1000.0
                                       * 1000.0))
            v36 = (unint64_t)((double)(unint64_t)(*((_QWORD *)v37 + 13)
                                                              / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                                   / *((double *)this + 124)
                                   * 1000.0
                                   * 1000.0
                                   * 1000.0);
          *((_QWORD *)v35 + 8) = v36;
          v38 = (ZinEnginePerf *)*((_QWORD *)v76 + 12);
          v39 = *((_OWORD *)this + 62);
          v84[0] = *((_OWORD *)this + 61);
          v84[1] = v39;
          v85 = *((_QWORD *)this + 126);
          if (ZinEnginePerf::HasDMAReadStall(v38, v148, (uint64_t)v108, (uint64_t)v84, 0))
          {
            v40 = (double)(unint64_t)(*((_QWORD *)v37 + 13) / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                / *((double *)this + 124)
                * 1000.0
                * 1000.0
                * 1000.0;
            if ((unint64_t)v40 >= (unint64_t)((double)*((unint64_t *)&v109 + 1)
                                                           / *((double *)this + 123)
                                                           * 1000.0
                                                           * 1000.0
                                                           * 1000.0))
              v41 = (unint64_t)((double)*((unint64_t *)&v109 + 1)
                                     / *((double *)this + 123)
                                     * 1000.0
                                     * 1000.0
                                     * 1000.0);
            else
              v41 = (unint64_t)v40;
          }
          else
          {
            v41 = 0;
          }
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v31[3], (char **)&p_p);
          v42 = p_p[v34];
          v150 = p_p;
          operator delete(p_p);
          *((_QWORD *)v42 + 15) = v41;
          __p = v148;
          v83 = v34 != 0;
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v31[3], (char **)&p_p);
          v43 = p_p[v34];
          v150 = p_p;
          operator delete(p_p);
          v44 = v148;
          p_p = &v76;
          v45 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v76, (uint64_t)&std::piecewise_construct, &p_p)[3];
          v46 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)this + 24, (int *)&__p);
          if (!v46)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          *((_QWORD *)v43 + 9) = DMABuffer::CalculateSrcSize((uint64_t)v44, v34 != 0, v45, v46[4], 0, *((unsigned __int8 **)this + 42), *((_QWORD *)v148 + 33) + 120);
          v32 = v86;
          v33 = v87;
        }
        ++v34;
      }
      while (v34 < (v33 - (_BYTE *)v32) >> 3);
    }
    __p = v147;
    p_p = (const ZinANELayer **)&__p;
    v47 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)this + 112, &__p, (uint64_t)&std::piecewise_construct, &p_p);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v147 + 512))(&__p);
    v48 = __p;
    if ((void *)v83 != __p)
    {
      v49 = 0;
      do
      {
        v81 = 0;
        v81 = (const ZinIrTensor *)v48[v49];
        v50 = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v81);
        v51 = (const ZinIrTensor *)(*(uint64_t (**)(ZinEnginePerf *, _QWORD, _QWORD))(*(_QWORD *)v148 + 32))(v148, 0, 0);
        if (v50 != ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v51) && v145 == 0)
        {
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v47[3], (char **)&p_p);
          v53 = p_p[v49];
          v150 = p_p;
          operator delete(p_p);
          v54 = (unint64_t)((double)*((unint64_t *)&v91 + 1)
                                 / *((double *)this + 123)
                                 * 1000.0
                                 * 1000.0
                                 * 1000.0);
          v55 = (char *)v89 + 8 * v49;
          if (v54 <= (unint64_t)((double)(unint64_t)(*((_QWORD *)v55 + 13)
                                                                  / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                                       / *((double *)this + 124)
                                       * 1000.0
                                       * 1000.0
                                       * 1000.0))
            v54 = (unint64_t)((double)(unint64_t)(*((_QWORD *)v55 + 13)
                                                              / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                                   / *((double *)this + 124)
                                   * 1000.0
                                   * 1000.0
                                   * 1000.0);
          *((_QWORD *)v53 + 10) = v54;
          v56 = *((_OWORD *)this + 62);
          v79[0] = *((_OWORD *)this + 61);
          v79[1] = v56;
          v80 = *((_QWORD *)this + 126);
          if (ZinEnginePerf::HasDMAReadStall(v148, v147, (uint64_t)v89, (uint64_t)v79, 0))
          {
            v57 = (double)(unint64_t)(*((_QWORD *)v55 + 13) / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                / *((double *)this + 124)
                * 1000.0
                * 1000.0
                * 1000.0;
            if ((unint64_t)v57 >= (unint64_t)((double)*((unint64_t *)&v91 + 1)
                                                           / *((double *)this + 123)
                                                           * 1000.0
                                                           * 1000.0
                                                           * 1000.0))
              v58 = (unint64_t)((double)*((unint64_t *)&v91 + 1)
                                     / *((double *)this + 123)
                                     * 1000.0
                                     * 1000.0
                                     * 1000.0);
            else
              v58 = (unint64_t)v57;
          }
          else
          {
            v58 = 0;
          }
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v47[3], (char **)&p_p);
          v59 = p_p[v49];
          v150 = p_p;
          operator delete(p_p);
          *((_QWORD *)v59 + 15) = v58;
          v76 = v147;
          v77 = v49 != 0;
          v78 = 0;
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v47[3], (char **)&p_p);
          v60 = p_p[v49];
          v150 = p_p;
          operator delete(p_p);
          v61 = v147;
          p_p = &v81;
          v62 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v81, (uint64_t)&std::piecewise_construct, &p_p)[3];
          v63 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)this + 24, (int *)&v76);
          if (!v63)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          *((_QWORD *)v60 + 11) = DMABuffer::CalculateSrcSize((uint64_t)v61, v49 != 0, v62, v63[4], 0, *((unsigned __int8 **)this + 42), *((_QWORD *)v147 + 33) + 120);
        }
        ++v49;
        v48 = __p;
      }
      while (v49 < (uint64_t)(v83 - (_QWORD)__p) >> 3);
    }
    if (!v144)
    {
      p_p = (const ZinANELayer **)v147;
      v64 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 29, &p_p);
      if (!v64)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v65 = v64[3];
      v66 = (unint64_t)((double)*((unint64_t *)&v92 + 1)
                             / *((double *)this + 123)
                             * 1000.0
                             * 1000.0
                             * 1000.0);
      v67 = (double)(unint64_t)(*((_QWORD *)&v90 + 1) / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
          / *((double *)this + 124)
          * 1000.0
          * 1000.0
          * 1000.0;
      if (v66 <= (unint64_t)v67)
        v66 = (unint64_t)v67;
      *(_QWORD *)(*(_QWORD *)(v47[3] + 32) + 80) = v66;
      v76 = 0;
      v76 = (const ZinANELayer *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v147 + 32))(v147, 0, 0);
      v68 = *(_QWORD *)(v47[3] + 32);
      v69 = (ZinEngineLayerMirInfo **)v147;
      p_p = &v76;
      v70 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v76, (uint64_t)&std::piecewise_construct, &p_p);
      *(_QWORD *)(v68 + 88) = DMABuffer::CalculateDstSize(v69, (const ZinANELayer *)v70[3], v65, 0, *((ZinIrHalParameters **)this + 42), (const ZinIrHalParameters *)(*((_QWORD *)v147 + 33) + 120), v71);
    }
    v72 = *((_QWORD *)v148 + 33);
    memcpy((void *)(v72 + 120), __dst, 0x1C0uLL);
    *(_DWORD *)(v72 + 568) = __dst[112];
    if ((_DWORD *)(v72 + 120) == __dst)
    {
      *(_DWORD *)(v72 + 616) = v138;
      *(_DWORD *)(v72 + 664) = v141;
    }
    else
    {
      *(_DWORD *)(v72 + 608) = v137;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v72 + 576), v136[2], 0);
      *(_DWORD *)(v72 + 616) = v138;
      *(_DWORD *)(v72 + 656) = v140;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v72 + 624), v139[2], 0);
      *(_DWORD *)(v72 + 664) = v141;
      *(_DWORD *)(v72 + 704) = v143;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v72 + 672), v142[2], 0);
    }
    v73 = *((_QWORD *)v147 + 33);
    memcpy((void *)(v73 + 120), __src, 0x1C0uLL);
    *(_DWORD *)(v73 + 568) = __src[112];
    if ((_DWORD *)(v73 + 120) == __src)
    {
      *(_DWORD *)(v73 + 616) = v129;
      *(_DWORD *)(v73 + 664) = v132;
    }
    else
    {
      *(_DWORD *)(v73 + 608) = v128;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v73 + 576), v127[2], 0);
      *(_DWORD *)(v73 + 616) = v129;
      *(_DWORD *)(v73 + 656) = v131;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v73 + 624), v130[2], 0);
      *(_DWORD *)(v73 + 664) = v132;
      *(_DWORD *)(v73 + 704) = v134;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v73 + 672), v133[2], 0);
    }
    if (__p)
    {
      v83 = (unint64_t)__p;
      operator delete(__p);
    }
    if (v86)
    {
      v87 = v86;
      operator delete(v86);
    }
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v133);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v130);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v127);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v142);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v139);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v136);
  return 0;
}

void sub_20703DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *v67;

  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  if (a66)
    operator delete(a66);
  v67 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v67;
    operator delete(v67);
  }
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x398]);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x5E8]);
  _Unwind_Resume(a1);
}

uint64_t BinarySearch(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5 = *a1;
  v6 = *a2;
  v15 = *a2;
  v7 = *(_QWORD *)(a4 + 24);
  if (!v7)
    goto LABEL_15;
  if ((*(unsigned int (**)(uint64_t, unint64_t *))(*(_QWORD *)v7 + 48))(v7, &v15))
  {
    *a3 = v6;
    return 1;
  }
  if (*a1 == *a2)
    return 0;
  v15 = v5;
  v12 = *(_QWORD *)(a4 + 24);
  if (!v12)
LABEL_15:
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v12 + 48))(v12, &v15);
  if ((_DWORD)result)
  {
    while (v5 < v6)
    {
      v13 = v5 + ((v6 - v5) >> 1);
      v15 = v13;
      v14 = *(_QWORD *)(a4 + 24);
      if (!v14)
        goto LABEL_15;
      if ((*(unsigned int (**)(uint64_t, unint64_t *))(*(_QWORD *)v14 + 48))(v14, &v15))
      {
        *a3 = v13;
        v5 = v13 + 1;
      }
      else
      {
        v6 = v5 + ((v6 - v5) >> 1);
      }
    }
    return 1;
  }
  return result;
}

uint64_t ZinCpBasedAllocator::GetPNL2DepPerfDescriptor(ZinCpBasedAllocator *this, const ZinPELayer *a2, const ZinNELayer *a3, char a4, int a5, uint64_t a6, ZinPerfDescriptor *a7, ZinPerfDescriptor *a8)
{
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE v26[2];
  void *v27[3];
  uint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;

  v16 = *((_QWORD *)a3 + 33);
  v17 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a3, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions(a3, &__p);
  if (a5)
    v18 = 65793;
  else
    v18 = 65537;
  ZinMirL2Config::SetL2DependentBufferNEWorkUnit(v16 + 120, a3, v17, (uint64_t)__p, v18, 0);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  v19 = *((_QWORD *)a3 + 33);
  if (!*(_BYTE *)(v19 + 233))
    *(_QWORD *)(v19 + 200) = a6;
  __p = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v28 = 0;
  v29 = 0;
  ZinL2FootprintCalculator::GetInterleavesAndCropOffset((_QWORD *)this + 19, (_QWORD *)this + 24, (_QWORD *)this + 29, (uint64_t)a2, (uint64_t)&__p, (uint64_t)&v30, &v29, &v28);
  ZinMirL2Config::SetL2DependentBufferPEWorkUnit(*((_QWORD *)a2 + 33) + 120, *((_QWORD *)this + 42), a2, a3, &__p, &v30, v29, v28, 1u, 0);
  v20 = *((_QWORD *)a2 + 33);
  if (!*(_BYTE *)(v20 + 233))
    *(_QWORD *)(v20 + 200) = a6;
  v26[0] = a4;
  v26[1] = a4;
  std::vector<BOOL>::vector(v27, v26, 2);
  v21 = ZinCpBasedAllocator::CalculatePerf((uint64_t)this, a2, v20, v27, 1, a7);
  if (v27[0])
    operator delete(v27[0]);
  if (v21)
  {
    v22 = 3;
  }
  else
  {
    v23 = *((_QWORD *)a3 + 33);
    v26[0] = 1;
    std::vector<BOOL>::vector(v27, v26, 1);
    v24 = ZinCpBasedAllocator::CalculatePerf((uint64_t)this, a3, v23, v27, a5, a8);
    if (v27[0])
      operator delete(v27[0]);
    if (v24)
      v22 = 3;
    else
      v22 = 0;
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  return v22;
}

void sub_20703DFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unint64_t ZinCpBasedAllocator::GetPNL2DepCircularBufferMemoryFootprint(ZinCpBasedAllocator *this, uint64_t **a2, uint64_t **a3, const ZinPerfDescriptor *a4, const ZinPerfDescriptor *a5)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  l2a *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  ZinMirL2Config *v17;
  unint64_t v18;
  uint64_t **v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  void *__p;
  _BYTE *v26;
  uint64_t *v27;

  ((void (*)(void **__return_ptr, uint64_t **))(*a2)[64])(&__p, a2);
  v7 = __p;
  if (v26 == __p)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v24 = 0;
      v24 = v7[v8];
      v21 = a2;
      v22 = v8 != 0;
      v23 = 0;
      v27 = &v24;
      v10 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v24, (uint64_t)&std::piecewise_construct, &v27)[3];
      v11 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)this + 24, (int *)&v21);
      if (!v11)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v9 += DMABuffer::CalculateSrcSize((uint64_t)a2, v8++ != 0, v10, v11[4], 0, *((unsigned __int8 **)this + 42), (uint64_t)(a2[33] + 15));
      v7 = __p;
    }
    while (v8 < (v26 - (_BYTE *)__p) >> 3);
  }
  v21 = a2;
  v12 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 14, &v21);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v13 = *(_QWORD *)(*(_QWORD *)(v12[3] + 32) + 8);
  v27 = (uint64_t *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a3)[4])(a3, 0, 0);
  v21 = a3;
  v14 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 29, &v21);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = v14[3];
  v21 = &v27;
  v16 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v27, (uint64_t)&std::piecewise_construct, &v21);
  v18 = DMABuffer::CalculateDstSize((ZinEngineLayerMirInfo **)a3, (const ZinANELayer *)v16[3], v15, 0, *((ZinIrHalParameters **)this + 42), (const ZinIrHalParameters *)(a3[33] + 15), v17);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  return v13 + v9 + v18;
}

void sub_20703E214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinCpBasedAllocator *this, const ZinPELayer *a2, const ZinNELayer *a3, char a4, unsigned __int8 a5)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v16;
  const ZinIrTensor *v17;
  ZinIrCircularBufferUtil *RootTensor;
  const ZinIrHalParameters *v19;
  StaticWrapInfo *v20;
  int v21;
  int v23;
  void **v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _BYTE *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  char *v35;
  ZinEnginePerf *v36;
  __int128 v37;
  double v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  const ZinANELayer *v42;
  l2a *v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  uint64_t v51;
  ZinEngineLayerMirInfo **v52;
  _QWORD *v53;
  ZinMirL2Config *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v58;
  const ZinNELayer *v59;
  _BOOL4 v60;
  int v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  void *__p;
  _BYTE *v66;
  uint64_t v67;
  _OWORD v68[7];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  void *v75;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  _OWORD v87[8];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  void *v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  _DWORD __src[113];
  uint64_t *v106[4];
  int v107;
  int v108;
  uint64_t *v109[4];
  int v110;
  int v111;
  uint64_t *v112[4];
  int v113;
  _DWORD __dst[113];
  uint64_t *v115[4];
  int v116;
  int v117;
  uint64_t *v118[4];
  int v119;
  int v120;
  uint64_t *v121[4];
  int v122;
  unsigned __int8 v123;
  char v124;
  const ZinNELayer *v125;
  const ZinANELayer *v126;
  void **p_p;
  void **v128;
  _BYTE v129[24];
  _BYTE *v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v125 = a3;
  v126 = a2;
  v124 = a4;
  v123 = a5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 33);
  memcpy(__dst, v6 + 30, sizeof(__dst));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v115, (uint64_t)(v6 + 144));
  v117 = v6[154];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v118, (uint64_t)(v6 + 156));
  v120 = v6[166];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v121, (uint64_t)(v6 + 168));
  v7 = (_DWORD *)*((_QWORD *)v125 + 33);
  memcpy(__src, v7 + 30, sizeof(__src));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v106, (uint64_t)(v7 + 144));
  v108 = v7[154];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v109, (uint64_t)(v7 + 156));
  v111 = v7[166];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v112, (uint64_t)(v7 + 168));
  v8 = (*(uint64_t (**)(const ZinANELayer *, uint64_t))(*(_QWORD *)v126 + 368))(v126, 3);
  v9 = *((_QWORD *)this + 42);
  if (*(_BYTE *)(v9 + 1117))
    v10 = *(void ***)(v9 + 656);
  else
    v10 = (void **)v8;
  v92 = 0;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  memset(v87, 0, sizeof(v87));
  v11 = operator new(8uLL);
  v93 = v11;
  *v11 = 0;
  v95 = v11 + 1;
  v94 = v11 + 1;
  v97 = 0;
  v96 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v98 = _Q0;
  v99 = _Q0;
  v100 = _Q0;
  v101 = _Q0;
  v58 = _Q0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v69 = 0u;
  memset(v68, 0, sizeof(v68));
  v16 = operator new(8uLL);
  v75 = v16;
  *v16 = 0;
  v76 = v16 + 1;
  v77 = v16 + 1;
  v78 = 0;
  v79 = 0;
  v80 = v58;
  v81 = v58;
  v82 = v58;
  v83 = v58;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v17 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v126 + 32))(v126, 0, 0);
  RootTensor = (ZinIrCircularBufferUtil *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v17);
  v21 = ZinIrCircularBufferUtil::QualifyForCircularBuffer(RootTensor, *((const ZinIrTensor **)this + 42), v19, v20);
  if (v124)
    _ZF = v123 == 0;
  else
    _ZF = 1;
  if (_ZF)
    v23 = v21;
  else
    v23 = 0;
  v67 = (uint64_t)v10;
  v24 = v10;
  if (v23 == 1)
    v24 = *(void ***)(*((_QWORD *)this + 42) + 648);
  p_p = v24;
  __p = v10;
  v130 = 0;
  v25 = operator new(0x50uLL);
  *v25 = &off_24C001348;
  v25[1] = this;
  v25[2] = &v126;
  v25[3] = &v125;
  v25[4] = &v124;
  v25[5] = &v123;
  v25[6] = v87;
  v25[7] = v68;
  v25[8] = __dst;
  v25[9] = __src;
  v130 = v25;
  v26 = BinarySearch((unint64_t *)&p_p, (unint64_t *)&__p, (unint64_t *)&v67, (uint64_t)v129);
  v27 = v130;
  if (v130 == v129)
  {
    v28 = 4;
    v27 = v129;
  }
  else
  {
    if (!v130)
      goto LABEL_17;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_17:
  if (((v23 ^ 1 | v26) & 1) != 0)
  {
    if (ZinCpBasedAllocator::GetPNL2DepPerfDescriptor(this, v126, v125, v124, v123, v67, (ZinPerfDescriptor *)v87, (ZinPerfDescriptor *)v68))ZinAssertImpl("Perf descriptor must be valid");
    __p = v126;
    p_p = &__p;
    v29 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)this + 112, &__p, (uint64_t)&std::piecewise_construct, &p_p);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v126 + 512))(&__p);
    v30 = __p;
    v31 = v66;
    if (v66 != __p)
    {
      v32 = 0;
      do
      {
        if (!v124)
        {
          v64 = 0;
          v64 = v30[v32];
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v29[3], (char **)&p_p);
          v33 = p_p[v32];
          v128 = p_p;
          operator delete(p_p);
          v34 = (unint64_t)((double)*((unint64_t *)&v88 + 1)
                                 / *((double *)this + 123)
                                 * 1000.0
                                 * 1000.0
                                 * 1000.0);
          v35 = (char *)v87 + 8 * v32;
          if (v34 <= (unint64_t)((double)(unint64_t)(*((_QWORD *)v35 + 13)
                                                                  / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                                       / *((double *)this + 124)
                                       * 1000.0
                                       * 1000.0
                                       * 1000.0))
            v34 = (unint64_t)((double)(unint64_t)(*((_QWORD *)v35 + 13)
                                                              / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                                   / *((double *)this + 124)
                                   * 1000.0
                                   * 1000.0
                                   * 1000.0);
          v33[8] = v34;
          v36 = *(ZinEnginePerf **)(v64 + 96);
          v37 = *((_OWORD *)this + 62);
          v62[0] = *((_OWORD *)this + 61);
          v62[1] = v37;
          v63 = *((_QWORD *)this + 126);
          if (ZinEnginePerf::HasDMAReadStall(v36, v126, (uint64_t)v87, (uint64_t)v62, 0))
          {
            v38 = (double)(unint64_t)(*((_QWORD *)v35 + 13) / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
                / *((double *)this + 124)
                * 1000.0
                * 1000.0
                * 1000.0;
            if ((unint64_t)v38 >= (unint64_t)((double)*((unint64_t *)&v88 + 1)
                                                           / *((double *)this + 123)
                                                           * 1000.0
                                                           * 1000.0
                                                           * 1000.0))
              v39 = (unint64_t)((double)*((unint64_t *)&v88 + 1)
                                     / *((double *)this + 123)
                                     * 1000.0
                                     * 1000.0
                                     * 1000.0);
            else
              v39 = (unint64_t)v38;
          }
          else
          {
            v39 = 0;
          }
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v29[3], (char **)&p_p);
          v40 = p_p[v32];
          v128 = p_p;
          operator delete(p_p);
          v40[15] = v39;
          v59 = v126;
          v60 = v32 != 0;
          v61 = 0;
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v29[3], (char **)&p_p);
          v41 = p_p[v32];
          v128 = p_p;
          operator delete(p_p);
          v42 = v126;
          p_p = (void **)&v64;
          v43 = (l2a *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v64, (uint64_t)&std::piecewise_construct, &p_p)[3];
          v44 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)this + 24, (int *)&v59);
          if (!v44)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v41[9] = DMABuffer::CalculateSrcSize((uint64_t)v42, v32 != 0, v43, v44[4], 0, *((unsigned __int8 **)this + 42), *((_QWORD *)v126 + 33) + 120);
          v30 = __p;
          v31 = v66;
        }
        ++v32;
      }
      while (v32 < (v31 - (_BYTE *)v30) >> 3);
    }
    v59 = v125;
    p_p = (void **)&v59;
    v45 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)this + 112, &v59, (uint64_t)&std::piecewise_construct, &p_p);
    if (!v123)
    {
      v46 = v45;
      p_p = (void **)v125;
      v47 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 29, &p_p);
      if (!v47)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v48 = v47[3];
      v49 = (unint64_t)((double)*((unint64_t *)&v71 + 1)
                             / *((double *)this + 123)
                             * 1000.0
                             * 1000.0
                             * 1000.0);
      v50 = (double)(unint64_t)(*((_QWORD *)&v69 + 1) / *(_QWORD *)(*((_QWORD *)this + 42) + 520))
          / *((double *)this + 124)
          * 1000.0
          * 1000.0
          * 1000.0;
      if (v49 <= (unint64_t)v50)
        v49 = (unint64_t)v50;
      *(_QWORD *)(*(_QWORD *)(v46[3] + 32) + 80) = v49;
      v59 = 0;
      v59 = (const ZinNELayer *)(*(uint64_t (**)(const ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0, 0);
      v51 = *(_QWORD *)(v46[3] + 32);
      v52 = (ZinEngineLayerMirInfo **)v125;
      p_p = (void **)&v59;
      v53 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)this + 152, &v59, (uint64_t)&std::piecewise_construct, &p_p);
      *(_QWORD *)(v51 + 88) = DMABuffer::CalculateDstSize(v52, (const ZinANELayer *)v53[3], v48, 0, *((ZinIrHalParameters **)this + 42), (const ZinIrHalParameters *)(*((_QWORD *)v125 + 33) + 120), v54);
    }
    v55 = *((_QWORD *)v126 + 33);
    memcpy((void *)(v55 + 120), __dst, 0x1C0uLL);
    *(_DWORD *)(v55 + 568) = __dst[112];
    if ((_DWORD *)(v55 + 120) == __dst)
    {
      *(_DWORD *)(v55 + 616) = v117;
      *(_DWORD *)(v55 + 664) = v120;
    }
    else
    {
      *(_DWORD *)(v55 + 608) = v116;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v55 + 576), v115[2], 0);
      *(_DWORD *)(v55 + 616) = v117;
      *(_DWORD *)(v55 + 656) = v119;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v55 + 624), v118[2], 0);
      *(_DWORD *)(v55 + 664) = v120;
      *(_DWORD *)(v55 + 704) = v122;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v55 + 672), v121[2], 0);
    }
    v56 = *((_QWORD *)v125 + 33);
    memcpy((void *)(v56 + 120), __src, 0x1C0uLL);
    *(_DWORD *)(v56 + 568) = __src[112];
    if ((_DWORD *)(v56 + 120) == __src)
    {
      *(_DWORD *)(v56 + 616) = v108;
      *(_DWORD *)(v56 + 664) = v111;
    }
    else
    {
      *(_DWORD *)(v56 + 608) = v107;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v56 + 576), v106[2], 0);
      *(_DWORD *)(v56 + 616) = v108;
      *(_DWORD *)(v56 + 656) = v110;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v56 + 624), v109[2], 0);
      *(_DWORD *)(v56 + 664) = v111;
      *(_DWORD *)(v56 + 704) = v113;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v56 + 672), v112[2], 0);
    }
    if (__p)
    {
      v66 = __p;
      operator delete(__p);
    }
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v112);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v109);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v106);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v121);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v118);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v115);
  return 0;
}

void sub_20703EB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  void *v55;

  if (__p)
    operator delete(__p);
  if (a54)
    operator delete(a54);
  v55 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v55;
    operator delete(v55);
  }
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x338]);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x588]);
  _Unwind_Resume(a1);
}

void ZinCpBasedAllocator::CreateCpAllocGraphDotFile(ZinCpBasedAllocator *this, const CpAllocGraph *a2)
{
  size_t v4;
  std::string *v5;
  char *v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::ios_base *v18;
  std::string *v19;
  std::string::size_type v20;
  std::string __p;
  std::string v22;
  void *v23[2];
  std::string::size_type v24;
  std::string v25;
  _QWORD v26[20];

  v26[19] = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 63))
  {
    if (*((char *)this + 967) >= 0)
      v4 = *((unsigned __int8 *)this + 967);
    else
      v4 = *((_QWORD *)this + 119);
    v5 = &v22;
    std::string::basic_string[abi:ne180100]((uint64_t)&v22, v4 + 9);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if (v4)
    {
      if (*((char *)this + 967) >= 0)
        v6 = (char *)this + 944;
      else
        v6 = (char *)*((_QWORD *)this + 118);
      memmove(v5, v6, v4);
    }
    strcpy((char *)v5 + v4, ".CpGraph.");
    if (*((char *)a2 + 255) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 29), *((_QWORD *)a2 + 30));
    else
      __p = *(std::string *)((char *)a2 + 232);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v25, ".dot", 4uLL);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v24 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)v23 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    v13 = MEMORY[0x24BEDB840];
    v14 = MEMORY[0x24BEDB840] + 64;
    v15 = (std::string::size_type *)MEMORY[0x24BEDB7E8];
    v16 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
    v17 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
    v26[0] = MEMORY[0x24BEDB840] + 64;
    v25.__r_.__value_.__r.__words[0] = v16;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + *(_QWORD *)(v16 - 24)) = v17;
    v18 = (std::ios_base *)((char *)&v25 + *(_QWORD *)(v25.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v18, &v25.__r_.__value_.__r.__words[1]);
    v18[1].__vftable = 0;
    v18[1].__fmtflags_ = -1;
    v25.__r_.__value_.__r.__words[0] = v13 + 24;
    v26[0] = v14;
    MEMORY[0x20BCFFEA8](&v25.__r_.__value_.__r.__words[1]);
    std::ofstream::open();
    CpGraph::CreateDotString((CpGraph **)a2, &v22);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v22;
    else
      v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    else
      v20 = v22.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)v19, v20);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&v25 + *(_QWORD *)(v25.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v25 + *(_QWORD *)(v25.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
    v25.__r_.__value_.__r.__words[0] = *v15;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words
                              + *(_QWORD *)(v25.__r_.__value_.__r.__words[0] - 24)) = v15[3];
    MEMORY[0x20BCFFEB4](&v25.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x20BD0022C](v26);
    if (SHIBYTE(v24) < 0)
      operator delete(v23[0]);
  }
}

void sub_20703EF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinCpBasedAllocator::CalculatesL2BudgetPerRegion(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const ZinIrTensor *v11;
  const ZinIrTensor *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *RootTensors;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t RootTensor;
  _OWORD v35[2];
  int v36;

  memset(v35, 0, sizeof(v35));
  v36 = 1065353216;
  v5 = (uint64_t *)*a2;
  v6 = (uint64_t *)a2[1];
  if ((uint64_t *)*a2 == v6)
  {
    v13 = *a2;
  }
  else
  {
    do
    {
      v8 = *v5;
      v9 = *(_QWORD **)(*v5 + 88);
      v10 = *(_QWORD **)(*v5 + 96);
      while (v9 != v10)
      {
        v11 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v9 + 32))(*v9, 0, 0);
        RootTensor = ZinTensorFamilyUtil::GetRootTensor((ZinTensorFamilyUtil *)(a1 + 1048), v11);
        std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v35, &RootTensor, &RootTensor);
        ++v9;
      }
      v12 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
      RootTensor = ZinTensorFamilyUtil::GetRootTensor((ZinTensorFamilyUtil *)(a1 + 1048), v12);
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v35, &RootTensor, &RootTensor);
      ++v5;
    }
    while (v5 != v6);
    v13 = *a2;
    v5 = (uint64_t *)a2[1];
  }
  v14 = *(_QWORD *)(*(_QWORD *)v13 + 48);
  v15 = *(v5 - 1);
  v16 = *(_QWORD *)(v15 + 48);
  v17 = *(_QWORD *)(v15 + 56);
  RootTensors = (_QWORD *)ZinTensorFamilyUtil::GetRootTensors((ZinTensorFamilyUtil *)(a1 + 1048));
  v20 = RootTensors + 1;
  v19 = (_QWORD *)*RootTensors;
  if ((_QWORD *)*RootTensors == RootTensors + 1)
  {
    v21 = 0;
  }
  else
  {
    v21 = 0;
    v22 = v17 + v16;
    do
    {
      v23 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a1 + 280), v19 + 4);
      if (!v23)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v35, v19 + 4))
      {
        v27 = v23[3];
        if ((v27 & 0x8000000000000000) == 0)
        {
          v28 = v23[4];
          if ((v28 & 0x8000000000000000) == 0
            && (v14 & 0x8000000000000000) == 0
            && (v22 & 0x8000000000000000) == 0
            && v27 <= v14
            && v28 >= v22)
          {
            v29 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a1 + 72), v19 + 4);
            if (v29)
            {
              if (!*((_DWORD *)v29 + 6))
              {
                ZinL2FootprintCalculator::GetResidentBufferSize(*(ZinL2FootprintCalculator **)(a1 + 272), (const ZinIrTensor *)v19[4]);
                v21 += v30;
              }
            }
          }
        }
      }
      v24 = (_QWORD *)v19[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v19[2];
          v26 = *v25 == (_QWORD)v19;
          v19 = v25;
        }
        while (!v26);
      }
      v19 = v25;
    }
    while (v25 != v20);
  }
  if (a3 <= v21)
  {
    *a4 = 0;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      ZinCpBasedAllocator::CalculatesL2BudgetPerRegion();
  }
  else
  {
    *a4 = a3 - v21;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v35);
  return a3 > v21;
}

void sub_20703F220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinCpBasedAllocator::InitializeWorkUnit(ZinCpBasedAllocator *this)
{
  ZinIrOpLayer ***v1;
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  NSObject *v4;
  ZinIrOpLayer *v5;
  _BOOL4 IsNELayer;
  uint64_t v7;
  unsigned int v8;
  char v9;
  void *__p;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v1 = (ZinIrOpLayer ***)*((_QWORD *)this + 40);
  v2 = *v1;
  v3 = v1[1];
  if (*v1 != v3)
  {
    v4 = MEMORY[0x24BDACB70];
    do
    {
      v5 = *v2;
      if (ZinIrOpLayer::IsANELayer(*v2))
      {
        IsNELayer = ZinIrOpLayer::IsNELayer(v5);
        v7 = *((_QWORD *)v5 + 33);
        if (IsNELayer)
        {
          v8 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v5, 0) + 88);
          ZinIrOpLayer::GetInputTensorDimensions(v5, &__p);
          v9 = ZinMirL2Config::ZinMirSetWorkUnitShape(v7 + 120, v5, v8);
          if (__p)
          {
            v11[0] = __p;
            operator delete(__p);
          }
          if ((v9 & 1) == 0 && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          {
            __p = (void *)0x63704000202;
            LOWORD(v11[0]) = 2080;
            *(_QWORD *)((char *)v11 + 2) = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/Zin"
                                           "IrSchedule/src/ZinCpBasedAllocator.cpp";
            _os_log_error_impl(&dword_2069AB000, v4, OS_LOG_TYPE_ERROR, "Error: failed workunit selection, line: %d, file: %s", (uint8_t *)&__p, 0x12u);
          }
        }
        else if (!*(_BYTE *)(v7 + 256))
        {
          *(_OWORD *)(v7 + 240) = xmmword_207A7E150;
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_20703F3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCpBasedAllocator::InitializeTileHeight(uint64_t this)
{
  ZinIrOpLayer ***v1;
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  ZinIrOpLayer *v4;

  v1 = *(ZinIrOpLayer ****)(this + 320);
  v2 = *v1;
  v3 = v1[1];
  while (v2 != v3)
  {
    v4 = *v2;
    this = ZinIrOpLayer::IsANELayer(*v2);
    if ((_DWORD)this)
      this = ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(*((_QWORD *)v4 + 33) + 120), v4, 1);
    ++v2;
  }
  return this;
}

void ZinCpBasedAllocator::InitializeEarlyAllocationDecision(ZinCpBasedAllocator *this)
{
  char *v2;
  char *v3;
  const ZinIrHalParameters *v4;
  unint64_t v5;
  uint64_t v6;
  const ZinIrTensor *v7;
  int IsChainable;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  const ZinIrHalParameters *v21;
  StaticWrapInfo *v22;
  char *v23;
  char *v24;
  ZinCpBasedAllocator *v25;
  const ZinIrHalParameters *v26;
  const ZinIrHalParameters *v27;
  unint64_t v28;
  unint64_t v29;
  char **v30;
  ZinIrTensor *v31;
  _QWORD *v32[2];
  _QWORD *v33[3];
  _QWORD **v34;
  _QWORD *v35[2];
  char v36;
  _OWORD v37[2];
  int v38;
  ZinIrRegAllocUtil *v39;

  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v34 = v35;
  memset(v37, 0, sizeof(v37));
  v38 = 1065353216;
  v2 = (char *)*((_QWORD *)this + 3);
  v30 = (char **)((char *)this + 24);
  v3 = (char *)this + 32;
  if (v2 != (char *)this + 32)
  {
    do
    {
      v39 = (ZinIrRegAllocUtil *)*((_QWORD *)v2 + 4);
      ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 34), v39);
      v6 = v5;
      v7 = (const ZinIrTensor *)*((_QWORD *)this + 42);
      if (v5 <= *((_QWORD *)v7 + 51))
      {
        v9 = *((_QWORD *)v39 + 13);
        if (!v9)
          goto LABEL_16;
        v10 = 0;
      }
      else
      {
        if (*((_BYTE *)this + 969))
          goto LABEL_12;
        IsChainable = ZinIrRegAllocUtil::IsChainable(v39, v7, v4);
        v9 = *((_QWORD *)v39 + 13);
        if (!v9)
        {
          if ((IsChainable & 1) != 0)
          {
LABEL_16:
            v33[0] = &v39;
            v15 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v39, (uint64_t)&std::piecewise_construct, v33);
            ZinIrMemoryPressureAnalyzer::AddTensorAllocation((ZinIrMemoryPressureAnalyzer *)&v34, v6, (const ZinLiveRange *)(v15 + 3), v39);
            goto LABEL_17;
          }
LABEL_12:
          v33[0] = &v39;
          v13 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v39, (uint64_t)&std::piecewise_construct, v33);
          ZinIrMemoryPressureAnalyzer::AddTensorAllocation((ZinIrMemoryPressureAnalyzer *)&v34, v6, (const ZinLiveRange *)(v13 + 3), v39);
          v32[0] = v39;
          v33[0] = v32;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, v32, (uint64_t)&std::piecewise_construct, v33)+ 6) = 1;
          ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(this, v39, (ZinIrMemoryPressureAnalyzer *)&v34);
          goto LABEL_17;
        }
        v10 = IsChainable ^ 1;
      }
      v11 = *(_DWORD *)(v9 + 96);
      v12 = v11 != 2 && v10 == 0;
      if (!v12)
        goto LABEL_12;
      if (v11 != 1)
        goto LABEL_16;
      v33[0] = &v39;
      v14 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v39, (uint64_t)&std::piecewise_construct, v33);
      ZinIrMemoryPressureAnalyzer::AddTensorAllocation((ZinIrMemoryPressureAnalyzer *)&v34, v6, (const ZinLiveRange *)(v14 + 3), v39);
      v32[0] = v39;
      v33[0] = v32;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, v32, (uint64_t)&std::piecewise_construct, v33)+ 6) = 0;
LABEL_17:
      v16 = (char *)*((_QWORD *)v2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (char *)*((_QWORD *)v2 + 2);
          v12 = *(_QWORD *)v17 == (_QWORD)v2;
          v2 = v17;
        }
        while (!v12);
      }
      v2 = v17;
    }
    while (v17 != v3);
  }
  v18 = *(_QWORD *)(*((_QWORD *)this + 42) + 408);
  v19 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 40) + 8) - **((_QWORD **)this + 40)) >> 3;
  v32[0] = 0;
  v32[1] = (_QWORD *)v19;
  ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(&v34, v18, (uint64_t *)v32, (uint64_t)v33);
  v20 = *v30;
  if (*v30 != v3)
  {
    do
    {
      v31 = (ZinIrTensor *)*((_QWORD *)v20 + 4);
      if (!std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 9, &v31))
      {
        v25 = (ZinCpBasedAllocator *)ZinIrCircularBufferUtil::QualifyForCircularBuffer(v31, *((const ZinIrTensor **)this + 42), v21, v22);
        if ((_DWORD)v25 && ZinCpBasedAllocator::IsBoundaryForTiledRegions(v25, v31))
        {
          v39 = v31;
          v32[0] = &v39;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &v39, (uint64_t)&std::piecewise_construct, v32)+ 6) = 6;
        }
        else if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v33, (uint64_t *)&v31))
        {
          ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 34), v31);
          v29 = v28;
          if ((*((_BYTE *)this + 969)
             || (ZinIrRegAllocUtil::IsChainable(v31, *((const ZinIrTensor **)this + 42), v27) & 1) == 0)
            && v29 > *(_QWORD *)(*((_QWORD *)this + 42) + 408))
          {
            v39 = v31;
            v32[0] = &v39;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &v39, (uint64_t)&std::piecewise_construct, v32)+ 6) = 1;
          }
        }
        else if (*((_BYTE *)this + 969)
               || (ZinIrRegAllocUtil::IsChainable(v31, *((const ZinIrTensor **)this + 42), v26) & 1) == 0)
        {
          v39 = v31;
          v32[0] = &v39;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &v39, (uint64_t)&std::piecewise_construct, v32)+ 6) = 0;
        }
      }
      v23 = (char *)*((_QWORD *)v20 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (char *)*((_QWORD *)v20 + 2);
          v12 = *(_QWORD *)v24 == (_QWORD)v20;
          v20 = v24;
        }
        while (!v12);
      }
      v20 = v24;
    }
    while (v24 != v3);
  }
  ZinCpBasedAllocatorUtil::PrintEarlyAllocationDecision((_QWORD *)this + 47, v30, (ZinCpBasedAllocator *)((char *)this + 72), *((ZinIrTensor **)this + 42));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v33, v33[1]);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v37);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)&v34, v35[0]);
}

void sub_20703F884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  _QWORD *v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD *);
  v9 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, v8);
  ZinIrMemoryPressureAnalyzer::~ZinIrMemoryPressureAnalyzer((ZinIrMemoryPressureAnalyzer *)va1);
  _Unwind_Resume(a1);
}

void ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(ZinCpBasedAllocator *this, const ZinIrTensor *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  char *v5;
  char *v6;
  const ZinANELayer *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  const ZinANELayer *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21[2];
  char *v22;
  char *v23;

  ZinIrTensor::GetTensorFamily(a2, (uint64_t)&v22);
  v5 = v22;
  v6 = v23;
  if (v22 != v23)
  {
    do
    {
      v7 = *(const ZinANELayer **)(*(_QWORD *)v5 + 96);
      if (ZinIrOpLayer::IsANELayer(v7))
        ZinCpBasedAllocator::AddOutputDMABufferToPressureAnalyzer(this, v7, a3);
      v21[0] = 0;
      v21[1] = 0;
      v20 = (uint64_t *)v21;
      v8 = (uint64_t *)*((_QWORD *)v7 + 14);
      v9 = (uint64_t *)*((_QWORD *)v7 + 15);
      if (v8 != v9)
      {
        do
        {
          std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v20, v21, v8, v8);
          ++v8;
        }
        while (v8 != v9);
        v10 = v20;
        if (v20 != (uint64_t *)v21)
        {
          do
          {
            v11 = (const ZinANELayer *)v10[4];
            if (ZinIrOpLayer::IsANELayer(v11))
            {
              (*(void (**)(_QWORD **__return_ptr, const ZinANELayer *))(*(_QWORD *)v11 + 512))(&v18, v11);
              v12 = v18;
              v13 = v19;
              if (v19 == v18)
              {
                v12 = v19;
                if (!v19)
                  goto LABEL_15;
              }
              else
              {
                v14 = 0;
                do
                {
                  if (*(const ZinANELayer **)(v12[v14] + 96) == v7)
                  {
                    ZinCpBasedAllocator::AddInputDMABufferToPressureAnalyzer(this, v11, v14, a3);
                    v12 = v18;
                    v13 = v19;
                  }
                  ++v14;
                }
                while (v14 < v13 - v12);
                if (!v12)
                  goto LABEL_15;
              }
              v19 = v12;
              operator delete(v12);
            }
LABEL_15:
            v15 = (uint64_t *)v10[1];
            if (v15)
            {
              do
              {
                v16 = v15;
                v15 = (uint64_t *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (uint64_t *)v10[2];
                v17 = *v16 == (_QWORD)v10;
                v10 = v16;
              }
              while (!v17);
            }
            v10 = v16;
          }
          while (v16 != (uint64_t *)v21);
        }
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
      v5 += 8;
    }
    while (v5 != v6);
    v5 = v22;
  }
  if (v5)
  {
    v23 = v5;
    operator delete(v5);
  }
}

void sub_20703FA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinCpBasedAllocator::IsBoundaryForTiledRegions(ZinCpBasedAllocator *this, ZinIrTensor *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  ZinIrOpLayer *v5;
  ZinIrOpLayer **v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer *v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v15 = (uint64_t *)&v16;
  ZinIrTensor::GetTensorFamily(a2, (uint64_t)&v13);
  v2 = v13;
  v3 = v14;
  if (v13 != v14)
  {
    do
    {
      v4 = *(_QWORD *)v2;
      v5 = *(ZinIrOpLayer **)(*(_QWORD *)v2 + 96);
      if (ZinIrOpLayer::IsANELayer(v5) && *(_BYTE *)(v4 + 144))
      {
        v12 = *(unsigned __int16 *)(v4 + 128);
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v15, (unint64_t *)&v12, &v12);
      }
      v6 = (ZinIrOpLayer **)*((_QWORD *)v5 + 14);
      v7 = (ZinIrOpLayer **)*((_QWORD *)v5 + 15);
      while (v6 != v7)
      {
        v8 = *v6;
        if (ZinIrOpLayer::IsANELayer(*v6)
          && *(_BYTE *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0)
                      + 144))
        {
          v9 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
          if (!*(_BYTE *)(v9 + 144))
            std::__throw_bad_optional_access[abi:ne180100]();
          v12 = *(unsigned __int16 *)(v9 + 128);
          std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v15, (unint64_t *)&v12, &v12);
        }
        ++v6;
      }
      v2 += 8;
    }
    while (v2 != v3);
    v2 = v13;
  }
  if (v2)
  {
    v14 = v2;
    operator delete(v2);
  }
  v10 = v17 != 0;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v15, v16);
  return v10;
}

void sub_20703FC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::NeedSplitForInplaceAllocation(ZinCpBasedAllocator *this, ZinIrOpLayer *a2)
{
  const ZinIrOpLayerGraph *v4;
  ZinIrTensor *v5;
  unint64_t v6;
  unint64_t v7;
  const ZinIrTensor *v8;
  const ZinANELayer *LastConsumer;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  ZinIrRegAllocUtil *v13;
  const ZinIrTensor *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  const ZinIrTensor *v19;
  ZinIrRegAllocUtil *RootTensor;
  int IsPipelinable;
  char v22;
  unint64_t *v23[2];
  char v24;

  if (!a2)
    return 0;
  v4 = (const ZinIrOpLayerGraph *)*((_QWORD *)a2 + 19);
  v5 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinIrTensor::GetTensorSizeInBytes(v5);
  v7 = v6;
  if (*((_BYTE *)this + 1152))
  {
    v8 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    ZinTensorFamilyUtil::GetLastReadUsage((ZinCpBasedAllocator *)((char *)this + 1048), v8, v23);
    if (v24)
    {
      LastConsumer = (const ZinANELayer *)v23[0];
      if (v23[0])
        goto LABEL_5;
    }
LABEL_8:
    v11 = 0;
    v10 = 0;
    goto LABEL_9;
  }
  v13 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  LastConsumer = (const ZinANELayer *)ZinIrRegAllocUtil::GetLastConsumer(v13, v14);
  if (!LastConsumer)
    goto LABEL_8;
LABEL_5:
  ZinIrInPlaceUpdate::IsInPlaceable(*((ZinIrTensor **)this + 127), LastConsumer, v4, 2, *(_BYTE *)(*((_QWORD *)this + 42) + 1115), v23);
  v10 = v23[0];
  v11 = v23[1];
LABEL_9:
  if (!ZinIrOpLayer::IsPELayer(a2)
    || (v15 = *((_QWORD *)a2 + 11), v16 = *((_QWORD *)a2 + 12), (unint64_t)(v16 - v15) < 9))
  {
LABEL_15:
    v12 = 0;
    goto LABEL_16;
  }
  v12 = 0;
  if (*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14) >= 9uLL && v11 != v10)
  {
    if (v7 >= *((_QWORD *)this + 45) && v7 <= *((_QWORD *)this + 46))
    {
      if (v15 == v16)
      {
        v12 = 1;
      }
      else
      {
        v18 = v15 + 8;
        do
        {
          v19 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v18 - 8) + 32))(*(_QWORD *)(v18 - 8), 0, 0);
          RootTensor = (ZinIrRegAllocUtil *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v19);
          IsPipelinable = ZinIrRegAllocUtil::IsPipelinable(RootTensor, *((const ZinIrTensor **)this + 42), (ZinCpBasedAllocator *)((char *)this + 1048));
          if (v18 == v16)
            v22 = 1;
          else
            v22 = IsPipelinable;
          v18 += 8;
        }
        while ((v22 & 1) == 0);
        v12 = IsPipelinable ^ 1u;
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  if (v10)
    operator delete(v10);
  return v12;
}

void sub_20703FE1C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ZinCpBasedAllocator::GetEarlyAllocationDecision(ZinCpBasedAllocator *this, const ZinANELayer *a2, BOOL *a3, BOOL *a4)
{
  const ZinIrTensor **v8;
  unint64_t v9;
  _QWORD *v10;
  const ZinIrTensor *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t RootTensor;
  void *__p;
  _BYTE *v16;

  *a3 = 1;
  (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(&__p, a2);
  v8 = (const ZinIrTensor **)__p;
  if (v16 != __p)
  {
    v9 = 0;
    while (1)
    {
      RootTensor = 0;
      RootTensor = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v8[v9]);
      v10 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &RootTensor);
      if (!v10 || *((_DWORD *)v10 + 6))
        break;
      ++v9;
      v8 = (const ZinIrTensor **)__p;
      if (v9 >= (v16 - (_BYTE *)__p) >> 3)
        goto LABEL_8;
    }
    *a3 = 0;
  }
LABEL_8:
  v11 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v11);
  v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &RootTensor);
  if (v12)
    v13 = *((_DWORD *)v12 + 6) == 0;
  else
    v13 = 0;
  *a4 = v13;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20703FF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(ZinCpBasedAllocator *this, const ZinANELayer *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  unint64_t i;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v10;
  _BYTE *v11;

  for (i = 0; ; ++i)
  {
    (*(void (**)(_BYTE **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(&v10, a2);
    v7 = v10;
    v8 = v11;
    if (v10)
    {
      v11 = v10;
      operator delete(v10);
    }
    if (i >= (v8 - v7) >> 3)
      break;
    ZinCpBasedAllocator::RemoveInputDMABufferFromPressureAnalyzer(this, a2, i, a3);
  }
  return ZinCpBasedAllocator::RemoveOutputDMABufferFromPressureAnalyzer(this, a2, a3);
}

_QWORD *ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(ZinCpBasedAllocator *this, const ZinANELayer *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  unint64_t i;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v10;
  _BYTE *v11;

  for (i = 0; ; ++i)
  {
    (*(void (**)(_BYTE **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(&v10, a2);
    v7 = v10;
    v8 = v11;
    if (v10)
    {
      v11 = v10;
      operator delete(v10);
    }
    if (i >= (v8 - v7) >> 3)
      break;
    ZinCpBasedAllocator::AddInputDMABufferToPressureAnalyzer(this, a2, i, a3);
  }
  return ZinCpBasedAllocator::AddOutputDMABufferToPressureAnalyzer(this, a2, a3);
}

uint64_t ZinCpBasedAllocator::AddL2BufferToPressureAnalyzer(ZinCpBasedAllocator *this, ZinIrTensor *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  _QWORD *v5;
  ZinIrOpLayer *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  ZinIrTensor *v11;
  ZinIrOpLayer *v12;

  v11 = a2;
  v5 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &v11);
  if (!v5 || *((_DWORD *)v5 + 6))
    ZinAssertImpl("Allocation decision must exist.");
  v6 = (ZinIrOpLayer *)*((_QWORD *)v11 + 12);
  if (!ZinIrOpLayer::IsANELayer(v6))
    ZinAssertImpl("Producer must be engine layer.");
  v12 = v6;
  v7 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &v12);
  if (v7)
    v8 = *(_QWORD *)(*(_QWORD *)(v7[3] + 32) + 8);
  else
    v8 = 0;
  v9 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 35, &v11);
  if (!v9)
    ZinAssertImpl("Liverange must exist.");
  return ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a3, v8, (const ZinLiveRange *)(v9 + 3), v11);
}

uint64_t ZinCpBasedAllocator::IsDisqualifiedForParallelExecution(ZinCpBasedAllocator *this, ZinANELayer *a2, ZinANELayer *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _BOOL4 IsNELayer;
  const ZinIrTensor *v11;
  ZinIrTensor *RootTensor;
  const ZinIrTensor *v13;
  _QWORD *v14;
  _QWORD *v15;
  const ZinIrTensor *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  const ZinIrTensor *v20;
  _QWORD *v21;
  unsigned int v22;
  const ZinIrTensor *v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const ZinIrTensor *v34;
  _QWORD *v35;
  _BOOL4 IsNonResident;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  const ZinIrTensor *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  ZinIrTensor *v45;
  ZinIrTensor *v46;
  uint64_t v47;

  v3 = *((_QWORD *)a2 + 45);
  v4 = *((_QWORD *)a3 + 45);
  v5 = v3 == -1 || v4 == -1;
  if (v5 || v4 - v3 != 1)
    return 1;
  IsNELayer = ZinIrOpLayer::IsNELayer(a2);
  if (IsNELayer == ZinIrOpLayer::IsNELayer(a3))
    return 1;
  v11 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v11);
  v46 = RootTensor;
  v13 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  v45 = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v13);
  v14 = (_QWORD *)*((_QWORD *)a3 + 11);
  v15 = (_QWORD *)*((_QWORD *)a3 + 12);
  while (v14 != v15)
  {
    v16 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v14 + 32))(*v14, 0, 0);
    if (RootTensor == (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v16))return 1;
    ++v14;
  }
  v17 = (uint64_t *)*((_QWORD *)a2 + 11);
  v18 = (uint64_t *)*((_QWORD *)a2 + 12);
  if (v17 != v18)
  {
    while (1)
    {
      v19 = *v17;
      v47 = 0;
      v20 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0, 0);
      v47 = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v20);
      v21 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &v47);
      if (!v21)
        break;
      v22 = *((_DWORD *)v21 + 6);
      if ((CpAllocUtils::IsL2Dependent(v22) & 1) != 0 || CpAllocUtils::IsChain(v22))
        return 1;
      if (++v17 == v18)
        goto LABEL_19;
    }
LABEL_47:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
LABEL_19:
  v23 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  v44 = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v23);
  v24 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &v44);
  if (!v24)
    goto LABEL_47;
  v25 = *((_DWORD *)v24 + 6);
  if ((CpAllocUtils::IsL2Dependent(v25) & 1) != 0 || CpAllocUtils::IsChain(v25))
    return 1;
  v27 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &v46);
  if (!v27)
    goto LABEL_47;
  v28 = *((_DWORD *)v27 + 6);
  v29 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &v45);
  if (!v29)
    goto LABEL_47;
  v30 = *((_DWORD *)v29 + 6);
  if (CpAllocUtils::IsNonResident(v28) && CpAllocUtils::IsNonResident(v30))
    return 1;
  v31 = *((_QWORD *)a2 + 11);
  v32 = *((_QWORD *)a2 + 12);
  if (v31 == v32)
  {
    v37 = 1;
  }
  else
  {
    v33 = v31 + 8;
    do
    {
      v34 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v33 - 8) + 32))(*(_QWORD *)(v33 - 8), 0, 0);
      v47 = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v34);
      v35 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &v47);
      if (!v35)
        goto LABEL_47;
      IsNonResident = CpAllocUtils::IsNonResident(*((_DWORD *)v35 + 6));
      if (IsNonResident)
        break;
      v5 = v33 == v32;
      v33 += 8;
    }
    while (!v5);
    v37 = !IsNonResident;
  }
  v39 = (_QWORD *)*((_QWORD *)a3 + 11);
  v38 = (_QWORD *)*((_QWORD *)a3 + 12);
  while (v39 != v38)
  {
    v40 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v39 + 32))(*v39, 0, 0);
    v47 = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v40);
    v41 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &v47);
    if (!v41)
      goto LABEL_47;
    if (CpAllocUtils::IsNonResident(*((_DWORD *)v41 + 6)))
    {
      if (!v37)
        return 1;
      break;
    }
    ++v39;
  }
  if (CpAllocUtils::IsResident(v30))
  {
    ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 34), v45);
    if ((double)*(unint64_t *)(*((_QWORD *)this + 42) + 408) * 0.5 < (double)v42)
      return 1;
  }
  if (CpAllocUtils::IsResident(v28)
    && (ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 34), v46),
        (double)*(unint64_t *)(*((_QWORD *)this + 42) + 408) * 0.5 < (double)v43))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t ZinCpBasedAllocator::PromoteDecisionToInplace(ZinCpBasedAllocator *this, ZinIrTensor *a2)
{
  char *v2;
  unsigned int v3;
  _QWORD *v4;
  int v5;
  ZinIrTensor *v7;
  ZinIrTensor *v8;
  ZinIrTensor **v9;

  v7 = a2;
  v2 = (char *)this + 72;
  v9 = &v7;
  v3 = *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &v7, (uint64_t)&std::piecewise_construct, &v9)+ 6);
  if (v3 < 2)
  {
    v8 = v7;
    v9 = &v8;
    v4 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v2, &v8, (uint64_t)&std::piecewise_construct, &v9);
    v5 = 4;
    goto LABEL_6;
  }
  if (v3 == 4)
    return 1;
  if (v3 == 3)
  {
    v8 = v7;
    v9 = &v8;
    v4 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v2, &v8, (uint64_t)&std::piecewise_construct, &v9);
    v5 = 5;
LABEL_6:
    *((_DWORD *)v4 + 6) = v5;
    return 1;
  }
  return 0;
}

void ZinCpBasedAllocator::GetSortedBoundaryTensors(ZinCpBasedAllocator *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  ZinIrTensor **i;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  ZinIrOpLayer **v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  void *__p;
  char *v20;
  ZinIrTensor *v21;
  uint64_t *v22;
  __int128 v23;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ZinIrSymbol *>::vector<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,0>(&v22, *((_QWORD **)this + 6), (_QWORD *)this + 7);
  v3 = v22;
  *a2 = v22;
  v4 = (unint64_t *)v23;
  v18 = (unint64_t *)v3;
  *(_OWORD *)(a2 + 1) = v23;
  v23 = 0uLL;
  v22 = (uint64_t *)&v23;
  v5 = v4;
  if (v3 != (uint64_t *)v4)
  {
    for (i = (ZinIrTensor **)v3; i != (ZinIrTensor **)v5; ++i)
    {
      v21 = *i;
      ZinIrTensor::GetTensorFamily(v21, (uint64_t)&__p);
      v7 = (char *)__p;
      v8 = v20;
      if (__p == v20)
      {
        v9 = 0;
        if (!__p)
          goto LABEL_14;
      }
      else
      {
        v9 = 0;
        do
        {
          v10 = *(_QWORD *)v7;
          v11 = *(_QWORD **)(*(_QWORD *)v7 + 96);
          v13 = (ZinIrOpLayer **)v11[14];
          v12 = (ZinIrOpLayer **)v11[15];
          if (v13 != v12)
          {
            do
              v9 += ZinIrOpLayer::IsANELayer(*v13++);
            while (v13 != v12);
            v11 = *(_QWORD **)(v10 + 96);
          }
          v14 = (ZinIrOpLayer **)v11[11];
          v15 = (ZinIrOpLayer **)v11[12];
          while (v14 != v15)
            v9 += ZinIrOpLayer::IsANELayer(*v14++);
          v7 += 8;
        }
        while (v7 != v8);
        v7 = (char *)__p;
        if (!__p)
          goto LABEL_14;
      }
      v20 = v7;
      operator delete(v7);
LABEL_14:
      __p = &v21;
      std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v22, (unint64_t *)&v21, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[5] = v9;
    }
  }
  v16 = 126 - 2 * __clz(v5 - v18);
  __p = &v22;
  if (v5 == v18)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **,false>(v18, v5, &__p, v17, 1);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v22, (_QWORD *)v23);
}

void sub_207040798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a15, a16);
  if (__p)
  {
    *(_QWORD *)(a9 + 8) = __p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL ZinCpBasedAllocator::TryInplaceAllocationWithProducer(ZinCpBasedAllocator *this, ZinIrTensor *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  _BOOL8 v14;
  unint64_t PeakPressure;
  const ZinIrTensor *v17;
  ZinIrOpLayer *LastConsumer;
  ZinIrOpLayerGraph *v19;
  uint64_t IndexOfMatchedIncomingLayer;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const ZinIrTensor *v25;
  _QWORD *v26;
  _BOOL4 IsL2Inplace;
  char v28;
  int v29;
  const ZinIrTensor *v30;
  ZinTensorFamilyUtil *v31;
  _QWORD *v32;
  _QWORD *v33;
  const ZinIrTensor *InputTensor;
  ZinIrTensor *v35;
  _BOOL4 IsSet;
  void *v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  _BOOL4 v42;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  const ZinIrTensor *v48;
  char *v49;
  int v50;
  uint64_t **v51;
  int v52;
  const char *v53;
  int v54;
  int v55;
  _QWORD *v56;
  const char *v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  ZinIrTensor *RootTensor;
  void *__p;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  void *v67[2];
  __int128 v68;
  uint64_t v69;
  void *v70[2];
  __int128 v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  ZinIrTensor *v75;
  ZinIrTensor *v76;

  v75 = a2;
  v5 = *((_QWORD *)a2 + 12);
  ZinIrInPlaceUpdate::IsInPlaceable(*((ZinIrTensor **)this + 127), (const ZinANELayer *)v5, *(const ZinIrOpLayerGraph **)(v5 + 152), 2, *(_BYTE *)(*((_QWORD *)this + 42) + 1115), &v73);
  v6 = v73;
  v7 = v74;
  if (v74 == v73)
  {
    v14 = 0;
    if (!v73)
      return v14;
    goto LABEL_9;
  }
  v8 = (_QWORD *)((char *)this + 72);
  while (1)
  {
    v9 = *v6;
    *(_QWORD *)&v66 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 88) + 8 * v9);
    *(_QWORD *)&v66 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
    v11 = *(_OWORD *)(v66 + 64);
    *(_OWORD *)v70 = *(_OWORD *)(v66 + 48);
    v71 = v11;
    v72 = *(_QWORD *)(v66 + 80);
    v12 = *((_OWORD *)v75 + 4);
    *(_OWORD *)v67 = *((_OWORD *)v75 + 3);
    v68 = v12;
    v69 = *((_QWORD *)v75 + 10);
    __p = &v66;
    v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &v66, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 6);
    if (ZinTensorDimensionsEqual(v70, v67)
      && CpAllocUtils::IsNonChainResident(v13)
      && !CpAllocUtils::IsL2Inplace(v13))
    {
      break;
    }
    if (++v6 == v7)
      goto LABEL_7;
  }
  if (v9 == -1)
  {
LABEL_7:
    v14 = 0;
    goto LABEL_8;
  }
  v70[0] = &v75;
  v66 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v75, (uint64_t)&std::piecewise_construct, (_QWORD **)v70)+ 3);
  PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(a3, (const ZinLiveRange *)&v66);
  ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(this, v75, a3);
  v60 = (char *)this + 280;
  v65 = v66;
  *(_QWORD *)&v65 = *(_QWORD *)(v5 + 48) + *(_QWORD *)(v5 + 56) + 1;
  LastConsumer = (ZinIrOpLayer *)ZinIrRegAllocUtil::GetLastConsumer(v75, v17);
  v19 = (ZinIrOpLayerGraph *)*((_QWORD *)LastConsumer + 19);
  IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(v19, LastConsumer, (const ZinIrOpLayer *)v5);
  v61 = PeakPressure;
  ZinIrInPlaceUpdate::IsInPlaceable(*((ZinIrTensor **)this + 127), LastConsumer, v19, 2, *(_BYTE *)(*((_QWORD *)this + 42) + 1115), (unint64_t **)&__p);
  v21 = *((_QWORD *)LastConsumer + 11);
  v22 = *((_QWORD *)LastConsumer + 12);
  if (v21 == v22)
  {
    v29 = 1;
  }
  else
  {
    v59 = IndexOfMatchedIncomingLayer;
    v23 = v21 + 8;
    do
    {
      v24 = *(_QWORD *)(v23 - 8);
      v67[0] = 0;
      v25 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0, 0);
      v67[0] = (void *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v25);
      v70[0] = v67;
      v26 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, v67, (uint64_t)&std::piecewise_construct, (_QWORD **)v70);
      IsL2Inplace = CpAllocUtils::IsL2Inplace(*((_DWORD *)v26 + 6));
      v28 = v23 == v22 || IsL2Inplace;
      v23 += 8;
    }
    while ((v28 & 1) == 0);
    v29 = !IsL2Inplace;
    IndexOfMatchedIncomingLayer = v59;
  }
  RootTensor = 0;
  v30 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)LastConsumer + 32))(LastConsumer, 0, 0);
  v31 = (ZinCpBasedAllocator *)((char *)this + 1048);
  RootTensor = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v30);
  v70[0] = &RootTensor;
  v32 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)v70);
  v33 = __p;
  if (__p != v64)
  {
    while (*v33 != IndexOfMatchedIncomingLayer)
    {
      if (++v33 == v64)
      {
        v33 = v64;
        break;
      }
    }
  }
  if (v33 == v64 || (v29 & CpAllocUtils::IsNonChainResident(*((_DWORD *)v32 + 6))) != 1)
  {
    v42 = 0;
    goto LABEL_40;
  }
  InputTensor = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v5, v9);
  v35 = (ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), InputTensor);
  ZinIrTensor::GetDimensionOrderHint(v35, (uint64_t)v70);
  ZinIrTensor::GetDimensionOrderHint(RootTensor, (uint64_t)v67);
  if (DimensionOrderHint::IsSet((DimensionOrderHint *)v70))
  {
    IsSet = DimensionOrderHint::IsSet((DimensionOrderHint *)v67);
    v37 = v67[0];
    if (IsSet)
    {
      if ((char *)v67[1] - (char *)v67[0] != (char *)v70[1] - (char *)v70[0])
      {
        v42 = 0;
        goto LABEL_60;
      }
      if (v67[0] != v67[1])
      {
        v38 = 0;
        do
        {
          v39 = (char *)v67[0] + v38 + 4;
          v40 = *(_DWORD *)((char *)v67[0] + v38);
          v41 = *(_DWORD *)((char *)v70[0] + v38);
          v42 = v40 == v41;
          v38 += 4;
        }
        while (v40 == v41 && v39 != v67[1]);
        goto LABEL_60;
      }
    }
    v42 = 1;
  }
  else
  {
    v42 = 1;
    v37 = v67[0];
  }
LABEL_60:
  if (v37)
  {
    v67[1] = v37;
    operator delete(v37);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  if (v42)
  {
    *((_QWORD *)&v65 + 1) = *((_QWORD *)LastConsumer + 6) - 1;
    v42 = 1;
  }
LABEL_40:
  ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 34), v75);
  ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a3, v44, (const ZinLiveRange *)&v65, v75);
  v45 = (void *)IndexOfMatchedIncomingLayer;
  ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a3, *(_QWORD *)(*((_QWORD *)this + 42) + 408), (uint64_t *)&v66, (uint64_t)v70);
  v14 = v71 == 0;
  if ((_QWORD)v71)
  {
    ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a3, v75, (const ZinLiveRange *)&v66);
    ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(this, v75, a3);
    ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a3, *(_QWORD *)(*((_QWORD *)this + 42) + 408), (uint64_t *)&v66, (uint64_t)v67);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v70, (_QWORD *)v70[1]);
    v46 = v67[1];
    v70[0] = v67[0];
    v70[1] = v67[1];
    *(_QWORD *)&v71 = v68;
    if ((_QWORD)v68)
    {
      *((_QWORD *)v67[1] + 2) = &v70[1];
      v67[0] = &v67[1];
      v67[1] = 0;
      *(_QWORD *)&v68 = 0;
      v46 = 0;
    }
    else
    {
      v70[0] = &v70[1];
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v67, v46);
    if (v61 != ZinIrMemoryPressureAnalyzer::GetPeakPressure(a3, (const ZinLiveRange *)&v66))
    {
      v56 = (_QWORD *)((char *)v75 + 24);
      v57 = "Invalid memory pressure analyzer while inplace update in %s";
      if ((*((char *)v75 + 47) & 0x80000000) == 0)
        goto LABEL_68;
      goto LABEL_67;
    }
    if ((_QWORD)v71)
    {
      v56 = (_QWORD *)((char *)v75 + 24);
      v57 = "Invalid inplace update in %s";
      if ((*((char *)v75 + 47) & 0x80000000) == 0)
LABEL_68:
        ZinAssertImpl(v57, v56);
LABEL_67:
      v56 = (_QWORD *)*v56;
      goto LABEL_68;
    }
    goto LABEL_55;
  }
  v47 = *(_QWORD *)(*(_QWORD *)(v5 + 88) + 8 * v9);
  v48 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0, 0);
  v49 = (char *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v48);
  v50 = ZinCpBasedAllocator::PromoteDecisionToInplace(this, (ZinIrTensor *)v49);
  v51 = (uint64_t **)((char *)this + 1024);
  v67[0] = v75;
  v67[1] = (void *)v9;
  std::__tree<std::__value_type<ZinIrTensor *,unsigned long>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,unsigned long>,std::less<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,unsigned long>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor *,unsigned long>>((uint64_t **)this + 128, (unint64_t *)v67, (uint64_t *)v67);
  if ((v50 & ZinIrRegAllocUtil::AdjustDimOrderForInplace(*((_QWORD *)v75 + 12), (uint64_t)this + 1024, (_QWORD *)this + 9, (ZinCpBasedAllocator *)((char *)this + 1048)) & 1) == 0)
  {
    v53 = v49 + 24;
    v54 = 3228;
    v55 = 3228;
    if ((v49[47] & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  if (v42)
  {
    v52 = ZinCpBasedAllocator::PromoteDecisionToInplace(this, v75);
    v67[0] = RootTensor;
    v67[1] = v45;
    std::__tree<std::__value_type<ZinIrTensor *,unsigned long>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,unsigned long>,std::less<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,unsigned long>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor *,unsigned long>>(v51, (unint64_t *)v67, (uint64_t *)v67);
    if ((v52 & ZinIrRegAllocUtil::AdjustDimOrderForInplace(*((_QWORD *)RootTensor + 12), (uint64_t)v51, v8, v31) & 1) == 0)
    {
      v53 = (char *)v75 + 24;
      v54 = 3241;
      v55 = 3241;
      if ((*((char *)v75 + 47) & 0x80000000) == 0)
LABEL_71:
        ZinAssertImpl("INFO: This tensor %s is not inplacable.(file %s, line %d)\n", v53, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinIrSchedule/src/ZinCpBasedAllocator.cpp", v55);
LABEL_70:
      v53 = *(const char **)v53;
      v55 = v54;
      goto LABEL_71;
    }
  }
  else
  {
    v76 = v75;
    v67[0] = &v76;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &v76, (uint64_t)&std::piecewise_construct, (_QWORD **)v67)+ 6) = 0;
  }
  v67[0] = &v75;
  v58 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v60, &v75, (uint64_t)&std::piecewise_construct, (_QWORD **)v67);
  *(_OWORD *)(v58 + 3) = v65;
LABEL_55:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v70, (_QWORD *)v70[1]);
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
LABEL_8:
  v6 = v73;
  if (v73)
  {
LABEL_9:
    v74 = v6;
    operator delete(v6);
  }
  return v14;
}

void sub_207040ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,_QWORD *a32)
{
  uint64_t v32;
  void *v34;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a31, a32);
  if (__p)
    operator delete(__p);
  v34 = *(void **)(v32 - 136);
  if (v34)
  {
    *(_QWORD *)(v32 - 128) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(ZinCpBasedAllocator *this, const ZinIrTensor *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  char *v5;
  char *v6;
  const ZinANELayer *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  const ZinANELayer *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21[2];
  char *v22;
  char *v23;

  ZinIrTensor::GetTensorFamily(a2, (uint64_t)&v22);
  v5 = v22;
  v6 = v23;
  if (v22 != v23)
  {
    do
    {
      v7 = *(const ZinANELayer **)(*(_QWORD *)v5 + 96);
      if (ZinIrOpLayer::IsANELayer(v7))
        ZinCpBasedAllocator::RemoveOutputDMABufferFromPressureAnalyzer(this, v7, a3);
      v21[0] = 0;
      v21[1] = 0;
      v20 = (uint64_t *)v21;
      v8 = (uint64_t *)*((_QWORD *)v7 + 14);
      v9 = (uint64_t *)*((_QWORD *)v7 + 15);
      if (v8 != v9)
      {
        do
        {
          std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v20, v21, v8, v8);
          ++v8;
        }
        while (v8 != v9);
        v10 = v20;
        if (v20 != (uint64_t *)v21)
        {
          do
          {
            v11 = (const ZinANELayer *)v10[4];
            if (ZinIrOpLayer::IsANELayer(v11))
            {
              (*(void (**)(_QWORD **__return_ptr, const ZinANELayer *))(*(_QWORD *)v11 + 512))(&v18, v11);
              v12 = v18;
              v13 = v19;
              if (v19 == v18)
              {
                v12 = v19;
                if (!v19)
                  goto LABEL_15;
              }
              else
              {
                v14 = 0;
                do
                {
                  if (*(const ZinANELayer **)(v12[v14] + 96) == v7)
                  {
                    ZinCpBasedAllocator::RemoveInputDMABufferFromPressureAnalyzer(this, v11, v14, a3);
                    v12 = v18;
                    v13 = v19;
                  }
                  ++v14;
                }
                while (v14 < v13 - v12);
                if (!v12)
                  goto LABEL_15;
              }
              v19 = v12;
              operator delete(v12);
            }
LABEL_15:
            v15 = (uint64_t *)v10[1];
            if (v15)
            {
              do
              {
                v16 = v15;
                v15 = (uint64_t *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (uint64_t *)v10[2];
                v17 = *v16 == (_QWORD)v10;
                v10 = v16;
              }
              while (!v17);
            }
            v10 = v16;
          }
          while (v16 != (uint64_t *)v21);
        }
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
      v5 += 8;
    }
    while (v5 != v6);
    v5 = v22;
  }
  if (v5)
  {
    v23 = v5;
    operator delete(v5);
  }
}

void sub_20704114C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCpBasedAllocator::PromoteToInplace(ZinCpBasedAllocator *this, ZinIrTensor **a2, ZinIrMemoryPressureAnalyzer *a3)
{
  if (ZinCpBasedAllocator::TryInplaceAllocationWithProducer(this, (ZinIrTensor *)a2, a3))
    return 1;
  else
    return ZinCpBasedAllocator::TryInplaceAllocationWithConsumer(this, a2, a3);
}

uint64_t ZinCpBasedAllocator::TryInplaceAllocationWithConsumer(ZinCpBasedAllocator *this, ZinIrTensor **a2, ZinIrMemoryPressureAnalyzer *a3)
{
  ZinTensorFamilyUtil *v6;
  const ZinIrTensor *v7;
  uint64_t v8;
  uint64_t LastConsumer;
  const ZinIrTensor *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  const ZinIrTensor *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const ZinIrTensor *v24;
  _QWORD *v25;
  char *v26;
  unint64_t PeakPressure;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  const char *v31;
  int v32;
  uint64_t **v33;
  _QWORD *v34;
  const char *v35;
  ZinIrMemoryPressureAnalyzer *v36;
  ZinIrTensor **v37;
  _QWORD *v38;
  _QWORD *v39[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t *v44;
  ZinIrTensor **RootTensor;
  ZinIrTensor **v46;

  v46 = a2;
  v6 = (ZinCpBasedAllocator *)((char *)this + 1048);
  if ((ZinIrTensor **)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), (const ZinIrTensor *)a2) != a2)return 0;
  LastConsumer = ZinIrRegAllocUtil::GetLastConsumer((ZinIrRegAllocUtil *)a2, v7);
  v8 = LastConsumer;
  if (!LastConsumer)
    return v8;
  RootTensor = 0;
  v11 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)LastConsumer + 32))(LastConsumer, 0, 0);
  RootTensor = (ZinIrTensor **)ZinTensorFamilyUtil::GetRootTensor(v6, v11);
  v12 = (_QWORD *)((char *)this + 72);
  v13 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 9, &RootTensor);
  if (!v13)
    ZinAssertImpl("The decision is missing.");
  if (!CpAllocUtils::IsResident(*((_DWORD *)v13 + 6)))
    return 0;
  v14 = *(_QWORD *)(v8 + 88);
  if (*(_QWORD *)(v8 + 96) != v14)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v43 = 0;
      v17 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v14 + 8 * v16) + 32))(*(_QWORD *)(v14 + 8 * v16), 0, 0);
      v43 = (unint64_t *)ZinTensorFamilyUtil::GetRootTensor(v6, v17);
      v18 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 9, &v43);
      if (!v18)
        ZinAssertImpl("The decision must exist");
      v15 |= CpAllocUtils::IsL2Inplace(*((_DWORD *)v18 + 6));
      ++v16;
      v14 = *(_QWORD *)(v8 + 88);
    }
    while (v16 < (*(_QWORD *)(v8 + 96) - v14) >> 3);
    if ((v15 & 1) != 0)
      return 0;
  }
  ZinIrInPlaceUpdate::IsInPlaceable(*((ZinIrTensor **)this + 127), (const ZinANELayer *)v8, *(const ZinIrOpLayerGraph **)(v8 + 152), 2, *(_BYTE *)(*((_QWORD *)this + 42) + 1115), &v43);
  v19 = v43;
  v20 = v44;
  if (v44 == v43)
  {
    v8 = 0;
  }
  else
  {
    v36 = a3;
    v21 = -1;
    do
    {
      v22 = *v19;
      v23 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8 * *v19);
      v37 = 0;
      v24 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0);
      v37 = (ZinIrTensor **)ZinTensorFamilyUtil::GetRootTensor(v6, v24);
      v39[0] = &v37;
      v25 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)this + 72, &v37, (uint64_t)&std::piecewise_construct, v39);
      if (CpAllocUtils::IsL2Inplace(*((_DWORD *)v25 + 6)))
        goto LABEL_24;
      if (v37 == v46)
        v21 = v22;
      ++v19;
    }
    while (v19 != v20);
    if (v21 == -1)
    {
LABEL_24:
      v8 = 0;
    }
    else
    {
      v26 = (char *)this + 280;
      v39[0] = &v46;
      v42 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 280, &v46, (uint64_t)&std::piecewise_construct, v39)+ 3);
      PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(a3, (const ZinLiveRange *)&v42);
      ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer(this, (const ZinIrTensor *)v46, v36);
      v28 = *(_QWORD *)(v8 + 48) - 1;
      *(_QWORD *)&v41 = v42;
      *((_QWORD *)&v41 + 1) = v28;
      ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 34), (const ZinIrTensor *)v46);
      ZinIrMemoryPressureAnalyzer::AddTensorAllocation(v36, v29, (const ZinLiveRange *)&v41, (const ZinIrTensor *)v46);
      ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(v36, *(_QWORD *)(*((_QWORD *)this + 42) + 408), (uint64_t *)&v42, (uint64_t)v39);
      v8 = v40 == 0;
      if (v40)
      {
        ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(v36, (const ZinIrTensor *)v46, (const ZinLiveRange *)&v42);
        ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer(this, (const ZinIrTensor *)v46, v36);
        ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(v36, *(_QWORD *)(*((_QWORD *)this + 42) + 408), (uint64_t *)&v42, (uint64_t)&v37);
        std::__tree<ZinSpaceRange>::__move_assign((uint64_t)v39, &v37);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v37, v38);
        if (PeakPressure != ZinIrMemoryPressureAnalyzer::GetPeakPressure(v36, (const ZinLiveRange *)&v42))
        {
          v30 = v46 + 3;
          v31 = "Invalid memory pressure analyzer while inplace update in %s";
          if ((*((char *)v46 + 47) & 0x80000000) == 0)
            goto LABEL_36;
          goto LABEL_35;
        }
        if (v40)
        {
          v30 = v46 + 3;
          v31 = "Invalid inplace update in %s";
          if ((*((char *)v46 + 47) & 0x80000000) == 0)
LABEL_36:
            ZinAssertImpl(v31, v30);
LABEL_35:
          v30 = (_QWORD *)*v30;
          goto LABEL_36;
        }
      }
      else
      {
        v32 = ZinCpBasedAllocator::PromoteDecisionToInplace(this, (ZinIrTensor *)v46);
        v33 = (uint64_t **)((char *)this + 1024);
        v37 = RootTensor;
        v38 = (_QWORD *)v21;
        std::__tree<std::__value_type<ZinIrTensor *,unsigned long>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,unsigned long>,std::less<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,unsigned long>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor *,unsigned long>>(v33, (unint64_t *)&v37, (uint64_t *)&v37);
        if ((v32 & ZinIrRegAllocUtil::AdjustDimOrderForInplace((uint64_t)RootTensor[12], (uint64_t)v33, v12, v6) & 1) == 0)
        {
          v35 = (const char *)(v46 + 3);
          if (*((char *)v46 + 47) < 0)
            v35 = *(const char **)v35;
          ZinAssertImpl("INFO: This tensor %s is not inplacable.(file %s, line %d)\n", v35, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinIrSchedule/src/ZinCpBasedAllocator.cpp", 3698);
        }
        v37 = (ZinIrTensor **)&v46;
        v34 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v26, &v46, (uint64_t)&std::piecewise_construct, &v37);
        *(_OWORD *)(v34 + 3) = v41;
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v39, v39[1]);
    }
    v19 = v43;
  }
  if (v19)
  {
    v44 = v19;
    operator delete(v19);
  }
  return v8;
}

void sub_207041644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a16, a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL ZinCpBasedAllocator::PromoteToResident(ZinL2FootprintCalculator **this, ZinIrTensor *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  char *v5;
  uint64_t v6;
  _BOOL8 v7;
  unint64_t PeakPressure;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  const ZinIrTensor *v22;

  v22 = a2;
  v5 = (char *)(this + 9);
  *(_QWORD *)&v19 = &v22;
  if (*((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)(this + 9), &v22, (uint64_t)&std::piecewise_construct, (_QWORD **)&v19)+ 6) == 1)
  {
    v6 = *((_QWORD *)v22 + 13);
    if (!v6 || *(_DWORD *)(v6 + 96) != 2)
    {
      *(_QWORD *)&v19 = &v22;
      v21 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)(this + 35), &v22, (uint64_t)&std::piecewise_construct, (_QWORD **)&v19)+ 3);
      PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(a3, (const ZinLiveRange *)&v21);
      ZinCpBasedAllocator::RemoveDMABufferFromPressureAnalyzer((ZinCpBasedAllocator *)this, v22, a3);
      ZinL2FootprintCalculator::GetResidentBufferSize(this[34], v22);
      ZinIrMemoryPressureAnalyzer::AddTensorAllocation(a3, v9, (const ZinLiveRange *)&v21, v22);
      v10 = *((_QWORD *)this[42] + 51);
      v17 = v21;
      ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a3, v10, (uint64_t *)&v17, (uint64_t)&v19);
      v7 = v20 == 0;
      if (!v20)
      {
        *(_QWORD *)&v16 = v22;
        *(_QWORD *)&v17 = &v16;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v5, &v16, (uint64_t)&std::piecewise_construct, (_QWORD **)&v17)+ 6) = 0;
LABEL_12:
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v19, *((_QWORD **)&v19 + 1));
        return v7;
      }
      ZinIrMemoryPressureAnalyzer::RemoveTensorAllocation(a3, v22, (const ZinLiveRange *)&v21);
      ZinCpBasedAllocator::AddDMABufferToPressureAnalyzer((ZinCpBasedAllocator *)this, v22, a3);
      v11 = *((_QWORD *)this[42] + 51);
      v16 = v21;
      ZinIrMemoryPressureAnalyzer::GetTensorsBeyondBudget(a3, v11, (uint64_t *)&v16, (uint64_t)&v17);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v19, *((_QWORD **)&v19 + 1));
      v12 = (_QWORD *)*((_QWORD *)&v17 + 1);
      v19 = v17;
      v20 = v18;
      if (v18)
      {
        *(_QWORD *)(*((_QWORD *)&v17 + 1) + 16) = (char *)&v19 + 8;
        *(_QWORD *)&v17 = (char *)&v17 + 8;
        *((_QWORD *)&v17 + 1) = 0;
        v18 = 0;
        v12 = 0;
      }
      else
      {
        *(_QWORD *)&v19 = (char *)&v19 + 8;
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v17, v12);
      if (PeakPressure == ZinIrMemoryPressureAnalyzer::GetPeakPressure(a3, (const ZinLiveRange *)&v21))
      {
        if (!v20)
          goto LABEL_12;
        v14 = (_QWORD *)((char *)v22 + 24);
        v15 = "Invalid promotion in boundary tensor residency update in %s";
        if ((*((char *)v22 + 47) & 0x80000000) == 0)
LABEL_16:
          ZinAssertImpl(v15, v14);
      }
      else
      {
        v14 = (_QWORD *)((char *)v22 + 24);
        v15 = "Invalid memory pressure analyzer while promotion in boundary tensor residency update in %s";
        if ((*((char *)v22 + 47) & 0x80000000) == 0)
          goto LABEL_16;
      }
      v14 = (_QWORD *)*v14;
      goto LABEL_16;
    }
  }
  return 0;
}

void sub_2070418F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

BOOL ZinCpBasedAllocator::IsDisqualifiedForInplacePromotion(ZinCpBasedAllocator *this, ZinIrTensor *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v12;
  _BYTE *v13;
  ZinIrTensor *v14;

  v14 = a2;
  ZinIrTensor::GetTensorFamily(a2, (uint64_t)&v12);
  v4 = v12;
  v5 = v13;
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  v6 = *((_QWORD *)a2 + 12);
  v8 = *(_QWORD *)(v6 + 112);
  v7 = *(_QWORD *)(v6 + 120);
  v9 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 35, &v14);
  if (!v9)
    ZinAssertImpl("The liverange must exist");
  if (v5 - v4 != 8)
    return 0;
  return (float)((float)(unint64_t)(v9[4] - v9[3] + 1)
               / (float)(unint64_t)((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 40) + 8) - **((_QWORD **)this + 40)) >> 3)) > 0.2
      && (unint64_t)(v7 - v8) < 0x18;
}

_QWORD *ZinCpBasedAllocator::RemoveInputDMABufferFromPressureAnalyzer(ZinCpBasedAllocator *this, const ZinANELayer *a2, uint64_t a3, ZinIrMemoryPressureAnalyzer *a4)
{
  const ZinIrTensor *v8;
  _QWORD *result;
  void *v10;
  void *__p;
  void *v12;

  (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(&__p, a2);
  v8 = (const ZinIrTensor *)*((_QWORD *)__p + a3);
  v12 = __p;
  operator delete(__p);
  __p = (void *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v8);
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &__p);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)result + 6) == 1)
  {
    v10 = (void *)(*((_QWORD *)a2 + 7) + *((_QWORD *)a2 + 6));
    __p = (void *)*((_QWORD *)a2 + 6);
    v12 = v10;
    return (_QWORD *)ZinIrMemoryPressureAnalyzer::RemoveLayerInDmaAllocation(a4, a2, (const ZinLiveRange *)&__p, a3);
  }
  return result;
}

_QWORD *ZinCpBasedAllocator::RemoveOutputDMABufferFromPressureAnalyzer(ZinCpBasedAllocator *this, const ZinANELayer *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  const ZinIrTensor *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[2];

  v6 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v9[0] = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v6);
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, v9);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)result + 6) == 1)
  {
    v8 = *((_QWORD *)a2 + 7) + *((_QWORD *)a2 + 6);
    v9[0] = *((_QWORD *)a2 + 6);
    v9[1] = v8;
    return (_QWORD *)ZinIrMemoryPressureAnalyzer::RemoveLayerOutDmaAllocation(a3, a2, (const ZinLiveRange *)v9);
  }
  return result;
}

_QWORD *ZinCpBasedAllocator::AddInputDMABufferToPressureAnalyzer(ZinCpBasedAllocator *this, const ZinANELayer *a2, unint64_t a3, ZinIrMemoryPressureAnalyzer *a4)
{
  uint64_t v8;
  uint64_t v9;
  const ZinIrTensor *v10;
  _QWORD *result;
  _QWORD *Size;
  uint64_t RootTensor;
  _QWORD v14[2];
  unsigned int v15;

  v15 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a2, a3, (int *)&v15))
    ZinAssertImpl("Internal CP Allocation error");
  v8 = *((_QWORD *)a2 + 7) + *((_QWORD *)a2 + 6);
  v14[0] = *((_QWORD *)a2 + 6);
  v14[1] = v8;
  v9 = (*(uint64_t (**)(const ZinANELayer *, _QWORD))(*(_QWORD *)a2 + 504))(a2, v15);
  v10 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
  RootTensor = ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v10);
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &RootTensor);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)result + 6) == 1)
  {
    if (ZinCpBasedAllocator::HasChainProducerDecision(this, a2))
    {
      Size = ZinCpBasedAllocator::GetChainProducerDmaReadSize(this, a2, a3);
    }
    else if (ZinCpBasedAllocator::HasL2DepProducerDecision(this, a2))
    {
      Size = ZinCpBasedAllocator::GetL2DepProducerDmaReadSize(this, a2, a3);
    }
    else if (ZinCpBasedAllocator::HasChainConsumerDecision(this, a2))
    {
      Size = ZinCpBasedAllocator::GetChainConsumerDmaReadSize(this, a2, a3);
    }
    else if (ZinCpBasedAllocator::HasL2DepConsumerDecision(this, a2))
    {
      Size = ZinCpBasedAllocator::GetL2DepConsumerDmaReadSize(this, a2, a3);
    }
    else
    {
      Size = ZinCpBasedAllocator::GetDmaReadSize(this, a2, a3);
    }
    return (_QWORD *)ZinIrMemoryPressureAnalyzer::AddLayerInDmaAllocation(a4, (uint64_t)Size, (const ZinLiveRange *)v14, a2, a3);
  }
  return result;
}

BOOL ZinCpBasedAllocator::HasChainProducerDecision(ZinCpBasedAllocator *this, const ZinANELayer *a2)
{
  ZinTensorFamilyUtil *v3;
  const ZinIrTensor *v4;
  _QWORD *v5;
  uint64_t RootTensor;

  v3 = (ZinCpBasedAllocator *)((char *)this + 1048);
  v4 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinTensorFamilyUtil::GetRootTensor(v3, v4);
  v5 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &RootTensor);
  return v5 && CpAllocUtils::IsChain(*((_DWORD *)v5 + 6));
}

_QWORD *ZinCpBasedAllocator::GetChainProducerDmaReadSize(ZinCpBasedAllocator *this, const ZinANELayer *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  const ZinANELayer *v6;
  void *__p[3];

  v6 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &v6);
  if (result)
  {
    LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)result[3], (char **)__p);
    v5 = *((_QWORD *)__p[0] + a3);
    __p[1] = __p[0];
    operator delete(__p[0]);
    return *(_QWORD **)(v5 + 40);
  }
  return result;
}

BOOL ZinCpBasedAllocator::HasL2DepProducerDecision(ZinCpBasedAllocator *this, const ZinANELayer *a2)
{
  ZinTensorFamilyUtil *v3;
  const ZinIrTensor *v4;
  _QWORD *v5;
  uint64_t RootTensor;

  v3 = (ZinCpBasedAllocator *)((char *)this + 1048);
  v4 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinTensorFamilyUtil::GetRootTensor(v3, v4);
  v5 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &RootTensor);
  return v5 && (CpAllocUtils::IsL2Dependent(*((_DWORD *)v5 + 6)) & 1) != 0;
}

_QWORD *ZinCpBasedAllocator::GetL2DepProducerDmaReadSize(ZinCpBasedAllocator *this, const ZinANELayer *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  const ZinANELayer *v6;
  void *__p[3];

  v6 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &v6);
  if (result)
  {
    LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)result[3], (char **)__p);
    v5 = *((_QWORD *)__p[0] + a3);
    __p[1] = __p[0];
    operator delete(__p[0]);
    result = *(_QWORD **)(v5 + 72);
    if (!result)
      return *(_QWORD **)(v5 + 40);
  }
  return result;
}

uint64_t ZinCpBasedAllocator::HasChainConsumerDecision(ZinCpBasedAllocator *this, const ZinANELayer *a2)
{
  const ZinIrTensor **v3;
  const ZinIrTensor **v4;
  ZinTensorFamilyUtil *v5;
  _QWORD *v6;
  const ZinIrTensor *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t RootTensor;
  const ZinIrTensor **v12;
  const ZinIrTensor **v13;

  (*(void (**)(const ZinIrTensor ***__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(&v12, a2);
  v3 = v12;
  v4 = v13;
  if (v12 == v13)
  {
    v9 = 0;
    if (!v12)
      return v9;
    goto LABEL_11;
  }
  v5 = (ZinCpBasedAllocator *)((char *)this + 1048);
  v6 = (_QWORD *)((char *)this + 72);
  while (1)
  {
    v7 = *v3;
    RootTensor = 0;
    RootTensor = ZinTensorFamilyUtil::GetRootTensor(v5, v7);
    v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v6, &RootTensor);
    if (v8)
    {
      if (CpAllocUtils::IsChain(*((_DWORD *)v8 + 6)))
        break;
    }
    if (++v3 == v4)
    {
      v9 = 0;
      goto LABEL_10;
    }
  }
  v9 = 1;
LABEL_10:
  v3 = v12;
  if (v12)
  {
LABEL_11:
    v13 = v3;
    operator delete(v3);
  }
  return v9;
}

void sub_207041F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinCpBasedAllocator::GetChainConsumerDmaReadSize(ZinCpBasedAllocator *this, const ZinANELayer *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  const ZinANELayer *v6;
  void *__p[3];

  v6 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &v6);
  if (result)
  {
    LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)result[3], (char **)__p);
    v5 = *((_QWORD *)__p[0] + a3);
    __p[1] = __p[0];
    operator delete(__p[0]);
    return *(_QWORD **)(v5 + 56);
  }
  return result;
}

uint64_t ZinCpBasedAllocator::HasL2DepConsumerDecision(ZinCpBasedAllocator *this, const ZinANELayer *a2)
{
  const ZinIrTensor **v3;
  const ZinIrTensor **v4;
  ZinTensorFamilyUtil *v5;
  _QWORD *v6;
  const ZinIrTensor *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t RootTensor;
  const ZinIrTensor **v12;
  const ZinIrTensor **v13;

  (*(void (**)(const ZinIrTensor ***__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(&v12, a2);
  v3 = v12;
  v4 = v13;
  if (v12 == v13)
  {
    v9 = 0;
    if (!v12)
      return v9;
    goto LABEL_11;
  }
  v5 = (ZinCpBasedAllocator *)((char *)this + 1048);
  v6 = (_QWORD *)((char *)this + 72);
  while (1)
  {
    v7 = *v3;
    RootTensor = 0;
    RootTensor = ZinTensorFamilyUtil::GetRootTensor(v5, v7);
    v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v6, &RootTensor);
    if (v8)
    {
      if ((CpAllocUtils::IsL2Dependent(*((_DWORD *)v8 + 6)) & 1) != 0)
        break;
    }
    if (++v3 == v4)
    {
      v9 = 0;
      goto LABEL_10;
    }
  }
  v9 = 1;
LABEL_10:
  v3 = v12;
  if (v12)
  {
LABEL_11:
    v13 = v3;
    operator delete(v3);
  }
  return v9;
}

void sub_207042074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinCpBasedAllocator::GetL2DepConsumerDmaReadSize(ZinCpBasedAllocator *this, const ZinANELayer *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  const ZinANELayer *v6;
  void *__p[3];

  v6 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &v6);
  if (result)
  {
    LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)result[3], (char **)__p);
    v5 = *((_QWORD *)__p[0] + a3);
    __p[1] = __p[0];
    operator delete(__p[0]);
    result = *(_QWORD **)(v5 + 88);
    if (!result)
      return *(_QWORD **)(v5 + 56);
  }
  return result;
}

_QWORD *ZinCpBasedAllocator::GetDmaReadSize(ZinCpBasedAllocator *this, const ZinANELayer *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  const ZinANELayer *v6;
  void *__p[3];

  v6 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &v6);
  if (result)
  {
    LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)result[3], (char **)__p);
    v5 = *((_QWORD *)__p[0] + a3);
    __p[1] = __p[0];
    operator delete(__p[0]);
    return *(_QWORD **)(v5 + 24);
  }
  return result;
}

_QWORD *ZinCpBasedAllocator::AddOutputDMABufferToPressureAnalyzer(ZinCpBasedAllocator *this, const ZinANELayer *a2, ZinIrMemoryPressureAnalyzer *a3)
{
  const ZinIrTensor *v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[2];
  const ZinANELayer *RootTensor;

  v6 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v7 = *((_QWORD *)a2 + 7) + *((_QWORD *)a2 + 6);
  v12[0] = *((_QWORD *)a2 + 6);
  v12[1] = v7;
  RootTensor = (const ZinANELayer *)ZinTensorFamilyUtil::GetRootTensor((ZinCpBasedAllocator *)((char *)this + 1048), v6);
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 9, &RootTensor);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)result + 6) == 1)
  {
    if (ZinCpBasedAllocator::HasChainConsumerDecision(this, a2))
    {
      RootTensor = a2;
      v9 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &RootTensor);
      if (v9)
      {
        v10 = *(_QWORD **)(*(_QWORD *)(v9[3] + 32) + 56);
        return (_QWORD *)ZinIrMemoryPressureAnalyzer::AddLayerOutDmaAllocation(a3, (uint64_t)v10, (const ZinLiveRange *)v12, a2);
      }
    }
    else
    {
      if (ZinCpBasedAllocator::HasL2DepConsumerDecision(this, a2))
      {
        v10 = ZinCpBasedAllocator::GetL2DepConsumerDmaWriteSize(this, a2);
        return (_QWORD *)ZinIrMemoryPressureAnalyzer::AddLayerOutDmaAllocation(a3, (uint64_t)v10, (const ZinLiveRange *)v12, a2);
      }
      RootTensor = a2;
      v11 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &RootTensor);
      if (v11)
      {
        v10 = *(_QWORD **)(*(_QWORD *)(v11[3] + 32) + 24);
        return (_QWORD *)ZinIrMemoryPressureAnalyzer::AddLayerOutDmaAllocation(a3, (uint64_t)v10, (const ZinLiveRange *)v12, a2);
      }
    }
    v10 = 0;
    return (_QWORD *)ZinIrMemoryPressureAnalyzer::AddLayerOutDmaAllocation(a3, (uint64_t)v10, (const ZinLiveRange *)v12, a2);
  }
  return result;
}

_QWORD *ZinCpBasedAllocator::GetL2DepConsumerDmaWriteSize(ZinCpBasedAllocator *this, const ZinANELayer *a2)
{
  _QWORD *result;
  uint64_t v3;
  const ZinANELayer *v4;

  v4 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 14, &v4);
  if (result)
  {
    v3 = *(_QWORD *)(result[3] + 32);
    result = *(_QWORD **)(v3 + 88);
    if (!result)
      return *(_QWORD **)(v3 + 56);
  }
  return result;
}

void ZinCpBasedAllocator::NormalizeCycles(ZinCpBasedAllocator *this)
{
  ZinIrOpLayer ***v1;
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  char *v5;
  unint64_t v6;
  ZinIrOpLayer *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  ZinIrOpLayer ***v26;
  ZinIrOpLayer **v27;
  ZinIrOpLayer **v28;
  char *v29;
  ZinIrOpLayer *v30;
  _QWORD *v31;
  _QWORD *v32;
  ZinIrOpLayer *v33;
  _QWORD *v34;
  ZinIrOpLayer *v35;
  void *__p;
  void *v37;

  v1 = (ZinIrOpLayer ***)*((_QWORD *)this + 40);
  v2 = *v1;
  v3 = v1[1];
  if (*v1 != v3)
  {
    v5 = (char *)this + 112;
    v6 = -1;
    do
    {
      v7 = *v2;
      if (ZinIrOpLayer::IsANELayer(*v2))
      {
        v35 = v7;
        __p = &v35;
        v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)v5, &v35, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
        LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v8[3], (char **)&__p);
        v9 = __p;
        v10 = v37;
        if (__p)
        {
          v37 = __p;
          operator delete(__p);
        }
        if (v10 == v9)
        {
          v12 = -1;
        }
        else
        {
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v8[3], (char **)&__p);
          v11 = *(unint64_t **)__p;
          v37 = __p;
          operator delete(__p);
          v12 = *v11;
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v8[3], (char **)&__p);
          v13 = *(unint64_t **)__p;
          v37 = __p;
          operator delete(__p);
          if (v13[2] < v12)
            v12 = v13[2];
          if (ZinIrOpLayer::IsANELayer(v7))
          {
            (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v7 + 512))(&__p, v7);
            v14 = __p;
            v15 = v37;
            if (__p)
            {
              v37 = __p;
              operator delete(__p);
            }
            if ((unint64_t)(v15 - v14) >= 9)
            {
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v8[3], (char **)&__p);
              v16 = (unint64_t *)*((_QWORD *)__p + 1);
              v37 = __p;
              operator delete(__p);
              if (*v16 >= v12)
                v17 = v12;
              else
                v17 = *v16;
              LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v8[3], (char **)&__p);
              v18 = *((_QWORD *)__p + 1);
              v37 = __p;
              operator delete(__p);
              if (*(_QWORD *)(v18 + 16) >= v17)
                v12 = v17;
              else
                v12 = *(_QWORD *)(v18 + 16);
            }
          }
        }
        v19 = v8[3];
        v21 = *(unint64_t **)(v19 + 24);
        v20 = *(unint64_t **)(v19 + 32);
        v23 = *v21;
        v22 = v21[1];
        if (v23 >= v12)
          v23 = v12;
        if (v22 >= v23)
          v22 = v23;
        if (*v20 < v22)
          v22 = *v20;
        v24 = v20[2];
        if (v24 >= v22)
          v24 = v22;
        if (v24 >= v6)
          v25 = v6;
        else
          v25 = v24;
        if (v24 >= *((_QWORD *)this + 44))
          v6 = v25;
      }
      ++v2;
    }
    while (v2 != v3);
    v26 = (ZinIrOpLayer ***)*((_QWORD *)this + 40);
    v27 = *v26;
    v28 = v26[1];
    if (*v26 != v28)
    {
      v29 = (char *)this + 376;
      do
      {
        v30 = *v27;
        if (ZinIrOpLayer::IsANELayer(*v27))
        {
          v35 = v30;
          __p = &v35;
          v31 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)v5, &v35, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          v32 = v31;
          if (v6 != -1)
            LayerCycleAndFootprintEstimator::NormalizeCycles((LayerCycleAndFootprintEstimator *)v31[3], (double)v6);
          ++*(_QWORD *)(*(_QWORD *)(v32[3] + 24) + 8);
          v33 = v35;
          __p = &v35;
          v34 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)v5, &v35, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          ZinCpBasedAllocatorUtil::PrintExecutionBehavior((uint64_t)v29, v33, (uint64_t **)v34[3]);
        }
        ++v27;
      }
      while (v27 != v28);
    }
  }
}

uint64_t ZinCpBasedAllocator::SetLayerExecutionBehavior(ZinCpBasedAllocator *this, size_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  ZinIrOpLayer *v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  void **v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  ZinIrOpLayer *v32;
  size_t v33;
  std::string *p_str;
  const void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  ZinIrOpLayer *v40;
  size_t v41;
  std::string *v42;
  const void *v43;
  LayerCycleAndFootprintEstimator **v44;
  LayerCycleAndFootprintEstimator *v45;
  LayerCycleAndFootprintEstimator *v46;
  void **v47;
  ComputeCycleEstimator *v48;
  BOOL v51;
  std::string v52;
  std::string v53;
  LayerCycleAndFootprintEstimator *v54;
  int64x2_t v55;
  _QWORD v56[2];
  unint64_t v57;
  uint64_t v58;
  void *__p;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _BYTE *v76;
  uint64_t v77;
  size_t *v78;
  std::string __str;
  char *v80;
  _QWORD *v81;

  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = a2;
  v73 = 0;
  v74 = 0;
  v71 = 0;
  v72 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  if (ZinCpBasedAllocator::CollectEngineCycleBehavior((uint64_t)this, (ZinEnginePerf ***)a2, (uint64_t)&v75, (uint64_t)&v72, &v71, &v70, &v69, &v68, (uint64_t)&v65))
  {
    v3 = 3;
  }
  else
  {
    v62 = 0;
    v63 = 0;
    v64 = 0;
    __p = 0;
    v60 = 0;
    v61 = 0;
    v57 = 0;
    v58 = 0;
    ZinCpBasedAllocator::CollectMemorySize((uint64_t)this, (ZinEngineLayerMirInfo **)a2, &v62, &__p, &v58, &v57);
    v55 = 0uLL;
    v56[0] = 0;
    if (v76 != (_BYTE *)v75)
    {
      v4 = 0;
      do
      {
        v5 = operator new();
        *(_OWORD *)(v5 + 128) = 0u;
        *(_OWORD *)(v5 + 144) = 0u;
        *(_OWORD *)(v5 + 96) = 0u;
        *(_OWORD *)(v5 + 112) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_OWORD *)(v5 + 80) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        v54 = (LayerCycleAndFootprintEstimator *)v5;
        *(_QWORD *)v5 = v75[v4];
        *(_QWORD *)(v5 + 16) = v72[v4];
        *(_QWORD *)(v5 + 8) = *(_QWORD *)&v62[8 * v4];
        *(_QWORD *)(v5 + 24) = *((_QWORD *)__p + v4);
        v6 = (ZinIrOpLayer *)v78;
        if (*((char *)v78 + 47) >= 0)
          v7 = *((unsigned __int8 *)v78 + 47);
        else
          v7 = v78[4];
        std::string::basic_string[abi:ne180100]((uint64_t)&v53, v7 + 7);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &v53;
        else
          v8 = (std::string *)v53.__r_.__value_.__r.__words[0];
        if (v7)
        {
          if (*((char *)v6 + 47) >= 0)
            v9 = (char *)v6 + 24;
          else
            v9 = (const void *)*((_QWORD *)v6 + 3);
          memmove(v8, v9, v7);
        }
        strcpy((char *)v8 + v7, ":input_");
        std::to_string(&v52, v4);
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v52;
        else
          v10 = (std::string *)v52.__r_.__value_.__r.__words[0];
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
        else
          size = v52.__r_.__value_.__l.__size_;
        v12 = std::string::append(&v53, (const std::string::value_type *)v10, size);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        std::string::operator=((std::string *)(v5 + 136), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        *(_QWORD *)(v5 + 120) = v65[v4];
        v14 = v55.i64[1];
        if (v55.i64[1] >= v56[0])
        {
          v15 = (v55.i64[1] - v55.i64[0]) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v17 = v56[0] - v55.i64[0];
          if ((v56[0] - v55.i64[0]) >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          v81 = v56;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v56, v18);
          else
            v19 = 0;
          v20 = (uint64_t *)&v19[8 * v15];
          v21 = &v19[8 * v18];
          v80 = v21;
          v54 = 0;
          *v20 = v5;
          v22 = v20 + 1;
          __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 1);
          v23 = (_QWORD *)v55.i64[1];
          v24 = (_QWORD *)v55.i64[0];
          if (v55.i64[1] == v55.i64[0])
          {
            v27 = 0;
            v26 = vdupq_n_s64(v55.u64[1]);
          }
          else
          {
            do
            {
              v25 = *--v23;
              *v23 = 0;
              *--v20 = v25;
            }
            while (v23 != v24);
            v26 = v55;
            v22 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
            v21 = v80;
            v27 = (void **)v54;
          }
          v55.i64[0] = (uint64_t)v20;
          v55.i64[1] = (uint64_t)v22;
          *(int64x2_t *)&__str.__r_.__value_.__r.__words[1] = v26;
          v28 = (char *)v56[0];
          v56[0] = v21;
          v80 = v28;
          __str.__r_.__value_.__r.__words[0] = v26.i64[0];
          std::__split_buffer<std::unique_ptr<L2CycleEstimator>>::~__split_buffer((uint64_t)&__str);
          v55.i64[1] = (uint64_t)v22;
          if (v27)
          {
            L2CycleEstimator::~L2CycleEstimator(v27);
            MEMORY[0x20BD002F8]();
          }
        }
        else
        {
          v54 = 0;
          *(_QWORD *)v55.i64[1] = v5;
          v55.i64[1] = v14 + 8;
        }
        ++v4;
      }
      while (v4 < (v76 - (_BYTE *)v75) >> 3);
    }
    v29 = operator new();
    *(_QWORD *)(v29 + 32) = 0;
    *(_OWORD *)v29 = 0u;
    *(_OWORD *)(v29 + 16) = 0u;
    v30 = operator new(0x10uLL);
    *(_QWORD *)(v29 + 24) = v30 + 2;
    *(_QWORD *)(v29 + 32) = v30 + 2;
    *v30 = 0;
    v30[1] = 0;
    *(_OWORD *)(v29 + 40) = 0u;
    *(_OWORD *)(v29 + 56) = 0u;
    v53.__r_.__value_.__r.__words[0] = v29;
    v31 = v70;
    *(_QWORD *)v29 = v71;
    *(_QWORD *)(v29 + 8) = v31;
    *(_QWORD *)(v29 + 16) = v30;
    v32 = (ZinIrOpLayer *)v78;
    if (*((char *)v78 + 47) >= 0)
      v33 = *((unsigned __int8 *)v78 + 47);
    else
      v33 = v78[4];
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v33 + 8);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if (*((char *)v32 + 47) >= 0)
        v35 = (char *)v32 + 24;
      else
        v35 = (const void *)*((_QWORD *)v32 + 3);
      memmove(p_str, v35, v33);
    }
    strcpy((char *)p_str + v33, ":compute");
    std::string::operator=((std::string *)(v29 + 48), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v36 = operator new();
    *(_OWORD *)(v36 + 128) = 0u;
    *(_OWORD *)(v36 + 144) = 0u;
    *(_OWORD *)(v36 + 96) = 0u;
    *(_OWORD *)(v36 + 112) = 0u;
    *(_OWORD *)(v36 + 64) = 0u;
    *(_OWORD *)(v36 + 80) = 0u;
    *(_OWORD *)(v36 + 32) = 0u;
    *(_OWORD *)(v36 + 48) = 0u;
    v52.__r_.__value_.__r.__words[0] = v36;
    v37 = v68;
    v38 = v58;
    *(_QWORD *)v36 = v69;
    *(_QWORD *)(v36 + 8) = v38;
    v39 = v57;
    *(_QWORD *)(v36 + 16) = v37;
    *(_QWORD *)(v36 + 24) = v39;
    v40 = (ZinIrOpLayer *)v78;
    if (*((char *)v78 + 47) >= 0)
      v41 = *((unsigned __int8 *)v78 + 47);
    else
      v41 = v78[4];
    v42 = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v41 + 7);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v41)
    {
      if (*((char *)v40 + 47) >= 0)
        v43 = (char *)v40 + 24;
      else
        v43 = (const void *)*((_QWORD *)v40 + 3);
      memmove(v42, v43, v41);
    }
    strcpy((char *)v42 + v41, ":output");
    std::string::operator=((std::string *)(v36 + 136), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v51 = !ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)v78);
    std::make_unique[abi:ne180100]<LayerCycleAndFootprintEstimator,std::vector<std::unique_ptr<L2CycleEstimator>>,std::unique_ptr<ComputeCycleEstimator>,std::unique_ptr<L2CycleEstimator>,BOOL &>((__int128 *)v55.i8, (ComputeCycleEstimator **)&v53, (L2CycleEstimator **)&v52, (unsigned __int8 *)&v51, (uint64_t *)&v54);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
    v44 = (LayerCycleAndFootprintEstimator **)std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>((uint64_t)this + 112, &v78, (uint64_t)&std::piecewise_construct, &__str);
    v45 = v54;
    v54 = 0;
    std::unique_ptr<LayerCycleAndFootprintEstimator>::reset[abi:ne180100](v44 + 3, v45);
    v46 = v54;
    v54 = 0;
    if (v46)
    {
      LayerCycleAndFootprintEstimator::~LayerCycleAndFootprintEstimator(v46);
      MEMORY[0x20BD002F8]();
    }
    v47 = (void **)v52.__r_.__value_.__r.__words[0];
    v52.__r_.__value_.__r.__words[0] = 0;
    if (v47)
    {
      L2CycleEstimator::~L2CycleEstimator(v47);
      MEMORY[0x20BD002F8]();
    }
    v48 = (ComputeCycleEstimator *)v53.__r_.__value_.__r.__words[0];
    v53.__r_.__value_.__r.__words[0] = 0;
    if (v48)
    {
      ComputeCycleEstimator::~ComputeCycleEstimator(v48);
      MEMORY[0x20BD002F8]();
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
    std::vector<std::unique_ptr<L2CycleEstimator>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (__p)
    {
      v60 = __p;
      operator delete(__p);
    }
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
    v3 = 0;
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  return v3;
}

void sub_207042BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int16 *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,LayerCycleAndFootprintEstimator *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  std::unique_ptr<LayerCycleAndFootprintEstimator>::reset[abi:ne180100](&a24, 0);
  std::unique_ptr<L2CycleEstimator>::reset[abi:ne180100]((void ***)&a12, 0);
  std::unique_ptr<ComputeCycleEstimator>::reset[abi:ne180100]((ComputeCycleEstimator **)&a18, 0);
  a18 = &a25;
  std::vector<std::unique_ptr<L2CycleEstimator>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  v36 = *(void **)v34;
  if (*(_QWORD *)v34)
  {
    *(_QWORD *)(v34 + 8) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 + 24);
  if (v37)
  {
    *(_QWORD *)(v34 + 32) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v34 + 80);
  if (v38)
  {
    *(_QWORD *)(v34 + 88) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v34 + 104);
  if (v39)
  {
    *(_QWORD *)(v34 + 112) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinCpBasedAllocator::CollectMemorySize(uint64_t a1, ZinEngineLayerMirInfo **a2, char **a3, _QWORD *a4, _QWORD *a5, unint64_t *a6)
{
  const ZinIrTensor **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  ZinL2FootprintCalculator *v25;
  const ZinIrTensor *v26;
  uint64_t v27;
  void *__p;
  _BYTE *v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  _BYTE v48[25];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  int v71;
  _BYTE v72[32];
  int v73;
  int v74;
  _BYTE v75[32];
  int v76;
  int v77;
  _BYTE v78[32];
  int v79;

  a3[1] = *a3;
  a4[1] = *a4;
  v31 = vdupq_n_s64(1uLL);
  v38 = 0;
  v39 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v32 = 1;
  v33 = 0;
  v34 = 0;
  v40 = 1;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = xmmword_207A7E150;
  v46 = 0;
  v53 = 0;
  v58 = 0;
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v54 = 0u;
  v59 = 0;
  v64 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  v70 = 0;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0;
  v71 = 0;
  memset(v72, 0, sizeof(v72));
  v47 = 0u;
  memset(v48, 0, sizeof(v48));
  v49 = 0;
  v50 = 0;
  v52 = 0;
  v51 = 0;
  v73 = 1065353216;
  v74 = 0;
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  v77 = 0;
  memset(v78, 0, sizeof(v78));
  v79 = 1065353216;
  ZinL2FootprintCalculator::GetDmaBufferSizes(*(_QWORD *)(a1 + 272), a2, (uint64_t)a4, a6, (unint64_t *)&v31);
  (*((void (**)(void **__return_ptr, ZinEngineLayerMirInfo **))*a2 + 64))(&__p, a2);
  v10 = (const ZinIrTensor **)__p;
  if (v30 != __p)
  {
    v11 = 0;
    do
    {
      ZinL2FootprintCalculator::GetResidentBufferSize(*(ZinL2FootprintCalculator **)(a1 + 272), v10[v11]);
      v13 = v12;
      v15 = a3[1];
      v14 = (unint64_t)a3[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = *a3;
        v18 = (v15 - *a3) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v21);
          v17 = *a3;
          v15 = a3[1];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v18];
        *(_QWORD *)v23 = v13;
        v16 = v23 + 8;
        while (v15 != v17)
        {
          v24 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        *a3 = v23;
        a3[1] = v16;
        a3[2] = &v22[8 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v15 = v12;
        v16 = v15 + 8;
      }
      a3[1] = v16;
      ++v11;
      v10 = (const ZinIrTensor **)__p;
    }
    while (v11 < (v30 - (_BYTE *)__p) >> 3);
  }
  v25 = *(ZinL2FootprintCalculator **)(a1 + 272);
  v26 = (const ZinIrTensor *)(*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
  ZinL2FootprintCalculator::GetResidentBufferSize(v25, v26);
  *a5 = v27;
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v78);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v75);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v72);
}

void sub_207043034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&a15);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<LayerCycleAndFootprintEstimator,std::vector<std::unique_ptr<L2CycleEstimator>>,std::unique_ptr<ComputeCycleEstimator>,std::unique_ptr<L2CycleEstimator>,BOOL &>(__int128 *a1@<X0>, ComputeCycleEstimator **a2@<X1>, L2CycleEstimator **a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  ComputeCycleEstimator *v11;
  L2CycleEstimator *v12;
  void **v13;
  uint64_t v14;
  ComputeCycleEstimator *v15;
  uint64_t v16;
  L2CycleEstimator *v17;
  ComputeCycleEstimator *v18;
  __int128 v19;
  uint64_t v20;
  void **v21;

  v10 = operator new();
  v19 = *a1;
  v20 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v11 = *a2;
  *a2 = 0;
  v12 = *a3;
  *a3 = 0;
  v17 = v12;
  v18 = v11;
  LayerCycleAndFootprintEstimator::LayerCycleAndFootprintEstimator(v10, &v19, &v18, &v17, *a4);
  *a5 = v10;
  v13 = (void **)v17;
  v17 = 0;
  if (v13)
  {
    L2CycleEstimator::~L2CycleEstimator(v13);
    MEMORY[0x20BD002F8](v14);
  }
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    ComputeCycleEstimator::~ComputeCycleEstimator(v15);
    MEMORY[0x20BD002F8](v16, 0x1012C4064457FDELL);
  }
  v21 = (void **)&v19;
  std::vector<std::unique_ptr<L2CycleEstimator>>::__destroy_vector::operator()[abi:ne180100](&v21);
}

void sub_20704316C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, ComputeCycleEstimator *a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;

  std::unique_ptr<L2CycleEstimator>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<ComputeCycleEstimator>::reset[abi:ne180100](&a10, 0);
  std::vector<std::unique_ptr<L2CycleEstimator>>::__destroy_vector::operator()[abi:ne180100](&a14);
  MEMORY[0x20BD002F8](v14, 0x20C40A759441BLL);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v7;
  void *v8;

  result[1] = 0;
  if (a4)
  {
    v7 = result;
    if (a4 > result[2] << 6)
    {
      v8 = (void *)*result;
      if (*v7)
      {
        operator delete(v8);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](v7, a4);
    }
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

uint64_t std::vector<std::vector<ZinANELayer const*>>::__push_back_slow_path<std::vector<ZinANELayer const*> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<ZinANELayer const*>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_207043338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<ZinANELayer const*>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinANELayer const*>>,std::reverse_iterator<std::vector<ZinANELayer const*>*>,std::reverse_iterator<std::vector<ZinANELayer const*>*>,std::reverse_iterator<std::vector<ZinANELayer const*>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinANELayer const*>>,std::reverse_iterator<std::vector<ZinANELayer const*>*>,std::reverse_iterator<std::vector<ZinANELayer const*>*>,std::reverse_iterator<std::vector<ZinANELayer const*>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer const*>>,std::reverse_iterator<std::vector<ZinANELayer const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer const*>>,std::reverse_iterator<std::vector<ZinANELayer const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrOpLayer *>>,std::reverse_iterator<std::vector<ZinIrOpLayer *>*>>::operator()[abi:ne180100](a1);
  return a1;
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **,false>(unint64_t *result, unint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  BOOL v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  BOOL v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  BOOL v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  BOOL v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  BOOL v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  unint64_t v90;
  BOOL v91;
  _QWORD *v92;
  uint64_t *v93;
  _QWORD *v94;
  unint64_t v95;
  BOOL v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  unint64_t v104;
  BOOL v105;
  _QWORD *v106;
  uint64_t *v107;
  _QWORD *v108;
  unint64_t v109;
  BOOL v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  BOOL v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  BOOL v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  BOOL v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  BOOL v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v144;
  unint64_t *v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  BOOL v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  unint64_t v153;
  BOOL v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t *v163;
  _QWORD *v164;
  unint64_t v165;
  BOOL v166;
  _QWORD *v167;
  uint64_t *v168;
  _QWORD *v169;
  unint64_t v170;
  BOOL v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v176;
  uint64_t *v177;
  _QWORD *v178;
  unint64_t v179;
  BOOL v180;
  _QWORD *v181;
  uint64_t *v182;
  _QWORD *v183;
  unint64_t v184;
  BOOL v185;
  _QWORD *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v190;
  _QWORD *v191;
  _QWORD *v192;
  unint64_t v193;
  BOOL v194;
  _QWORD *v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  unint64_t v199;
  BOOL v200;
  _QWORD *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  BOOL v211;
  _QWORD *v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  BOOL v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t *v220;
  BOOL v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t *v225;
  unint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  unint64_t v231;
  BOOL v232;
  _QWORD *v233;
  unint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  BOOL v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  unint64_t v247;
  BOOL v248;
  _QWORD *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  BOOL v254;
  _QWORD *v255;
  unint64_t v256;
  unint64_t v257;
  int64_t v259;
  int64_t v260;
  int64_t v261;
  uint64_t v262;
  unint64_t *v263;
  uint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  unint64_t v270;
  BOOL v271;
  _QWORD *v272;
  unint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  unint64_t v276;
  BOOL v277;
  _QWORD *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t *v283;
  _QWORD *v284;
  unint64_t v285;
  BOOL v286;
  _QWORD *v287;
  unint64_t *v288;
  unint64_t v289;
  BOOL v290;
  _QWORD *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  unint64_t v303;
  BOOL v304;
  _QWORD *v305;
  unint64_t *v306;
  _QWORD *v307;
  _QWORD *v308;
  unint64_t v309;
  BOOL v310;
  _QWORD *v311;
  unint64_t v312;
  unint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  unint64_t v317;
  BOOL v318;
  _QWORD *v319;
  _QWORD *v320;
  unint64_t v321;
  BOOL v322;
  _QWORD *v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t *v329;
  unint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  unint64_t v338;
  BOOL v339;
  _QWORD *v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  BOOL v344;
  _QWORD *v345;
  unint64_t *v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t *v352;
  _QWORD *v353;
  unint64_t *v354;
  _QWORD *v355;
  unint64_t v356;
  BOOL v357;
  _QWORD *v358;
  unint64_t v359;
  unint64_t v360;
  BOOL v361;
  _QWORD *v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t *v368;
  _QWORD *v369;
  unint64_t *v370;
  _QWORD *v371;
  unint64_t v372;
  BOOL v373;
  _QWORD *v374;
  unint64_t v375;
  BOOL v376;
  _QWORD *v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  _QWORD *v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  unint64_t v389;
  BOOL v390;
  _QWORD *v391;
  unint64_t v392;
  _QWORD *v393;
  unint64_t v394;
  BOOL v395;
  _QWORD *v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t *v400;
  _QWORD *v401;
  _QWORD *v402;
  _QWORD *v403;
  _QWORD *v404;
  unint64_t v405;
  BOOL v406;
  _QWORD *v407;
  uint64_t v408;
  unint64_t v409;
  BOOL v410;
  _QWORD *v411;
  unint64_t v412;
  unint64_t v413;

  v9 = result;
LABEL_2:
  i = v9;
  while (2)
  {
    v9 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = a2 - i;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v205 = *(a2 - 1);
        v206 = (_QWORD *)(*a3 + 8);
        v207 = (_QWORD *)*v206;
        if (!*v206)
          goto LABEL_420;
        v208 = (_QWORD *)(*a3 + 8);
        v209 = (_QWORD *)*v208;
        do
        {
          v210 = v209[4];
          v211 = v210 >= v205;
          if (v210 >= v205)
            v212 = v209;
          else
            v212 = v209 + 1;
          if (v211)
            v208 = v209;
          v209 = (_QWORD *)*v212;
        }
        while (*v212);
        if (v208 == v206 || v208[4] > v205)
LABEL_420:
          v208 = (_QWORD *)(*a3 + 8);
        v213 = *i;
        if (!v207)
          goto LABEL_432;
        v214 = *a3 + 8;
        do
        {
          v215 = v207[4];
          v216 = v215 >= v213;
          if (v215 >= v213)
            v217 = v207;
          else
            v217 = v207 + 1;
          if (v216)
            v214 = (uint64_t)v207;
          v207 = (_QWORD *)*v217;
        }
        while (*v217);
        if ((_QWORD *)v214 == v206 || *(_QWORD *)(v214 + 32) > v213)
LABEL_432:
          v214 = *a3 + 8;
        v218 = v208[5];
        v219 = *(_QWORD *)(v214 + 40);
        if (v205 == v213 || v218 != v219)
        {
          if (v218 <= v219)
            return result;
        }
        else if (*(_QWORD *)(*(_QWORD *)(v205 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v213 + 96) + 48))
        {
          return result;
        }
        *i = v205;
        *(a2 - 1) = v213;
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(i, i + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(i, i + 1, i + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **,0>(i, i + 1, i + 2, i + 3, a2 - 1, a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (i == a2)
              return result;
            v259 = (v12 - 2) >> 1;
            v260 = v259;
            while (1)
            {
              v261 = v260;
              if (v259 < v260)
                goto LABEL_647;
              v262 = (2 * v260) | 1;
              v263 = &i[v262];
              v264 = *a3;
              if (2 * v261 + 2 >= (uint64_t)v12)
              {
                v267 = *(_QWORD **)(v264 + 8);
              }
              else
              {
                v265 = *v263;
                v266 = (_QWORD *)(v264 + 8);
                v267 = *(_QWORD **)(v264 + 8);
                if (!v267)
                  goto LABEL_533;
                v268 = (_QWORD *)(v264 + 8);
                v269 = *(_QWORD **)(v264 + 8);
                do
                {
                  v270 = v269[4];
                  v271 = v270 >= v265;
                  if (v270 >= v265)
                    v272 = v269;
                  else
                    v272 = v269 + 1;
                  if (v271)
                    v268 = v269;
                  v269 = (_QWORD *)*v272;
                }
                while (*v272);
                if (v268 == v266 || v268[4] > v265)
LABEL_533:
                  v268 = (_QWORD *)(v264 + 8);
                v273 = v263[1];
                if (!v267)
                  goto LABEL_545;
                v274 = (_QWORD *)(v264 + 8);
                v275 = *(_QWORD **)(v264 + 8);
                do
                {
                  v276 = v275[4];
                  v277 = v276 >= v273;
                  if (v276 >= v273)
                    v278 = v275;
                  else
                    v278 = v275 + 1;
                  if (v277)
                    v274 = v275;
                  v275 = (_QWORD *)*v278;
                }
                while (*v278);
                if (v274 == v266 || v274[4] > v273)
LABEL_545:
                  v274 = (_QWORD *)(v264 + 8);
                v279 = v268[5];
                v280 = v274[5];
                if (v265 != v273 && v279 == v280)
                {
                  if (*(_QWORD *)(*(_QWORD *)(v265 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v273 + 96) + 48))
                    goto LABEL_553;
LABEL_552:
                  ++v263;
                  v262 = 2 * v261 + 2;
                  goto LABEL_553;
                }
                if (v279 > v280)
                  goto LABEL_552;
              }
LABEL_553:
              v281 = *v263;
              v282 = (unint64_t *)i[v261];
              v283 = (unint64_t *)(v264 + 8);
              if (!v267)
                goto LABEL_564;
              result = v283;
              v284 = v267;
              do
              {
                v285 = v284[4];
                v286 = v285 >= v281;
                if (v285 >= v281)
                  v287 = v284;
                else
                  v287 = v284 + 1;
                if (v286)
                  result = v284;
                v284 = (_QWORD *)*v287;
              }
              while (*v287);
              if (result == v283 || result[4] > v281)
LABEL_564:
                result = v283;
              if (!v267)
                goto LABEL_576;
              v288 = v283;
              do
              {
                v289 = v267[4];
                v290 = v289 >= (unint64_t)v282;
                if (v289 >= (unint64_t)v282)
                  v291 = v267;
                else
                  v291 = v267 + 1;
                if (v290)
                  v288 = v267;
                v267 = (_QWORD *)*v291;
              }
              while (*v291);
              if (v288 == v283 || v288[4] > (unint64_t)v282)
LABEL_576:
                v288 = v283;
              v292 = result[5];
              v293 = v288[5];
              if ((unint64_t *)v281 == v282 || v292 != v293)
              {
                if (v292 <= v293)
                {
LABEL_582:
                  i[v261] = v281;
                  if (v259 < v262)
                  {
LABEL_583:
                    v294 = v263;
LABEL_646:
                    *v294 = (unint64_t)v282;
                    goto LABEL_647;
                  }
                  while (2)
                  {
                    v295 = 2 * v262;
                    v262 = (2 * v262) | 1;
                    v294 = &i[v262];
                    v296 = v295 + 2;
                    v297 = *a3;
                    if (v295 + 2 >= (uint64_t)v12)
                    {
                      v300 = *(_QWORD **)(v297 + 8);
                    }
                    else
                    {
                      v298 = (unint64_t *)*v294;
                      v299 = (_QWORD *)(v297 + 8);
                      v300 = *(_QWORD **)(v297 + 8);
                      if (!v300)
                        goto LABEL_596;
                      v301 = (_QWORD *)(v297 + 8);
                      v302 = *(_QWORD **)(v297 + 8);
                      do
                      {
                        v303 = v302[4];
                        v304 = v303 >= (unint64_t)v298;
                        if (v303 >= (unint64_t)v298)
                          v305 = v302;
                        else
                          v305 = v302 + 1;
                        if (v304)
                          v301 = v302;
                        v302 = (_QWORD *)*v305;
                      }
                      while (*v305);
                      if (v301 == v299 || v301[4] > (unint64_t)v298)
LABEL_596:
                        v301 = (_QWORD *)(v297 + 8);
                      v306 = (unint64_t *)v294[1];
                      if (!v300)
                        goto LABEL_608;
                      v307 = (_QWORD *)(v297 + 8);
                      v308 = *(_QWORD **)(v297 + 8);
                      do
                      {
                        v309 = v308[4];
                        v310 = v309 >= (unint64_t)v306;
                        if (v309 >= (unint64_t)v306)
                          v311 = v308;
                        else
                          v311 = v308 + 1;
                        if (v310)
                          v307 = v308;
                        v308 = (_QWORD *)*v311;
                      }
                      while (*v311);
                      if (v307 == v299 || v307[4] > (unint64_t)v306)
LABEL_608:
                        v307 = (_QWORD *)(v297 + 8);
                      v312 = v301[5];
                      v313 = v307[5];
                      if (v298 == v306 || v312 != v313)
                      {
                        if (v312 > v313)
                          goto LABEL_615;
                      }
                      else
                      {
                        if (*(_QWORD *)(v298[12] + 48) >= *(_QWORD *)(v306[12] + 48))
                          goto LABEL_616;
LABEL_615:
                        ++v294;
                        v262 = v296;
                      }
                    }
LABEL_616:
                    result = (unint64_t *)*v294;
                    v314 = (_QWORD *)(v297 + 8);
                    if (!v300)
                      goto LABEL_627;
                    v315 = v314;
                    v316 = v300;
                    do
                    {
                      v317 = v316[4];
                      v318 = v317 >= (unint64_t)result;
                      if (v317 >= (unint64_t)result)
                        v319 = v316;
                      else
                        v319 = v316 + 1;
                      if (v318)
                        v315 = v316;
                      v316 = (_QWORD *)*v319;
                    }
                    while (*v319);
                    if (v315 == v314 || v315[4] > (unint64_t)result)
LABEL_627:
                      v315 = v314;
                    if (!v300)
                      goto LABEL_639;
                    v320 = v314;
                    do
                    {
                      v321 = v300[4];
                      v322 = v321 >= (unint64_t)v282;
                      if (v321 >= (unint64_t)v282)
                        v323 = v300;
                      else
                        v323 = v300 + 1;
                      if (v322)
                        v320 = v300;
                      v300 = (_QWORD *)*v323;
                    }
                    while (*v323);
                    if (v320 == v314 || v320[4] > (unint64_t)v282)
LABEL_639:
                      v320 = v314;
                    v324 = v315[5];
                    v325 = v320[5];
                    if (result == v282 || v324 != v325)
                    {
                      if (v324 > v325)
                        goto LABEL_583;
                    }
                    else if (*(_QWORD *)(result[12] + 48) < *(_QWORD *)(v282[12] + 48))
                    {
                      goto LABEL_583;
                    }
                    *v263 = (unint64_t)result;
                    v263 = v294;
                    if (v259 < v262)
                      goto LABEL_646;
                    continue;
                  }
                }
              }
              else if (*(_QWORD *)(*(_QWORD *)(v281 + 96) + 48) >= *(_QWORD *)(v282[12] + 48))
              {
                goto LABEL_582;
              }
LABEL_647:
              v260 = v261 - 1;
              if (!v261)
              {
                v326 = (unint64_t)v11 >> 3;
                while (1)
                {
                  v327 = 0;
                  v328 = *i;
                  v329 = i;
                  do
                  {
                    v330 = v329;
                    v329 += v327 + 1;
                    v331 = 2 * v327;
                    v327 = (2 * v327) | 1;
                    v332 = v331 + 2;
                    if (v332 >= v326)
                      goto LABEL_679;
                    v333 = *v329;
                    v335 = (_QWORD *)(*a3 + 8);
                    v334 = (_QWORD *)*v335;
                    if (!*v335)
                      goto LABEL_662;
                    v336 = (_QWORD *)(*a3 + 8);
                    v337 = (_QWORD *)*v336;
                    do
                    {
                      v338 = v337[4];
                      v339 = v338 >= v333;
                      if (v338 >= v333)
                        v340 = v337;
                      else
                        v340 = v337 + 1;
                      if (v339)
                        v336 = v337;
                      v337 = (_QWORD *)*v340;
                    }
                    while (*v340);
                    if (v336 == v335 || v336[4] > v333)
LABEL_662:
                      v336 = (_QWORD *)(*a3 + 8);
                    v341 = v329[1];
                    if (!v334)
                      goto LABEL_674;
                    v342 = *a3 + 8;
                    do
                    {
                      v343 = v334[4];
                      v344 = v343 >= v341;
                      if (v343 >= v341)
                        v345 = v334;
                      else
                        v345 = v334 + 1;
                      if (v344)
                        v342 = (uint64_t)v334;
                      v334 = (_QWORD *)*v345;
                    }
                    while (*v345);
                    if ((_QWORD *)v342 == v335 || *(_QWORD *)(v342 + 32) > v341)
LABEL_674:
                      v342 = *a3 + 8;
                    v346 = (unint64_t *)v336[5];
                    result = *(unint64_t **)(v342 + 40);
                    if (v333 != v341 && v346 == result)
                    {
                      if (*(_QWORD *)(*(_QWORD *)(v333 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v341 + 96) + 48))
                        goto LABEL_679;
LABEL_678:
                      ++v329;
                      v327 = v332;
                      goto LABEL_679;
                    }
                    if (v346 > result)
                      goto LABEL_678;
LABEL_679:
                    *v330 = *v329;
                  }
                  while (v327 <= (uint64_t)((unint64_t)(v326 - 2) >> 1));
                  if (v329 == --a2)
                  {
                    *v329 = v328;
                    goto LABEL_750;
                  }
                  *v329 = *a2;
                  *a2 = v328;
                  v347 = (char *)v329 - (char *)i + 8;
                  if (v347 < 9)
                    goto LABEL_750;
                  v348 = ((unint64_t)v347 >> 3) - 2;
                  v349 = v348 >> 1;
                  v350 = &i[v348 >> 1];
                  v351 = *v350;
                  v352 = (unint64_t *)(*a3 + 8);
                  v353 = (_QWORD *)*v352;
                  if (!*v352)
                    goto LABEL_696;
                  v354 = (unint64_t *)(*a3 + 8);
                  v355 = (_QWORD *)*v354;
                  do
                  {
                    v356 = v355[4];
                    v357 = v356 >= v351;
                    if (v356 >= v351)
                      v358 = v355;
                    else
                      v358 = v355 + 1;
                    if (v357)
                      v354 = v355;
                    v355 = (_QWORD *)*v358;
                  }
                  while (*v358);
                  if (v354 == v352 || v354[4] > v351)
LABEL_696:
                    v354 = (unint64_t *)(*a3 + 8);
                  v359 = *v329;
                  if (!v353)
                    goto LABEL_708;
                  result = (unint64_t *)(*a3 + 8);
                  do
                  {
                    v360 = v353[4];
                    v361 = v360 >= v359;
                    if (v360 >= v359)
                      v362 = v353;
                    else
                      v362 = v353 + 1;
                    if (v361)
                      result = v353;
                    v353 = (_QWORD *)*v362;
                  }
                  while (*v362);
                  if (result == v352 || result[4] > v359)
LABEL_708:
                    result = (unint64_t *)(*a3 + 8);
                  v363 = v354[5];
                  v364 = result[5];
                  if (v351 == v359 || v363 != v364)
                  {
                    if (v363 <= v364)
                      goto LABEL_750;
                  }
                  else if (*(_QWORD *)(*(_QWORD *)(v351 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v359 + 96) + 48))
                  {
                    goto LABEL_750;
                  }
                  *v329 = v351;
                  if (v348 >= 2)
                  {
                    do
                    {
                      v366 = v349 - 1;
                      v349 = (v349 - 1) >> 1;
                      v365 = &i[v349];
                      v367 = *v365;
                      v368 = (unint64_t *)(*a3 + 8);
                      v369 = (_QWORD *)*v368;
                      if (!*v368)
                        goto LABEL_728;
                      v370 = (unint64_t *)(*a3 + 8);
                      v371 = (_QWORD *)*v370;
                      do
                      {
                        v372 = v371[4];
                        v373 = v372 >= v367;
                        if (v372 >= v367)
                          v374 = v371;
                        else
                          v374 = v371 + 1;
                        if (v373)
                          v370 = v371;
                        v371 = (_QWORD *)*v374;
                      }
                      while (*v374);
                      if (v370 == v368 || v370[4] > v367)
LABEL_728:
                        v370 = (unint64_t *)(*a3 + 8);
                      if (!v369)
                        goto LABEL_740;
                      result = (unint64_t *)(*a3 + 8);
                      do
                      {
                        v375 = v369[4];
                        v376 = v375 >= v359;
                        if (v375 >= v359)
                          v377 = v369;
                        else
                          v377 = v369 + 1;
                        if (v376)
                          result = v369;
                        v369 = (_QWORD *)*v377;
                      }
                      while (*v377);
                      if (result == v368 || result[4] > v359)
LABEL_740:
                        result = (unint64_t *)(*a3 + 8);
                      v378 = v370[5];
                      v379 = result[5];
                      if (v367 != v359 && v378 == v379)
                      {
                        if (*(_QWORD *)(*(_QWORD *)(v367 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v359 + 96) + 48))
                          goto LABEL_716;
                      }
                      else if (v378 <= v379)
                      {
                        goto LABEL_716;
                      }
                      *v350 = v367;
                      v350 = &i[v349];
                    }
                    while (v366 > 1);
                  }
                  else
                  {
LABEL_716:
                    v365 = v350;
                  }
                  *v365 = v359;
LABEL_750:
                  if (v326-- <= 2)
                    return result;
                }
              }
            }
          }
          v13 = v12 >> 1;
          v14 = &i[v12 >> 1];
          if ((unint64_t)v11 < 0x401)
          {
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(&v9[v12 >> 1], v9, a2 - 1, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(v9, &v9[v12 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(v9 + 1, v14 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(v14 - 1, v14, &v9[v13 + 1], a3);
            v15 = *v9;
            *v9 = *v14;
            *v14 = v15;
          }
          --a4;
          v16 = *v9;
          v17 = *a3;
          if ((a5 & 1) == 0)
          {
            v19 = *(v9 - 1);
            v20 = (_QWORD *)(v17 + 8);
            v18 = *(_QWORD **)(v17 + 8);
            if (!v18)
              goto LABEL_22;
            v21 = (_QWORD *)(v17 + 8);
            v22 = *(_QWORD **)(v17 + 8);
            do
            {
              v23 = v22[4];
              v24 = v23 >= v19;
              if (v23 >= v19)
                v25 = v22;
              else
                v25 = v22 + 1;
              if (v24)
                v21 = v22;
              v22 = (_QWORD *)*v25;
            }
            while (*v25);
            if (v21 == v20 || v21[4] > v19)
LABEL_22:
              v21 = (_QWORD *)(v17 + 8);
            if (!v18)
              goto LABEL_34;
            v26 = (_QWORD *)(v17 + 8);
            v27 = *(_QWORD **)(v17 + 8);
            do
            {
              v28 = v27[4];
              v29 = v28 >= v16;
              if (v28 >= v16)
                v30 = v27;
              else
                v30 = v27 + 1;
              if (v29)
                v26 = v27;
              v27 = (_QWORD *)*v30;
            }
            while (*v30);
            if (v26 == v20 || v26[4] > v16)
LABEL_34:
              v26 = (_QWORD *)(v17 + 8);
            v31 = v21[5];
            v32 = v26[5];
            if (v19 == v16 || v31 != v32)
            {
              if (v31 > v32)
                goto LABEL_38;
            }
            else if (*(_QWORD *)(*(_QWORD *)(v19 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v16 + 96) + 48))
            {
              goto LABEL_38;
            }
            if (!v18)
              goto LABEL_222;
            v116 = (_QWORD *)(v17 + 8);
            v117 = *(_QWORD **)(v17 + 8);
            do
            {
              v118 = v117[4];
              v119 = v118 >= v16;
              if (v118 >= v16)
                v120 = v117;
              else
                v120 = v117 + 1;
              if (v119)
                v116 = v117;
              v117 = (_QWORD *)*v120;
            }
            while (*v120);
            if (v116 == v20 || v116[4] > v16)
LABEL_222:
              v116 = v20;
            v121 = *(a2 - 1);
            if (!v18)
              goto LABEL_234;
            v122 = v20;
            v123 = v18;
            do
            {
              v124 = v123[4];
              v125 = v124 >= v121;
              if (v124 >= v121)
                v126 = v123;
              else
                v126 = v123 + 1;
              if (v125)
                v122 = v123;
              v123 = (_QWORD *)*v126;
            }
            while (*v126);
            if (v122 == v20 || v122[4] > v121)
LABEL_234:
              v122 = v20;
            v127 = v116[5];
            v128 = v122[5];
            if (v16 == v121 || v127 != v128)
            {
              if (v127 > v128)
              {
LABEL_238:
                i = v9;
                do
                {
                  while (1)
                  {
                    if (!v18)
                      goto LABEL_250;
                    v129 = v20;
                    v130 = v18;
                    do
                    {
                      v131 = v130[4];
                      v132 = v131 >= v16;
                      if (v131 >= v16)
                        v133 = v130;
                      else
                        v133 = v130 + 1;
                      if (v132)
                        v129 = v130;
                      v130 = (_QWORD *)*v133;
                    }
                    while (*v133);
                    if (v129 == v20 || v129[4] > v16)
LABEL_250:
                      v129 = v20;
                    v135 = i[1];
                    ++i;
                    v134 = v135;
                    if (!v18)
                      goto LABEL_262;
                    v136 = v20;
                    v137 = v18;
                    do
                    {
                      v138 = v137[4];
                      v139 = v138 >= v134;
                      if (v138 >= v134)
                        v140 = v137;
                      else
                        v140 = v137 + 1;
                      if (v139)
                        v136 = v137;
                      v137 = (_QWORD *)*v140;
                    }
                    while (*v140);
                    if (v136 == v20 || v136[4] > v134)
LABEL_262:
                      v136 = v20;
                    v141 = v129[5];
                    v142 = v136[5];
                    if (v16 != v134 && v141 == v142)
                      break;
                    if (v141 > v142)
                      goto LABEL_270;
                  }
                }
                while (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v134 + 96) + 48));
                goto LABEL_270;
              }
            }
            else if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v121 + 96) + 48))
            {
              goto LABEL_238;
            }
            for (i = v9 + 1; i < a2; ++i)
            {
              if (!v18)
                goto LABEL_385;
              v191 = v20;
              v192 = v18;
              do
              {
                v193 = v192[4];
                v194 = v193 >= v16;
                if (v193 >= v16)
                  v195 = v192;
                else
                  v195 = v192 + 1;
                if (v194)
                  v191 = v192;
                v192 = (_QWORD *)*v195;
              }
              while (*v195);
              if (v191 == v20 || v191[4] > v16)
LABEL_385:
                v191 = v20;
              v196 = *i;
              if (!v18)
                goto LABEL_397;
              v197 = v20;
              v198 = v18;
              do
              {
                v199 = v198[4];
                v200 = v199 >= v196;
                if (v199 >= v196)
                  v201 = v198;
                else
                  v201 = v198 + 1;
                if (v200)
                  v197 = v198;
                v198 = (_QWORD *)*v201;
              }
              while (*v201);
              if (v197 == v20 || v197[4] > v196)
LABEL_397:
                v197 = v20;
              v202 = v191[5];
              v203 = v197[5];
              if (v16 != v196 && v202 == v203)
              {
                if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v196 + 96) + 48))
                  break;
              }
              else if (v202 > v203)
              {
                break;
              }
            }
LABEL_270:
            v144 = a2;
            if (i >= a2)
              goto LABEL_302;
            v145 = a2;
            if (!v18)
            {
LABEL_282:
              v146 = v20;
              goto LABEL_283;
            }
            while (1)
            {
              v146 = v20;
              v147 = v18;
              do
              {
                v148 = v147[4];
                v149 = v148 >= v16;
                if (v148 >= v16)
                  v150 = v147;
                else
                  v150 = v147 + 1;
                if (v149)
                  v146 = v147;
                v147 = (_QWORD *)*v150;
              }
              while (*v150);
              if (v146 == v20 || v146[4] > v16)
                goto LABEL_282;
LABEL_283:
              if (!v18)
                goto LABEL_294;
              v151 = v20;
              v152 = v18;
              do
              {
                v153 = v152[4];
                v154 = v153 >= v121;
                if (v153 >= v121)
                  v155 = v152;
                else
                  v155 = v152 + 1;
                if (v154)
                  v151 = v152;
                v152 = (_QWORD *)*v155;
              }
              while (*v155);
              if (v151 == v20 || v151[4] > v121)
LABEL_294:
                v151 = v20;
              v144 = v145 - 1;
              v156 = v146[5];
              v157 = v151[5];
              if (v16 != v121 && v156 == v157)
                break;
              if (v156 <= v157)
                goto LABEL_302;
LABEL_300:
              v121 = *(v145 - 2);
              --v145;
              if (!v18)
                goto LABEL_282;
            }
            if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v121 + 96) + 48))
              goto LABEL_300;
LABEL_302:
            if (i < v144)
            {
              v158 = *i;
              v159 = *v144;
              do
              {
                *i = v159;
                *v144 = v158;
                v160 = (uint64_t *)(*a3 + 8);
                v161 = *v160;
                do
                {
                  while (1)
                  {
                    v162 = i[1];
                    ++i;
                    v158 = v162;
                    if (!v161)
                      goto LABEL_316;
                    v163 = (uint64_t *)(*a3 + 8);
                    v164 = (_QWORD *)*v163;
                    do
                    {
                      v165 = v164[4];
                      v166 = v165 >= v16;
                      if (v165 >= v16)
                        v167 = v164;
                      else
                        v167 = v164 + 1;
                      if (v166)
                        v163 = v164;
                      v164 = (_QWORD *)*v167;
                    }
                    while (*v167);
                    if (v163 == v160 || v163[4] > v16)
LABEL_316:
                      v163 = (uint64_t *)(*a3 + 8);
                    if (!v161)
                      goto LABEL_328;
                    v168 = (uint64_t *)(*a3 + 8);
                    v169 = (_QWORD *)*v168;
                    do
                    {
                      v170 = v169[4];
                      v171 = v170 >= v158;
                      if (v170 >= v158)
                        v172 = v169;
                      else
                        v172 = v169 + 1;
                      if (v171)
                        v168 = v169;
                      v169 = (_QWORD *)*v172;
                    }
                    while (*v172);
                    if (v168 == v160 || v168[4] > v158)
LABEL_328:
                      v168 = (uint64_t *)(*a3 + 8);
                    v173 = v163[5];
                    v174 = v168[5];
                    if (v16 == v158 || v173 != v174)
                      break;
                    if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v158 + 96) + 48))
                      goto LABEL_338;
                  }
                }
                while (v173 <= v174);
                do
                {
                  while (1)
                  {
LABEL_338:
                    v176 = *--v144;
                    v159 = v176;
                    if (!v161)
                      goto LABEL_349;
                    v177 = (uint64_t *)(*a3 + 8);
                    v178 = (_QWORD *)*v177;
                    do
                    {
                      v179 = v178[4];
                      v180 = v179 >= v16;
                      if (v179 >= v16)
                        v181 = v178;
                      else
                        v181 = v178 + 1;
                      if (v180)
                        v177 = v178;
                      v178 = (_QWORD *)*v181;
                    }
                    while (*v181);
                    if (v177 == v160 || v177[4] > v16)
LABEL_349:
                      v177 = (uint64_t *)(*a3 + 8);
                    if (!v161)
                      goto LABEL_361;
                    v182 = (uint64_t *)(*a3 + 8);
                    v183 = (_QWORD *)*v182;
                    do
                    {
                      v184 = v183[4];
                      result = v183 + 1;
                      v185 = v184 >= v159;
                      if (v184 >= v159)
                        v186 = v183;
                      else
                        v186 = v183 + 1;
                      if (v185)
                        v182 = v183;
                      v183 = (_QWORD *)*v186;
                    }
                    while (*v186);
                    if (v182 == v160 || v182[4] > v159)
LABEL_361:
                      v182 = (uint64_t *)(*a3 + 8);
                    v187 = v177[5];
                    v188 = v182[5];
                    if (v16 == v159 || v187 != v188)
                      break;
                    if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v159 + 96) + 48))
                      goto LABEL_367;
                  }
                }
                while (v187 > v188);
LABEL_367:
                ;
              }
              while (i < v144);
            }
            v190 = i - 1;
            if (i - 1 != v9)
              *v9 = *v190;
            a5 = 0;
            *v190 = v16;
            continue;
          }
          v18 = *(_QWORD **)(v17 + 8);
LABEL_38:
          v33 = (_QWORD *)(v17 + 8);
          v34 = v9;
          do
          {
            while (1)
            {
              v35 = v34;
              v37 = v34[1];
              ++v34;
              v36 = v37;
              if (!v18)
                goto LABEL_50;
              v38 = v33;
              v39 = v18;
              do
              {
                v40 = v39[4];
                v41 = v40 >= v36;
                if (v40 >= v36)
                  v42 = v39;
                else
                  v42 = v39 + 1;
                if (v41)
                  v38 = v39;
                v39 = (_QWORD *)*v42;
              }
              while (*v42);
              if (v38 == v33 || v38[4] > v36)
LABEL_50:
                v38 = v33;
              if (!v18)
                goto LABEL_62;
              v43 = v33;
              v44 = v18;
              do
              {
                v45 = v44[4];
                v46 = v45 >= v16;
                if (v45 >= v16)
                  v47 = v44;
                else
                  v47 = v44 + 1;
                if (v46)
                  v43 = v44;
                v44 = (_QWORD *)*v47;
              }
              while (*v47);
              if (v43 == v33 || v43[4] > v16)
LABEL_62:
                v43 = v33;
              v48 = v38[5];
              v49 = v43[5];
              if (v36 != v16 && v48 == v49)
                break;
              if (v48 <= v49)
                goto LABEL_70;
            }
          }
          while (*(_QWORD *)(*(_QWORD *)(v36 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v16 + 96) + 48));
LABEL_70:
          v51 = a2;
          if (v35 == v9)
          {
            v51 = a2;
            if (v34 < a2)
            {
              v51 = a2;
              do
              {
                while (1)
                {
                  v68 = *--v51;
                  v67 = v68;
                  if (!v18)
                    goto LABEL_116;
                  v69 = v33;
                  v70 = v18;
                  do
                  {
                    v71 = v70[4];
                    v72 = v71 >= v67;
                    if (v71 >= v67)
                      v73 = v70;
                    else
                      v73 = v70 + 1;
                    if (v72)
                      v69 = v70;
                    v70 = (_QWORD *)*v73;
                  }
                  while (*v73);
                  if (v69 == v33 || v69[4] > v67)
LABEL_116:
                    v69 = v33;
                  if (!v18)
                    goto LABEL_128;
                  v74 = v33;
                  v75 = v18;
                  do
                  {
                    v76 = v75[4];
                    v77 = v76 >= v16;
                    if (v76 >= v16)
                      v78 = v75;
                    else
                      v78 = v75 + 1;
                    if (v77)
                      v74 = v75;
                    v75 = (_QWORD *)*v78;
                  }
                  while (*v78);
                  if (v74 == v33 || v74[4] > v16)
LABEL_128:
                    v74 = v33;
                  v79 = v69[5];
                  v80 = v74[5];
                  if (v67 != v16 && v79 == v80)
                    break;
                  if (v34 >= v51 || v79 > v80)
                    goto LABEL_138;
                }
              }
              while (v34 < v51
                   && *(_QWORD *)(*(_QWORD *)(v67 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v16 + 96) + 48));
            }
          }
          else
          {
            do
            {
              while (1)
              {
                v53 = *--v51;
                v52 = v53;
                if (!v18)
                  goto LABEL_82;
                v54 = v33;
                v55 = v18;
                do
                {
                  v56 = v55[4];
                  v57 = v56 >= v52;
                  if (v56 >= v52)
                    v58 = v55;
                  else
                    v58 = v55 + 1;
                  if (v57)
                    v54 = v55;
                  v55 = (_QWORD *)*v58;
                }
                while (*v58);
                if (v54 == v33 || v54[4] > v52)
LABEL_82:
                  v54 = v33;
                if (!v18)
                  goto LABEL_94;
                v59 = v33;
                v60 = v18;
                do
                {
                  v61 = v60[4];
                  v62 = v61 >= v16;
                  if (v61 >= v16)
                    v63 = v60;
                  else
                    v63 = v60 + 1;
                  if (v62)
                    v59 = v60;
                  v60 = (_QWORD *)*v63;
                }
                while (*v63);
                if (v59 == v33 || v59[4] > v16)
LABEL_94:
                  v59 = v33;
                v64 = v54[5];
                v65 = v59[5];
                if (v52 != v16 && v64 == v65)
                  break;
                if (v64 > v65)
                  goto LABEL_138;
              }
            }
            while (*(_QWORD *)(*(_QWORD *)(v52 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v16 + 96) + 48));
          }
LABEL_138:
          if (v34 < v51)
          {
            v82 = *v51;
            v83 = v34;
            v84 = v51;
            do
            {
              *v83 = v82;
              *v84 = v36;
              v85 = (uint64_t *)(*a3 + 8);
              v86 = *v85;
              do
              {
                while (1)
                {
                  v35 = v83;
                  v87 = v83[1];
                  ++v83;
                  v36 = v87;
                  if (!v86)
                    goto LABEL_152;
                  v88 = (uint64_t *)(*a3 + 8);
                  v89 = (_QWORD *)*v88;
                  do
                  {
                    v90 = v89[4];
                    v91 = v90 >= v36;
                    if (v90 >= v36)
                      v92 = v89;
                    else
                      v92 = v89 + 1;
                    if (v91)
                      v88 = v89;
                    v89 = (_QWORD *)*v92;
                  }
                  while (*v92);
                  if (v88 == v85 || v88[4] > v36)
LABEL_152:
                    v88 = (uint64_t *)(*a3 + 8);
                  if (!v86)
                    goto LABEL_164;
                  v93 = (uint64_t *)(*a3 + 8);
                  v94 = (_QWORD *)*v93;
                  do
                  {
                    v95 = v94[4];
                    v96 = v95 >= v16;
                    if (v95 >= v16)
                      v97 = v94;
                    else
                      v97 = v94 + 1;
                    if (v96)
                      v93 = v94;
                    v94 = (_QWORD *)*v97;
                  }
                  while (*v97);
                  if (v93 == v85 || v93[4] > v16)
LABEL_164:
                    v93 = (uint64_t *)(*a3 + 8);
                  v98 = v88[5];
                  v99 = v93[5];
                  if (v36 == v16 || v98 != v99)
                    break;
                  if (*(_QWORD *)(*(_QWORD *)(v36 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v16 + 96) + 48))
                    goto LABEL_174;
                }
              }
              while (v98 > v99);
              do
              {
                while (1)
                {
LABEL_174:
                  v101 = *--v84;
                  v82 = v101;
                  if (!v86)
                    goto LABEL_185;
                  v102 = (uint64_t *)(*a3 + 8);
                  v103 = (_QWORD *)*v102;
                  do
                  {
                    v104 = v103[4];
                    v105 = v104 >= v82;
                    if (v104 >= v82)
                      v106 = v103;
                    else
                      v106 = v103 + 1;
                    if (v105)
                      v102 = v103;
                    v103 = (_QWORD *)*v106;
                  }
                  while (*v106);
                  if (v102 == v85 || v102[4] > v82)
LABEL_185:
                    v102 = (uint64_t *)(*a3 + 8);
                  if (!v86)
                    goto LABEL_197;
                  v107 = (uint64_t *)(*a3 + 8);
                  v108 = (_QWORD *)*v107;
                  do
                  {
                    v109 = v108[4];
                    v110 = v109 >= v16;
                    if (v109 >= v16)
                      v111 = v108;
                    else
                      v111 = v108 + 1;
                    if (v110)
                      v107 = v108;
                    v108 = (_QWORD *)*v111;
                  }
                  while (*v111);
                  if (v107 == v85 || v107[4] > v16)
LABEL_197:
                    v107 = (uint64_t *)(*a3 + 8);
                  v112 = v102[5];
                  v113 = v107[5];
                  if (v82 == v16 || v112 != v113)
                    break;
                  if (*(_QWORD *)(*(_QWORD *)(v82 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v16 + 96) + 48))
                    goto LABEL_203;
                }
              }
              while (v112 <= v113);
LABEL_203:
              ;
            }
            while (v83 < v84);
          }
          if (v35 != v9)
            *v9 = *v35;
          *v35 = v16;
          if (v34 < v51)
            goto LABEL_209;
          v115 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(v9, v35, a3);
          i = v35 + 1;
          result = (unint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(v35 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v115)
              continue;
LABEL_209:
            result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **,false>(v9, v35, a3, a4, a5 & 1);
            a5 = 0;
            i = v35 + 1;
            continue;
          }
          a2 = v35;
          if (v115)
            return result;
          goto LABEL_2;
        }
        v220 = i + 1;
        v222 = i == a2 || v220 == a2;
        if ((a5 & 1) == 0)
        {
          if (v222)
            return result;
          v382 = *a3;
          while (1)
          {
            v383 = v9;
            v9 = v220;
            v384 = v383[1];
            v385 = (_QWORD *)(v382 + 8);
            v386 = *(_QWORD **)(v382 + 8);
            if (!v386)
              goto LABEL_768;
            v387 = (_QWORD *)(v382 + 8);
            v388 = *(_QWORD **)(v382 + 8);
            do
            {
              v389 = v388[4];
              v390 = v389 >= v384;
              if (v389 >= v384)
                v391 = v388;
              else
                v391 = v388 + 1;
              if (v390)
                v387 = v388;
              v388 = (_QWORD *)*v391;
            }
            while (*v391);
            if (v387 == v385 || v387[4] > v384)
LABEL_768:
              v387 = (_QWORD *)(v382 + 8);
            v392 = *v383;
            if (!v386)
              goto LABEL_780;
            v393 = (_QWORD *)(v382 + 8);
            do
            {
              v394 = v386[4];
              v395 = v394 >= v392;
              if (v394 >= v392)
                v396 = v386;
              else
                v396 = v386 + 1;
              if (v395)
                v393 = v386;
              v386 = (_QWORD *)*v396;
            }
            while (*v396);
            if (v393 == v385 || v393[4] > v392)
LABEL_780:
              v393 = (_QWORD *)(v382 + 8);
            v397 = v387[5];
            v398 = v393[5];
            if (v384 != v392 && v397 == v398)
            {
              if (*(_QWORD *)(*(_QWORD *)(v384 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v392 + 96) + 48))
                goto LABEL_821;
            }
            else if (v397 <= v398)
            {
              goto LABEL_821;
            }
            v400 = v9;
            do
            {
              while (1)
              {
                *v400 = v392;
                v400 = v383;
                v401 = (_QWORD *)(*a3 + 8);
                v402 = (_QWORD *)*v401;
                if (!*v401)
                  goto LABEL_800;
                v403 = (_QWORD *)(*a3 + 8);
                v404 = (_QWORD *)*v403;
                do
                {
                  v405 = v404[4];
                  v406 = v405 >= v384;
                  if (v405 >= v384)
                    v407 = v404;
                  else
                    v407 = v404 + 1;
                  if (v406)
                    v403 = v404;
                  v404 = (_QWORD *)*v407;
                }
                while (*v407);
                if (v403 == v401 || v403[4] > v384)
LABEL_800:
                  v403 = (_QWORD *)(*a3 + 8);
                v383 = v400 - 1;
                v392 = *(v400 - 1);
                if (!v402)
                  goto LABEL_812;
                v408 = *a3 + 8;
                do
                {
                  v409 = v402[4];
                  v410 = v409 >= v392;
                  if (v409 >= v392)
                    v411 = v402;
                  else
                    v411 = v402 + 1;
                  if (v410)
                    v408 = (uint64_t)v402;
                  v402 = (_QWORD *)*v411;
                }
                while (*v411);
                if ((_QWORD *)v408 == v401 || *(_QWORD *)(v408 + 32) > v392)
LABEL_812:
                  v408 = *a3 + 8;
                v412 = v403[5];
                v413 = *(_QWORD *)(v408 + 40);
                if (v384 != v392 && v412 == v413)
                  break;
                if (v412 <= v413)
                  goto LABEL_820;
              }
            }
            while (*(_QWORD *)(*(_QWORD *)(v384 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v392 + 96) + 48));
LABEL_820:
            *v400 = v384;
            v382 = *a3;
LABEL_821:
            v220 = v9 + 1;
            if (v9 + 1 == a2)
              return result;
          }
        }
        if (v222)
          return result;
        v223 = *a3;
        v224 = i;
        do
        {
          v225 = v224;
          v224 = v220;
          v226 = v225[1];
          v227 = (_QWORD *)(v223 + 8);
          v228 = *(_QWORD **)(v223 + 8);
          if (!v228)
            goto LABEL_460;
          v229 = (_QWORD *)(v223 + 8);
          v230 = *(_QWORD **)(v223 + 8);
          do
          {
            v231 = v230[4];
            v232 = v231 >= v226;
            if (v231 >= v226)
              v233 = v230;
            else
              v233 = v230 + 1;
            if (v232)
              v229 = v230;
            v230 = (_QWORD *)*v233;
          }
          while (*v233);
          if (v229 == v227 || v229[4] > v226)
LABEL_460:
            v229 = (_QWORD *)(v223 + 8);
          v234 = *v225;
          if (!v228)
            goto LABEL_472;
          v235 = (_QWORD *)(v223 + 8);
          do
          {
            v236 = v228[4];
            result = v228 + 1;
            v237 = v236 >= v234;
            if (v236 >= v234)
              v238 = v228;
            else
              v238 = v228 + 1;
            if (v237)
              v235 = v228;
            v228 = (_QWORD *)*v238;
          }
          while (*v238);
          if (v235 == v227 || v235[4] > v234)
LABEL_472:
            v235 = (_QWORD *)(v223 + 8);
          v239 = v229[5];
          v240 = v235[5];
          if (v226 != v234 && v239 == v240)
          {
            if (*(_QWORD *)(*(_QWORD *)(v226 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v234 + 96) + 48))
              goto LABEL_516;
          }
          else if (v239 <= v240)
          {
            goto LABEL_516;
          }
          v225[1] = v234;
          v242 = i;
          if (v225 == i)
            goto LABEL_515;
          while (1)
          {
            v243 = (_QWORD *)(*a3 + 8);
            v244 = (_QWORD *)*v243;
            if (!*v243)
              goto LABEL_492;
            v245 = (_QWORD *)(*a3 + 8);
            v246 = (_QWORD *)*v245;
            do
            {
              v247 = v246[4];
              v248 = v247 >= v226;
              if (v247 >= v226)
                v249 = v246;
              else
                v249 = v246 + 1;
              if (v248)
                v245 = v246;
              v246 = (_QWORD *)*v249;
            }
            while (*v249);
            if (v245 == v243 || v245[4] > v226)
LABEL_492:
              v245 = (_QWORD *)(*a3 + 8);
            v250 = v225 - 1;
            v251 = *(v225 - 1);
            if (!v244)
              goto LABEL_504;
            v252 = *a3 + 8;
            do
            {
              v253 = v244[4];
              result = v244 + 1;
              v254 = v253 >= v251;
              if (v253 >= v251)
                v255 = v244;
              else
                v255 = v244 + 1;
              if (v254)
                v252 = (uint64_t)v244;
              v244 = (_QWORD *)*v255;
            }
            while (*v255);
            if ((_QWORD *)v252 == v243 || *(_QWORD *)(v252 + 32) > v251)
LABEL_504:
              v252 = *a3 + 8;
            v256 = v245[5];
            v257 = *(_QWORD *)(v252 + 40);
            if (v226 != v251 && v256 == v257)
              break;
            if (v256 <= v257)
              goto LABEL_514;
LABEL_512:
            *v225-- = v251;
            if (v250 == i)
            {
              v242 = i;
              goto LABEL_515;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v226 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v251 + 96) + 48))
            goto LABEL_512;
LABEL_514:
          v242 = v225;
LABEL_515:
          *v242 = v226;
          v223 = *a3;
LABEL_516:
          v220 = v224 + 1;
        }
        while (v224 + 1 != a2);
        return result;
    }
  }
}

unint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t *result;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  BOOL v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  BOOL v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = (_QWORD *)(*a6 + 8);
  v15 = (_QWORD *)*v14;
  if (!*v14)
    goto LABEL_12;
  v16 = (_QWORD *)(*a6 + 8);
  v17 = (_QWORD *)*v16;
  do
  {
    v18 = v17[4];
    v19 = v18 >= v13;
    if (v18 >= v13)
      v20 = v17;
    else
      v20 = v17 + 1;
    if (v19)
      v16 = v17;
    v17 = (_QWORD *)*v20;
  }
  while (*v20);
  if (v16 == v14 || v16[4] > v13)
LABEL_12:
    v16 = (_QWORD *)(*a6 + 8);
  v21 = *a4;
  if (!v15)
    goto LABEL_24;
  v22 = *a6 + 8;
  do
  {
    v23 = v15[4];
    v24 = v23 >= v21;
    if (v23 >= v21)
      v25 = v15;
    else
      v25 = v15 + 1;
    if (v24)
      v22 = (uint64_t)v15;
    v15 = (_QWORD *)*v25;
  }
  while (*v25);
  if ((_QWORD *)v22 == v14 || *(_QWORD *)(v22 + 32) > v21)
LABEL_24:
    v22 = *a6 + 8;
  v26 = v16[5];
  v27 = *(_QWORD *)(v22 + 40);
  if (v13 == v21 || v26 != v27)
  {
    if (v26 <= v27)
      return result;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v21 + 96) + 48))
  {
    return result;
  }
  *a4 = v13;
  *a5 = v21;
  v28 = *a4;
  v29 = (_QWORD *)(*a6 + 8);
  v30 = (_QWORD *)*v29;
  if (!*v29)
    goto LABEL_41;
  v31 = (_QWORD *)(*a6 + 8);
  v32 = (_QWORD *)*v31;
  do
  {
    v33 = v32[4];
    v34 = v33 >= v28;
    if (v33 >= v28)
      v35 = v32;
    else
      v35 = v32 + 1;
    if (v34)
      v31 = v32;
    v32 = (_QWORD *)*v35;
  }
  while (*v35);
  if (v31 == v29 || v31[4] > v28)
LABEL_41:
    v31 = (_QWORD *)(*a6 + 8);
  v36 = *a3;
  if (!v30)
    goto LABEL_53;
  v37 = *a6 + 8;
  do
  {
    v38 = v30[4];
    v39 = v38 >= v36;
    if (v38 >= v36)
      v40 = v30;
    else
      v40 = v30 + 1;
    if (v39)
      v37 = (uint64_t)v30;
    v30 = (_QWORD *)*v40;
  }
  while (*v40);
  if ((_QWORD *)v37 == v29 || *(_QWORD *)(v37 + 32) > v36)
LABEL_53:
    v37 = *a6 + 8;
  v41 = v31[5];
  v42 = *(_QWORD *)(v37 + 40);
  if (v28 == v36 || v41 != v42)
  {
    if (v41 <= v42)
      return result;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v28 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v36 + 96) + 48))
  {
    return result;
  }
  *a3 = v28;
  *a4 = v36;
  v43 = *a3;
  v44 = (_QWORD *)(*a6 + 8);
  v45 = (_QWORD *)*v44;
  if (!*v44)
    goto LABEL_70;
  v46 = (_QWORD *)(*a6 + 8);
  v47 = (_QWORD *)*v46;
  do
  {
    v48 = v47[4];
    v49 = v48 >= v43;
    if (v48 >= v43)
      v50 = v47;
    else
      v50 = v47 + 1;
    if (v49)
      v46 = v47;
    v47 = (_QWORD *)*v50;
  }
  while (*v50);
  if (v46 == v44 || v46[4] > v43)
LABEL_70:
    v46 = (_QWORD *)(*a6 + 8);
  v51 = *a2;
  if (!v45)
    goto LABEL_82;
  v52 = *a6 + 8;
  do
  {
    v53 = v45[4];
    v54 = v53 >= v51;
    if (v53 >= v51)
      v55 = v45;
    else
      v55 = v45 + 1;
    if (v54)
      v52 = (uint64_t)v45;
    v45 = (_QWORD *)*v55;
  }
  while (*v55);
  if ((_QWORD *)v52 == v44 || *(_QWORD *)(v52 + 32) > v51)
LABEL_82:
    v52 = *a6 + 8;
  v56 = v46[5];
  v57 = *(_QWORD *)(v52 + 40);
  if (v43 == v51 || v56 != v57)
  {
    if (v56 <= v57)
      return result;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v43 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v51 + 96) + 48))
  {
    return result;
  }
  *a2 = v43;
  *a3 = v51;
  v58 = *a2;
  v59 = (_QWORD *)(*a6 + 8);
  v60 = (_QWORD *)*v59;
  if (!*v59)
    goto LABEL_99;
  v61 = (_QWORD *)(*a6 + 8);
  v62 = (_QWORD *)*v61;
  do
  {
    v63 = v62[4];
    v64 = v63 >= v58;
    if (v63 >= v58)
      v65 = v62;
    else
      v65 = v62 + 1;
    if (v64)
      v61 = v62;
    v62 = (_QWORD *)*v65;
  }
  while (*v65);
  if (v61 == v59 || v61[4] > v58)
LABEL_99:
    v61 = (_QWORD *)(*a6 + 8);
  v66 = *a1;
  if (!v60)
    goto LABEL_111;
  v67 = *a6 + 8;
  do
  {
    v68 = v60[4];
    v69 = v68 >= v66;
    if (v68 >= v66)
      v70 = v60;
    else
      v70 = v60 + 1;
    if (v69)
      v67 = (uint64_t)v60;
    v60 = (_QWORD *)*v70;
  }
  while (*v70);
  if ((_QWORD *)v67 == v59 || *(_QWORD *)(v67 + 32) > v66)
LABEL_111:
    v67 = *a6 + 8;
  v71 = v61[5];
  v72 = *(_QWORD *)(v67 + 40);
  if (v58 == v66 || v71 != v72)
  {
    if (v71 <= v72)
      return result;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v58 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v66 + 96) + 48))
  {
    return result;
  }
  *a1 = v58;
  *a2 = v66;
  return result;
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(unint64_t *result, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  BOOL v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  BOOL v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;

  v4 = *a2;
  v5 = (_QWORD *)(*a4 + 8);
  v6 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_12;
  v7 = (_QWORD *)(*a4 + 8);
  v8 = (_QWORD *)*v7;
  do
  {
    v9 = v8[4];
    v10 = v9 >= v4;
    if (v9 >= v4)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v10)
      v7 = v8;
    v8 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 == v5 || v7[4] > v4)
LABEL_12:
    v7 = (_QWORD *)(*a4 + 8);
  v12 = *result;
  if (!v6)
    goto LABEL_24;
  v13 = (_QWORD *)(*a4 + 8);
  v14 = (_QWORD *)*v13;
  do
  {
    v15 = v14[4];
    v16 = v15 >= v12;
    if (v15 >= v12)
      v17 = v14;
    else
      v17 = v14 + 1;
    if (v16)
      v13 = v14;
    v14 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v13 == v5 || v13[4] > v12)
LABEL_24:
    v13 = (_QWORD *)(*a4 + 8);
  v18 = v7[5];
  v19 = v13[5];
  if (v4 == v12 || v18 != v19)
  {
    if (v18 <= v19)
      goto LABEL_30;
LABEL_59:
    v33 = *a3;
    if (!v6)
      goto LABEL_70;
    v34 = (_QWORD *)(*a4 + 8);
    v35 = (_QWORD *)*v34;
    do
    {
      v36 = v35[4];
      v37 = v36 >= v33;
      if (v36 >= v33)
        v38 = v35;
      else
        v38 = v35 + 1;
      if (v37)
        v34 = v35;
      v35 = (_QWORD *)*v38;
    }
    while (*v38);
    if (v34 == v5 || v34[4] > v33)
LABEL_70:
      v34 = (_QWORD *)(*a4 + 8);
    if (!v6)
      goto LABEL_82;
    v39 = *a4 + 8;
    do
    {
      v40 = v6[4];
      v41 = v40 >= v4;
      if (v40 >= v4)
        v42 = v6;
      else
        v42 = v6 + 1;
      if (v41)
        v39 = (uint64_t)v6;
      v6 = (_QWORD *)*v42;
    }
    while (*v42);
    if ((_QWORD *)v39 == v5 || *(_QWORD *)(v39 + 32) > v4)
LABEL_82:
      v39 = *a4 + 8;
    v43 = v34[5];
    v44 = *(_QWORD *)(v39 + 40);
    if (v33 == v4 || v43 != v44)
    {
      if (v43 > v44)
        goto LABEL_86;
    }
    else if (*(_QWORD *)(*(_QWORD *)(v33 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v4 + 96) + 48))
    {
LABEL_86:
      *result = v33;
      goto LABEL_149;
    }
    *result = v4;
    *a2 = v12;
    v60 = *a3;
    v61 = (_QWORD *)(*a4 + 8);
    v62 = (_QWORD *)*v61;
    if (!*v61)
      goto LABEL_128;
    v63 = (_QWORD *)(*a4 + 8);
    v64 = (_QWORD *)*v63;
    do
    {
      v65 = v64[4];
      v66 = v65 >= v60;
      if (v65 >= v60)
        v67 = v64;
      else
        v67 = v64 + 1;
      if (v66)
        v63 = v64;
      v64 = (_QWORD *)*v67;
    }
    while (*v67);
    if (v63 == v61 || v63[4] > v60)
LABEL_128:
      v63 = (_QWORD *)(*a4 + 8);
    if (!v62)
      goto LABEL_140;
    v68 = *a4 + 8;
    do
    {
      v69 = v62[4];
      v70 = v69 >= v12;
      if (v69 >= v12)
        v71 = v62;
      else
        v71 = v62 + 1;
      if (v70)
        v68 = (uint64_t)v62;
      v62 = (_QWORD *)*v71;
    }
    while (*v71);
    if ((_QWORD *)v68 == v61 || *(_QWORD *)(v68 + 32) > v12)
LABEL_140:
      v68 = *a4 + 8;
    v72 = v63[5];
    v73 = *(_QWORD *)(v68 + 40);
    if (v60 == v12 || v72 != v73)
    {
      if (v72 <= v73)
        return result;
    }
    else if (*(_QWORD *)(*(_QWORD *)(v60 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v12 + 96) + 48))
    {
      return result;
    }
    *a2 = v60;
LABEL_149:
    *a3 = v12;
    return result;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v12 + 96) + 48))
    goto LABEL_59;
LABEL_30:
  v21 = *a3;
  if (!v6)
    goto LABEL_41;
  v22 = (_QWORD *)(*a4 + 8);
  v23 = (_QWORD *)*v22;
  do
  {
    v24 = v23[4];
    v25 = v24 >= v21;
    if (v24 >= v21)
      v26 = v23;
    else
      v26 = v23 + 1;
    if (v25)
      v22 = v23;
    v23 = (_QWORD *)*v26;
  }
  while (*v26);
  if (v22 == v5 || v22[4] > v21)
LABEL_41:
    v22 = (_QWORD *)(*a4 + 8);
  if (!v6)
    goto LABEL_53;
  v27 = *a4 + 8;
  do
  {
    v28 = v6[4];
    v29 = v28 >= v4;
    if (v28 >= v4)
      v30 = v6;
    else
      v30 = v6 + 1;
    if (v29)
      v27 = (uint64_t)v6;
    v6 = (_QWORD *)*v30;
  }
  while (*v30);
  if ((_QWORD *)v27 == v5 || *(_QWORD *)(v27 + 32) > v4)
LABEL_53:
    v27 = *a4 + 8;
  v31 = v22[5];
  v32 = *(_QWORD *)(v27 + 40);
  if (v21 == v4 || v31 != v32)
  {
    if (v31 <= v32)
      return result;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v21 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v4 + 96) + 48))
  {
    return result;
  }
  *a2 = v21;
  *a3 = v4;
  v45 = *a2;
  v46 = (_QWORD *)(*a4 + 8);
  v47 = (_QWORD *)*v46;
  if (!*v46)
    goto LABEL_99;
  v48 = (_QWORD *)(*a4 + 8);
  v49 = (_QWORD *)*v48;
  do
  {
    v50 = v49[4];
    v51 = v50 >= v45;
    if (v50 >= v45)
      v52 = v49;
    else
      v52 = v49 + 1;
    if (v51)
      v48 = v49;
    v49 = (_QWORD *)*v52;
  }
  while (*v52);
  if (v48 == v46 || v48[4] > v45)
LABEL_99:
    v48 = (_QWORD *)(*a4 + 8);
  v53 = *result;
  if (!v47)
    goto LABEL_111;
  v54 = *a4 + 8;
  do
  {
    v55 = v47[4];
    v56 = v55 >= v53;
    if (v55 >= v53)
      v57 = v47;
    else
      v57 = v47 + 1;
    if (v56)
      v54 = (uint64_t)v47;
    v47 = (_QWORD *)*v57;
  }
  while (*v57);
  if ((_QWORD *)v54 == v46 || *(_QWORD *)(v54 + 32) > v53)
LABEL_111:
    v54 = *a4 + 8;
  v58 = v48[5];
  v59 = *(_QWORD *)(v54 + 40);
  if (v45 == v53 || v58 != v59)
  {
    if (v58 > v59)
    {
LABEL_146:
      *result = v45;
      *a2 = v53;
    }
  }
  else if (*(_QWORD *)(*(_QWORD *)(v45 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v53 + 96) + 48))
  {
    goto LABEL_146;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  BOOL v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = (_QWORD *)(*a3 + 8);
      v10 = (_QWORD *)*v9;
      if (!*v9)
        goto LABEL_13;
      v11 = (_QWORD *)(*a3 + 8);
      v12 = (_QWORD *)*v11;
      do
      {
        v13 = v12[4];
        v14 = v13 >= v8;
        if (v13 >= v8)
          v15 = v12;
        else
          v15 = v12 + 1;
        if (v14)
          v11 = v12;
        v12 = (_QWORD *)*v15;
      }
      while (*v15);
      if (v11 == v9 || v11[4] > v8)
LABEL_13:
        v11 = (_QWORD *)(*a3 + 8);
      v16 = *a1;
      if (!v10)
        goto LABEL_25;
      v17 = *a3 + 8;
      do
      {
        v18 = v10[4];
        v19 = v18 >= v16;
        if (v18 >= v16)
          v20 = v10;
        else
          v20 = v10 + 1;
        if (v19)
          v17 = (uint64_t)v10;
        v10 = (_QWORD *)*v20;
      }
      while (*v20);
      if ((_QWORD *)v17 == v9 || *(_QWORD *)(v17 + 32) > v16)
LABEL_25:
        v17 = *a3 + 8;
      v21 = v11[5];
      v22 = *(_QWORD *)(v17 + 40);
      if (v8 == v16 || v21 != v22)
      {
        if (v21 <= v22)
          return 1;
      }
      else if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v16 + 96) + 48))
      {
        return 1;
      }
      *a1 = v8;
      *(a2 - 1) = v16;
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v23 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(a1, a1 + 1, a1 + 2, a3);
      v24 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v25 = 0;
      break;
  }
  while (2)
  {
    v26 = *v24;
    v27 = (_QWORD *)(*a3 + 8);
    v28 = (_QWORD *)*v27;
    if (!*v27)
      goto LABEL_43;
    v29 = (_QWORD *)(*a3 + 8);
    v30 = (_QWORD *)*v29;
    do
    {
      v31 = v30[4];
      v32 = v31 >= v26;
      if (v31 >= v26)
        v33 = v30;
      else
        v33 = v30 + 1;
      if (v32)
        v29 = v30;
      v30 = (_QWORD *)*v33;
    }
    while (*v33);
    if (v29 == v27 || v29[4] > v26)
LABEL_43:
      v29 = (_QWORD *)(*a3 + 8);
    v34 = *v23;
    if (!v28)
      goto LABEL_55;
    v35 = *a3 + 8;
    do
    {
      v36 = v28[4];
      v37 = v36 >= v34;
      if (v36 >= v34)
        v38 = v28;
      else
        v38 = v28 + 1;
      if (v37)
        v35 = (uint64_t)v28;
      v28 = (_QWORD *)*v38;
    }
    while (*v38);
    if ((_QWORD *)v35 == v27 || *(_QWORD *)(v35 + 32) > v34)
LABEL_55:
      v35 = *a3 + 8;
    v39 = v29[5];
    v40 = *(_QWORD *)(v35 + 40);
    if (v26 != v34 && v39 == v40)
    {
      if (*(_QWORD *)(*(_QWORD *)(v26 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v34 + 96) + 48))
        goto LABEL_99;
    }
    else if (v39 <= v40)
    {
      goto LABEL_99;
    }
    *v24 = v34;
    v42 = a1;
    if (v23 == a1)
      goto LABEL_98;
    while (1)
    {
      v43 = (_QWORD *)(*a3 + 8);
      v44 = (_QWORD *)*v43;
      if (!*v43)
        goto LABEL_75;
      v45 = (_QWORD *)(*a3 + 8);
      v46 = (_QWORD *)*v45;
      do
      {
        v47 = v46[4];
        v48 = v47 >= v26;
        if (v47 >= v26)
          v49 = v46;
        else
          v49 = v46 + 1;
        if (v48)
          v45 = v46;
        v46 = (_QWORD *)*v49;
      }
      while (*v49);
      if (v45 == v43 || v45[4] > v26)
LABEL_75:
        v45 = (_QWORD *)(*a3 + 8);
      v50 = v23 - 1;
      v51 = *(v23 - 1);
      if (!v44)
        goto LABEL_87;
      v52 = *a3 + 8;
      do
      {
        v53 = v44[4];
        v54 = v53 >= v51;
        if (v53 >= v51)
          v55 = v44;
        else
          v55 = v44 + 1;
        if (v54)
          v52 = (uint64_t)v44;
        v44 = (_QWORD *)*v55;
      }
      while (*v55);
      if ((_QWORD *)v52 == v43 || *(_QWORD *)(v52 + 32) > v51)
LABEL_87:
        v52 = *a3 + 8;
      v56 = v45[5];
      v57 = *(_QWORD *)(v52 + 40);
      if (v26 != v51 && v56 == v57)
        break;
      if (v56 <= v57)
        goto LABEL_97;
LABEL_95:
      *v23-- = v51;
      if (v50 == a1)
      {
        v42 = a1;
        goto LABEL_98;
      }
    }
    if (*(_QWORD *)(*(_QWORD *)(v26 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v51 + 96) + 48))
      goto LABEL_95;
LABEL_97:
    v42 = v23;
LABEL_98:
    *v42 = v26;
    if (++v25 != 8)
    {
LABEL_99:
      v23 = v24++;
      if (v24 == a2)
        return 1;
      continue;
    }
    return v24 + 1 == a2;
  }
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  unint64_t *result;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  BOOL v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinCpBasedAllocator::GetSortedBoundaryTensors(void)::$_0 &,ZinIrTensor **>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = (_QWORD *)(*a5 + 8);
  v13 = (_QWORD *)*v12;
  if (!*v12)
    goto LABEL_12;
  v14 = (_QWORD *)(*a5 + 8);
  v15 = (_QWORD *)*v14;
  do
  {
    v16 = v15[4];
    v17 = v16 >= v11;
    if (v16 >= v11)
      v18 = v15;
    else
      v18 = v15 + 1;
    if (v17)
      v14 = v15;
    v15 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v14 == v12 || v14[4] > v11)
LABEL_12:
    v14 = (_QWORD *)(*a5 + 8);
  v19 = *a3;
  if (!v13)
    goto LABEL_24;
  v20 = *a5 + 8;
  do
  {
    v21 = v13[4];
    v22 = v21 >= v19;
    if (v21 >= v19)
      v23 = v13;
    else
      v23 = v13 + 1;
    if (v22)
      v20 = (uint64_t)v13;
    v13 = (_QWORD *)*v23;
  }
  while (*v23);
  if ((_QWORD *)v20 == v12 || *(_QWORD *)(v20 + 32) > v19)
LABEL_24:
    v20 = *a5 + 8;
  v24 = v14[5];
  v25 = *(_QWORD *)(v20 + 40);
  if (v11 == v19 || v24 != v25)
  {
    if (v24 <= v25)
      return result;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v19 + 96) + 48))
  {
    return result;
  }
  *a3 = v11;
  *a4 = v19;
  v26 = *a3;
  v27 = (_QWORD *)(*a5 + 8);
  v28 = (_QWORD *)*v27;
  if (!*v27)
    goto LABEL_41;
  v29 = (_QWORD *)(*a5 + 8);
  v30 = (_QWORD *)*v29;
  do
  {
    v31 = v30[4];
    v32 = v31 >= v26;
    if (v31 >= v26)
      v33 = v30;
    else
      v33 = v30 + 1;
    if (v32)
      v29 = v30;
    v30 = (_QWORD *)*v33;
  }
  while (*v33);
  if (v29 == v27 || v29[4] > v26)
LABEL_41:
    v29 = (_QWORD *)(*a5 + 8);
  v34 = *a2;
  if (!v28)
    goto LABEL_53;
  v35 = *a5 + 8;
  do
  {
    v36 = v28[4];
    v37 = v36 >= v34;
    if (v36 >= v34)
      v38 = v28;
    else
      v38 = v28 + 1;
    if (v37)
      v35 = (uint64_t)v28;
    v28 = (_QWORD *)*v38;
  }
  while (*v38);
  if ((_QWORD *)v35 == v27 || *(_QWORD *)(v35 + 32) > v34)
LABEL_53:
    v35 = *a5 + 8;
  v39 = v29[5];
  v40 = *(_QWORD *)(v35 + 40);
  if (v26 == v34 || v39 != v40)
  {
    if (v39 <= v40)
      return result;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v26 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v34 + 96) + 48))
  {
    return result;
  }
  *a2 = v26;
  *a3 = v34;
  v41 = *a2;
  v42 = (_QWORD *)(*a5 + 8);
  v43 = (_QWORD *)*v42;
  if (!*v42)
    goto LABEL_70;
  v44 = (_QWORD *)(*a5 + 8);
  v45 = (_QWORD *)*v44;
  do
  {
    v46 = v45[4];
    v47 = v46 >= v41;
    if (v46 >= v41)
      v48 = v45;
    else
      v48 = v45 + 1;
    if (v47)
      v44 = v45;
    v45 = (_QWORD *)*v48;
  }
  while (*v48);
  if (v44 == v42 || v44[4] > v41)
LABEL_70:
    v44 = (_QWORD *)(*a5 + 8);
  v49 = *a1;
  if (!v43)
    goto LABEL_82;
  v50 = *a5 + 8;
  do
  {
    v51 = v43[4];
    v52 = v51 >= v49;
    if (v51 >= v49)
      v53 = v43;
    else
      v53 = v43 + 1;
    if (v52)
      v50 = (uint64_t)v43;
    v43 = (_QWORD *)*v53;
  }
  while (*v53);
  if ((_QWORD *)v50 == v42 || *(_QWORD *)(v50 + 32) > v49)
LABEL_82:
    v50 = *a5 + 8;
  v54 = v44[5];
  v55 = *(_QWORD *)(v50 + 40);
  if (v41 == v49 || v54 != v55)
  {
    if (v54 <= v55)
      return result;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v41 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v49 + 96) + 48))
  {
    return result;
  }
  *a1 = v41;
  *a2 = v49;
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<L2CycleEstimator>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<L2CycleEstimator>::reset[abi:ne180100]((void ***)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__deallocate_node(a1, *(LayerCycleAndFootprintEstimator ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__deallocate_node(uint64_t a1, LayerCycleAndFootprintEstimator **a2)
{
  LayerCycleAndFootprintEstimator **v2;
  LayerCycleAndFootprintEstimator *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<LayerCycleAndFootprintEstimator>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (LayerCycleAndFootprintEstimator **)v3;
    }
    while (v3);
  }
}

void std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::~__async_assoc_state(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C005BC0;
  v2 = (void **)(a1 + 200);
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

uint64_t std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::~__async_assoc_state(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C005BC0;
  v3 = (void **)(a1 + 200);
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  return MEMORY[0x20BD002F8]();
}

uint64_t std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::__on_zero_shared(uint64_t a1)
{
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)a1);
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::__execute(uint64_t a1)
{
  _BYTE v3[48];

  ZinCpBasedAllocator::Execute(void)::$_0::operator()(*(_QWORD *)(a1 + 224), (const CpAllocGraph *)(a1 + 192), *(_QWORD *)(a1 + 232), *(unsigned __int8 *)(a1 + 240), (uint64_t)v3);
  std::__assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult>::set_value<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult>(a1, (uint64_t)v3);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v3);
}

void sub_207045C64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11)
{
  std::__assoc_sub_state *v11;
  std::exception_ptr v13;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  __cxa_begin_catch(a1);
  std::current_exception();
  v13.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v11, v13);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x207045C54);
}

void sub_207045CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult>::set_value<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult>(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  int v6;
  std::exception_ptr v7;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 144, (uint64_t *)a2);
  v6 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 184) = v6;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_207045D60(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x20BCFFE84](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB6E0], MEMORY[0x24BEDAD80]);
}

void sub_207045DBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::*)(void),std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  const void **v7;

  v7 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v7;
  *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (void (*)(_QWORD *))v7[1];
  v4 = (uint64_t)v7[2];
  v5 = (char *)v7[3] + (v4 >> 1);
  if ((v4 & 1) != 0)
    v3 = *(void (**)(_QWORD *))(*v5 + v3);
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::*)(void),std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>*>>::~unique_ptr[abi:ne180100]((uint64_t **)&v7);
  return 0;
}

void sub_207045E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::*)(void),std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>*>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>::*)(void),std::__async_assoc_state<ZinCpBasedAllocator::Execute(void)::CpRegionAllocationResult,std::__async_func<ZinCpBasedAllocator::Execute(void)::$_0,std::vector<std::vector<ZinANELayer const*>>,unsigned long,unsigned long,BOOL>>*>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x20BD002F8](v2, 0xA0C40F20CD8FBLL);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x20BCFFFEC]();
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  v4 = (unint64_t *)(a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_207045F34(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<ZinANELayer const*>>::__init_with_size[abi:ne180100]<std::vector<ZinANELayer const*>*,std::vector<ZinANELayer const*>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer const*>>,std::vector<ZinANELayer const*>*,std::vector<ZinANELayer const*>*,std::vector<ZinANELayer const*>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_207045FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer const*>>,std::vector<ZinANELayer const*>*,std::vector<ZinANELayer const*>*,std::vector<ZinANELayer const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer const*>>,std::vector<ZinANELayer const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_207046068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer const*>>,std::vector<ZinANELayer const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer const*>>,std::vector<ZinANELayer const*>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrOpLayer *>>,std::vector<ZinIrOpLayer *>*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const*&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_207046314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  LayerCycleAndFootprintEstimator **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinANELayer const*,std::unique_ptr<LayerCycleAndFootprintEstimator>>,void *>>>::operator()[abi:ne180100](uint64_t a1, LayerCycleAndFootprintEstimator **__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::unique_ptr<LayerCycleAndFootprintEstimator>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

void std::__function::__func<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_24C0012F0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C0012F0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

BOOL std::__function::__func<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  ZinCpBasedAllocator *v3;
  const ZinPerfDescriptor *v4;
  const ZinPerfDescriptor *v5;
  unint64_t NPL2DepCircularBufferMemoryFootprint;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(ZinCpBasedAllocator **)(a1 + 8);
  if (ZinCpBasedAllocator::GetNPL2DepPerfDescriptor(v3, **(const ZinNELayer ***)(a1 + 16), **(const ZinPELayer ***)(a1 + 24), **(unsigned __int8 **)(a1 + 32), **(_BYTE **)(a1 + 40), **(_BYTE **)(a1 + 48), *a2, *(ZinPerfDescriptor **)(a1 + 56), *(ZinPerfDescriptor **)(a1 + 64)))ZinAssertImpl("Perf descriptor must be valid");
  NPL2DepCircularBufferMemoryFootprint = ZinCpBasedAllocator::GetNPL2DepCircularBufferMemoryFootprint(v3, **(const ZinNELayer ***)(a1 + 16), **(const ZinPELayer ***)(a1 + 24), v4, v5);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 264);
  memcpy((void *)(v8 + 120), (const void *)v7, 0x1C4uLL);
  if (v8 + 120 == v7)
  {
    *(_DWORD *)(v8 + 616) = *(_DWORD *)(v7 + 496);
    *(_DWORD *)(v8 + 664) = *(_DWORD *)(v7 + 544);
  }
  else
  {
    *(_DWORD *)(v8 + 608) = *(_DWORD *)(v7 + 488);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 576), *(uint64_t **)(v7 + 472), 0);
    *(_DWORD *)(v8 + 616) = *(_DWORD *)(v7 + 496);
    *(_DWORD *)(v8 + 656) = *(_DWORD *)(v7 + 536);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 624), *(uint64_t **)(v7 + 520), 0);
    *(_DWORD *)(v8 + 664) = *(_DWORD *)(v7 + 544);
    *(_DWORD *)(v8 + 704) = *(_DWORD *)(v7 + 584);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 672), *(uint64_t **)(v7 + 568), 0);
  }
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 264);
  memcpy((void *)(v10 + 120), (const void *)v9, 0x1C4uLL);
  if (v10 + 120 == v9)
  {
    *(_DWORD *)(v10 + 616) = *(_DWORD *)(v9 + 496);
    *(_DWORD *)(v10 + 664) = *(_DWORD *)(v9 + 544);
  }
  else
  {
    *(_DWORD *)(v10 + 608) = *(_DWORD *)(v9 + 488);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v10 + 576), *(uint64_t **)(v9 + 472), 0);
    *(_DWORD *)(v10 + 616) = *(_DWORD *)(v9 + 496);
    *(_DWORD *)(v10 + 656) = *(_DWORD *)(v9 + 536);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v10 + 624), *(uint64_t **)(v9 + 520), 0);
    *(_DWORD *)(v10 + 664) = *(_DWORD *)(v9 + 544);
    *(_DWORD *)(v10 + 704) = *(_DWORD *)(v9 + 584);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v10 + 672), *(uint64_t **)(v9 + 568), 0);
  }
  return NPL2DepCircularBufferMemoryFootprint <= *(_QWORD *)(*((_QWORD *)v3 + 42) + 408);
}

uint64_t std::__function::__func<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetNPL2DepExecutionBehavior(ZinNELayer const*,ZinPELayer const*,BOOL,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::target_type()
{
}

void std::__function::__func<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24C001348;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C001348;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

BOOL std::__function::__func<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  ZinCpBasedAllocator *v3;
  const ZinPerfDescriptor *v4;
  const ZinPerfDescriptor *v5;
  unint64_t PNL2DepCircularBufferMemoryFootprint;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(ZinCpBasedAllocator **)(a1 + 8);
  if (ZinCpBasedAllocator::GetPNL2DepPerfDescriptor(v3, **(const ZinPELayer ***)(a1 + 16), **(const ZinNELayer ***)(a1 + 24), **(_BYTE **)(a1 + 32), **(unsigned __int8 **)(a1 + 40), *a2, *(ZinPerfDescriptor **)(a1 + 48), *(ZinPerfDescriptor **)(a1 + 56)))ZinAssertImpl("Perf descriptor must be valid");
  PNL2DepCircularBufferMemoryFootprint = ZinCpBasedAllocator::GetPNL2DepCircularBufferMemoryFootprint(v3, **(uint64_t ****)(a1 + 16), **(uint64_t ****)(a1 + 24), v4, v5);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 264);
  memcpy((void *)(v8 + 120), (const void *)v7, 0x1C4uLL);
  if (v8 + 120 == v7)
  {
    *(_DWORD *)(v8 + 616) = *(_DWORD *)(v7 + 496);
    *(_DWORD *)(v8 + 664) = *(_DWORD *)(v7 + 544);
  }
  else
  {
    *(_DWORD *)(v8 + 608) = *(_DWORD *)(v7 + 488);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 576), *(uint64_t **)(v7 + 472), 0);
    *(_DWORD *)(v8 + 616) = *(_DWORD *)(v7 + 496);
    *(_DWORD *)(v8 + 656) = *(_DWORD *)(v7 + 536);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 624), *(uint64_t **)(v7 + 520), 0);
    *(_DWORD *)(v8 + 664) = *(_DWORD *)(v7 + 544);
    *(_DWORD *)(v8 + 704) = *(_DWORD *)(v7 + 584);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 672), *(uint64_t **)(v7 + 568), 0);
  }
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 264);
  memcpy((void *)(v10 + 120), (const void *)v9, 0x1C4uLL);
  if (v10 + 120 == v9)
  {
    *(_DWORD *)(v10 + 616) = *(_DWORD *)(v9 + 496);
    *(_DWORD *)(v10 + 664) = *(_DWORD *)(v9 + 544);
  }
  else
  {
    *(_DWORD *)(v10 + 608) = *(_DWORD *)(v9 + 488);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v10 + 576), *(uint64_t **)(v9 + 472), 0);
    *(_DWORD *)(v10 + 616) = *(_DWORD *)(v9 + 496);
    *(_DWORD *)(v10 + 656) = *(_DWORD *)(v9 + 536);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v10 + 624), *(uint64_t **)(v9 + 520), 0);
    *(_DWORD *)(v10 + 664) = *(_DWORD *)(v9 + 544);
    *(_DWORD *)(v10 + 704) = *(_DWORD *)(v9 + 584);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v10 + 672), *(uint64_t **)(v9 + 568), 0);
  }
  return PNL2DepCircularBufferMemoryFootprint <= *(_QWORD *)(*((_QWORD *)v3 + 42) + 408);
}

uint64_t std::__function::__func<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0,std::allocator<ZinCpBasedAllocator::SetPNL2DepExecutionBehavior(ZinPELayer const*,ZinNELayer const*,BOOL,BOOL)::$_0>,BOOL ()(unsigned long)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<ZinIrTensor *,unsigned long>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,unsigned long>,std::less<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,unsigned long>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor *,unsigned long>>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

LayerCycleAndFootprintEstimator *std::unique_ptr<LayerCycleAndFootprintEstimator>::reset[abi:ne180100](LayerCycleAndFootprintEstimator **a1, LayerCycleAndFootprintEstimator *a2)
{
  LayerCycleAndFootprintEstimator *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    LayerCycleAndFootprintEstimator::~LayerCycleAndFootprintEstimator(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

void ZinCpBasedAllocator::PromoteChainToL2Dependent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "It must be chainable tensor. %s:%d\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCpBasedAllocator::VerifyAllocationDecision(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  _QWORD *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(char *)(*(_QWORD *)a1 + 47) < 0)
    v1 = (_QWORD *)*v1;
  v2 = 136315650;
  v3 = v1;
  v4 = 2080;
  v5 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinIrSchedule/src/ZinCpBasedAllocator.cpp";
  v6 = 1024;
  v7 = 2062;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Missing allocation decision in %s (file %s, line %d)\n", (uint8_t *)&v2, 0x1Cu);
}

void ZinCpBasedAllocator::CalculatePerf()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Perf model isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCpBasedAllocator::CollectNEPerfNumbers()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCpBasedAllocator::SetNPChainExecutionBehavior()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Perf model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Perf model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCpBasedAllocator::SetPNChainExecutionBehavior()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Perf model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Perf model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCpBasedAllocator::CalculatesL2BudgetPerRegion()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_debug_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "[CPAllocator] No available L2-budget for a given region.\n", v0, 2u);
}

__CFDictionary *ZinCreateBatchToSpaceUnit(const ZinIrBatchToSpaceUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = 35;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

_QWORD *ZinBarIdManager::ZinBarIdManager(_QWORD *a1, unsigned int a2, int a3)
{
  _QWORD *result;
  int v5;
  unsigned __int8 v6;

  v6 = 0;
  result = std::vector<BOOL>::vector(a1, a2, &v6);
  if (a3 == 1)
    v5 = 2;
  else
    v5 = 1;
  *((_DWORD *)result + 6) = v5;
  return result;
}

uint64_t ZinBarIdManager::GetNextAvailableBarId(ZinBarIdManager *this)
{
  unint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  int v7;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = 0;
    v3 = *((_DWORD *)this + 6);
    while (1)
    {
      v4 = v3 + v2;
      if (v4 <= v2)
        break;
      v5 = 1;
      v6 = v2;
      do
      {
        v5 &= ((*(_QWORD *)(*(_QWORD *)this + ((v6 >> 3) & 0x18)) >> v6) & 1) == 0;
        ++v6;
      }
      while (v4 > v6);
      if ((v5 & 1) != 0)
        break;
      v2 += v3;
      if (v1 <= v2)
        goto LABEL_8;
    }
    v7 = 1;
  }
  else
  {
LABEL_8:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinBarIdManager::GetNextAvailableBarId();
    LOBYTE(v2) = 0;
    v7 = 0;
  }
  return v2 | (v7 << 8);
}

uint64_t ZinBarIdManager::GetAndAssignNextAvailableBarId(ZinBarIdManager *this)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  result = ZinBarIdManager::GetNextAvailableBarId(this);
  if ((unsigned __int16)result >= 0x100u)
  {
    v3 = *((_DWORD *)this + 6) + result;
    if (v3 > result)
    {
      v4 = *(_QWORD *)this;
      v5 = result;
      do
      {
        *(_QWORD *)(v4 + ((v5 >> 3) & 0x18)) |= 1 << v5;
        ++v5;
      }
      while (v3 > v5);
    }
  }
  return result;
}

uint64_t ZinBarIdManager::ReserveBarIds(uint64_t *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 1;
  v4 = *((_DWORD *)a1 + 6);
  while (1)
  {
    v5 = *v2;
    v6 = v4 + v5;
    if (a1[1] < v6 || v5 % v4)
      break;
    if (v6 > v5)
    {
      v7 = *a1;
      do
      {
        *(_QWORD *)(v7 + ((v5 >> 3) & 0x18)) |= 1 << v5;
        ++v5;
      }
      while (v6 > v5);
    }
    if (++v2 == v3)
      return 1;
  }
  return 0;
}

uint64_t ZinBarIdManager::GetNumberOfAvailableBars(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  int v6;

  v1 = *(_QWORD *)(this + 8);
  if (!v1)
    return 0;
  v2 = this;
  v3 = 0;
  LODWORD(this) = 0;
  do
  {
    v4 = v3 + *(_DWORD *)(v2 + 24);
    if (v3 >= v4)
    {
      v3 = 1;
    }
    else
    {
      v5 = v3;
      LOBYTE(v3) = 1;
      v6 = *(_DWORD *)(v2 + 24);
      do
      {
        v3 = v3 & (((*(_QWORD *)(*(_QWORD *)v2 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0);
        ++v5;
        --v6;
      }
      while (v6);
    }
    this = this + v3;
    v3 = v4;
  }
  while (v1 > v4);
  return this;
}

void ZinBarIdManager::GetNextAvailableBarId()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "GetNextAvailableBarId: unable to allocate free BAR\n", v0, 2u);
}

__CFDictionary *CreateANECIRDict(const ZinIrUnitInfo *a1)
{
  __CFDictionary *result;

  switch(*((_DWORD *)a1 + 8))
  {
    case 1:
      result = ZinCreateConvUnit(a1);
      break;
    case 2:
      result = ZinCreatePoolUnit(a1);
      break;
    case 3:
      result = ZinCreateConcatUnit(a1);
      break;
    case 4:
      result = ZinCreateEWUnit(a1);
      break;
    case 5:
      result = ZinCreateScaledEWUnit(a1);
      break;
    case 6:
      result = ZinCreateNeuronUnit(a1);
      break;
    case 7:
    case 0xA:
    case 0x26:
    case 0x38:
    case 0x39:
    case 0x3F:
    case 0x40:
      result = ZinCreateUnit(a1);
      break;
    case 8:
      result = ZinCreateGOCUnit((uint64_t)a1);
      break;
    case 9:
      result = ZinCreateDynamicGOCUnit(a1);
      break;
    case 0xB:
      result = ZinCreateFlattenUnit(a1);
      break;
    case 0xC:
      result = ZinCreateUnflattenUnit(a1);
      break;
    case 0xD:
      result = ZinCreateCrossCorrelationUnit((uint64_t)a1);
      break;
    case 0xE:
      result = ZinCreateKernelRasterizerUnit((uint64_t)a1);
      break;
    case 0xF:
      result = ZinCreateArgMinMaxUnit(a1);
      break;
    case 0x10:
      result = ZinCreateGlobalArgMinMaxUnit(a1);
      break;
    case 0x11:
      result = ZinCreateInputViewUnit(a1);
      break;
    case 0x12:
      result = ZinCreateMatrixMultUnit(a1);
      break;
    case 0x13:
      result = ZinCreateBroadcastUnit(a1);
      break;
    case 0x14:
      result = ZinCreateReductionUnit(a1);
      break;
    case 0x15:
      result = ZinCreateTransposeUnit((int **)a1);
      break;
    case 0x16:
      result = ZinCreateReshapeUnit((int **)a1);
      break;
    case 0x17:
      result = ZinCreateShapeUnit(a1);
      break;
    case 0x18:
      result = ZinCreateSoftmaxUnit(a1);
      break;
    case 0x19:
      result = ZinCreateInstanceNormUnit(a1);
      break;
    case 0x1A:
    case 0x1B:
    case 0x1C:
      result = ZinCreateMinMaxNormUnit(a1);
      break;
    case 0x1D:
      result = ZinCreateLRNUnit((uint64_t)a1);
      break;
    case 0x1E:
      result = ZinCreateCostVolumeUnit(a1);
      break;
    case 0x1F:
      result = ZinCreatePixelShuffleUnit(a1);
      break;
    case 0x20:
      result = ZinCreatePixelUnshuffleUnit(a1);
      break;
    case 0x21:
      result = ZinCreateFurthestPointSamplingUnit((int *)a1);
      break;
    case 0x22:
      result = ZinCreateSpaceToBatchUnit(a1);
      break;
    case 0x23:
      result = ZinCreateBatchToSpaceUnit(a1);
      break;
    case 0x24:
      result = ZinCreateSpaceToChannelUnit(a1);
      break;
    case 0x25:
      result = ZinCreateChannelToSpaceUnit(a1);
      break;
    case 0x27:
      result = ZinCreateGatherUnit(a1);
      break;
    case 0x28:
      result = ZinCreateAffineTransformUnit(a1);
      break;
    case 0x29:
      result = ZinCreateResizeUnit(a1);
      break;
    case 0x2A:
      result = ZinCreateResizeAsUnit(a1);
      break;
    case 0x2B:
      result = ZinCreateResampleUnit(a1);
      break;
    case 0x2C:
      result = ZinCreatePadUnit(a1);
      break;
    case 0x2D:
      result = ZinCreateTileUnit(a1);
      break;
    case 0x2E:
      result = ZinCreateCropResizeUnit(a1);
      break;
    case 0x2F:
      result = ZinCreateDynamicSliceUnit(a1);
      break;
    case 0x30:
      result = ZinCreatePlaneReaderUnit((uint64_t)a1);
      break;
    case 0x31:
      result = ZinCreatePlaneWriterUnit((uint64_t)a1);
      break;
    case 0x32:
      result = ZinCreateSortUnit((uint64_t)a1);
      break;
    case 0x33:
      result = ZinCreateTopKUnit((uint64_t)a1);
      break;
    case 0x34:
      result = ZinCreateNMSUnit((uint64_t)a1);
      break;
    case 0x35:
      result = ZinCreateMatrixDecompositionUnit(a1);
      break;
    case 0x36:
      result = ZinCreateDropoutUnit(a1);
      break;
    case 0x37:
      result = ZinCreateRandomUnit(a1);
      break;
    case 0x3A:
      result = ZinCreateQuantUnit(a1);
      break;
    case 0x3B:
      result = ZinCreateDeQuantUnit(a1);
      break;
    case 0x3C:
      result = ZinCreateLinearUnit(a1);
      break;
    case 0x3D:
      result = ZinCreateRingBufferWriterUnit(a1);
      break;
    case 0x3E:
      result = ZinCreateRingBufferReaderUnit(a1);
      break;
    case 0x41:
      result = ZinCreateNEConvUnit((void (***)(ZinIrKernelUnitInfo *__hidden))a1);
      break;
    case 0x42:
      result = ZinCreateNEMatMulUnit((void (***)(ZinIrUnitInfo *__hidden))a1);
      break;
    case 0x43:
      result = ZinCreateNEPoolUnit((void (***)(ZinIrUnitInfo *__hidden))a1);
      break;
    case 0x44:
      result = ZinCreateNEBypassUnit((__int128 **)a1);
      break;
    case 0x45:
      result = ZinCreatePEPoolUnit(a1);
      break;
    case 0x46:
      result = ZinCreatePEElementWiseUnit(a1);
      break;
    case 0x47:
      result = ZinCreatePEGOCUnit(a1);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void ZinLargeStridePoolTransform::ZinLargeStridePoolTransform(ZinLargeStridePoolTransform *this)
{
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = -1;
  *(_QWORD *)this = off_24C0244E8;
  *((_QWORD *)this + 1) = &unk_24C01CC78;
  *((_DWORD *)this + 22) = 1;
  *((int64x2_t *)this + 6) = vdupq_n_s64(1uLL);
  *((_QWORD *)this + 14) = 1;
  *((_QWORD *)this + 15) = 0x100000001;
  *((_DWORD *)this + 32) = 1;
  *(_QWORD *)((char *)this + 132) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  *(_QWORD *)((char *)this + 140) = 0;
  *((_BYTE *)this + 156) = 0;
  *((_QWORD *)this + 20) = 0x3F80000000000001;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_BYTE *)this + 176) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
}

void ZinLargeStridePoolTransform::ZinLargeStridePoolTransform(ZinLargeStridePoolTransform *this, char a2, const ZinIrPoolUnitInfo *a3)
{
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)this = off_24C0244E8;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a3 + 1), *((_QWORD *)a3 + 2));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a3 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a3 + 3);
    *((_OWORD *)this + 1) = v6;
  }
  v7 = *((_DWORD *)a3 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v7;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a3 + 5), *((__int128 **)a3 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 6) - *((_QWORD *)a3 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a3 + 4);
  *((_QWORD *)this + 1) = &unk_24C01CC78;
  v8 = *((_OWORD *)a3 + 5);
  *(_OWORD *)((char *)this + 104) = *((_OWORD *)a3 + 6);
  *(_OWORD *)((char *)this + 88) = v8;
  v9 = *((_OWORD *)a3 + 7);
  v10 = *((_OWORD *)a3 + 8);
  v11 = *((_OWORD *)a3 + 9);
  *((_DWORD *)this + 42) = *((_DWORD *)a3 + 40);
  *(_OWORD *)((char *)this + 152) = v11;
  *(_OWORD *)((char *)this + 136) = v10;
  *(_OWORD *)((char *)this + 120) = v9;
  *((_BYTE *)this + 176) = a2;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
}

void sub_207047550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ZinLargeStridePoolTransform::GetTransformType(ZinLargeStridePoolTransform *this)
{
  return 0;
}

uint64_t ZinLargeStridePoolTransform::RunLargeStridePool(uint64_t a1, uint64_t a2, uint64_t a3, ZinSpatialSplitTransform **a4)
{
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;

  if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a4) != 36)
    return 0;
  v8[0] = vdupq_n_s64(1uLL);
  v8[1] = v8[0];
  v9 = 1;
  result = (*(uint64_t (**)(ZinSpatialSplitTransform *, uint64_t, _OWORD *))(*(_QWORD *)*a4 + 16))(*a4, a3, v8);
  if ((_DWORD)result)
  {
    if (ZinMirUnitGraph::RemoveNode(a2, a4))
      return 0;
    else
      return 3;
  }
  return result;
}

uint64_t ZinLargeStridePoolTransform::RunLargeStridePoolExcludePadding(uint64_t a1, uint64_t a2, _QWORD **a3, unint64_t *a4)
{
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t **BondedInfo;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t *v28;

  v28 = a4;
  v8 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a2 + 64), &v28);
  v9 = (_QWORD *)(a2 + 104);
  if (v8)
    v9 = v8 + 3;
  v11 = v9;
  v10 = *v9;
  if (v11[1] == v10)
    return 3;
  if (*(_QWORD *)(*a4 + 88) != *(_QWORD *)(**(_QWORD **)v10 + 88))
  {
    v12 = ZinMirUnit::Format((ZinMirUnit *)*a4);
    if (ZinConvPoolLargeStride::DecomposeLargeStridePoolNoSeparatePaddingLayer(v12, a1 + 8, *a3, (uint64_t **)(a1 + 184), (uint64_t *)(a1 + 208)))return 3;
  }
  if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a1 + 208))
    return 3;
  if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo((ZinSpatialSplitTransform *)*a4) != 36)
    return 0;
  BondedInfo = (uint64_t **)ZinANELayer::GetBondedInfo((ZinANELayer *)*a4);
  v14 = *BondedInfo;
  v15 = BondedInfo[1];
  if (*BondedInfo == v15)
    goto LABEL_35;
  v16 = 0;
  v17 = *(_DWORD **)(a1 + 208);
  v18 = *(_DWORD **)(a1 + 216);
  do
  {
    while (1)
    {
      v19 = v17;
      if (v17 != v18)
      {
        v19 = v17;
        while (1)
        {
          if (*v19 == 17)
          {
            v20 = *v14;
            if (v19[22] == *(_DWORD *)(*v14 + 80) && v19[24] == *(_DWORD *)(v20 + 88))
            {
              v21 = v19[25];
              v22 = *(_DWORD *)(v20 + 92);
              if (v21 == v22 || v21 == 4 && v22 == 2)
                break;
            }
          }
          v19 += 86;
          if (v19 == v18)
            goto LABEL_21;
        }
      }
      if (v19 == v18)
        break;
      result = 0;
      v25 = *v14++;
      v24 = v25;
      v26 = v19[23];
      v27 = *(_DWORD *)(v25 + 84);
      if (v26 >= v27)
        v26 = v27;
      *(_DWORD *)(v24 + 84) = v26;
      v16 = 1;
      if (v14 == v15)
        return result;
    }
LABEL_21:
    ++v14;
  }
  while (v14 != v15);
  if ((v16 & 1) != 0)
    return 0;
LABEL_35:
  if (ZinMirUnitGraph::RemoveNode(a2, a4))
    return 0;
  return 3;
}

uint64_t ZinLargeStridePoolTransform::Run(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD **a4)
{
  if (*(_BYTE *)(a1 + 176))
    return ZinLargeStridePoolTransform::RunLargeStridePoolExcludePadding(a1, a2, a4, a3);
  else
    return ZinLargeStridePoolTransform::RunLargeStridePool(a1, a2, (uint64_t)a4, (ZinSpatialSplitTransform **)a3);
}

BOOL ZinLargeStridePoolTransform::operator==(_BYTE *a1, _BYTE *a2)
{
  int v4;
  _BOOL8 result;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  if (v4 != (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a2 + 40))(a2))
    return 0;
  result = ZinIrPoolUnitInfo::operator==((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  if (result)
    return (a1[176] == 0) ^ (a2[176] != 0);
  return result;
}

BOOL ZinIrPoolUnitInfo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)
    || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88)
    || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96)
    || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104)
    || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)
    || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)
    || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
  {
    return 0;
  }
  result = ZinIrPadding::operator==((_DWORD *)(a1 + 124), (_DWORD *)(a2 + 124));
  if (!result)
    return result;
  return *(unsigned __int8 *)(a1 + 148) == *(unsigned __int8 *)(a2 + 148)
      && *(_DWORD *)(a1 + 152) == *(_DWORD *)(a2 + 152)
      && *(float *)(a1 + 156) == *(float *)(a2 + 156)
      && *(_DWORD *)(a1 + 160) == *(_DWORD *)(a2 + 160)
      && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72);
}

uint64_t ZinIrPerf::IsValidPerfInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int64x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BOOL8 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BOOL8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BOOL8 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BOOL8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BOOL8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BOOL8 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BOOL8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BOOL8 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BOOL8 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BOOL8 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BOOL8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BOOL8 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  _BOOL8 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL8 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _BOOL8 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _BOOL8 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BOOL8 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _BOOL8 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  _BOOL8 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v269[32];
  uint64_t v270;
  __int128 v271;

  if (*((double *)this + 8) >= 0.0
    && *((double *)this + 7) >= 0.0
    && *((double *)this + 9) >= 0.0
    && *((double *)this + 10) >= 0.0
    && *((double *)this + 11) >= 0.0)
  {
    v11 = *((_QWORD *)this + 4);
    if (!*(_QWORD *)(v11 + 520) || !*(_QWORD *)(v11 + 440))
    {
      v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v34)
        ZinIrPerf::IsValidPerfInfo(v34, v35, v36, v37, v38, v39, v40, v41);
      return 3;
    }
    v12 = (int64x2_t *)*((_QWORD *)this + 29);
    v13 = (int64x2_t *)*((_QWORD *)this + 30);
    if (v12 == v13)
    {
      v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v42)
        ZinIrPerf::IsValidPerfInfo(v42, v43, v44, v45, v46, v47, v48, v49);
      return 3;
    }
    v14 = (int64x2_t *)*((_QWORD *)this + 35);
    v15 = (int64x2_t *)*((_QWORD *)this + 36);
    if (v14 == v15)
    {
      v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v50)
        ZinIrPerf::IsValidPerfInfo(v50, v51, v52, v53, v54, v55, v56, v57);
      return 3;
    }
    v16 = (int64x2_t *)*((_QWORD *)this + 29);
    do
    {
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*v16), (int32x4_t)vceqzq_s64(v16[1])))) & 1) != 0
        || !v16[2].i64[0])
      {
        v58 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v58)
          ZinIrPerf::IsValidPerfInfo(v58, v59, v60, v61, v62, v63, v64, v65);
        return 3;
      }
      v16 = (int64x2_t *)((char *)v16 + 40);
    }
    while (v16 != v13);
    v17 = (_DWORD *)*((_QWORD *)this + 32);
    v18 = (_DWORD *)*((_QWORD *)this + 33);
    if (v17 == v18)
    {
      v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v66)
        ZinIrPerf::IsValidPerfInfo(v66, v67, v68, v69, v70, v71, v72, v73);
      return 3;
    }
    v19 = (_DWORD *)*((_QWORD *)this + 32);
    do
    {
      if (!*v19)
      {
        v74 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v74)
          ZinIrPerf::IsValidPerfInfo(v74, v75, v76, v77, v78, v79, v80, v81);
        return 3;
      }
      ++v19;
    }
    while (v19 != v18);
    if (0xCCCCCCCCCCCCCCCDLL * (((char *)v13 - (char *)v12) >> 3) != v18 - v17)
    {
      v82 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v82)
        ZinIrPerf::IsValidPerfInfo(v82, v83, v84, v85, v86, v87, v88, v89);
      return 3;
    }
    v20 = (int64x2_t *)*((_QWORD *)this + 35);
    do
    {
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*v20), (int32x4_t)vceqzq_s64(v20[1])))) & 1) != 0
        || !v20[2].i64[0])
      {
        v90 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v90)
          ZinIrPerf::IsValidPerfInfo(v90, v91, v92, v93, v94, v95, v96, v97);
        return 3;
      }
      v20 = (int64x2_t *)((char *)v20 + 40);
    }
    while (v20 != v15);
    v21 = *((_QWORD *)this + 38);
    v22 = *((_QWORD *)this + 39);
    if (v21 == v22)
    {
      v98 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v98)
        ZinIrPerf::IsValidPerfInfo(v98, v99, v100, v101, v102, v103, v104, v105);
      return 3;
    }
    v23 = (unsigned __int128)(((char *)v15 - (char *)v14) * (__int128)0x6666666666666667) >> 64;
    v24 = (v23 >> 4) + ((unint64_t)v23 >> 63);
    if (v24 != *((_QWORD *)this + 13))
    {
      v106 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v106)
        ZinIrPerf::IsValidPerfInfo(v106, v107, v108, v109, v110, v111, v112, v113);
      return 3;
    }
    if (v24 != (v22 - v21) >> 2)
    {
      v114 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v114)
        ZinIrPerf::IsValidPerfInfo(v114, v115, v116, v117, v118, v119, v120, v121);
      return 3;
    }
    if (!*((_QWORD *)this + 42)
      || !*((_QWORD *)this + 45)
      || !*((_QWORD *)this + 43)
      || !*((_QWORD *)this + 41)
      || !*((_QWORD *)this + 44))
    {
      v122 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v122)
        ZinIrPerf::IsValidPerfInfo(v122, v123, v124, v125, v126, v127, v128, v129);
      return 3;
    }
    if (!*((_QWORD *)this + 26))
    {
      v130 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v130)
        ZinIrPerf::IsValidPerfInfo(v130, v131, v132, v133, v134, v135, v136, v137);
      return 3;
    }
    if (!*((_QWORD *)this + 27))
    {
      v138 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v138)
        ZinIrPerf::IsValidPerfInfo(v138, v139, v140, v141, v142, v143, v144, v145);
      return 3;
    }
    if (!*((_QWORD *)this + 28))
    {
      v146 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v146)
        ZinIrPerf::IsValidPerfInfo(v146, v147, v148, v149, v150, v151, v152, v153);
      return 3;
    }
    if (!*((_QWORD *)this + 23))
    {
      v154 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v154)
        ZinIrPerf::IsValidPerfInfo(v154, v155, v156, v157, v158, v159, v160, v161);
      return 3;
    }
    if (!*((_QWORD *)this + 24))
    {
      v162 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v162)
        ZinIrPerf::IsValidPerfInfo(v162, v163, v164, v165, v166, v167, v168, v169);
      return 3;
    }
    if (!*((_QWORD *)this + 25))
    {
      v170 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v170)
        ZinIrPerf::IsValidPerfInfo(v170, v171, v172, v173, v174, v175, v176, v177);
      return 3;
    }
    if (!*((_QWORD *)this + 19))
    {
      v178 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v178)
        ZinIrPerf::IsValidPerfInfo(v178, v179, v180, v181, v182, v183, v184, v185);
      return 3;
    }
    if (!*((_DWORD *)this + 92))
    {
      v186 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v186)
        ZinIrPerf::IsValidPerfInfo(v186, v187, v188, v189, v190, v191, v192, v193);
      return 3;
    }
    v25 = 0;
    if (v24 <= 1)
      v24 = 1;
    do
    {
      if (!(*(_QWORD *)(*((_QWORD *)this + 12) + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v25) | *((_QWORD *)this + v25 + 16)))
      {
        v194 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v194)
          ZinIrPerf::IsValidPerfInfo(v194, v195, v196, v197, v198, v199, v200, v201);
        return 3;
      }
      ++v25;
    }
    while (v24 != v25);
    if (!*((_BYTE *)this + 120) && !*((_QWORD *)this + 18))
    {
      v227 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v227)
        ZinIrPerf::IsValidPerfInfo(v227, v228, v229, v230, v231, v232, v233, v234);
      return 3;
    }
    if (ZinIrOpLayer::IsNELayer(a2))
    {
      if (*((_QWORD *)this + 93))
      {
        if (*((_QWORD *)this + 96))
          goto LABEL_51;
        v243 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v243)
          ZinIrPerf::IsValidPerfInfo(v243, v244, v245, v246, v247, v248, v249, v250);
      }
      else
      {
        v219 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v219)
          ZinIrPerf::IsValidPerfInfo(v219, v220, v221, v222, v223, v224, v225, v226);
      }
    }
    else
    {
LABEL_51:
      if (*((_BYTE *)this + 536) && !*((_QWORD *)this + 64))
      {
        v235 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v235)
          ZinIrPerf::IsValidPerfInfo(v235, v236, v237, v238, v239, v240, v241, v242);
        return 3;
      }
      if (*((_QWORD *)this + 21) < 2uLL || *((_QWORD *)this + 20) < 2uLL)
      {
        if (!*((_BYTE *)this + 628) || !*((_BYTE *)this + 648))
        {
          v210 = *((_QWORD *)this + 103);
          if (*(_BYTE *)(*((_QWORD *)this + 4) + 1585))
          {
            if (v210 >= 4)
            {
              v211 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v211)
                ZinIrPerf::IsValidPerfInfo(v211, v212, v213, v214, v215, v216, v217, v218);
              return 3;
            }
            if (v210 || *((_BYTE *)this + 832))
            {
              ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v269, *((_QWORD *)this + 93) << (v210 + *((_BYTE *)this + 832)), *((_QWORD *)this + 96), *((_QWORD *)this + 42) / *((_QWORD *)this + 20), (1 << (v210 + *((_BYTE *)this + 832))));
              v259 = v271 == 0 ? v270 : v270 + 1;
              if (v259 >= 2)
              {
                v260 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v260)
                  ZinIrPerf::IsValidPerfInfo(v260, v261, v262, v263, v264, v265, v266, v267);
                return 3;
              }
            }
          }
          else if (v210 || *((_BYTE *)this + 832))
          {
            v251 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v251)
              ZinIrPerf::IsValidPerfInfo(v251, v252, v253, v254, v255, v256, v257, v258);
            return 3;
          }
          return 0;
        }
        v202 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v202)
          ZinIrPerf::IsValidPerfInfo(v202, v203, v204, v205, v206, v207, v208, v209);
      }
      else
      {
        v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v26)
          ZinIrPerf::IsValidPerfInfo(v26, v27, v28, v29, v30, v31, v32, v33);
      }
    }
  }
  else
  {
    v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2)
      ZinIrPerf::IsValidPerfInfo(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return 3;
}

uint64_t ZinNEPerfInfo::GetTotalNumberOfActiveNEs(ZinNEPerfInfo *this)
{
  return *((_QWORD *)this + 9) * (1 << (*((_DWORD *)this + 38) + *((_BYTE *)this + 160)));
}

uint64_t ZinNEPerfInfo::GetNumClusters(ZinNEPerfInfo *this)
{
  return 1 << (*((_DWORD *)this + 38) + *((_BYTE *)this + 160));
}

uint64_t ZinIrPerf::CalculatePerfDescriptor(ZinIrPerf *this, ZinPerfDescriptor *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[45];
  uint64_t v15;

  v3 = 0;
  switch(*((_DWORD *)this + 44))
  {
    case 0:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v15 = 0;
      v14[0] = &unk_24C01FBD8;
      ZinPEPerf::CalculatePerf((ZinPEPerf *)v14, a2);
      goto LABEL_14;
    case 1:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v15 = 0;
      v14[0] = &unk_24C01FC88;
      ZinPEPerf::CalculatePerf((ZinPEPerf *)v14, a2);
      goto LABEL_14;
    case 2:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v15 = 0;
      v14[0] = &unk_24C0181E8;
      ZinPEPerf::CalculatePerf((ZinPEPerf *)v14, a2);
      goto LABEL_14;
    case 3:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v15 = 0;
      v14[0] = &unk_24C016B48;
      ZinPEPerf::CalculatePerf((ZinPEPerf *)v14, a2);
      goto LABEL_14;
    case 4:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v14[0] = &unk_24C017CE0;
      ZinNEPerf::CalculatePerf((ZinNEPerf *)v14, a2);
      goto LABEL_14;
    case 5:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v14[0] = &unk_24C017D70;
      ZinNEPerf::CalculatePerf((ZinNEPerf *)v14, a2);
      goto LABEL_14;
    case 6:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v14[0] = &unk_24C01FB20;
      ZinNEPerf::CalculatePerf((ZinNEPerf *)v14, a2);
      goto LABEL_14;
    case 7:
      return v3;
    case 8:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v14[0] = &unk_24C01B1B0;
      ZinNEPerf::CalculatePerf((ZinNEPerf *)v14, a2);
      goto LABEL_14;
    case 9:
      ZinEnginePerf::ZinEnginePerf((ZinEnginePerf *)v14, this);
      v14[0] = &unk_24C017E00;
      ZinNEPerf::CalculatePerf((ZinNEPerf *)v14, a2);
LABEL_14:
      v3 = v4;
      ZinEnginePerf::~ZinEnginePerf((ZinEnginePerf *)v14);
      break;
    default:
      v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v5)
        ZinIrPerf::CalculatePerfDescriptor(v5, v6, v7, v8, v9, v10, v11, v12);
      v3 = 3;
      break;
  }
  return v3;
}

void sub_2070482EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ZinEnginePerf::~ZinEnginePerf((ZinEnginePerf *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPerf::TranslateOpcode(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;

  v2 = a2 - 81;
  if ((a2 - 81) > 0xC || ((0x1F1Fu >> v2) & 1) == 0)
    return 3;
  result = 0;
  *(_DWORD *)(a1 + 176) = dword_207AB3CB4[v2];
  return result;
}

uint64_t ZinIrPerf::ValidatePerfAnalysisMode(ZinIrPerf *this, const ZinANELayer *a2, char a3)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if ((*((_BYTE *)this + 46) & 1) != 0
    && (a3 & 1) == 0
    && (*((_QWORD *)a2 + 11) == *((_QWORD *)a2 + 12)
     || *(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 82 && *((_QWORD *)a2 + 14) == *((_QWORD *)a2 + 15)))
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinIrPerf::ValidatePerfAnalysisMode(v4, v5, v6, v7, v8, v9, v10, v11);
    return 3;
  }
  if ((*((_BYTE *)this + 47) & 1) != 0)
  {
    if (*((_QWORD *)a2 + 11) == *((_QWORD *)a2 + 12)
      || *(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 82 && *((_QWORD *)a2 + 14) == *((_QWORD *)a2 + 15))
    {
      v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v20)
        ZinIrPerf::ValidatePerfAnalysisMode(v20, v21, v22, v23, v24, v25, v26, v27);
      return 3;
    }
  }
  else if ((*((_BYTE *)this + 46) & 1) == 0)
  {
    goto LABEL_15;
  }
  if ((*((_BYTE *)this + 42) & 1) == 0 || (*((_BYTE *)this + 41) & 1) == 0 || (*((_BYTE *)this + 40) & 1) == 0)
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinIrPerf::ValidatePerfAnalysisMode(v12, v13, v14, v15, v16, v17, v18, v19);
    return 3;
  }
LABEL_15:
  if ((*((_BYTE *)this + 49) & 1) == 0 || *((_QWORD *)a2 + 11) != *((_QWORD *)a2 + 12))
    return 0;
  v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v28)
    ZinIrPerf::ValidatePerfAnalysisMode(v28, v29, v30, v31, v32, v33, v34, v35);
  return 3;
}

uint64_t ZinIrPerf::ValidateDefaultPerfInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = ZinIrPerf::ValidatePerfInfo(this, a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinIrPerf::ValidateDefaultPerfInfo(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else if (ZinIrPerf::IsValidPerfInfo(this, a2))
  {
    return 3;
  }
  else
  {
    if (ZinIrOpLayer::IsNELayer(a2))
      return ZinIrPerf::GetNEWorkUnitShapes(this);
    return 0;
  }
  return v5;
}

uint64_t ZinIrPerf::ValidatePerfInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int64x2_t v42;
  _BYTE v43[32];
  _BYTE v44[32];
  char *v45;

  v4 = ZinIrPerf::TranslateOpcode((uint64_t)this, *(_DWORD *)(*((_QWORD *)a2 + 8) + 8));
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinIrPerf::ValidatePerfInfo(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    v34 = &v35;
    v35 = 0;
    v36 = 0;
    v37 = 0uLL;
    v38 = 0;
    LOBYTE(v40) = 0;
    *(_QWORD *)((char *)&v40 + 4) = 3212836864;
    WORD6(v40) = 0;
    *(_QWORD *)&v41 = 1;
    BYTE8(v41) = 0;
    v42 = vdupq_n_s64(1uLL);
    *(int64x2_t *)&v43[8] = v42;
    *(_QWORD *)&v43[24] = 1;
    *(_DWORD *)v44 = 0;
    *(_OWORD *)&v44[8] = xmmword_207A7FFD0;
    *(_WORD *)&v44[24] = 0;
    v45 = (char *)this + 56;
    v14 = (char *)this + 680;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 672, *((_QWORD **)this + 85));
    v15 = v35;
    *((_QWORD *)this + 84) = &v35;
    *((_QWORD *)this + 85) = v15;
    v16 = v36;
    *((_QWORD *)this + 86) = v36;
    if (v16)
    {
      v15[2] = v14;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      *((_QWORD *)this + 84) = v14;
    }
    v17 = (void *)*((_QWORD *)this + 87);
    if (v17)
    {
      *((_QWORD *)this + 88) = v17;
      operator delete(v17);
    }
    *(_OWORD *)((char *)this + 696) = v37;
    v18 = *(_OWORD *)v44;
    *(_OWORD *)((char *)this + 792) = *(_OWORD *)&v43[16];
    *(_OWORD *)((char *)this + 808) = v18;
    *(_OWORD *)((char *)this + 824) = *(_OWORD *)&v44[16];
    v19 = v41;
    *(_OWORD *)((char *)this + 728) = v40;
    *(_OWORD *)((char *)this + 744) = v19;
    v20 = *(_OWORD *)v43;
    *(int64x2_t *)((char *)this + 760) = v42;
    v21 = v39;
    *((_QWORD *)this + 89) = v38;
    v38 = 0;
    v37 = 0uLL;
    *((_QWORD *)this + 90) = v21;
    *((_QWORD *)this + 105) = v45;
    *(_OWORD *)((char *)this + 776) = v20;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v34, v35);
    *((int64x2_t *)this + 53) = vdupq_n_s64(1uLL);
    *((_QWORD *)this + 108) = (char *)this + 56;
    ZinIrPerf::ConfigureOutputTensorInfo(this, a2);
    ZinIrPerf::ConfigureInputTensorInfo(this, a2);
    ZinIrPerf::ConfigurePerfInfoKernel(this, a2);
    ZinIrPerf::ConfigurePerfInfo(this, (ZinEngineLayerMirInfo **)a2, v22, v23);
    v5 = v24;
    if ((_DWORD)v24)
    {
      v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v25)
        ZinIrPerf::ValidatePerfInfo(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      ZinIrPerf::ValidateTexturePerfInfo(this, a2);
    }
  }
  return v5;
}

uint64_t ZinIrPerf::GetNEWorkUnitShapes(ZinIrPerf *this)
{
  _QWORD *v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v12 = 0;
  v13 = 0;
  v11 = &v12;
  v2 = (_QWORD *)((char *)this + 672);
  v3 = (char *)this + 680;
  v14 = 0u;
  v15 = 0u;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 672, *((_QWORD **)this + 85));
  v4 = v12;
  *((_QWORD *)this + 84) = &v12;
  *((_QWORD *)this + 85) = v4;
  v5 = v13;
  *((_QWORD *)this + 86) = v13;
  if (v5)
  {
    v4[2] = v3;
    v11 = &v12;
    v12 = 0;
    v13 = 0;
    v4 = 0;
  }
  else
  {
    *v2 = v3;
  }
  v6 = (void *)*((_QWORD *)this + 87);
  if (v6)
  {
    *((_QWORD *)this + 88) = v6;
    operator delete(v6);
    v4 = v12;
  }
  *(_OWORD *)((char *)this + 696) = v14;
  v7 = *((_QWORD *)&v15 + 1);
  *((_QWORD *)this + 89) = v15;
  *(_QWORD *)&v15 = 0;
  v14 = 0uLL;
  *((_QWORD *)this + 90) = v7;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v11, v4);
  v8 = 1;
  if (!*((_BYTE *)this + 52))
    v8 = *((_BYTE *)this + 48) || *((_BYTE *)this + 54) || *((_BYTE *)this + 53) != 0;
  if (NERasterization::RasterizeWorkUnit((uint64_t)v2, (void **)this + 87, (_QWORD *)this + 90, *((_QWORD *)this + 98), *((_QWORD *)this + 100), *((_QWORD *)this + 99), *((_QWORD *)this + 19), *((_DWORD *)this + 184), *((_QWORD *)this + 63), *((_QWORD *)this + 62), **((_DWORD **)this + 32), v10, *((_BYTE *)this + 740), *((_QWORD *)this + 103), *((_BYTE *)this + 832), *((_QWORD *)this + 4), *((_QWORD *)this + 71), *((_QWORD *)this + 70), *((_QWORD *)this + 72),
                       v8,
                       1))
    return 3;
  else
    return 0;
}

uint64_t ZinIrPerf::ConfigureOutputTensorInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  uint64_t result;
  ZinIrTensor *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  ZinIrSymbol **v9;
  uint64_t v10;
  int v11;

  result = (*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v5 = (ZinIrTensor *)result;
  if (*((_BYTE *)this + 668))
    *((_BYTE *)this + 668) = 0;
  if (result)
  {
    v6 = *(_OWORD *)(result + 48);
    v7 = *(_OWORD *)(result + 64);
    *((_QWORD *)this + 45) = *(_QWORD *)(result + 80);
    *(_OWORD *)((char *)this + 328) = v6;
    *(_OWORD *)((char *)this + 344) = v7;
    *((_DWORD *)this + 92) = *(_DWORD *)(result + 88);
    *((_QWORD *)this + 58) = (*(uint64_t (**)(const ZinANELayer *, _QWORD))(*(_QWORD *)a2 + 368))(a2, 0);
    *((_QWORD *)this + 61) = (*(uint64_t (**)(const ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 1);
    *((_QWORD *)this + 62) = (*(uint64_t (**)(const ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
    *((_QWORD *)this + 63) = (*(uint64_t (**)(const ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 4);
    if (ZinIrOpLayer::IsPELayer(a2) || *((_QWORD *)a2 + 33))
    {
      *((_QWORD *)this + 59) = (*(uint64_t (**)(const ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 2);
      *((_BYTE *)this + 480) = 1;
    }
    v8 = *((_QWORD *)v5 + 13);
    if (v8)
    {
      v9 = *(ZinIrSymbol ***)(v8 + 40);
      if (v9 != *(ZinIrSymbol ***)(v8 + 48))
      {
        if (*v9)
          *((_BYTE *)this + 120) = ZinIrSymbol::GetMemType(*v9) == 2;
      }
    }
    result = ZinIrTensor::GetInterchangeDescriptor(v5);
    if ((v10 & 0xFF00000000) != 0)
    {
      v11 = *((unsigned __int8 *)this + 668);
      *(_QWORD *)((char *)this + 652) = result;
      *((_DWORD *)this + 165) = v10;
      *((_DWORD *)this + 166) = 1061158912;
      if (!v11)
        *((_BYTE *)this + 668) = 1;
    }
  }
  return result;
}

void ZinIrPerf::ConfigureInputTensorInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  ZinIrSymbol **v35;
  int MemType;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t InterchangeDescriptor;
  uint64_t v41;
  char *v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  NSObject *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint8_t buf;
  char v61[15];

  if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 11))
  {
    ZinIrPerf::InitializeDMASrcInfo(this, a2);
    ZinIrPerf::InitializeL2SrcInfo(this, a2);
    v57 = 0uLL;
    *(_QWORD *)&v58 = 0;
    v4 = (_QWORD *)*((_QWORD *)a2 + 11);
    v5 = (_QWORD *)*((_QWORD *)a2 + 12);
    if (v4 == v5)
    {
      *(_QWORD *)((char *)this + 644) = 0;
      *(_OWORD *)((char *)this + 612) = 0u;
      *(_OWORD *)((char *)this + 628) = 0u;
    }
    else
    {
      do
      {
        if (!(*(unsigned int (**)(const ZinANELayer *))(*(_QWORD *)a2 + 120))(a2)
          || (v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, 0, 0),
              ((*(uint64_t (**)(const ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 200))(a2, v7) & 1) == 0))
        {
          v8 = *((_QWORD *)&v57 + 1);
          if (*((_QWORD *)&v57 + 1) >= (unint64_t)v58)
          {
            v10 = (uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3;
            if ((unint64_t)(v10 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v11 = (uint64_t)(v58 - v57) >> 2;
            if (v11 <= v10 + 1)
              v11 = v10 + 1;
            if ((_QWORD)v58 - (_QWORD)v57 >= 0x7FFFFFFFFFFFFFF8uLL)
              v12 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v12 = v11;
            if (v12)
              v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v58, v12);
            else
              v13 = 0;
            v14 = &v13[8 * v10];
            *(_QWORD *)v14 = *v4;
            v9 = v14 + 8;
            v15 = (char *)*((_QWORD *)&v57 + 1);
            v16 = (char *)v57;
            if (*((_QWORD *)&v57 + 1) != (_QWORD)v57)
            {
              do
              {
                v17 = *((_QWORD *)v15 - 1);
                v15 -= 8;
                *((_QWORD *)v14 - 1) = v17;
                v14 -= 8;
              }
              while (v15 != v16);
              v15 = (char *)v57;
            }
            *(_QWORD *)&v57 = v14;
            *((_QWORD *)&v57 + 1) = v9;
            *(_QWORD *)&v58 = &v13[8 * v12];
            if (v15)
              operator delete(v15);
          }
          else
          {
            **((_QWORD **)&v57 + 1) = *v4;
            v9 = (_QWORD *)(v8 + 8);
          }
          *((_QWORD *)&v57 + 1) = v9;
        }
        ++v4;
      }
      while (v4 != v5);
      v18 = (void *)*((_QWORD *)&v57 + 1);
      v19 = (void *)v57;
      *(_OWORD *)((char *)this + 612) = 0u;
      *(_OWORD *)((char *)this + 628) = 0u;
      *(_QWORD *)((char *)this + 644) = 0;
      if (v18 != v19)
      {
        v20 = 0;
        v21 = 1;
        while (1)
        {
          v56 = 0;
          if (!ZinMemSourceIndexTranslator::GetDMASrcIndex(a2, (const ZinANELayer *)v20, (uint64_t *)&v56, v6))break;
LABEL_26:
          v20 = v21;
          v18 = (void *)v57;
          ++v21;
          if (v20 >= (uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3)
            goto LABEL_42;
        }
        v22 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v20);
        v23 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0, 0);
        v24 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v20);
        if (v24 == ZinANELayer::GetTextureDataInput(a2))
        {
          v30 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)a2 + 25) + 32))(*((_QWORD *)a2 + 25), 0, 0);
          v31 = *((_QWORD *)this + 35) + 40 * v56;
          v32 = *(_QWORD *)(v30 + 80);
          v33 = *(_OWORD *)(v30 + 64);
          *(_OWORD *)v31 = *(_OWORD *)(v30 + 48);
          *(_OWORD *)(v31 + 16) = v33;
          *(_QWORD *)(v31 + 32) = v32;
          v29 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)a2 + 25) + 32))(*((_QWORD *)a2 + 25), 0, 0);
          v25 = v56;
        }
        else
        {
          v25 = v56;
          v26 = *((_QWORD *)this + 35) + 40 * v56;
          v27 = *(_QWORD *)(v23 + 80);
          v28 = *(_OWORD *)(v23 + 64);
          *(_OWORD *)v26 = *(_OWORD *)(v23 + 48);
          *(_OWORD *)(v26 + 16) = v28;
          *(_QWORD *)(v26 + 32) = v27;
          v29 = v23;
        }
        *(_DWORD *)(*((_QWORD *)this + 38) + 4 * v25) = *(_DWORD *)(v29 + 88);
        v34 = *(_QWORD *)(v23 + 104);
        if (v34 && (v35 = *(ZinIrSymbol ***)(v34 + 40), v35 != *(ZinIrSymbol ***)(v34 + 48)) && *v35)
        {
          MemType = ZinIrSymbol::GetMemType(*v35);
          v37 = (uint64_t *)(*((_QWORD *)this + 12) + 8 * (v56 >> 6));
          v38 = 1 << v56;
          if (MemType == 2)
          {
            v39 = *v37 | v38;
            goto LABEL_38;
          }
        }
        else
        {
          v37 = (uint64_t *)(*((_QWORD *)this + 12) + 8 * (v25 >> 6));
          v38 = 1 << v25;
        }
        v39 = *v37 & ~v38;
LABEL_38:
        *v37 = v39;
        InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v23);
        if ((v41 & 0xFF00000000) != 0)
        {
          if (v56 >= 2)
            std::__throw_out_of_range[abi:ne180100]("array::at");
          v42 = (char *)this + 20 * v56 + 612;
          v43 = v42[16];
          *(_QWORD *)v42 = InterchangeDescriptor;
          *((_DWORD *)v42 + 2) = v41;
          *((_DWORD *)v42 + 3) = 1061158912;
          if (!v43)
            v42[16] = 1;
        }
        goto LABEL_26;
      }
LABEL_42:
      if (v18)
      {
        *((_QWORD *)&v57 + 1) = v18;
        operator delete(v18);
      }
    }
    if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 11))
    {
      v44 = 0;
      v45 = 1;
      v46 = MEMORY[0x24BDACB70];
      do
      {
        LODWORD(v56) = 0;
        if (ZinMemSourceIndexTranslator::GetL2SrcType(a2, v44, (int *)&v56)
          && os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          ZinIrPerf::ConfigureInputTensorInfo(&buf, v61);
        }
        v47 = v56;
        if ((_DWORD)v56 != 2)
        {
          v48 = (_DWORD)v56 != 0;
          *(_DWORD *)(*((_QWORD *)this + 32) + 4 * (v47 != 0)) = ZinMemSourceIndexTranslator::GetL2SourceFormat(a2, (const ZinANELayer *)v44);
          v49 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v44);
          v50 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0, 0);
          v51 = *(_OWORD *)(v50 + 64);
          v57 = *(_OWORD *)(v50 + 48);
          v58 = v51;
          v59 = *(_QWORD *)(v50 + 80);
          v52 = *((_QWORD *)a2 + 25);
          if (v52 && *((_QWORD *)a2 + 24) == v48
            || !v47 && *(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 81 && (v52 = *((_QWORD *)a2 + 57)) != 0)
          {
            v53 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0, 0);
            v54 = *(_OWORD *)(v53 + 64);
            v57 = *(_OWORD *)(v53 + 48);
            v58 = v54;
            v59 = *(_QWORD *)(v53 + 80);
          }
          v55 = *((_QWORD *)this + 29) + 40 * v48;
          *(_OWORD *)v55 = v57;
          *(_OWORD *)(v55 + 16) = v58;
          *(_QWORD *)(v55 + 32) = v59;
        }
        v44 = v45++;
      }
      while (v44 < (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
    }
  }
}

void sub_207048EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrPerf::ConfigurePerfInfoKernel(ZinIrPerf *this, const ZinANELayer *a2)
{
  int v4;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrKernel *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  const ZinIrKernel *v22;
  int64x2_t v23;
  uint64_t result;
  const ZinIrKernel *v25;
  __int128 v26;
  uint64_t v27;
  ZinIrKernel *v28;

  *((_BYTE *)this + 396) = 0;
  v4 = *((_DWORD *)this + 44);
  if (v4 == 5 || v4 == 2)
  {
    if (ZinIrOpLayer::IsNELayer(a2))
    {
      (*(void (**)(ZinIrKernel **__return_ptr, const ZinANELayer *, _QWORD))(*(_QWORD *)a2 + 568))(&v28, a2, 0);
      v6 = v28 != 0;
    }
    else
    {
      v6 = 0;
      v28 = 0;
    }
    *((_BYTE *)this + 396) = v6;
    ZinIrOpLayer::IsNELayer(a2);
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 54) + 64);
    v8 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    v10 = *(_QWORD *)(v7 + 32);
    v26 = *(_OWORD *)(v7 + 64);
    v11 = *(_QWORD *)(v7 + 80);
    *((_QWORD *)this + 52) = v9;
    *((_QWORD *)this + 53) = v8;
    *((_QWORD *)this + 54) = v10;
    v12 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)&v13 = (int)v12;
    *((_QWORD *)&v13 + 1) = SHIDWORD(v12);
    *(_OWORD *)((char *)this + 184) = v13;
    v14 = *(_QWORD *)(v7 + 48);
    *(_QWORD *)&v13 = (int)v14;
    *((_QWORD *)&v13 + 1) = SHIDWORD(v14);
    *(_OWORD *)((char *)this + 200) = v13;
    v15 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)&v13 = (int)v15;
    *((_QWORD *)&v13 + 1) = SHIDWORD(v15);
    *(_OWORD *)((char *)this + 216) = v13;
    *(_QWORD *)((char *)this + 388) = v11;
    *(_OWORD *)((char *)this + 372) = v26;
    v16 = v28;
    v27 = v11;
    v28 = 0;
    if (!v16)
      goto LABEL_17;
LABEL_10:
    ZinIrKernel::~ZinIrKernel(v16);
    MEMORY[0x20BD002F8](v17, 0x1032C40DEE44497, v18, v19);
    goto LABEL_17;
  }
  if (!ZinIrOpLayer::IsNELayer(a2))
  {
    v23 = vdupq_n_s64(1uLL);
    *((int64x2_t *)this + 25) = v23;
    *((int64x2_t *)this + 26) = v23;
    *((_QWORD *)this + 54) = 1;
    *((_QWORD *)this + 55) = 0x3FF0000000000000;
    *(int64x2_t *)((char *)this + 184) = v23;
    *(int64x2_t *)((char *)this + 200) = v23;
    *(int64x2_t *)((char *)this + 216) = v23;
    *(_QWORD *)((char *)this + 380) = 0;
    *(_QWORD *)((char *)this + 388) = 0;
    *(_QWORD *)((char *)this + 372) = 0;
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 44) != 4)
  {
    if (ZinIrOpLayer::IsNELayer(a2))
    {
      (*(void (**)(__int128 *__return_ptr, const ZinANELayer *, _QWORD))(*(_QWORD *)a2 + 568))(&v26, a2, 0);
      v25 = (const ZinIrKernel *)v26;
    }
    else
    {
      v25 = 0;
      *(_QWORD *)&v26 = 0;
    }
    ZinIrPerf::ConfigurePerfInfoNEKernel((uint64_t)this, v25);
    v16 = (ZinIrKernel *)v26;
    *(_QWORD *)&v26 = 0;
    if (!v16)
      goto LABEL_17;
    goto LABEL_10;
  }
  v21 = *((_QWORD *)a2 + 54);
  if (v21)
  {
    v22 = *(const ZinIrKernel **)(v21 + 136);
    if (v22)
      ZinIrPerf::ConfigurePerfInfoNEKernel((uint64_t)this, v22);
  }
LABEL_17:
  result = ZinIrOpLayer::IsNELayer(a2);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 43))
    {
      ZinIrPerf::AddKerneltoKernelNameSet(this, (ZinEngineLayerMirInfo **)a2, *(int *)(*((_QWORD *)this + 4) + 8));
      result = ZinIrPerf::HasRewoundKernel(this, (ZinEngineLayerMirInfo **)a2, *(int *)(*((_QWORD *)this + 4) + 8));
      *((_BYTE *)this + 728) = result;
    }
  }
  return result;
}

void sub_2070490D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9)
{
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

__n128 ZinIrPerf::ConfigurePerfInfo(ZinIrPerf *this, ZinEngineLayerMirInfo **a2, uint64_t a3, unint64_t *a4)
{
  unint64_t *v6;
  ZinEngineLayerMirInfo *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _DWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  ZinEngineLayerMirInfo *v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 result;
  _BOOL4 IsNELayer;
  __n128 *v32;
  MirInfoChannelAssignment *ChannelAssignment;
  ZinEngineLayerMirInfo *v34;
  MirInfoChannelAssignment *v35;
  ZinEngineLayerMirInfo *v36;
  MirInfoChannelAssignment *v37;
  ZinIrTarget *v38;
  ZinEngineLayerMirInfo *v39;
  void *__p[3];
  int v41;

  if (a2[33])
  {
    ZinIrPerf::ConfigureMcacheInfo(this, (const ZinANELayer *)a2, a3, a4);
    v7 = a2[33];
    if (v7 && a2[11] != a2[12])
    {
      v8 = 0;
      do
      {
        __p[0] = 0;
        if (!ZinMemSourceIndexTranslator::GetDMASrcIndex((ZinMemSourceIndexTranslator *)a2, (const ZinANELayer *)v8, (uint64_t *)__p, v6)&& ((*(_QWORD *)(*((_QWORD *)this + 12) + (((unint64_t)__p[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SLOBYTE(__p[0])) & 1) == 0)
        {
          v9 = *((_QWORD *)a2[33] + 12 * (uint64_t)__p[0] + 94);
          if (v9)
          {
            v10 = ZinTensorDescriptorDmaInterleave(v9 + 208);
            *((_QWORD *)this + (uint64_t)__p[0] + 16) = v10;
          }
        }
        ++v8;
      }
      while (v8 < (a2[12] - a2[11]) >> 3);
      v7 = a2[33];
    }
    if (!*((_BYTE *)this + 120))
    {
      v11 = *((_QWORD *)v7 + 118);
      if (v11)
      {
        *((_QWORD *)this + 18) = ZinTensorDescriptorDmaInterleave(v11 + 208);
        v7 = a2[33];
      }
    }
    v12 = *((_QWORD *)v7 + 25);
    if (v12)
      *((_QWORD *)this + 19) = v12;
    v13 = (_QWORD *)*((_QWORD *)this + 3);
    if (*((_BYTE *)this + 536))
      *((_BYTE *)this + 536) = 0;
    if (v13[11] == v13[12] || !*((_BYTE *)this + 46) || (v14 = (_QWORD *)v13[14], v14 == (_QWORD *)v13[15]))
    {
      *((_QWORD *)this + 71) = 0;
      *((_QWORD *)this + 70) = 0;
      *((_QWORD *)this + 72) = 0;
    }
    else
    {
      v15 = (_DWORD *)v13[33];
      if (v15[408] == 4)
      {
        *((_QWORD *)this + 64) = *v14;
        *((_DWORD *)this + 130) = 1;
        *((_QWORD *)this + 66) = 0;
        *((_BYTE *)this + 536) = 1;
        v15 = (_DWORD *)v13[33];
      }
      v41 = 0;
      if (ZinEngineLayerMirInfo::HasChainRead(v15, &v41))
      {
        v16 = v41 != 0;
        (*(void (**)(void **__return_ptr, _QWORD *))(*v13 + 512))(__p, v13);
        v17 = *(_QWORD *)(*((_QWORD *)__p[0] + v16) + 96);
        __p[1] = __p[0];
        operator delete(__p[0]);
        v18 = *((unsigned __int8 *)this + 536);
        *((_QWORD *)this + 64) = v17;
        *((_DWORD *)this + 130) = 0;
        *((_QWORD *)this + 66) = 0;
        if (!v18)
          *((_BYTE *)this + 536) = 1;
      }
      v19 = (_QWORD *)v13[33];
      *((_QWORD *)this + 70) = v19[27];
      *((_QWORD *)this + 71) = v19[26];
      *((_QWORD *)this + 72) = v19[28];
    }
    v20 = a2[33];
    if (v20)
    {
      if (*((_DWORD *)this + 44) == 4
        && *((_BYTE *)this + 396)
        && *((_QWORD *)this + 56) >= 2uLL
        && *((_DWORD *)v20 + 28) != 2)
      {
        *((_QWORD *)this + 20) = *((_QWORD *)v20 + 13);
        v21 = 1;
      }
      else
      {
        *((_QWORD *)this + 20) = 1;
        v21 = *((_QWORD *)v20 + 13);
      }
      *((_QWORD *)this + 21) = v21;
      IsNELayer = ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2);
      v32 = (__n128 *)a2[33];
      if (IsNELayer)
      {
        *((_DWORD *)this + 184) = v32[9].n128_u32[0];
        *((_BYTE *)this + 740) = v32[9].n128_u8[5];
        *((_BYTE *)this + 741) = v32->n128_u8[1];
        ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v32);
        *((_QWORD *)this + 93) = MirInfoChannelAssignment::GetActiveNEPerCluster(ChannelAssignment);
        v34 = a2[33];
        *((_BYTE *)this + 752) = *(_BYTE *)v34;
        *((_QWORD *)this + 95) = *((_QWORD *)v34 + 12);
        v35 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v34);
        *((_QWORD *)this + 96) = MirInfoChannelAssignment::GetOCGSize(v35);
        v36 = a2[33];
        *((_DWORD *)this + 194) = *((_DWORD *)v36 + 28);
        *((_QWORD *)this + 98) = *((_QWORD *)v36 + 17);
        *(int8x16_t *)((char *)this + 792) = vextq_s8(*(int8x16_t *)((char *)v36 + 120), *(int8x16_t *)((char *)v36 + 120), 8uLL);
        v37 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v36);
        *((_BYTE *)this + 832) = MirInfoChannelAssignment::GetFatTileEnable(v37);
        v38 = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
        *((_QWORD *)this + 103) = ZinIrTarget::GetLut(v38);
        v39 = a2[33];
        *((_BYTE *)this + 833) = *((_BYTE *)v39 + 148);
        *((_BYTE *)this + 740) = *((_BYTE *)v39 + 149);
      }
      else
      {
        result = v32[15];
        *((__n128 *)this + 53) = result;
      }
    }
    else
    {
      v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v22)
        ZinIrPerf::ConfigurePerfInfo(v22, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  return result;
}

uint64_t ZinIrPerf::ValidateTexturePerfInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  _DWORD *v20;

  ZinTextureLayerUtils::GetPassthroughAxes(a2, (char **)&__p);
  if (!*((_QWORD *)a2 + 25))
  {
    v5 = __p;
    if (!__p)
      return 0;
    goto LABEL_19;
  }
  v4 = *((_QWORD *)a2 + 30);
  v5 = __p;
  if (v4)
  {
    if (__p == v20)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v6 = 0;
      v7 = (int *)__p;
      do
      {
        v8 = *v7++;
        if (v8 == 2)
          ++v6;
      }
      while (v7 != v20);
      v9 = 0;
      v10 = (int *)__p;
      do
      {
        v11 = *v10++;
        if (v11 == 4)
          ++v9;
      }
      while (v10 != v20);
      v12 = v6 != 0;
      v13 = v9 != 0;
    }
    v14 = *(unsigned int *)(v4 + 192);
    if (!*((_BYTE *)this + 552))
    {
      v16 = !v13;
      v17 = 0x10000000000;
      if (v16)
        v17 = 0;
      v16 = !v12;
      v18 = 0x100000000;
      if (v16)
        v18 = 0;
      *((_QWORD *)this + 68) = v17 | v18 | v14;
      *((_BYTE *)this + 552) = 1;
      if (v5)
        goto LABEL_19;
      return 0;
    }
    *((_DWORD *)this + 136) = v14;
    *((_BYTE *)this + 548) = v12;
    *((_BYTE *)this + 549) = v13;
  }
  if (v5)
  {
LABEL_19:
    v20 = v5;
    operator delete(v5);
  }
  return 0;
}

uint64_t ZinIrPerf::ValidatePerfInfo(ZinIrPerf *this, const ZinANELayer *a2, const ZinCustomPerfInfo *a3)
{
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    *((_QWORD *)this + 3) = a2;
    if (a3)
    {
      if (ZinIrOpLayer::IsNELayer(a2))
        return ZinIrPerf::ValidateNEPerfInfo(this, a2, a3);
      else
        return ZinIrPerf::ValidatePEPerfInfo(this, a2, a3);
    }
    else
    {
      return ZinIrPerf::ValidateDefaultPerfInfo(this, a2);
    }
  }
  else
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinIrPerf::ValidatePerfInfo(v7, v8, v9, v10, v11, v12, v13, v14);
    return 3;
  }
}

uint64_t ZinIrPerf::ValidateNEPerfInfo(ZinIrPerf *this, const ZinANELayer *a2, const ZinNECustomPerfInfo *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = ZinIrPerf::ValidatePerfInfo(this, a2);
  if ((_DWORD)v6)
  {
    v7 = v6;
    v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v8)
      ZinIrPerf::ValidateNEPerfInfo(v8, v9, v10, v11, v12, v13, v14, v15);
    return v7;
  }
  ZinCommonPerfInfo::SetCommonPerfInfo((ZinIrPerf *)((char *)this + 56), a3);
  ZinNEPerfInfo::SetNEPerfInfo((ZinIrPerf *)((char *)this + 672), a3);
  if (ZinIrPerf::IsValidPerfInfo(this, a2))
    return 3;
  return ZinIrPerf::GetNEWorkUnitShapes(this);
}

uint64_t ZinIrPerf::ValidatePEPerfInfo(ZinIrPerf *this, const ZinANELayer *a2, const ZinPECustomPerfInfo *a3)
{
  ZinIrPerf::ValidatePerfInfo(this, a2);
  ZinCommonPerfInfo::SetCommonPerfInfo((ZinIrPerf *)((char *)this + 56), a3);
  if (*((_BYTE *)a3 + 536))
    *((_QWORD *)this + 106) = *((_QWORD *)a3 + 66);
  if (*((_BYTE *)a3 + 552))
    *((_QWORD *)this + 107) = *((_QWORD *)a3 + 68);
  return ZinIrPerf::IsValidPerfInfo(this, a2);
}

void ZinCommonPerfInfo::SetCommonPerfInfo(ZinCommonPerfInfo *this, const ZinCustomPerfInfo *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t *v30;

  if (*((_BYTE *)a2 + 112))
  {
    if (*((_BYTE *)a2 + 224))
      v3 = 2;
    else
      v3 = 1;
    v30 = (uint64_t *)((char *)this + 40);
    std::vector<BOOL>::resize((uint64_t)this + 40, v3, 0);
    std::vector<ZinTensorDimensions>::resize((uint64_t)this + 224, v3);
    std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 248), v3);
    std::vector<ZinTensorDimensions>::resize((uint64_t)this + 176, v3);
    std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 200), v3);
    v4 = 0;
    v5 = 0;
    v6 = (char *)this + 556;
    v7 = (char *)a2 + 104;
    do
    {
      if (*(v7 - 56))
      {
        v8 = *((_QWORD *)this + 22) + v4;
        v9 = *((_OWORD *)v7 - 6);
        v10 = *((_OWORD *)v7 - 5);
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v7 - 8);
        *(_OWORD *)v8 = v9;
        *(_OWORD *)(v8 + 16) = v10;
        v11 = *((_QWORD *)this + 28) + v4;
        v12 = *((_OWORD *)v7 - 6);
        v13 = *((_OWORD *)v7 - 5);
        *(_QWORD *)(v11 + 32) = *((_QWORD *)v7 - 8);
        *(_OWORD *)v11 = v12;
        *(_OWORD *)(v11 + 16) = v13;
      }
      if (*(v7 - 44))
      {
        v14 = *((_DWORD *)v7 - 12);
        if (IsFormatDMAConvertibleToFP16(v14))
          v15 = 3;
        else
          v15 = v14;
        *(_DWORD *)(*((_QWORD *)this + 25) + 4 * v5) = v15;
        *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v5) = *((_DWORD *)v7 - 12);
      }
      if (*(v7 - 39))
      {
        v16 = *v30;
        v17 = v5 >> 6;
        v18 = 1 << v5;
        if (*(v7 - 40))
          v19 = *(_QWORD *)(v16 + 8 * v17) | v18;
        else
          v19 = *(_QWORD *)(v16 + 8 * v17) & ~v18;
        *(_QWORD *)(v16 + 8 * v17) = v19;
      }
      if (*(v7 - 24))
        *((_QWORD *)this + v5 + 9) = *((_QWORD *)v7 - 4);
      if (*v7)
      {
        v20 = v6[16];
        *(_OWORD *)v6 = *((_OWORD *)v7 - 1);
        if (!v20)
          v6[16] = 1;
      }
      ++v5;
      v6 += 20;
      v4 += 40;
      v7 += 112;
    }
    while (v3 != v5);
  }
  if (*((_BYTE *)a2 + 336))
  {
    if (*((_BYTE *)a2 + 272))
    {
      v21 = *(_OWORD *)((char *)a2 + 232);
      v22 = *(_OWORD *)((char *)a2 + 248);
      *((_QWORD *)this + 38) = *((_QWORD *)a2 + 33);
      *((_OWORD *)this + 17) = v21;
      *((_OWORD *)this + 18) = v22;
    }
    if (*((_BYTE *)a2 + 284))
      *((_DWORD *)this + 78) = *((_DWORD *)a2 + 70);
    if (*((_BYTE *)a2 + 289))
      *((_BYTE *)this + 64) = *((_BYTE *)a2 + 288);
    if (*((_BYTE *)a2 + 304))
      *((_QWORD *)this + 11) = *((_QWORD *)a2 + 37);
    if (*((_BYTE *)a2 + 328))
    {
      v23 = *((unsigned __int8 *)this + 612);
      *(_OWORD *)((char *)this + 596) = *(_OWORD *)((char *)a2 + 312);
      if (!v23)
        *((_BYTE *)this + 612) = 1;
    }
  }
  if (*((_BYTE *)a2 + 352))
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 43);
  if (*((_BYTE *)a2 + 368))
  {
    v24 = (int *)((char *)a2 + 360);
    if (*((_BYTE *)this + 496))
    {
      v25 = *v24;
      *((_WORD *)this + 246) = *((_WORD *)a2 + 182);
      *((_DWORD *)this + 122) = v25;
    }
    else
    {
      *((_QWORD *)this + 61) = *(_QWORD *)v24;
      *((_BYTE *)this + 496) = 1;
    }
  }
  if (*((_BYTE *)a2 + 400))
  {
    v26 = *((unsigned __int8 *)this + 480);
    v27 = *((_QWORD *)a2 + 49);
    *(_OWORD *)((char *)this + 456) = *(_OWORD *)((char *)a2 + 376);
    *((_QWORD *)this + 59) = v27;
    if (!v26)
      *((_BYTE *)this + 480) = 1;
  }
  if (*((_BYTE *)a2 + 424))
    *((_QWORD *)this + 63) = *((_QWORD *)a2 + 52);
  if (*((_BYTE *)a2 + 440))
    *((_QWORD *)this + 64) = *((_QWORD *)a2 + 54);
  if (*((_BYTE *)a2 + 456))
    *((_QWORD *)this + 65) = *((_QWORD *)a2 + 56);
  if (*((_BYTE *)a2 + 488))
  {
    v28 = *((_OWORD *)a2 + 29);
    *((_QWORD *)this + 68) = *((_QWORD *)a2 + 60);
    *((_OWORD *)this + 33) = v28;
  }
  if (*((_BYTE *)a2 + 504))
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 62);
  if (*((_BYTE *)a2 + 520))
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 64);
  if (*((_BYTE *)a2 + 412))
    *((_DWORD *)this + 138) = *((_DWORD *)a2 + 102);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_207049B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<ZinTensorDimensions>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<ZinTensorDimensions>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 40 * a2;
  }
}

void ZinNEPerfInfo::SetNEPerfInfo(ZinNEPerfInfo *this, const ZinNECustomPerfInfo *a2)
{
  uint64_t v4;
  char *v5;

  if (*((_BYTE *)a2 + 561))
    *((_BYTE *)this + 56) = *((_BYTE *)a2 + 560);
  if (*((_BYTE *)a2 + 568))
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 141);
  if (*((_BYTE *)a2 + 573))
    *((_BYTE *)this + 68) = *((_BYTE *)a2 + 572);
  if (*((_BYTE *)a2 + 584))
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 72);
  if (*((_BYTE *)a2 + 593))
    *((_BYTE *)this + 80) = *((_BYTE *)a2 + 592);
  if (*((_BYTE *)a2 + 608))
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 75);
  if (*((_BYTE *)a2 + 624))
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 77);
  if (*((_BYTE *)a2 + 640))
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 79);
  if (*((_BYTE *)a2 + 656))
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 81);
  if (*((_BYTE *)a2 + 672))
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 83);
  if (*((_BYTE *)a2 + 684))
    *((_DWORD *)this + 15) = *((_DWORD *)a2 + 170);
  if (*((_BYTE *)a2 + 692))
  {
    *(_BYTE *)(*((_QWORD *)this + 21) + 341) = 1;
    *(double *)(*((_QWORD *)this + 21) + 384) = ZinGetWeightElementSizeInBytes(*((_DWORD *)a2 + 172));
    *((_DWORD *)this + 34) = *((_DWORD *)a2 + 172);
  }
  if (*((_BYTE *)a2 + 697))
    *((_BYTE *)this + 69) = *((_BYTE *)a2 + 696);
  if (*((_BYTE *)a2 + 712))
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 88);
  if (*((_BYTE *)a2 + 721))
    *((_BYTE *)this + 160) = *((_BYTE *)a2 + 720);
  if (*((_BYTE *)a2 + 723))
    *((_BYTE *)this + 161) = *((_BYTE *)a2 + 722);
  if (*((_BYTE *)a2 + 529))
  {
    v4 = *((_QWORD *)a2 + 68);
    v5 = (char *)*((_QWORD *)a2 + 67);
    if ((char *)v4 != v5 && (char *)this + 24 != (char *)a2 + 536)
      std::vector<WorkUnit>::__assign_with_size[abi:ne180100]<WorkUnit*,WorkUnit*>((char *)this + 24, v5, v4, 0xCCCCCCCCCCCCCCCDLL * ((v4 - (uint64_t)v5) >> 4));
  }
}

void ZinIrPerf::InitializeL2SrcInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  std::vector<int> *v6;
  int *v7;
  _BYTE *v8;
  _BYTE *v9;

  (*(void (**)(_BYTE **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(&v8, a2);
  v3 = v8;
  v4 = v9;
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  v5 = (v4 - v3) >> 3;
  v7 = (int *)*((_QWORD *)this + 29);
  v6 = (std::vector<int> *)((char *)this + 232);
  v6->__end_ = v7;
  v6[1].__end_ = v6[1].__begin_;
  std::vector<ZinTensorDimensions>::resize((uint64_t)v6, v5);
  std::vector<unsigned int>::resize(v6 + 1, v5);
}

void ZinIrPerf::InitializeDMASrcInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  unint64_t DMAInputCount;

  DMAInputCount = ZinMemSourceIndexTranslator::GetDMAInputCount(a2, a2);
  *((_QWORD *)this + 36) = *((_QWORD *)this + 35);
  *((_QWORD *)this + 39) = *((_QWORD *)this + 38);
  *((_QWORD *)this + 13) = 0;
  std::vector<ZinTensorDimensions>::resize((uint64_t)this + 280, DMAInputCount);
  std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 304), DMAInputCount);
  std::vector<BOOL>::resize((uint64_t)this + 96, DMAInputCount, 0);
}

uint64_t ZinIrPerf::GetEngineLayerFusedKernel@<X0>(const ZinANELayer *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = ZinIrOpLayer::IsNELayer(a1);
  if ((_DWORD)result)
    return (*(uint64_t (**)(const ZinANELayer *, _QWORD))(*(_QWORD *)a1 + 568))(a1, 0);
  *a2 = 0;
  return result;
}

uint64_t ZinIrPerf::ConfigurePerfInfoNEKernel(uint64_t this, const ZinIrKernel *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_BYTE *)(this + 396) = a2 != 0;
  if (a2)
  {
    v3 = this;
    *(double *)(this + 440) = ZinIrKernel::GetWeightElementSizeInBytes(a2);
    v4 = *(_OWORD *)((char *)a2 + 248);
    v5 = *(_OWORD *)((char *)a2 + 264);
    *(_QWORD *)(v3 + 432) = *((_QWORD *)a2 + 35);
    *(_OWORD *)(v3 + 400) = v4;
    *(_OWORD *)(v3 + 416) = v5;
    *(_QWORD *)&v4 = *((_QWORD *)a2 + 41);
    *(_QWORD *)&v5 = *((_QWORD *)a2 + 42);
    *(_QWORD *)&v6 = (int)v4;
    *((_QWORD *)&v6 + 1) = SDWORD1(v4);
    *(_OWORD *)(v3 + 184) = v6;
    *(_QWORD *)&v6 = (int)v5;
    *((_QWORD *)&v6 + 1) = SDWORD1(v5);
    *(_OWORD *)(v3 + 200) = v6;
    *(_QWORD *)&v4 = *((_QWORD *)a2 + 43);
    *(_QWORD *)&v6 = (int)v4;
    *((_QWORD *)&v6 + 1) = SDWORD1(v4);
    *(_OWORD *)(v3 + 216) = v6;
    v7 = *((_OWORD *)a2 + 22);
    *(_QWORD *)(v3 + 388) = *((_QWORD *)a2 + 46);
    *(_OWORD *)(v3 + 372) = v7;
    *(_DWORD *)(v3 + 808) = ZinIrKernel::GetWeightFormat(a2);
    this = ZinIrKernel::HasVectorPalettizedWeight(a2);
    if ((_DWORD)this)
      *(_QWORD *)(v3 + 816) = *((_QWORD *)a2 + 52);
    *(_QWORD *)(v3 + 448) = *((_QWORD *)a2 + 50);
    *(_DWORD *)(v3 + 456) = *((_DWORD *)a2 + 94);
  }
  return this;
}

void ZinIrPerf::AddKerneltoKernelNameSet(ZinIrPerf *this, ZinEngineLayerMirInfo **a2, uint64_t a3)
{
  _BYTE v6[24];
  void **v7;

  if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2))
  {
    ZinIrPerf::GetKernelSymbolNamesForActiveNE(a2, a3, (uint64_t)v6);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((uint64_t *)this, (uint64_t)v6);
    v7 = (void **)v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
}

void sub_207049FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPerf::HasRewoundKernel(ZinIrPerf *this, ZinEngineLayerMirInfo **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  unsigned __int8 *v9;
  std::string::size_type size;
  unsigned __int8 *v11;
  uint64_t v12;
  std::string v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  std::string *v17;

  ZinIrPerf::GetKernelSymbolNamesForActiveNE(a2, a3, (uint64_t)&v15);
  if (v15 == v16
    || (v5 = *(_QWORD *)this, v4 = *((_QWORD *)this + 1), v4 - *(_QWORD *)this == 24)
    || (v6 = v4 - 24, v4 - 24 == v5))
  {
    v12 = 0;
  }
  else
  {
    while (1)
    {
      memset(&v14, 0, sizeof(v14));
      v7 = *(__int128 **)(v6 - 24);
      v8 = *(__int128 **)(v6 - 16);
      v6 -= 24;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v7, v8, 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 3));
      size = v14.__r_.__value_.__l.__size_;
      v9 = (unsigned __int8 *)v14.__r_.__value_.__r.__words[0];
      v11 = v15;
      if (v14.__r_.__value_.__l.__size_ - v14.__r_.__value_.__r.__words[0] == v16 - v15)
        break;
LABEL_8:
      v17 = &v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
      v12 = 0;
      if (v6 == v5)
        goto LABEL_11;
    }
    while (v9 != (unsigned __int8 *)size)
    {
      if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v17, v9, v11))
        goto LABEL_8;
      v9 += 24;
      v11 += 24;
    }
    v17 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    v12 = 1;
  }
LABEL_11:
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  return v12;
}

void sub_20704A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void ZinIrPerf::ConfigureCacheHintKernelInfo(ZinIrPerf *this, const ZinANELayer *a2)
{
  ZinIrTensor *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  ZinIrTensor *v19;
  std::__shared_weak_count *v20;
  char v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;

  if (!*((_QWORD *)a2 + 33))
    ZinAssertImpl("Perf model internal error: missing mir_info");
  (*(void (**)(ZinIrTensor **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 128))(&v19, a2);
  v4 = v19;
  v5 = v20;
  if (!v20)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      return;
  }
  else
  {
LABEL_6:
    if (!v4)
      return;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  LOBYTE(v19) = 0;
  v21 = 0;
  ZinIrRegAllocUtil::FindSortedConsumersAndProducers(v4, (uint64_t *)&v25, (uint64_t *)&v22, (ZinTensorFamilyUtil *)&v19);
  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
  v8 = v25;
  v9 = v26 - v25;
  if (v26 != v25)
  {
    v10 = 0;
    v11 = v9 >> 3;
    if ((unint64_t)(v9 >> 3) <= 1)
      v12 = 1;
    else
      v12 = v9 >> 3;
    LOBYTE(v9) = 1;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)&v25[8 * v10] + 264);
      if (v13 && !*(_DWORD *)(v13 + 1412))
        break;
      LOBYTE(v9) = v11 > ++v10;
    }
    while (v12 != v10);
  }
  v14 = v22;
  if (v23 != v22)
  {
    v15 = (v23 - v22) >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (uint64_t)v22;
    do
    {
      if (*(const ZinANELayer **)v16 == a2)
        break;
      v17 = *(_QWORD *)(*(_QWORD *)v16 + 264);
      if (!v17)
        ZinAssertImpl("MirInfo must exist for MemCache analysis in perf model.");
      v18 = *(_DWORD *)(v17 + 1416);
      LOBYTE(v9) = !v18 || (v18 != 2) & v9;
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  if ((v9 & 1) != 0)
    *((_BYTE *)this + 611) = 1;
  if (v14)
  {
    v23 = v14;
    operator delete(v14);
    v8 = v25;
  }
  if (v8)
  {
    v26 = v8;
    operator delete(v8);
  }
}

void sub_20704A2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void *v12;

  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  v11 = *(void **)(v9 - 80);
  if (v11)
  {
    *(_QWORD *)(v9 - 72) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(v9 - 56);
  if (v12)
  {
    *(_QWORD *)(v9 - 48) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void ZinIrPerf::ConfigureMcacheInfo(ZinIrPerf *this, const ZinANELayer *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  int v10;
  const ZinIrTensor *InputTensor;
  char *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  ZinIrTensor *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  *((_DWORD *)this + 152) = 0;
  if (!*((_BYTE *)this + 49))
    return;
  if (*((_QWORD *)a2 + 33))
  {
    if (*((_QWORD *)a2 + 11) != *((_QWORD *)a2 + 12))
    {
      v6 = 0;
      v7 = 0;
      v8 = (char *)this + 608;
      while (1)
      {
        v38 = 0;
        if (!ZinMemSourceIndexTranslator::GetDMASrcIndex(a2, (const ZinANELayer *)v6, &v38, a4))
          break;
LABEL_35:
        v6 = ++v7;
        if (v7 >= (unint64_t)((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3))
        {
          if (!*(_DWORD *)(*((_QWORD *)a2 + 33) + 1412))
            *((_BYTE *)this + 610) = 1;
          ZinIrPerf::ConfigureCacheHintKernelInfo(this, a2);
          return;
        }
      }
      if (v38)
        v9 = 1420;
      else
        v9 = 1400;
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 33) + v9);
      InputTensor = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, v6);
      if (v10 || *((uint64_t *)a2 + 6) < 1)
        goto LABEL_10;
      v15 = *(_QWORD **)(*((_QWORD *)a2 + 11) + 8 * v6);
      if ((*(_DWORD *)(v15[8] + 8) - 28) > 2)
      {
LABEL_34:
        v8[v38] = 1;
        goto LABEL_35;
      }
      v16 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v15 + 32))(v15, 0, 0);
      ZinIrTensor::GetTensorFamily(v16, (uint64_t)&v39);
      if (v39 == v40)
      {
LABEL_27:
        v21 = 1;
        if (v39)
        {
LABEL_32:
          v40 = v39;
          operator delete(v39);
        }
      }
      else
      {
        v17 = v39;
        while (1)
        {
          v18 = *(_QWORD *)(*(_QWORD *)v17 + 96);
          v19 = *(_QWORD *)(v18 + 112);
          v20 = *(_QWORD *)(v18 + 120);
          if (v19 != v20)
            break;
LABEL_26:
          v17 += 8;
          if (v17 == v40)
            goto LABEL_27;
        }
        while (*(_QWORD *)(*(_QWORD *)v19 + 48) >= *((_QWORD *)a2 + 6))
        {
          v19 += 8;
          if (v19 == v20)
            goto LABEL_26;
        }
        v21 = 0;
        if (v39)
          goto LABEL_32;
      }
      if (!v21)
        goto LABEL_34;
LABEL_10:
      ContributingEngineLayer(InputTensor, (void **)&v39);
      if (v39 == v40)
      {
LABEL_15:
        v14 = 0;
        if (!v39)
          goto LABEL_17;
      }
      else
      {
        v12 = v39;
        while (1)
        {
          v13 = *(_QWORD *)(*(_QWORD *)v12 + 264);
          if (v13)
          {
            if (!*(_DWORD *)(v13 + 1412))
              break;
          }
          v12 += 8;
          if (v12 == v40)
            goto LABEL_15;
        }
        v14 = 1;
        if (!v39)
        {
LABEL_17:
          if (!v14)
            goto LABEL_35;
          goto LABEL_34;
        }
      }
      v40 = v39;
      operator delete(v39);
      goto LABEL_17;
    }
    v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
    if (v30)
      ZinIrPerf::ConfigureMcacheInfo(v30, v31, v32, v33, v34, v35, v36, v37);
  }
  else
  {
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
    if (v22)
      ZinIrPerf::ConfigureMcacheInfo(v22, v23, v24, v25, v26, v27, v28, v29);
  }
}

void **std::vector<std::vector<std::string>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::string>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20704A678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void ZinIrPerf::GetKernelSymbolNamesForActiveNE(ZinEngineLayerMirInfo **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char *v7;
  MirInfoChannelAssignment *ChannelAssignment;
  std::vector<std::string>::size_type NumNeededNEs;
  unint64_t i;
  MirInfoChannelAssignment *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  ZinEngineLayerMirInfo *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  std::string __p;
  std::__split_buffer<std::string> v35;

  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a1) || (v7 = (char *)(a1 + 17), !a1[17]))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a1[33]);
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    std::vector<std::string>::reserve((std::vector<std::string> *)a3, NumNeededNEs);
    if (a2)
    {
      for (i = 0; a2 != i; ++i)
      {
        if (!*(_QWORD *)v7)
          continue;
        if (!*(_QWORD *)(*(_QWORD *)v7 + 784))
          continue;
        v11 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a1[33]);
        if (i >= MirInfoChannelAssignment::GetNumNeededNEs(v11))
          continue;
        if ((*((unsigned int (**)(ZinEngineLayerMirInfo **))*a1 + 15))(a1))
        {
          GetTensorKernelSymbolName((uint64_t)(a1 + 17), i, &__p);
          v13 = *(_QWORD *)(a3 + 8);
          v12 = *(_QWORD *)(a3 + 16);
          if (v13 >= v12)
          {
            v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a3) >> 3);
            v15 = v14 + 1;
            if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a3) >> 3);
            if (2 * v16 > v15)
              v15 = 2 * v16;
            if (v16 >= 0x555555555555555)
              v17 = 0xAAAAAAAAAAAAAAALL;
            else
              v17 = v15;
            v35.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v17)
              goto LABEL_44;
            v25 = 0;
            goto LABEL_47;
          }
        }
        else
        {
          v18 = a1[17];
          if (*(_BYTE *)(*((_QWORD *)v18 + 98) + 1))
          {
            if (*((_BYTE *)a1[2] + 308))
            {
              if (*((char *)v18 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
              }
              else
              {
                v19 = *(_OWORD *)v18;
                __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
              }
            }
            else
            {
              ZinIrKernel::GetFinalHash(v18, (std::string *)&v35);
              v23 = std::string::insert((std::string *)&v35, 0, "K", 1uLL);
              v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
              v23->__r_.__value_.__l.__size_ = 0;
              v23->__r_.__value_.__r.__words[2] = 0;
              v23->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v35.__end_) < 0)
                operator delete(v35.__first_);
            }
            v13 = *(_QWORD *)(a3 + 8);
            v26 = *(_QWORD *)(a3 + 16);
            if (v13 >= v26)
            {
              v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a3) >> 3);
              v28 = v14 + 1;
              if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a3) >> 3);
              if (2 * v29 > v28)
                v28 = 2 * v29;
              if (v29 >= 0x555555555555555)
                v17 = 0xAAAAAAAAAAAAAAALL;
              else
                v17 = v28;
              v35.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
              if (v17)
                goto LABEL_44;
              v25 = 0;
              goto LABEL_47;
            }
          }
          else
          {
            GetKernelSymbolName(v18, i, *((unsigned __int8 *)a1[2] + 308) != 0, &__p);
            v13 = *(_QWORD *)(a3 + 8);
            v20 = *(_QWORD *)(a3 + 16);
            if (v13 >= v20)
            {
              v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a3) >> 3);
              v21 = v14 + 1;
              if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)a3) >> 3);
              if (2 * v22 > v21)
                v21 = 2 * v22;
              if (v22 >= 0x555555555555555)
                v17 = 0xAAAAAAAAAAAAAAALL;
              else
                v17 = v21;
              v35.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
              if (v17)
LABEL_44:
                v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v17);
              else
                v25 = 0;
LABEL_47:
              v30 = v25 + v14;
              v35.__first_ = v25;
              v35.__begin_ = v30;
              v35.__end_cap_.__value_ = &v25[v17];
              v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              v30->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
              memset(&__p, 0, sizeof(__p));
              v35.__end_ = v30 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v35);
              v32 = *(_QWORD *)(a3 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&v35);
              v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              *(_QWORD *)(a3 + 8) = v32;
              if (v33 < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              continue;
            }
          }
        }
        v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v27;
        *(_QWORD *)(a3 + 8) = v13 + 24;
      }
    }
  }
}

void sub_20704AA94(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t ZinIrPerf::DebugPrint@<X0>(ZinIrPerf *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *p_p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *__p;
  uint64_t v57;
  unsigned __int8 v58;
  void *v59;
  uint64_t v60;
  char v61;
  _QWORD v62[2];
  uint64_t v63;
  _QWORD v64[10];
  char v65;
  uint64_t v66;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v62);
  std::string::basic_string[abi:ne180100]<0>(&v59, &byte_207AF6795);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\n");
  if (v61 < 0)
  {
    v60 = 2;
    v4 = (char *)v59;
  }
  else
  {
    v61 = 2;
    v4 = (char *)&v59;
  }
  strcpy(v4, ", ");
  v5 = *((_QWORD *)this + 29);
  if (v5 != *((_QWORD *)this + 30))
  {
    v6 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"L2Src", 5);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" Dims: ", 7);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v62);
      v8 = v5;
      if (v5 != *((_QWORD *)this + 30))
      {
        if (v61 >= 0)
          v9 = &v59;
        else
          v9 = v59;
        if (v61 >= 0)
          v10 = v61;
        else
          v10 = v60;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v9, v10);
        v8 = *((_QWORD *)this + 30);
      }
      ++v6;
      v5 += 40;
    }
    while (v5 != v8);
  }
  if ((v58 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v58 & 0x80u) == 0)
    v12 = v58;
  else
    v12 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)p_p, v12);
  v13 = *((_QWORD *)this + 35);
  if (v13 != *((_QWORD *)this + 36))
  {
    v14 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"DMASrc", 6);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" Dims: ", 7);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v62);
      v16 = v13;
      if (v13 != *((_QWORD *)this + 36))
      {
        if (v61 >= 0)
          v17 = &v59;
        else
          v17 = v59;
        if (v61 >= 0)
          v18 = v61;
        else
          v18 = v60;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v17, v18);
        v16 = *((_QWORD *)this + 36);
      }
      ++v14;
      v13 += 40;
    }
    while (v13 != v16);
  }
  if ((v58 & 0x80u) == 0)
    v19 = &__p;
  else
    v19 = __p;
  if ((v58 & 0x80u) == 0)
    v20 = v58;
  else
    v20 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"OutputDims: ", 12);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v62);
  if ((v58 & 0x80u) == 0)
    v21 = &__p;
  else
    v21 = __p;
  if ((v58 & 0x80u) == 0)
    v22 = v58;
  else
    v22 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v21, v22);
  if (v61 < 0)
  {
    v60 = 16;
    v23 = (char *)v59;
  }
  else
  {
    v61 = 16;
    v23 = (char *)&v59;
  }
  strcpy(v23, "InputResidency: ");
  v25 = *((_QWORD *)this + 12);
  v24 = *((_QWORD *)this + 13);
  v26 = v24 & 0x3F;
  if (v24 > 0x3F || (v24 & 0x3F) != 0)
  {
    v27 = 0;
    v28 = 0;
    v29 = v25 + 8 * (v24 >> 6);
    do
    {
      if (v61 >= 0)
        v30 = &v59;
      else
        v30 = v59;
      if (v61 >= 0)
        v31 = v61;
      else
        v31 = v60;
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v30, v31);
      *(_DWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 8) |= 1u;
      std::ostream::operator<<();
      if (v61 < 0)
      {
        v60 = 2;
        v33 = (char *)v59;
      }
      else
      {
        v61 = 2;
        v33 = (char *)&v59;
      }
      strcpy(v33, ", ");
      v25 += 8 * (v27 == 63);
      if (v27 == 63)
        v28 = 0;
      else
        ++v28;
      v27 = v28;
    }
    while (v25 != v29 || v26 != v28);
  }
  if ((v58 & 0x80u) == 0)
    v34 = &__p;
  else
    v34 = __p;
  if ((v58 & 0x80u) == 0)
    v35 = v58;
  else
    v35 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v34, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"OutputResidency: ", 17);
  *(_DWORD *)((char *)v64 + *(_QWORD *)(v63 - 24)) |= 1u;
  std::ostream::operator<<();
  if ((v58 & 0x80u) == 0)
    v36 = &__p;
  else
    v36 = __p;
  if ((v58 & 0x80u) == 0)
    v37 = v58;
  else
    v37 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v36, v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"active_ne: ", 11);
  std::ostream::operator<<();
  if ((v58 & 0x80u) == 0)
    v38 = &__p;
  else
    v38 = __p;
  if ((v58 & 0x80u) == 0)
    v39 = v58;
  else
    v39 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v38, v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"sh_min/sh_pref/sh_max: ", 23);
  v40 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ", 2);
  v41 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
  v42 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", ", 2);
  if ((v58 & 0x80u) == 0)
    v43 = &__p;
  else
    v43 = __p;
  if ((v58 & 0x80u) == 0)
    v44 = v58;
  else
    v44 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v43, v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"ocg_size: ", 10);
  v45 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", ", 2);
  if ((v58 & 0x80u) == 0)
    v46 = &__p;
  else
    v46 = __p;
  if ((v58 & 0x80u) == 0)
    v47 = v58;
  else
    v47 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v46, v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"tile_height: ", 13);
  v48 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
  if ((v58 & 0x80u) == 0)
    v49 = &__p;
  else
    v49 = __p;
  if ((v58 & 0x80u) == 0)
    v50 = v58;
  else
    v50 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v49, v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"num_workunits: ", 15);
  v51 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
  if ((v58 & 0x80u) == 0)
    v52 = &__p;
  else
    v52 = __p;
  if ((v58 & 0x80u) == 0)
    v53 = v58;
  else
    v53 = v57;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v52, v53);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v64, a2);
  if ((char)v58 < 0)
    operator delete(__p);
  if (v61 < 0)
    operator delete(v59);
  v62[0] = *MEMORY[0x24BEDB7F0];
  v54 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v62 + *(_QWORD *)(v62[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v63 = v54;
  v64[0] = MEMORY[0x24BEDB848] + 16;
  if (v65 < 0)
    operator delete((void *)v64[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v66);
}

void sub_20704B15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPerfInfo::GetNumWorkunits(ZinNEPerfInfo *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t ZinCustomPerfInfo::SetCustomPerfInfo(ZinCustomPerfInfo *this, const ZinEngineLayerMirInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a2)
    return 3;
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 25);
  *((_BYTE *)this + 352) = 1;
  v2 = *((_QWORD *)a2 + 27);
  if (!*((_BYTE *)this + 424))
    *((_BYTE *)this + 424) = 1;
  *((_QWORD *)this + 52) = v2;
  v3 = *((_QWORD *)a2 + 26);
  if (!*((_BYTE *)this + 440))
    *((_BYTE *)this + 440) = 1;
  *((_QWORD *)this + 54) = v3;
  v4 = *((_QWORD *)a2 + 28);
  if (!*((_BYTE *)this + 456))
    *((_BYTE *)this + 456) = 1;
  v5 = 0;
  *((_QWORD *)this + 56) = v4;
  return v5;
}

uint64_t ZinNECustomPerfInfo::SetCustomPerfInfo(ZinNECustomPerfInfo *this, const ZinEngineLayerMirInfo *a2)
{
  uint64_t v4;
  ZinIrTarget *ChannelAssignment;
  MirInfoChannelAssignment *v6;
  MirInfoChannelAssignment *v7;
  char v8;
  MirInfoChannelAssignment *v9;

  v4 = ZinCustomPerfInfo::SetCustomPerfInfo(this, a2);
  if (!(_DWORD)v4)
  {
    ChannelAssignment = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(a2);
    *((_QWORD *)this + 88) = ZinIrTarget::GetLut(ChannelAssignment);
    *((_BYTE *)this + 712) = 1;
    v6 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2);
    *((_WORD *)this + 360) = MirInfoChannelAssignment::GetFatTileEnable(v6) | 0x100;
    v7 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2);
    *((_QWORD *)this + 72) = MirInfoChannelAssignment::GetActiveNEPerCluster(v7);
    *((_BYTE *)this + 584) = 1;
    *((_DWORD *)this + 141) = *((_DWORD *)a2 + 36);
    *((_BYTE *)this + 568) = 1;
    v8 = *((_BYTE *)a2 + 149);
    if (!*((_BYTE *)this + 573))
      *((_BYTE *)this + 573) = 1;
    *((_BYTE *)this + 572) = v8;
    *((_WORD *)this + 296) = *(unsigned __int8 *)a2 | 0x100;
    *((_QWORD *)this + 75) = *((_QWORD *)a2 + 12);
    *((_BYTE *)this + 608) = 1;
    v9 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2);
    *((_QWORD *)this + 77) = MirInfoChannelAssignment::GetOCGSize(v9);
    *((_BYTE *)this + 624) = 1;
    *((_QWORD *)this + 79) = *((_QWORD *)a2 + 17);
    *((_BYTE *)this + 640) = 1;
    *((_QWORD *)this + 83) = *((_QWORD *)a2 + 15);
    *((_BYTE *)this + 672) = 1;
    *((_QWORD *)this + 81) = *((_QWORD *)a2 + 16);
    *((_BYTE *)this + 656) = 1;
    *((_WORD *)this + 348) = *((unsigned __int8 *)a2 + 1) | 0x100;
    *((_WORD *)this + 361) = *((unsigned __int8 *)a2 + 148) | 0x100;
  }
  return v4;
}

uint64_t ZinPECustomPerfInfo::SetCustomPerfInfo(ZinPECustomPerfInfo *this, const ZinEngineLayerMirInfo *a2)
{
  uint64_t result;

  result = ZinCustomPerfInfo::SetCustomPerfInfo(this, a2);
  if (!(_DWORD)result)
  {
    *((_QWORD *)this + 68) = *((_QWORD *)a2 + 31);
    *((_BYTE *)this + 552) = 1;
    *((_QWORD *)this + 66) = *((_QWORD *)a2 + 30);
    *((_BYTE *)this + 536) = 1;
  }
  return result;
}

void ZinPECustomPerfInfo::~ZinPECustomPerfInfo(ZinPECustomPerfInfo *this)
{
  JUMPOUT(0x20BD002F8);
}

void ZinEnginePerf::ZinEnginePerf(ZinEnginePerf *this, const ZinIrPerf *a2)
{
  *(_QWORD *)this = &unk_24C0174D8;
  ZinPerfDescriptor::ZinPerfDescriptor((ZinEnginePerf *)((char *)this + 8));
  *((_QWORD *)this + 42) = a2;
  ZinDMAPerf::ZinDMAPerf((ZinEnginePerf *)((char *)this + 344), a2);
}

void sub_20704B410(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 208);
  if (v3)
  {
    *(_QWORD *)(v1 + 216) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinPerfDescriptor::ZinPerfDescriptor(ZinPerfDescriptor *this)
{
  _QWORD *v2;

  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = operator new(8uLL);
  *((_QWORD *)this + 25) = v2;
  *v2++ = 0;
  *((_QWORD *)this + 26) = v2;
  *((_QWORD *)this + 27) = v2;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 15) = _Q0;
  *((_OWORD *)this + 16) = _Q0;
  *((_OWORD *)this + 17) = _Q0;
  *((_OWORD *)this + 18) = _Q0;
  *((_QWORD *)this + 38) = 0;
  *((_BYTE *)this + 312) = 0;
  *((_QWORD *)this + 40) = 0;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void std::vector<ZinTensorDimensions>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_BYTE **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    std::vector<ZinTensorDimensions>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    v8 = *a1;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 3);
    v10 = v9 + a2;
    if (v9 + a2 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v4, v12);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[40 * v9];
    v15 = &v13[40 * v12];
    v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    memset_pattern16(v14, &unk_207A80400, v16);
    v17 = &v14[v16];
    if (v7 != v8)
    {
      do
      {
        v18 = *(_OWORD *)(v7 - 40);
        v19 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v14 - 24) = v19;
        *(_OWORD *)(v14 - 40) = v18;
        v14 -= 40;
        v7 -= 40;
      }
      while (v7 != v8);
      v8 = *a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v8)
      operator delete(v8);
  }
}

void ContributingEngineLayer(const ZinIrTensor *a1@<X0>, void **a2@<X8>)
{
  ZinIrOpLayer *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **i;
  ZinIrOpLayer *v13;
  unint64_t v14;
  ZinIrOpLayer **v15;
  _QWORD *v16;
  const ZinIrTensor *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  ZinIrOpLayer **v23;
  char *v24;
  char *v25;
  ZinIrOpLayer *v26;
  void *__p;
  char *v28;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (ZinIrOpLayer *)*((_QWORD *)a1 + 12);
  if (ZinIrOpLayer::IsANELayer(v3))
  {
    v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), 1uLL);
    v6 = &v4[v5];
    *v4 = v3;
    v7 = v4 + 1;
    v9 = (char *)*a2;
    v8 = (char *)a2[1];
    if (v8 != *a2)
    {
      do
      {
        v10 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v4 = v10;
      }
      while (v8 != v9);
      v8 = (char *)*a2;
    }
    *a2 = v4;
    a2[1] = v7;
    a2[2] = v6;
    if (v8)
      operator delete(v8);
    a2[1] = v7;
  }
  else
  {
    v11 = (ZinIrOpLayer **)*((_QWORD *)v3 + 11);
    for (i = (ZinIrOpLayer **)*((_QWORD *)v3 + 12); v11 != i; ++v11)
    {
      v13 = *v11;
      if (ZinIrOpLayer::IsANELayer(*v11))
      {
        v15 = (ZinIrOpLayer **)a2[1];
        v14 = (unint64_t)a2[2];
        if ((unint64_t)v15 >= v14)
        {
          v18 = ((char *)v15 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v19 = v14 - (_QWORD)*a2;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v21);
          else
            v22 = 0;
          v23 = (ZinIrOpLayer **)&v22[8 * v18];
          *v23 = v13;
          v16 = v23 + 1;
          v25 = (char *)*a2;
          v24 = (char *)a2[1];
          if (v24 != *a2)
          {
            do
            {
              v26 = (ZinIrOpLayer *)*((_QWORD *)v24 - 1);
              v24 -= 8;
              *--v23 = v26;
            }
            while (v24 != v25);
            v24 = (char *)*a2;
          }
          *a2 = v23;
          a2[1] = v16;
          a2[2] = &v22[8 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v15 = v13;
          v16 = v15 + 1;
        }
        a2[1] = v16;
      }
      else
      {
        v17 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
        ContributingEngineLayer((uint64_t *)&__p, v17);
        std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)a2, (uint64_t)a2[1], (char *)__p, v28, (v28 - (_BYTE *)__p) >> 3);
        if (__p)
        {
          v28 = (char *)__p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_20704B928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void ZinIrPerf::IsValidPerfInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid operating conditions.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Hal Params\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Empty L2 source dimension\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Empty DMA source dimension\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "L2 src dimensions shouldn not be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Empty L2 source format\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "l2 src fmt is invalid\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "DMA src dimensions should not be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Empty DMA src format\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Output tensor dimension must not have zero dimension\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.stride.ox cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.stride.oy cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.stride.oz cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.stride.sx cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.stride.sy cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.stride.sz cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.tile_height cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "output fmt is invalid\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.wdma_interleave cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ne_info_.active_ne cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ne_info_.ocg_size cannot be zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Num groups and batch cannot be bigger than 1 at the same time.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid NE perf info for multicast.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid workunit stacking configuration.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "The number of output channel groups must be 1 with multicast.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "More than one tileSrc compression is not allowed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Chained task must not be nullptr, if chain_analysis is enabled.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Interleave should not be less than 1", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "RDMA input dimension and input format should have the same size\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.dma_src_dims and common_info_.input_is_resident should have same size\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "common_info_.l2_src_dims and common_info_.l2_src_fmt should have same size\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrPerf::CalculatePerfDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Given opcode is not supported by ZinPerfModel", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrPerf::ValidatePerfAnalysisMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] MCache analysis mode requires graph info", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Chain/L2-dependent analysis require entire perf domain analysis.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] L2 Dep analysis mode requires graph info", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Chain analysis mode requires graph info", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrPerf::ValidateDefaultPerfInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] ValidatePerfInfo() failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrPerf::ValidatePerfInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Validating MirInfo is failed.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Invalid Opcode for perf model", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Requires an ZinANELayer", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrPerf::ConfigureInputTensorInfo(uint8_t *buf, _BYTE *a2)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Attempting to configure invalid L2 source info", buf, 2u);
}

void ZinIrPerf::ConfigurePerfInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid mir_info.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrPerf::ValidateNEPerfInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ValidatePerfInfo() failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrPerf::ConfigureMcacheInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_6(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[Perf model] Mcache analysis will be skipped due to missing mir-info.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_2_6(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[Perf model] Mcache analysis will be skipped due to missing graph information.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinGetRegisterProgramming<7u>::GetWin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 460) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<7u>::GetHin(uint64_t a1)
{
  return *(_WORD *)(a1 + 462) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<7u>::GetDin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 464) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<7u>::GetCin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 472) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<7u>::GetWout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 480) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<7u>::GetHout(uint64_t a1)
{
  return *(_WORD *)(a1 + 482) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<7u>::GetDout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 484) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<7u>::GetCout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 476) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetWin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 492) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetHin(uint64_t a1)
{
  return *(_WORD *)(a1 + 494) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetDin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 496) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetCin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 504) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetWout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 512) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetHout(uint64_t a1)
{
  return *(_WORD *)(a1 + 514) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetDout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 516) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetCout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 508) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetNumGroups(uint64_t a1)
{
  return *(_DWORD *)(a1 + 532) & 0x1FFF;
}

uint64_t ZinGetRegisterProgramming<8u>::GetCommonTaskType(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_DWORD *)(a1 + 548) >> 4;
  if (v1 >= 9 || ((0x17Fu >> v1) & 1) == 0)
    ZinAssertImpl("Error: Invalid Task Type");
  return qword_207AB3DB8[v1];
}

BOOL ZinGetRegisterProgramming<8u>::IsTexModeEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 776) & 7) != 0;
}

BOOL ZinGetRegisterProgramming<8u>::IsPEIndexingEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 966) & 7) != 0;
}

uint64_t ZinGetRegisterProgramming<8u>::IsSource1Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 864) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::IsSource2Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 868) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::IsResultEphemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 912) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::GetCircularBufferSrc1(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 940) & 7u) >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[*(_DWORD *)(a1 + 940) & 7] | qword_207AB3E00[*(_DWORD *)(a1 + 940) & 7];
}

uint64_t ZinGetRegisterProgramming<8u>::GetCircularBufferSrc2(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 940) >> 4) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

uint64_t ZinGetRegisterProgramming<8u>::GetCircularBufferResult(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 940) >> 8) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

BOOL ZinGetRegisterProgramming<8u>::HasReduction(uint64_t a1)
{
  uint64_t CommonTaskType;

  CommonTaskType = ZinGetRegisterProgramming<8u>::GetCommonTaskType(a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  return (CommonTaskType - 3) < 2;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc1Transpose(uint64_t a1)
{
  return *(_BYTE *)(a1 + 545) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::GetSrc1Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 683) & 0xF;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc1HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 544) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc1DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 544) >> 2) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc1CBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 544) >> 3) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc1WBroadcast(uint64_t a1)
{
  return *(_DWORD *)(a1 + 544) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::IsTileDmaSrc1Compressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 696) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc2Transpose(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 545) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::GetSrc2Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 687) & 0xF;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc2HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 544) >> 5) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc2DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 544) >> 6) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc2CBroadcast(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 544) >> 7;
}

uint64_t ZinGetRegisterProgramming<8u>::HasSrc2WBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 544) >> 4) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::IsTileDmaSrc2Compressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 712) & 1;
}

BOOL ZinGetRegisterProgramming<8u>::HasOutputTranspose(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 544) & 0x400 | *(_DWORD *)(a1 + 548) & 0x10000000) != 0;
}

uint64_t ZinGetRegisterProgramming<8u>::GetOutputInterleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1163) & 0xF;
}

uint64_t ZinGetRegisterProgramming<8u>::IsTileDmaDstCompressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1168) & 1;
}

uint64_t ZinGetRegisterProgramming<8u>::GetTextureMode(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 776) & 7u) >= 5)
    ZinAssertImpl("Invalid texture mode");
  return dword_207AB3E50[*(_DWORD *)(a1 + 776) & 7];
}

uint64_t ZinGetRegisterProgramming<8u>::GetTextureSourceDimensions@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (unint64_t)*(unsigned int *)(result + 796) >> 16;
  v3 = *(unsigned __int16 *)(result + 800);
  v4 = (unint64_t)*(unsigned int *)(result + 792) >> 16;
  v5 = (unsigned __int16)*(_DWORD *)(result + 796);
  *a2 = (unsigned __int16)*(_DWORD *)(result + 792);
  a2[1] = v3;
  a2[2] = v2;
  a2[3] = v5;
  a2[4] = v4;
  return result;
}

uint64_t ZinGetRegisterProgramming<8u>::GetGatherModeIndexGroupDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 780) >> 12) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<8u>::GetGatherModeIndexDepthDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 780) >> 9) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<8u>::GetGatherModeIndexPlaneDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 780) >> 6) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<8u>::GetGatherModeIndexHeightDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 780) >> 3) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<8u>::GetGatherModeIndexWidthDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch(*(_DWORD *)(a1 + 780) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<8u>::GetDmaSrc1FormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 680) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<8u>::GetDmaSrc2FormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 684) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<8u>::GetDmaDstFormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 1160) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<10u>::GetWin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 244) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetHin(uint64_t a1)
{
  return *(_WORD *)(a1 + 246) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetDin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 248) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetCin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 256) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetWout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 264) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetHout(uint64_t a1)
{
  return *(_WORD *)(a1 + 266) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetDout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 268) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetCout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 260) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetNumGroups(uint64_t a1)
{
  return *(_DWORD *)(a1 + 284) & 0x1FFF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetCommonTaskType(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_DWORD *)(a1 + 300) >> 4;
  if (v1 >= 9 || ((0x17Fu >> v1) & 1) == 0)
    ZinAssertImpl("Error: Invalid Task Type");
  return qword_207AB3DB8[v1];
}

BOOL ZinGetRegisterProgramming<10u>::IsTexModeEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 528) & 7) != 0;
}

BOOL ZinGetRegisterProgramming<10u>::IsPEIndexingEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 718) & 7) != 0;
}

uint64_t ZinGetRegisterProgramming<10u>::IsSource1Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 616) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::IsSource2Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 620) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::IsResultEphemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 664) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::GetCircularBufferSrc1(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 692) & 7u) >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[*(_DWORD *)(a1 + 692) & 7] | qword_207AB3E00[*(_DWORD *)(a1 + 692) & 7];
}

uint64_t ZinGetRegisterProgramming<10u>::GetCircularBufferSrc2(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 692) >> 4) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

uint64_t ZinGetRegisterProgramming<10u>::GetCircularBufferResult(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 692) >> 8) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

BOOL ZinGetRegisterProgramming<10u>::HasReduction(uint64_t a1)
{
  uint64_t CommonTaskType;

  CommonTaskType = ZinGetRegisterProgramming<10u>::GetCommonTaskType(a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  return (CommonTaskType - 3) < 2;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc1Transpose(uint64_t a1)
{
  return *(_BYTE *)(a1 + 297) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::GetSrc1Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 435) & 0xF;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc1HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 296) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc1DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 296) >> 2) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc1CBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 296) >> 3) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc1WBroadcast(uint64_t a1)
{
  return *(_DWORD *)(a1 + 296) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::IsTileDmaSrc1Compressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 448) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc2Transpose(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 297) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::GetSrc2Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 439) & 0xF;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc2HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 296) >> 5) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc2DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 296) >> 6) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc2CBroadcast(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 296) >> 7;
}

uint64_t ZinGetRegisterProgramming<10u>::HasSrc2WBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 296) >> 4) & 1;
}

uint64_t ZinGetRegisterProgramming<10u>::IsTileDmaSrc2Compressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 464) & 1;
}

BOOL ZinGetRegisterProgramming<10u>::HasOutputTranspose(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 296) & 0x400 | *(_DWORD *)(a1 + 300) & 0x10000000) != 0;
}

uint64_t ZinGetRegisterProgramming<10u>::GetOutputInterleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 915) & 0xF;
}

uint64_t ZinGetRegisterProgramming<10u>::GetTextureMode(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 528) & 7u) >= 5)
    ZinAssertImpl("Invalid texture mode");
  return dword_207AB3E50[*(_DWORD *)(a1 + 528) & 7];
}

uint64_t ZinGetRegisterProgramming<10u>::GetTextureSourceDimensions@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (unint64_t)*(unsigned int *)(result + 548) >> 16;
  v3 = *(unsigned __int16 *)(result + 552);
  v4 = (unint64_t)*(unsigned int *)(result + 544) >> 16;
  v5 = (unsigned __int16)*(_DWORD *)(result + 548);
  *a2 = (unsigned __int16)*(_DWORD *)(result + 544);
  a2[1] = v3;
  a2[2] = v2;
  a2[3] = v5;
  a2[4] = v4;
  return result;
}

uint64_t ZinGetRegisterProgramming<10u>::GetGatherModeIndexGroupDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 532) >> 12) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 256) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 244);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 246);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 248);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 284) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<10u>::GetGatherModeIndexDepthDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 532) >> 9) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 256) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 244);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 246);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 248);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 284) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<10u>::GetGatherModeIndexPlaneDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 532) >> 6) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 256) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 244);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 246);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 248);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 284) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<10u>::GetGatherModeIndexHeightDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 532) >> 3) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 256) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 244);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 246);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 248);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 284) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<10u>::GetGatherModeIndexWidthDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch(*(_DWORD *)(a1 + 532) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 256) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 244);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 246);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 248);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 284) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<10u>::GetDmaSrc1FormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 432) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<10u>::GetDmaSrc2FormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 436) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<10u>::GetDmaDstFormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 912) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<11u>::GetHin(uint64_t a1)
{
  return *(_WORD *)(a1 + 486) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetDin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 488) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetCin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 496) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetWout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 504) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetHout(uint64_t a1)
{
  return *(_WORD *)(a1 + 506) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetDout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 508) & 0x7FFF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetCout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 500) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetNumGroups(uint64_t a1)
{
  return *(_DWORD *)(a1 + 524) & 0x1FFF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetCommonTaskType(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 540) >> 4) & 7;
  if ((_DWORD)v1 == 7)
    ZinAssertImpl("Error: Invalid Task Type");
  return qword_207AB3D80[v1];
}

BOOL ZinGetRegisterProgramming<11u>::IsTexModeEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 704) & 7) != 0;
}

uint64_t ZinGetRegisterProgramming<11u>::IsSource1Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 792) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::IsSource2Ephemeral(uint64_t a1)
{
  return *(_BYTE *)(a1 + 795) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::IsResultEphemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 836) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::GetCircularBufferSrc1(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 864) & 7u) >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[*(_DWORD *)(a1 + 864) & 7] | qword_207AB3E00[*(_DWORD *)(a1 + 864) & 7];
}

uint64_t ZinGetRegisterProgramming<11u>::GetCircularBufferSrc2(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 864) >> 4) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

uint64_t ZinGetRegisterProgramming<11u>::GetCircularBufferResult(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 864) >> 8) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

BOOL ZinGetRegisterProgramming<11u>::HasReduction(uint64_t a1)
{
  uint64_t CommonTaskType;

  CommonTaskType = ZinGetRegisterProgramming<11u>::GetCommonTaskType(a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  return (CommonTaskType - 3) < 2;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc1Transpose(uint64_t a1)
{
  return *(_BYTE *)(a1 + 537) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::GetSrc1Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 651) & 0xF;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc1HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 536) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc1DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 536) >> 2) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc1CBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 536) >> 3) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc1WBroadcast(uint64_t a1)
{
  return *(_DWORD *)(a1 + 536) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc2Transpose(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 537) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::GetSrc2Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 655) & 0xF;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc2HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 536) >> 5) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc2DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 536) >> 6) & 1;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc2CBroadcast(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 536) >> 7;
}

uint64_t ZinGetRegisterProgramming<11u>::HasSrc2WBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 536) >> 4) & 1;
}

BOOL ZinGetRegisterProgramming<11u>::HasOutputTranspose(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 536) & 0x400 | *(_DWORD *)(a1 + 540) & 0x10000000) != 0;
}

uint64_t ZinGetRegisterProgramming<11u>::GetOutputInterleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 987) & 0xF;
}

uint64_t ZinGetRegisterProgramming<11u>::GetTextureMode(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 704) & 7u) >= 5)
    ZinAssertImpl("Invalid texture mode");
  return dword_207AB3E50[*(_DWORD *)(a1 + 704) & 7];
}

uint64_t ZinGetRegisterProgramming<11u>::GetTextureSourceDimensions@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (unint64_t)*(unsigned int *)(result + 724) >> 16;
  v3 = *(unsigned __int16 *)(result + 728);
  v4 = (unint64_t)*(unsigned int *)(result + 720) >> 16;
  v5 = (unsigned __int16)*(_DWORD *)(result + 724);
  *a2 = (unsigned __int16)*(_DWORD *)(result + 720);
  a2[1] = v3;
  a2[2] = v2;
  a2[3] = v5;
  a2[4] = v4;
  return result;
}

uint64_t ZinGetRegisterProgramming<11u>::GetGatherModeIndexGroupDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 708) >> 12) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<11u>::GetGatherModeIndexDepthDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 708) >> 9) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<11u>::GetGatherModeIndexPlaneDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 708) >> 6) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<11u>::GetGatherModeIndexHeightDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 708) >> 3) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<11u>::GetGatherModeIndexWidthDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch(*(_DWORD *)(a1 + 708) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<17u>::GetDin(uint64_t a1)
{
  return *(_DWORD *)(a1 + 512) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<17u>::GetWout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 516) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<17u>::GetHout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 520) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<17u>::GetDout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 528) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<17u>::GetCout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 524) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<17u>::GetNumGroups(uint64_t a1)
{
  return *(_DWORD *)(a1 + 532) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<17u>::GetCommonTaskType(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_DWORD *)(a1 + 556) >> 4;
  if (v1 >= 9 || ((0x17Fu >> v1) & 1) == 0)
    ZinAssertImpl("Error: Invalid Task Type");
  return qword_207AB3DB8[v1];
}

BOOL ZinGetRegisterProgramming<17u>::IsTexModeEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 796) & 7) != 0;
}

BOOL ZinGetRegisterProgramming<17u>::IsPEIndexingEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 1070) & 7) != 0;
}

uint64_t ZinGetRegisterProgramming<17u>::IsSource1Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 932) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::IsSource2Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 936) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::IsResultEphemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1000) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::GetCircularBufferSrc1(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 1028) & 7u) >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[*(_DWORD *)(a1 + 1028) & 7] | qword_207AB3E00[*(_DWORD *)(a1 + 1028) & 7];
}

uint64_t ZinGetRegisterProgramming<17u>::GetCircularBufferSrc2(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 1028) >> 4) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

uint64_t ZinGetRegisterProgramming<17u>::GetCircularBufferResult(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 1028) >> 8) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

BOOL ZinGetRegisterProgramming<17u>::HasReduction(uint64_t a1)
{
  uint64_t CommonTaskType;

  CommonTaskType = ZinGetRegisterProgramming<17u>::GetCommonTaskType(a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  return (CommonTaskType - 3) < 2;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc1Transpose(uint64_t a1)
{
  return *(_BYTE *)(a1 + 569) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::GetSrc1Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 703) & 0xF;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc1HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 568) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc1DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 568) >> 2) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc1CBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 568) >> 3) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc1WBroadcast(uint64_t a1)
{
  return *(_DWORD *)(a1 + 568) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::IsTileDmaSrc1Compressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 716) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc2Transpose(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 569) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::GetSrc2Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 707) & 0xF;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc2HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 568) >> 5) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc2DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 568) >> 6) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc2CBroadcast(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 568) >> 7;
}

uint64_t ZinGetRegisterProgramming<17u>::HasSrc2WBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 568) >> 4) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::IsTileDmaSrc2Compressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 732) & 1;
}

BOOL ZinGetRegisterProgramming<17u>::HasOutputTranspose(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 568) & 0x400 | *(_DWORD *)(a1 + 556) & 0x10000000) != 0;
}

uint64_t ZinGetRegisterProgramming<17u>::GetOutputInterleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1283) & 0xF;
}

uint64_t ZinGetRegisterProgramming<17u>::IsTileDmaDstCompressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1288) & 1;
}

uint64_t ZinGetRegisterProgramming<17u>::GetTextureMode(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 796) & 7u) >= 5)
    ZinAssertImpl("Invalid texture mode");
  return dword_207AB3E50[*(_DWORD *)(a1 + 796) & 7];
}

float ZinGetRegisterProgramming<17u>::GetTextureSourceDimensions@<S0>(int8x8_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  int8x8_t v3;
  int8x8_t v4;
  unsigned __int16 v5;
  int8x8_t v6;
  __int128 v7;

  v2 = (unint64_t)a1[101].u32[1] >> 16;
  *(_QWORD *)a2 = (unsigned __int16)a1[101].i32[1];
  v3 = a1[102];
  v4 = (int8x8_t)vshr_n_u32((uint32x2_t)v3, 0x10uLL);
  v5 = v3.i16[0];
  v3.i16[3] = 0;
  v6 = vext_s8(v3, v4, 4uLL);
  *(_QWORD *)&v7 = v6.u32[0];
  *((_QWORD *)&v7 + 1) = v6.u32[1];
  *(_OWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v2;
  return *(float *)v6.i32;
}

uint64_t ZinGetRegisterProgramming<17u>::GetGatherModeIndexGroupDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch((a1[200] >> 12) & 7)
  {
    case 0:
      v1 = a1[127];
      goto LABEL_8;
    case 1:
      v1 = a1[125];
      goto LABEL_8;
    case 2:
      v1 = a1[126];
      goto LABEL_8;
    case 3:
      v1 = a1[128];
      goto LABEL_8;
    case 4:
      v1 = a1[133];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<17u>::GetGatherModeIndexDepthDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch((a1[200] >> 9) & 7)
  {
    case 0:
      v1 = a1[127];
      goto LABEL_8;
    case 1:
      v1 = a1[125];
      goto LABEL_8;
    case 2:
      v1 = a1[126];
      goto LABEL_8;
    case 3:
      v1 = a1[128];
      goto LABEL_8;
    case 4:
      v1 = a1[133];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<17u>::GetGatherModeIndexPlaneDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch((a1[200] >> 6) & 7)
  {
    case 0:
      v1 = a1[127];
      goto LABEL_8;
    case 1:
      v1 = a1[125];
      goto LABEL_8;
    case 2:
      v1 = a1[126];
      goto LABEL_8;
    case 3:
      v1 = a1[128];
      goto LABEL_8;
    case 4:
      v1 = a1[133];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<17u>::GetGatherModeIndexHeightDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch((a1[200] >> 3) & 7)
  {
    case 0:
      v1 = a1[127];
      goto LABEL_8;
    case 1:
      v1 = a1[125];
      goto LABEL_8;
    case 2:
      v1 = a1[126];
      goto LABEL_8;
    case 3:
      v1 = a1[128];
      goto LABEL_8;
    case 4:
      v1 = a1[133];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<17u>::GetGatherModeIndexWidthDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch(a1[200] & 7)
  {
    case 0:
      v1 = a1[127];
      goto LABEL_8;
    case 1:
      v1 = a1[125];
      goto LABEL_8;
    case 2:
      v1 = a1[126];
      goto LABEL_8;
    case 3:
      v1 = a1[128];
      goto LABEL_8;
    case 4:
      v1 = a1[133];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<17u>::GetDmaSrc1FormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 700) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<17u>::GetDmaSrc2FormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 704) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<17u>::GetDmaDstFormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 1280) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<17u>::GetCropOffsetSrc1Y(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 728);
}

uint64_t ZinGetRegisterProgramming<17u>::GetCropOffsetSrc2Y(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 744);
}

uint64_t ZinGetRegisterProgramming<17u>::GetCropOffsetDstY(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1304);
}

uint64_t ZinGetRegisterProgramming<19u>::GetDout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 540) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<19u>::GetCout(uint64_t a1)
{
  return *(_DWORD *)(a1 + 536) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<19u>::GetNumGroups(uint64_t a1)
{
  return *(_DWORD *)(a1 + 544) & 0x1FFFF;
}

uint64_t ZinGetRegisterProgramming<19u>::GetCommonTaskType(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_DWORD *)(a1 + 568) >> 4;
  if (v1 >= 9 || ((0x17Fu >> v1) & 1) == 0)
    ZinAssertImpl("Error: Invalid Task Type");
  return qword_207AB3DB8[v1];
}

BOOL ZinGetRegisterProgramming<19u>::IsTexModeEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 808) & 7) != 0;
}

BOOL ZinGetRegisterProgramming<19u>::IsPEIndexingEnabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 1090) & 7) != 0;
}

uint64_t ZinGetRegisterProgramming<19u>::IsSource1Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 952) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::IsSource2Ephemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 956) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::IsResultEphemeral(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1020) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::GetCircularBufferSrc1(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 1048) & 7u) >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[*(_DWORD *)(a1 + 1048) & 7] | qword_207AB3E00[*(_DWORD *)(a1 + 1048) & 7];
}

uint64_t ZinGetRegisterProgramming<19u>::GetCircularBufferSrc2(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 1048) >> 4) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

uint64_t ZinGetRegisterProgramming<19u>::GetCircularBufferResult(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 1048) >> 8) & 7;
  if (v1 >= 5)
    ZinAssertImpl("Invalid circular buffer option");
  return qword_207AB3E28[v1] | qword_207AB3E00[v1];
}

BOOL ZinGetRegisterProgramming<19u>::HasReduction(uint64_t a1)
{
  uint64_t CommonTaskType;

  CommonTaskType = ZinGetRegisterProgramming<19u>::GetCommonTaskType(a1);
  if ((CommonTaskType & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  return (CommonTaskType - 3) < 2;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc1Transpose(uint64_t a1)
{
  return *(_BYTE *)(a1 + 581) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::GetSrc1Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 715) & 0xF;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc1HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 580) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc1DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 580) >> 2) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc1CBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 580) >> 3) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc1WBroadcast(uint64_t a1)
{
  return *(_DWORD *)(a1 + 580) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::IsTileDmaSrc1Compressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 728) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc2Transpose(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 581) >> 1) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::GetSrc2Interleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 719) & 0xF;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc2HBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 580) >> 5) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc2DBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 580) >> 6) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc2CBroadcast(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 580) >> 7;
}

uint64_t ZinGetRegisterProgramming<19u>::HasSrc2WBroadcast(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 580) >> 4) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::IsTileDmaSrc2Compressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 744) & 1;
}

BOOL ZinGetRegisterProgramming<19u>::HasOutputTranspose(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 580) & 0x400 | *(_DWORD *)(a1 + 568) & 0x10000000) != 0;
}

uint64_t ZinGetRegisterProgramming<19u>::GetOutputInterleave(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1315) & 0xF;
}

uint64_t ZinGetRegisterProgramming<19u>::IsTileDmaDstCompressed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1320) & 1;
}

uint64_t ZinGetRegisterProgramming<19u>::GetTextureMode(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 808) & 7u) >= 5)
    ZinAssertImpl("Invalid texture mode");
  return dword_207AB3E50[*(_DWORD *)(a1 + 808) & 7];
}

uint64_t ZinGetRegisterProgramming<19u>::GetTextureSourceDimensions@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (unint64_t)*(unsigned int *)(result + 828) >> 16;
  v3 = *(unsigned __int16 *)(result + 832);
  v4 = (unint64_t)*(unsigned int *)(result + 824) >> 16;
  v5 = (unsigned __int16)*(_DWORD *)(result + 828);
  *a2 = (unsigned __int16)*(_DWORD *)(result + 824);
  a2[1] = v3;
  a2[2] = v2;
  a2[3] = v5;
  a2[4] = v4;
  return result;
}

uint64_t ZinGetRegisterProgramming<19u>::GetGatherModeIndexGroupDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch((a1[203] >> 12) & 7)
  {
    case 0:
      v1 = a1[130];
      goto LABEL_8;
    case 1:
      v1 = a1[128];
      goto LABEL_8;
    case 2:
      v1 = a1[129];
      goto LABEL_8;
    case 3:
      v1 = a1[131];
      goto LABEL_8;
    case 4:
      v1 = a1[136];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<19u>::GetGatherModeIndexDepthDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch((a1[203] >> 9) & 7)
  {
    case 0:
      v1 = a1[130];
      goto LABEL_8;
    case 1:
      v1 = a1[128];
      goto LABEL_8;
    case 2:
      v1 = a1[129];
      goto LABEL_8;
    case 3:
      v1 = a1[131];
      goto LABEL_8;
    case 4:
      v1 = a1[136];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<19u>::GetGatherModeIndexPlaneDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch((a1[203] >> 6) & 7)
  {
    case 0:
      v1 = a1[130];
      goto LABEL_8;
    case 1:
      v1 = a1[128];
      goto LABEL_8;
    case 2:
      v1 = a1[129];
      goto LABEL_8;
    case 3:
      v1 = a1[131];
      goto LABEL_8;
    case 4:
      v1 = a1[136];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<19u>::GetGatherModeIndexHeightDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch((a1[203] >> 3) & 7)
  {
    case 0:
      v1 = a1[130];
      goto LABEL_8;
    case 1:
      v1 = a1[128];
      goto LABEL_8;
    case 2:
      v1 = a1[129];
      goto LABEL_8;
    case 3:
      v1 = a1[131];
      goto LABEL_8;
    case 4:
      v1 = a1[136];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<19u>::GetGatherModeIndexWidthDimension(_DWORD *a1)
{
  int v1;
  uint64_t result;

  switch(a1[203] & 7)
  {
    case 0:
      v1 = a1[130];
      goto LABEL_8;
    case 1:
      v1 = a1[128];
      goto LABEL_8;
    case 2:
      v1 = a1[129];
      goto LABEL_8;
    case 3:
      v1 = a1[131];
      goto LABEL_8;
    case 4:
      v1 = a1[136];
LABEL_8:
      result = v1 & 0x1FFFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinGetRegisterProgramming<19u>::GetDmaSrc1FormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 712) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<19u>::GetDmaSrc2FormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 716) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<19u>::GetDmaDstFormatMode(uint64_t a1, _DWORD *a2)
{
  *a2 = *((_DWORD *)&xmmword_207AB2570 + (*(_DWORD *)(a1 + 1312) & 3));
  return 0;
}

uint64_t ZinGetRegisterProgramming<19u>::GetCropOffsetSrc1Y(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 740);
}

uint64_t ZinGetRegisterProgramming<19u>::GetCropOffsetSrc2Y(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 756);
}

uint64_t ZinGetRegisterProgramming<19u>::GetCropOffsetDstY(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1336);
}

uint64_t *ZinMirL2HazardAnalysis::SymbolEventTable::AddSymbolToEventTable(ZinMirL2HazardAnalysis::SymbolEventTable *this, uint64_t a2, uint64_t a3, ZinIrSymbol *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;

  v38 = a3;
  v39 = a2;
  v40 = (uint64_t *)&v39;
  v6 = std::__hash_table<std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)this + 40, &v39, (uint64_t)&std::piecewise_construct, &v40);
  v7 = (_QWORD *)v6[4];
  v8 = v6[5];
  if ((unint64_t)v7 >= v8)
  {
    v10 = v6[3];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      goto LABEL_34;
    v12 = v8 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v6 + 5), v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a4;
    v9 = v16 + 8;
    v19 = (char *)v6[3];
    v18 = (char *)v6[4];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)v6[3];
    }
    v6[3] = v16;
    v6[4] = v9;
    v6[5] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a4;
    v9 = v7 + 1;
  }
  v6[4] = v9;
  v40 = &v38;
  v21 = std::__hash_table<std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)this + 80, (unint64_t *)&v38, (uint64_t)&std::piecewise_construct, &v40);
  v22 = (_QWORD *)v21[4];
  v23 = v21[5];
  if ((unint64_t)v22 < v23)
  {
    *v22 = a4;
    v24 = v22 + 1;
    goto LABEL_33;
  }
  v25 = v21[3];
  v26 = ((uint64_t)v22 - v25) >> 3;
  if ((unint64_t)(v26 + 1) >> 61)
LABEL_34:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v27 = v23 - v25;
  v28 = v27 >> 2;
  if (v27 >> 2 <= (unint64_t)(v26 + 1))
    v28 = v26 + 1;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
    v29 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v29 = v28;
  if (v29)
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v21 + 5), v29);
  else
    v30 = 0;
  v31 = &v30[8 * v26];
  v32 = &v30[8 * v29];
  *(_QWORD *)v31 = a4;
  v24 = v31 + 8;
  v34 = (char *)v21[3];
  v33 = (char *)v21[4];
  if (v33 != v34)
  {
    do
    {
      v35 = *((_QWORD *)v33 - 1);
      v33 -= 8;
      *((_QWORD *)v31 - 1) = v35;
      v31 -= 8;
    }
    while (v33 != v34);
    v33 = (char *)v21[3];
  }
  v21[3] = v31;
  v21[4] = v24;
  v21[5] = v32;
  if (v33)
    operator delete(v33);
LABEL_33:
  v21[4] = v24;
  v36 = (uint64_t **)((char *)this + 120);
  std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v36, &v39, (uint64_t *)&v39);
  return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v36, (unint64_t *)&v38, &v38);
}

uint64_t *ZinMirL2HazardAnalysis::SymbolTimeEventTable::AddSymbol(ZinMirL2HazardAnalysis::SymbolTimeEventTable *this, ZinIrSymbol *a2)
{
  uint64_t *result;
  ZinIrSymbol *v4;

  v4 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v4);
  if (!result)
  {
    std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)this, &v4, &v4);
    return ZinMirL2HazardAnalysis::SymbolEventTable::AddSymbolToEventTable(this, *((_QWORD *)v4 + 24), *((_QWORD *)v4 + 25), v4);
  }
  return result;
}

_QWORD *ZinMirL2HazardAnalysis::SymbolSpaceEventTable::AddSymbol(ZinMirL2HazardAnalysis::SymbolSpaceEventTable *this, ZinIrSymbol *a2, char a3)
{
  _QWORD *result;
  uint64_t *i;
  uint64_t v7[3];
  ZinIrSymbol *v8;

  v8 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v8);
  if (!result)
  {
    std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)this, &v8, &v8);
    ZinIrSymbol::GetSpaceRanges(v8, a3, v7);
    for (i = (uint64_t *)v7[1]; i != v7; i = (uint64_t *)i[1])
      ZinMirL2HazardAnalysis::SymbolEventTable::AddSymbolToEventTable(this, i[2], i[3], v8);
    return std::__list_imp<ZinIrSection *>::clear(v7);
  }
  return result;
}

void sub_20704E35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<ZinIrSection *>::clear(&a9);
  _Unwind_Resume(a1);
}

_QWORD *ZinMirL2HazardAnalysis::SymbolEventTable::GetBeginSymbols@<X0>(ZinMirL2HazardAnalysis::SymbolEventTable *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  unint64_t v5;

  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((_QWORD *)this + 5, &v5);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (result)
    return std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(a3, (const void *)result[3], result[4], (uint64_t)(result[4] - result[3]) >> 3);
  return result;
}

_QWORD *ZinMirL2HazardAnalysis::SymbolEventTable::GetEndSymbols@<X0>(ZinMirL2HazardAnalysis::SymbolEventTable *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  unint64_t v5;

  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((_QWORD *)this + 10, &v5);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (result)
    return std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(a3, (const void *)result[3], result[4], (uint64_t)(result[4] - result[3]) >> 3);
  return result;
}

uint64_t ZinMirL2HazardAnalysis::ZinMirL2HazardAnalysis(uint64_t a1, ZinIrScheduleUtil *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *Hal;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  ZinIrTensor *v18;
  const ZinIrHalParameters *v19;
  StaticWrapInfo *v20;
  void **v21;
  void **v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v29;
  void **v30;
  void **v31;
  ZinIrTensor *RootTensor;
  __int128 v33;
  __int128 v34;
  int v35;

  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  ZinIrNgraph<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,ZinIrIdComparator<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>>::ZinIrNgraph(v8);
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 152) = v8 + 160;
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v9 = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = v9;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(a2, (const ZinIrControlFlowGraph *)*(unsigned int *)(*(_QWORD *)a4 + 4), &v33);
  std::vector<std::vector<std::vector<ZinANELayer *>>>::__vdeallocate((void ***)(a1 + 384));
  *(_OWORD *)(a1 + 384) = v33;
  *(_QWORD *)(a1 + 400) = v34;
  *(_QWORD *)&v34 = 0;
  v33 = 0uLL;
  v30 = (void **)&v33;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](&v30);
  v33 = 0u;
  v34 = 0u;
  v35 = 1065353216;
  v10 = *(_QWORD **)(a1 + 8);
  v13 = (_QWORD *)*v10;
  v11 = v10 + 1;
  v12 = v13;
  if (v13 != v11)
  {
    do
    {
      Hal = (_QWORD *)ZinIrTarget::GetHal((ZinIrTarget *)v12[4]);
      v15 = Hal + 1;
      v16 = (_QWORD *)*Hal;
      if ((_QWORD *)*Hal != Hal + 1)
      {
        do
        {
          v17 = v16[4];
          RootTensor = 0;
          v18 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0);
          RootTensor = ZinIrTensor::GetRootTensor(v18);
          if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v33, &RootTensor)&& ZinIrCircularBufferUtil::QualifyForCircularBuffer(RootTensor, **(const ZinIrTensor ***)(a1 + 24), v19, v20))
          {
            ZinIrTensor::GetTensorFamily(RootTensor, (uint64_t)&v30);
            v22 = v30;
            v21 = v31;
            if (v30 != v31)
            {
              do
              {
                v29 = 0;
                v29 = *v22;
                std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>(a1 + 408, &v29, &v29);
                ++v22;
              }
              while (v22 != v21);
              v22 = v30;
            }
            if (v22)
            {
              v31 = v22;
              operator delete(v22);
            }
          }
          std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)&v33, &RootTensor, &RootTensor);
          v23 = (_QWORD *)v16[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (_QWORD *)v16[2];
              v25 = *v24 == (_QWORD)v16;
              v16 = v24;
            }
            while (!v25);
          }
          v16 = v24;
        }
        while (v24 != v15);
      }
      v26 = (_QWORD *)v12[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v12[2];
          v25 = *v27 == (_QWORD)v12;
          v12 = v27;
        }
        while (!v25);
      }
      v12 = v27;
    }
    while (v27 != v11);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v33);
  return a1;
}

void sub_20704E714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  ZinIrHazardGraph **v15;
  ZinMirL2HazardAnalysis::SymbolSpaceEventTable *v16;
  ZinMirL2HazardAnalysis::SymbolSpaceEventTable *v17;
  uint64_t v18;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v18);
  a15 = a9;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::shared_ptr<MirOpt::ZinReassignEngine>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::shared_ptr<MirOpt::ZinReassignEngine>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::shared_ptr<MirOpt::ZinReassignEngine>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::shared_ptr<MirOpt::ZinReassignEngine>>>>>::~__hash_table((uint64_t)v17 + 152);
  ZinMirL2HazardAnalysis::SymbolSpaceEventTable::~SymbolSpaceEventTable(v17);
  ZinMirL2HazardAnalysis::SymbolSpaceEventTable::~SymbolSpaceEventTable(v16);
  std::unique_ptr<ZinIrHazardGraph>::reset[abi:ne180100](v15, 0);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::SymbolSpaceEventTable::~SymbolSpaceEventTable(ZinMirL2HazardAnalysis::SymbolSpaceEventTable *this)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 120, *((_QWORD **)this + 16));
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this);
}

void ZinMirL2HazardAnalysis::~ZinMirL2HazardAnalysis(ZinMirL2HazardAnalysis *this)
{
  void **v2;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 408);
  v2 = (void **)((char *)this + 384);
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::shared_ptr<MirOpt::ZinReassignEngine>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::shared_ptr<MirOpt::ZinReassignEngine>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::shared_ptr<MirOpt::ZinReassignEngine>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::shared_ptr<MirOpt::ZinReassignEngine>>>>>::~__hash_table((uint64_t)this + 328);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 256);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 176);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 72);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 32);
  std::unique_ptr<ZinIrHazardGraph>::reset[abi:ne180100]((ZinIrHazardGraph **)this, 0);
}

uint64_t ZinMirL2HazardAnalysis::Run(ZinMirL2HazardAnalysis *this)
{
  ZinMirL2HazardAnalysis::CreateHazardNodes(this);
  ZinMirL2HazardAnalysis::CreateHazardEdges(this);
  ZinMirL2HazardAnalysis::HandleL2Barriers(this);
  ZinMirL2HazardAnalysis::SetL2Dependent(this);
  ZinMirL2HazardAnalysis::OptimizeHazardEdges(this);
  ZinMirL2HazardAnalysis::OptimizeL2DepWithPositiveOffset(this);
  ZinMirL2HazardAnalysis::SetL2HazardBits(this);
  ZinMirL2HazardAnalysis::MaterializeParallelExecution(this);
  return 0;
}

void ZinMirL2HazardAnalysis::CreateHazardNodes(ZinMirL2HazardAnalysis *this)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  ZinANELayer **v7;
  ZinANELayer *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  ZinIrSymbol *L2RdSymbol;
  uint64_t v13;
  uint64_t v14;
  const ZinANELayer *v15;
  ZinBondedUtils **v16;
  ZinBondedUtils **v17;
  ZinBondedUtils *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  ZinIrSymbol *v29;
  const ZinIrSymbol *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  ZinIrOpLayer *v57;
  int IsNoOp;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  _BOOL4 IsNELayer;
  _BOOL4 v67;
  BOOL v68;
  ZinIrOpLayer **v69;
  ZinIrOpLayer **v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t *v113;
  uint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  ZinANELayer **v144;
  ZinANELayer **v145;
  ZinMirL2HazardAnalysis::SymbolSpaceEventTable *v146;
  ZinMirL2HazardAnalysis::SymbolTimeEventTable *v147;
  char *v148;
  __int128 v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  __int128 v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  __int128 v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t L2WrSymbol;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  int v171;
  ZinIrSymbol *v172;
  int v173;
  char *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  ZinANELayer *v180;
  void *__p;
  ZinANELayer **v182;
  uint64_t v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188[3];
  unint64_t *v189[3];
  unint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194[3];
  unint64_t *v195[3];
  __int128 v196;
  uint64_t v197;
  _QWORD *v198[2];
  uint8_t buf[4];
  _QWORD v200[3];

  *(_QWORD *)((char *)&v200[1] + 4) = *MEMORY[0x24BDAC8D0];
  memset(v195, 0, sizeof(v195));
  memset(v194, 0, sizeof(v194));
  v192 = 0;
  v193 = 0;
  v190 = 0;
  v191 = 0;
  memset(v189, 0, sizeof(v189));
  memset(v188, 0, sizeof(v188));
  v186 = 0;
  v187 = 0;
  v184 = 0;
  v185 = 0;
  v1 = **((_QWORD **)this + 3);
  if (*(int *)(v1 + 4) < 1)
    goto LABEL_212;
  v3 = 0;
  v147 = (ZinMirL2HazardAnalysis *)((char *)this + 32);
  v146 = (ZinMirL2HazardAnalysis *)((char *)this + 176);
  v4 = (_QWORD *)((char *)this + 408);
  v148 = (char *)this + 328;
  do
  {
    v141 = v3;
    v5 = (uint64_t *)(*((_QWORD *)this + 48) + 24 * v3);
    v6 = *v5;
    v142 = v5[1];
    if (*v5 == v142)
      goto LABEL_206;
    do
    {
      __p = 0;
      v182 = 0;
      v183 = 0;
      v143 = v6;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v7 = (ZinANELayer **)__p;
      v144 = v182;
      if (__p == v182)
        goto LABEL_202;
      do
      {
        v180 = 0;
        v145 = v7;
        v8 = *v7;
        v179 = 0;
        v180 = v8;
        v177 = 0;
        v178 = 0;
        v174 = 0;
        v175 = 0;
        v176 = 0;
        v9 = *((_QWORD *)v8 + 11);
        if (*((_QWORD *)v8 + 12) != v9)
        {
          v10 = 0;
          do
          {
            v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v9 + 8 * v10) + 32))(*(_QWORD *)(v9 + 8 * v10), 0, 0);
            if (((*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v180 + 200))(v180, v11) & 1) == 0)
            {
              v173 = 0;
              v172 = 0;
              v171 = 0;
              if (ZinMemSourceIndexTranslator::GetL2SrcType(v180, v10, &v171)
                && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                ZinMirL2HazardAnalysis::CreateHazardNodes(buf, (uint64_t)&v180, v200);
              }
              L2RdSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)v180 + 33), v171);
              v172 = L2RdSymbol;
              if (v171 == 2 || v171 == 1)
              {
                v173 = v171;
              }
              else if (!v171)
              {
                v173 = 0;
              }
              ZinMirL2HazardAnalysis::SymbolTimeEventTable::AddSymbol(v147, L2RdSymbol);
              ZinMirL2HazardAnalysis::SymbolSpaceEventTable::AddSymbol(v146, L2RdSymbol, 1);
              LODWORD(v167) = 0;
              v13 = *((_QWORD *)this + 46);
              *((_QWORD *)this + 46) = v13 + 1;
              *(_QWORD *)&v196 = v13;
              std::allocate_shared[abi:ne180100]<ZinIrHazardNode,std::allocator<ZinIrHazardNode>,ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType &,ZinIrHazardNode::ExecutionType,long,void>(&v172, &v180, (unsigned int *)&v173, (unsigned int *)&v167, &v196, &v170);
              ZinIrNgraph<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare>::AddNode(*(uint64_t ***)this, (uint64_t *)&v170);
              ZinMirL2HazardAnalysis::UpdateSymbolToHazardNodeMap((uint64_t)this, (uint64_t)v172, &v170);
              LODWORD(v167) = 1;
              v14 = *((_QWORD *)this + 46);
              *((_QWORD *)this + 46) = v14 + 1;
              *(_QWORD *)&v196 = v14;
              std::allocate_shared[abi:ne180100]<ZinIrHazardNode,std::allocator<ZinIrHazardNode>,ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType &,ZinIrHazardNode::ExecutionType,long,void>(&v172, &v180, (unsigned int *)&v173, (unsigned int *)&v167, &v196, &v169);
              ZinIrNgraph<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare>::AddNode(*(uint64_t ***)this, (uint64_t *)&v169);
              ZinMirL2HazardAnalysis::UpdateSymbolToHazardNodeMap((uint64_t)this, (uint64_t)v172, &v169);
              std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100]((char **)&v177, &v170);
              std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](&v174, &v169);
              ZinIrOpLayerGraphUtil::FindAllBottomANELayers(v180, (void **)&v196);
              v17 = (ZinBondedUtils **)*((_QWORD *)&v196 + 1);
              v16 = (ZinBondedUtils **)v196;
              if ((_QWORD)v196 != *((_QWORD *)&v196 + 1))
              {
                while (1)
                {
                  v18 = *v16;
                  if (!ZinBondedUtils::AreAssignedToSameANE(*v16, v180, v15))
                    goto LABEL_53;
                  *(_QWORD *)&v167 = (*(uint64_t (**)(ZinBondedUtils *, _QWORD, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0, 0);
                  if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v4, &v167))
                  {
                    goto LABEL_53;
                  }
                  L2WrSymbol = ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)v18 + 33));
                  v198[0] = &L2WrSymbol;
                  v19 = std::__hash_table<std::__hash_value_type<ZinIrOpLayerGraph *,std::vector<std::shared_ptr<ZinPattern>>>,std::__unordered_map_hasher<ZinIrOpLayerGraph *,std::__hash_value_type<ZinIrOpLayerGraph *,std::vector<std::shared_ptr<ZinPattern>>>,std::hash<ZinIrOpLayerGraph *>,std::equal_to<ZinIrOpLayerGraph *>,true>,std::__unordered_map_equal<ZinIrOpLayerGraph *,std::__hash_value_type<ZinIrOpLayerGraph *,std::vector<std::shared_ptr<ZinPattern>>>,std::equal_to<ZinIrOpLayerGraph *>,std::hash<ZinIrOpLayerGraph *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayerGraph *,std::vector<std::shared_ptr<ZinPattern>>>>>::__emplace_unique_key_args<ZinIrOpLayerGraph *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayerGraph * const&>,std::tuple<>>((uint64_t)v148, &L2WrSymbol, (uint64_t)&std::piecewise_construct, v198);
                  v168 = 0;
                  v167 = 0uLL;
                  std::vector<std::shared_ptr<ZinIrTransform>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform>*,std::shared_ptr<ZinIrTransform>*>((char *)&v167, (_QWORD *)v19[3], (_QWORD *)v19[4], (uint64_t)(v19[4] - v19[3]) >> 4);
                  v21 = (unint64_t *)*((_QWORD *)&v167 + 1);
                  v20 = (unint64_t *)v167;
                  if ((_QWORD)v167 == *((_QWORD *)&v167 + 1))
                    goto LABEL_35;
                  do
                  {
                    v22 = *v20;
                    v23 = (std::__shared_weak_count *)v20[1];
                    if (v23)
                    {
                      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
                      do
                        v25 = __ldxr(p_shared_owners);
                      while (__stxr(v25 + 1, p_shared_owners));
                    }
                    if (*(_DWORD *)(v22 + 20) == 1 && *(_DWORD *)(v22 + 16) == 3)
                    {
                      v26 = *(_QWORD *)v22 == (_QWORD)v18;
                      if (!v23)
                        goto LABEL_32;
                    }
                    else
                    {
                      v26 = 0;
                      if (!v23)
                        goto LABEL_32;
                    }
                    v27 = (unint64_t *)&v23->__shared_owners_;
                    do
                      v28 = __ldaxr(v27);
                    while (__stlxr(v28 - 1, v27));
                    if (!v28)
                    {
                      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                      std::__shared_weak_count::__release_weak(v23);
                    }
LABEL_32:
                    if (v26)
                      goto LABEL_35;
                    v20 += 2;
                  }
                  while (v20 != v21);
                  v20 = v21;
LABEL_35:
                  v29 = v172;
                  v30 = (const ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)v18 + 33));
                  if (ZinIrSymbol::SpaceContains(v29, v30))
                  {
                    v31 = *(_QWORD **)this;
                    v32 = v20[1];
                    v164 = *v20;
                    v165 = (std::__shared_weak_count *)v32;
                    if (v32)
                    {
                      v33 = (unint64_t *)(v32 + 8);
                      do
                        v34 = __ldxr(v33);
                      while (__stxr(v34 + 1, v33));
                    }
                    v163 = v169;
                    if (*((_QWORD *)&v169 + 1))
                    {
                      v35 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
                      do
                        v36 = __ldxr(v35);
                      while (__stxr(v36 + 1, v35));
                    }
                    ZinIrHazardGraph::AddInvariantEdge((uint64_t)v31, &v164, (uint64_t *)&v163);
                    v37 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
                    if (*((_QWORD *)&v163 + 1))
                    {
                      v38 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
                      do
                        v39 = __ldaxr(v38);
                      while (__stlxr(v39 - 1, v38));
                      if (!v39)
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                    }
                    v40 = v165;
                    if (v165)
                    {
                      v41 = (unint64_t *)&v165->__shared_owners_;
                      do
                        v42 = __ldaxr(v41);
                      while (__stlxr(v42 - 1, v41));
                      if (!v42)
                      {
                        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                        std::__shared_weak_count::__release_weak(v40);
                      }
                    }
                  }
                  v198[0] = &v167;
                  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
LABEL_53:
                  if (++v16 == v17)
                  {
                    v16 = (ZinBondedUtils **)v196;
                    break;
                  }
                }
              }
              if (v16)
              {
                *((_QWORD *)&v196 + 1) = v16;
                operator delete(v16);
              }
              v43 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
              if (*((_QWORD *)&v169 + 1))
              {
                v44 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              v46 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
              if (*((_QWORD *)&v170 + 1))
              {
                v47 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
            }
            ++v10;
            v8 = v180;
            v9 = *((_QWORD *)v180 + 11);
          }
          while (v10 < (*((_QWORD *)v180 + 12) - v9) >> 3);
        }
        v198[0] = 0;
        v49 = (_QWORD *)ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)v8 + 33));
        v198[0] = v49;
        if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 526)
          || (v50 = (uint64_t *)*((_QWORD *)v180 + 14), v51 = (uint64_t *)*((_QWORD *)v180 + 15), v50 == v51))
        {
          v72 = 1;
        }
        else
        {
          do
          {
            v52 = *v50;
            if (*(_DWORD *)(*(_QWORD *)(*v50 + 64) + 8) == 7)
            {
              v53 = *(_QWORD *)(v52 + 88);
              v54 = *(_QWORD *)(v52 + 96);
              if (v54 != v53 && v54 - v53 == 16)
              {
                v56 = v53 + 8;
                do
                {
                  v57 = *(ZinIrOpLayer **)(v56 - 8);
                  v196 = 0uLL;
                  v197 = 0;
                  IsNoOp = ZinIrOpLayer::IsNoOp(v57, (uint64_t *)&v196);
                  if ((_QWORD)v196)
                  {
                    *((_QWORD *)&v196 + 1) = v196;
                    operator delete((void *)v196);
                  }
                  if (v56 == v54)
                    v59 = 1;
                  else
                    v59 = IsNoOp;
                  v56 += 8;
                }
                while (v59 != 1);
                v60 = *(_QWORD *)(v52 + 88);
                v61 = *(_QWORD *)(v52 + 96);
                if (v60 != v61)
                {
                  v62 = v60 + 8;
                  v63 = v60 + 8;
                  do
                  {
                    v64 = *(_QWORD *)(*(_QWORD *)(v63 - 8) + 120) - *(_QWORD *)(*(_QWORD *)(v63 - 8) + 112);
                    v65 = v64 > 8 || v63 == v61;
                    v63 += 8;
                  }
                  while (!v65);
                  do
                  {
                    IsNELayer = ZinIrOpLayer::IsNELayer(*(ZinIrOpLayer **)(v62 - 8));
                    v67 = IsNELayer;
                    v68 = v62 != v61 && IsNELayer;
                    v62 += 8;
                  }
                  while (v68);
                  v70 = *(ZinIrOpLayer ***)(v52 + 88);
                  v69 = *(ZinIrOpLayer ***)(v52 + 96);
                  while (v70 != v69)
                  {
                    if (!ZinIrOpLayer::IsPELayer(*v70))
                    {
                      if (v64 > 8)
                        v71 = 1;
                      else
                        v71 = IsNoOp;
                      if ((v71 | v67) != 1)
                      {
                        v72 = 0;
                        goto LABEL_104;
                      }
                      break;
                    }
                    ++v70;
                  }
                }
              }
            }
            ++v50;
          }
          while (v50 != v51);
          v72 = 1;
LABEL_104:
          v49 = v198[0];
        }
        ZinMirL2HazardAnalysis::SymbolTimeEventTable::AddSymbol(v147, (ZinIrSymbol *)v49);
        ZinMirL2HazardAnalysis::SymbolSpaceEventTable::AddSymbol(v146, (ZinIrSymbol *)v49, v72);
        LODWORD(v170) = 3;
        LODWORD(v169) = 0;
        v73 = *((_QWORD *)this + 46);
        *((_QWORD *)this + 46) = v73 + 1;
        *(_QWORD *)&v167 = v73;
        std::allocate_shared[abi:ne180100]<ZinIrHazardNode,std::allocator<ZinIrHazardNode>,ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType,ZinIrHazardNode::ExecutionType,long,void>(v198, &v180, (unsigned int *)&v170, (unsigned int *)&v169, &v167, &v196);
        ZinIrNgraph<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare>::AddNode(*(uint64_t ***)this, (uint64_t *)&v196);
        ZinMirL2HazardAnalysis::UpdateSymbolToHazardNodeMap((uint64_t)this, (uint64_t)v198[0], &v196);
        LODWORD(v169) = 3;
        LODWORD(v172) = 1;
        v74 = *((_QWORD *)this + 46);
        *((_QWORD *)this + 46) = v74 + 1;
        *(_QWORD *)&v170 = v74;
        std::allocate_shared[abi:ne180100]<ZinIrHazardNode,std::allocator<ZinIrHazardNode>,ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType,ZinIrHazardNode::ExecutionType,long,void>(v198, &v180, (unsigned int *)&v169, (unsigned int *)&v172, &v170, &v167);
        ZinIrNgraph<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare>::AddNode(*(uint64_t ***)this, (uint64_t *)&v167);
        ZinMirL2HazardAnalysis::UpdateSymbolToHazardNodeMap((uint64_t)this, (uint64_t)v198[0], &v167);
        v162 = v196;
        if (*((_QWORD *)&v196 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
        v161 = v167;
        if (*((_QWORD *)&v167 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        ZinMirL2HazardAnalysis::CreateIntraEngineInvariantEdges((uint64_t *)this, (uint64_t *)&v177, &v174, (unint64_t *)&v162, (uint64_t *)&v161);
        if (v77)
        {
          v80 = (unint64_t *)&v77->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v82 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
        if (*((_QWORD *)&v162 + 1))
        {
          v83 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        if (!ZinIrOpLayer::IsNELayer(v180))
        {
          if (*(_BYTE *)(**((_QWORD **)this + 3) + 1104))
          {
            v153 = v184;
            v154 = v185;
            if (v185)
            {
              v95 = (unint64_t *)&v185->__shared_owners_;
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            v97 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
            v152 = v196;
            if (*((_QWORD *)&v196 + 1))
            {
              v98 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            ZinMirL2HazardAnalysis::CreateInterEngineInvariantEdges((uint64_t *)this, v188, &v177, &v153, (uint64_t *)&v152);
            if (v97)
            {
              v100 = (unint64_t *)&v97->__shared_owners_;
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            v102 = v154;
            if (v154)
            {
              v103 = (unint64_t *)&v154->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
LABEL_186:
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
          }
          else
          {
            v150 = v184;
            v151 = v185;
            if (v185)
            {
              v115 = (unint64_t *)&v185->__shared_owners_;
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }
            v117 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
            v149 = v196;
            if (*((_QWORD *)&v196 + 1))
            {
              v118 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
              do
                v119 = __ldxr(v118);
              while (__stxr(v119 + 1, v118));
            }
            ZinMirL2HazardAnalysis::CreateInterEngineInvariantEdges((uint64_t *)this, v189, &v177, &v150, (uint64_t *)&v149);
            if (v117)
            {
              v120 = (unint64_t *)&v117->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            v102 = v151;
            if (v151)
            {
              v122 = (unint64_t *)&v151->__shared_owners_;
              do
                v104 = __ldaxr(v122);
              while (__stlxr(v104 - 1, v122));
              goto LABEL_186;
            }
          }
          std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>((uint64_t)v189, v177, v178, ((char *)v178 - (char *)v177) >> 4);
          std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>((uint64_t)v188, (uint64_t *)v174, v175, ((char *)v175 - v174) >> 4);
          v113 = &v184;
          v114 = &v186;
          goto LABEL_189;
        }
        if (*(_BYTE *)(**((_QWORD **)this + 3) + 1104))
        {
          v159 = v190;
          v160 = v191;
          if (v191)
          {
            v85 = (unint64_t *)&v191->__shared_owners_;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
          v158 = v196;
          if (*((_QWORD *)&v196 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          ZinMirL2HazardAnalysis::CreateInterEngineInvariantEdges((uint64_t *)this, v194, &v177, &v159, (uint64_t *)&v158);
          if (v87)
          {
            v90 = (unint64_t *)&v87->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          v92 = v160;
          if (!v160)
            goto LABEL_171;
          v93 = (unint64_t *)&v160->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
        }
        else
        {
          v156 = v190;
          v157 = v191;
          if (v191)
          {
            v105 = (unint64_t *)&v191->__shared_owners_;
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          v107 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
          v155 = v196;
          if (*((_QWORD *)&v196 + 1))
          {
            v108 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
          ZinMirL2HazardAnalysis::CreateInterEngineInvariantEdges((uint64_t *)this, v195, &v177, &v156, (uint64_t *)&v155);
          if (v107)
          {
            v110 = (unint64_t *)&v107->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          v92 = v157;
          if (!v157)
            goto LABEL_171;
          v112 = (unint64_t *)&v157->__shared_owners_;
          do
            v94 = __ldaxr(v112);
          while (__stlxr(v94 - 1, v112));
        }
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
LABEL_171:
        std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>((uint64_t)v195, v177, v178, ((char *)v178 - (char *)v177) >> 4);
        std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>((uint64_t)v194, (uint64_t *)v174, v175, ((char *)v175 - v174) >> 4);
        v113 = &v190;
        v114 = &v192;
LABEL_189:
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](v114, (uint64_t *)&v196);
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](v113, (uint64_t *)&v167);
        v123 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
        if (*((_QWORD *)&v167 + 1))
        {
          v124 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        v126 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
        if (*((_QWORD *)&v196 + 1))
        {
          v127 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        *(_QWORD *)&v196 = &v174;
        std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
        *(_QWORD *)&v196 = &v177;
        std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
        v7 = v145 + 1;
      }
      while (v145 + 1 != v144);
      v7 = (ZinANELayer **)__p;
LABEL_202:
      if (v7)
      {
        v182 = v7;
        operator delete(v7);
      }
      v6 = v143 + 24;
    }
    while (v143 + 24 != v142);
    v1 = **((_QWORD **)this + 3);
LABEL_206:
    v3 = v141 + 1;
  }
  while (v141 + 1 < *(int *)(v1 + 4));
  v129 = v185;
  if (v185)
  {
    v130 = (unint64_t *)&v185->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
LABEL_212:
  v132 = v187;
  if (v187)
  {
    v133 = (unint64_t *)&v187->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  *(_QWORD *)&v196 = v188;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
  *(_QWORD *)&v196 = v189;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
  v135 = v191;
  if (v191)
  {
    v136 = (unint64_t *)&v191->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v193;
  if (v193)
  {
    v139 = (unint64_t *)&v193->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  *(_QWORD *)&v196 = v194;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
  *(_QWORD *)&v196 = v195;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
}

void sub_20704F708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__shared_weak_count *a66;
  std::__shared_weak_count *a68;
  char a69;
  char a72;
  uint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;

  if (a66)
  {
    p_shared_owners = (unint64_t *)&a66->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a66->__on_zero_shared)(a66);
      std::__shared_weak_count::__release_weak(a66);
    }
  }
  if (a68)
  {
    v76 = (unint64_t *)&a68->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))a68->__on_zero_shared)(a68);
      std::__shared_weak_count::__release_weak(a68);
    }
  }
  *(_QWORD *)(v72 - 152) = &a69;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 152));
  *(_QWORD *)(v72 - 152) = &a72;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 152));
  v78 = *(std::__shared_weak_count **)(v72 - 232);
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *(std::__shared_weak_count **)(v72 - 216);
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  *(_QWORD *)(v72 - 152) = v72 - 208;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 152));
  *(_QWORD *)(v72 - 152) = v72 - 184;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 152));
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::CreateHazardEdges(ZinMirL2HazardAnalysis *this)
{
  char *v1;
  char *v2;
  ZinMirL2HazardAnalysis::SymbolEventTable *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  BOOL v12;
  _QWORD *v13;
  void *__p;
  uint64_t *v15;
  void *v16;
  void **v17;
  uint64_t *v18;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  v18 = v19;
  v1 = (char *)*((_QWORD *)this + 37);
  v2 = (char *)this + 304;
  if (v1 == (char *)this + 304)
  {
    v13 = 0;
  }
  else
  {
    v4 = (ZinMirL2HazardAnalysis *)((char *)this + 176);
    do
    {
      v5 = *((_QWORD *)v1 + 4);
      ZinMirL2HazardAnalysis::SymbolEventTable::GetEndSymbols(v4, v5, &v16);
      v6 = (void **)v16;
      v7 = v17;
      while (v6 != v7)
      {
        __p = 0;
        __p = *v6;
        std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::__erase_unique<ZinIrSymbol const*>(&v18, (uint64_t *)&__p);
        ++v6;
      }
      ZinMirL2HazardAnalysis::SymbolEventTable::GetBeginSymbols(v4, v5, &__p);
      v8 = (uint64_t *)__p;
      v9 = v15;
      while (v8 != v9)
      {
        std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_hint_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(&v18, v19, v8, v8);
        ++v8;
      }
      ZinMirL2HazardAnalysis::CreateHazardEdgesForLiveSymbols(this, &v18);
      if (__p)
      {
        v15 = (uint64_t *)__p;
        operator delete(__p);
      }
      if (v16)
      {
        v17 = (void **)v16;
        operator delete(v16);
      }
      v10 = (char *)*((_QWORD *)v1 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v1 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v1;
          v1 = v11;
        }
        while (!v12);
      }
      v1 = v11;
    }
    while (v11 != v2);
    v13 = (_QWORD *)v19[0];
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v18, v13);
}

void sub_20704FB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::HandleL2Barriers(ZinMirL2HazardAnalysis *this)
{
  uint64_t v1;
  ZinMirL2HazardAnalysis *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  ZinEngineLayerMirInfo **v11;
  const ZinANELayer *v12;
  const ZinANELayer *v13;
  ZinIrOpLayer *FirstConsumerOnSameANE;
  _BOOL4 IsNELayer;
  _BOOL4 v16;
  uint64_t L2RdSymbol;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 IsPELayer;
  int v25;
  char v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  ZinIrTensor *v30;
  _QWORD *v31;
  _QWORD *i;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  _BYTE v38[16];
  _QWORD *v39;
  unint64_t v40;
  _OWORD v41[2];
  int v42;
  void *__p;
  unint64_t *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t *v49;

  v1 = **((_QWORD **)this + 3);
  if (*(int *)(v1 + 4) >= 1)
  {
    v2 = this;
    v3 = 0;
    v4 = -1;
    do
    {
      v35 = v3;
      v5 = (uint64_t *)(*((_QWORD *)v2 + 48) + 24 * v3);
      v6 = *v5;
      v37 = v5[1];
      if (*v5 != v37)
      {
        do
        {
          v46 = 0;
          v47 = 0;
          v48 = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v46, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
          v7 = v46;
          v8 = v47;
          if (v46 != v47)
          {
            do
            {
              v9 = *(_QWORD *)v7;
              v10 = *(_DWORD **)(*(_QWORD *)v7 + 264);
              if (v10[408] == 4)
              {
                v11 = **(ZinEngineLayerMirInfo ****)(v9 + 112);
                if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v11)
                  && ZinBondedUtils::AreAssignedToSameANE((ZinBondedUtils *)v11, (const ZinANELayer *)v9, v12)
                  && ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)v11)
                  && (*((unsigned int (**)(ZinEngineLayerMirInfo **))*v11 + 71))(v11))
                {
                  *(_BYTE *)(*(_QWORD *)(v9 + 264) + 344) = 1;
                  ZinMirL2HazardAnalysis::CreateL2BarrierEdges(v2, (ZinANELayer *)v9, v11);
                }
              }
              else
              {
                LODWORD(v41[0]) = 0;
                if ((ZinEngineLayerMirInfo::HasChainRead(v10, (int *)v41) & 1) == 0 && *(_QWORD *)(v9 + 360) != v4)
                {
                  FirstConsumerOnSameANE = ZinIrRegAllocUtil::GetFirstConsumerOnSameANE((ZinIrRegAllocUtil *)v9, v13);
                  if (FirstConsumerOnSameANE)
                  {
                    __p = 0;
                    v44 = 0;
                    v45 = 0;
                    memset(v41, 0, sizeof(v41));
                    v42 = 1065353216;
                    if (ZinMirL2HazardAnalysis::IsQualifiedForDependentMode((uint64_t)v2, (const ZinIrOpLayer *)v9, (uint64_t)FirstConsumerOnSameANE, (char **)&__p, (uint64_t)v41))
                    {
                      IsNELayer = ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v9);
                      if (IsNELayer != ZinIrOpLayer::IsNELayer(FirstConsumerOnSameANE)
                        || (v16 = ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)v9),
                            v16 != ZinIrOpLayer::IsPELayer(FirstConsumerOnSameANE)))
                      {
                        if (ZinIrOpLayer::IsPELayer(FirstConsumerOnSameANE)
                          && (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)FirstConsumerOnSameANE + 568))(FirstConsumerOnSameANE))
                        {
                          if (v44 == __p)
                            ZinAssertImpl("It must have incoming index for L2-dep pair");
                          L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)FirstConsumerOnSameANE + 33), *(_QWORD *)__p != 1);
                          v18 = ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)FirstConsumerOnSameANE + 33), 0);
                          v19 = v18 != ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)FirstConsumerOnSameANE + 33), 1)
                             && L2RdSymbol != ZinEngineLayerMirInfo::GetL2RdSymbol(*(_QWORD *)(v9 + 264), 0);
                          v21 = *((_QWORD *)FirstConsumerOnSameANE + 11);
                          v22 = *((_QWORD *)FirstConsumerOnSameANE + 12);
                          if (v21 == v22)
                          {
                            v26 = 1;
                          }
                          else
                          {
                            v23 = v21 + 8;
                            do
                            {
                              IsPELayer = ZinIrOpLayer::IsPELayer(*(ZinIrOpLayer **)(v23 - 8));
                              v25 = v23 == v22 || IsPELayer;
                              v23 += 8;
                            }
                            while (v25 != 1);
                            v26 = !IsPELayer;
                          }
                          v20 = v19 & v26;
                        }
                        else
                        {
                          v20 = 0;
                        }
                        v27 = (unint64_t *)__p;
                        v28 = v44;
                        while (v27 != v28)
                        {
                          v40 = 0;
                          v40 = *v27;
                          v29 = *(_QWORD *)(*((_QWORD *)FirstConsumerOnSameANE + 11) + 8 * v40);
                          v30 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0, 0);
                          v49 = &v40;
                          v31 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)v41, &v40, (uint64_t)&std::piecewise_construct, &v49);
                          std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v38, (uint64_t)(v31 + 3));
                          for (i = v39; i; i = (_QWORD *)*i)
                          {
                            v34 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(v30) + 12) + 64) + 8) == 7
                               && i[3] > 0;
                            v20 |= v34;
                          }
                          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v38);
                          ++v27;
                        }
                        v2 = this;
                        if ((v20 & 1) != 0)
                        {
                          *(_BYTE *)(*(_QWORD *)(v9 + 264) + 344) = 1;
                          ZinMirL2HazardAnalysis::CreateL2BarrierEdges(this, (ZinANELayer *)v9, (ZinEngineLayerMirInfo **)FirstConsumerOnSameANE);
                        }
                        v4 = *((_QWORD *)FirstConsumerOnSameANE + 45);
                      }
                    }
                    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)v41);
                    if (__p)
                    {
                      v44 = (unint64_t *)__p;
                      operator delete(__p);
                    }
                  }
                }
              }
              v7 += 8;
            }
            while (v7 != v8);
            v7 = v46;
          }
          if (v7)
          {
            v47 = v7;
            operator delete(v7);
          }
          v6 += 24;
        }
        while (v6 != v37);
        v1 = **((_QWORD **)v2 + 3);
      }
      v3 = v35 + 1;
    }
    while (v35 + 1 < *(int *)(v1 + 4));
  }
}

void sub_20704FF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)&a19);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(_QWORD *)(v25 - 120) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirL2HazardAnalysis::SetL2Dependent(ZinMirL2HazardAnalysis *this)
{
  uint64_t v1;
  _QWORD *v2;
  ZinANELayer ***v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  BOOL EdgeType;
  BOOL v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t **v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  ZinIrHazardNode **v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  ZinIrHazardNode **v46;
  _DWORD *L2SrcDep;
  _QWORD *v48;
  ZinIrHazardNode *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t **v55;
  uint64_t **v56;
  ZinIrHazardNode ***v57;
  ZinIrHazardNode ***v58;
  ZinIrHazardNode **v59;
  uint64_t LayerTID;
  ZinIrHazardNode *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t **v67;
  uint64_t **v68;
  ZinIrHazardNode ***v69;
  ZinIrHazardNode ***v70;
  ZinIrHazardNode **v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t *v93;
  std::__shared_weak_count *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  std::__shared_weak_count *v98;
  uint64_t *v99;
  _QWORD v100[2];
  _QWORD *v101;
  int v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t *v111;
  _QWORD *v112[2];
  unint64_t *v113[2];

  v112[0] = 0;
  v112[1] = 0;
  v111 = (uint64_t *)v112;
  v1 = *(_QWORD *)this + 8;
  v2 = **(_QWORD ***)this;
  if (v2 != (_QWORD *)v1)
  {
    do
    {
      v4 = (ZinANELayer ***)(v2 + 4);
      v5 = *(_QWORD ***)this;
      v6 = (_QWORD *)(*(_QWORD *)this + 64);
      v99 = v2 + 4;
      v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v6, (unint64_t **)&v99);
      v8 = v5 + 13;
      if (v7)
        v8 = v7 + 3;
      v9 = (uint64_t **)*v8;
      v10 = (uint64_t **)v8[1];
      while (v9 != v10)
      {
        v11 = *v9;
        LODWORD(v97) = 0;
        v12 = *(_QWORD **)this;
        v13 = v11[1];
        v109 = *v11;
        v110 = (std::__shared_weak_count *)v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = (std::__shared_weak_count *)v2[5];
        v107 = v2[4];
        v108 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        EdgeType = ZinIrHazardGraph::GetEdgeType((uint64_t)v12, (unint64_t *)&v109, &v107, &v97);
        v20 = (_DWORD)v97 != 1 && EdgeType;
        v21 = v108;
        if (v108)
        {
          v22 = (unint64_t *)&v108->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = v110;
        if (!v110)
          goto LABEL_24;
        v25 = (unint64_t *)&v110->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
          if (v20)
            goto LABEL_29;
        }
        else
        {
LABEL_24:
          if (v20)
            goto LABEL_29;
        }
        LODWORD(v113[0]) = 0;
        if ((ZinEngineLayerMirInfo::HasChainRead(*((_DWORD **)**v4 + 33), (int *)v113) & 1) == 0
          && ZinMirL2HazardAnalysis::TryDependencyBitSet(this, *(ZinANELayer **)*v11, **v4))
        {
          v99 = v11;
          v27 = std::__tree<std::__value_type<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__map_value_compare<std::shared_ptr<ZinIrHazardNode>,std::__value_type<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::less<std::shared_ptr<ZinIrHazardNode>>,true>,std::allocator<std::__value_type<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrHazardNode>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<ZinIrHazardNode> const&>,std::tuple<>>(&v111, (unint64_t *)v11, (uint64_t)&std::piecewise_construct, &v99);
          std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](v27 + 6, v2 + 4);
        }
LABEL_29:
        ++v9;
      }
      v28 = (_QWORD *)v2[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v2[2];
          v30 = *v29 == (_QWORD)v2;
          v2 = v29;
        }
        while (!v30);
      }
      v2 = v29;
    }
    while (v29 != (_QWORD *)v1);
    v31 = v111;
    if (v111 != (uint64_t *)v112)
    {
      do
      {
        v32 = v31[5];
        v33 = (ZinIrHazardNode **)(v31 + 4);
        v34 = *(_QWORD *)this;
        v105 = v31[4];
        v106 = (std::__shared_weak_count *)v32;
        if (v32)
        {
          v35 = (unint64_t *)(v32 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = v31[7];
        v103 = v31[6];
        v104 = (std::__shared_weak_count *)v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        ZinIrHazardGraph::RemoveEdge(v34, &v105, &v103);
        v40 = v104;
        if (v104)
        {
          v41 = (unint64_t *)&v104->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v43 = v106;
        if (v106)
        {
          v44 = (unint64_t *)&v106->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = (ZinIrHazardNode **)(v31 + 6);
        v102 = 0;
        if (ZinIrHazardNode::GetL2SourceType(v31[6], &v102))
        {
          L2SrcDep = (_DWORD *)ZinMirL2Config::GetL2SrcDep(*(_QWORD *)(*(_QWORD *)*v46 + 264) + 120, v102);
          LODWORD(v99) = *L2SrcDep;
          std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v100, (uint64_t)(L2SrcDep + 2));
          v48 = v101;
          if (v101)
          {
            while ((uint64_t)v48[3] <= 0)
            {
              v48 = (_QWORD *)*v48;
              if (!v48)
                goto LABEL_57;
            }
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v100);
            goto LABEL_113;
          }
LABEL_57:
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v100);
        }
        v49 = (ZinIrHazardNode *)v31[4];
        v50 = v31[5];
        v99 = (uint64_t *)v49;
        v100[0] = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
          v49 = *v33;
        }
        if (*((_DWORD *)v49 + 5) == 1)
        {
          v53 = *(_QWORD *)this;
          v54 = (_QWORD *)(*(_QWORD *)this + 64);
          v97 = (unint64_t *)(v31 + 4);
          v55 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v54, &v97);
          v56 = (uint64_t **)(v53 + 104);
          if (v55)
            v56 = v55 + 3;
          v57 = (ZinIrHazardNode ***)*v56;
          v58 = (ZinIrHazardNode ***)v56[1];
          while (v57 != v58)
          {
            v59 = *v57;
            LayerTID = ZinIrHazardNode::GetLayerTID(**v57);
            if (LayerTID == ZinIrHazardNode::GetLayerTID(*v33)
              && !*((_DWORD *)*v59 + 5)
              && *((_DWORD *)*v59 + 4) == *((_DWORD *)*v33 + 4))
            {
              std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](&v99, (uint64_t *)v59);
              break;
            }
            ++v57;
          }
        }
        v61 = (ZinIrHazardNode *)v31[6];
        v62 = v31[7];
        v97 = (unint64_t *)v61;
        v98 = (std::__shared_weak_count *)v62;
        if (v62)
        {
          v63 = (unint64_t *)(v62 + 8);
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
          v61 = *v46;
        }
        if (*((_DWORD *)v61 + 5) == 1)
        {
          v65 = *(_QWORD *)this;
          v66 = (_QWORD *)(*(_QWORD *)this + 64);
          v113[0] = (unint64_t *)(v31 + 6);
          v67 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v66, v113);
          v68 = (uint64_t **)(v65 + 104);
          if (v67)
            v68 = v67 + 3;
          v69 = (ZinIrHazardNode ***)*v68;
          v70 = (ZinIrHazardNode ***)v68[1];
          while (v69 != v70)
          {
            v71 = *v69;
            v72 = ZinIrHazardNode::GetLayerTID(**v69);
            if (v72 == ZinIrHazardNode::GetLayerTID(*v46)
              && !*((_DWORD *)*v71 + 5)
              && *((_DWORD *)*v71 + 4) == *((_DWORD *)*v46 + 4))
            {
              std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](&v97, (uint64_t *)v71);
              break;
            }
            ++v69;
          }
        }
        v73 = *(_QWORD *)this;
        v95 = v99;
        v96 = (std::__shared_weak_count *)v100[0];
        if (v100[0])
        {
          v74 = (unint64_t *)(v100[0] + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        v93 = v97;
        v94 = v98;
        if (v98)
        {
          v76 = (unint64_t *)&v98->__shared_owners_;
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        ZinIrHazardGraph::AddSymbolAliasEdge(v73, (unint64_t *)&v95, (uint64_t *)&v93);
        v78 = v94;
        if (v94)
        {
          v79 = (unint64_t *)&v94->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v81 = v96;
        if (v96)
        {
          v82 = (unint64_t *)&v96->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v84 = v98;
        if (v98)
        {
          v85 = (unint64_t *)&v98->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v87 = (std::__shared_weak_count *)v100[0];
        if (v100[0])
        {
          v88 = (unint64_t *)(v100[0] + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
LABEL_113:
        v90 = (uint64_t *)v31[1];
        if (v90)
        {
          do
          {
            v91 = v90;
            v90 = (uint64_t *)*v90;
          }
          while (v90);
        }
        else
        {
          do
          {
            v91 = (uint64_t *)v31[2];
            v30 = *v91 == (_QWORD)v31;
            v31 = v91;
          }
          while (!v30);
        }
        v31 = v91;
      }
      while (v91 != (uint64_t *)v112);
    }
  }
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::destroy((uint64_t)&v111, v112[0]);
  return 0;
}

void sub_20705066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::destroy(v7 - 120, *(_QWORD **)(v7 - 112));
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::OptimizeHazardEdges(ZinMirL2HazardAnalysis *this)
{
  _QWORD *v2;
  void *__p[2];
  char v4;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if ((*(_BYTE *)(v2[1] + 96) & 0x10) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "before.hz_graph.dot");
    ZinMirL2HazardAnalysis::CreateDotFile((uint64_t *****)this, (uint64_t)__p, 0, 0x7FFFFFFFuLL);
    if (v4 < 0)
      operator delete(__p[0]);
    v2 = (_QWORD *)*((_QWORD *)this + 3);
  }
  ZinIrNgraphUtils::TransitiveReduction<ZinIrHazardGraph>(*(_QWORD **)this, 7 * *(_QWORD *)(*v2 + 1096));
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 96) & 0x10) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "after.hz_graph.dot");
    ZinMirL2HazardAnalysis::CreateDotFile((uint64_t *****)this, (uint64_t)__p, 0, 0x7FFFFFFFuLL);
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_2070507C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinMirL2HazardAnalysis::OptimizeL2DepWithPositiveOffset(ZinMirL2HazardAnalysis *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  ZinBondedUtils *v8;
  const ZinANELayer *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *L2SrcDep;
  _QWORD *v16;
  BOOL v17;
  const ZinANELayer *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t **v25;
  uint64_t **v26;
  unint64_t **v27;
  unint64_t **v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  BOOL EdgeType;
  BOOL v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t **v58;
  unint64_t **v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  char v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  std::__shared_weak_count *v99;
  int v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t **v103;
  unint64_t **v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char **v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  _QWORD *v113;
  _BYTE *v114;
  uint64_t v115;

  v1 = **((_QWORD **)this + 3);
  if (*(int *)(v1 + 4) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (uint64_t *)(*((_QWORD *)this + 48) + 24 * v3);
      v5 = *v4;
      v6 = v4[1];
      v86 = v3;
      v87 = v6;
      if (*v4 != v6)
      {
        do
        {
          v113 = 0;
          v114 = 0;
          v115 = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v113, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
          v7 = v113;
          if (v114 - (_BYTE *)v113 == 16)
          {
            v8 = (ZinBondedUtils *)*v113;
            v9 = (const ZinANELayer *)v113[1];
            v10 = *(_QWORD *)(*v113 + 264);
            v11 = *((_QWORD *)v9 + 33);
            v12 = operator new(0xCuLL);
            v88 = v10;
            v89 = v5;
            v90 = 0;
            v13 = 0;
            *(_QWORD *)v12 = 0x100000000;
            v12[2] = 2;
            do
            {
              v14 = v12;
              L2SrcDep = (_DWORD *)ZinMirL2Config::GetL2SrcDep(v11 + 120, v12[v13]);
              LODWORD(v109) = *L2SrcDep;
              std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)&v110, (uint64_t)(L2SrcDep + 2));
              v16 = &v112->__vftable;
              if ((_DWORD)v109)
                v17 = v112 == 0;
              else
                v17 = 1;
              if (!v17)
              {
                while ((uint64_t)v16[3] <= 0)
                {
                  v16 = (_QWORD *)*v16;
                  if (!v16)
                    goto LABEL_14;
                }
                v90 = 1;
              }
LABEL_14:
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v110);
              ++v13;
              v12 = v14;
            }
            while (v13 != 3);
            if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 158)
              && !ZinBondedUtils::AreAssignedToSameANE(v8, v9, v18))
            {
              ZinAssertImpl("An L2 dep pair must be assigned to the same ANE");
            }
            v106 = 0;
            v107 = 0;
            v108 = 0;
            ZinMirL2HazardAnalysis::GetReadBeginHazardNodes(this, (uint64_t)v9, &v106);
            ZinMirL2HazardAnalysis::GetWriteBeginHazardNodes(this, (uint64_t)v9, &v106);
            v103 = 0;
            v104 = 0;
            v105 = 0;
            v19 = v106;
            v91 = v107;
            if (v106 != v107)
            {
              while (2)
              {
                v20 = (std::__shared_weak_count *)*((_QWORD *)v19 + 1);
                v101 = *(_QWORD *)v19;
                v102 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v22 = __ldxr(p_shared_owners);
                  while (__stxr(v22 + 1, p_shared_owners));
                }
                v23 = *(_QWORD **)this;
                v24 = (_QWORD *)(*(_QWORD *)this + 64);
                v109 = (char **)&v101;
                v25 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v24, (unint64_t **)&v109);
                v26 = (uint64_t **)(v23 + 13);
                if (v25)
                  v26 = v25 + 3;
                v27 = (unint64_t **)*v26;
                v28 = (unint64_t **)v26[1];
LABEL_24:
                if (v27 == v28)
                {
                  v55 = v102;
                  if (v102)
                  {
                    v56 = (unint64_t *)&v102->__shared_owners_;
                    do
                      v57 = __ldaxr(v56);
                    while (__stlxr(v57 - 1, v56));
                    if (!v57)
                    {
                      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                      std::__shared_weak_count::__release_weak(v55);
                    }
                  }
                  v19 += 16;
                  if (v19 == v91)
                  {
                    v59 = v103;
                    v58 = v104;
                    if ((v90 & (v104 != v103)) != 0)
                    {
                      *(_BYTE *)(v88 + 344) = 1;
                      do
                      {
                        v61 = *v59;
                        v60 = (std::__shared_weak_count *)v59[1];
                        v109 = (char **)*v59;
                        v110 = v60;
                        if (v60)
                        {
                          v62 = (unint64_t *)&v60->__shared_owners_;
                          do
                            v63 = __ldxr(v62);
                          while (__stxr(v63 + 1, v62));
                        }
                        v65 = (uint64_t)v59[2];
                        v64 = (std::__shared_weak_count *)v59[3];
                        v111 = v65;
                        v112 = v64;
                        if (v64)
                        {
                          v66 = (unint64_t *)&v64->__shared_owners_;
                          do
                            v67 = __ldxr(v66);
                          while (__stxr(v67 + 1, v66));
                        }
                        v68 = *(_QWORD **)this;
                        v94 = v61;
                        v95 = v60;
                        if (v60)
                        {
                          v69 = (unint64_t *)&v60->__shared_owners_;
                          do
                            v70 = __ldxr(v69);
                          while (__stxr(v70 + 1, v69));
                        }
                        v92 = v65;
                        v93 = v64;
                        if (v64)
                        {
                          v71 = (unint64_t *)&v64->__shared_owners_;
                          do
                            v72 = __ldxr(v71);
                          while (__stxr(v72 + 1, v71));
                        }
                        v73 = ZinIrHazardGraph::RemoveEdge((uint64_t)v68, (uint64_t *)&v94, &v92);
                        v74 = v93;
                        if (v93)
                        {
                          v75 = (unint64_t *)&v93->__shared_owners_;
                          do
                            v76 = __ldaxr(v75);
                          while (__stlxr(v76 - 1, v75));
                          if (!v76)
                          {
                            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                            std::__shared_weak_count::__release_weak(v74);
                          }
                        }
                        v77 = v95;
                        if (v95)
                        {
                          v78 = (unint64_t *)&v95->__shared_owners_;
                          do
                            v79 = __ldaxr(v78);
                          while (__stlxr(v79 - 1, v78));
                          if (!v79)
                          {
                            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                            std::__shared_weak_count::__release_weak(v77);
                          }
                        }
                        if ((v73 & 1) == 0)
                          ZinAssertImpl("edge is not removed properly");
                        v80 = v112;
                        if (v112)
                        {
                          v81 = (unint64_t *)&v112->__shared_owners_;
                          do
                            v82 = __ldaxr(v81);
                          while (__stlxr(v82 - 1, v81));
                          if (!v82)
                          {
                            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                            std::__shared_weak_count::__release_weak(v80);
                          }
                        }
                        v83 = v110;
                        if (v110)
                        {
                          v84 = (unint64_t *)&v110->__shared_owners_;
                          do
                            v85 = __ldaxr(v84);
                          while (__stlxr(v85 - 1, v84));
                          if (!v85)
                          {
                            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                            std::__shared_weak_count::__release_weak(v83);
                          }
                        }
                        v59 += 4;
                      }
                      while (v59 != v58);
                    }
                    goto LABEL_105;
                  }
                  continue;
                }
                break;
              }
              v29 = *v27;
              v100 = 0;
              v30 = *(_QWORD **)this;
              v31 = v29[1];
              v98 = (unint64_t *)*v29;
              v99 = (std::__shared_weak_count *)v31;
              if (v31)
              {
                v32 = (unint64_t *)(v31 + 8);
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
              }
              v96 = v101;
              v97 = v102;
              if (v102)
              {
                v34 = (unint64_t *)&v102->__shared_owners_;
                do
                  v35 = __ldxr(v34);
                while (__stxr(v35 + 1, v34));
              }
              EdgeType = ZinIrHazardGraph::GetEdgeType((uint64_t)v30, (unint64_t *)&v98, &v96, &v100);
              v37 = v100 != 1 && EdgeType;
              v38 = v97;
              if (v97)
              {
                v39 = (unint64_t *)&v97->__shared_owners_;
                do
                  v40 = __ldaxr(v39);
                while (__stlxr(v40 - 1, v39));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              v41 = v99;
              if (!v99)
                goto LABEL_43;
              v42 = (unint64_t *)&v99->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
                if (!v37)
                  goto LABEL_44;
              }
              else
              {
LABEL_43:
                if (!v37)
                {
LABEL_44:
                  if (*(ZinBondedUtils **)*v29 != v8)
                  {
                    v44 = v29[1];
                    v109 = (char **)*v29;
                    v110 = (std::__shared_weak_count *)v44;
                    if (v44)
                    {
                      v45 = (unint64_t *)(v44 + 8);
                      do
                        v46 = __ldxr(v45);
                      while (__stxr(v46 + 1, v45));
                    }
                    v111 = v101;
                    v112 = v102;
                    if (v102)
                    {
                      v47 = (unint64_t *)&v102->__shared_owners_;
                      do
                        v48 = __ldxr(v47);
                      while (__stxr(v48 + 1, v47));
                    }
                    std::vector<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::push_back[abi:ne180100]((uint64_t *)&v103, (uint64_t)&v109);
                    v49 = v112;
                    if (v112)
                    {
                      v50 = (unint64_t *)&v112->__shared_owners_;
                      do
                        v51 = __ldaxr(v50);
                      while (__stlxr(v51 - 1, v50));
                      if (!v51)
                      {
                        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                        std::__shared_weak_count::__release_weak(v49);
                      }
                    }
                    v52 = v110;
                    if (v110)
                    {
                      v53 = (unint64_t *)&v110->__shared_owners_;
                      do
                        v54 = __ldaxr(v53);
                      while (__stlxr(v54 - 1, v53));
                      if (!v54)
                      {
                        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                        std::__shared_weak_count::__release_weak(v52);
                      }
                    }
                  }
                }
              }
              ++v27;
              goto LABEL_24;
            }
LABEL_105:
            v109 = (char **)&v103;
            std::vector<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
            v109 = &v106;
            std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
            operator delete(v14);
            v7 = v113;
            v5 = v89;
            v6 = v87;
          }
          if (v7)
          {
            v114 = v7;
            operator delete(v7);
          }
          v5 += 24;
        }
        while (v5 != v6);
        v1 = **((_QWORD **)this + 3);
      }
      v3 = v86 + 1;
    }
    while (v86 + 1 < *(int *)(v1 + 4));
  }
}

void sub_207050E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  uint64_t v33;
  void *v35;

  operator delete(v32);
  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirL2HazardAnalysis::SetL2HazardBits(ZinMirL2HazardAnalysis *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t **v9;
  unint64_t **v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL EdgeType;
  BOOL v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  _BOOL4 v33;
  _QWORD *v34;
  _BOOL4 v35;
  int v36;
  char v37;
  _BOOL4 HasL2DependentMode;
  _QWORD *v39;
  _BOOL4 v40;
  int v41;
  char v42;
  _QWORD *v43;
  _BOOL4 v44;
  int v45;
  char v46;
  _QWORD *v47;
  _BOOL4 v48;
  int v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  _BOOL4 v53;
  int v54;
  char v55;
  _QWORD *v56;
  _BOOL4 v57;
  int v58;
  char v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  BOOL v63;
  uint8_t v65;
  char v66[15];
  uint8_t v67;
  char v68[7];
  unint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  int v77;

  ZinMirL2HazardAnalysis::SetFirstTdL2HazardBits((uint64_t)this);
  v2 = *(_QWORD *)this + 8;
  v3 = **(_QWORD ***)this;
  if (v3 == (_QWORD *)v2)
    goto LABEL_133;
  do
  {
    v4 = v3 + 4;
    v5 = *(_QWORD ***)this;
    v6 = (_QWORD *)(*(_QWORD *)this + 64);
    v69 = v3 + 4;
    v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v6, &v69);
    v8 = v5 + 13;
    if (v7)
      v8 = v7 + 3;
    v9 = (unint64_t **)*v8;
    v10 = (unint64_t **)v8[1];
    while (v9 != v10)
    {
      v11 = *v9;
      v12 = *v4;
      v13 = **v9;
      if (*(_QWORD *)(*(_QWORD *)*v4 + 360) - *(_QWORD *)(*(_QWORD *)v13 + 360) >= *(_QWORD *)(**((_QWORD **)this + 3)
                                                                                                  + 1096))
        goto LABEL_115;
      v77 = 0;
      v14 = *(_QWORD **)this;
      v15 = (std::__shared_weak_count *)v11[1];
      v75 = v13;
      v76 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        v12 = *v4;
      }
      v18 = (std::__shared_weak_count *)v3[5];
      v73 = v12;
      v74 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      EdgeType = ZinIrHazardGraph::GetEdgeType((uint64_t)v14, &v75, &v73, &v77);
      v22 = v77 != 1 && EdgeType;
      v23 = v74;
      if (v74)
      {
        v24 = (unint64_t *)&v74->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = v76;
      if (!v76)
        goto LABEL_26;
      v27 = (unint64_t *)&v76->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        if (v22)
          goto LABEL_115;
      }
      else
      {
LABEL_26:
        if (v22)
          goto LABEL_115;
      }
      v72 = 0;
      if ((ZinEngineLayerMirInfo::HasChainRead(*(_DWORD **)(*(_QWORD *)*v4 + 264), &v72) & 1) != 0)
        goto LABEL_115;
      v29 = *(_BYTE **)(*(_QWORD *)*v4 + 264);
      v30 = *(_DWORD *)(*v4 + 16);
      if (v30 > 2)
      {
        v31 = *v11;
        if (v30 == 3)
        {
          v32 = *(_DWORD *)(v31 + 16);
          if (v32 == 3)
          {
            if (ZinIrOpLayer::IsNELayer(*(ZinIrOpLayer **)v31))
              v29[335] = 1;
            else
              v29[343] = 1;
            goto LABEL_115;
          }
          if (v32 <= 2)
          {
            if (ZinIrOpLayer::IsNELayer(*(ZinIrOpLayer **)v31))
              v29[334] = 1;
            else
              v29[342] = 1;
            goto LABEL_115;
          }
        }
      }
      else
      {
        v31 = *v11;
        if (*(_DWORD *)(*v11 + 16) <= 2u)
        {
          if (ZinIrOpLayer::IsNELayer(*(ZinIrOpLayer **)v31))
          {
            if (v30 == 2)
            {
              v29[332] = 1;
            }
            else if (v30 == 1)
            {
              v29[330] = 1;
            }
            else
            {
              v29[328] = 1;
            }
          }
          else if (v30 == 2)
          {
            v29[340] = 1;
          }
          else if (v30 == 1)
          {
            v29[338] = 1;
          }
          else
          {
            v29[336] = 1;
          }
          goto LABEL_115;
        }
      }
      if (!ZinIrOpLayer::IsNELayer(*(ZinIrOpLayer **)v31))
      {
        v70 = 0;
        v71 = 0;
        v69 = (unint64_t *)&v70;
        HasL2DependentMode = ZinMirL2Config::HasL2DependentMode((_DWORD *)(*(_QWORD *)(*(_QWORD *)*v4 + 264) + 120), 2, (uint64_t)&v69);
        switch(v30)
        {
          case 0u:
            v39 = v70;
            if (v70)
              v40 = HasL2DependentMode;
            else
              v40 = 0;
            if (!v40)
              goto LABEL_67;
            while (1)
            {
              v41 = *((_DWORD *)v39 + 7);
              if (v41 <= 0)
              {
                if ((v41 & 0x80000000) == 0)
                {
                  v42 = 0;
                  goto LABEL_68;
                }
                ++v39;
              }
              v39 = (_QWORD *)*v39;
              if (!v39)
              {
LABEL_67:
                v42 = 1;
LABEL_68:
                v29[337] = v42;
                goto LABEL_114;
              }
            }
          case 1u:
            v52 = v70;
            if (v70)
              v53 = HasL2DependentMode;
            else
              v53 = 0;
            if (!v53)
              goto LABEL_100;
            while (1)
            {
              v54 = *((_DWORD *)v52 + 7);
              if (v54 <= 1)
              {
                if (v54 == 1)
                {
                  v55 = 0;
                  goto LABEL_101;
                }
                ++v52;
              }
              v52 = (_QWORD *)*v52;
              if (!v52)
              {
LABEL_100:
                v55 = 1;
LABEL_101:
                v29[339] = v55;
                goto LABEL_114;
              }
            }
          case 2u:
            v56 = v70;
            if (v70)
              v57 = HasL2DependentMode;
            else
              v57 = 0;
            if (!v57)
              goto LABEL_110;
            break;
          case 3u:
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinMirL2HazardAnalysis::SetL2HazardBits(&v65, v66, v60);
            goto LABEL_114;
          default:
            goto LABEL_114;
        }
        while (1)
        {
          v58 = *((_DWORD *)v56 + 7);
          if (v58 <= 2)
          {
            if (v58 == 2)
            {
              v59 = 0;
              goto LABEL_111;
            }
            ++v56;
          }
          v56 = (_QWORD *)*v56;
          if (!v56)
          {
LABEL_110:
            v59 = 1;
LABEL_111:
            v29[341] = v59;
            goto LABEL_114;
          }
        }
      }
      v70 = 0;
      v71 = 0;
      v69 = (unint64_t *)&v70;
      v33 = ZinMirL2Config::HasL2DependentMode((_DWORD *)(*(_QWORD *)(*(_QWORD *)*v4 + 264) + 120), 1, (uint64_t)&v69);
      switch(v30)
      {
        case 0u:
          v34 = v70;
          if (v70)
            v35 = v33;
          else
            v35 = 0;
          if (!v35)
          {
LABEL_56:
            v37 = 1;
            goto LABEL_57;
          }
          while (2)
          {
            v36 = *((_DWORD *)v34 + 7);
            if (v36 > 0)
              goto LABEL_55;
            if (v36 < 0)
            {
              ++v34;
LABEL_55:
              v34 = (_QWORD *)*v34;
              if (!v34)
                goto LABEL_56;
              continue;
            }
            break;
          }
          v37 = 0;
LABEL_57:
          v29[329] = v37;
          goto LABEL_114;
        case 1u:
          v43 = v70;
          if (v70)
            v44 = v33;
          else
            v44 = 0;
          if (!v44)
            goto LABEL_78;
          while (1)
          {
            v45 = *((_DWORD *)v43 + 7);
            if (v45 <= 1)
            {
              if (v45 == 1)
              {
                v46 = 0;
                goto LABEL_79;
              }
              ++v43;
            }
            v43 = (_QWORD *)*v43;
            if (!v43)
            {
LABEL_78:
              v46 = 1;
LABEL_79:
              v29[331] = v46;
              goto LABEL_114;
            }
          }
        case 2u:
          v47 = v70;
          if (v70)
            v48 = v33;
          else
            v48 = 0;
          if (!v48)
            goto LABEL_88;
          break;
        case 3u:
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinMirL2HazardAnalysis::SetL2HazardBits(&v67, v68, v51);
          goto LABEL_114;
        default:
          goto LABEL_114;
      }
      while (1)
      {
        v49 = *((_DWORD *)v47 + 7);
        if (v49 <= 2)
          break;
LABEL_87:
        v47 = (_QWORD *)*v47;
        if (!v47)
        {
LABEL_88:
          v50 = 1;
          goto LABEL_89;
        }
      }
      if (v49 != 2)
      {
        ++v47;
        goto LABEL_87;
      }
      v50 = 0;
LABEL_89:
      v29[333] = v50;
LABEL_114:
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v69, v70);
LABEL_115:
      ++v9;
    }
    v61 = (_QWORD *)v3[1];
    if (v61)
    {
      do
      {
        v62 = v61;
        v61 = (_QWORD *)*v61;
      }
      while (v61);
    }
    else
    {
      do
      {
        v62 = (_QWORD *)v3[2];
        v63 = *v62 == (_QWORD)v3;
        v3 = v62;
      }
      while (!v63);
    }
    v3 = v62;
  }
  while (v62 != (_QWORD *)v2);
LABEL_133:
  ZinMirL2HazardAnalysis::DebugPrintHazardResults((uint64_t)this);
  return 0;
}

void sub_2070514F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::MaterializeParallelExecution(ZinMirL2HazardAnalysis *this)
{
  uint64_t v1;
  unint64_t v3;
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  ZinEngineLayerMirInfo ***v9;
  char *v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *v14;
  void **v15;
  ZinEngineLayerMirInfo **v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  char v20;
  BOOL v21;
  ZinEngineLayerMirInfo ***v22;
  ZinEngineLayerMirInfo ***v23;
  uint64_t v24;
  uint8_t buf[4];
  std::string *v26;
  __int16 v27;
  std::string *v28;
  __int16 v29;
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v1 = **((_QWORD **)this + 3);
  if (!*(_DWORD *)(v1 + 4))
    return;
  v3 = 0;
  v4 = MEMORY[0x24BDACB70];
  do
  {
    v5 = (uint64_t *)(*((_QWORD *)this + 48) + 24 * v3);
    v7 = *v5;
    v6 = v5[1];
    if (*v5 == v6)
      goto LABEL_29;
    v8 = 0;
    do
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v22, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
      v9 = v22;
      if ((char *)v23 - (char *)v22 == 8)
      {
        v21 = 0;
        if (ZinMirL2HazardAnalysis::TryEnablingParallelExecution(this, (const ZinANELayer *)v8, *v22, &v21)&& *((_BYTE *)this + 376))
        {
          if (v21)
            v10 = "True";
          else
            v10 = "False";
          std::string::basic_string[abi:ne180100]<0>(__p, v10);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
          {
            std::to_string(&v18, v8[45]);
            v11 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
            v12 = v18.__r_.__value_.__r.__words[0];
            std::to_string(&v17, (uint64_t)(*v22)[45]);
            v13 = &v18;
            if (v11 < 0)
              v13 = (std::string *)v12;
            v14 = &v17;
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
            v15 = __p;
            if (v20 < 0)
              v15 = (void **)__p[0];
            *(_DWORD *)buf = 136315650;
            v26 = v13;
            v27 = 2080;
            v28 = v14;
            v29 = 2080;
            v30 = v15;
            _os_log_impl(&dword_2069AB000, v4, OS_LOG_TYPE_INFO, "Info: parallel execution is materialized: TID%s->TID%s (L2_barrier=%s)", buf, 0x20u);
            if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v17.__r_.__value_.__l.__data_);
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v18.__r_.__value_.__l.__data_);
          }
          if (v20 < 0)
            operator delete(__p[0]);
        }
        v9 = v22;
        v16 = *v22;
      }
      else
      {
        v16 = 0;
        v8 = 0;
        if (!v22)
          goto LABEL_27;
      }
      v23 = v9;
      operator delete(v9);
      v8 = (uint64_t *)v16;
LABEL_27:
      v7 += 24;
    }
    while (v7 != v6);
    v1 = **((_QWORD **)this + 3);
LABEL_29:
    ++v3;
  }
  while (v3 < *(int *)(v1 + 4));
}

void sub_207051778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirL2HazardAnalysis::UpdateSymbolToHazardNodeMap(uint64_t a1, uint64_t a2, __int128 *a3)
{
  char **v4;
  uint64_t v6;
  uint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = (char **)std::__hash_table<std::__hash_value_type<ZinIrOpLayerGraph *,std::vector<std::shared_ptr<ZinPattern>>>,std::__unordered_map_hasher<ZinIrOpLayerGraph *,std::__hash_value_type<ZinIrOpLayerGraph *,std::vector<std::shared_ptr<ZinPattern>>>,std::hash<ZinIrOpLayerGraph *>,std::equal_to<ZinIrOpLayerGraph *>,true>,std::__unordered_map_equal<ZinIrOpLayerGraph *,std::__hash_value_type<ZinIrOpLayerGraph *,std::vector<std::shared_ptr<ZinPattern>>>,std::equal_to<ZinIrOpLayerGraph *>,std::hash<ZinIrOpLayerGraph *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayerGraph *,std::vector<std::shared_ptr<ZinPattern>>>>>::__emplace_unique_key_args<ZinIrOpLayerGraph *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayerGraph * const&>,std::tuple<>>(a1 + 328, &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](v4 + 3, a3);
}

char *ZinMirL2HazardAnalysis::GetHazardNodes@<X0>(ZinMirL2HazardAnalysis *this@<X0>, ZinIrSymbol *a2@<X1>, uint64_t a3@<X8>)
{
  char *result;
  ZinIrSymbol *v5;

  v5 = a2;
  result = (char *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 41, &v5);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (result)
    return std::vector<std::shared_ptr<ZinIrTransform>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform>*,std::shared_ptr<ZinIrTransform>*>((char *)a3, *((_QWORD **)result + 3), *((_QWORD **)result + 4), (uint64_t)(*((_QWORD *)result + 4) - *((_QWORD *)result + 3)) >> 4);
  return result;
}

BOOL ZinIrNgraph<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare>::AddNode(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = std::__tree<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare,std::allocator<std::shared_ptr<ZinIrHazardNode>>>::__count_unique<std::shared_ptr<ZinIrHazardNode>>((uint64_t)a1, a2);
  if (!v4)
    std::__tree<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare,std::allocator<std::shared_ptr<ZinIrHazardNode>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode> const&>(a1, (uint64_t)a2, a2);
  return v4 == 0;
}

void ZinMirL2HazardAnalysis::CreateIntraEngineInvariantEdges(uint64_t *a1, uint64_t *a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  __int128 v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  __int128 v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  __int128 v77;

  v10 = *a2;
  if (a2[1] != *a2)
  {
    v11 = 0;
    do
    {
      v12 = *a1;
      v13 = *(_OWORD *)(v10 + 16 * v11);
      v77 = v13;
      if (*((_QWORD *)&v13 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = *(_OWORD *)(*a3 + 16 * v11);
      v76 = v16;
      if (*((_QWORD *)&v16 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      ZinIrHazardGraph::AddInvariantEdge(v12, (unint64_t *)&v77, (uint64_t *)&v76);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
      if (*((_QWORD *)&v77 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      ++v11;
      v10 = *a2;
    }
    while (v11 < (a2[1] - *a2) >> 4);
  }
  v25 = *a1;
  v26 = a4[1];
  v74 = *a4;
  v75 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = a5[1];
  v72 = *a5;
  v73 = (std::__shared_weak_count *)v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  ZinIrHazardGraph::AddInvariantEdge(v25, (unint64_t *)&v74, &v72);
  v32 = v73;
  if (v73)
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v75;
  if (v75)
  {
    v36 = (unint64_t *)&v75->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *a2;
  if (a2[1] != *a2)
  {
    v39 = 0;
    do
    {
      v40 = *a1;
      v41 = *(_OWORD *)(v38 + 16 * v39);
      v71 = v41;
      if (*((_QWORD *)&v41 + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = a4[1];
      v69 = *a4;
      v70 = (std::__shared_weak_count *)v44;
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      ZinIrHazardGraph::AddInvariantEdge(v40, (unint64_t *)&v71, (uint64_t *)&v69);
      v47 = v70;
      if (v70)
      {
        v48 = (unint64_t *)&v70->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = *a1;
      v54 = *(_OWORD *)(*a3 + 16 * v39);
      v68 = v54;
      if (*((_QWORD *)&v54 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      v57 = a5[1];
      v66 = *a5;
      v67 = (std::__shared_weak_count *)v57;
      if (v57)
      {
        v58 = (unint64_t *)(v57 + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      ZinIrHazardGraph::AddInvariantEdge(v53, (unint64_t *)&v68, &v66);
      v60 = v67;
      if (v67)
      {
        v61 = (unint64_t *)&v67->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
      if (*((_QWORD *)&v68 + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      ++v39;
      v38 = *a2;
    }
    while (v39 < (a2[1] - *a2) >> 4);
  }
}

void sub_207051C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::CreateInterEngineInvariantEdges(uint64_t *a1, unint64_t **a2, uint64_t **a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  unint64_t *v6;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;

  v6 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      v11 = (std::__shared_weak_count *)v6[1];
      v59 = *v6;
      v60 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = *a3;
      v15 = a3[1];
      if (*a3 != v15)
      {
        do
        {
          v17 = *v14;
          v16 = (std::__shared_weak_count *)v14[1];
          v57 = *v14;
          v58 = v16;
          if (v16)
          {
            v18 = (unint64_t *)&v16->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v20 = *a1;
          v55 = v59;
          v56 = v60;
          if (v60)
          {
            v21 = (unint64_t *)&v60->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v53 = v17;
          v54 = v16;
          if (v16)
          {
            v23 = (unint64_t *)&v16->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          ZinIrHazardGraph::AddInvariantEdge(v20, &v55, &v53);
          v25 = v54;
          if (v54)
          {
            v26 = (unint64_t *)&v54->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v28 = v56;
          if (v56)
          {
            v29 = (unint64_t *)&v56->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v31 = v58;
          if (v58)
          {
            v32 = (unint64_t *)&v58->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v14 += 2;
        }
        while (v14 != v15);
        v11 = v60;
      }
      if (v11)
      {
        v34 = (unint64_t *)&v11->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v6 += 2;
    }
    while (v6 != v5);
    v36 = *a1;
    v37 = a4[1];
    v51 = *a4;
    v52 = (std::__shared_weak_count *)v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = a5[1];
    v49 = *a5;
    v50 = (std::__shared_weak_count *)v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    ZinIrHazardGraph::AddInvariantEdge(v36, &v51, &v49);
    v43 = v50;
    if (v50)
    {
      v44 = (unint64_t *)&v50->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v52;
    if (v52)
    {
      v47 = (unint64_t *)&v52->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
}

void sub_207051F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::CreateHazardEdgesForLiveSymbols(ZinMirL2HazardAnalysis *this, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  void **v6;
  ZinIrOpLayer **v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL4 IsNELayer;
  unsigned int v12;
  BOOL v13;
  void ***v14;
  uint64_t *v15;
  char **v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  ZinIrHazardNode **v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  void **v34[3];
  void **v35;
  ZinIrHazardNode **v36;
  uint64_t v37;
  void **v38;
  ZinIrHazardNode **v39;
  uint64_t v40;
  void **v41;
  ZinIrHazardNode **v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHazardNode **v45;
  uint64_t v46;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v24 = 0;
    v23 = 0;
  }
  else
  {
    do
    {
      ZinMirL2HazardAnalysis::GetHazardNodes(this, (ZinIrSymbol *)v4[4], (uint64_t)v34);
      v6 = v34[0];
      v5 = v34[1];
      while (v6 != v5)
      {
        v7 = (ZinIrOpLayer **)*v6;
        v8 = (char *)v6[1];
        *(_QWORD *)&v33 = *v6;
        *((_QWORD *)&v33 + 1) = v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        IsNELayer = ZinIrOpLayer::IsNELayer(*v7);
        v12 = *(_DWORD *)(v33 + 16);
        v13 = v12 >= 3;
        if (v12 >= 3)
          v14 = &v35;
        else
          v14 = &v41;
        if (v13)
          v15 = (uint64_t *)&v38;
        else
          v15 = &v44;
        if (IsNELayer)
          v16 = (char **)v15;
        else
          v16 = (char **)v14;
        std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](v16, &v33);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v6 += 2;
      }
      *(_QWORD *)&v33 = v34;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v22 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v22);
      }
      v4 = v21;
    }
    while (v21 != v3);
    v23 = v44;
    v24 = v45;
  }
  v25 = 126 - 2 * __clz(((uint64_t)v24 - v23) >> 4);
  if (v24 == (ZinIrHazardNode **)v23)
    v26 = 0;
  else
    v26 = v25;
  std::__introsort<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *,false>(v23, v24, (uint64_t)&v33, v26, 1);
  v27 = 126 - 2 * __clz(((char *)v39 - (char *)v38) >> 4);
  if (v39 == (ZinIrHazardNode **)v38)
    v28 = 0;
  else
    v28 = v27;
  std::__introsort<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *,false>((uint64_t)v38, v39, (uint64_t)&v33, v28, 1);
  v29 = 126 - 2 * __clz(((char *)v42 - (char *)v41) >> 4);
  if (v42 == (ZinIrHazardNode **)v41)
    v30 = 0;
  else
    v30 = v29;
  std::__introsort<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *,false>((uint64_t)v41, v42, (uint64_t)&v33, v30, 1);
  v31 = 126 - 2 * __clz(((char *)v36 - (char *)v35) >> 4);
  if (v36 == (ZinIrHazardNode **)v35)
    v32 = 0;
  else
    v32 = v31;
  std::__introsort<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *,false>((uint64_t)v35, v36, (uint64_t)&v33, v32, 1);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v44, (uint64_t *)&v41);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v44, (uint64_t *)&v35);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v38, (uint64_t *)&v41);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v38, (uint64_t *)&v35);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v44, (uint64_t *)&v38);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v44, &v44);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v38, (uint64_t *)&v38);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v38, &v44);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v41, (uint64_t *)&v35);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v41, (uint64_t *)&v41);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v35, (uint64_t *)&v35);
  ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups((uint64_t)this, &v35, (uint64_t *)&v41);
  v34[0] = (void **)&v35;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v34);
  v35 = (void **)&v38;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v35);
  v38 = (void **)&v41;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v38);
  v41 = (void **)&v44;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v41);
}

void sub_2070522EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *****a12, uint64_t a13, uint64_t a14, void ****a15, uint64_t a16, uint64_t a17, void ***a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;

  a12 = &a15;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a15 = &a18;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a18 = &a21;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a21 = (void **)(v21 - 104);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::CreateL2BarrierEdges(ZinMirL2HazardAnalysis *this, ZinANELayer *a2, ZinEngineLayerMirInfo **a3)
{
  ZinIrSymbol *L2RdSymbol;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  ZinIrSymbol *L2WrSymbol;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  ZinIrSymbol *v26;
  uint64_t *i;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  ZinEngineLayerMirInfo *v36;
  unint64_t v37;
  ZinIrTensor *v38;
  char *v39;
  char *v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  char *v57;
  unint64_t *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int *v63;
  int *v64;
  unint64_t *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  __int128 __p;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  int v97[4];

  v94 = 0;
  v95 = 0;
  v96 = 0;
  L2RdSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)a2 + 33), 0);
  ZinMirL2HazardAnalysis::GetHazardNodes(this, L2RdSymbol, (uint64_t)&v91);
  v7 = v91;
  v8 = v92;
  while (v7 != v8)
  {
    v9 = *(_QWORD *)v7;
    v10 = *((_QWORD *)v7 + 1);
    *(_QWORD *)&__p = *(_QWORD *)v7;
    *((_QWORD *)&__p + 1) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (*(ZinANELayer **)v9 == a2 && !*(_DWORD *)(v9 + 20))
      std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](&v94, &__p);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v7 += 16;
  }
  *(_QWORD *)&__p = &v91;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)a2 + 33));
  ZinMirL2HazardAnalysis::GetHazardNodes(this, L2WrSymbol, (uint64_t)&v91);
  v17 = v91;
  v18 = v92;
  while (v17 != v18)
  {
    v19 = *(_QWORD *)v17;
    v20 = *((_QWORD *)v17 + 1);
    *(_QWORD *)&__p = *(_QWORD *)v17;
    *((_QWORD *)&__p + 1) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (*(ZinANELayer **)v19 == a2 && !*(_DWORD *)(v19 + 20))
      std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](&v94, &__p);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v17 += 16;
  }
  *(_QWORD *)&__p = &v91;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v91 = 0;
  v92 = 0;
  v93 = 0;
  ZinMirL2HazardAnalysis::GetReadBeginHazardNodes(this, (uint64_t)a3, &v91);
  v26 = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(a3[33]);
  ZinMirL2HazardAnalysis::GetHazardNodes(this, v26, (uint64_t)&__p);
  v28 = (uint64_t *)*((_QWORD *)&__p + 1);
  for (i = (uint64_t *)__p; i != v28; i += 2)
  {
    v29 = *i;
    v30 = i[1];
    *(_QWORD *)&v88 = *i;
    *((_QWORD *)&v88 + 1) = v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    if (*(ZinEngineLayerMirInfo ***)v29 == a3 && !*(_DWORD *)(v29 + 20))
      std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](&v91, &v88);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  v83 = (uint64_t *)this;
  *(_QWORD *)&v88 = &__p;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  __p = 0uLL;
  v90 = 0;
  v36 = a3[11];
  if (a3[12] != v36)
  {
    v37 = 0;
    do
    {
      v38 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v36 + v37) + 32))(*((_QWORD *)v36 + v37), 0, 0);
      ZinIrTensor::GetTensorFamily(v38, (uint64_t)&v88);
      v39 = (char *)*((_QWORD *)&v88 + 1);
      v40 = (char *)v88;
      if ((_QWORD)v88 != *((_QWORD *)&v88 + 1))
      {
        do
        {
          if (*(ZinANELayer **)(*(_QWORD *)v40 + 96) == a2)
          {
            v97[0] = 0;
            if (ZinMemSourceIndexTranslator::GetL2SrcType(a3, v37, v97))
              ZinAssertImpl("Error: Trying to create L2 barrier edges for invalid L2 source");
            v41 = (char *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1) >= (unint64_t)v90)
            {
              v43 = (char *)__p;
              v44 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v46 = (uint64_t)&v90[-__p];
              if ((uint64_t)&v90[-__p] >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v90, v47);
                v41 = (char *)*((_QWORD *)&__p + 1);
                v43 = (char *)__p;
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = v97[0];
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *(_QWORD *)&__p = v49;
              *((_QWORD *)&__p + 1) = v42;
              v90 = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              **((_DWORD **)&__p + 1) = v97[0];
              v42 = v41 + 4;
            }
            *((_QWORD *)&__p + 1) = v42;
          }
          v40 += 8;
        }
        while (v40 != v39);
        v40 = (char *)v88;
      }
      if (v40)
      {
        *((_QWORD *)&v88 + 1) = v40;
        operator delete(v40);
      }
      ++v37;
      v36 = a3[11];
    }
    while (v37 < (a3[12] - v36) >> 3);
  }
  v51 = v94;
  v52 = v95;
  v80 = v95;
  while (v51 != v52)
  {
    v54 = *(_QWORD *)v51;
    v53 = (std::__shared_weak_count *)*((_QWORD *)v51 + 1);
    v81 = v51;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v56 = __ldxr(p_shared_owners);
      while (__stxr(v56 + 1, p_shared_owners));
    }
    v57 = v91;
    v82 = v92;
    if (v91 != v92)
    {
      v58 = (unint64_t *)&v53->__shared_owners_;
      while (1)
      {
        v60 = *(_QWORD *)v57;
        v59 = (std::__shared_weak_count *)*((_QWORD *)v57 + 1);
        if (v59)
        {
          v61 = (unint64_t *)&v59->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        v63 = (int *)*((_QWORD *)&__p + 1);
        v64 = (int *)__p;
        if ((_QWORD)__p != *((_QWORD *)&__p + 1))
          break;
LABEL_108:
        if (v59)
        {
          v76 = (unint64_t *)&v59->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v57 += 16;
        if (v57 == v82)
          goto LABEL_114;
      }
      v65 = (unint64_t *)&v59->__shared_owners_;
      while (2)
      {
        v66 = *v64;
        if (*v64 == 2)
        {
          if (*(_DWORD *)(v54 + 16) != 3 || *(_DWORD *)(v60 + 16) != 2)
            goto LABEL_93;
        }
        else if (v66 == 1)
        {
          if (*(_DWORD *)(v54 + 16) != 3 || *(_DWORD *)(v60 + 16) != 1)
            goto LABEL_93;
        }
        else
        {
          if (!v66 && *(_DWORD *)(v54 + 16) == 3 && !*(_DWORD *)(v60 + 16))
            goto LABEL_107;
LABEL_93:
          v67 = *v83;
          v86 = v54;
          v87 = v53;
          if (v53)
          {
            do
              v68 = __ldxr(v58);
            while (__stxr(v68 + 1, v58));
          }
          v84 = v60;
          v85 = v59;
          if (v59)
          {
            do
              v69 = __ldxr(v65);
            while (__stxr(v69 + 1, v65));
          }
          ZinIrHazardGraph::AddInvariantEdge(v67, &v86, &v84);
          v70 = v85;
          if (v85)
          {
            v71 = (unint64_t *)&v85->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v73 = v87;
          if (v87)
          {
            v74 = (unint64_t *)&v87->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }
LABEL_107:
        if (++v64 == v63)
          goto LABEL_108;
        continue;
      }
    }
LABEL_114:
    if (v53)
    {
      v78 = (unint64_t *)&v53->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v52 = v80;
    v51 = v81 + 16;
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  *(_QWORD *)&__p = &v91;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v91 = (char *)&v94;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
}

void sub_2070529A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  *(_QWORD *)(v23 - 96) = &a23;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 96));
  *(_QWORD *)(v23 - 96) = v23 - 120;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 96));
  _Unwind_Resume(a1);
}

uint64_t ZinMirL2HazardAnalysis::IsQualifiedForDependentMode(uint64_t a1, const ZinIrOpLayer *a2, uint64_t a3, char **a4, uint64_t a5)
{
  ZinIrOpLayerGraph *v10;
  ZinIrTensor *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t L2RdSymbol;
  uint64_t v22;
  uint64_t L2WrSymbol;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t HasResidentSymbolAlias;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  ZinIrTensor *v46;
  ZinIrTensor *v47;
  BOOL IsConnected;
  uint64_t v49;
  const ZinIrOpLayer *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  void *__p;
  _BYTE *v56;
  int v57;
  ZinIrTensor *RootTensor;

  v10 = (ZinIrOpLayerGraph *)*((_QWORD *)a2 + 19);
  v11 = (ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v11);
  v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a1 + 408), &RootTensor);
  if (*((_QWORD *)a2 + 45) + 1 == *(_QWORD *)(a3 + 360) && *(_DWORD *)(*(_QWORD *)(a3 + 64) + 8) != 93)
  {
    v13 = v12;
    v14 = *((_QWORD *)a2 + 33);
    if (!v14 || (*(_DWORD *)(v14 + 1632) - 3) <= 1)
    {
      if (*(_BYTE *)(**(_QWORD **)(a1 + 24) + 1117)
        || (v17 = *(_QWORD *)(v14 + 200),
            v17 == (*(uint64_t (**)(const ZinIrOpLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3))
        && (v18 = *(_QWORD *)(*(_QWORD *)(a3 + 264) + 200),
            v18 == (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 368))(a3, 3)))
      {
        v57 = 0;
        ZinIrOpLayerGraph::GetIndicesOfMatchedIncomingLayer(*(ZinIrOpLayerGraph **)(a3 + 152), (ZinIrOpLayer *)a3, a2, (unint64_t **)&__p);
        v15 = __p;
        if ((unint64_t)(v56 - (_BYTE *)__p) > 8)
        {
          v16 = 0;
          if (!__p)
            return v16;
          goto LABEL_71;
        }
        if (__p == v56)
        {
          L2RdSymbol = 0;
          v54 = -1;
        }
        else
        {
          v20 = *(_QWORD *)__p;
          v54 = v20;
          if ((v20 & 0x8000000000000000) != 0)
          {
            L2RdSymbol = 0;
          }
          else
          {
            v16 = 0;
            if (ZinMemSourceIndexTranslator::GetL2SrcType((_QWORD *)a3, v20, &v57) || v57 == 2)
            {
LABEL_70:
              v15 = __p;
              if (!__p)
                return v16;
LABEL_71:
              v56 = v15;
              operator delete(v15);
              return v16;
            }
            L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*(_QWORD *)(a3 + 264), v57);
          }
        }
        if (!ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a3)
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 568))(a3)
          || (LODWORD(v51) = 0,
              !ZinMemSourceIndexTranslator::GetL2SrcType((_QWORD *)a3, v54 == 0, (int *)&v51))
          && ((v22 = ZinEngineLayerMirInfo::GetL2RdSymbol(*(_QWORD *)(a3 + 264), (int)v51),
               L2WrSymbol = ZinEngineLayerMirInfo::GetL2WrSymbol(*(ZinEngineLayerMirInfo **)(a3 + 264)),
               *(_QWORD *)(v22 + 24) != *(_QWORD *)(L2WrSymbol + 24))
           || !*(_QWORD *)(v22 + 184)
            ? (v24 = 0)
            : (v24 = *(_QWORD *)(L2WrSymbol + 184) != 0),
              (v25 = ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)a2 + 33), 0),
               *(_QWORD *)(v22 + 24) != *(_QWORD *)(v25 + 24))
           || !*(_QWORD *)(v22 + 184)
           || (*(_QWORD *)(v25 + 184) ? (v26 = v24) : (v26 = 0), !v26)))
        {
          if ((v54 & 0x8000000000000000) != 0)
          {
            if (v13 && *a4 == a4[1])
            {
              v51 = 0;
              v52 = 0;
              v53 = 0;
              std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v51, *(const void **)(a3 + 88), *(_QWORD *)(a3 + 96), (uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 3);
              v44 = v52;
              if (v52 == v51)
              {
LABEL_67:
                if (v44)
                {
                  v52 = v44;
                  operator delete(v44);
                }
              }
              else
              {
                v45 = 0;
                v44 = v51;
                while (1)
                {
                  v46 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v44 + v45)
                                                                                         + 32))(*((_QWORD *)v44 + v45), 0, 0);
                  v47 = ZinIrTensor::GetRootTensor(v46);
                  if (v47 == RootTensor)
                    break;
                  ++v45;
                  v44 = v51;
                  if (v45 >= ((_BYTE *)v52 - (_BYTE *)v51) >> 3)
                    goto LABEL_67;
                }
                ZinMirL2HazardAnalysis::ComputeDependencyMap((uint64_t)v47, a2, (ZinIrOpLayer *)a3, v10, **(_QWORD **)(a1 + 24), a5);
                if (*(_QWORD *)(a5 + 24))
                {
                  if (v51)
                  {
                    v52 = v51;
                    operator delete(v51);
                  }
                  goto LABEL_41;
                }
                v49 = a3;
                v50 = a2;
                IsConnected = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsConnected((uint64_t)v10, (unint64_t *)&v50, &v49);
                if (v51)
                {
                  v52 = v51;
                  operator delete(v51);
                }
                if (IsConnected)
                  goto LABEL_41;
              }
            }
            else if (ZinMirL2HazardAnalysis::IsQualifiedForExtensiveL2Dependency(a1, a2, (ZinIrOpLayer *)a3, v10, **(const ZinIrTensor ***)(a1 + 24), a5))
            {
              goto LABEL_41;
            }
          }
          else if (ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)a2 + 33)) == L2RdSymbol)
          {
            v27 = (*(uint64_t (**)(const ZinIrOpLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 2);
            v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 360))(a3, 2);
            if (*(_BYTE *)(**(_QWORD **)(a1 + 24) + 1117)
              || *(_QWORD *)(*((_QWORD *)a2 + 33) + 104) * v27 == *(_QWORD *)(*(_QWORD *)(a3 + 264) + 104) * v28)
            {
              v51 = &v54;
              v29 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(a5, &v54, (uint64_t)&std::piecewise_construct, (_QWORD **)&v51);
              LODWORD(v50) = 0;
              v51 = &v50;
              std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__emplace_unique_key_args<ZinDependencyOffsetDim,std::piecewise_construct_t const&,std::tuple<ZinDependencyOffsetDim const&>,std::tuple<>>((uint64_t)(v29 + 3), (int *)&v50, (uint64_t)&std::piecewise_construct, (_DWORD **)&v51)[3] = 0;
LABEL_41:
              v30 = *(_QWORD **)(a5 + 16);
              if (!v30)
              {
LABEL_62:
                v16 = 1;
                goto LABEL_70;
              }
              while (1)
              {
                v31 = v30[2];
                if ((v31 & 0x8000000000000000) != 0)
                  break;
                HasResidentSymbolAlias = ZinIrRegAllocUtil::HasResidentSymbolAlias(a2, (const ZinANELayer *)a3, *(const ZinANELayer **)(*(_QWORD *)(a1 + 16) + 48), v31);
                if ((HasResidentSymbolAlias & 1) != 0
                  || !ZinMirL2HazardAnalysis::ConfigureExtensiveL2Dependency(HasResidentSymbolAlias, (_QWORD *)a3, v30[2], (uint64_t)(v30 + 3)))
                {
                  break;
                }
                v34 = a4[1];
                v33 = (unint64_t)a4[2];
                if ((unint64_t)v34 >= v33)
                {
                  v36 = *a4;
                  v37 = (v34 - *a4) >> 3;
                  v38 = v37 + 1;
                  if ((unint64_t)(v37 + 1) >> 61)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v39 = v33 - (_QWORD)v36;
                  if (v39 >> 2 > v38)
                    v38 = v39 >> 2;
                  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                    v40 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v40 = v38;
                  if (v40)
                  {
                    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v40);
                    v36 = *a4;
                    v34 = a4[1];
                  }
                  else
                  {
                    v41 = 0;
                  }
                  v42 = &v41[8 * v37];
                  *(_QWORD *)v42 = v30[2];
                  v35 = v42 + 8;
                  while (v34 != v36)
                  {
                    v43 = *((_QWORD *)v34 - 1);
                    v34 -= 8;
                    *((_QWORD *)v42 - 1) = v43;
                    v42 -= 8;
                  }
                  *a4 = v42;
                  a4[1] = v35;
                  a4[2] = &v41[8 * v40];
                  if (v36)
                    operator delete(v36);
                }
                else
                {
                  *(_QWORD *)v34 = v30[2];
                  v35 = v34 + 8;
                }
                a4[1] = v35;
                v30 = (_QWORD *)*v30;
                if (!v30)
                  goto LABEL_62;
              }
            }
          }
        }
        v16 = 0;
        goto LABEL_70;
      }
    }
  }
  return 0;
}

void sub_20705305C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void ZinMirL2HazardAnalysis::GetReadBeginHazardNodes(ZinMirL2HazardAnalysis *a1, uint64_t a2, char **a3)
{
  ZinIrSymbol *L2RdSymbol;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  ZinIrSymbol *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  ZinIrSymbol *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  L2RdSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(*(_QWORD *)(a2 + 264), 0);
  ZinMirL2HazardAnalysis::GetHazardNodes(a1, L2RdSymbol, (uint64_t)&v37);
  v7 = v37;
  v8 = v38;
  while (v7 != v8)
  {
    v9 = *(_QWORD **)v7;
    v10 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)&v36 = *(_QWORD *)v7;
    *((_QWORD *)&v36 + 1) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (*v9 == a2 && v9[2] <= 2uLL)
      std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](a3, &v36);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v7 += 16;
  }
  *(_QWORD *)&v36 = &v37;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v16 = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(*(_QWORD *)(a2 + 264), 1);
  ZinMirL2HazardAnalysis::GetHazardNodes(a1, v16, (uint64_t)&v37);
  v17 = v37;
  v18 = v38;
  while (v17 != v18)
  {
    v19 = *(_QWORD **)v17;
    v20 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)&v36 = *(_QWORD *)v17;
    *((_QWORD *)&v36 + 1) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (*v19 == a2 && v19[2] <= 2uLL)
      std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](a3, &v36);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v17 += 16;
  }
  *(_QWORD *)&v36 = &v37;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v26 = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(*(_QWORD *)(a2 + 264), 2);
  ZinMirL2HazardAnalysis::GetHazardNodes(a1, v26, (uint64_t)&v37);
  v27 = v37;
  v28 = v38;
  while (v27 != v28)
  {
    v29 = *(_QWORD **)v27;
    v30 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)&v36 = *(_QWORD *)v27;
    *((_QWORD *)&v36 + 1) = v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    if (*v29 == a2 && v29[2] <= 2uLL)
      std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](a3, &v36);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v27 += 16;
  }
  *(_QWORD *)&v36 = &v37;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_207053354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = (void **)&a12;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::GetWriteBeginHazardNodes(ZinMirL2HazardAnalysis *a1, uint64_t a2, char **a3)
{
  ZinIrSymbol *L2WrSymbol;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  _QWORD v17[3];

  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(*(ZinEngineLayerMirInfo **)(a2 + 264));
  ZinMirL2HazardAnalysis::GetHazardNodes(a1, L2WrSymbol, (uint64_t)v17);
  v7 = (uint64_t *)v17[0];
  v8 = (uint64_t *)v17[1];
  while (v7 != v8)
  {
    v9 = *v7;
    v10 = v7[1];
    *(_QWORD *)&v16 = *v7;
    *((_QWORD *)&v16 + 1) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (*(_QWORD *)v9 == a2 && !*(_DWORD *)(v9 + 20) && *(_DWORD *)(v9 + 16) == 3)
      std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](a3, &v16);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v7 += 2;
  }
  *(_QWORD *)&v16 = v17;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_20705347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = (void **)&a12;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL ZinMirL2HazardAnalysis::IsQualifiedHazardPair(uint64_t a1, ZinIrOpLayer ***a2, ZinIrOpLayer ***a3)
{
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v6;
  _BOOL4 IsNELayer;
  _BOOL8 result;

  v5 = *a3;
  v6 = **a3;
  result = 0;
  if (*((_DWORD *)*a2 + 4) > 2u
    || *((_DWORD *)v5 + 4) > 2u
    || *((_DWORD *)(*a2)[1] + 38) != 2
    || *((_DWORD *)v5[1] + 38) != 2)
  {
    IsNELayer = ZinIrOpLayer::IsNELayer(**a2);
    if (IsNELayer != ZinIrOpLayer::IsNELayer(v6) || *((_DWORD *)*a2 + 4) > 2u || *((_DWORD *)*a3 + 4) != 3)
      return 1;
  }
  return result;
}

uint64_t ZinMirL2HazardAnalysis::CreateHazardEdge(uint64_t *a1, ZinIrHazardNode **a2, ZinIrHazardNode **a3)
{
  uint64_t LayerTID;
  uint64_t v7;
  uint64_t v9;
  ZinIrOpLayer ***v10;
  std::__shared_weak_count *v11;
  ZinIrOpLayer **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrOpLayer ***v17;
  std::__shared_weak_count *v18;
  ZinIrOpLayer **v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  ZinIrOpLayer **v39;
  std::__shared_weak_count *v40;
  ZinIrOpLayer **v41;
  std::__shared_weak_count *v42;
  ZinIrOpLayer **v43;
  std::__shared_weak_count *v44;
  ZinIrOpLayer **v45;
  std::__shared_weak_count *v46;

  LayerTID = ZinIrHazardNode::GetLayerTID(*a2);
  if (LayerTID == ZinIrHazardNode::GetLayerTID(*a3)
    || ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsConnected(*a1, (unint64_t *)a2, (uint64_t *)a3))
  {
    return 0;
  }
  v9 = ZinIrHazardNode::GetLayerTID(*a2);
  if (v9 >= ZinIrHazardNode::GetLayerTID(*a3))
    v10 = (ZinIrOpLayer ***)a3;
  else
    v10 = (ZinIrOpLayer ***)a2;
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  v45 = *v10;
  v46 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = ZinIrHazardNode::GetLayerTID(*a2);
  v16 = ZinIrHazardNode::GetLayerTID(*a3);
  if (v15 >= v16)
    v17 = (ZinIrOpLayer ***)a2;
  else
    v17 = (ZinIrOpLayer ***)a3;
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v43 = *v17;
  v44 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (ZinMirL2HazardAnalysis::IsQualifiedHazardPair(v16, &v45, &v43))
  {
    v22 = *a1;
    v41 = v12;
    v42 = v11;
    if (v11)
    {
      v23 = (unint64_t *)&v11->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v39 = v19;
    v40 = v18;
    if (v18)
    {
      v25 = (unint64_t *)&v18->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v7 = ZinIrHazardGraph::AddSymbolAliasEdge(v22, (unint64_t *)&v41, (uint64_t *)&v39);
    v27 = v40;
    if (v40)
    {
      v28 = (unint64_t *)&v40->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v42;
    if (v42)
    {
      v31 = (unint64_t *)&v42->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v33 = v44;
  if (v44)
  {
    v34 = (unint64_t *)&v44->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v46;
  if (v46)
  {
    v37 = (unint64_t *)&v46->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return v7;
}

void sub_207053788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::CreateHazardEdgesForHazardNodeGroups(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t LayerTID;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrHazardNode **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t LayerSchedule;
  ZinIrHazardNode **v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v68;
  ZinIrHazardNode *v69[2];
  ZinIrHazardNode *v70[2];
  ZinIrHazardNode *v71[2];

  v5 = 0;
  v6 = 0;
  v7 = **(_QWORD **)(a1 + 24);
  while (v6 < (uint64_t)(a2[1] - *a2) >> 4)
  {
    v8 = *a3;
    if (v5 >= (a3[1] - *a3) >> 4)
      break;
    v9 = *(_OWORD *)(*a2 + 16 * v6);
    *(_OWORD *)v71 = v9;
    if (*((_QWORD *)&v9 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v8 = *a3;
    }
    v12 = *(_OWORD *)(v8 + 16 * v5);
    *(_OWORD *)v70 = v12;
    if (*((_QWORD *)&v12 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    LayerTID = ZinIrHazardNode::GetLayerTID((ZinIrHazardNode *)v9);
    if (LayerTID >= ZinIrHazardNode::GetLayerTID(v70[0]))
    {
      v20 = v5 + 1;
      if (v5 + 1 >= (a3[1] - *a3) >> 4
        || (v21 = ZinIrHazardNode::GetLayerTID(*(ZinIrHazardNode **)(*a3 + 16 * v20)),
            v21 >= ZinIrHazardNode::GetLayerTID(v71[0])))
      {
        if (*((_DWORD *)v70[0] + 5) == 1 && !*((_DWORD *)v71[0] + 5) && *(_QWORD *)v70[0] != *(_QWORD *)v71[0])
        {
          LayerSchedule = ZinIrHazardNode::GetLayerSchedule(v70[0]);
          if (LayerSchedule == ZinIrHazardNode::GetLayerSchedule(v71[0])
            && *((_DWORD *)v70[0] + 4) == 3
            && *((_DWORD *)v71[0] + 4) <= 2u)
          {
            ZinMirL2HazardAnalysis::CreateHazardEdge((uint64_t *)a1, (ZinIrHazardNode **)(*a3 + 16 * v5 - 16), v71);
            v23 = (ZinIrHazardNode **)(*a2 + 16 * v6 + 16);
          }
          else
          {
            v23 = v71;
          }
          ZinMirL2HazardAnalysis::CreateHazardEdge((uint64_t *)a1, v70, v23);
        }
      }
      if (*((_DWORD *)v70[0] + 5) == 1 && *((_DWORD *)v70[0] + 4) == 3 && v20 < (a3[1] - *a3) >> 4)
      {
        v43 = *(_OWORD *)(*a3 + 16 * v20);
        *(_OWORD *)v69 = v43;
        if (*((_QWORD *)&v43 + 1))
        {
          v44 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v46 = v6 + 1;
        do
        {
          if (v46 >= (uint64_t)(a2[1] - *a2) >> 4)
            break;
          v47 = ZinIrHazardNode::GetLayerTID(*(ZinIrHazardNode **)(*a2 + 16 * v46));
          if (v47 > ZinIrHazardNode::GetLayerTID(v69[0]))
            break;
          v48 = *(_OWORD *)(*a2 + 16 * v46);
          v68 = v48;
          if (*((_QWORD *)&v48 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          v51 = ZinIrHazardNode::GetLayerTID((ZinIrHazardNode *)v48);
          v52 = v51 - ZinIrHazardNode::GetLayerTID(v70[0]);
          v53 = *(_QWORD *)(v7 + 1096);
          if (v52 < v53)
          {
            if (*(_DWORD *)(v68 + 16) <= 2u && !*(_DWORD *)(v68 + 20))
              ZinMirL2HazardAnalysis::CreateHazardEdge((uint64_t *)a1, v70, (ZinIrHazardNode **)&v68);
            ++v46;
          }
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
          if (*((_QWORD *)&v68 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        while (v52 < v53);
        v57 = (std::__shared_weak_count *)v69[1];
        if (v69[1])
        {
          v58 = (unint64_t *)((char *)v69[1] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
      }
      if (v5 < ((a3[1] - *a3) >> 4) - 1)
      {
        v41 = 1;
        ++v5;
        goto LABEL_101;
      }
      if (v6 + 1 < (uint64_t)(a2[1] - *a2) >> 4)
      {
        v60 = ZinIrHazardNode::GetLayerTID(*(ZinIrHazardNode **)(*a2 + 16 * (v6 + 1)));
        if (v60 < *(_QWORD *)(v7 + 1096) + ZinIrHazardNode::GetLayerTID(v70[0]))
        {
          v41 = 1;
          ++v6;
          goto LABEL_101;
        }
      }
    }
    else
    {
      v16 = v6 + 1;
      if (v6 + 1 >= (uint64_t)(a2[1] - *a2) >> 4
        || (v17 = ZinIrHazardNode::GetLayerTID(*(ZinIrHazardNode **)(*a2 + 16 * v16)),
            v17 >= ZinIrHazardNode::GetLayerTID(v70[0])))
      {
        if (*((_DWORD *)v71[0] + 5) == 1 && !*((_DWORD *)v70[0] + 5) && *(_QWORD *)v71[0] != *(_QWORD *)v70[0])
        {
          v18 = ZinIrHazardNode::GetLayerSchedule(v71[0]);
          if (v18 == ZinIrHazardNode::GetLayerSchedule(v70[0])
            && *((_DWORD *)v71[0] + 4) == 3
            && *((_DWORD *)v70[0] + 4) <= 2u)
          {
            ZinMirL2HazardAnalysis::CreateHazardEdge((uint64_t *)a1, (ZinIrHazardNode **)(*a2 + 16 * v6 - 16), v70);
            v19 = (ZinIrHazardNode **)(*a3 + 16 * v5 + 16);
          }
          else
          {
            v19 = v70;
          }
          ZinMirL2HazardAnalysis::CreateHazardEdge((uint64_t *)a1, v71, v19);
        }
      }
      if (*((_DWORD *)v71[0] + 5) == 1 && *((_DWORD *)v71[0] + 4) == 3 && v16 < (uint64_t)(a2[1] - *a2) >> 4)
      {
        v24 = *(_OWORD *)(*a2 + 16 * v16);
        *(_OWORD *)v69 = v24;
        if (*((_QWORD *)&v24 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = v5 + 1;
        do
        {
          if (v27 >= (a3[1] - *a3) >> 4)
            break;
          v28 = ZinIrHazardNode::GetLayerTID(*(ZinIrHazardNode **)(*a3 + 16 * v27));
          if (v28 > ZinIrHazardNode::GetLayerTID(v69[0]))
            break;
          v29 = *(_OWORD *)(*a3 + 16 * v27);
          v68 = v29;
          if (*((_QWORD *)&v29 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          v32 = ZinIrHazardNode::GetLayerTID((ZinIrHazardNode *)v29);
          v33 = v32 - ZinIrHazardNode::GetLayerTID(v71[0]);
          v34 = *(_QWORD *)(v7 + 1096);
          if (v33 < v34)
          {
            if (*(_DWORD *)(v68 + 16) <= 2u && !*(_DWORD *)(v68 + 20))
              ZinMirL2HazardAnalysis::CreateHazardEdge((uint64_t *)a1, v71, (ZinIrHazardNode **)&v68);
            ++v27;
          }
          v35 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
          if (*((_QWORD *)&v68 + 1))
          {
            v36 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
        }
        while (v33 < v34);
        v38 = (std::__shared_weak_count *)v69[1];
        if (v69[1])
        {
          v39 = (unint64_t *)((char *)v69[1] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      if (v6 < ((uint64_t)(a2[1] - *a2) >> 4) - 1)
      {
        v41 = 1;
        ++v6;
        goto LABEL_101;
      }
      if (v5 + 1 < (a3[1] - *a3) >> 4)
      {
        v42 = ZinIrHazardNode::GetLayerTID(*(ZinIrHazardNode **)(*a3 + 16 * (v5 + 1)));
        if (v42 < *(_QWORD *)(v7 + 1096) + ZinIrHazardNode::GetLayerTID(v71[0]))
        {
          v41 = 1;
          ++v5;
          goto LABEL_101;
        }
      }
    }
    v41 = 0;
LABEL_101:
    v61 = (std::__shared_weak_count *)v70[1];
    if (v70[1])
    {
      v62 = (unint64_t *)((char *)v70[1] + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::__shared_weak_count *)v71[1];
    if (!v71[1])
      goto LABEL_110;
    v65 = (unint64_t *)((char *)v71[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      if ((v41 & 1) == 0)
        return;
    }
    else
    {
LABEL_110:
      if ((v41 & 1) == 0)
        return;
    }
  }
}

void sub_207053E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::CreateDotFile(uint64_t *****a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t ***v8;
  size_t v9;
  std::string *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::ios_base *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  uint64_t ***v29;
  uint64_t v30;
  std::locale::__imp *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *p_p;
  std::string::size_type size;
  uint64_t **v36;
  uint64_t ***v37;
  BOOL v38;
  const std::locale::facet *v39;
  uint64_t ***v40;
  ZinIrHazardNode **v41;
  uint64_t ****v42;
  _QWORD *v43;
  uint64_t **v44;
  uint64_t **v45;
  ZinIrHazardNode ***v46;
  ZinIrHazardNode ***v47;
  ZinIrHazardNode **v48;
  uint64_t ****v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  ZinIrHazardNode *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  _QWORD *v63;
  _QWORD *v64;
  ZinIrHazardNode *v65;
  std::string *v66;
  std::string::size_type v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  std::string *v72;
  std::string *v73;
  std::string::size_type v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *locale;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  const std::locale::facet *v82;
  uint64_t **v83;
  uint64_t ***v84;
  const std::locale::facet *v85;
  uint64_t v86;
  std::locale::__imp *v87;
  uint64_t v88;
  std::string v89;
  ZinIrHazardNode *v90;
  std::__shared_weak_count *v91;
  uint64_t **v92;
  std::__shared_weak_count *v93;
  int v94;
  std::string __p;
  std::locale v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[10];
  char v100;
  uint64_t v101;
  void *v102[2];
  std::string::size_type v103;
  std::locale v104;
  std::string v105;
  _QWORD v106[21];

  v106[19] = *MEMORY[0x24BDAC8D0];
  v8 = a1[3][1];
  if (*((char *)v8 + 47) >= 0)
    v9 = *((unsigned __int8 *)v8 + 47);
  else
    v9 = (size_t)v8[4];
  v10 = &v105;
  std::string::basic_string[abi:ne180100]((uint64_t)&v105, v9 + 1);
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v105.__r_.__value_.__r.__words[0];
  if (v9)
  {
    v13 = (char *)v8[3];
    v12 = (char *)(v8 + 3);
    v11 = v13;
    if (v12[23] >= 0)
      v14 = v12;
    else
      v14 = v11;
    memmove(v10, v14, v9);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 46;
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::string::append(&v105, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v103 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v102 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  v20 = MEMORY[0x24BEDB840];
  v21 = MEMORY[0x24BEDB840] + 64;
  v22 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v23 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v106[0] = MEMORY[0x24BEDB840] + 64;
  v105.__r_.__value_.__r.__words[0] = v22;
  *(std::string::size_type *)((char *)v105.__r_.__value_.__r.__words + *(_QWORD *)(v22 - 24)) = v23;
  v24 = (std::ios_base *)((char *)&v105 + *(_QWORD *)(v105.__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v24, &v105.__r_.__value_.__r.__words[1]);
  v24[1].__vftable = 0;
  v24[1].__fmtflags_ = -1;
  v105.__r_.__value_.__r.__words[0] = v20 + 24;
  v106[0] = v21;
  MEMORY[0x20BCFFEA8](&v105.__r_.__value_.__r.__words[1]);
  std::ofstream::open();
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"digraph D {", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
  v26 = std::locale::use_facet(&v96, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v96);
  std::ostream::put();
  std::ostream::flush();
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"\tnode [shape=box style=\"rounded, filled\"]", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
  v28 = std::locale::use_facet(&v96, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v96);
  std::ostream::put();
  std::ostream::flush();
  v30 = (uint64_t)(*a1 + 1);
  v29 = **a1;
  if (v29 != (uint64_t ***)v30)
  {
    v31 = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
    v86 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v87 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 64);
    v32 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (ZinIrHazardNode::GetLayerTID((ZinIrHazardNode *)v29[4]) >= a3
        && ZinIrHazardNode::GetLayerTID((ZinIrHazardNode *)v29[4]) <= a4)
      {
        v33 = std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v96);
        ZinMirL2HazardAnalysis::DebugPrintNode(v33, v29 + 4, (uint64_t)&v96, 1);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v99, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v96.__locale_ = v31;
        *(std::locale::__imp **)((char *)&v96.__locale_ + *((_QWORD *)v31 - 3)) = v87;
        v98 = v86;
        v99[0] = v32;
        if (v100 < 0)
          operator delete((void *)v99[8]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x20BD0022C](&v101);
      }
      v36 = v29[1];
      if (v36)
      {
        do
        {
          v37 = (uint64_t ***)v36;
          v36 = (uint64_t **)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (uint64_t ***)v29[2];
          v38 = *v37 == (uint64_t **)v29;
          v29 = v37;
        }
        while (!v38);
      }
      v29 = v37;
    }
    while (v37 != (uint64_t ***)v30);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v105 + *(_QWORD *)(v105.__r_.__value_.__r.__words[0] - 24)));
  v39 = std::locale::use_facet(&v96, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v96);
  std::ostream::put();
  std::ostream::flush();
  v40 = **a1;
  v88 = (uint64_t)(*a1 + 1);
  if (v40 != (uint64_t ***)v88)
  {
    do
    {
      v41 = (ZinIrHazardNode **)(v40 + 4);
      v42 = *a1;
      v43 = *a1 + 3;
      v96.__locale_ = (std::locale::__imp *)(v40 + 4);
      v44 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v43, (unint64_t **)&v96);
      v45 = (uint64_t **)(v42 + 13);
      if (v44)
        v45 = v44 + 3;
      v46 = (ZinIrHazardNode ***)*v45;
      v47 = (ZinIrHazardNode ***)v45[1];
      while (v46 != v47)
      {
        v48 = *v46;
        if (ZinIrHazardNode::GetLayerTID(*v41) >= a3
          && ZinIrHazardNode::GetLayerTID(*v41) <= a4
          && ZinIrHazardNode::GetLayerTID(*v48) >= a3
          && ZinIrHazardNode::GetLayerTID(*v48) <= a4)
        {
          v94 = 0;
          v49 = *a1;
          v50 = (std::__shared_weak_count *)v40[5];
          v92 = v40[4];
          v93 = v50;
          if (v50)
          {
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldxr(p_shared_owners);
            while (__stxr(v52 + 1, p_shared_owners));
          }
          v53 = v48[1];
          v90 = *v48;
          v91 = (std::__shared_weak_count *)v53;
          if (v53)
          {
            v54 = (unint64_t *)((char *)v53 + 8);
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
          }
          ZinIrHazardGraph::GetEdgeType((uint64_t)v49, (unint64_t *)&v92, (uint64_t *)&v90, &v94);
          v56 = v91;
          if (v91)
          {
            v57 = (unint64_t *)&v91->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = v93;
          if (v93)
          {
            v60 = (unint64_t *)&v93->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          if (v94)
            v62 = "black";
          else
            v62 = "blue";
          std::string::basic_string[abi:ne180100]<0>(&v96, v62);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"\t", 1);
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\"", 1);
          v65 = *v41;
          if (*((char *)*v41 + 47) < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v65 + 3), *((_QWORD *)v65 + 4));
          else
            __p = *(std::string *)((_BYTE *)v65 + 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = &__p;
          else
            v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v67 = __p.__r_.__value_.__l.__size_;
          v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v66, v67);
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"\"", 1);
          v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" -> ", 4);
          v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\"", 1);
          v72 = (std::string *)*v48;
          if (*((char *)*v48 + 47) < 0)
            std::string::__init_copy_ctor_external(&v89, v72[1].__r_.__value_.__l.__data_, v72[1].__r_.__value_.__l.__size_);
          else
            v89 = v72[1];
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = &v89;
          else
            v73 = (std::string *)v89.__r_.__value_.__r.__words[0];
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v74 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
          else
            v74 = v89.__r_.__value_.__l.__size_;
          v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v73, v74);
          v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\"", 1);
          v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"[color=", 7);
          if (v98 >= 0)
            locale = &v96;
          else
            locale = v96.__locale_;
          if (v98 >= 0)
            v79 = HIBYTE(v98);
          else
            v79 = v97;
          v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)locale, v79);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"]", 1);
          std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(_QWORD *)(*v81 - 24)));
          v82 = std::locale::use_facet(&v104, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
          std::locale::~locale(&v104);
          std::ostream::put();
          std::ostream::flush();
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v98) < 0)
            operator delete(v96.__locale_);
        }
        ++v46;
      }
      v83 = v40[1];
      if (v83)
      {
        do
        {
          v84 = (uint64_t ***)v83;
          v83 = (uint64_t **)*v83;
        }
        while (v83);
      }
      else
      {
        do
        {
          v84 = (uint64_t ***)v40[2];
          v38 = *v84 == (uint64_t **)v40;
          v40 = v84;
        }
        while (!v38);
      }
      v40 = v84;
    }
    while (v84 != (uint64_t ***)v88);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v105 + *(_QWORD *)(v105.__r_.__value_.__r.__words[0] - 24)));
  v85 = std::locale::use_facet(&v96, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v96);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"}", 1);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v105 + *(_QWORD *)(v105.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v105 + *(_QWORD *)(v105.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
  v105.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
  *(std::string::size_type *)((char *)v105.__r_.__value_.__r.__words
                            + *(_QWORD *)(v105.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8]
                                                                                               + 24);
  MEMORY[0x20BCFFEB4](&v105.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x20BD0022C](v106);
  if (SHIBYTE(v103) < 0)
    operator delete(v102[0]);
}

void sub_20705477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,std::locale a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  std::ostream::~ostream();
  MEMORY[0x20BD0022C](a10);
  if (a64 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNgraphUtils::TransitiveReduction<ZinIrHazardGraph>(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t **v7;
  unint64_t **v8;
  unint64_t *v9;
  uint64_t *i;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t **v21;
  unint64_t **v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t **v37;
  char v38;
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  _OWORD v47[2];
  int v48;
  void *__p;
  unint64_t **v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55[4];
  int v56;
  _QWORD v57[4];
  int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62[3];

  v59 = (uint64_t)&v59;
  v60 = &v59;
  v61 = 0;
  if ((ZinIrNgraph<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare>::TopologicalSortImpl<std::list<std::shared_ptr<ZinIrHazardNode>>>(a1, &v59) & 1) != 0)
  {
    memset(v57, 0, sizeof(v57));
    v58 = 1065353216;
    if (a2 != -1)
    {
      ZinIrNgraphUtils::impl::CalculateAsapSchedules<ZinIrHazardGraph>(a1, (uint64_t)v55);
      std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::hash<std::shared_ptr<ZinIrHazardNode>>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,std::hash<std::shared_ptr<ZinIrHazardNode>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>>>::__move_assign((uint64_t)v57, v55);
      std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>>>::~__hash_table((uint64_t)v55);
    }
    memset(v55, 0, sizeof(v55));
    v56 = 1065353216;
    v3 = v60;
    if (v60 == &v59)
    {
      v41 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
      v54 = 1065353216;
    }
    else
    {
      do
      {
        *(_QWORD *)&v47[0] = v3 + 2;
        *(_QWORD *)&v52 = v47;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,int>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,int>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>&&>,std::tuple<>>((uint64_t)v55, (unint64_t **)v47, (uint64_t)&std::piecewise_construct, (_QWORD **)&v52)+ 6) = 0;
        v3 = (uint64_t *)v3[1];
      }
      while (v3 != &v59);
      v4 = v60;
      v52 = 0u;
      v53 = 0u;
      v54 = 1065353216;
      if (v60 == &v59)
      {
        v41 = 0;
      }
      else
      {
        v41 = 0;
        do
        {
          *(_QWORD *)&v47[0] = v4 + 2;
          v5 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, (unint64_t **)v47);
          v6 = v5 + 3;
          if (!v5)
            v6 = (uint64_t **)(a1 + 13);
          v50 = 0;
          v51 = 0;
          __p = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *v6, (uint64_t)v6[1], v6[1] - *v6);
          memset(v47, 0, sizeof(v47));
          v48 = 1065353216;
          v7 = (unint64_t **)__p;
          v8 = v50;
          if (__p != v50)
          {
            do
            {
              v9 = *v7;
              v46 = *v7;
              v62[0] = &v46;
              for (i = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>&&>,std::tuple<>>((uint64_t)&v52, &v46, (uint64_t)&std::piecewise_construct, v62)[5]; i; i = (uint64_t *)*i)
              {
                v11 = (_QWORD *)i[2];
                if (a2 != -1)
                {
                  v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v57, v9);
                  v13 = v12 ? v12[4] : -1;
                  v14 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v57, v11);
                  v15 = v14 ? v14[4] : -1;
                  if (v13 - v15 > a2)
                    continue;
                }
                v62[0] = v11;
                std::__hash_table<std::reference_wrapper<ZinIrOpLayer * const>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const> const&>((uint64_t)v47, v62, v62);
              }
              v62[0] = v9;
              v16 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::find<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(v55, v62);
              v62[0] = v9;
              v17 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 3, v62);
              v18 = v17 + 3;
              if (!v17)
                v18 = a1 + 13;
              v19 = v18[1] - *v18;
              v20 = *((int *)v16 + 6) + 1;
              *((_DWORD *)v16 + 6) = v20;
              if (v20 == v19 >> 3)
              {
                v62[0] = v9;
                std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::__erase_unique<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(&v52, v62);
              }
              ++v7;
            }
            while (v7 != v8);
            v21 = (unint64_t **)__p;
            v22 = v50;
            while (v21 != v22)
            {
              v23 = *v21;
              v62[0] = *v21;
              if (std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v47, v62))
              {
                v24 = (std::__shared_weak_count *)v23[1];
                v44 = *v23;
                v45 = v24;
                if (v24)
                {
                  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
                  do
                    v26 = __ldxr(p_shared_owners);
                  while (__stxr(v26 + 1, p_shared_owners));
                }
                v27 = (std::__shared_weak_count *)v4[3];
                v42 = v4[2];
                v43 = v27;
                if (v27)
                {
                  v28 = (unint64_t *)&v27->__shared_owners_;
                  do
                    v29 = __ldxr(v28);
                  while (__stxr(v29 + 1, v28));
                }
                v30 = ZinIrHazardGraph::RemoveEdge((uint64_t)a1, (uint64_t *)&v44, &v42);
                v31 = v43;
                if (v43)
                {
                  v32 = (unint64_t *)&v43->__shared_owners_;
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 - 1, v32));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                    std::__shared_weak_count::__release_weak(v31);
                  }
                }
                v34 = v45;
                if (v45)
                {
                  v35 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                  {
                    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                    std::__shared_weak_count::__release_weak(v34);
                  }
                }
                v41 |= v30;
              }
              else
              {
                v62[0] = v23;
                std::__hash_table<std::reference_wrapper<ZinIrOpLayer * const>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const> const&>((uint64_t)v47, v62, v62);
              }
              ++v21;
            }
          }
          v46 = (unint64_t *)(v4 + 2);
          v62[0] = &v46;
          v37 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>&&>,std::tuple<>>((uint64_t)&v52, &v46, (uint64_t)&std::piecewise_construct, v62);
          std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)(v37 + 3), (uint64_t *)v47);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v47);
          if (__p)
          {
            v50 = (unint64_t **)__p;
            operator delete(__p);
          }
          v4 = (uint64_t *)v4[1];
        }
        while (v4 != &v59);
      }
    }
    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)&v52);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v55);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>>>::~__hash_table((uint64_t)v57);
    v38 = v41;
  }
  else
  {
    v38 = 0;
  }
  std::__list_imp<std::shared_ptr<ZinMirUnit>>::clear(&v59);
  return v38 & 1;
}

void sub_207054D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>>>::~__hash_table(v33 - 176);
  std::__list_imp<std::shared_ptr<ZinMirUnit>>::clear((uint64_t *)(v33 - 136));
  _Unwind_Resume(a1);
}

BOOL ZinMirL2HazardAnalysis::TryDependencyBitSet(ZinMirL2HazardAnalysis *this, ZinANELayer *a2, ZinANELayer *a3)
{
  uint64_t v6;
  int L2SrcType;
  _BOOL8 v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  _DWORD *v14;
  uint64_t L2SrcDep;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  int v25;
  _BYTE v26[40];
  void *v27[2];
  char v28;
  int v29;
  _OWORD v30[2];
  int v31;
  void *__p;
  void *v33;
  uint64_t v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v33 = 0;
  v34 = 0;
  memset(v30, 0, sizeof(v30));
  v31 = 1065353216;
  if ((ZinMirL2HazardAnalysis::IsQualifiedForDependentMode((uint64_t)this, a2, (uint64_t)a3, (char **)&__p, (uint64_t)v30) & 1) == 0)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)a3 + 33);
  v29 = 0;
  L2SrcType = ZinMemSourceIndexTranslator::GetL2SrcType(a3, *(_QWORD *)__p, &v29);
  v8 = L2SrcType == 0;
  if (L2SrcType)
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinMirL2HazardAnalysis::TryDependencyBitSet(v9, v10, v11);
    goto LABEL_6;
  }
  if (ZinIrOpLayer::IsNELayer(a3))
    v13 = "NE";
  else
    v13 = "PE";
  std::string::basic_string[abi:ne180100]<0>(v27, v13);
  v14 = (_DWORD *)(v6 + 120);
  if (ZinIrOpLayer::IsNELayer(a2))
  {
    L2SrcDep = ZinMirL2Config::GetL2SrcDep(v6 + 120, v29);
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v26, L2SrcDep + 8);
    v25 = 1;
    ZinMirL2Config::SetL2SrcDep(v14, (uint64_t)&v25, v29);
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 96) & 0x10) != 0
      && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v16 = *((_QWORD *)a2 + 45);
      v17 = v27;
      if (v28 < 0)
        v17 = (void **)v27[0];
      v18 = *((_QWORD *)a3 + 45);
      *(_DWORD *)buf = 134218498;
      v36 = v16;
      v37 = 2080;
      v38 = v17;
      v39 = 2048;
      v40 = v18;
      v19 = MEMORY[0x24BDACB70];
      v20 = "Info: kDependentConv is set to NE(TID=%zi) -> %s(TID=%zi)";
LABEL_23:
      _os_log_impl(&dword_2069AB000, v19, OS_LOG_TYPE_INFO, v20, buf, 0x20u);
    }
  }
  else
  {
    v21 = ZinMirL2Config::GetL2SrcDep(v6 + 120, v29);
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v26, v21 + 8);
    v25 = 2;
    ZinMirL2Config::SetL2SrcDep(v14, (uint64_t)&v25, v29);
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 96) & 0x10) != 0
      && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)a2 + 45);
      v23 = v27;
      if (v28 < 0)
        v23 = (void **)v27[0];
      v24 = *((_QWORD *)a3 + 45);
      *(_DWORD *)buf = 134218498;
      v36 = v22;
      v37 = 2080;
      v38 = v23;
      v39 = 2048;
      v40 = v24;
      v19 = MEMORY[0x24BDACB70];
      v20 = "Info: kDependentPlanar is set to PE(TID=%zi) -> %s(TID=%zi)";
      goto LABEL_23;
    }
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
  if (v28 < 0)
    operator delete(v27[0]);
LABEL_6:
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)v30);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_207055090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v28);
  if (a20 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)&a22);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirL2HazardAnalysis::SetFirstTdL2HazardBits(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  ZinIrOpLayer ****v3;
  ZinIrOpLayer ***v4;
  ZinIrOpLayer ***v5;
  ZinIrOpLayer **v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer *v8;
  uint64_t v9;

  if (*(_DWORD *)(**(_QWORD **)(this + 24) + 4))
  {
    v1 = this;
    v2 = 0;
    do
    {
      v3 = (ZinIrOpLayer ****)(*(_QWORD *)(v1 + 384) + 24 * v2);
      v4 = *v3;
      v5 = v3[1];
LABEL_4:
      if (v4 != v5)
      {
        v6 = *v4;
        v7 = v4[1];
        while (1)
        {
          if (v6 == v7)
          {
            v4 += 3;
            goto LABEL_4;
          }
          v8 = *v6;
          this = ZinIrOpLayer::IsANELayer(*v6);
          if ((_DWORD)this)
            break;
          ++v6;
        }
        v9 = *((_QWORD *)v8 + 33);
        *(_QWORD *)(v9 + 328) = 0x101010101010101;
        *(_QWORD *)(v9 + 336) = 0x101010101010101;
      }
      ++v2;
    }
    while (v2 < *(int *)(**(_QWORD **)(v1 + 24) + 4));
  }
  return this;
}

uint64_t ZinMirL2HazardAnalysis::DebugPrintHazardResults(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  const std::locale::facet *v3;
  uint64_t v4;
  uint64_t v5;
  std::locale::id *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  ZinIrOpLayer *v11;
  _DWORD *v12;
  char *v13;
  ZinBondedInfo *BondedInfo;
  unint64_t *AneIndex;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type size;
  _QWORD *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  _QWORD *v52;
  const std::locale::facet *v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  _QWORD *v58;
  const std::locale::facet *v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  _QWORD *v62;
  const std::locale::facet *v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  const std::locale::facet *v70;
  std::locale *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::string v77;
  std::string v78;
  void *__p[2];
  int64_t v80;
  std::string v81;
  std::locale __dst[57];
  _DWORD v83[12];
  _DWORD v84[12];
  _BYTE v85[40];
  _QWORD v86[2];
  uint64_t v87;
  _QWORD v88[10];
  char v89;
  uint64_t v90;
  __int128 buf;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 96) & 0x10) != 0)
  {
    v1 = this;
    if (*(_BYTE *)(this + 376))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v86);
      v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\n[DEBUG_BEGIN] Hazard results", 29);
      std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
      v3 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
      std::locale::~locale(__dst);
      std::ostream::put();
      std::ostream::flush();
      v4 = **(_QWORD **)(v1 + 24);
      if (*(int *)(v4 + 4) >= 1)
      {
        v5 = 0;
        v6 = (std::locale::id *)MEMORY[0x24BEDB350];
        v73 = v1;
        do
        {
          v74 = v5;
          v7 = (uint64_t *)(*(_QWORD *)(v1 + 384) + 24 * v5);
          v8 = *v7;
          v75 = v7[1];
          if (*v7 != v75)
          {
            do
            {
              buf = 0uLL;
              v92 = 0;
              v76 = v8;
              std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&buf, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
              v9 = (char *)*((_QWORD *)&buf + 1);
              v10 = (char *)buf;
              if ((_QWORD)buf != *((_QWORD *)&buf + 1))
              {
                do
                {
                  v11 = *(ZinIrOpLayer **)v10;
                  v12 = *(_DWORD **)(*(_QWORD *)v10 + 264);
                  memcpy(__dst, v12 + 30, 0x1C4uLL);
                  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v83, (uint64_t)(v12 + 144));
                  v83[10] = v12[154];
                  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v84, (uint64_t)(v12 + 156));
                  v84[10] = v12[166];
                  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v85, (uint64_t)(v12 + 168));
                  if (ZinIrOpLayer::IsNELayer(v11))
                    v13 = "(NE";
                  else
                    v13 = "(PE";
                  std::string::basic_string[abi:ne180100]<0>(&v81, v13);
                  BondedInfo = (ZinBondedInfo *)ZinANELayer::GetBondedInfo(v11);
                  AneIndex = (unint64_t *)ZinBondedInfo::GetAneIndex(BondedInfo);
                  std::to_string(&v78, *AneIndex);
                  v16 = std::string::insert(&v78, 0, ", ane_index=", 0xCuLL);
                  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
                  v80 = v16->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = v17;
                  v16->__r_.__value_.__l.__size_ = 0;
                  v16->__r_.__value_.__r.__words[2] = 0;
                  v16->__r_.__value_.__r.__words[0] = 0;
                  if (v80 >= 0)
                    v18 = __p;
                  else
                    v18 = (void **)__p[0];
                  if (v80 >= 0)
                    v19 = HIBYTE(v80);
                  else
                    v19 = (std::string::size_type)__p[1];
                  std::string::append(&v81, (const std::string::value_type *)v18, v19);
                  if (SHIBYTE(v80) < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v78.__r_.__value_.__l.__data_);
                  std::to_string(&v78, *((_QWORD *)v11 + 45));
                  v20 = std::string::insert(&v78, 0, ", tid=", 6uLL);
                  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
                  v80 = v20->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = v21;
                  v20->__r_.__value_.__l.__size_ = 0;
                  v20->__r_.__value_.__r.__words[2] = 0;
                  v20->__r_.__value_.__r.__words[0] = 0;
                  if (v80 >= 0)
                    v22 = __p;
                  else
                    v22 = (void **)__p[0];
                  if (v80 >= 0)
                    v23 = HIBYTE(v80);
                  else
                    v23 = (std::string::size_type)__p[1];
                  std::string::append(&v81, (const std::string::value_type *)v22, v23);
                  if (SHIBYTE(v80) < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v78.__r_.__value_.__l.__data_);
                  std::to_string(&v77, *((_QWORD *)v11 + 6));
                  v24 = std::string::insert(&v77, 0, ", sched=", 8uLL);
                  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
                  v78.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v25;
                  v24->__r_.__value_.__l.__size_ = 0;
                  v24->__r_.__value_.__r.__words[2] = 0;
                  v24->__r_.__value_.__r.__words[0] = 0;
                  v26 = std::string::append(&v78, ")", 1uLL);
                  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
                  v80 = v26->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = v27;
                  v26->__r_.__value_.__l.__size_ = 0;
                  v26->__r_.__value_.__r.__words[2] = 0;
                  v26->__r_.__value_.__r.__words[0] = 0;
                  if (v80 >= 0)
                    v28 = __p;
                  else
                    v28 = (void **)__p[0];
                  if (v80 >= 0)
                    v29 = HIBYTE(v80);
                  else
                    v29 = (std::string::size_type)__p[1];
                  std::string::append(&v81, (const std::string::value_type *)v28, v29);
                  if (SHIBYTE(v80) < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v78.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v77.__r_.__value_.__l.__data_);
                  v32 = *((_QWORD *)v11 + 3);
                  v31 = (_QWORD *)((char *)v11 + 24);
                  v30 = v32;
                  v33 = *((char *)v31 + 23);
                  if (v33 >= 0)
                    v34 = (uint64_t)v31;
                  else
                    v34 = v30;
                  if (v33 >= 0)
                    v35 = *((unsigned __int8 *)v31 + 23);
                  else
                    v35 = v31[1];
                  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, v34, v35);
                  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v37 = &v81;
                  else
                    v37 = (std::string *)v81.__r_.__value_.__r.__words[0];
                  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
                  else
                    size = v81.__r_.__value_.__l.__size_;
                  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
                  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" = {", 4);
                  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
                  v41 = std::locale::use_facet((const std::locale *)__p, v6);
                  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
                  std::locale::~locale((std::locale *)__p);
                  std::ostream::put();
                  std::ostream::flush();
                  if (LOBYTE(__dst[26].__locale_))
                  {
                    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tsource1_cfg_alias_conv_src,", 28);
                    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
                    v43 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (BYTE1(__dst[26].__locale_))
                  {
                    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tsource1_cfg_alias_conv_rslt,", 29);
                    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
                    v45 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (BYTE2(__dst[26].__locale_))
                  {
                    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tsource2_cfg_alias_conv_src,", 28);
                    std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
                    v47 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (BYTE3(__dst[26].__locale_))
                  {
                    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tsource2_cfg_alias_conv_rslt,", 29);
                    std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
                    v49 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (BYTE6(__dst[26].__locale_))
                  {
                    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tresult_cfg_alias_conv_src,", 27);
                    std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
                    v51 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (HIBYTE(__dst[26].__locale_))
                  {
                    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tresult_cfg_alias_conv_rslt,", 28);
                    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(*v52 - 24)));
                    v53 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (LOBYTE(__dst[27].__locale_))
                  {
                    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tsource1_cfg_alias_planar_src,", 30);
                    std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
                    v55 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (BYTE1(__dst[27].__locale_))
                  {
                    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tsource1_cfg_alias_planar_rslt,", 31);
                    std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(_QWORD *)(*v56 - 24)));
                    v57 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (BYTE2(__dst[27].__locale_))
                  {
                    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tsource2_cfg_alias_planar_src,", 30);
                    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
                    v59 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (BYTE3(__dst[27].__locale_))
                  {
                    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tsource2_cfg_alias_planar_rslt,", 31);
                    std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
                    v61 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (BYTE6(__dst[27].__locale_))
                  {
                    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tresult_cfg_alias_planar_src,", 29);
                    std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(_QWORD *)(*v62 - 24)));
                    v63 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  if (HIBYTE(__dst[27].__locale_))
                  {
                    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\tresult_cfg_alias_planar_rslt,", 30);
                    std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
                    v65 = std::locale::use_facet((const std::locale *)__p, v6);
                    ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"}", 1);
                  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
                  v67 = std::locale::use_facet((const std::locale *)__p, v6);
                  ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
                  std::locale::~locale((std::locale *)__p);
                  std::ostream::put();
                  std::ostream::flush();
                  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v81.__r_.__value_.__l.__data_);
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v85);
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v84);
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v83);
                  v10 += 8;
                }
                while (v10 != v9);
                v10 = (char *)buf;
              }
              if (v10)
              {
                *((_QWORD *)&buf + 1) = v10;
                operator delete(v10);
              }
              v8 = v76 + 24;
            }
            while (v76 + 24 != v75);
            v4 = **(_QWORD **)(v73 + 24);
          }
          v1 = v73;
          v5 = v74 + 1;
        }
        while (v74 + 1 < *(int *)(v4 + 4));
      }
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"\n[DEBUG_END] Hazard results", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(*v68 - 24)));
      v69 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
      std::locale::~locale(__dst);
      std::ostream::put();
      std::ostream::flush();
      std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(*v68 - 24)));
      v70 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
      std::locale::~locale(__dst);
      std::ostream::put();
      std::ostream::flush();
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v88, __dst);
        v71 = SHIBYTE(__dst[2].__locale_) >= 0 ? __dst : (std::locale *)__dst[0].__locale_;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v71;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__dst[2].__locale_) < 0)
          operator delete(__dst[0].__locale_);
      }
      v86[0] = *MEMORY[0x24BEDB7F0];
      v72 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v86 + *(_QWORD *)(v86[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v87 = v72;
      v88[0] = MEMORY[0x24BEDB848] + 16;
      if (v89 < 0)
        operator delete((void *)v88[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return MEMORY[0x20BD0022C](&v90);
    }
  }
  return this;
}

void sub_207055DE0(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  STACK[0x2E8] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(unint64_t *)((char *)&STACK[0x2E8] + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  v5 = MEMORY[0x24BEDB848] + 16;
  STACK[0x2F8] = v4;
  STACK[0x300] = v5;
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](&STACK[0x368]);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>(result, v12);
    v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v15];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v16[2] = v14 + 32;
    std::vector<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_OWORD *)a1[1];
    result = std::__split_buffer<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7[1] = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20705609C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinMirL2HazardAnalysis::ConfigureExtensiveL2Dependency(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int L2SrcType;
  uint64_t result;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *L2SrcDep;
  int v15;
  _QWORD v16[4];
  int v17;
  unsigned int v18;

  v6 = a2[33];
  v18 = 0;
  L2SrcType = ZinMemSourceIndexTranslator::GetL2SrcType(a2, a3, (int *)&v18);
  result = 0;
  if (L2SrcType || v18 == 2)
    return result;
  v15 = 1;
  if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)a4, &v15))
  {
    v9 = v18;
    if (v18 <= 1)
    {
      v10 = (_QWORD *)a2[33];
      if (v10[13] >= 2uLL)
      {
        if (v10[11] >= 2uLL)
        {
          v11 = *(_QWORD *)(ZinMirL2Config::GetTileSrc(v6 + 120, v18) + 32);
          v12 = *(_QWORD *)(a2[33] + 88);
          if (v11 != *(_QWORD *)(ZinMirL2Config::GetTileSrc(v6 + 120, v9) + 16) * v12)
            return 0;
          v10 = (_QWORD *)a2[33];
          if (v10[13] < 2uLL)
            goto LABEL_11;
        }
        v13 = v10[10];
        if (v13 < 2 || *(_QWORD *)(v6 + 288) == *(_QWORD *)(v6 + 280) * v13)
          goto LABEL_11;
        return 0;
      }
    }
  }
LABEL_11:
  L2SrcDep = (int *)ZinMirL2Config::GetL2SrcDep(v6 + 120, v18);
  v15 = *L2SrcDep;
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v16, (uint64_t)(L2SrcDep + 2));
  if (v16 != (_QWORD *)a4)
  {
    v17 = *(_DWORD *)(a4 + 32);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v16, *(uint64_t **)(a4 + 16), 0);
  }
  ZinMirL2Config::SetL2SrcDep((_DWORD *)(v6 + 120), (uint64_t)&v15, v18);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v16);
  return 1;
}

void sub_207056234(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL ZinMirL2HazardAnalysis::IsQualifiedForExtensiveL2Dependency(uint64_t a1, const ZinIrOpLayer *a2, ZinIrOpLayer *a3, ZinIrOpLayerGraph *a4, const ZinIrTensor *a5, uint64_t a6)
{
  ZinIrTensor *v11;
  ZinIrTensor *RootTensor;
  int ShouldUseL2Dependent;
  char *v14;
  _BOOL8 IsConnected;
  ZinIrOpLayer *v17;
  const ZinIrOpLayer *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (!*((_BYTE *)a5 + 1316))
    return 0;
  v11 = (ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v11);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  ShouldUseL2Dependent = ZinIrRegAllocUtil::ShouldUseL2Dependent(RootTensor, a5, &v19);
  v14 = v19;
  if (v20 - v19 != 16)
    ShouldUseL2Dependent = 0;
  if (ShouldUseL2Dependent == 1)
  {
    if (*(const ZinIrOpLayer **)v19 != a2 || *((ZinIrOpLayer **)v19 + 1) != a3)
    {
      IsConnected = 0;
LABEL_10:
      v20 = v14;
      operator delete(v14);
      return IsConnected;
    }
    ZinMirL2HazardAnalysis::ComputeDependencyMap((uint64_t)v19, a2, a3, a4, (uint64_t)a5, a6);
    if (*(_QWORD *)(a6 + 24))
    {
      IsConnected = 1;
    }
    else
    {
      v17 = a3;
      v18 = a2;
      IsConnected = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsConnected((uint64_t)a4, (unint64_t *)&v18, (uint64_t *)&v17);
    }
    v14 = v19;
    if (v19)
      goto LABEL_10;
  }
  else
  {
    IsConnected = 0;
    if (v19)
      goto LABEL_10;
  }
  return IsConnected;
}

void sub_207056368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinMirL2HazardAnalysis::ComputeDependencyMap(uint64_t a1, const ZinIrOpLayer *a2, ZinIrOpLayer *a3, ZinIrOpLayerGraph *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t *v12;
  BOOL v13;
  _QWORD *v14;
  void **v15[5];
  ZinReshapeLayer ***v16;
  ZinReshapeLayer ***v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::clear(a6);
  if (!ZinTensorFamilyUtil::FindAllIntermediateLayerPaths((uint64_t)a2, a3, (uint64_t *)&v16)
    && v16 != v17
    && 0xAAAAAAAAAAAAAAABLL * (v17 - v16) <= 1)
  {
    ZinIrRegAllocUtil::ComputeDependencyOffset(&v16, a2, (uint64_t)a3, a4, a5, 0, (uint64_t)v15);
    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__move_assign(a6, (uint64_t *)v15);
    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)v15);
    if (*(_QWORD *)(a6 + 24))
    {
      v11 = *(_QWORD **)(a6 + 16);
      if (v11)
      {
        while (1)
        {
          if (!*(_BYTE *)(a5 + 1324))
          {
            v14 = (_QWORD *)v11[5];
            if (v14)
              break;
          }
LABEL_8:
          LODWORD(v15[0]) = 3;
          v12 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v11 + 3, (int *)v15);
          if (*(_BYTE *)(a5 + 1322))
            v13 = 1;
          else
            v13 = v12 == 0;
          if (!v13 && v12[3])
            goto LABEL_19;
          v11 = (_QWORD *)*v11;
          if (!v11)
            goto LABEL_2;
        }
        while ((v14[3] & 0x8000000000000000) == 0)
        {
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_8;
        }
LABEL_19:
        std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::clear(a6);
      }
    }
  }
LABEL_2:
  v15[0] = (void **)&v16;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v15);
}

void sub_2070564D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinMirL2HazardAnalysis::TryEnablingParallelExecution(ZinMirL2HazardAnalysis *this, const ZinANELayer *a2, ZinEngineLayerMirInfo **a3, BOOL *a4)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  ZinEngineLayerMirInfo *v11;
  ZinMirL2Config *v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  BOOL EdgeType;
  BOOL v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  ZinIrSymbol *L2WrSymbol;
  void **v48;
  void **v49;
  void **v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  BOOL v68;
  BOOL v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  ZinEngineLayerMirInfo *v79;
  uint64_t v80;
  char *v81;
  void **v82;
  void **v83;
  std::__shared_weak_count *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  void ***v87;
  std::__shared_weak_count *v88;
  void **v89;
  void **v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void *__p;
  void *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  unint64_t *v104[2];

  if (a2 && a3 && !ZinBondedUtils::AreAssignedToSameANE(a2, (const ZinANELayer *)a3, (const ZinANELayer *)a3))
    ZinAssertImpl("Layers must be assigned to the same ANE");
  *a4 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v8 = *((_QWORD *)this + 1);
  v9 = *(const void **)(v8 + 352);
  v10 = *(_QWORD *)(v8 + 360);
  if ((const void *)v10 == v9)
    ZinAssertImpl("Must run scheduler first");
  __p = 0;
  v99 = 0;
  v100 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v9, v10, (v10 - (uint64_t)v9) >> 3);
  if (!ZinIrRegAllocUtil::IsQualifiedForParallelExecution(a2, (ZinIrOpLayer *)a3, (ZinIrOpLayer ***)&__p, *((_QWORD *)this + 3), &v101)|| ((v11 = a3[33], v12 = (ZinMirL2Config *)(*((_QWORD *)a2 + 33) + 120), !ZinIrOpLayer::IsNELayer(a2))? (v13 = 1): (v13 = 2), ZinMirL2Config::HasL2DependentMode(v12, v13)|| !ZinMirL2Config::HasAlias(v12)|| (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a3) ? (v14 = 1) : (v14 = 2), ZinMirL2Config::HasL2DependentMode((_DWORD *)v11 + 30, v14))))
  {
    v15 = 0;
    goto LABEL_16;
  }
  if (!ZinMirL2Config::HasAlias((ZinEngineLayerMirInfo *)((char *)v11 + 120)))
  {
    v15 = 1;
    goto LABEL_16;
  }
  v95 = 0;
  v96 = 0;
  v97 = 0;
  ZinMirL2HazardAnalysis::GetReadBeginHazardNodes(this, (uint64_t)a3, &v95);
  v18 = v95;
  v17 = v96;
  v81 = v96;
LABEL_23:
  if (v18 != v17)
  {
    v19 = *((_QWORD *)v18 + 1);
    v89 = *(void ***)v18;
    v90 = (void **)v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(_QWORD *)this;
    v23 = (_QWORD *)(*(_QWORD *)this + 64);
    v104[0] = (unint64_t *)&v89;
    v24 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v23, v104);
    v25 = (uint64_t **)(v22 + 104);
    if (v24)
      v25 = v24 + 3;
    v26 = *v25;
    v27 = v25[1];
    while (1)
    {
      if (v26 == v27)
      {
        v43 = 1;
        goto LABEL_56;
      }
      v28 = (_QWORD *)*v26;
      LODWORD(v87) = 0;
      v29 = *(_QWORD *)this;
      v30 = (std::__shared_weak_count *)v28[1];
      v93 = *v28;
      v94 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
      v91 = v89;
      v92 = (std::__shared_weak_count *)v90;
      if (v90)
      {
        v33 = (unint64_t *)(v90 + 1);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      EdgeType = ZinIrHazardGraph::GetEdgeType(v29, &v93, (uint64_t *)&v91, &v87);
      if ((_DWORD)v87)
        v36 = 0;
      else
        v36 = EdgeType;
      v37 = v92;
      if (v92)
      {
        v38 = (unint64_t *)&v92->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v94;
      if (!v94)
        goto LABEL_49;
      v41 = (unint64_t *)&v94->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        if (v36)
          goto LABEL_51;
      }
      else
      {
LABEL_49:
        if (v36)
          goto LABEL_51;
      }
      if (*(_QWORD *)(*(_QWORD *)*v28 + 360) == *((_QWORD *)a2 + 45))
      {
        v43 = 0;
LABEL_56:
        v44 = (std::__shared_weak_count *)v90;
        if (v90)
        {
          v45 = (unint64_t *)(v90 + 1);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if ((v43 & 1) == 0)
          goto LABEL_110;
        v18 += 16;
        v17 = v81;
        goto LABEL_23;
      }
LABEL_51:
      ++v26;
    }
  }
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(a3[33]);
  ZinMirL2HazardAnalysis::GetHazardNodes(this, L2WrSymbol, (uint64_t)&v89);
  v48 = v89;
  v49 = v90;
  if (v89 == v90)
    goto LABEL_108;
  v82 = v90;
  while (2)
  {
    v50 = (void **)*v48;
    v51 = (std::__shared_weak_count *)v48[1];
    v87 = (void ***)*v48;
    v88 = v51;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    if (*v50 != a3)
    {
      v54 = 1;
      goto LABEL_101;
    }
    v55 = *(_QWORD *)this;
    v56 = (_QWORD *)(*(_QWORD *)this + 64);
    v104[0] = (unint64_t *)&v87;
    v57 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v56, v104);
    v58 = (uint64_t **)(v55 + 104);
    if (v57)
      v58 = v57 + 3;
    v59 = *v58;
    v60 = v58[1];
    while (1)
    {
      if (v59 == v60)
      {
        v54 = 1;
        goto LABEL_100;
      }
      v61 = (_QWORD *)*v59;
      LODWORD(v104[0]) = 0;
      v62 = *(_QWORD *)this;
      v63 = (std::__shared_weak_count *)v61[1];
      v85 = *v61;
      v86 = v63;
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      v83 = (void **)v87;
      v84 = v88;
      if (v88)
      {
        v66 = (unint64_t *)&v88->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = ZinIrHazardGraph::GetEdgeType(v62, &v85, (uint64_t *)&v83, v104);
      if (LODWORD(v104[0]))
        v69 = 0;
      else
        v69 = v68;
      v70 = v84;
      if (v84)
      {
        v71 = (unint64_t *)&v84->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v86;
      if (!v86)
        break;
      v74 = (unint64_t *)&v86->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (v75)
        break;
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
      if (!v69)
        goto LABEL_94;
LABEL_95:
      ++v59;
    }
    if (v69)
      goto LABEL_95;
LABEL_94:
    if (*(_QWORD *)(*(_QWORD *)*v61 + 360) != *((_QWORD *)a2 + 45))
      goto LABEL_95;
    v54 = 0;
LABEL_100:
    v49 = v82;
LABEL_101:
    v76 = v88;
    if (v88)
    {
      v77 = (unint64_t *)&v88->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if ((v54 & 1) != 0)
    {
      v48 += 2;
      if (v48 == v49)
      {
LABEL_108:
        v87 = &v89;
        std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
        v79 = a3[33];
        *((_QWORD *)v79 + 41) = 0;
        *((_QWORD *)v79 + 42) = 0;
        v80 = *((_QWORD *)a2 + 33);
        v15 = 1;
        *(_BYTE *)(v80 + 344) = 1;
        *a4 = 1;
        goto LABEL_111;
      }
      continue;
    }
    break;
  }
  v87 = &v89;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
LABEL_110:
  v15 = 0;
LABEL_111:
  v89 = (void **)&v95;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v89);
LABEL_16:
  if (__p)
  {
    v99 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  return v15;
}

void sub_207056A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  a15 = &a24;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  v30 = *(void **)(v28 - 120);
  if (v30)
  {
    *(_QWORD *)(v28 - 112) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void ZinMirL2HazardAnalysis::DebugPrintNode(uint64_t a1, uint64_t ***a2, uint64_t a3, int a4)
{
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  ZinBondedInfo *BondedInfo;
  unint64_t *AneIndex;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 *v46;
  uint64_t v47;
  std::string *v48;
  std::string::size_type v49;
  _QWORD *v50;
  __int128 *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  std::string *v70;
  std::string::size_type v71;
  _QWORD *v72;
  __int128 *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  std::string *v78;
  std::string::size_type v79;
  _QWORD *v80;
  __int128 *v81;
  uint64_t v82;
  _QWORD *v83;
  std::string *v84;
  std::string *v85;
  std::string::size_type v86;
  _QWORD *v87;
  __int128 *v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  const char *v92;
  uint64_t v93;
  _QWORD *v94;
  const std::locale::facet *v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  __int128 v104;
  int64_t v105;
  std::string v106;

  v7 = **a2;
  v8 = (*a2)[1];
  if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v7))
    v9 = "(NE";
  else
    v9 = "(PE";
  std::string::basic_string[abi:ne180100]<0>(&v106, v9);
  BondedInfo = (ZinBondedInfo *)ZinANELayer::GetBondedInfo((ZinANELayer *)v7);
  AneIndex = (unint64_t *)ZinBondedInfo::GetAneIndex(BondedInfo);
  std::to_string(&v98, *AneIndex);
  v12 = std::string::insert(&v98, 0, ", ane_index=", 0xCuLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v99, ", sched=", 8uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v97, v7[6]);
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v97;
  else
    v16 = (std::string *)v97.__r_.__value_.__r.__words[0];
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  else
    size = v97.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v100, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v101.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v101, ", tid=", 6uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v96, v7[45]);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v96;
  else
    v22 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v23 = v96.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v102, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v103.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v103, ")", 1uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v105 = v26->__r_.__value_.__r.__words[2];
  v104 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v105 >= 0)
    v28 = (const std::string::value_type *)&v104;
  else
    v28 = (const std::string::value_type *)v104;
  if (v105 >= 0)
    v29 = HIBYTE(v105);
  else
    v29 = *((_QWORD *)&v104 + 1);
  std::string::append(&v106, v28, v29);
  if (SHIBYTE(v105) < 0)
    operator delete((void *)v104);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (a4)
    v30 = "\\l";
  else
    v30 = "\n";
  std::string::basic_string[abi:ne180100]<0>(&v104, v30);
  v31 = (_QWORD *)(a3 + 16);
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\t", 1);
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
  v34 = (std::string *)*a2;
  if (*((char *)*a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v103, v34[1].__r_.__value_.__l.__data_, v34[1].__r_.__value_.__l.__size_);
  else
    v103 = v34[1];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v103;
  else
    v35 = (std::string *)v103.__r_.__value_.__r.__words[0];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  else
    v36 = v103.__r_.__value_.__l.__size_;
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v35, v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\" [", 3);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"label=\"", 7);
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"L=", 2);
  v41 = v7[3];
  v40 = v7 + 3;
  v39 = v41;
  v42 = *((char *)v40 + 23);
  if (v42 >= 0)
    v43 = (uint64_t)v40;
  else
    v43 = v39;
  if (v42 >= 0)
    v44 = *((unsigned __int8 *)v40 + 23);
  else
    v44 = v40[1];
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
  if (v105 >= 0)
    v46 = &v104;
  else
    v46 = (__int128 *)v104;
  if (v105 >= 0)
    v47 = HIBYTE(v105);
  else
    v47 = *((_QWORD *)&v104 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v106;
  else
    v48 = (std::string *)v106.__r_.__value_.__r.__words[0];
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  else
    v49 = v106.__r_.__value_.__l.__size_;
  v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v48, v49);
  if (v105 >= 0)
    v51 = &v104;
  else
    v51 = (__int128 *)v104;
  if (v105 >= 0)
    v52 = HIBYTE(v105);
  else
    v52 = *((_QWORD *)&v104 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"S=", 2);
  v56 = v8[20];
  v55 = (uint64_t)(v8 + 20);
  v54 = v56;
  v57 = *(char *)(v55 + 23);
  if (v57 >= 0)
    v58 = v55;
  else
    v58 = v54;
  if (v57 >= 0)
    v59 = *(unsigned __int8 *)(v55 + 23);
  else
    v59 = *(_QWORD *)(v55 + 8);
  v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v58, v59);
  if (v105 >= 0)
    v61 = &v104;
  else
    v61 = (__int128 *)v104;
  if (v105 >= 0)
    v62 = HIBYTE(v105);
  else
    v62 = *((_QWORD *)&v104 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"range=[", 7);
  v63 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", ", 2);
  v64 = (_QWORD *)std::ostream::operator<<();
  v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"]", 1);
  if (v105 >= 0)
    v66 = &v104;
  else
    v66 = (__int128 *)v104;
  if (v105 >= 0)
    v67 = HIBYTE(v105);
  else
    v67 = *((_QWORD *)&v104 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
  if (*((_DWORD *)*a2 + 5))
    v68 = "End";
  else
    v68 = "Begin";
  std::string::basic_string[abi:ne180100]<0>(&v103, v68);
  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"ExecutionType=", 14);
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = &v103;
  else
    v70 = (std::string *)v103.__r_.__value_.__r.__words[0];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  else
    v71 = v103.__r_.__value_.__l.__size_;
  v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
  if (v105 >= 0)
    v73 = &v104;
  else
    v73 = (__int128 *)v104;
  if (v105 >= 0)
    v74 = HIBYTE(v105);
  else
    v74 = *((_QWORD *)&v104 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
  v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Ty=", 3);
  v76 = *((int *)*a2 + 4);
  if (v76 >= 4)
    ZinAssertImpl("Unreachable.");
  v77 = v75;
  std::string::basic_string[abi:ne180100]<0>(&v102, (&off_24C0607C0)[v76]);
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = &v102;
  else
    v78 = (std::string *)v102.__r_.__value_.__r.__words[0];
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
  else
    v79 = v102.__r_.__value_.__l.__size_;
  v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
  if (v105 >= 0)
    v81 = &v104;
  else
    v81 = (__int128 *)v104;
  if (v105 >= 0)
    v82 = HIBYTE(v105);
  else
    v82 = *((_QWORD *)&v104 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Name=", 5);
  v84 = (std::string *)*a2;
  if (*((char *)*a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v102, v84[1].__r_.__value_.__l.__data_, v84[1].__r_.__value_.__l.__size_);
  else
    v102 = v84[1];
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v85 = &v102;
  else
    v85 = (std::string *)v102.__r_.__value_.__r.__words[0];
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
  else
    v86 = v102.__r_.__value_.__l.__size_;
  v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v85, v86);
  if (v105 >= 0)
    v88 = &v104;
  else
    v88 = (__int128 *)v104;
  if (v105 >= 0)
    v89 = HIBYTE(v105);
  else
    v89 = *((_QWORD *)&v104 + 1);
  v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" \"", 2);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  v91 = *((_DWORD *)*a2 + 4);
  if (v91 == 3)
    v92 = ", fillcolor=grey";
  else
    v92 = ", fillcolor=white";
  if (v91 == 3)
    v93 = 16;
  else
    v93 = 17;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v92, v93);
  v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(_QWORD *)(*v94 - 24)));
  v95 = std::locale::use_facet((const std::locale *)&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
  std::locale::~locale((std::locale *)&v102);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105) < 0)
    operator delete((void *)v104);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
}

void sub_207057278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,std::locale a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 137) < 0)
    operator delete(*(void **)(v54 - 160));
  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  if (*(char *)(v54 - 81) < 0)
    operator delete(*(void **)(v54 - 104));
  _Unwind_Resume(exception_object);
}

BOOL ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(uint64_t a1, ZinIrHazardNode **a2, ZinIrHazardNode **a3)
{
  uint64_t LayerTID;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v10;

  LayerTID = ZinIrHazardNode::GetLayerTID(*a2);
  if (LayerTID < ZinIrHazardNode::GetLayerTID(*a3))
    return 1;
  v6 = ZinIrHazardNode::GetLayerTID(*a2);
  if (v6 > ZinIrHazardNode::GetLayerTID(*a3))
    return 0;
  v7 = *((_DWORD *)*a2 + 4);
  v8 = *((_DWORD *)*a3 + 4);
  if (v7 < v8)
    return 1;
  if (v7 > v8)
    return 0;
  if (*((_DWORD *)*a2 + 5))
    v10 = 1;
  else
    v10 = *((_DWORD *)*a3 + 5) == 0;
  return !v10;
}

void std::vector<std::vector<std::vector<ZinANELayer *>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *,false>(uint64_t a1, ZinIrHazardNode **a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 *v18;
  char v19;
  BOOL v20;
  ZinIrHazardNode *v21;
  ZinIrHazardNode *v22;

  v8 = a1;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, a2 - 2, (ZinIrHazardNode **)v9))
        {
          v21 = *(ZinIrHazardNode **)v9;
          *(_QWORD *)v9 = *(a2 - 2);
          *(a2 - 2) = v21;
          v22 = *(ZinIrHazardNode **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *(a2 - 1);
          *(a2 - 1) = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9, v9 + 16, (uint64_t)(a2 - 2));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 2));
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (_OWORD *)(v9 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            v16 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9 + 16 * (v13 >> 1), v9, (uint64_t)(a2 - 2));
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9, v9 + 16 * (v13 >> 1), (uint64_t)(a2 - 2));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9 + 16, (uint64_t)(v15 - 1), (uint64_t)(a2 - 4));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9 + 32, v9 + 16 + 16 * v14, (uint64_t)(a2 - 6));
            v16 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>((uint64_t)(v15 - 1), (uint64_t)v15, v9 + 16 + 16 * v14);
            v17 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v15;
            *v15 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v16, (ZinIrHazardNode **)(v9 - 16), (ZinIrHazardNode **)v9))
          {
            a1 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<ZinIrHazardNode> *,ZinMirL2HazardAnalysis::HazardNodeSorter &>(v9, (unint64_t)a2);
            v9 = a1;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<ZinIrHazardNode> *,ZinMirL2HazardAnalysis::HazardNodeSorter &>(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v9, (uint64_t)v18);
          v9 = (uint64_t)(v18 + 1);
          a1 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>((uint64_t)(v18 + 1), (uint64_t)a2);
          if (!(_DWORD)a1)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_15:
            a1 = std::__introsort<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v18 + 1);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (ZinIrHazardNode **)v18;
          if (v20)
            return;
          goto LABEL_2;
        }
        if ((ZinIrHazardNode **)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *,std::shared_ptr<ZinIrHazardNode> *>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  ZinIrHazardNode **v4;
  uint64_t v5;
  uint64_t v6;
  ZinIrHazardNode **v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  if (a1 != a2)
  {
    v3 = a1;
    v4 = (ZinIrHazardNode **)(a1 + 16);
    if (a1 + 16 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = (ZinIrHazardNode **)v6;
        v6 = (uint64_t)v4;
        LODWORD(a1) = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, v4, v7);
        if ((_DWORD)a1)
        {
          v15 = *(_OWORD *)v6;
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v8 = v5;
          while (1)
          {
            v9 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v3 + v8 + 16, (__int128 *)(v3 + v8));
            if (!v8)
              break;
            v10 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v9, (ZinIrHazardNode **)&v15, (ZinIrHazardNode **)(v3 + v8 - 16));
            v8 -= 16;
            if (!v10)
            {
              v11 = v3 + v8 + 16;
              goto LABEL_10;
            }
          }
          v11 = v3;
LABEL_10:
          a1 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v11, &v15);
          v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
          if (*((_QWORD *)&v15 + 1))
          {
            v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
        v4 = (ZinIrHazardNode **)(v6 + 16);
        v5 += 16;
      }
      while (v6 + 16 != a2);
    }
  }
}

void sub_207057938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, ZinIrHazardNode **a2)
{
  ZinIrHazardNode **v3;
  ZinIrHazardNode **v4;
  ZinIrHazardNode **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  if ((ZinIrHazardNode **)a1 != a2)
  {
    v3 = (ZinIrHazardNode **)a1;
    v4 = (ZinIrHazardNode **)(a1 + 16);
    while (v4 != a2)
    {
      v5 = v4;
      LODWORD(a1) = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, v4, v3);
      if ((_DWORD)a1)
      {
        v10 = *(_OWORD *)v5;
        *v5 = 0;
        v5[1] = 0;
        do
        {
          v6 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)(v3 + 2), (__int128 *)v3);
          v3 -= 2;
        }
        while (ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v6, (ZinIrHazardNode **)&v10, v3));
        a1 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)(v3 + 2), &v10);
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
        if (*((_QWORD *)&v10 + 1))
        {
          v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      v4 = v5 + 2;
      v3 = v5;
    }
  }
}

void sub_207057A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  BOOL v7;
  uint64_t result;
  ZinIrHazardNode *v9;
  uint64_t *v10;
  uint64_t *v11;
  ZinIrHazardNode *v12;
  uint64_t v13;
  uint64_t *v14;
  ZinIrHazardNode *v15;
  uint64_t v16;
  ZinIrHazardNode *v17;
  uint64_t v18;

  v6 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)a2, (ZinIrHazardNode **)a1);
  v7 = v6;
  result = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v6, (ZinIrHazardNode **)a3, (ZinIrHazardNode **)a2);
  if (v7)
  {
    v9 = *(ZinIrHazardNode **)a1;
    if ((_DWORD)result)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      v10 = (uint64_t *)(a3 + 8);
      result = 1;
      v11 = (uint64_t *)(a1 + 8);
LABEL_9:
      v14 = v10;
      goto LABEL_10;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v9;
    v16 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v16;
    if (ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(result, (ZinIrHazardNode **)a3, (ZinIrHazardNode **)a2))
    {
      v17 = *(ZinIrHazardNode **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v17;
      v10 = (uint64_t *)(a3 + 8);
      result = 2;
      v11 = (uint64_t *)(a2 + 8);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v12 = *(ZinIrHazardNode **)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v12;
    v14 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v13;
    if (ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(result, (ZinIrHazardNode **)a2, (ZinIrHazardNode **)a1))
    {
      v15 = *(ZinIrHazardNode **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v11 = (uint64_t *)(a1 + 8);
      *(_QWORD *)a2 = v15;
      result = 2;
LABEL_10:
      v18 = *v11;
      *v11 = *v14;
      *v14 = v18;
      return result;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<ZinIrHazardNode> *,ZinMirL2HazardAnalysis::HazardNodeSorter &>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  _BOOL8 v4;
  unint64_t v5;
  ZinIrHazardNode **v6;
  ZinIrHazardNode *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  v2 = a2;
  v13 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)&v13, (ZinIrHazardNode **)(a2 - 16));
  if (v4)
  {
    v5 = a1;
    do
    {
      v5 += 16;
      v4 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v4, (ZinIrHazardNode **)&v13, (ZinIrHazardNode **)v5);
    }
    while (!v4);
  }
  else
  {
    v6 = (ZinIrHazardNode **)(a1 + 16);
    do
    {
      v5 = (unint64_t)v6;
      if ((unint64_t)v6 >= v2)
        break;
      v4 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v4, (ZinIrHazardNode **)&v13, v6);
      v6 = (ZinIrHazardNode **)(v5 + 16);
    }
    while (!v4);
  }
  if (v5 < v2)
  {
    do
    {
      v2 -= 16;
      v4 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v4, (ZinIrHazardNode **)&v13, (ZinIrHazardNode **)v2);
    }
    while (v4);
  }
  while (v5 < v2)
  {
    v7 = *(ZinIrHazardNode **)v5;
    *(_QWORD *)v5 = *(_QWORD *)v2;
    *(_QWORD *)v2 = v7;
    v8 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = v8;
    do
    {
      v5 += 16;
      v4 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v4, (ZinIrHazardNode **)&v13, (ZinIrHazardNode **)v5);
    }
    while (!v4);
    do
    {
      v2 -= 16;
      v4 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v4, (ZinIrHazardNode **)&v13, (ZinIrHazardNode **)v2);
    }
    while (v4);
  }
  if (v5 - 16 != a1)
    std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(a1, (__int128 *)(v5 - 16));
  std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v5 - 16, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v5;
}

void sub_207057CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<ZinIrHazardNode> *,ZinMirL2HazardAnalysis::HazardNodeSorter &>(uint64_t a1, ZinIrHazardNode **a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  ZinIrHazardNode **v7;
  ZinIrHazardNode *v8;
  ZinIrHazardNode *v9;
  __int128 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  v3 = a1;
  v4 = 0;
  v15 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    a1 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)(v3 + v4 + 16), (ZinIrHazardNode **)&v15);
    v4 += 16;
  }
  while ((a1 & 1) != 0);
  v5 = v3 + v4;
  if (v4 == 16)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      a2 -= 2;
      a1 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, a2, (ZinIrHazardNode **)&v15);
    }
    while ((a1 & 1) == 0);
  }
  else
  {
    do
    {
      a2 -= 2;
      a1 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, a2, (ZinIrHazardNode **)&v15);
    }
    while (!(_DWORD)a1);
  }
  if (v5 >= (unint64_t)a2)
  {
    v10 = (__int128 *)(v5 - 16);
  }
  else
  {
    v6 = v3 + v4;
    v7 = a2;
    do
    {
      v8 = *(ZinIrHazardNode **)v6;
      *(_QWORD *)v6 = *v7;
      *v7 = v8;
      v9 = *(ZinIrHazardNode **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = v7[1];
      v7[1] = v9;
      do
      {
        v6 += 16;
        a1 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)v6, (ZinIrHazardNode **)&v15);
      }
      while ((a1 & 1) != 0);
      do
      {
        v7 -= 2;
        a1 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, v7, (ZinIrHazardNode **)&v15);
      }
      while (!(_DWORD)a1);
    }
    while (v6 < (unint64_t)v7);
    v10 = (__int128 *)(v6 - 16);
  }
  if (v10 != (__int128 *)v3)
    std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v3, v10);
  std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)v10, &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_207057E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  ZinIrHazardNode *v6;
  uint64_t v7;
  ZinIrHazardNode **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(1, (ZinIrHazardNode **)(a2 - 16), (ZinIrHazardNode **)a1))
      {
        v6 = *(ZinIrHazardNode **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v6;
        v7 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v8 = (ZinIrHazardNode **)(a1 + 32);
      v9 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(a1, a1 + 16, a1 + 32);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    LODWORD(v9) = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v9, (ZinIrHazardNode **)v10, v8);
    if ((_DWORD)v9)
    {
      v20 = *(_OWORD *)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v13 = v11;
      while (1)
      {
        v14 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(a1 + v13 + 48, (__int128 *)(a1 + v13 + 32));
        if (v13 == -32)
          break;
        v15 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v14, (ZinIrHazardNode **)&v20, (ZinIrHazardNode **)(a1 + v13 + 16));
        v13 -= 16;
        if (!v15)
        {
          v16 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      v9 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v16, &v20);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v8 = (ZinIrHazardNode **)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

void sub_207058060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BOOL8 result;
  ZinIrHazardNode *v10;
  uint64_t v11;
  ZinIrHazardNode *v12;
  uint64_t v13;
  ZinIrHazardNode *v14;
  uint64_t v15;

  v8 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(a1, a2, a3);
  result = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v8, (ZinIrHazardNode **)a4, (ZinIrHazardNode **)a3);
  if (result)
  {
    v10 = *(ZinIrHazardNode **)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v10;
    v11 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v11;
    result = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(result, (ZinIrHazardNode **)a3, (ZinIrHazardNode **)a2);
    if (result)
    {
      v12 = *(ZinIrHazardNode **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      v13 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v13;
      result = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(result, (ZinIrHazardNode **)a2, (ZinIrHazardNode **)a1);
      if (result)
      {
        v14 = *(ZinIrHazardNode **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v14;
        v15 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v15;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v10;
  _BOOL8 result;
  ZinIrHazardNode *v12;
  uint64_t v13;
  ZinIrHazardNode *v14;
  uint64_t v15;
  ZinIrHazardNode *v16;
  uint64_t v17;
  ZinIrHazardNode *v18;
  uint64_t v19;

  v10 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(a1, a2, a3, a4);
  result = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v10, (ZinIrHazardNode **)a5, (ZinIrHazardNode **)a4);
  if (result)
  {
    v12 = *(ZinIrHazardNode **)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v12;
    v13 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v13;
    result = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(result, (ZinIrHazardNode **)a4, (ZinIrHazardNode **)a3);
    if (result)
    {
      v14 = *(ZinIrHazardNode **)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      v15 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v15;
      result = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(result, (ZinIrHazardNode **)a3, (ZinIrHazardNode **)a2);
      if (result)
      {
        v16 = *(ZinIrHazardNode **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v16;
        v17 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v17;
        result = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(result, (ZinIrHazardNode **)a2, (ZinIrHazardNode **)a1);
        if (result)
        {
          v18 = *(ZinIrHazardNode **)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v18;
          v19 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v19;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ZinIrHazardNode *v15;
  uint64_t v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 16 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v7, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        LODWORD(a1) = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)v14, (ZinIrHazardNode **)v7);
        if ((_DWORD)a1)
        {
          v15 = *(ZinIrHazardNode **)v14;
          *(_QWORD *)v14 = *(_QWORD *)v7;
          *(_QWORD *)v7 = v15;
          v16 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(v7, a4, v9, v7);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter,std::shared_ptr<ZinIrHazardNode> *>(v7, v6, a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(_BOOL8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = a1;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 4)
    {
      v9 = (a4 - a1) >> 3;
      v10 = v9 + 1;
      v11 = a1 + 16 * (v9 + 1);
      v12 = v9 + 2;
      if (v9 + 2 < a3)
      {
        a1 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)(a1 + 16 * (v9 + 1)), (ZinIrHazardNode **)(v11 + 16));
        if (a1)
        {
          v11 += 16;
          v10 = v12;
        }
      }
      if (!ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)v11, (ZinIrHazardNode **)v5))
      {
        v19 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        do
        {
          v13 = v11;
          v14 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v5, (__int128 *)v11);
          if (v7 < v10)
            break;
          v15 = (2 * v10) | 1;
          v11 = v6 + 16 * v15;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v15;
          }
          else
          {
            v14 = ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v14, (ZinIrHazardNode **)(v6 + 16 * v15), (ZinIrHazardNode **)(v11 + 16));
            if ((_DWORD)v14)
              v11 += 16;
            else
              v10 = v15;
          }
          v5 = v13;
        }
        while (!ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v14, (ZinIrHazardNode **)v11, (ZinIrHazardNode **)&v19));
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v13, &v19);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
  }
}

void sub_2070584C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v7 == v9)
    {
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)v7, v9);
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(a1, (uint64_t)(v8 + 1), a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_2070585B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1;
  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (__int128 *)(v4 + 16 * v5 + 16);
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3
      && ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)(v4 + 16 * v5 + 16), (ZinIrHazardNode **)(v4 + 16 * v5 + 32)))
    {
      ++v8;
      v9 = v10;
    }
    a1 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v4, v8);
    v4 = (uint64_t)v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirL2HazardAnalysis::HazardNodeSorter &,std::shared_ptr<ZinIrHazardNode> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = v4 >> 1;
    v7 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v8 = a2 - 16;
    if (ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(a1, (ZinIrHazardNode **)v7, (ZinIrHazardNode **)(a2 - 16)))
    {
      v14 = *(_OWORD *)v8;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      do
      {
        v9 = (uint64_t)v7;
        v10 = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v8, v7);
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (__int128 *)(a1 + 16 * v6);
        v8 = v9;
      }
      while (ZinMirL2HazardAnalysis::HazardNodeSorter::operator()(v10, (ZinIrHazardNode **)v7, (ZinIrHazardNode **)&v14));
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>(v9, &v14);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_207058750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 32);
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *v8 = v9;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v8[1] = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 32;
      v8 -= 2;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>,std::reverse_iterator<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v1 + 16);
    result = std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v1);
    v1 += 32;
  }
  return result;
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(v4 + 16) = v2 - 32;
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v2 - 16);
      result = std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v5);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 32;
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v4 - 16);
      result = std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

ZinIrHazardGraph *std::unique_ptr<ZinIrHazardGraph>::reset[abi:ne180100](ZinIrHazardGraph **a1, ZinIrHazardGraph *a2)
{
  ZinIrHazardGraph *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIrHazardGraph::~ZinIrHazardGraph(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

void ZinIrHazardGraph::~ZinIrHazardGraph(ZinIrHazardGraph *this)
{
  void *v2;

  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 24);
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::destroy(a1, a2[1]);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrHazardNode,std::allocator<ZinIrHazardNode>,ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType &,ZinIrHazardNode::ExecutionType,long,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<ZinIrHazardNode>::__shared_ptr_emplace[abi:ne180100]<ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType &,ZinIrHazardNode::ExecutionType,long,std::allocator<ZinIrHazardNode>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_207058B7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrHazardNode>::__shared_ptr_emplace[abi:ne180100]<ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType &,ZinIrHazardNode::ExecutionType,long,std::allocator<ZinIrHazardNode>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int *a4, unsigned int *a5, _QWORD *a6)
{
  a1[2] = 0;
  *a1 = &unk_24C05B568;
  a1[1] = 0;
  ZinIrHazardNode::ZinIrHazardNode(a1 + 3, *a2, *a3, *a4, *a5, *a6);
  return a1;
}

void sub_207058BDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrHazardNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrHazardNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

void std::__shared_ptr_emplace<ZinIrHazardNode>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

uint64_t *std::__tree<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare,std::allocator<std::shared_ptr<ZinIrHazardNode>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode> const&>(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare,std::allocator<std::shared_ptr<ZinIrHazardNode>>>::__find_equal<std::shared_ptr<ZinIrHazardNode>>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    v12[1] = a1 + 1;
    v8 = a3[1];
    v6[4] = *a3;
    v6[5] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v13 = 1;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<ZinIrTensor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<ZinIrTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v6;
}

_QWORD *std::__tree<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare,std::allocator<std::shared_ptr<ZinIrHazardNode>>>::__find_equal<std::shared_ptr<ZinIrHazardNode>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!HazardNodeCompare::operator()(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!HazardNodeCompare::operator()(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrHazardNode,std::allocator<ZinIrHazardNode>,ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType,ZinIrHazardNode::ExecutionType,long,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<ZinIrHazardNode>::__shared_ptr_emplace[abi:ne180100]<ZinIrSymbol *&,ZinANELayer *&,ZinIrHazardNode::OperandType &,ZinIrHazardNode::ExecutionType,long,std::allocator<ZinIrHazardNode>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_207058E20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ZinIrNgraphUtils::impl::CalculateAsapSchedules<ZinIrHazardGraph>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD **v10;
  _QWORD **v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v19 = (uint64_t)&v19;
  v20 = &v19;
  v21 = 0;
  ZinIrNgraph<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare>::TopologicalSortImpl<std::list<std::shared_ptr<ZinIrHazardNode>>>(a1, &v19);
  for (i = v20; i != &v19; i = (uint64_t *)i[1])
  {
    v5 = i[3];
    v17 = i[2];
    v18 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v22 = &v17;
    v8 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, (unint64_t **)&v22);
    v9 = v8 + 3;
    if (!v8)
      v9 = a1 + 13;
    v10 = (_QWORD **)*v9;
    v11 = (_QWORD **)v9[1];
    if ((_QWORD **)*v9 == v11)
    {
      v22 = &v17;
      std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::hash<std::shared_ptr<ZinIrHazardNode>>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,std::hash<std::shared_ptr<ZinIrHazardNode>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrHazardNode>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<ZinIrHazardNode> const&>,std::tuple<>>(a2, &v17, (uint64_t)&std::piecewise_construct, &v22)[4] = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)a2, *v10);
        if (v12 <= v13[4])
          v12 = v13[4];
        ++v10;
      }
      while (v10 != v11);
      v22 = &v17;
      std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::hash<std::shared_ptr<ZinIrHazardNode>>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,std::hash<std::shared_ptr<ZinIrHazardNode>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrHazardNode>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<ZinIrHazardNode> const&>,std::tuple<>>(a2, &v17, (uint64_t)&std::piecewise_construct, &v22)[4] = v12 + 1;
    }
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  std::__list_imp<std::shared_ptr<ZinMirUnit>>::clear(&v19);
}

void sub_207058FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::__list_imp<std::shared_ptr<ZinMirUnit>>::clear((uint64_t *)va);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>>>::~__hash_table(v4);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNgraph<std::shared_ptr<ZinIrHazardNode>,HazardNodeCompare>::TopologicalSortImpl<std::list<std::shared_ptr<ZinIrHazardNode>>>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD **v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t *v34;
  unint64_t **v35;
  unint64_t *v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t *v45;
  _QWORD *v46[2];
  uint64_t v47;
  _OWORD v48[2];
  __int128 v49;
  unint64_t *v50[3];
  uint64_t *v51;
  _QWORD *v52[2];
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56[3];

  v56[1] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  std::__list_imp<std::shared_ptr<ZinMirUnit>>::clear(a2);
  if (!a1[2])
    return 1;
  v54 = 0;
  v55 = 0;
  v53 = (uint64_t *)&v54;
  v3 = a1 + 1;
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    goto LABEL_59;
  do
  {
    *(_QWORD *)&v48[0] = v4 + 4;
    v5 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, (unint64_t **)v48);
    v6 = v5 + 3;
    if (!v5)
      v6 = a1 + 13;
    if (v6[1] == *v6)
    {
      *(_QWORD *)&v48[0] = v4 + 4;
      std::__tree<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,HazardNodeCompare,std::allocator<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(&v53, (uint64_t *)v48, (uint64_t *)v48);
    }
    v7 = (_QWORD *)v4[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v4[2];
        v9 = *v8 == (_QWORD)v4;
        v4 = v8;
      }
      while (!v9);
    }
    v4 = v8;
  }
  while (v8 != v3);
  if (!v55)
  {
LABEL_59:
    v42 = 0;
  }
  else
  {
    v52[0] = 0;
    v52[1] = 0;
    v51 = (uint64_t *)v52;
    v10 = (_QWORD *)*a1;
    if ((_QWORD *)*a1 != v3)
    {
      do
      {
        v50[0] = v10 + 4;
        *(_QWORD *)&v48[0] = v50;
        *((_DWORD *)std::__tree<std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>,std::__map_value_compare<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>,std::less<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>,true>,std::allocator<std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>&&>,std::tuple<>>(&v51, v50, (uint64_t)&std::piecewise_construct, (_QWORD **)v48)+ 10) = 0;
        v11 = (_QWORD *)v10[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v10[2];
            v9 = *v12 == (_QWORD)v10;
            v10 = v12;
          }
          while (!v9);
        }
        v10 = v12;
      }
      while (v12 != v3);
    }
    v50[0] = (unint64_t *)v50;
    v50[1] = (unint64_t *)v50;
    v50[2] = 0;
    v13 = v53;
    if (v53 != (uint64_t *)&v54)
    {
      v14 = 0uLL;
      do
      {
        v15 = (_QWORD *)v13[4];
        v48[1] = v14;
        v49 = v14;
        v48[0] = v14;
        v56[0] = v15;
        std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>::list(v46, (uint64_t)v56, 1);
        std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::push_back(v48, v46);
        std::__list_imp<ZinIrSection *>::clear(v46);
        while (*((_QWORD *)&v49 + 1))
        {
          v16 = *((_QWORD *)&v48[0] + 1);
          v17 = *((_QWORD *)&v49 + 1) + v49 - 1;
          v18 = v17 / 0xAA;
          v19 = v17 % 0xAA;
          v20 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v48[0] + 1) + 8 * v18) + 24 * v19 + 8) + 16);
          v21 = v52[0];
          if (!v52[0])
            goto LABEL_35;
          v22 = *v20;
          v23 = v52;
          do
          {
            v24 = v21;
            v25 = v23;
            v26 = *(_QWORD *)v21[4];
            if (v26 >= v22)
              v23 = (_QWORD **)v21;
            else
              ++v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
          if (v23 == v52)
            goto LABEL_35;
          if (v26 < v22)
            v24 = v25;
          if (v22 < *(_QWORD *)v24[4])
LABEL_35:
            v23 = v52;
          v27 = *((_DWORD *)v23 + 10);
          if (v27 < 1)
          {
            v56[0] = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v48[0] + 1) + 8 * v18) + 24 * v19 + 8) + 16);
            v46[0] = v56;
            v32 = std::__tree<std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>,std::__map_value_compare<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>,std::less<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>,true>,std::allocator<std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>&&>,std::tuple<>>(&v51, v56, (uint64_t)&std::piecewise_construct, v46);
            ++*((_DWORD *)v32 + 10);
            v46[0] = v46;
            v46[1] = v46;
            v47 = 0;
            v56[0] = v20;
            v33 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 3, v56);
            if (v33)
            {
              v35 = (unint64_t **)v33[3];
              v34 = v33[4];
              while (v35 != (unint64_t **)v34)
              {
                v36 = *v35;
                v45 = *v35;
                v56[0] = &v45;
                v37 = *((_DWORD *)std::__tree<std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>,std::__map_value_compare<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>,std::less<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>,true>,std::allocator<std::__value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>&&>,std::tuple<>>(&v51, &v45, (uint64_t)&std::piecewise_construct, v56)+ 10);
                if (v37)
                {
                  if (v37 == 1)
                  {
                    std::__list_imp<ZinIrSection *>::clear(v46);
                    std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::~deque[abi:ne180100](v48);
                    v42 = 0;
                    goto LABEL_61;
                  }
                }
                else
                {
                  v38 = operator new(0x18uLL);
                  v38[1] = v46;
                  v38[2] = v36;
                  v39 = v46[0];
                  *v38 = v46[0];
                  v39[1] = v38;
                  v46[0] = v38;
                  ++v47;
                }
                ++v35;
              }
            }
            if (v47)
              std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::push_back(v48, (uint64_t)v46);
            std::__list_imp<ZinIrSection *>::clear(v46);
          }
          else
          {
            if (v27 == 1)
            {
              *((_DWORD *)v23 + 10) = 2;
              std::list<std::shared_ptr<ZinMirUnit>>::emplace_front<std::shared_ptr<ZinMirUnit> const&>((uint64_t)a2, v20);
              v16 = *((_QWORD *)&v48[0] + 1);
              v28 = *((_QWORD *)&v49 + 1) + v49 - 1;
              v18 = v28 / 0xAA;
              v19 = v28 % 0xAA;
            }
            v29 = *(_QWORD *)(v16 + 8 * v18) + 24 * v19;
            v30 = *(uint64_t **)(v29 + 8);
            v31 = *v30;
            *(_QWORD *)(v31 + 8) = v30[1];
            *(_QWORD *)v30[1] = v31;
            --*(_QWORD *)(v29 + 16);
            operator delete(v30);
            if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v48[0] + 1)
                                        + 8 * ((*((_QWORD *)&v49 + 1) + (_QWORD)v49 - 1) / 0xAAuLL))
                            + 24 * ((*((_QWORD *)&v49 + 1) + (_QWORD)v49 - 1) % 0xAAuLL)
                            + 16))
              std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::pop_back(v48);
          }
        }
        std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::~deque[abi:ne180100](v48);
        v40 = (uint64_t *)v13[1];
        if (v40)
        {
          do
          {
            v41 = v40;
            v40 = (uint64_t *)*v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            v41 = (uint64_t *)v13[2];
            v9 = *v41 == (_QWORD)v13;
            v13 = v41;
          }
          while (!v9);
        }
        v13 = v41;
        v14 = 0uLL;
      }
      while (v41 != (uint64_t *)&v54);
    }
    v42 = 1;
LABEL_61:
    std::__list_imp<ZinIrSection *>::clear(v50);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v51, v52[0]);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v53, v54);
  return v42;
}

void sub_2070594DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28)
{
  uint64_t v28;

  std::__list_imp<ZinIrSection *>::clear(&a14);
  std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::~deque[abi:ne180100](&a17);
  std::__list_imp<ZinIrSection *>::clear(&a24);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a27, a28);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v28 - 136, *(_QWORD **)(v28 - 128));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,HazardNodeCompare,std::allocator<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,HazardNodeCompare,std::allocator<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::__find_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,HazardNodeCompare,std::allocator<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::__find_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!HazardNodeCompare::operator()(v7, *a3, v4[4]))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!HazardNodeCompare::operator()(v7, v8[4], *a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (uint64_t *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  result = std::construct_at[abi:ne180100]<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>*>(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2070599D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::construct_at[abi:ne180100]<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>*>(uint64_t *a1, _QWORD *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  std::list<ZinIrOpLayer *>::splice((uint64_t)a1, a1, a2);
  return a1;
}

_QWORD *std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>::list(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    v5 = 0;
    v6 = 8 * a3;
    v7 = a1;
    do
    {
      v8 = operator new(0x18uLL);
      v9 = *(_QWORD *)(a2 + 8 * v5);
      v8[1] = a1;
      v8[2] = v9;
      *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      v7 = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_207059AD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<ZinIrSection *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (_QWORD *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  result = std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>::list(v8, a2);
  ++a1[5];
  return result;
}

_QWORD *std::list<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_207059C1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<ZinIrSection *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::hash<std::shared_ptr<ZinIrHazardNode>>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,std::hash<std::shared_ptr<ZinIrHazardNode>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrHazardNode>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<ZinIrHazardNode> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x28uLL);
  v30[0] = v16;
  v30[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v16[4] = 0;
  v31 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v30[0] = *v27;
    *v27 = v30[0];
  }
  else
  {
    *(_QWORD *)v30[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v30[0])
    {
      v28 = *(_QWORD *)(*(_QWORD *)v30[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v28 >= v10)
          v28 %= v10;
      }
      else
      {
        v28 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v30[0];
    }
  }
  v13 = (_QWORD *)v30[0];
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return v13;
}

void sub_207059ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::hash<std::shared_ptr<ZinIrHazardNode>>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrHazardNode>,std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>,std::equal_to<std::shared_ptr<ZinIrHazardNode>>,std::hash<std::shared_ptr<ZinIrHazardNode>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrHazardNode>,long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::shared_ptr<ZinMirUnit>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::allocator<std::shared_ptr<ZinMirUnit>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,int>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,int>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>&&>,std::tuple<>>(uint64_t a1, unint64_t **a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = **a2;
  v8 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (*(_QWORD *)v14[2] == v7)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  *((_DWORD *)v14 + 6) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    v18 = 1;
    if (v11 >= 3)
      v18 = (v11 & (v11 - 1)) != 0;
    v19 = v18 | (2 * v11);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v21);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11)
        v24 %= v11;
    }
    else
    {
      v24 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20705A1D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>&&>,std::tuple<>>(uint64_t a1, unint64_t **a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t ***v13;
  uint64_t **i;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v7 = **a2;
  v8 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t **)*i)
      {
        v15 = (unint64_t)i[1];
        if (v15 == v10)
        {
          if (*i[2] == v7)
            return i;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = a1 + 16;
  v17 = (char *)operator new(0x40uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  *((_QWORD *)v17 + 2) = **a4;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *((_DWORD *)v17 + 14) = 1065353216;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11)
          v25 %= v11;
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (uint64_t **)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20705A478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::unordered_set<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::__erase_unique<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(_QWORD *a1, unint64_t **a2)
{
  uint64_t **result;
  _BYTE v4[24];

  result = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::find<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (uint64_t **)1;
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__map_value_compare<std::shared_ptr<ZinIrHazardNode>,std::__value_type<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::less<std::shared_ptr<ZinIrHazardNode>>,true>,std::allocator<std::__value_type<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrHazardNode>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<ZinIrHazardNode> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = v11;
    v13 = (*a4)[1];
    v11[4] = **a4;
    v11[5] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v11[6] = 0;
    v11[7] = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
  }
  return (uint64_t **)v12;
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void ZinMirL2HazardAnalysis::CreateHazardNodes()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  int v6;

  OUTLINED_FUNCTION_7_7();
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      OUTLINED_FUNCTION_2_7(p_shared_owners);
    while (v6);
    if (!v5)
    {
      OUTLINED_FUNCTION_5_3();
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
  OUTLINED_FUNCTION_6_3();
}

void ZinMirL2HazardAnalysis::CreateHazardNodes(uint8_t *buf, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(_QWORD *)a2 + 24);
  if (*(char *)(*(_QWORD *)a2 + 47) < 0)
    v3 = (_QWORD *)*v3;
  *(_DWORD *)buf = 136315138;
  *a3 = v3;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Engine layer %s has invalid L2 source", buf, 0xCu);
}

void ZinMirL2HazardAnalysis::OptimizeL2DepWithPositiveOffset(_QWORD *a1)
{
  unint64_t *v1;
  uint64_t v2;
  int v3;

  if (*a1)
  {
    v1 = (unint64_t *)(*a1 + 8);
    do
      OUTLINED_FUNCTION_2_7(v1);
    while (v3);
    if (!v2)
    {
      OUTLINED_FUNCTION_0_3();
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_4_0();
}

void ZinMirL2HazardAnalysis::SetL2HazardBits(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: (RAW) Dst read node cannot have Rslt operand type", a1);
}

void ZinMirL2HazardAnalysis::TryDependencyBitSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Trying to set dependency bit for invalid L2 source", v3);
}

__int128 *ZinIrHalM9::GetParams(ZinIrHalM9 *this)
{
  unsigned __int8 v1;
  _OWORD v3[2];
  int64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  _OWORD v9[2];
  _OWORD v10[3];
  int v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  int v15;
  int64x2_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalM9::GetParams(void)const::ZinIrHalM9Parameters = xmmword_207AB3EC0;
    dword_254528F70 = 8;
    unk_254528F78 = xmmword_207A895F0;
    unk_254528F88 = xmmword_207A7D330;
    unk_254528F98 = xmmword_207A7D340;
    unk_254528FA8 = xmmword_207A7D350;
    unk_254528FB8 = xmmword_207A7D360;
    unk_254528FC8 = xmmword_207A7D340;
    unk_254528FD8 = vdupq_n_s64(1uLL);
    unk_254528FE8 = xmmword_207A89600;
    unk_254528FF8 = xmmword_207A89610;
    unk_254529008 = unk_254528FD8;
    unk_254529018 = vdupq_n_s64(4uLL);
    qword_254529028 = 1;
    xmmword_254529030 = xmmword_207AB3EE0;
    unk_254529040 = unk_207AB3EF0;
    xmmword_254529050 = xmmword_207AB3EE0;
    unk_254529060 = unk_207AB3EF0;
    qword_254529080 = 4;
    xmmword_254529070 = xmmword_207AB3F00;
    xmmword_254529088 = xmmword_207A89620;
    xmmword_254529098 = xmmword_207A7D3C0;
    xmmword_2545290A8 = xmmword_207A7D3C0;
    xmmword_2545290B8 = unk_254528FD8;
    xmmword_2545290C8 = xmmword_207A7D3D0;
    xmmword_2545290D8 = xmmword_207A7D3E0;
    xmmword_2545290E8 = xmmword_207A89630;
    xmmword_2545290F8 = xmmword_207AB3ED0;
    xmmword_254529108 = xmmword_207A7D410;
    xmmword_254529118 = xmmword_207A7D420;
    xmmword_254529128 = xmmword_207A89640;
    xmmword_254529138 = xmmword_207A89650;
    xmmword_254529148 = xmmword_207A89660;
    xmmword_254529158 = xmmword_207A7D460;
    xmmword_254529168 = xmmword_207A7F3B0;
    xmmword_254529178 = xmmword_207A7F3C0;
    xmmword_254529188 = xmmword_207A89670;
    xmmword_254529198 = (__int128)vdupq_n_s64(0x20uLL);
    xmmword_2545291A8 = xmmword_207A7D4A0;
    qword_2545291C8 = 0;
    xmmword_2545291B8 = 0u;
    xmmword_2545291D0 = xmmword_207A7D4B0;
    word_2545291E0 = 257;
    xmmword_2545291E8 = xmmword_207A7D4C0;
    xmmword_2545291F8 = xmmword_207A7D4D0;
    xmmword_254529208 = xmmword_207A7D4E0;
    qword_254529218 = 0x10000;
    byte_254529220 = 8;
    xmmword_254529228 = xmmword_207A7D4F0;
    dword_254529238 = 520097776;
    qword_25452923C = 0xFFFFFFEB0000000BLL;
    xmmword_254529248 = xmmword_207A89680;
    xmmword_254529258 = xmmword_207A89690;
    xmmword_254529268 = xmmword_207A7D520;
    v16 = vdupq_n_s64(8uLL);
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_254529278, (uint64_t)&v16, 1uLL);
    xmmword_254529290 = xmmword_207A7D530;
    unk_2545292A0 = xmmword_207A7D540;
    xmmword_2545292B0 = (__int128)vdupq_n_s64(0x20uLL);
    unk_2545292C0 = xmmword_207A7D370;
    xmmword_2545292D0 = (__int128)vdupq_n_s64(8uLL);
    unk_2545292E0 = xmmword_207A7D550;
    qword_2545292F0 = 1;
    unk_2545292F8 = 0u;
    unk_254529308 = 0u;
    unk_254529318 = 0u;
    unk_254529328 = 0u;
    unk_254529338 = 0u;
    unk_254529348 = 0u;
    unk_254529358 = 0u;
    unk_254529368 = xmmword_207A7F3C0;
    unk_254529378 = xmmword_207A7D4F0;
    xmmword_254529388 = 0u;
    xmmword_254529398 = 0u;
    qword_2545293A8 = 12;
    word_2545293B0 = 257;
    dword_2545293B2 = 0;
    byte_2545293B6 = 0;
    dword_2545293B7 = 1;
    byte_2545293BB = 1;
    xmmword_2545293BC = 0u;
    dword_2545293CC = 0;
    byte_2545293D0 = 1;
    dword_2545293D1 = 0;
    byte_2545293D5 = 1;
    word_2545293DA = 0;
    dword_2545293D6 = 0;
    dword_2545293DC = 257;
    xmmword_2545293E0 = xmmword_207A7D5D0;
    unk_2545293F0 = xmmword_207A7D5E0;
    qword_254529400 = 40;
    *(_QWORD *)((char *)&xmmword_254529408 + 13) = 0;
    xmmword_254529408 = 0u;
    dword_25452941D = 1;
    xmmword_254529428 = 0u;
    dword_254529438 = 0;
    word_25452943C = 1;
    byte_25452943E = 1;
    qword_25452943F = 0;
    byte_254529447 = 0;
    dword_254529448 = 65793;
    word_25452944C = 0;
    byte_25452944E = 1;
    dword_25452944F = 0;
    byte_254529453 = 1;
    dword_254529454 = 0;
    word_254529458 = 0;
    qword_254529460 = 128;
    unk_254529468 = -1;
    qword_254529470 = -1;
    word_254529478 = 0;
    dword_25452947C = 0;
    word_254529480 = 257;
    *(uint64_t *)((char *)&qword_254529482 + 7) = 0;
    qword_254529482 = 0;
    dword_254529491 = 1542;
    byte_254529495 = 1;
    dword_254529496 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_2545294A0, "None");
    qword_2545294B8 = 0;
    dword_2545294C4 = 0;
    unk_2545294C8 = 0;
    dword_2545294C0 = 1071225242;
    unk_2545294D0 = xmmword_207A7D5F0;
    unk_2545294E0 = vdupq_n_s64(0x40uLL);
    unk_2545294F0 = xmmword_207A7D530;
    qword_254529500 = 8;
    byte_254529508 = 0;
    unk_25452950C = 1048576000;
    byte_254529514 = 0;
    v14 = 0x200000001;
    v15 = 4;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_254529518, &v14, 3uLL);
    v12 = xmmword_207AB3F18;
    v13[0] = unk_207AB3F28;
    *(_OWORD *)((char *)v13 + 12) = unk_207AB3F34;
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_254529530, &v12, 0xBuLL);
    v11 = 7;
    v10[0] = xmmword_207AB3F44;
    v10[1] = unk_207AB3F54;
    v10[2] = xmmword_207AB3F64;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_254529548, v10, 0xDuLL);
    v8[0] = xmmword_207AB3F78;
    v8[1] = unk_207AB3F88;
    v9[0] = xmmword_207AB3F98;
    *(_OWORD *)((char *)v9 + 12) = *(__int128 *)((char *)&xmmword_207AB3F98 + 12);
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_254529560, v8, 0xFuLL);
    xmmword_2545295A8 = 0u;
    unk_2545295B8 = 0u;
    unk_2545295D0 = xmmword_207AB3FB8;
    qword_254529588 = 0;
    qword_254529580 = 0;
    qword_254529578 = (uint64_t)&qword_254529580;
    word_254529590 = 0;
    byte_254529592 = 1;
    *(_DWORD *)algn_254529593 = 0;
    qword_254529598 = 0;
    dword_2545295A0 = 0;
    word_2545295C8 = 1;
    unk_2545295E0 = unk_207AB3FC8;
    qword_2545295F0 = 8;
    xmmword_2545295F8 = xmmword_207A896A0;
    v7 = 0x41B7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_254529608, &v7, 1uLL);
    v6 = 0x41B1E1A300000000;
    std::vector<double>::vector[abi:ne180100](&qword_254529620, &v6, 1uLL);
    v5 = 0x41D5DC2930000000;
    std::vector<double>::vector[abi:ne180100](&qword_254529638, &v5, 1uLL);
    v4 = vdupq_n_s64(0x41B7D78400000000uLL);
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_254529650, (double *)v4.i64, 1);
    xmmword_254529668 = xmmword_207A7D640;
    v3[0] = xmmword_207AB3FE0;
    *(_OWORD *)((char *)v3 + 12) = *(__int128 *)((char *)&xmmword_207AB3FE0 + 12);
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_254529678, v3, 7uLL);
    xmmword_254529690 = xmmword_207A7D4F0;
    xmmword_2545296A0 = xmmword_207A7D650;
    qword_2545296B0 = 64;
    word_2545296B8 = 256;
    dword_254529770 = 0;
    word_254529774 = 0;
    qword_254529790 = 0;
    byte_254529798 = 0;
    qword_2545297A0 = 0;
    byte_2545297A8 = 0;
    unk_2545296BA = 0;
    unk_2545296C2 = 0;
    dword_254529768 = 0;
    xmmword_2545296C8 = 0u;
    unk_2545296D8 = 0u;
    xmmword_2545296E8 = 0u;
    unk_2545296F8 = 0u;
    xmmword_254529708 = 0u;
    unk_254529718 = 0u;
    xmmword_254529728 = 0u;
    unk_254529738 = 0u;
    xmmword_254529748 = 0u;
    unk_254529758 = 0u;
    byte_254529788 = 0;
    xmmword_254529778 = 0u;
    word_2545297A9 = 257;
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalM9::GetParams(void)const::ZinIrHalM9Parameters, &dword_2069AB000);
  }
  return &ZinIrHalM9::GetParams(void)const::ZinIrHalM9Parameters;
}

void sub_20705AEFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  if (qword_254529638)
  {
    qword_254529640 = qword_254529638;
    operator delete((void *)qword_254529638);
  }
  if (qword_254529620)
  {
    qword_254529628 = qword_254529620;
    operator delete((void *)qword_254529620);
  }
  if (qword_254529608)
  {
    qword_254529610 = qword_254529608;
    operator delete((void *)qword_254529608);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v1 + 24, *(_QWORD **)(v1 + 32));
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    qword_254529568 = *(_QWORD *)v1;
    operator delete(v4);
  }
  if (qword_254529548)
  {
    qword_254529550 = qword_254529548;
    operator delete((void *)qword_254529548);
  }
  if (qword_254529530)
  {
    qword_254529538 = qword_254529530;
    operator delete((void *)qword_254529530);
  }
  if (qword_254529518)
  {
    qword_254529520 = qword_254529518;
    operator delete((void *)qword_254529518);
  }
  if (byte_2545294B7 < 0)
    operator delete((void *)qword_2545294A0);
  if (qword_254529278)
  {
    qword_254529280 = qword_254529278;
    operator delete((void *)qword_254529278);
  }
  _Unwind_Resume(a1);
}

void sub_20705B040()
{
  JUMPOUT(0x20705B014);
}

void sub_20705B048()
{
  JUMPOUT(0x20705B02CLL);
}

uint64_t ZinIrRegSpill::ZinIrRegSpill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a5;
  std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::set[abi:ne180100]((uint64_t *)(a1 + 24), a4);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_BYTE *)(a1 + 88) = a7;
  *(_QWORD *)(a1 + 96) = a6;
  return a1;
}

BOOL ZinIrRegSpill::IsStressTestMode(ZinIrRegSpill *this, const ZinIrCompilerParameters *a2)
{
  uint64_t v2;
  int v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((unsigned __int8 *)this + 239);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)this + 28);
  if (v2 != 15)
    return 0;
  v6 = (uint64_t *)*((_QWORD *)this + 27);
  v4 = (char *)this + 216;
  v5 = v6;
  if (v3 >= 0)
    v7 = (uint64_t *)v4;
  else
    v7 = v5;
  v8 = *v7;
  v9 = *(uint64_t *)((char *)v7 + 7);
  return v8 == 0x6572646568636163 && v9 == 0x6574697277646165;
}

uint64_t ZinIrRegSpill::Run(ZinIrLocalRegAlloc **this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  ZinIrRegSpill::InitSpillCandidates((ZinIrRegSpill *)this);
  v2 = ZinIrRegSpill::ClearCandidateL2Symbols((ZinIrRegSpill *)this);
  if ((_DWORD)v2)
  {
    v3 = v2;
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinIrRegSpill::Run(v4, v5, v6, v7, v8, v9, v10, v11);
    return v3;
  }
  v12 = ZinIrRegSpill::DoSpillOnCandidates((ZinIrRegSpill *)this);
  if ((_DWORD)v12)
  {
    v3 = v12;
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinIrRegSpill::Run(v13, v14, v15, v16, v17, v18, v19, v20);
    return v3;
  }
  v21 = ZinIrLocalRegAlloc::LowerKernelAfterChannelAssignmentParamUpdate(this[2], 0);
  if ((_DWORD)v21)
  {
    v3 = v21;
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinIrRegSpill::Run(v22, v23, v24, v25, v26, v27, v28, v29);
    return v3;
  }
  v30 = ZinIrRegSpill::VerifyL2Symbols((ZinIrRegSpill *)this);
  if ((_DWORD)v30)
  {
    v3 = v30;
    v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v31)
      ZinIrRegSpill::Run(v31, v32, v33, v34, v35, v36, v37, v38);
    return v3;
  }
  return ZinIrRegSpill::VerifyChainSymbols((ZinIrRegSpill *)this);
}

uint64_t ZinIrRegSpill::InitSpillCandidates(ZinIrRegSpill *this)
{
  _QWORD *v1;
  uint64_t **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  ZinIrTensor *v6;
  void *v7;
  ZinIrTensor *v8;
  ZinIrTensor *v9;
  _BOOL4 v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *__p[3];
  ZinIrTensor *v20[3];
  void *v21;
  void *v22;
  ZinIrTensor *v23;

  if (*((_BYTE *)this + 88))
  {
    v1 = (_QWORD *)((char *)this + 32);
    v2 = (uint64_t **)((char *)this + 24);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
    *(v1 - 1) = v1;
    *v1 = 0;
    v1[1] = 0;
    v3 = *(v1 - 3);
    v4 = *(_QWORD **)v3;
    v5 = *(_QWORD **)(v3 + 8);
    while (1)
    {
      if (v4 == v5)
        return 0;
      v6 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, 0, 0);
      if (!ZinIrTensor::HasParent(v6))
        break;
LABEL_21:
      ++v4;
    }
    v23 = v6;
    ZinIrTensor::GetSymbols(v6, &v21);
    v7 = v21;
    if (v21 == v22)
    {
      v10 = 1;
      if (!v21)
      {
LABEL_19:
        if (v10)
          std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v2, (uint64_t *)&v23, (uint64_t *)&v23);
        goto LABEL_21;
      }
LABEL_18:
      v22 = v7;
      operator delete(v7);
      goto LABEL_19;
    }
    ZinIrTensor::GetSymbols(v23, v20);
    v8 = v20[0];
    if (*(_QWORD *)v20[0])
    {
      ZinIrTensor::GetSymbols(v23, __p);
      v10 = ZinIrSymbol::GetMemType(*(ZinIrSymbol **)__p[0]) == 2
         && ZinIrRegSpill::IsQualifiedForSpill(v6, v9);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v8 = v20[0];
      if (!v20[0])
      {
LABEL_17:
        v7 = v21;
        if (!v21)
          goto LABEL_19;
        goto LABEL_18;
      }
    }
    else
    {
      v10 = 0;
    }
    v20[1] = v8;
    operator delete(v8);
    goto LABEL_17;
  }
  v11 = (uint64_t **)*((_QWORD *)this + 1);
  v12 = *v11;
  v13 = v11[1];
  if (*v11 != v13)
  {
    v14 = (uint64_t **)((char *)this + 24);
    do
    {
      v15 = *v12;
      v20[0] = 0;
      v20[0] = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
      if (!ZinIrTensor::HasParent(v20[0]))
      {
        ZinIrTensor::GetSymbols((_QWORD *)v20[0], &v21);
        v16 = v21;
        v17 = v22;
        if (v21)
        {
          v22 = v21;
          operator delete(v21);
        }
        if (v16 == v17)
          std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v14, (uint64_t *)v20, (uint64_t *)v20);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  return 0;
}

void sub_20705B3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrRegSpill::ClearCandidateL2Symbols(ZinIrRegSpill *this)
{
  char *v2;
  _QWORD **v3;
  ZinIrTensor *RootTensor;
  uint64_t v5;
  ZinIrSymbol **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD *v21[2];

  v2 = (char *)this + 24;
  std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::set[abi:ne180100]((uint64_t *)&v20, (uint64_t)this + 24);
  v3 = v20;
  if (v20 == v21)
  {
LABEL_13:
    v7 = 0;
  }
  else
  {
    while (1)
    {
      RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v3[4]);
      v5 = *((_QWORD *)RootTensor + 13);
      if (v5)
      {
        v6 = *(ZinIrSymbol ***)(v5 + 40);
        if (v6 != *(ZinIrSymbol ***)(v5 + 48))
        {
          if (*v6)
          {
            if (ZinIrSymbol::GetMemType(*v6) == 2)
            {
              v7 = ZinIrRegSpill::SpillResidentTensor((uint64_t)this, (uint64_t)RootTensor, (uint64_t)v2);
              if ((_DWORD)v7)
                break;
            }
          }
        }
      }
      v8 = v3[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v3[2];
          v10 = *v9 == v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
      if (v9 == v21)
        goto LABEL_13;
    }
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinIrRegSpill::ClearCandidateL2Symbols(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
  return v7;
}

void sub_20705B528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRegSpill::DoSpillOnCandidates(ZinIrRegSpill *this)
{
  uint64_t **v2;
  _QWORD **v3;
  ZinIrTensor *v4;
  ZinIrTensor *v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  uint64_t *v9;
  ZinIrTensor *v10;
  uint64_t DMABuffers;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ZinIrRegSpill *RootTensor;
  ZinIrRegSpill *v30;
  _QWORD **v31;
  _QWORD *v32[2];

  v2 = (uint64_t **)((char *)this + 24);
  std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::set[abi:ne180100]((uint64_t *)&v31, (uint64_t)this + 24);
  v3 = v31;
  if (v31 == v32)
    goto LABEL_13;
  do
  {
    v4 = (ZinIrTensor *)v3[4];
    RootTensor = 0;
    v30 = v4;
    RootTensor = ZinIrTensor::GetRootTensor(v4);
    if (!ZinIrRegSpill::IsQualifiedForSpill(RootTensor, v5))
    {
      v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v20)
        ZinIrRegSpill::DoSpillOnCandidates(v20, v21, v22, v23, v24, v25, v26, v27);
      DMABuffers = 3;
      goto LABEL_20;
    }
    if (v30 != RootTensor)
    {
      std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>(v2, (uint64_t *)&v30);
      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v2, (uint64_t *)&RootTensor, (uint64_t *)&RootTensor);
    }
    v6 = v3[1];
    if (v6)
    {
      do
      {
        v7 = (_QWORD **)v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD **)v3[2];
        v8 = *v7 == v3;
        v3 = v7;
      }
      while (!v8);
    }
    v3 = v7;
  }
  while (v7 != v32);
  do
  {
LABEL_13:
    if (!*((_QWORD *)this + 5))
    {
      DMABuffers = 0;
      goto LABEL_20;
    }
    v9 = (uint64_t *)*((_QWORD *)this + 3);
    v10 = (ZinIrTensor *)v9[4];
    std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(v2, v9);
    operator delete(v9);
    DMABuffers = ZinIrRegSpill::SpillAndAllocateDMABuffers(this, v10);
  }
  while (!(_DWORD)DMABuffers);
  v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v12)
    ZinIrRegSpill::DoSpillOnCandidates(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_20:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v31, v32[0]);
  return DMABuffers;
}

void sub_20705B69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRegSpill::VerifyL2Symbols(ZinIrRegSpill *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD **)this;
  v6[0] = &off_24C004F08;
  v7 = v6;
  v2 = ZinIrControlFlowGraph::TraverseForward(v1, (uint64_t)v6, 1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_20705B75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrRegSpill::VerifyChainSymbols(ZinIrRegSpill *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD **)this;
  v6[0] = &off_24C004F60;
  v7 = v6;
  v2 = ZinIrControlFlowGraph::TraverseForward(v1, (uint64_t)v6, 1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_20705B838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL ZinIrRegSpill::IsQualifiedForSpill(ZinIrRegSpill *this, ZinIrTensor *a2)
{
  uint64_t v3;
  char v4;
  BOOL v5;
  _BOOL8 v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  int v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer *v13;
  uint64_t InputTensor;
  void *__p;
  char *v17;

  v3 = (*(uint64_t (**)(_QWORD, ZinIrRegSpill *))(**((_QWORD **)this + 12) + 56))(*((_QWORD *)this + 12), this);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 0;
  if (!v5)
    return 0;
  ZinIrTensor::GetTensorFamily(this, (uint64_t)&__p);
  v7 = (char *)__p;
  v8 = v17;
  if (__p == v17)
  {
    v6 = 1;
    if (!__p)
      return v6;
    goto LABEL_20;
  }
  while (2)
  {
    v9 = *(_QWORD **)(*(_QWORD *)v7 + 96);
    v10 = *(_DWORD *)(v9[8] + 8);
    v6 = v10 != 33;
    if (v10 != 33)
    {
      v11 = (ZinIrOpLayer **)v9[14];
      v12 = (ZinIrOpLayer **)v9[15];
      while (v11 != v12)
      {
        v13 = *v11;
        if (ZinIrOpLayer::IsNELayer(*v11)
          && *((_QWORD *)v13 + 12) - *((_QWORD *)v13 + 11) == 16
          && (InputTensor = ZinIrOpLayer::GetInputTensor(v13, 1uLL),
              !(*(unsigned int (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v13 + 200))(v13, InputTensor))
          || *(_DWORD *)(*((_QWORD *)v13 + 8) + 8) == 81 && *((_QWORD *)v13 + 57))
        {
          v6 = 0;
          goto LABEL_19;
        }
        ++v11;
      }
      v7 += 8;
      if (v7 != v8)
        continue;
    }
    break;
  }
LABEL_19:
  v7 = (char *)__p;
  if (__p)
  {
LABEL_20:
    v17 = v7;
    operator delete(v7);
  }
  return v6;
}

void sub_20705B9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrRegSpill::InsertL2Copy(ZinIrRegSpill *this, ZinPELayer *a2, unint64_t a3)
{
  int *v5;
  uint64_t InputTensor;
  uint64_t v7;
  char v8;
  char v9;
  size_t v10;
  std::string *v11;
  char *v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  __n128 v20;
  uint64_t v21;
  uint64_t **v22;
  int v23;
  ZinIrOpLayer *v24;
  _QWORD *v25;
  ZinIrTensor *v26;
  uint64_t v27;
  uint64_t v29;
  ZinEngineLayerMirInfo *v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  unint64_t IndexOfMatchedIncomingLayer;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  ZinEngineLayerMirInfo *v47;
  void *__p[2];
  void *v49;
  _BYTE v50[172];
  _QWORD *v51;
  __int128 v52;
  int64_t v53;
  std::string v54;
  _QWORD v55[3];
  char v56;
  ZinPELayer *v57;
  _QWORD v58[3];
  _QWORD *v59;
  int *v60[2];
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v57 = a2;
  v5 = *(int **)(*((_QWORD *)a2 + 11) + 8 * a3);
  InputTensor = ZinIrOpLayer::GetInputTensor(a2, a3);
  v7 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v5 + 56))(v5, InputTensor);
  v9 = v8;
  if (*((char *)a2 + 47) >= 0)
    v10 = *((unsigned __int8 *)a2 + 47);
  else
    v10 = *((_QWORD *)a2 + 4);
  v11 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v10 + 1);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v54.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a2 + 47) >= 0)
      v12 = (char *)a2 + 24;
    else
      v12 = (char *)*((_QWORD *)a2 + 3);
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 95;
  v13 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v60, "spill_l2_copy");
  v14 = std::string::append(v13, "_xfm", 4uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v53 = v14->__r_.__value_.__r.__words[2];
  v52 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v53 >= 0)
    v16 = (const std::string::value_type *)&v52;
  else
    v16 = (const std::string::value_type *)v52;
  if (v53 >= 0)
    v17 = HIBYTE(v53);
  else
    v17 = *((_QWORD *)&v52 + 1);
  v18 = std::string::append(&v54, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v49 = (void *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = ZinObjectNameFactory::ZinObjectNameFactory(v55, __p);
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (v61 < 0)
    operator delete(v60[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  v21 = *((_QWORD *)v5 + 2);
  v22 = (uint64_t **)*((_QWORD *)v5 + 19);
  v23 = *(_DWORD *)((*(uint64_t (**)(int *, _QWORD, _QWORD, __n128))(*(_QWORD *)v5 + 32))(v5, 0, 0, v20)
                  + 88);
  v51 = 0;
  v50[0] = 0;
  v50[168] = 0;
  v24 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v21, (uint64_t)v55, (uint64_t)v5, v23, &v51, 0, (uint64_t)v50, 1.0);
  v25 = v51;
  v51 = 0;
  if (v25)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v51, v25);
  *(_QWORD *)&v52 = v24;
  v60[0] = v5;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
  v54.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v54);
  if ((ZinIrOpLayerGraph::InsertNodeBetween(v22, v24, (ZinIrOpLayer *)v5, a2, (ZinIrOpLayer ***)__p) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrRegSpill::InsertL2Copy();
    goto LABEL_33;
  }
  v26 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0, 0);
  if (ZinIrTensor::SetAllocationHint(v26, 1, 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrRegSpill::InsertL2Copy();
LABEL_33:
    v27 = 0;
    goto LABEL_34;
  }
  v29 = *((_QWORD *)this + 12);
  v30 = (ZinEngineLayerMirInfo *)operator new();
  ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v30, *(int *)(v29 + 8));
  v60[0] = (int *)v30;
  if (ZinNELayer::ComputeMirInfo(v24, *((_QWORD *)this + 12), (char **)v60, 1))
    ZinAssertImpl("Failed to compute MIR info");
  ZinMirL2Config::ZinMirSetFormats((ZinMirL2Config *)(v60[0] + 30), v24);
  ZinANELayer::SetMirInfo((uint64_t)v24, v60);
  ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(*((_QWORD *)v24 + 33) + 120), v24, 0);
  v31 = *((_QWORD *)v24 + 33);
  v32 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v24, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions(v24, (void **)&v54.__r_.__value_.__l.__data_);
  v33 = ZinMirL2Config::ZinMirSetWorkUnitShape(v31 + 120, v24, v32);
  if (v54.__r_.__value_.__r.__words[0])
  {
    v54.__r_.__value_.__l.__size_ = v54.__r_.__value_.__r.__words[0];
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if ((v33 & 1) == 0)
  {
    v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v39)
      ZinIrRegSpill::InsertL2Copy(v39, v40, v41, v42, v43, v44, v45, v46);
    v27 = 0;
    goto LABEL_54;
  }
  IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer((ZinIrOpLayerGraph *)v22, a2, (const ZinIrOpLayer *)v5);
  if (!v9)
    std::__throw_bad_optional_access[abi:ne180100]();
  ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)v22, (ZinIrOpLayerGraph *)v5, v24, (uint64_t)a2, 0xFFFFFFFFFFFFFFFFLL, IndexOfMatchedIncomingLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, v7);
  v54.__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  v35 = *(_QWORD **)this;
  v58[0] = &off_24BFFF7C8;
  v58[1] = &v52;
  v58[2] = &v54;
  v59 = v58;
  v36 = ZinIrControlFlowGraph::TraverseForward(v35, (uint64_t)v58, 1);
  v37 = v59;
  if (v59 == v58)
  {
    v38 = 4;
    v37 = v58;
    goto LABEL_51;
  }
  if (v59)
  {
    v38 = 5;
LABEL_51:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  if (v36)
    ZinAssertImpl("Error: Cannot set schedule for layers in graph.");
  ZinIrLocalRegAlloc::UpdateSymbolLiveRangeWithCacheCopy(*((ZinIrLocalRegAlloc **)this + 2), (ZinIrOpLayer *)v52, v54.__r_.__value_.__r.__words[0]);
  std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)this + 48, &v57, &v57);
  v27 = v52;
LABEL_54:
  v47 = (ZinEngineLayerMirInfo *)v60[0];
  v60[0] = 0;
  if (v47)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v47);
    MEMORY[0x20BD002F8]();
  }
LABEL_34:
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    v49 = __p[1];
    operator delete(__p[1]);
  }
  v55[0] = off_24C01FBB0;
  if (v56 < 0)
    operator delete((void *)v55[1]);
  return v27;
}

void sub_20705BEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;

  v50 = *(_QWORD **)(v47 + 128);
  if (v50 == v46)
  {
    v51 = 4;
    v50 = (_QWORD *)(v48 - 160);
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_6:
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v48 - 128), 0);
  if (__p)
    operator delete(__p);
  *(_QWORD *)(v47 + 56) = off_24C01FBB0;
  if (*(char *)(v48 - 177) < 0)
    operator delete(*(void **)(v47 + 64));
  _Unwind_Resume(a1);
}

BOOL ZinIrRegSpill::HasMismatchedDualInput(ZinIrRegSpill *this, ZinIrOpLayer *a2)
{
  uint64_t InputTensor;
  uint64_t v4;
  uint64_t v5;
  uint64_t Interleave;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  _BOOL4 v11;

  if (!ZinIrOpLayer::IsPELayer(this) || *((_QWORD *)this + 12) - *((_QWORD *)this + 11) != 16)
    return 0;
  InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  v4 = 1;
  v5 = ZinIrOpLayer::GetInputTensor(this, 1uLL);
  if (ZinTensorDimensionsEqual((_QWORD *)(InputTensor + 48), (_QWORD *)(v5 + 48)))
  {
    if (*(_DWORD *)(InputTensor + 88) == *(_DWORD *)(v5 + 88))
    {
      Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)InputTensor);
      v8 = v7;
      v9 = ZinIrTensor::GetInterleave((ZinIrTensor *)v5);
      if (v10)
        v11 = Interleave != v9;
      else
        v11 = v8 != 0;
      if (v8)
        return v11;
      else
        return v10 != 0;
    }
    else
    {
      return 1;
    }
  }
  return v4;
}

uint64_t ZinIrRegSpill::SpillAndAllocateDMABuffers(ZinIrRegSpill *this, ZinIrTensor *a2)
{
  void *v4;
  void *v5;
  ZinIrSection *Section;
  char *v7;
  char *v8;
  uint64_t v9;
  ZinANELayer *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  ZinIrOpLayer *v15;
  const ZinANELayer *v16;
  unint64_t v17;
  ZinNEBypassLayer *inserted;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48[2];
  void *__p;
  char *v50;
  ZinIrTensor *v51;

  v51 = a2;
  if (ZinIrTensor::HasParent(a2))
    ZinAssertImpl("Spiller: non-root tensor.");
  ZinIrTensor::GetSymbols(a2, &__p);
  v4 = __p;
  v5 = v50;
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v4 != v5)
    ZinAssertImpl("Spiller: symbol not freed.");
  Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetSection(*((_QWORD *)this + 2), 0, 4);
  if (!ZinIrLocalRegAlloc::AllocateNonResidentTensor(*((ZinIrLocalRegAlloc **)this + 2), v51, Section, 1))
    return 3;
  ZinIrTensor::GetTensorFamily(v51, (uint64_t)&__p);
  std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>((uint64_t **)(*((_QWORD *)this + 2) + 344), (uint64_t *)&v51);
  v7 = (char *)__p;
  v8 = v50;
  if (__p == v50)
  {
LABEL_28:
    v11 = ZinIrRegSpill::RevertL2DepOrChain((uint64_t)this, v51, (uint64_t **)this + 3);
    goto LABEL_35;
  }
  while (1)
  {
    v9 = *(_QWORD *)v7;
    v10 = *(ZinANELayer **)(*(_QWORD *)v7 + 96);
    if (ZinIrOpLayer::IsANELayer(v10))
    {
      v11 = ZinIrRegSpill::SpillWrite(this, v10);
      if ((_DWORD)v11)
      {
        v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v39)
          ZinIrRegSpill::SpillAndAllocateDMABuffers(v39, v40, v41, v42, v43, v44, v45, v46);
        goto LABEL_35;
      }
    }
    v48[0] = 0;
    v48[1] = 0;
    v47 = (uint64_t *)v48;
    v12 = (uint64_t *)*((_QWORD *)v10 + 14);
    v13 = (uint64_t *)*((_QWORD *)v10 + 15);
    if (v12 != v13)
    {
      do
      {
        std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v47, v48, v12, v12);
        ++v12;
      }
      while (v12 != v13);
      v14 = v47;
      if (v47 != (uint64_t *)v48)
        break;
    }
LABEL_27:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v47, v48[0]);
    v7 += 8;
    if (v7 == v8)
      goto LABEL_28;
  }
  while (1)
  {
    v15 = (ZinIrOpLayer *)v14[4];
    if (ZinIrOpLayer::IsANELayer(v15) && *((_QWORD *)v15 + 12) != *((_QWORD *)v15 + 11))
      break;
LABEL_21:
    v19 = (uint64_t *)v14[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (uint64_t *)v14[2];
        v21 = *v20 == (_QWORD)v14;
        v14 = v20;
      }
      while (!v21);
    }
    v14 = v20;
    if (v20 == (uint64_t *)v48)
      goto LABEL_27;
  }
  v16 = 0;
  while (1)
  {
    if (ZinIrOpLayer::GetInputTensor(v15, (unint64_t)v16) != v9)
      goto LABEL_20;
    if (!ZinIrRegSpill::NeedMemCopyCache(this, v15, v17, v51))
      break;
    inserted = (ZinNEBypassLayer *)ZinIrRegSpill::InsertL2Copy(this, v15, (unint64_t)v16);
    v11 = ZinIrRegSpill::SpillReadWithCopy(this, inserted, v15, v16);
    if ((_DWORD)v11)
    {
      v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v30)
        ZinIrRegSpill::SpillAndAllocateDMABuffers(v30, v31, v32, v33, v34, v35, v36, v37);
      goto LABEL_34;
    }
LABEL_20:
    v16 = (const ZinANELayer *)((char *)v16 + 1);
    if ((unint64_t)v16 >= (uint64_t)(*((_QWORD *)v15 + 12) - *((_QWORD *)v15 + 11)) >> 3)
      goto LABEL_21;
  }
  v11 = ZinIrRegSpill::SpillRead(this, v15, (unint64_t)v16);
  if (!(_DWORD)v11)
    goto LABEL_20;
  v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v22)
    ZinIrRegSpill::SpillAndAllocateDMABuffers(v22, v23, v24, v25, v26, v27, v28, v29);
LABEL_34:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v47, v48[0]);
LABEL_35:
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  return v11;
}

void sub_20705C410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrRegSpill::SpillWrite(ZinIrRegSpill *this, ZinANELayer *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  ZinIrTensor *RootTensor;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15[2];

  ZinIrLocalRegAlloc::FreeDMABuffers(*((ZinIrLocalRegAlloc **)this + 2), a2);
  v4 = (*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  while (1)
  {
    v5 = *(_QWORD *)(v4 + 104);
    if ((!v5
       || *(_DWORD *)(v5 + 96) != 1
       || ZinIrLocalRegAlloc::AllocateOutputDMACachedBuffer(*((ZinIrLocalRegAlloc **)this + 2), a2))
      && (ZinIrLocalRegAlloc::AllocateOptimizedDMABuffer(*((ZinIrLocalRegAlloc **)this + 2), a2) & 1) != 0)
    {
      break;
    }
    ZinIrLocalRegAlloc::FreeCachedDMAOutputBuffer(*((ZinIrLocalRegAlloc **)this + 2), (ZinEngineLayerMirInfo **)a2);
    ZinIrLocalRegAlloc::FreeDMABuffers(*((ZinIrLocalRegAlloc **)this + 2), a2);
    v15[0] = *((_QWORD *)a2 + 6);
    v15[1] = v15[0];
    v13 = 0;
    v14 = 0;
    v12 = &v13;
    if (ZinIrRegSpill::SpillResidentTensor((uint64_t)this, v15, (uint64_t)&v12))
    {
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v12, v13);
      return 3;
    }
    if (!v14)
      ZinAssertImpl("It should have rollbackable tensor");
    v6 = v12;
    if (v12 != &v13)
    {
      do
      {
        RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v6[4]);
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)this + 3, (uint64_t *)&RootTensor, (uint64_t *)&RootTensor);
        v7 = v6[1];
        if (v7)
        {
          do
          {
            v8 = (_QWORD **)v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD **)v6[2];
            v9 = *v8 == v6;
            v6 = v8;
          }
          while (!v9);
        }
        v6 = v8;
      }
      while (v8 != &v13);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v12, v13);
  }
  return 0;
}

void sub_20705C5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRegSpill::NeedMemCopyCache(ZinIrRegSpill *this, ZinIrOpLayer *a2, unint64_t a3, ZinIrTensor *a4)
{
  uint64_t result;
  uint64_t v8;
  ZinIrTensor *InputTensor;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v11;
  ZinIrTensor *v12;
  uint64_t Interleave;
  uint64_t v14;
  ZinIrOpLayer *v15;
  ZinIrOpLayer *v16;

  result = ZinIrOpLayer::IsPELayer(a2);
  if ((_DWORD)result)
  {
    v16 = a2;
    result = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 568))(a2);
    if ((_DWORD)result)
    {
      if ((*((_QWORD *)a2 + 25) && *((_QWORD *)a2 + 24) < 2uLL
         || !*(_BYTE *)(*((_QWORD *)this + 12) + 1252)
         && ((InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, 0),
              RootTensor = ZinIrTensor::GetRootTensor(InputTensor),
              v11 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, 1uLL),
              v12 = ZinIrTensor::GetRootTensor(v11),
              Interleave = ZinIrLocalRegAlloc::GetInterleave(*((ZinIrLocalRegAlloc **)this + 2), RootTensor),
              v14 = ZinIrLocalRegAlloc::GetInterleave(*((ZinIrLocalRegAlloc **)this + 2), v12),
              ZinIrRegSpill::HasMismatchedDualInput(a2, v15))
          || Interleave != v14))
        && (v8 = *((_QWORD *)a4 + 13)) != 0
        && *(_DWORD *)(v8 + 96) == 1)
      {
        return std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 6, &v16) == 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t ZinIrRegSpill::SpillReadWithCopy(ZinIrRegSpill *this, ZinNEBypassLayer *a2, ZinPELayer *a3, const ZinANELayer *a4)
{
  ZinIrLocalRegAlloc *v8;
  ZinIrTensor *v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  ZinIrTensor *RootTensor;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23[2];

  ZinIrLocalRegAlloc::FreeDMABuffers(*((ZinIrLocalRegAlloc **)this + 2), a3);
  ZinIrLocalRegAlloc::FreeInputDMABufferForL2CacheCopy(*((ZinIrLocalRegAlloc **)this + 2), a2);
  while (!ZinIrLocalRegAlloc::AllocateReadL2CacheCopyTensor(*((ZinIrLocalRegAlloc **)this + 2), a2, a3, a4)|| !ZinIrLocalRegAlloc::AllocateOptimizedDMABuffer(*((ZinIrLocalRegAlloc **)this + 2), a3)|| (ZinIrLocalRegAlloc::AllocateInputDMAbufferForL2CacheCopy(*((ZinIrLocalRegAlloc **)this + 2), a2) & 1) == 0)
  {
    v8 = (ZinIrLocalRegAlloc *)*((_QWORD *)this + 2);
    v9 = (ZinIrTensor *)(*(uint64_t (**)(ZinNEBypassLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(v8, v9);
    ZinIrLocalRegAlloc::FreeDMABuffers(*((ZinIrLocalRegAlloc **)this + 2), a3);
    ZinIrLocalRegAlloc::FreeDMABuffers(*((ZinIrLocalRegAlloc **)this + 2), a2);
    v10 = *((_QWORD *)a3 + 6);
    v23[0] = *((_QWORD *)a2 + 6);
    v23[1] = v10;
    v21 = 0;
    v22 = 0;
    v20 = &v21;
    if (ZinIrRegSpill::SpillResidentTensor((uint64_t)this, v23, (uint64_t)&v20))
    {
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21);
      return 3;
    }
    if (!v22)
      ZinAssertImpl("It should have rollbackable tensor");
    v11 = v20;
    if (v20 != &v21)
    {
      do
      {
        RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v11[4]);
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)this + 3, (uint64_t *)&RootTensor, (uint64_t *)&RootTensor);
        v12 = v11[1];
        if (v12)
        {
          do
          {
            v13 = (_QWORD **)v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD **)v11[2];
            v14 = *v13 == v11;
            v11 = v13;
          }
          while (!v14);
        }
        v11 = v13;
      }
      while (v13 != &v21);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21);
  }
  v16 = *(_QWORD *)(ZinIrOpLayer::GetInputTensor(a2, 0) + 104);
  if (!v16 || (v17 = *(uint64_t **)(v16 + 40), v17 == *(uint64_t **)(v16 + 48)))
    v18 = 0;
  else
    v18 = *v17;
  (*(void (**)(ZinNEBypassLayer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 456))(a2, 0, v18, *((_QWORD *)this + 12));
  return 0;
}

void sub_20705C8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRegSpill::SpillRead(ZinIrRegSpill *this, ZinANELayer *a2, unint64_t a3)
{
  uint64_t InputTensor;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD **v10;
  BOOL v11;
  ZinIrTensor *RootTensor;
  _QWORD **v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17[2];
  unsigned int v18;

  ZinIrLocalRegAlloc::FreeDMABuffers(*((ZinIrLocalRegAlloc **)this + 2), a2);
  InputTensor = ZinIrOpLayer::GetInputTensor(a2, a3);
  v18 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a2, a3, (int *)&v18))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrRegSpill::SpillRead();
    return 3;
  }
  else
  {
    while (1)
    {
      v7 = *(_QWORD *)(InputTensor + 104);
      if ((!v7
         || *(_DWORD *)(v7 + 96) != 1
         || ZinIrLocalRegAlloc::AllocateInputDMACachedBuffer(*((ZinIrLocalRegAlloc **)this + 2), a2, v18))
        && (ZinIrLocalRegAlloc::AllocateOptimizedDMABuffer(*((ZinIrLocalRegAlloc **)this + 2), a2) & 1) != 0)
      {
        break;
      }
      ZinIrLocalRegAlloc::FreeCachedDMAInputBuffer(*((_QWORD *)this + 2), (uint64_t)a2, v18);
      ZinIrLocalRegAlloc::FreeDMABuffers(*((ZinIrLocalRegAlloc **)this + 2), a2);
      v17[0] = *((_QWORD *)a2 + 6);
      v17[1] = v17[0];
      v15 = 0;
      v16 = 0;
      v14 = &v15;
      if (ZinIrRegSpill::SpillResidentTensor((uint64_t)this, v17, (uint64_t)&v14))
      {
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15);
        return 3;
      }
      if (!v16)
        ZinAssertImpl("It should have rollbackable tensor");
      v8 = v14;
      if (v14 != &v15)
      {
        do
        {
          RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v8[4]);
          std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)this + 3, (uint64_t *)&RootTensor, (uint64_t *)&RootTensor);
          v9 = v8[1];
          if (v9)
          {
            do
            {
              v10 = (_QWORD **)v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD **)v8[2];
              v11 = *v10 == v8;
              v8 = v10;
            }
            while (!v11);
          }
          v8 = v10;
        }
        while (v10 != &v15);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15);
    }
    return 0;
  }
}

void sub_20705CAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRegSpill::RevertL2DepOrChain(uint64_t a1, ZinIrTensor *a2, uint64_t **a3)
{
  uint64_t IsANELayer;
  ZinIrOpLayer ***v6;
  ZinIrOpLayer ***v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer *v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer *v12;
  ZinIrTensor *v13;
  ZinIrTensor *RootTensor;
  ZinIrTensor **v15;
  ZinIrTensor **v16;
  ZinIrTensor **v17;
  ZinIrTensor **v18;
  ZinIrTensor *v19;
  int v20;
  int v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t buf;
  char v48[7];
  ZinIrTensor **v49;
  ZinIrTensor **v50;
  ZinIrOpLayer ***v51;
  ZinIrTensor *v52;
  ZinANELayer *v53;
  ZinANELayer *v54;
  uint64_t *v55;
  _QWORD *v56[2];

  v56[0] = 0;
  v56[1] = 0;
  v55 = (uint64_t *)v56;
  ZinIrTensor::GetTensorFamily(a2, (uint64_t)&v51);
  v6 = v51;
  v7 = (ZinIrOpLayer ***)v52;
  if (v51 == (ZinIrOpLayer ***)v52)
  {
    v20 = 2;
    if (v51)
      goto LABEL_36;
    goto LABEL_37;
  }
  v53 = 0;
  v54 = 0;
LABEL_3:
  v8 = *v6;
  IsANELayer = (uint64_t)ZinIrRegSpill::IsL2DepOrChain((ZinIrRegSpill *)IsANELayer, *v6, &v54, &v53);
  if ((_DWORD)IsANELayer)
  {
    IsANELayer = ZinIrRegSpill::SpillL2DepOrChain(a1, &v54, &v53, &v55);
    if ((_DWORD)IsANELayer)
    {
      v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v22)
        goto LABEL_33;
      goto LABEL_34;
    }
  }
  v9 = v8[12];
  v11 = (ZinIrOpLayer **)*((_QWORD *)v9 + 14);
  v10 = (ZinIrOpLayer **)*((_QWORD *)v9 + 15);
  while (1)
  {
    if (v11 == v10)
    {
      if (++v6 != v7)
        goto LABEL_3;
      v20 = 2;
      goto LABEL_35;
    }
    v12 = *v11;
    if (ZinIrOpLayer::IsANELayer(*v11))
    {
      v13 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v13);
      if (ZinIrRegSpill::IsL2DepOrChain(RootTensor, (ZinIrOpLayer **)RootTensor, &v54, &v53))
      {
        if (ZinIrRegSpill::SpillL2DepOrChain(a1, &v54, &v53, &v55))
          break;
      }
    }
    IsANELayer = ZinIrOpLayer::IsANELayer(v12);
    if (!(_DWORD)IsANELayer)
      goto LABEL_27;
    IsANELayer = (uint64_t)(*(_QWORD *(**)(ZinIrTensor ***__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v12 + 512))(&v49, v12);
    v16 = v49;
    v15 = v50;
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if ((char *)v15 - (char *)v16 != 16)
      goto LABEL_27;
    IsANELayer = (uint64_t)(*(_QWORD *(**)(ZinIrTensor ***__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v12 + 512))(&v49, v12);
    v17 = v49;
    v18 = v50;
    if (v49 == v50)
    {
      v20 = 6;
      v21 = 1;
      if (v49)
        goto LABEL_25;
    }
    else
    {
      while (1)
      {
        v19 = ZinIrTensor::GetRootTensor(*v17);
        IsANELayer = (uint64_t)ZinIrRegSpill::IsL2DepOrChain(v19, (ZinIrOpLayer **)v19, &v54, &v53);
        if ((_DWORD)IsANELayer)
        {
          IsANELayer = ZinIrRegSpill::SpillL2DepOrChain(a1, &v54, &v53, &v55);
          if ((_DWORD)IsANELayer)
            break;
        }
        if (++v17 == v18)
        {
          v20 = 6;
          v21 = 1;
          goto LABEL_24;
        }
      }
      IsANELayer = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if ((_DWORD)IsANELayer)
        ZinIrRegSpill::RevertL2DepOrChain(&buf, v48);
      v21 = 0;
      v20 = 1;
LABEL_24:
      v17 = v49;
      if (v49)
      {
LABEL_25:
        v50 = v17;
        operator delete(v17);
      }
    }
    if (!v21)
      goto LABEL_35;
LABEL_27:
    ++v11;
  }
  v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (!v22)
    goto LABEL_34;
LABEL_33:
  ZinIrRegSpill::RevertL2DepOrChain(v22, v23, v24, v25, v26, v27, v28, v29);
LABEL_34:
  v20 = 1;
LABEL_35:
  v6 = v51;
  if (v51)
  {
LABEL_36:
    v52 = (ZinIrTensor *)v6;
    operator delete(v6);
  }
LABEL_37:
  if (v20 == 2)
  {
    v30 = v55;
    if (v55 == (uint64_t *)v56)
    {
LABEL_55:
      v31 = 0;
    }
    else
    {
      while (1)
      {
        v31 = ZinIrRegSpill::RevertL2DepOrChain(a1, v30[4], a3);
        if ((_DWORD)v31)
          break;
        v32 = (uint64_t *)v30[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (uint64_t *)v30[2];
            v34 = *v33 == (_QWORD)v30;
            v30 = v33;
          }
          while (!v34);
        }
        v30 = v33;
        if (v33 == (uint64_t *)v56)
        {
          v35 = v55;
          if (v55 != (uint64_t *)v56)
          {
            do
            {
              v51 = (ZinIrOpLayer ***)v35[4];
              if (!ZinIrTensor::HasParent((ZinIrTensor *)v51))
                std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(a3, (uint64_t *)&v51, (uint64_t *)&v51);
              v36 = (uint64_t *)v35[1];
              if (v36)
              {
                do
                {
                  v37 = v36;
                  v36 = (uint64_t *)*v36;
                }
                while (v36);
              }
              else
              {
                do
                {
                  v37 = (uint64_t *)v35[2];
                  v34 = *v37 == (_QWORD)v35;
                  v35 = v37;
                }
                while (!v34);
              }
              v35 = v37;
            }
            while (v37 != (uint64_t *)v56);
          }
          goto LABEL_55;
        }
      }
      v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v38)
        ZinIrRegSpill::RevertL2DepOrChain(v38, v39, v40, v41, v42, v43, v44, v45);
    }
  }
  else
  {
    v31 = 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v55, v56[0]);
  return v31;
}

void sub_20705CE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRegSpill::SpillResidentTensor(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  void *__p;
  uint64_t *v13;
  uint64_t v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  v5 = ZinIrLocalRegAlloc::FreeL2Symbol(*(ZinIrLocalRegAlloc **)(a1 + 16), a2, &__p);
  v6 = (uint64_t *)__p;
  if (v5)
  {
    v7 = 3;
  }
  else
  {
    v8 = v13;
    if (__p == v13)
      goto LABEL_13;
    do
    {
      std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a3, (_QWORD *)(a3 + 8), v6, v6);
      ++v6;
    }
    while (v6 != v8);
    v6 = v13;
    if (__p == v13)
    {
LABEL_13:
      v7 = 0;
    }
    else
    {
      v9 = (uint64_t *)((char *)__p + 8);
      do
      {
        v7 = ZinIrRegSpill::RevertL2DepOrChain(a1, (ZinIrTensor *)*(v9 - 1), (uint64_t **)a3);
        if ((_DWORD)v7)
          v10 = 1;
        else
          v10 = v9 == v6;
        ++v9;
      }
      while (!v10);
      v6 = (uint64_t *)__p;
    }
  }
  if (v6)
  {
    v13 = v6;
    operator delete(v6);
  }
  return v7;
}

void sub_20705CFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrRegSpill::SpillResidentTensor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ZinIrLocalRegAlloc *v5;
  uint64_t v6;
  ZinIrSymbol **v7;
  ZinIrSymbol *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  void *__p;
  uint64_t *v16;
  uint64_t v17;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = *(ZinIrLocalRegAlloc **)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 104);
  if (!v6 || (v7 = *(ZinIrSymbol ***)(v6 + 40), v7 == *(ZinIrSymbol ***)(v6 + 48)))
    v8 = 0;
  else
    v8 = *v7;
  ZinIrLocalRegAlloc::FreeL2Symbol(v5, v8, &__p);
  v9 = (uint64_t *)__p;
  v10 = v16;
  if (__p == v16)
    goto LABEL_16;
  do
  {
    std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a3, (_QWORD *)(a3 + 8), v9, v9);
    ++v9;
  }
  while (v9 != v10);
  v9 = v16;
  if (__p == v16)
  {
LABEL_16:
    v12 = 0;
    if (!v9)
      return v12;
LABEL_17:
    v16 = v9;
    operator delete(v9);
    return v12;
  }
  v11 = (uint64_t *)((char *)__p + 8);
  do
  {
    v12 = ZinIrRegSpill::RevertL2DepOrChain(a1, (ZinIrTensor *)*(v11 - 1), (uint64_t **)a3);
    if ((_DWORD)v12)
      v13 = 1;
    else
      v13 = v11 == v9;
    ++v11;
  }
  while (!v13);
  v9 = (uint64_t *)__p;
  if (__p)
    goto LABEL_17;
  return v12;
}

void sub_20705D0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinIrRegSpill::IsL2DepOrChain(ZinIrRegSpill *this, ZinIrOpLayer **a2, ZinANELayer **a3, ZinANELayer **a4)
{
  ZinIrOpLayer *result;
  const ZinANELayer *v8;
  ZinANELayer *v9;

  result = (ZinIrOpLayer *)ZinIrOpLayer::IsANELayer(a2[12]);
  if ((_DWORD)result)
  {
    v9 = a2[12];
    *a3 = v9;
    result = ZinIrRegAllocUtil::GetFirstConsumer(v9, v8);
    *a4 = result;
    if (result)
      return (ZinIrOpLayer *)(*((_QWORD *)*a3 + 6) == *((_QWORD *)result + 6));
  }
  return result;
}

uint64_t ZinIrRegSpill::SpillL2DepOrChain(uint64_t a1, ZinANELayer **a2, ZinANELayer **a3, uint64_t **a4)
{
  _BOOL8 HasLockedPEWorkUnit;
  ZinANELayer *v9;
  _BOOL8 HasLockedNEWorkUnit;
  uint64_t v11;
  _BOOL8 v12;
  ZinANELayer *v13;
  _BOOL8 v14;
  ZinIrOpLayer *v15;
  uint64_t v16;
  ZinANELayer *v17;
  uint64_t v18;
  int IntermediateLayers;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  ZinIrTensor *v26;
  ZinIrTensor *RootTensor;
  uint64_t v28;
  void *__p;
  uint64_t *v31;
  uint64_t v32;

  HasLockedPEWorkUnit = ZinIrLocalRegAlloc::HasLockedPEWorkUnit(*(ZinIrLocalRegAlloc **)(a1 + 16), *a2);
  v9 = *a2;
  if (!HasLockedPEWorkUnit)
    *(_BYTE *)(*((_QWORD *)v9 + 33) + 256) = 0;
  HasLockedNEWorkUnit = ZinIrLocalRegAlloc::HasLockedNEWorkUnit(*(ZinIrLocalRegAlloc **)(a1 + 16), v9);
  v11 = *((_QWORD *)*a2 + 33);
  if (!HasLockedNEWorkUnit)
    *(_BYTE *)(v11 + 150) = 0;
  *(_BYTE *)(v11 + 233) = 0;
  v12 = ZinIrLocalRegAlloc::HasLockedPEWorkUnit(*(ZinIrLocalRegAlloc **)(a1 + 16), *a3);
  v13 = *a3;
  if (!v12)
    *(_BYTE *)(*((_QWORD *)v13 + 33) + 256) = 0;
  v14 = ZinIrLocalRegAlloc::HasLockedNEWorkUnit(*(ZinIrLocalRegAlloc **)(a1 + 16), v13);
  v15 = *a3;
  v16 = *((_QWORD *)*a3 + 33);
  if (!v14)
    *(_BYTE *)(v16 + 150) = 0;
  *(_BYTE *)(v16 + 233) = 0;
  v17 = *a2;
  v18 = *((_QWORD *)*a2 + 6);
  __p = 0;
  v31 = 0;
  v32 = 0;
  IntermediateLayers = ZinTensorFamilyUtil::GetIntermediateLayers((uint64_t)v17, v15, 0, 0, &__p);
  v20 = v18 + 1;
  if (IntermediateLayers || (v22 = (uint64_t *)__p, v23 = v31, __p == v31))
  {
    v21 = v18 + 1;
  }
  else
  {
    do
    {
      v24 = *v22++;
      v21 = v20 + 1;
      *(_QWORD *)(v24 + 48) = v20++;
    }
    while (v22 != v23);
  }
  if ((ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(*(ZinIrLocalRegAlloc **)(a1 + 16), *a3, v21, 0) & 1) != 0)
  {
    v25 = *(_QWORD **)(a1 + 16);
    v26 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, 0, 0);
    RootTensor = ZinIrTensor::GetRootTensor(v26);
    ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(v25, (uint64_t)RootTensor, a4);
    v28 = 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrRegSpill::SpillL2DepOrChain();
    v28 = 3;
  }
  if (__p)
  {
    v31 = (uint64_t *)__p;
    operator delete(__p);
  }
  return v28;
}

void sub_20705D2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinIrRegSpill::VerifyL2Symbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyL2Symbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrRegSpill::VerifyL2Symbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyL2Symbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C004F08;
  return result;
}

void std::__function::__func<ZinIrRegSpill::VerifyL2Symbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyL2Symbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C004F08;
}

uint64_t std::__function::__func<ZinIrRegSpill::VerifyL2Symbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyL2Symbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t InputTensor;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint8_t buf[4];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  if (!ZinIrOpLayer::IsANELayer(*a3))
    return 0;
  if (*((_QWORD *)v3 + 12) == *((_QWORD *)v3 + 11))
  {
LABEL_13:
    ZinEngineLayerMirInfo::GetL2WrSymbols(*((ZinEngineLayerMirInfo **)v3 + 33), &v20);
    v9 = v20;
    v10 = v21 - v20;
    if (v10)
    {
      if (v10 != 1)
      {
        v11 = 0;
        if (!v20)
          return v11;
        goto LABEL_22;
      }
      if (*v20)
      {
        v11 = 0;
        goto LABEL_22;
      }
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v19 = (_QWORD *)((char *)v3 + 24);
      if (*((char *)v3 + 47) < 0)
        v19 = (_QWORD *)*v19;
      *(_DWORD *)buf = 136315138;
      v24 = v19;
      _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: L2 write symbol does not exist in %s", buf, 0xCu);
      v11 = 3;
      v9 = v20;
      if (!v20)
        return v11;
    }
    else
    {
      v11 = 3;
      if (!v9)
        return v11;
    }
LABEL_22:
    v21 = v9;
    operator delete(v9);
    return v11;
  }
  v4 = 0;
  v5 = (_QWORD *)((char *)v3 + 24);
  while (1)
  {
    InputTensor = ZinIrOpLayer::GetInputTensor(v3, v4);
    if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v3 + 200))(v3, InputTensor) & 1) != 0)
      goto LABEL_12;
    v22 = 0;
    if (ZinMemSourceIndexTranslator::GetL2SrcType(v3, v4, &v22))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        std::__function::__func<ZinIrRegSpill::VerifyL2Symbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyL2Symbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()((uint64_t)v3 + 47, (uint64_t)v3 + 24, v12, v13, v14, v15, v16, v17);
      return 3;
    }
    ZinEngineLayerMirInfo::GetL2RdSymbols(*((_QWORD *)v3 + 33), v22, &v20);
    v7 = v20;
    v8 = v21 - v20;
    if (v8 == 1)
      break;
    if (!v8)
      goto LABEL_25;
    if (v20)
      goto LABEL_11;
LABEL_12:
    if (++v4 >= (uint64_t)(*((_QWORD *)v3 + 12) - *((_QWORD *)v3 + 11)) >> 3)
      goto LABEL_13;
  }
  if (*v20)
  {
LABEL_11:
    v21 = v20;
    operator delete(v20);
    goto LABEL_12;
  }
LABEL_25:
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    if (!v7)
      return 3;
    goto LABEL_27;
  }
  if (*((char *)v3 + 47) < 0)
    v5 = (_QWORD *)*v5;
  *(_DWORD *)buf = 136315138;
  v24 = v5;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: L2 read symbol does not exist in %s", buf, 0xCu);
  v7 = v20;
  if (v20)
  {
LABEL_27:
    v21 = v7;
    operator delete(v7);
  }
  return 3;
}

uint64_t std::__function::__func<ZinIrRegSpill::VerifyL2Symbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyL2Symbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<ZinIrRegSpill::VerifyL2Symbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyL2Symbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C004F60;
  return result;
}

void std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C004F60;
}

uint64_t std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayerGraph *v3;
  ZinIrOpLayer *v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t IndexOfMatchedIncomingLayer;
  int v8;
  int v9;

  v3 = *a2;
  v4 = *a3;
  result = ZinIrOpLayer::IsANELayer(*a3);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(*((_QWORD *)v4 + 33) + 1632) != 4)
      return 0;
    v6 = (uint64_t *)**((_QWORD **)v4 + 14);
    if (!ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v6))
      return 3;
    result = ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)v6);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t *))(*v6 + 568))(v6);
      if ((_DWORD)result)
      {
        IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(v3, (ZinIrOpLayer *)v6, v4);
        v9 = 0;
        if (ZinMemSourceIndexTranslator::GetL2SrcType(v6, IndexOfMatchedIncomingLayer, &v9))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
          return 3;
        }
        v8 = v9;
        if (v9 == 2)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
          return 3;
        }
        if (!ZinEngineLayerMirInfo::HasL2Read(*((ZinEngineLayerMirInfo **)v4 + 33))
          && !ZinEngineLayerMirInfo::HasL2Read(v6[33], v8 == 0))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()((uint64_t)v4);
          return 3;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0,std::allocator<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0,std::allocator<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFFF7C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0,std::allocator<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFFF7C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0,std::allocator<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  v4 = *a2;
  v5 = *a3;
  v8 = v5;
  if (**(_QWORD **)(a1 + 8) == v5)
  {
    *(_QWORD *)(v5 + 48) = **(_QWORD **)(a1 + 16);
  }
  else if (*(_QWORD *)(v5 + 48) >= **(_QWORD **)(a1 + 16))
  {
    v7 = **(_QWORD **)(a1 + 8);
    if (!ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsConnected(v4, &v8, &v7))
      ++*(_QWORD *)(v8 + 48);
  }
  return 0;
}

uint64_t std::__function::__func<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0,std::allocator<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0,std::allocator<ZinIrRegSpill::InsertL2Copy(ZinPELayer *,unsigned long)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinIrRegSpill::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller verify l2 symbol error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller lower kernel error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller do spill on candidates error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller clear l2 symbol error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrRegSpill::ClearCandidateL2Symbols(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller spill resident tensor error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrRegSpill::DoSpillOnCandidates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller spilling and dma alloc error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller candidate is not qualified.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrRegSpill::InsertL2Copy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: failed workunit selection, line: %d, file: %s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinIrRegSpill::InsertL2Copy()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "SetAllocationHint failure  %s:%d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Insert copy failure  %s:%d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinIrRegSpill::SpillAndAllocateDMABuffers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller spill read with copy error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller spill read error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller spill write error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrRegSpill::SpillRead()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Engine layer %s has invalid L2 source type", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinIrRegSpill::RevertL2DepOrChain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Spiller spill l2-dep/chain error.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrRegSpill::RevertL2DepOrChain(uint8_t *buf, _BYTE *a2)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Spiller spill l2-dep/chain error.", buf, 2u);
}

void ZinIrRegSpill::SpillL2DepOrChain()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Schedule update must be done succesfully.  %s:%d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void std::__function::__func<ZinIrRegSpill::VerifyL2Symbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyL2Symbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Engine layer %s has invalid L2 source", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Attempting to set chained symbol for SrcIdx of %s, SrcIdx should be resident.", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Engine layer %s has invalid L2 source", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void std::__function::__func<ZinIrRegSpill::VerifyChainSymbols(void)::$_0,std::allocator<ZinIrRegSpill::VerifyChainSymbols(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v1, "Error: We found illegal chaining %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

_QWORD *ZinMirPEReductionAccumulationRetention::ZinMirPEReductionAccumulationRetention(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  void *__p[2];
  char v8;

  *a1 = a3;
  a1[1] = a2;
  a1[2] = a4;
  v5 = a1 + 3;
  std::string::basic_string[abi:ne180100]<0>(__p, "pe_reduction_acc_retention");
  ZinObjectNameFactory::ZinObjectNameFactory(v5, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  return a1;
}

void sub_20705E054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPEReductionAccumulationRetention::UpdateGraphWithConst(ZinMirPEReductionAccumulationRetention *this, uint64_t **a2, ZinPEElementWiseLayer *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  char *v108;
  unint64_t *v109;
  unint64_t v110;
  ZinIrOpLayer *ConstLayer;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  ZinMirPEReductionAccumulationRetention *v117;
  uint64_t v118;
  _DWORD *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _OWORD *PostOps;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  ZinIrOpLayer *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t OutputScale;
  ZinEngineLayerMirInfo *v134;
  uint64_t OutputBias;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char v140;
  ZinEngineLayerMirInfo *v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  ZinPEElementWiseLayer *v153;
  _BOOL8 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _BOOL8 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _QWORD *v175;
  _OWORD v176[2];
  int v177;
  _QWORD v178[2];
  ZinEngineLayerMirInfo *v179;
  __int128 v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  std::string v183;
  _QWORD v184[3];
  __int128 v185;
  __int128 v186;
  __int128 v187[2];
  uint64_t v188;
  float v189;
  ZinPEElementWiseLayer *v190;
  void *__p[2];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  int v198;
  _OWORD v199[2];
  int v200;
  __int128 v201;
  __int128 v202;
  _OWORD v203[2];
  uint64_t v204;

  v204 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(ZinPEElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 40))(a3, 0, 0);
  v7 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a3 + 360))(a3, 3);
  v8 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a3 + 360))(a3, 4);
  v9 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a3 + 360))(a3, 1);
  v10 = *((_QWORD *)a3 + 63);
  v11 = *(_DWORD *)(*(_QWORD *)(v10 + 64) + 12);
  v189 = 0.0;
  ZinPEElementWiseLayer::GetOutputReductionFinalScaleValue(a3, &v189);
  if (v11 == 3)
    v189 = v189 / (float)(v8 * v7 * v9);
  v12 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a3 + 11) + 32))(**((_QWORD **)a3 + 11), 0, 0)+ 88);
  v187[0] = (__int128)vdupq_n_s64(1uLL);
  v187[1] = v187[0];
  v188 = 1;
  v13 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 63) + 64) + 12);
  v186 = 0uLL;
  switch(v13)
  {
    case 0:
    case 3:
      switch(v12)
      {
        case 1:
          LOBYTE(v179) = 0;
          std::vector<signed char>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)__p, &v201);
          v14 = v201;
          v201 = 0uLL;
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v14;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v19 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          goto LABEL_149;
        case 2:
          LOBYTE(v179) = 0;
          std::vector<unsigned char>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)__p, &v201);
          v72 = v201;
          v201 = 0uLL;
          v73 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v72;
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v76 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v76);
          while (__stlxr(v20 - 1, v76));
          goto LABEL_149;
        case 3:
          LOWORD(v199[0]) = 0;
          std::vector<half>::vector(__p, 1, v199);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)__p, &v201);
          v52 = v201;
          v201 = 0uLL;
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v52;
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v56 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v56);
          while (__stlxr(v20 - 1, v56));
          goto LABEL_149;
        case 11:
          LODWORD(v199[0]) = 0;
          std::vector<float>::vector(__p, 1uLL, v199);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)__p, &v201);
          v87 = v201;
          v201 = 0uLL;
          v88 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v87;
          if (v88)
          {
            v89 = (unint64_t *)&v88->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v91 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v91);
          while (__stlxr(v20 - 1, v91));
          goto LABEL_149;
        case 12:
          LOBYTE(v179) = 0;
          std::vector<e4m3_t>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)__p, &v201);
          v97 = v201;
          v201 = 0uLL;
          v98 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v97;
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v101 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v101);
          while (__stlxr(v20 - 1, v101));
          goto LABEL_149;
        default:
          v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v39)
            goto LABEL_50;
          break;
      }
      goto LABEL_153;
    case 1:
    case 4:
      switch(v12)
      {
        case 1:
          LOBYTE(v179) = 127;
          std::vector<signed char>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)__p, &v201);
          v26 = v201;
          v201 = 0uLL;
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v26;
          if (v27)
          {
            v28 = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v30 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v30);
          while (__stlxr(v20 - 1, v30));
          goto LABEL_149;
        case 2:
          LOBYTE(v179) = -1;
          std::vector<unsigned char>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)__p, &v201);
          v77 = v201;
          v201 = 0uLL;
          v78 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v77;
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v81 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v81);
          while (__stlxr(v20 - 1, v81));
          goto LABEL_149;
        case 3:
          LOWORD(v199[0]) = 31744;
          std::vector<half>::vector(__p, 1, v199);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)__p, &v201);
          v57 = v201;
          v201 = 0uLL;
          v58 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v57;
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v61 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v61);
          while (__stlxr(v20 - 1, v61));
          goto LABEL_149;
        case 11:
          LODWORD(v199[0]) = 2139095040;
          std::vector<float>::vector(__p, 1uLL, v199);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)__p, &v201);
          v92 = v201;
          v201 = 0uLL;
          v93 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v92;
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v96 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v96);
          while (__stlxr(v20 - 1, v96));
          goto LABEL_149;
        case 12:
          LOBYTE(v179) = -64;
          std::vector<e4m3_t>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)__p, &v201);
          v102 = v201;
          v201 = 0uLL;
          v103 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v102;
          if (v103)
          {
            v104 = (unint64_t *)&v103->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v106 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v106);
          while (__stlxr(v20 - 1, v106));
          goto LABEL_149;
        default:
          v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v39)
            goto LABEL_50;
          break;
      }
      goto LABEL_153;
    case 2:
    case 5:
      switch(v12)
      {
        case 1:
          LOBYTE(v179) = 0x80;
          std::vector<signed char>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)__p, &v201);
          v21 = v201;
          v201 = 0uLL;
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v21;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v25 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v25);
          while (__stlxr(v20 - 1, v25));
          break;
        case 2:
          LOBYTE(v179) = 0;
          std::vector<unsigned char>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)__p, &v201);
          v62 = v201;
          v201 = 0uLL;
          v63 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v62;
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v66 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v66);
          while (__stlxr(v20 - 1, v66));
          break;
        case 3:
          LOWORD(v199[0]) = -1024;
          std::vector<half>::vector(__p, 1, v199);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)__p, &v201);
          v47 = v201;
          v201 = 0uLL;
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v47;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v51 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v51);
          while (__stlxr(v20 - 1, v51));
          break;
        case 11:
          LODWORD(v199[0]) = -8388608;
          std::vector<float>::vector(__p, 1uLL, v199);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)__p, &v201);
          v67 = v201;
          v201 = 0uLL;
          v68 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v67;
          if (v68)
          {
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v71 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v71);
          while (__stlxr(v20 - 1, v71));
          break;
        case 12:
          LOBYTE(v179) = 64;
          std::vector<e4m3_t>::vector(__p, 1uLL, &v179);
          std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)__p, &v201);
          v82 = v201;
          v201 = 0uLL;
          v83 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          v186 = v82;
          if (v83)
          {
            v84 = (unint64_t *)&v83->__shared_owners_;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (!*((_QWORD *)&v201 + 1))
            goto LABEL_151;
          v86 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v20 = __ldaxr(v86);
          while (__stlxr(v20 - 1, v86));
          break;
        default:
          v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v39)
LABEL_50:
            ZinMirPEReductionAccumulationRetention::UpdateGraphWithConst(v39, v40, v41, v42, v43, v44, v45, v46);
          goto LABEL_153;
      }
LABEL_149:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
LABEL_151:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_153;
    case 6:
      v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v31)
        goto LABEL_193;
      ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v31, v32, v33, v34, v35, v36, v37, v38);
LABEL_153:
      if ((_QWORD)v186)
      {
        v107 = *(_QWORD *)(v10 + 16);
        v108 = (char *)this + 24;
        v185 = v186;
        if (*((_QWORD *)&v186 + 1))
        {
          v109 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
        ConstLayer = (ZinIrOpLayer *)ZinBuilder::CreateConstLayer(v107, (uint64_t)this + 24, v187, v12, (uint64_t *)&v185, 0, 0);
        v112 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
        if (*((_QWORD *)&v185 + 1))
        {
          v113 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        *(_QWORD *)&v199[0] = a3;
        *(_QWORD *)&v201 = v199;
        *((_QWORD *)&v201 + 1) = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v201);
        v175 = (_QWORD *)v6;
        ZinIrOpLayerGraph::AddNode(a2, ConstLayer, (ZinIrOpLayer ***)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)&v192 = __p[1];
          operator delete(__p[1]);
        }
        memset(v203, 0, sizeof(v203));
        v201 = 0u;
        v202 = 0u;
        memset(v199, 0, sizeof(v199));
        v200 = 1065353216;
        v115 = (*(uint64_t (**)(ZinPEElementWiseLayer *, _QWORD))(*(_QWORD *)a3 + 360))(a3, 0);
        v116 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a3 + 360))(a3, 2);
        LODWORD(v179) = 3;
        __p[0] = &v179;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v199, (int *)&v179, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[3] = 1;
        LODWORD(v179) = 4;
        __p[0] = &v179;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v199, (int *)&v179, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[3] = 1;
        LODWORD(v179) = 2;
        __p[0] = &v179;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v199, (int *)&v179, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[3] = v116;
        LODWORD(v179) = 1;
        __p[0] = &v179;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v199, (int *)&v179, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[3] = 1;
        LODWORD(v179) = 0;
        __p[0] = &v179;
        v117 = this;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v199, (int *)&v179, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[3] = v115;
        v118 = *(_QWORD *)(v10 + 16);
        (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ConstLayer + 80))(__p, ConstLayer, 0, 0);
        v119 = operator new(0x78uLL);
        *(_QWORD *)&v180 = v119 + 30;
        *((_QWORD *)&v180 + 1) = v119 + 30;
        v119[28] = v198;
        v120 = v197;
        v121 = v195;
        *((_OWORD *)v119 + 5) = v196;
        *((_OWORD *)v119 + 6) = v120;
        v122 = v192;
        *(_OWORD *)v119 = *(_OWORD *)__p;
        *((_OWORD *)v119 + 1) = v122;
        v123 = v194;
        *((_OWORD *)v119 + 2) = v193;
        *((_OWORD *)v119 + 3) = v123;
        *((_OWORD *)v119 + 4) = v121;
        v179 = (ZinEngineLayerMirInfo *)v119;
        *((_QWORD *)&v202 + 1) = ZinBuilder::CreateBroadcast(v118, (uint64_t)v108, (uint64_t *)&v179, (uint64_t)v199, *(_DWORD *)(*v175 + 88));
        if (v179)
        {
          *(_QWORD *)&v180 = v179;
          operator delete(v179);
        }
        PostOps = (_OWORD *)ZinPEElementWiseLayer::GetPostOps(a3);
        v125 = PostOps[1];
        *(_OWORD *)__p = *PostOps;
        v192 = v125;
        v126 = PostOps[2];
        v127 = PostOps[3];
        v128 = PostOps[5];
        v195 = PostOps[4];
        v196 = v128;
        v193 = v126;
        v194 = v127;
        if (v189 != 1.0)
        {
          *((float *)&v192 + 2) = v189;
          BYTE12(v192) = 1;
        }
        __p[0] = 0;
        __p[1] = 0;
        memset(v184, 0, sizeof(v184));
        ZinObjectNameFactory::CreateName((uint64_t)v108, 1u, &v183);
        v129 = (ZinIrOpLayer *)operator new();
        v130 = (std::__shared_weak_count *)v175[1];
        v181 = *v175;
        v182 = v130;
        if (v130)
        {
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldxr(v131);
          while (__stxr(v132 + 1, v131));
        }
        OutputScale = ZinPELayer::GetOutputScale(a3);
        v134 = *(ZinEngineLayerMirInfo **)OutputScale;
        LOBYTE(v180) = *(_BYTE *)(OutputScale + 8);
        v179 = v134;
        OutputBias = ZinPELayer::GetOutputBias(a3);
        v136 = *(_QWORD *)OutputBias;
        BYTE12(v180) = *(_BYTE *)(OutputBias + 8);
        *(_QWORD *)((char *)&v180 + 4) = v136;
        ZinPEElementWiseLayer::ZinPEElementWiseLayer((uint64_t)v129, &v181, (__int128 *)&v183, &v201, v203, 0, __p, (uint64_t)v184, (__int128 *)&v179);
        v137 = v182;
        if (v182)
        {
          v138 = (unint64_t *)&v182->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        v190 = a3;
        v178[0] = &v190;
        v178[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v179, v178);
        ZinIrOpLayerGraph::AddNode(a2, v129, (ZinIrOpLayer ***)&v179);
        v179 = (ZinEngineLayerMirInfo *)&unk_24C02BB18;
        if ((_QWORD)v180)
        {
          *((_QWORD *)&v180 + 1) = v180;
          operator delete((void *)v180);
        }
        ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)ConstLayer, (uint64_t)v129, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        memset(v176, 0, sizeof(v176));
        v177 = 1065353216;
        v140 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a3, v129, v176);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v176);
        if ((v140 & 1) != 0)
        {
          ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a3, 0);
          ZinANELayer::CopyMirInfo(a3, &v179);
          ZinANELayer::SetMirInfo((uint64_t)v129, (int **)&v179);
          v141 = v179;
          v179 = 0;
          if (v141)
          {
            ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v141);
            MEMORY[0x20BD002F8]();
          }
          v142 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v129 + 368))(v129, 3);
          v143 = *((_QWORD *)v129 + 33);
          if (*(_QWORD *)(v143 + 200) > v142)
          {
            if (*(_QWORD *)(v143 + 216))
              ZinAssertImpl("Unsupported chained producer with overlap in ReductionAccumulationRetention");
            v144 = *(unsigned __int8 *)(v143 + 233);
            *(_QWORD *)(v143 + 200) = v142;
            if (v144)
              *(_BYTE *)(v143 + 233) = 1;
          }
          v145 = *((_QWORD *)a3 + 6);
          v146 = v145 - 1;
          *((_QWORD *)ConstLayer + 6) = v145 - 1;
          *((_QWORD *)v129 + 6) = v145;
          v179 = *(ZinEngineLayerMirInfo **)(*((_QWORD *)v129 + 19) + 592);
          v147 = (uint64_t *)std::map<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>,ScheduleComparator,std::allocator<std::pair<ZinIrBasicBlock * const,std::vector<ZinIrOpLayer *>>>>::at(*((_QWORD *)v117 + 2), (uint64_t *)&v179);
          v149 = *v147;
          v148 = v147[1];
          if (v148 != *v147)
          {
            v150 = 0;
            v151 = 0;
            v152 = 1;
            do
            {
              v153 = *(ZinPEElementWiseLayer **)(v149 + 8 * v151);
              if (*((_QWORD *)v153 + 6) == v146 && (v152 & 1) != 0)
              {
                v178[0] = ConstLayer;
                std::vector<ZinIrOpLayer *>::insert((uint64_t)v147, (char *)(v150 + v149), v178);
                v152 = 0;
                v149 = *v147;
                v148 = v147[1];
              }
              else if (v153 == a3)
              {
                *(_QWORD *)(v149 + 8 * v151) = v129;
                break;
              }
              ++v151;
              v150 += 8;
            }
            while (v151 < (v148 - v149) >> 3);
          }
          v162 = 0;
        }
        else
        {
          v163 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v163)
            std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v163, v164, v165, v166, v167, v168, v169, v170);
          v162 = 3;
        }
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v183.__r_.__value_.__l.__data_);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v199);
        goto LABEL_204;
      }
LABEL_193:
      v154 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v154)
        ZinMirPEReductionAccumulationRetention::UpdateGraphWithConst(v154, v155, v156, v157, v158, v159, v160, v161);
      v162 = 3;
LABEL_204:
      v171 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
      if (*((_QWORD *)&v186 + 1))
      {
        v172 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      return v162;
    default:
      goto LABEL_193;
  }
}

void sub_20705F158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48)
{
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20705F31C()
{
  JUMPOUT(0x20705F314);
}

char *std::vector<ZinIrOpLayer *>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long *>::push_back(&__p, a3);
    v4 = std::vector<ZinGOCLayer const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void sub_20705F48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPEReductionAccumulationRetention::Run(ZinMirPEReductionAccumulationRetention *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t Hal;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD v34[2];
  char **v35;
  char v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  void *__p;
  char v42;
  char v43;
  _QWORD v44[3];
  _QWORD *v45;
  _BYTE v46[32];
  int v47;
  void *v48[2];
  char v49;
  _QWORD v50[8];
  int v51;
  _QWORD v52[23];
  uint64_t v53;
  uint64_t (**v54)(ZinLinearPattern *__hidden);
  uint64_t v55;
  _QWORD v56[4];

  v56[3] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(**((_QWORD **)this + 1) + 1126))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(v48, "any");
  memset(&v50[3], 0, 40);
  v51 = 1065353216;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  __p = &v31;
  v42 = 0;
  v31 = (char *)operator new(0x60uLL);
  v32 = (uint64_t)v31;
  v33 = v31 + 96;
  v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v33, (uint64_t)v48, (uint64_t)v52, (uint64_t)v31);
  v34[0] = &v31;
  std::string::basic_string[abi:ne180100]<0>(&__p, "pe_ew");
  v44[0] = &unk_24C0537D8;
  v44[1] = MatchPEEW;
  v45 = v44;
  memset(v46, 0, sizeof(v46));
  v47 = 1065353216;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v35 = &v28;
  v36 = 0;
  v28 = (char *)operator new(0x60uLL);
  v29 = (uint64_t)v28;
  v30 = v28 + 96;
  v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v30, (uint64_t)&__p, (uint64_t)v48, (uint64_t)v28);
  v34[1] = &v28;
  v2 = *((_QWORD *)this + 1);
  v39[0] = &off_24C059348;
  v39[1] = this;
  v40 = v39;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v52, v34, v2, 0, v39, 0);
  v3 = v40;
  if (v40 == v39)
  {
    v4 = 4;
    v3 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v35 = &v28;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v46);
  v6 = v45;
  if (v45 == v44)
  {
    v7 = 4;
    v6 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  if (v43 < 0)
    operator delete(__p);
  __p = &v31;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v50[4]);
  v8 = (_QWORD *)v50[3];
  if ((_QWORD *)v50[3] == v50)
  {
    v9 = 4;
    v8 = v50;
  }
  else
  {
    if (!v50[3])
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_20:
  if (v49 < 0)
    operator delete(v48[0]);
  v10 = *(_QWORD *)this + 8;
  v11 = **(_QWORD ***)this;
  if (v11 == (_QWORD *)v10)
  {
LABEL_35:
    v5 = 0;
    goto LABEL_39;
  }
  while (1)
  {
    Hal = ZinIrTarget::GetHal((ZinIrTarget *)v11[4]);
    v37[0] = &off_24C0592F0;
    v37[1] = v52;
    v37[2] = this;
    v38 = v37;
    v13 = ZinIrOpLayerGraph::TraverseForward(Hal, (uint64_t)v37, 1);
    v14 = v38;
    if (v38 == v37)
    {
      v14 = v37;
      v15 = 4;
    }
    else
    {
      if (!v38)
        goto LABEL_28;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
    if (v13)
      break;
    v16 = (_QWORD *)v11[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (_QWORD *)v11[2];
        v18 = *v17 == (_QWORD)v11;
        v11 = v17;
      }
      while (!v18);
    }
    v11 = v17;
    if (v17 == (_QWORD *)v10)
      goto LABEL_35;
  }
  v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v19)
    ZinMirPEReductionAccumulationRetention::Run(v19, v20, v21, v22, v23, v24, v25, v26);
  v5 = 3;
LABEL_39:
  v52[0] = &off_24C022540;
  v48[0] = v56;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  v54 = &off_24C01BCC8;
  v48[0] = &v55;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  ZinPattern::~ZinPattern((ZinPattern *)&v54);
  v48[0] = &v53;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  ZinPattern::~ZinPattern((ZinPattern *)v52);
  return v5;
}

void sub_20705F8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_1,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_1,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059348;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_1,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059348;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_1,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, ZinPattern **a4)
{
  ZinPattern *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v10;
  _QWORD *v11;
  char **v12;
  char **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  _QWORD *v43;
  char v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v58;
  void *__p;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;

  v4 = *a4;
  v58 = *(_QWORD *)(a1 + 8);
  if (ZinPattern::MatchCount(*a4))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "pe_ew");
    ZinPattern::GetMatch((uint64_t)v4, (unsigned __int8 *)&__p, &v62);
    if (SHIBYTE(v61) < 0)
      operator delete(__p);
    v5 = v62;
    v6 = v63;
    if (v62 == v63)
      goto LABEL_10;
    v7 = 0;
    v8 = v62;
    do
    {
      if (!*v8++)
        ++v7;
    }
    while (v8 != v63);
    if ((unint64_t)(v63 - v62 - v7) < 2)
    {
LABEL_10:
      v10 = 0;
      if (!v62)
        return v10 & 1;
      goto LABEL_95;
    }
    v10 = 0;
    do
    {
      v11 = (_QWORD *)*v5;
      if (*v5)
      {
        v12 = *(char ***)(v58 + 64);
        v13 = *(char ***)(v58 + 72);
        while (v12 != v13)
        {
          v14 = *(_QWORD **)*v12;
          v15 = *(_QWORD *)(v14[63] + 64);
          v16 = *(_QWORD *)(v11[63] + 64);
          v17 = *(_DWORD *)(v15 + 12);
          v18 = *(_DWORD *)(v16 + 12);
          if (v17 == v18
            || (v17 == 5 ? (v19 = v18 == 2) : (v19 = 0),
                v19
             || (v17 == 4 ? (v20 = v18 == 1) : (v20 = 0),
                 v20 || (v17 == 2 ? (v21 = v18 == 5) : (v21 = 0), v21 || (v17 == 1 ? (v22 = v18 == 4) : (v22 = 0), v22)))))
          {
            v23 = (*(uint64_t (**)(_QWORD))(*v14 + 624))(*(_QWORD *)*v12);
            v24 = (*(uint64_t (**)(_QWORD *))(*v11 + 624))(v11);
            if (!(v23 | v24)
              || (v23 ? (v41 = v24 == 0) : (v41 = 1), !v41 && ZinIrActivationParams::operator==(v23 + 192, v24 + 192)))
            {
              v25 = (*(uint64_t (**)(_QWORD *))(*v14 + 632))(v14);
              v26 = (*(uint64_t (**)(_QWORD *))(*v11 + 632))(v11);
              if (!(v25 | v26)
                || (v25 ? (v42 = v26 == 0) : (v42 = 1), !v42 && ZinIrActivationParams::operator==(v25 + 192, v26 + 192)))
              {
                v27 = (*(uint64_t (**)(_QWORD *))(*v14 + 712))(v14);
                v28 = (*(uint64_t (**)(_QWORD *))(*v11 + 712))(v11);
                if (IsLayerInfoEqual<ZinTransposeLayer,ZinIrTransposeInfo>(v27, v28))
                {
                  v29 = (*(uint64_t (**)(_QWORD *))(*v14 + 720))(v14);
                  v30 = (*(uint64_t (**)(_QWORD *))(*v11 + 720))(v11);
                  if (IsLayerInfoEqual<ZinTransposeLayer,ZinIrTransposeInfo>(v29, v30))
                  {
                    v31 = (*(uint64_t (**)(_QWORD *))(*v14 + 696))(v14);
                    v32 = (*(uint64_t (**)(_QWORD *))(*v11 + 696))(v11);
                    if (IsLayerInfoEqual<ZinBroadcastLayer,ZinIrBroadcastInfo>(v31, v32))
                    {
                      v33 = (*(uint64_t (**)(_QWORD *))(*v14 + 704))(v14);
                      v34 = (*(uint64_t (**)(_QWORD *))(*v11 + 704))(v11);
                      if (IsLayerInfoEqual<ZinBroadcastLayer,ZinIrBroadcastInfo>(v33, v34))
                      {
                        v35 = v14[60];
                        v36 = v11[60];
                        if (!(v35 | v36)
                          || v35 && v36 && ZinIrScaledEWInfo::operator==(*(_QWORD *)(v35 + 64), *(_QWORD *)(v36 + 64)))
                        {
                          v37 = (*(uint64_t (**)(_QWORD *))(*v14 + 808))(v14);
                          v38 = (*(uint64_t (**)(_QWORD *))(*v11 + 808))(v11);
                          if (!(v37 | v38)
                            || v37
                            && v38
                            && *(_DWORD *)(*(_QWORD *)(v37 + 64) + 12) == *(_DWORD *)(*(_QWORD *)(v38 + 64) + 12))
                          {
                            v39 = (*(uint64_t (**)(_QWORD *))(*v14 + 816))(v14);
                            v40 = (*(uint64_t (**)(_QWORD *))(*v11 + 816))(v11);
                            if (!(v39 | v40) || v39 && v40 && ZinIrActivationParams::operator==(v39 + 192, v40 + 192))
                            {
                              __p = *(void **)(v15 + 24);
                              v64 = *(_QWORD *)(v16 + 24);
                              if (std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,5ul>,true,true>(&__p, 0, (uint64_t)&__p, 5u, &v64))
                              {
                                v45 = v12[2];
                                v46 = v12[1];
                                if (v46 >= v45)
                                {
                                  v47 = (v46 - *v12) >> 3;
                                  v48 = v47 + 1;
                                  if ((unint64_t)(v47 + 1) >> 61)
                                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                                  v49 = v45 - *v12;
                                  if (v49 >> 2 > v48)
                                    v48 = v49 >> 2;
                                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                                    v50 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v50 = v48;
                                  if (v50)
                                    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v12 + 2), v50);
                                  else
                                    v51 = 0;
                                  v52 = &v51[8 * v47];
                                  *(_QWORD *)v52 = v11;
                                  v53 = v52 + 8;
                                  v55 = *v12;
                                  v54 = v12[1];
                                  if (v54 != *v12)
                                  {
                                    do
                                    {
                                      v56 = *((_QWORD *)v54 - 1);
                                      v54 -= 8;
                                      *((_QWORD *)v52 - 1) = v56;
                                      v52 -= 8;
                                    }
                                    while (v54 != v55);
                                    v54 = *v12;
                                  }
                                  *v12 = v52;
                                  v12[1] = v53;
                                  v12[2] = &v51[8 * v50];
                                  if (v54)
                                    operator delete(v54);
                                  v12[1] = v53;
                                }
                                else
                                {
                                  *(_QWORD *)v46 = v11;
                                  v12[1] = v46 + 8;
                                }
                                v44 = 1;
                                goto LABEL_73;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v12 += 3;
        }
        v43 = operator new(8uLL);
        __p = v43;
        *v43 = v11;
        v60 = v43 + 1;
        v61 = v43 + 1;
        std::vector<std::vector<ZinPEElementWiseLayer *>>::push_back[abi:ne180100]((uint64_t *)(v58 + 64), (uint64_t)&__p);
        if (__p)
        {
          v60 = __p;
          operator delete(__p);
        }
        v44 = 0;
LABEL_73:
        v10 |= v44;
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = v62;
    if (v62)
    {
LABEL_95:
      v63 = v5;
      operator delete(v5);
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

void sub_20705FFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_1,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_1,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

uint64_t std::vector<std::vector<ZinPEElementWiseLayer *>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<ZinPEElementWiseLayer *>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_207060184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL IsLayerInfoEqual<ZinTransposeLayer,ZinIrTransposeInfo>(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (!(a1 | a2))
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return ZinIrTransposeInfo::operator==(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
  }
  return result;
}

BOOL IsLayerInfoEqual<ZinBroadcastLayer,ZinIrBroadcastInfo>(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (!(a1 | a2))
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return std::operator==[abi:ne180100]<ZinIrDimension,unsigned long,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<std::pair<ZinIrDimension const,unsigned long>>>(*(_QWORD *)(a1 + 64) + 16, (_QWORD *)(*(_QWORD *)(a2 + 64) + 16));
  }
  return result;
}

BOOL std::operator==[abi:ne180100]<ZinIrDimension,unsigned long,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<std::pair<ZinIrDimension const,unsigned long>>>(uint64_t a1, _QWORD *a2)
{
  int *v3;
  _BOOL8 v4;
  uint64_t *v5;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (int *)(a1 + 16);
  do
  {
    v3 = *(int **)v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, v3 + 4);
    if (!v5)
      break;
  }
  while (v3[4] == *((_DWORD *)v5 + 4) && *((_QWORD *)v3 + 3) == v5[3]);
  return v4;
}

BOOL ZinIrScaledEWInfo::operator==(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
      && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
}

uint64_t std::vector<std::vector<ZinPEElementWiseLayer *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinPEElementWiseLayer *>>,std::reverse_iterator<std::vector<ZinPEElementWiseLayer *>*>,std::reverse_iterator<std::vector<ZinPEElementWiseLayer *>*>,std::reverse_iterator<std::vector<ZinPEElementWiseLayer *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinPEElementWiseLayer *>>,std::reverse_iterator<std::vector<ZinPEElementWiseLayer *>*>,std::reverse_iterator<std::vector<ZinPEElementWiseLayer *>*>,std::reverse_iterator<std::vector<ZinPEElementWiseLayer *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinPEElementWiseLayer *>>,std::reverse_iterator<std::vector<ZinPEElementWiseLayer *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinPEElementWiseLayer *>>,std::reverse_iterator<std::vector<ZinPEElementWiseLayer *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrOpLayer *>>,std::reverse_iterator<std::vector<ZinIrOpLayer *>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_0,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_0,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C0592F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_0,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0592F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_0,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2, ZinIrOpLayer **a3)
{
  const ZinIrOpLayerGraph *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  ZinPEElementWiseLayer **v12;
  ZinPEElementWiseLayer *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  ZinPEElementWiseLayer *v18;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 16);
  result = ZinOneToVariablePattern::Match(*(ZinOneToVariablePattern **)(a1 + 8), *a2, *a3);
  if (!(_DWORD)result)
    return result;
  v6 = (uint64_t *)v4[8];
  v7 = (uint64_t *)v4[9];
  if (v6 == v7)
  {
LABEL_16:
    std::vector<std::vector<ZinIrOpLayer *>>::__clear[abi:ne180100](v4 + 8);
    return 0;
  }
  while (1)
  {
    v8 = (uint64_t *)v6[1];
    if ((uint64_t *)*v6 != v8)
    {
      std::__introsort<std::_ClassicAlgPolicy,ZinMirPEReductionAccumulationRetention::Run(void)::$_0::operator() const(ZinIrOpLayerGraph *,ZinIrOpLayer *)::{lambda(ZinPEElementWiseLayer *,ZinPEElementWiseLayer *)#1} &,ZinPEElementWiseLayer **,false>(*v6, v8, 126 - 2 * __clz(((uint64_t)v8 - *v6) >> 3), 1);
      v9 = *v6;
      if (v6[1] - *v6 != 8)
        break;
    }
LABEL_15:
    v6 += 3;
    if (v6 == v7)
      goto LABEL_16;
  }
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = (ZinPEElementWiseLayer **)(v9 + 8 * v10);
    v13 = *v12;
    v14 = *((_QWORD *)*v12 + 45);
    v15 = *((_QWORD *)v12[1] + 45) - 1;
    if (v14 == v15)
    {
      v16 = *(_QWORD *)(*((_QWORD *)v13 + 63) + 64);
      *(_DWORD *)(v16 + 40) = 1;
      if (!v11)
        goto LABEL_12;
    }
    else
    {
      if (!v11)
        goto LABEL_12;
      v16 = *(_QWORD *)(*((_QWORD *)v13 + 63) + 64);
    }
    *(_DWORD *)(v16 + 44) = 1;
    result = ZinMirPEReductionAccumulationRetention::UpdateGraphWithConst((ZinMirPEReductionAccumulationRetention *)v4, (uint64_t **)v3, v13);
    if ((_DWORD)result)
      return result;
LABEL_12:
    ++v10;
    v9 = *v6;
    v17 = ((v6[1] - *v6) >> 3) - 1;
    v11 = v14 == v15;
  }
  while (v10 < v17);
  if (v14 != v15)
    goto LABEL_15;
  v18 = *(ZinPEElementWiseLayer **)(v9 + 8 * v17);
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 63) + 64) + 44) = 1;
  result = ZinMirPEReductionAccumulationRetention::UpdateGraphWithConst((ZinMirPEReductionAccumulationRetention *)v4, (uint64_t **)v3, v18);
  if (!(_DWORD)result)
    goto LABEL_15;
  return result;
}

uint64_t std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_0,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPEReductionAccumulationRetention::Run(void)::$_0,std::allocator<ZinMirPEReductionAccumulationRetention::Run(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,ZinMirPEReductionAccumulationRetention::Run(void)::$_0::operator() const(ZinIrOpLayerGraph *,ZinIrOpLayer *)::{lambda(ZinPEElementWiseLayer *,ZinPEElementWiseLayer *)#1} &,ZinPEElementWiseLayer **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_QWORD *)(v38 + 48) < *(_QWORD *)(*v8 + 48))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_QWORD *)(v43 + 48) < *(_QWORD *)(v44 + 48))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_QWORD *)(*v42 + 48);
          if (v47 < *(_QWORD *)(*v41 + 48))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(_QWORD *)(*v40 + 48))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(_QWORD *)(*v8 + 48))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_QWORD *)(v55 + 48);
                if (v57 < *(_QWORD *)(v56 + 48))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58 + 8) = v56;
                    if (!v58)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (v57 >= *(_QWORD *)(v56 + 48))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v90 = *v7;
              v89 = v7[1];
              v7 = v50;
              v91 = *(_QWORD *)(v89 + 48);
              if (v91 < *(_QWORD *)(v90 + 48))
              {
                do
                {
                  *v50 = v90;
                  v90 = *(v50 - 2);
                  --v50;
                }
                while (v91 < *(_QWORD *)(v90 + 48));
                *v50 = v89;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < (uint64_t)v10)
                {
                  result = *(_QWORD *)(v65 + 48);
                  if (result < *(_QWORD *)(v64[1] + 48))
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &v8[v62];
                v67 = *v66;
                v68 = *(_QWORD *)(*v66 + 48);
                if (*(_QWORD *)(v65 + 48) >= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v66 = v65;
                    if (v60 < v63)
                      break;
                    result = (2 * v63) | 1;
                    v64 = &v8[result];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < (uint64_t)v10 && *(_QWORD *)(v65 + 48) < *(_QWORD *)(v64[1] + 48))
                    {
                      v65 = v64[1];
                      ++v64;
                      result = v70;
                    }
                    v66 = v69;
                    v63 = result;
                  }
                  while (*(_QWORD *)(v65 + 48) >= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = &v74[v72];
                v78 = v75[1];
                v76 = v75 + 1;
                v77 = v78;
                v79 = (2 * v72) | 1;
                v80 = 2 * v72 + 2;
                if (v80 < v71)
                {
                  result = *(_QWORD *)(v77 + 48);
                  if (result < *(_QWORD *)(v76[1] + 48))
                  {
                    v77 = v76[1];
                    ++v76;
                    v79 = v80;
                  }
                }
                *v74 = v77;
                v74 = v76;
                v72 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v73;
              }
              else
              {
                *v76 = *a2;
                *a2 = v73;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                  v83 = &v8[v82];
                  v84 = *v83;
                  v85 = *v76;
                  v86 = *(_QWORD *)(*v76 + 48);
                  if (*(_QWORD *)(*v83 + 48) < v86)
                  {
                    do
                    {
                      v87 = v83;
                      *v76 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[v82];
                      v84 = *v83;
                      v76 = v87;
                    }
                    while (*(_QWORD *)(*v83 + 48) < v86);
                    *v87 = v85;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 48);
          if (*(_QWORD *)(*(v7 - 1) + 48) < v15)
            goto LABEL_12;
          if (v15 >= *(_QWORD *)(*(a2 - 1) + 48))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_QWORD *)(*v8 + 48));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_QWORD *)(v29 + 48));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_QWORD *)(v32 + 48));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_QWORD *)(v35 + 48));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_QWORD *)(v36 + 48));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 48);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 48) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 48) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 48) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_QWORD *)(v25 + 48) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_QWORD *)(v26 + 48) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,ZinMirPEReductionAccumulationRetention::Run(void)::$_0::operator() const(ZinIrOpLayerGraph *,ZinIrOpLayer *)::{lambda(ZinPEElementWiseLayer *,ZinPEElementWiseLayer *)#1} &,ZinPEElementWiseLayer **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirPEReductionAccumulationRetention::Run(void)::$_0::operator() const(ZinIrOpLayerGraph *,ZinIrOpLayer *)::{lambda(ZinPEElementWiseLayer *,ZinPEElementWiseLayer *)#1} &,ZinPEElementWiseLayer **>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirPEReductionAccumulationRetention::Run(void)::$_0::operator() const(ZinIrOpLayerGraph *,ZinIrOpLayer *)::{lambda(ZinPEElementWiseLayer *,ZinPEElementWiseLayer *)#1} &,ZinPEElementWiseLayer **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirPEReductionAccumulationRetention::Run(void)::$_0::operator() const(ZinIrOpLayerGraph *,ZinIrOpLayer *)::{lambda(ZinPEElementWiseLayer *,ZinPEElementWiseLayer *)#1} &,ZinPEElementWiseLayer **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 48) < *(_QWORD *)(*a1 + 48))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 48) < *(_QWORD *)(v22 + 48))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 48);
        if (v25 < *(_QWORD *)(*v19 + 48))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_QWORD *)(*v18 + 48))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_QWORD *)(*a1 + 48))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 48);
    if (v14 < *(_QWORD *)(*v8 + 48))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_QWORD *)(v13 + 48))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void ZinMirPEReductionAccumulationRetention::UpdateGraphWithConst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Could not create const data for accumulator retention!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported data format!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirPEReductionAccumulationRetention::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "TraverseForward failed while finding pattern for PE reduction accumulation retention!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinIrSoftmaxInfo::ZinIrSoftmaxInfo(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 42);
  *v6 = &unk_24C01BBD8;
  std::unordered_set<ZinIrDimension>::unordered_set((uint64_t)(v6 + 2), a2);
  *(_BYTE *)(a1 + 56) = a3;
  return a1;
}

void sub_207061014(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;

  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinSoftmaxLayer::ZinSoftmaxLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  ZinIrKernel *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  ZinIrKernel *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v6 = *a2;
  *a2 = 0;
  v7 = a3[1];
  v18 = *a3;
  v19 = (std::__shared_weak_count *)v7;
  v20 = v6;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v17 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v20, &v18, a4, &v17);
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    ZinIrKernel::~ZinIrKernel(v10);
    MEMORY[0x20BD002F8](v11, 0x1032C40DEE44497);
  }
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *a1 = off_24C01B398;
  ZinObjectNameFactory::ZinObjectNameFactory(a1 + 24, a4);
  return a1;
}

void sub_207061134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  ZinIrOpLayer *v12;

  ZinIrOpLayer::~ZinIrOpLayer(v12);
  _Unwind_Resume(a1);
}

uint64_t ZinSoftmaxLayer::Lower(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  ZinIrOpLayer *Reduction;
  BOOL v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  ZinIrOpLayer *Broadcast;
  BOOL v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  ZinIrOpLayer *ScaledElementWise;
  BOOL v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  ZinIrTensor *v38;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  uint64_t v40;
  uint64_t Interleave;
  char v42;
  char v43;
  uint64_t Hal;
  void *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  ZinIrOpLayer *Activation;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  ZinIrOpLayer *v75;
  BOOL v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  ZinIrOpLayer *v82;
  BOOL v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  ZinIrOpLayer *v94;
  uint64_t *v95;
  ZinIrTensor *v96;
  ZinIrTensor::MirInfo *v97;
  BOOL v98;
  _QWORD *v99;
  char v100;
  char v101;
  _QWORD *v103;
  uint64_t v104;
  uint64_t ReductionDimensions;
  uint64_t **v106;
  _QWORD v107[4];
  int v108;
  ZinIrTensor::MirInfo *v109;
  _QWORD v110[2];
  void *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _OWORD v115[2];
  uint64_t v116;
  void *__p;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  int v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[40];
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  int v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  _OWORD v164[7];
  void **v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  __int16 v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;

  v177 = *MEMORY[0x24BDAC8D0];
  __p = a1;
  *(_QWORD *)&v151 = &__p;
  v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a2 + 64), (unint64_t **)&v151);
  v5 = (uint64_t **)(a2 + 104);
  if (v4)
    v5 = v4 + 3;
  v137 = 0;
  v138 = 0;
  v136 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v136, *v5, (uint64_t)v5[1], v5[1] - *v5);
  v6 = **(_QWORD **)v136;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v8 = a1[8];
  NormalizationUtils::GetBroadcastMap((_QWORD *)(v8 + 16), (_QWORD *)(v7 + 48), (uint64_t)v135);
  v103 = (_QWORD *)(v8 + 16);
  ReductionDimensions = NormalizationUtils::GetReductionDimensions(v8 + 16);
  v106 = (uint64_t **)a2;
  v104 = v8;
  if (*(_BYTE *)(v8 + 56))
  {
    v9 = a1[2];
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 80))(&v151, v6, 0, 0);
    v10 = operator new(0x78uLL);
    v118 = (uint64_t)v10 + 120;
    v119 = (char *)v10 + 120;
    v11 = v156;
    v10[4] = v155;
    v10[5] = v11;
    v10[6] = v157;
    *((_DWORD *)v10 + 28) = v158;
    v12 = v152;
    *v10 = v151;
    v10[1] = v12;
    v13 = v154;
    v10[2] = v153;
    v10[3] = v13;
    __p = v10;
    Reduction = (ZinIrOpLayer *)ZinBuilder::CreateReduction(v9, (uint64_t)(a1 + 24), (uint64_t *)&__p, 3, 2, ReductionDimensions, 0, 0, 1.0, 0.0, 0, 0);
    if (__p)
    {
      v118 = (uint64_t)__p;
      operator delete(__p);
    }
    if (!Reduction)
      ZinAssertImpl("ZinSoftmaxLayer::Lower(): ZinBuilder failed to create reduction_max");
    v165 = (void **)a1;
    __p = &v165;
    v118 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v151, &__p);
    v15 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, Reduction, (ZinIrOpLayer ***)&v151);
    *(_QWORD *)&v151 = &unk_24C02BB18;
    if (*((_QWORD *)&v151 + 1))
    {
      *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
      operator delete(*((void **)&v151 + 1));
    }
    if (!v15)
      ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddNode() for reduction(max)");
    if ((ZinIrOpLayerGraph::AddEdge(a2, v6, (uint64_t)Reduction, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
      ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddEdge() for reduction(max)");
    v16 = a1[2];
    (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reduction + 80))(&v151, Reduction, 0, 0);
    v17 = operator new(0x78uLL);
    v118 = (uint64_t)v17 + 120;
    v119 = (char *)v17 + 120;
    v18 = v156;
    v17[4] = v155;
    v17[5] = v18;
    v17[6] = v157;
    *((_DWORD *)v17 + 28) = v158;
    v19 = v152;
    *v17 = v151;
    v17[1] = v19;
    v20 = v154;
    v17[2] = v153;
    v17[3] = v20;
    __p = v17;
    Broadcast = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast(v16, (uint64_t)(a1 + 24), (uint64_t *)&__p, (uint64_t)v135, 3);
    if (__p)
    {
      v118 = (uint64_t)__p;
      operator delete(__p);
    }
    if (!Broadcast)
      ZinAssertImpl("ZinSoftmaxLayer::Lower(): ZinBuilder failed to create ew_broadcast");
    v165 = (void **)a1;
    __p = &v165;
    v118 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v151, &__p);
    v22 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, Broadcast, (ZinIrOpLayer ***)&v151);
    *(_QWORD *)&v151 = &unk_24C02BB18;
    if (*((_QWORD *)&v151 + 1))
    {
      *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
      operator delete(*((void **)&v151 + 1));
    }
    if (!v22)
      ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddNode() for broadcast");
    if ((ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)Reduction, (uint64_t)Broadcast, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddEdge() for broadcast");
    v23 = a1[2];
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 80))(&v151, v6, 0, 0);
    (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Broadcast + 80))((_QWORD *)&v158 + 1, Broadcast, 0, 0);
    v24 = operator new(0xF0uLL);
    v119 = (char *)(v24 + 15);
    v25 = v162;
    v26 = v164[0];
    v24[12] = v163;
    v24[13] = v26;
    *(_OWORD *)((char *)v24 + 220) = *(_OWORD *)((char *)v164 + 12);
    v27 = v160;
    v24[8] = v159;
    v24[9] = v27;
    v24[10] = v161;
    v24[11] = v25;
    v28 = v156;
    v24[4] = v155;
    v24[5] = v28;
    v29 = v158;
    v24[6] = v157;
    v24[7] = v29;
    v30 = v152;
    *v24 = v151;
    v24[1] = v30;
    v31 = v154;
    v24[2] = v153;
    v24[3] = v31;
    __p = v24;
    v118 = (uint64_t)(v24 + 15);
    v32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
    ScaledElementWise = (ZinIrOpLayer *)ZinBuilder::CreateScaledElementWise(v23, (uint64_t)(a1 + 24), 1.0, 1.0, 0.0, (uint64_t)&__p, (__int128 *)(v32 + 48), 3, 0, 0, 1);
    if (__p)
    {
      v118 = (uint64_t)__p;
      operator delete(__p);
    }
    if (!ScaledElementWise)
      ZinAssertImpl("ZinSoftmaxLayer::Lower(): ZinBuilder failed to create element_wise_sub");
    v165 = (void **)a1;
    __p = &v165;
    v118 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v151, &__p);
    v34 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, ScaledElementWise, (ZinIrOpLayer ***)&v151);
    *(_QWORD *)&v151 = &unk_24C02BB18;
    if (*((_QWORD *)&v151 + 1))
    {
      *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
      operator delete(*((void **)&v151 + 1));
    }
    if (!v34)
      ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddNode() for scaledEW(sub)");
    v35 = operator new(0x10uLL);
    *(_QWORD *)&v152 = v35 + 2;
    *v35 = v6;
    v35[1] = Broadcast;
    *(_QWORD *)&v151 = v35;
    *((_QWORD *)&v151 + 1) = v35 + 2;
    v36 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>(a2, (uint64_t *)&v151, (uint64_t)ScaledElementWise);
    if ((_QWORD)v151)
    {
      *((_QWORD *)&v151 + 1) = v151;
      operator delete((void *)v151);
    }
    if ((v36 & 1) == 0)
      ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddEdge() for scaledEW(sub)");
  }
  else
  {
    ScaledElementWise = (ZinIrOpLayer *)v6;
  }
  v37 = a1[2];
  v38 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ScaledElementWise + 32))(ScaledElementWise, 0, 0);
  ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v37, (uint64_t)(a1 + 24), v38, 3, 0, 0, 1, 1.4427, 0.0);
  if (!ConstScaleAndBiasGOC)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): ZinBuilder failed to create goc_layer");
  v40 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ScaledElementWise + 32))(ScaledElementWise, 0, 0);
  Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v40);
  v43 = v42;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1[2] + 160));
  v45 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v46 = *(_OWORD *)(v40 + 64);
  v166 = *(_OWORD *)(v40 + 48);
  v47 = a1[2] + 176;
  v139 = v45;
  v140 = v47;
  v142 = 0;
  v143 = 0;
  v141 = 0;
  LODWORD(v144) = 0;
  if (v43)
    v48 = Interleave;
  else
    v48 = 1;
  LODWORD(v165) = *(_DWORD *)(v40 + 88);
  v167 = v46;
  v168 = *(_QWORD *)(v40 + 80);
  v169 = 0;
  v170 = v48;
  v171 = 1;
  v172 = 0;
  v173 = 0;
  v176 = 0;
  v174 = 0;
  v175 = 0;
  v121 = 0;
  v119 = 0;
  v120 = 0;
  v122 = 0u;
  v123 = 0u;
  v124 = -1;
  __p = &unk_24C01BA60;
  v118 = 0;
  v125 = 1;
  v126 = 1069066811;
  v127 = 1;
  v128 = 0;
  v129 = 0;
  v130 = -1;
  v131 = -1;
  v132 = 0;
  v133 = -1;
  v134 = -1;
  ZinGOCValidator<ZinIrGOCUnitInfo,ZinIrTensorInfo>::ZinGOCValidator((uint64_t)&v151, (uint64_t)&v139, (uint64_t)&__p, (__int128 *)&v165);
  ZinUnitValidator::ValidateInput<ZinIrTensorInfo>((uint64_t)&v151, *((uint64_t *)&v153 + 1), (uint64_t)&v154 + 8);
  if (*((_QWORD *)&v152 + 1))
    ZinAssertImpl("Error: GOC validation failed.");
  *(_QWORD *)&v151 = &unk_24C01A618;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v162);
  *(_QWORD *)&v151 = &unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v151 + 8, (_QWORD *)v152);
  ZinIrUnitInfo::~ZinIrUnitInfo(&__p);
  if (SHIBYTE(v143) < 0)
    operator delete(v141);
  v165 = (void **)a1;
  __p = &v165;
  v118 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v151, &__p);
  v49 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, ConstScaleAndBiasGOC, (ZinIrOpLayer ***)&v151);
  *(_QWORD *)&v151 = &unk_24C02BB18;
  if (*((_QWORD *)&v151 + 1))
  {
    *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
    operator delete(*((void **)&v151 + 1));
  }
  if (!v49)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddNode() for goc");
  if ((ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)ScaledElementWise, (uint64_t)ConstScaleAndBiasGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddEdge() for goc");
  v50 = ZinIrActivationParams::ZinIrActivationParams((uint64_t)&__p, 21);
  v51 = a1[2];
  v52 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, double))(*(_QWORD *)ScaledElementWise + 32))(ScaledElementWise, 0, 0, v50);
  v53 = *(_OWORD *)(v52 + 64);
  v115[0] = *(_OWORD *)(v52 + 48);
  v115[1] = v53;
  v116 = *(_QWORD *)(v52 + 80);
  Activation = (ZinIrOpLayer *)ZinBuilder::CreateActivation(v51, (uint64_t)(a1 + 24), (uint64_t)v115, 3, (uint64_t)&__p);
  if (!Activation)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): ZinBuilder failed to create activation_exp");
  v55 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ConstScaleAndBiasGOC + 32))(ConstScaleAndBiasGOC, 0, 0);
  v56 = ZinIrTensor::GetInterleave((ZinIrTensor *)v55);
  v58 = v57;
  v59 = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1[2] + 160));
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
  v61 = *(_OWORD *)(v55 + 64);
  v166 = *(_OWORD *)(v55 + 48);
  v62 = a1[2] + 176;
  v110[0] = v60;
  v110[1] = v62;
  v112 = 0;
  v113 = 0;
  v111 = 0;
  v114 = 0;
  if (v58)
    v63 = v56;
  else
    v63 = 1;
  LODWORD(v165) = *(_DWORD *)(v55 + 88);
  v167 = v61;
  v168 = *(_QWORD *)(v55 + 80);
  v169 = 0;
  v170 = v63;
  v171 = 1;
  v172 = 0;
  v173 = 0;
  v176 = 0;
  v174 = 0;
  v175 = 0;
  LODWORD(v143) = 0;
  v141 = 0;
  v142 = 0;
  v144 = 0u;
  v145 = 0u;
  v146 = -1;
  v139 = &unk_24C01EFE0;
  v140 = 0;
  v148 = xmmword_207A8A4B0;
  __asm { FMOV            V0.2S, #1.0 }
  v149 = _D0;
  v150 = 0;
  v147 = 16;
  ZinNeuronValidator<ZinIrNeuronUnitInfo,ZinIrTensorInfo>::ZinNeuronValidator((uint64_t)&v151, (uint64_t)v110, (uint64_t)&v139, (__int128 *)&v165);
  ZinUnitValidator::ValidateInput<ZinIrTensorInfo>((uint64_t)&v151, *((uint64_t *)&v153 + 1), (uint64_t)&v154 + 8);
  ZinNeuronValidator<ZinIrNeuronUnitInfo,ZinIrTensorInfo>::ValidateType((uint64_t)&v151, *(_QWORD *)v153);
  if (*((_QWORD *)&v152 + 1))
    ZinAssertImpl("Error: Activation(Exp2) validation failed.");
  *(_QWORD *)&v151 = &unk_24C01E6A0;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v162);
  *(_QWORD *)&v151 = &unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v151 + 8, (_QWORD *)v152);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v139);
  if (SHIBYTE(v113) < 0)
    operator delete(v111);
  v139 = a1;
  v165 = &v139;
  *(_QWORD *)&v166 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v151, &v165);
  v69 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, Activation, (ZinIrOpLayer ***)&v151);
  *(_QWORD *)&v151 = &unk_24C02BB18;
  if (*((_QWORD *)&v151 + 1))
  {
    *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
    operator delete(*((void **)&v151 + 1));
  }
  if (!v69)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddNode() for activation(exp2)");
  if ((ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)ConstScaleAndBiasGOC, (uint64_t)Activation, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddEdge() for activation(exp2)");
  v70 = a1[2];
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Activation + 80))(&v151, Activation, 0, 0);
  v71 = operator new(0x78uLL);
  *(_QWORD *)&v166 = (char *)v71 + 120;
  *((_QWORD *)&v166 + 1) = (char *)v71 + 120;
  v72 = v156;
  v71[4] = v155;
  v71[5] = v72;
  v71[6] = v157;
  *((_DWORD *)v71 + 28) = v158;
  v73 = v152;
  *v71 = v151;
  v71[1] = v73;
  v74 = v154;
  v71[2] = v153;
  v71[3] = v74;
  v165 = (void **)v71;
  v75 = (ZinIrOpLayer *)ZinBuilder::CreateReduction(v70, (uint64_t)(a1 + 24), (uint64_t *)&v165, 3, 0, ReductionDimensions, 1, 0, 1.0, 0.0, 0, 0);
  if (v165)
  {
    *(_QWORD *)&v166 = v165;
    operator delete(v165);
  }
  if (!v75)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): ZinBuilder failed to create reduction_sum");
  v139 = a1;
  v165 = &v139;
  *(_QWORD *)&v166 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v151, &v165);
  v76 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v75, (ZinIrOpLayer ***)&v151);
  *(_QWORD *)&v151 = &unk_24C02BB18;
  if (*((_QWORD *)&v151 + 1))
  {
    *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
    operator delete(*((void **)&v151 + 1));
  }
  if (!v76)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddNode() for reduction");
  if ((ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)Activation, (uint64_t)v75, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddEdge() for reduction");
  if (*(_QWORD *)(v104 + 40) == 1)
  {
    LODWORD(v151) = 2;
    if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v103, (int *)&v151))
    {
      if (*(_BYTE *)(v104 + 56))
        *(_BYTE *)(*((_QWORD *)v75 + 8) + 49) = 1;
    }
  }
  v77 = a1[2];
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v75 + 80))(&v151, v75, 0, 0);
  v78 = operator new(0x78uLL);
  *(_QWORD *)&v166 = (char *)v78 + 120;
  *((_QWORD *)&v166 + 1) = (char *)v78 + 120;
  v79 = v156;
  v78[4] = v155;
  v78[5] = v79;
  v78[6] = v157;
  *((_DWORD *)v78 + 28) = v158;
  v80 = v152;
  *v78 = v151;
  v78[1] = v80;
  v81 = v154;
  v78[2] = v153;
  v78[3] = v81;
  v165 = (void **)v78;
  v82 = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast(v77, (uint64_t)(a1 + 24), (uint64_t *)&v165, (uint64_t)v135, 3);
  if (v165)
  {
    *(_QWORD *)&v166 = v165;
    operator delete(v165);
  }
  if (!v82)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): ZinBuilder failed to create ew_broadcast2");
  v139 = a1;
  v165 = &v139;
  *(_QWORD *)&v166 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v151, &v165);
  v83 = ZinIrOpLayerGraph::AddNode(v106, v82, (ZinIrOpLayer ***)&v151);
  *(_QWORD *)&v151 = &unk_24C02BB18;
  if (*((_QWORD *)&v151 + 1))
  {
    *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
    operator delete(*((void **)&v151 + 1));
  }
  if (!v83)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddNode() for broadcast");
  if ((ZinIrOpLayerGraph::AddEdge((uint64_t)v106, (uint64_t)v75, (uint64_t)v82, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddEdge() for broadcast");
  v84 = a1[2];
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v82 + 80))(&v151, v82, 0, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Activation + 80))((_QWORD *)&v158 + 1, Activation, 0, 0);
  v85 = operator new(0xF0uLL);
  *((_QWORD *)&v166 + 1) = v85 + 15;
  v86 = v164[0];
  v85[12] = v163;
  v85[13] = v86;
  *(_OWORD *)((char *)v85 + 220) = *(_OWORD *)((char *)v164 + 12);
  v87 = v160;
  v85[8] = v159;
  v85[9] = v87;
  v88 = v162;
  v85[10] = v161;
  v85[11] = v88;
  v89 = v156;
  v85[4] = v155;
  v85[5] = v89;
  v90 = v158;
  v85[6] = v157;
  v85[7] = v90;
  v91 = v152;
  *v85 = v151;
  v85[1] = v91;
  v92 = v154;
  v85[2] = v153;
  v85[3] = v92;
  v165 = (void **)v85;
  *(_QWORD *)&v166 = v85 + 15;
  v93 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0, 0);
  v94 = (ZinIrOpLayer *)ZinBuilder::CreateScaledElementWise(v84, (uint64_t)(a1 + 24), 1.0, 1.0, 0.0, (uint64_t)&v165, (__int128 *)(v93 + 48), 3, 1, 0, 0);
  if (v165)
  {
    *(_QWORD *)&v166 = v165;
    operator delete(v165);
  }
  if (!v94)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): ZinBuilder failed to create element_wise_mult");
  v95 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0, 0);
  v96 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v96, &v109);
  ZinIrTensor::SetTensorMirInfo(v95, &v109);
  v97 = v109;
  v109 = 0;
  if (v97)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v109, v97);
  v139 = a1;
  v165 = &v139;
  *(_QWORD *)&v166 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v151, &v165);
  v98 = ZinIrOpLayerGraph::AddNode(v106, v94, (ZinIrOpLayer ***)&v151);
  *(_QWORD *)&v151 = &unk_24C02BB18;
  if (*((_QWORD *)&v151 + 1))
  {
    *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
    operator delete(*((void **)&v151 + 1));
  }
  if (!v98)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddNode() for scaledEW(mul)");
  v99 = operator new(0x10uLL);
  *(_QWORD *)&v152 = v99 + 2;
  *v99 = v82;
  v99[1] = Activation;
  *(_QWORD *)&v151 = v99;
  *((_QWORD *)&v151 + 1) = v99 + 2;
  v100 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v106, (uint64_t *)&v151, (uint64_t)v94);
  if ((_QWORD)v151)
  {
    *((_QWORD *)&v151 + 1) = v151;
    operator delete((void *)v151);
  }
  if ((v100 & 1) == 0)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to AddEdge() for scaledEW(mul)");
  memset(v107, 0, sizeof(v107));
  v108 = 1065353216;
  v101 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v106, (uint64_t **)a1, v94, v107);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v107);
  if ((v101 & 1) == 0)
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed in moving outgoing edges.");
  if (!ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v106, (ZinIrOpLayer *)a1, 0))
    ZinAssertImpl("ZinSoftmaxLayer::Lower(): Failed to RemoveNode()");
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v135);
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  return 0;
}

void sub_2070620F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60)
{
  void *v61;

  v61 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v61;
    operator delete(v61);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a54);
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  _Unwind_Resume(a1);
}

_QWORD *ZinSoftmaxLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  const ZinIrOpLayerOpCode *v7;
  ZinIrOpLayerOpCode *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t InputTensor;
  int v16;
  __int128 v17;
  char *v18;
  __int128 v19;
  uint64_t Hal;
  uint64_t *GroupId;
  _BYTE v23[44];
  void *__p;
  void *v25;
  char *v26;
  uint64_t v27[2];
  _BYTE v28[23];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)operator new();
  v7 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v8 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, v7);
  *(_QWORD *)v8 = &unk_24C01BBD8;
  std::unordered_set<ZinIrDimension>::unordered_set((uint64_t)v8 + 16, (uint64_t)v7 + 16);
  *((_BYTE *)v8 + 56) = *((_BYTE *)v7 + 56);
  *(_QWORD *)v23 = v8;
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v27[0] = v9;
  v27[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinSoftmaxLayer::ZinSoftmaxLayer(v6, (uint64_t *)v23, v27, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (*(_QWORD *)v23)
    (*(void (**)(_QWORD))(**(_QWORD **)v23 + 8))(*(_QWORD *)v23);
  InputTensor = ZinIrOpLayer::GetInputTensor(a1, 0);
  v16 = *(_DWORD *)(InputTensor + 88);
  v17 = *(_OWORD *)(InputTensor + 64);
  *(_OWORD *)&v23[4] = *(_OWORD *)(InputTensor + 48);
  *(_OWORD *)&v23[20] = v17;
  *(_QWORD *)&v23[36] = *(_QWORD *)(InputTensor + 80);
  memset(&v28[3], 0, 20);
  v18 = (char *)operator new(0x78uLL);
  *((_OWORD *)v18 + 2) = *(_OWORD *)&v23[28];
  v19 = *(_OWORD *)v23;
  *(_OWORD *)(v18 + 20) = *(_OWORD *)&v23[16];
  v25 = v18 + 120;
  v26 = v18 + 120;
  *(_DWORD *)v18 = v16;
  *(_OWORD *)(v18 + 4) = v19;
  *((_WORD *)v18 + 24) = 0;
  *(int64x2_t *)(v18 + 56) = vdupq_n_s64(1uLL);
  v18[72] = 0;
  v18[92] = 0;
  *(_OWORD *)(v18 + 93) = *(_OWORD *)v28;
  *(_QWORD *)(v18 + 108) = *(_QWORD *)&v28[15];
  __p = v18;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a1 + 2) + 160));
  (*(void (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  ZinIrOpLayer::ValidateSemantics((uint64_t)v6);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_20706250C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  MEMORY[0x20BD002F8](v19, 0x10B3C409D855DA1);
  _Unwind_Resume(a1);
}

uint64_t ZinSoftmaxLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  uint64_t result;

  if (!a3[1885])
    ZinAssertImpl("Softmax is not supported by this ANE architecture");
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  if (!*(_QWORD *)(*((_QWORD *)a1 + 8) + 40))
    ZinAssertImpl("Softmax with empty axes specified is invalid");
  if (a2[1] - *a2 != 120)
    ZinAssertImpl("Softmax layer must have only one single input.");
  v5 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  result = IsFloatFormat(*(_DWORD *)(v5 + 88));
  if ((result & 1) == 0)
    ZinAssertImpl("Softmax output tensor must be in Float format");
  return result;
}

_QWORD *ZinSoftmaxLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "SOFTMAX");
}

uint64_t ZinSoftmaxLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_2070626F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinSoftmaxLayer::~ZinSoftmaxLayer(ZinSoftmaxLayer *this)
{
  *(_QWORD *)this = off_24C01B398;
  *((_QWORD *)this + 24) = off_24C01FBB0;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  ZinIrOpLayer::~ZinIrOpLayer(this);
}

{
  *(_QWORD *)this = off_24C01B398;
  *((_QWORD *)this + 24) = off_24C01FBB0;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  ZinIrOpLayer::~ZinIrOpLayer(this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrSoftmaxInfo::~ZinIrSoftmaxInfo(ZinIrSoftmaxInfo *this)
{
  *(_QWORD *)this = &unk_24C01BBD8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 16);
  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  *(_QWORD *)this = &unk_24C01BBD8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 16);
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrKernel::ComputeSummationOfKSubChannelWeightValues(ZinIrKernel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  float *v24;
  int v25;
  uint64_t v27;
  char v28;
  int ValueAsInt32;
  float v30;
  float v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  double v35;
  int64_t v36;
  int64_t v37;
  float v38;
  unint64_t v39;
  float *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  float *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  unint64_t v67[6];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *((_QWORD *)this + 31);
  v55 = *((_QWORD *)this + 32);
  v5 = *((_QWORD *)this + 35);
  v6 = *((int *)this + 87);
  v65 = *((int *)this + 85);
  v66 = *((_QWORD *)this + 34);
  v60 = *((int *)this + 86);
  v61 = *((_QWORD *)this + 33);
  std::vector<float>::reserve((void **)a2, v4 * v65 * v60 * v6);
  if (ZinKernelFormatIsUnity(*((_DWORD *)this + 44)))
  {
    if ((*((_BYTE *)this + 448) & 2) != 0)
      ZinAssertImpl("Unity kernel can't have zero_point");
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = (_QWORD *)(a2 + 16);
      v50 = v4;
      do
      {
        v9 = 1.0;
        if ((*((_BYTE *)this + 448) & 8) != 0)
        {
          ZinIrVector::GetAt<float>(*((_QWORD *)this + 71), v7);
          v9 = v10;
        }
        v53 = v7;
        v58 = v6;
        if ((int)v6 >= 1)
        {
          do
          {
            v56 = v58--;
            if ((int)v60 >= 1)
            {
              v11 = ceilf((float)(v5 - v58) / (float)(int)v6);
              v63 = v60;
              do
              {
                v12 = v63--;
                if ((int)v65 >= 1)
                {
                  v13 = v65;
                  v14 = ceilf((float)(v61 - v63) / (float)(int)v60) * (float)v55;
                  v15 = *(float **)(a2 + 8);
                  do
                  {
                    v16 = v9 * (float)(v11 * (float)(v14 * ceilf((float)(v66 - (v13 - 1)) / (float)(int)v65)));
                    if ((unint64_t)v15 >= *v8)
                    {
                      v18 = *(float **)a2;
                      v19 = ((uint64_t)v15 - *(_QWORD *)a2) >> 2;
                      v20 = v19 + 1;
                      if ((unint64_t)(v19 + 1) >> 62)
                        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                      v21 = *v8 - (_QWORD)v18;
                      if (v21 >> 1 > v20)
                        v20 = v21 >> 1;
                      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
                        v22 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v22 = v20;
                      if (v22)
                      {
                        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(a2 + 16, v22);
                        v18 = *(float **)a2;
                        v15 = *(float **)(a2 + 8);
                      }
                      else
                      {
                        v23 = 0;
                      }
                      v24 = (float *)&v23[4 * v19];
                      *v24 = v16;
                      v17 = v24 + 1;
                      while (v15 != v18)
                      {
                        v25 = *((_DWORD *)v15-- - 1);
                        *((_DWORD *)v24-- - 1) = v25;
                      }
                      *(_QWORD *)a2 = v24;
                      *(_QWORD *)(a2 + 8) = v17;
                      *(_QWORD *)(a2 + 16) = &v23[4 * v22];
                      if (v18)
                        operator delete(v18);
                    }
                    else
                    {
                      *v15 = v16;
                      v17 = v15 + 1;
                    }
                    *(_QWORD *)(a2 + 8) = v17;
                    v15 = v17;
                  }
                  while (v13-- > 1);
                }
              }
              while (v12 >= 2);
            }
          }
          while (v56 >= 2);
        }
        v7 = v53 + 1;
      }
      while (v53 + 1 != v50);
    }
  }
  else if (v4 >= 1)
  {
    v27 = 0;
    v51 = v4;
    do
    {
      v28 = *((_BYTE *)this + 448);
      if ((v28 & 2) != 0)
      {
        ValueAsInt32 = ZinIrVector::GetValueAsInt32(*((ZinIrVector **)this + 74), v27);
        v28 = *((_BYTE *)this + 448);
      }
      else
      {
        ValueAsInt32 = 0;
      }
      v30 = 1.0;
      if ((v28 & 8) != 0)
      {
        ZinIrVector::GetAt<float>(*((_QWORD *)this + 71), v27);
        v30 = v31;
      }
      if ((int)v6 >= 1)
      {
        v32 = v6;
        do
        {
          v62 = v32;
          v64 = v32 - 1;
          v33 = v60;
          if ((int)v60 >= 1)
          {
            do
            {
              v52 = v33--;
              if ((int)v65 >= 1)
              {
                v59 = v65;
                v54 = v33;
                do
                {
                  v57 = v59--;
                  if (v55 < 1)
                  {
                    v35 = 0.0;
                  }
                  else
                  {
                    v34 = 0;
                    v35 = 0.0;
                    do
                    {
                      if (v61 >= v52)
                      {
                        do
                        {
                          v36 = v59;
                          if (v66 >= v57)
                          {
                            do
                            {
                              v37 = v64;
                              if (v5 >= v62)
                              {
                                do
                                {
                                  v67[0] = v27;
                                  v67[1] = v34;
                                  v67[2] = v33;
                                  v67[3] = v36;
                                  v67[4] = v37;
                                  v35 = v35
                                      + (float)(v30
                                              * (float)(ZinIrWeight::GetWeightValueAsFloat(*((_QWORD *)this + 73), v67, ValueAsInt32)- (float)ValueAsInt32));
                                  v37 += v6;
                                }
                                while (v5 > v37);
                              }
                              v36 += v65;
                            }
                            while (v66 > v36);
                          }
                          v33 += v60;
                        }
                        while (v61 > v33);
                      }
                      ++v34;
                      v33 = v54;
                    }
                    while (v34 != v55);
                  }
                  v38 = v35;
                  v40 = *(float **)(a2 + 8);
                  v39 = *(_QWORD *)(a2 + 16);
                  if ((unint64_t)v40 >= v39)
                  {
                    v42 = *(float **)a2;
                    v43 = ((uint64_t)v40 - *(_QWORD *)a2) >> 2;
                    v44 = v43 + 1;
                    v4 = v51;
                    if ((unint64_t)(v43 + 1) >> 62)
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    v45 = v39 - (_QWORD)v42;
                    if (v45 >> 1 > v44)
                      v44 = v45 >> 1;
                    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                      v46 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v46 = v44;
                    if (v46)
                    {
                      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(a2 + 16, v46);
                      v42 = *(float **)a2;
                      v40 = *(float **)(a2 + 8);
                    }
                    else
                    {
                      v47 = 0;
                    }
                    v48 = (float *)&v47[4 * v43];
                    *v48 = v38;
                    v41 = v48 + 1;
                    if (v40 == v42)
                    {
                      v33 = v54;
                    }
                    else
                    {
                      v33 = v54;
                      do
                      {
                        v49 = *((_DWORD *)v40-- - 1);
                        *((_DWORD *)v48-- - 1) = v49;
                      }
                      while (v40 != v42);
                    }
                    *(_QWORD *)a2 = v48;
                    *(_QWORD *)(a2 + 8) = v41;
                    *(_QWORD *)(a2 + 16) = &v47[4 * v46];
                    if (v42)
                      operator delete(v42);
                  }
                  else
                  {
                    *v40 = v38;
                    v41 = v40 + 1;
                    v4 = v51;
                  }
                  *(_QWORD *)(a2 + 8) = v41;
                }
                while (v57 > 1);
              }
            }
            while (v52 >= 2);
          }
          v32 = v64;
        }
        while (v62 >= 2);
      }
      ++v27;
    }
    while (v27 != v4);
  }
}

void sub_207062D5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinIrKernel::HasUnityWeight(ZinIrKernel *this)
{
  return ZinKernelFormatIsUnity(*((_DWORD *)this + 44));
}

uint64_t ZinIrKernel::HasZeroPoint(ZinIrKernel *this)
{
  return (*((unsigned __int8 *)this + 448) >> 1) & 1;
}

uint64_t ZinIrKernel::HasScale(ZinIrKernel *this)
{
  return (*((unsigned __int8 *)this + 448) >> 3) & 1;
}

uint64_t ZinIrKernel::HasNonUnityValue(ZinIrKernel *this)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t result;
  unint64_t v14[5];

  v1 = (uint64_t *)*((_QWORD *)this + 73);
  if (v1[7] < 1)
    return 0;
  v3 = 0;
  while (1)
  {
    v4 = (*((_BYTE *)this + 448) & 2) != 0 ? ZinIrVector::GetValueAsInt32(*((ZinIrVector **)this + 74), v3) : 0;
    v5 = v1[8];
    if (v5 >= 1)
      break;
LABEL_22:
    result = 0;
    if (v1[7] <= ++v3)
      return result;
  }
  v6 = 0;
  v7 = v1[9];
  while (v7 < 1)
  {
LABEL_21:
    if (v5 <= (uint64_t)++v6)
      goto LABEL_22;
  }
  v8 = 0;
  v9 = v1[10];
  while (v9 < 1)
  {
LABEL_19:
    if (v7 <= (uint64_t)++v8)
    {
      v5 = v1[8];
      goto LABEL_21;
    }
  }
  v10 = 0;
  v11 = v1[11];
  while (v11 < 1)
  {
LABEL_17:
    if (v9 <= (uint64_t)++v10)
    {
      v7 = v1[9];
      goto LABEL_19;
    }
  }
  v12 = 0;
  while (1)
  {
    v14[0] = v3;
    v14[1] = v6;
    v14[2] = v8;
    v14[3] = v10;
    v14[4] = v12;
    if (ZinIrWeight::GetWeightValueAsFloat(*((_QWORD *)this + 73), v14, v4) != 1.0)
      return 1;
    ++v12;
    v11 = v1[11];
    if (v11 <= v12)
    {
      v9 = v1[10];
      goto LABEL_17;
    }
  }
}

BOOL ZinIrKernel::ShouldUseSparseBinaryForCompression(ZinIrKernel *this)
{
  BOOL v2;
  _BOOL8 result;
  uint64_t v4;

  result = 0;
  if ((*((_BYTE *)this + 448) & 4) != 0)
  {
    v4 = 0;
    v2 = !ZinKernelFormatGetBitDepth(*((_DWORD *)this + 44), &v4) && v4 == 1;
    if (v2 && (*((_BYTE *)this + 448) & 0x22) == 0)
      return 1;
  }
  return result;
}

BOOL ZinIrKernel::HasPaletteThatRequiresCompression(ZinIrKernel *this)
{
  _BOOL4 v2;
  uint64_t v3;
  _BOOL4 v4;
  _BOOL8 result;

  v2 = ZinKernelDescriptor::KernelExpands((ZinIrKernel *)((char *)this + 176));
  v3 = *((_QWORD *)this + 73);
  if (!v3)
    return 0;
  v4 = v2;
  result = ZinKernelFormatIsPalette(*(_DWORD *)(v3 + 8));
  if (!result)
    return result;
  if (((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 73) + 136) + 184))(*(_QWORD *)(*((_QWORD *)this + 73) + 136)) | v4) != 1)
    return 0;
  if ((ZinIrWeight::IsFirstPaletteLUTEntryNonZero(*((ZinIrWeight **)this + 73)) & 1) != 0)
    return 1;
  return (*((unsigned __int8 *)this + 448) >> 1) & 1;
}

uint64_t ZinIrKernel::IsMutable(ZinIrKernel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *((_QWORD *)this + 71);
  if (v1)
    LOBYTE(v1) = *(_BYTE *)(v1 + 152) != 0;
  v2 = *((_QWORD *)this + 72);
  if (v2)
    LOBYTE(v2) = *(_BYTE *)(v2 + 152) != 0;
  v3 = *((_QWORD *)this + 73);
  if (v3)
    LODWORD(v3) = *(unsigned __int8 *)(v3 + 152) != 0;
  v4 = *((_QWORD *)this + 74);
  if (v4)
    LODWORD(v4) = *(unsigned __int8 *)(v4 + 152) != 0;
  v5 = v3 | v4;
  if (((v1 | v2) & 1) != 0)
    return 1;
  else
    return v5;
}

uint64_t ZinIrKernel::AddWeightsToSHA(ZinIrKernel *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t i;
  _QWORD *PaletteData;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  unsigned __int16 v55;
  int v56;
  uint64_t data;
  _QWORD v58[5];
  int v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 73);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 8);
  }
  else
  {
    v4 = *((_QWORD *)this + 75);
    if (v4)
      v3 = ZinTensorFormatToKernelFormat(*(_DWORD *)(v4 + 88));
    else
      v3 = 0;
  }
  v59 = v3;
  v60 = xmmword_207AB449C;
  LODWORD(v61) = 6;
  std::unordered_set<ZinKernelFormat>::unordered_set((uint64_t)v58, (int *)&v60, 5);
  if (!ZinKernelFormatIsUnity(*((_DWORD *)this + 44)))
  {
    if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v58, &v59)&& !ZinKernelFormatIsPalette(v59))
    {
      v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v30)
        ZinIrKernel::AddWeightsToSHA(v30, v31, v32, v33, v34, v35, v36, v37);
      goto LABEL_45;
    }
    v6 = (_QWORD *)*((_QWORD *)this + 73);
    if ((uint64_t)v6[7] >= 1)
    {
      v7 = 0;
      do
      {
        if ((uint64_t)v6[8] >= 1)
        {
          v8 = 0;
          do
          {
            if ((uint64_t)v6[9] >= 1)
            {
              v9 = 0;
              do
              {
                if ((uint64_t)v6[10] >= 1)
                {
                  v10 = 0;
                  do
                  {
                    if ((uint64_t)v6[11] >= 1)
                    {
                      v11 = 0;
                      do
                      {
                        *(_QWORD *)&v60 = v7;
                        *((_QWORD *)&v60 + 1) = v8;
                        v61 = v9;
                        v62 = v10;
                        v63 = v11;
                        switch(v59)
                        {
                          case 0:
                          case 3:
                          case 28:
                          case 29:
                          case 30:
                          case 31:
                          case 32:
                            v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            if (v22)
                              ZinIrKernel::AddWeightsToSHA(v22, v23, v24, v25, v26, v27, v28, v29);
                            goto LABEL_45;
                          case 1:
                            LOBYTE(data) = 0;
                            LOBYTE(data) = ZinIrWeightBase::GetAt<signed char>((uint64_t)v6);
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 1u);
                            break;
                          case 2:
                          case 27:
                            LOBYTE(data) = 0;
                            LOBYTE(data) = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v6);
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 1u);
                            break;
                          case 4:
                            LOWORD(data) = 0;
                            ZinIrWeightBase::GetAt<half>((uint64_t)v6);
                            LOWORD(data) = v12;
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 2u);
                            break;
                          case 5:
                            LOBYTE(data) = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v6);
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 1u);
                            break;
                          case 6:
                            LODWORD(data) = 0;
                            ZinIrWeightBase::GetAt<float>((uint64_t)v6);
                            LODWORD(data) = v13;
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 4u);
                            break;
                          case 7:
                          case 8:
                          case 9:
                          case 10:
                            LOBYTE(data) = 0;
                            LOBYTE(data) = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>((uint64_t)v6) & 1;
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 1u);
                            break;
                          case 11:
                          case 12:
                          case 13:
                          case 14:
                            LOBYTE(data) = 0;
                            LOBYTE(data) = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>((uint64_t)v6) & 3;
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 1u);
                            break;
                          case 15:
                          case 16:
                          case 17:
                          case 18:
                            LOBYTE(data) = 0;
                            LOBYTE(data) = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>((uint64_t)v6) & 7;
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 1u);
                            break;
                          case 19:
                          case 20:
                          case 21:
                          case 22:
                            LOBYTE(data) = 0;
                            LOBYTE(data) = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>((uint64_t)v6) & 0xF;
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 1u);
                            break;
                          case 23:
                          case 24:
                          case 25:
                          case 26:
                            LOBYTE(data) = 0;
                            LOBYTE(data) = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>((uint64_t)v6) & 0x3F;
                            CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &data, 1u);
                            break;
                          default:
                            break;
                        }
                        ++v11;
                        v6 = (_QWORD *)*((_QWORD *)this + 73);
                      }
                      while (v11 < v6[11]);
                    }
                    ++v10;
                  }
                  while (v10 < v6[10]);
                }
                ++v9;
              }
              while (v9 < v6[9]);
            }
            ++v8;
          }
          while (v8 < v6[8]);
        }
        ++v7;
      }
      while (v7 < v6[7]);
    }
    if (!ZinKernelFormatIsPalette(v59))
      goto LABEL_7;
    *(_QWORD *)&v60 = 0;
    data = 0;
    if (ZinKernelGetPaletteLUTSize(v59, *((_QWORD *)this + 52), &v60))
    {
      v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v14)
        ZinIrKernel::AddWeightsToSHA(v14, v15, v16, v17, v18, v19, v20, v21);
      goto LABEL_45;
    }
    v56 = 0;
    if (ZinKernelFormatGetPaletteFormat(v59, &v56))
    {
      v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v39)
LABEL_49:
        ZinIrKernel::AddWeightsToSHA(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      if (!ZinKernelFormatGetBitDepth(v56, &data))
      {
        v47 = *((_QWORD *)this + 73);
        if (*(_QWORD *)(v47 + 288) != *(_QWORD *)(v47 + 280))
        {
          v48 = 0;
          v49 = 8 * (uint64_t)v60 / data;
          do
          {
            if (v49 >= 1)
            {
              for (i = 0; i != v49; ++i)
              {
                switch(v56)
                {
                  case 1:
                    LOBYTE(v55) = 0;
                    PaletteData = (_QWORD *)ZinIrWeight::GetPaletteData(*((ZinIrWeight **)this + 73), v48);
                    LOBYTE(v55) = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*PaletteData + 72))(*PaletteData, i);
                    CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &v55, 1u);
                    break;
                  case 2:
                    LOBYTE(v55) = 0;
                    v52 = (_QWORD *)ZinIrWeight::GetPaletteData(*((ZinIrWeight **)this + 73), v48);
                    LOBYTE(v55) = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v52 + 120))(*v52, i);
                    CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &v55, 1u);
                    break;
                  case 4:
                    v55 = 0;
                    v53 = (_QWORD *)ZinIrWeight::GetPaletteData(*((ZinIrWeight **)this + 73), v48);
                    v55 = ((__n128 (*)(_QWORD, uint64_t))*(_QWORD *)(*(_QWORD *)*v53 + 56))(*v53, i).n128_u16[0];
                    CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &v55, 2u);
                    break;
                  case 5:
                    v54 = (_QWORD *)ZinIrWeight::GetPaletteData(*((ZinIrWeight **)this + 73), v48);
                    LOBYTE(v55) = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v54 + 88))(*v54, i);
                    CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), &v55, 1u);
                    break;
                  default:
                    continue;
                }
              }
              v47 = *((_QWORD *)this + 73);
            }
            ++v48;
          }
          while (v48 < (uint64_t)(*(_QWORD *)(v47 + 288) - *(_QWORD *)(v47 + 280)) >> 4);
        }
        goto LABEL_7;
      }
      v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v39)
        goto LABEL_49;
    }
LABEL_45:
    v5 = 3;
    goto LABEL_46;
  }
LABEL_7:
  v5 = 0;
LABEL_46:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v58);
  return v5;
}

void sub_20706360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrKernel::UpdateSHAContextForMemberVariables(SHAUpdateMode)::$_0::operator()(std::string *a1, int a2, CC_SHA256_CTX *a3)
{
  std::string::size_type *p_size;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  CC_LONG v11;
  std::string *v12;
  CC_LONG v13;
  std::string v14;
  std::string __p;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  p_size = &a1[1].__r_.__value_.__l.__size_;
  if (a1[1].__r_.__value_.__l.__size_)
  {
    ZinGetFileNameOnly(a1, &__p);
    std::to_string(&v14, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = std::string::insert(&v14, 0, (const std::string::value_type *)p_p, size);
    v10 = v9->__r_.__value_.__r.__words[0];
    v16[0] = v9->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v10;
    __p.__r_.__value_.__l.__size_ = v16[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v16 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v11;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v14.__r_.__value_.__l.__data_);
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v10 = __p.__r_.__value_.__r.__words[0];
    }
    if ((v11 & 0x80u) == 0)
      v12 = &__p;
    else
      v12 = (std::string *)v10;
    if ((v11 & 0x80u) == 0)
      v13 = v11;
    else
      v13 = __p.__r_.__value_.__r.__words[1];
    CC_SHA256_Update(a3, v12, v13);
    CC_SHA256_Update(a3, &a1[1], 8u);
    CC_SHA256_Update(a3, p_size, 8u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2070637E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void ZinIrKernel::AddVectorToSHA(ZinIrKernel *this, const ZinIrVector *a2)
{
  void *data;
  void *v4;

  ZinIrVector::GetValuesAsVector<float>((uint64_t)a2, *((_QWORD *)a2 + 7), 1, (uint64_t)&data);
  CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), data, ((_DWORD)v4 - (_DWORD)data) & 0xFFFFFFFC);
  if (data)
  {
    v4 = data;
    operator delete(data);
  }
}

void sub_207063884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrKernel::GetCurrentHash(ZinIrKernel *this@<X0>, std::string *a2@<X8>)
{
  ZinIrKernel::GetHash(this, 0, a2);
}

void ZinIrKernel::GetHash(ZinIrKernel *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *p_c;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 48))
  {
    if (*((char *)this + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
      return;
    }
    goto LABEL_13;
  }
  *(_OWORD *)md = 0u;
  v13 = 0u;
  if ((a2 & 1) != 0)
  {
    CC_SHA256_Final(md, (CC_SHA256_CTX *)((char *)this + 52));
  }
  else
  {
    v6 = *(_OWORD *)((char *)this + 100);
    v7 = *(_OWORD *)((char *)this + 132);
    *(_OWORD *)&c.wbuf[6] = *(_OWORD *)((char *)this + 116);
    *(_OWORD *)&c.wbuf[10] = v7;
    *(_QWORD *)&c.wbuf[14] = *(_QWORD *)((char *)this + 148);
    v8 = *(_OWORD *)((char *)this + 68);
    *(_OWORD *)c.count = *(_OWORD *)((char *)this + 52);
    *(_OWORD *)&c.hash[2] = v8;
    *(_OWORD *)&c.hash[6] = *(_OWORD *)((char *)this + 84);
    *(_OWORD *)&c.wbuf[2] = v6;
    CC_SHA256_Final(md, &c);
  }
  v9 = 0;
  p_c = (char *)&c;
  do
  {
    snprintf(p_c, 3uLL, "%02X", md[v9++]);
    p_c += 2;
  }
  while (v9 != 32);
  LOBYTE(c.wbuf[6]) = 0;
  if ((a2 & 1) != 0)
  {
    if (*((_BYTE *)this + 156))
    {
      std::string::__assign_external((std::string *)this + 1, (const std::string::value_type *)&c);
      *((_BYTE *)this + 156) = 0;
    }
    *((_BYTE *)this + 48) = 1;
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_13:
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
      return;
    }
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, (char *)&c);
  }
}

void ZinIrKernel::GetFinalHash(ZinIrKernel *this@<X0>, std::string *a2@<X8>)
{
  ZinIrKernel::GetHash(this, 1, a2);
}

uint64_t ZinIrKernel::GetHash(ZinIrKernel *this)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  char *v18;
  char *v19;
  char *v20;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)md = 0u;
  v23 = 0u;
  v1 = *(_OWORD *)((char *)this + 100);
  v2 = *(_OWORD *)((char *)this + 132);
  *(_OWORD *)&c.wbuf[6] = *(_OWORD *)((char *)this + 116);
  *(_OWORD *)&c.wbuf[10] = v2;
  *(_QWORD *)&c.wbuf[14] = *(_QWORD *)((char *)this + 148);
  v3 = *(_OWORD *)((char *)this + 68);
  *(_OWORD *)c.count = *(_OWORD *)((char *)this + 52);
  *(_OWORD *)&c.hash[2] = v3;
  *(_OWORD *)&c.hash[6] = *(_OWORD *)((char *)this + 84);
  *(_OWORD *)&c.wbuf[2] = v1;
  CC_SHA256_Final(md, &c);
  v4 = 0;
  v5 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  do
  {
    v6 = md[v5];
    if (v4 >= v20)
    {
      v7 = v18;
      v8 = (v4 - v18) >> 2;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v10 = v20 - v18;
      if ((v20 - v18) >> 1 > v9)
        v9 = v10 >> 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v20, v11);
        v7 = v18;
        v4 = v19;
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[4 * v8];
      *(_DWORD *)v13 = v6;
      v14 = v13 + 4;
      while (v4 != v7)
      {
        v15 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v13 - 1) = v15;
        v13 -= 4;
      }
      v18 = v13;
      v20 = &v12[4 * v11];
      if (v7)
        operator delete(v7);
      v4 = v14;
    }
    else
    {
      *(_DWORD *)v4 = v6;
      v4 += 4;
    }
    v19 = v4;
    ++v5;
  }
  while (v5 != 32);
  if (v18 == v4)
  {
    v16 = 0;
  }
  else
  {
    v16 = ZinHash(v18, (int)v4 - (int)v18);
    v4 = v18;
    if (!v18)
      return v16;
  }
  operator delete(v4);
  return v16;
}

void sub_207063C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinIrKernel::ShouldPreserveCompressionInfo(ZinIrKernel *this, const ZinIrKernel *a2, const ZinIrHalParameters *a3, ZinKernelSparsityCache *a4)
{
  float v7;

  if (!*((_BYTE *)a2 + 160))
    return 0;
  if (ZinIrKernel::HasPaletteThatRequiresCompression(a2))
    return 1;
  if (!*((_QWORD *)this + 73))
    return 0;
  ZinIrKernel::GetSparsityRatio(this, 4, a4);
  return v7 > 0.14286;
}

BOOL ZinIrKernel::IsWeightSparse(ZinIrKernel *this, char a2, BOOL a3, ZinKernelSparsityCache *a4, float a5)
{
  uint64_t v7;
  float v11;

  if (fabsf(a5) >= 1.0)
    return 0;
  v7 = *((_QWORD *)this + 73);
  if (!v7)
    return 0;
  if ((a2 & 1) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 136) + 184))(*(_QWORD *)(v7 + 136)) & 1) != 0)
  {
    return 1;
  }
  ZinIrKernel::GetSparsityRatio(this, a2, a4);
  return v11 > a5;
}

void ZinIrKernel::InitializeDescriptor(uint64_t a1, int a2, unint64_t a3)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  ZinIrVector *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;

  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v4 = *(_DWORD *)(a1 + 616) > 1u;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 528);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a1 + 536);
  v5 = *(unsigned __int8 *)(a1 + 552);
  v6 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 400) = v6;
  v7 = v4 | ((_BYTE)v5 << 7) | (*(_BYTE *)(a1 + 553) << 6);
  *(_BYTE *)(a1 + 448) = v7;
  v8 = *(_QWORD *)(a1 + 600);
  if (v8 || *(_QWORD *)(a1 + 584))
  {
    *(_DWORD *)(a1 + 176) = a2;
    *(_BYTE *)(a1 + 448) = v7 | 4;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 480);
    *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 488);
    v9 = *(_QWORD *)(a1 + 492);
    *(_DWORD *)(a1 + 348) = *(_DWORD *)(a1 + 500);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 520);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 504);
    v10 = *(_DWORD *)(a1 + 556);
    *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 540);
    *(_DWORD *)(a1 + 380) = v10;
    *(_QWORD *)(a1 + 340) = v9;
    if (v8)
    {
      if (a3 == 1)
      {
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(v8 + 72) / *(uint64_t *)(a1 + 464) / *(_QWORD *)(a1 + 456);
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(v8 + 56);
      }
      else
      {
        v15 = *(_QWORD *)(v8 + 56);
        if (v5)
          v16 = v15 / a3;
        else
          v16 = v15;
        *(_QWORD *)(a1 + 248) = v16;
        *(_QWORD *)(a1 + 256) = v15 / a3;
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 584);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(v11 + 56);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(v11 + 304);
      v13 = *(_OWORD *)(v11 + 16);
      v12 = *(_OWORD *)(v11 + 32);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(v11 + 48);
      *(_OWORD *)(a1 + 208) = v13;
      *(_OWORD *)(a1 + 224) = v12;
      if (ZinKernelFormatIsPalette(*(_DWORD *)(v11 + 8)))
      {
        if (ZinIrWeight::IsFirstPaletteLUTEntryNonZero(*(ZinIrWeight **)(a1 + 584)))
          v14 = 32;
        else
          v14 = 0;
        *(_BYTE *)(a1 + 448) = *(_BYTE *)(a1 + 448) & 0xDF | v14;
      }
    }
    v17 = *(_QWORD *)(a1 + 456);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 272) = v17;
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 472);
    ZinKernelDescriptorStrides((int *)(a1 + 328), (int *)(a1 + 340), (_QWORD *)(a1 + 248), (_DWORD *)(a1 + 352), v31);
    v18 = v31[1];
    *(_OWORD *)(a1 + 288) = v31[0];
    *(_OWORD *)(a1 + 304) = v18;
    *(_QWORD *)(a1 + 320) = v32;
  }
  else
  {
    *(_DWORD *)(a1 + 176) = a2;
    v25 = *(_QWORD *)(a1 + 472);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 480);
    *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 488);
    *(_DWORD *)(a1 + 348) = *(_DWORD *)(a1 + 500);
    *(_QWORD *)(a1 + 340) = *(_QWORD *)(a1 + 492);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 520);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 504);
    v26 = *(_DWORD *)(a1 + 556);
    *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 540);
    *(_DWORD *)(a1 + 380) = v26;
    v27 = *(_QWORD *)(a1 + 456);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 272) = v27;
    *(_QWORD *)(a1 + 280) = v25;
    if (v5)
      v28 = 1;
    else
      v28 = v6;
    *(_QWORD *)(a1 + 248) = v28;
    *(_QWORD *)(a1 + 256) = 1;
  }
  v19 = *(_QWORD *)(a1 + 568);
  if (v19)
  {
    *(_BYTE *)(a1 + 448) |= 8u;
    if (*(_BYTE *)(v19 + 288))
    {
      *(float *)(a1 + 180) = ZinIrVector::GetSingularVal((ZinIrVector *)v19);
      v19 = *(_QWORD *)(a1 + 568);
    }
    else
    {
      *(_BYTE *)(a1 + 185) = 1;
      if (!*(_QWORD *)(a1 + 600) && !*(_QWORD *)(a1 + 584))
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(v19 + 56);
    }
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(v19 + 280);
  }
  v20 = *(_QWORD *)(a1 + 576);
  if (v20)
  {
    *(_BYTE *)(a1 + 448) |= 0x10u;
    if (*(_BYTE *)(v20 + 288))
    {
      *(float *)(a1 + 188) = ZinIrVector::GetSingularVal((ZinIrVector *)v20);
      v20 = *(_QWORD *)(a1 + 576);
    }
    else
    {
      *(_BYTE *)(a1 + 193) = 1;
      if (!*(_QWORD *)(a1 + 600) && !*(_QWORD *)(a1 + 584))
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(v20 + 56);
    }
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(v20 + 280);
  }
  v21 = *(ZinIrVector **)(a1 + 592);
  if (v21)
  {
    v22 = (uint64_t *)(a1 + 592);
    if (ZinIrVector::HasAllZero(v21))
    {
      v23 = *v22;
      *v22 = 0;
      if (!v23)
        return;
      std::default_delete<ZinIrVector>::operator()[abi:ne180100](a1 + 592, v23);
    }
    v24 = *v22;
    if (*v22)
    {
      if (*(_BYTE *)(v24 + 152))
        ZinAssertImpl("Zero point should be not mutable");
      *(_BYTE *)(a1 + 448) |= 2u;
      if (*(_BYTE *)(v24 + 288))
      {
        *(float *)(a1 + 196) = ZinIrVector::GetSingularVal((ZinIrVector *)v24);
      }
      else
      {
        *(_BYTE *)(a1 + 201) = 1;
        if (*(_QWORD *)(a1 + 600) || *(_QWORD *)(a1 + 584))
        {
          v29 = *(_QWORD *)(a1 + 248);
          v30 = *(_QWORD *)(v24 + 56);
          if (v29 != v30 && v29 * *(int *)(a1 + 340) * *(int *)(a1 + 344) * *(int *)(a1 + 348) != v30)
            ZinAssertImpl("Number of zero points are not equal to the subchannel count");
        }
        else
        {
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(v24 + 56);
        }
      }
    }
  }
}

uint64_t ZinIrKernel::InitializeDescriptor(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v3 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 528);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a1 + 536);
  v4 = *(_BYTE *)(a1 + 552);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a1 + 544);
  v5 = (*(_BYTE *)(a1 + 553) << 6) | (v4 << 7);
  *(_BYTE *)(a1 + 448) = v5;
  *(_DWORD *)(a1 + 176) = a2;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 480);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 488);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a1 + 500);
  *(_QWORD *)(a1 + 340) = *(_QWORD *)(a1 + 492);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 368) = v3;
  v6 = *(_DWORD *)(a1 + 556);
  *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 540);
  *(_DWORD *)(a1 + 380) = v6;
  v8 = *a3;
  v7 = a3[1];
  *(_QWORD *)(a1 + 280) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 264) = v7;
  if (*(_QWORD *)(a1 + 592))
    ZinAssertImpl("Unity kernels do not support zero points");
  v10 = (_QWORD *)(a1 + 248);
  v11 = *(_QWORD *)(a1 + 568);
  if (v11)
  {
    *(_BYTE *)(a1 + 448) = v5 | 8;
    if (*(_BYTE *)(v11 + 288))
    {
      *(float *)(a1 + 180) = ZinIrVector::GetSingularVal((ZinIrVector *)v11);
      v11 = *(_QWORD *)(a1 + 568);
    }
    else
    {
      *(_BYTE *)(a1 + 185) = 1;
      if (!*(_QWORD *)(a1 + 248))
        *v10 = *(_QWORD *)(v11 + 56);
    }
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(v11 + 280);
  }
  result = *(_QWORD *)(a1 + 576);
  if (result)
  {
    *(_BYTE *)(a1 + 448) |= 0x10u;
    if (*(_BYTE *)(result + 288))
    {
      *(float *)(a1 + 188) = ZinIrVector::GetSingularVal((ZinIrVector *)result);
      result = *(_QWORD *)(a1 + 576);
    }
    else
    {
      *(_BYTE *)(a1 + 193) = 1;
      v13 = *(_QWORD *)(a1 + 248);
      v14 = *(_QWORD *)(result + 56);
      if (v13)
      {
        if (v13 != v14 && v13 == *(int *)(a1 + 344) * (uint64_t)*(int *)(a1 + 348) * (v14 / *(int *)(a1 + 340)))
          ZinAssertImpl("Number of channels in bias does not match the number of channels in kernel");
      }
      else
      {
        *v10 = v14;
      }
    }
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(result + 280);
  }
  return result;
}

uint64_t ZinIrKernel::ZinIrKernel(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrVector **v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  int v27;
  double v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ZinIrVector *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  v13 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v13;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), &byte_207AF6795);
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 172) = 0;
  memcpy((void *)(a1 + 176), (const void *)a3, 0x118uLL);
  *(int64x2_t *)(a1 + 456) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 472) = 1;
  *(_QWORD *)&v14 = 0x100000001;
  *((_QWORD *)&v14 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 480) = v14;
  *(_QWORD *)(a1 + 496) = 0x100000001;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 528) = v14;
  *(_QWORD *)(a1 + 544) = 1;
  *(_WORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 568) = v15;
  v16 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 576) = v16;
  *(_QWORD *)(a1 + 584) = 0;
  v17 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 592) = v17;
  v18 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)a7;
  *(_QWORD *)(a1 + 608) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = a1 + 568;
  v22 = a1 + 576;
  v23 = (ZinIrVector **)(a1 + 592);
  v24 = a1 + 600;
  v25 = ZinIrActivationParams::ZinIrActivationParams(a1 + 616, 0);
  *(_QWORD *)(a1 + 784) = 0;
  if (!*(_QWORD *)(a1 + 600)
    || *(_QWORD *)v21 && !*(_BYTE *)(*(_QWORD *)v21 + 288)
    || *(_QWORD *)v22 && !*(_BYTE *)(*(_QWORD *)v22 + 288)
    || *v23
    || (v26 = *((_QWORD *)ZinIrTensor::GetRootTensor(*(ZinIrTensor **)a7) + 13)) == 0
    || *(_DWORD *)(v26 + 96) != 2)
  {
    ZinAssertImpl("Invalid kernel configuration", v25);
  }
  v27 = ZinTensorFormatToKernelFormat(*(_DWORD *)(*(_QWORD *)v24 + 88));
  *(_DWORD *)(a1 + 176) = v27;
  if (!v27)
    ZinAssertImpl("Unexpected tensor format %d to convert to kernel format", *(_DWORD *)(*(_QWORD *)v24 + 88));
  v29 = *(_BYTE *)(a1 + 448);
  *(_BYTE *)(a1 + 448) = v29 | 4;
  v30 = *(_QWORD *)(a1 + 568);
  if (v30)
  {
    *(_BYTE *)(a1 + 448) = v29 | 0xC;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(v30 + 280);
    if (*(_BYTE *)(v30 + 288))
    {
      *(float *)&v28 = ZinIrVector::GetSingularVal((ZinIrVector *)v30);
      *(_DWORD *)(a1 + 180) = LODWORD(v28);
    }
    else
    {
      *(_BYTE *)(a1 + 185) = 1;
      if (*(_QWORD *)(a1 + 248) != *(_QWORD *)(v30 + 56))
        goto LABEL_34;
    }
  }
  v31 = *(_QWORD *)v22;
  if (*(_QWORD *)v22)
  {
    *(_BYTE *)(a1 + 448) |= 0x10u;
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(v31 + 280);
    if (*(_BYTE *)(v31 + 288))
    {
      *(float *)(a1 + 188) = ZinIrVector::GetSingularVal((ZinIrVector *)v31);
    }
    else
    {
      *(_BYTE *)(a1 + 193) = 1;
      v32 = *(_QWORD *)(a1 + 248);
      v33 = *(_QWORD *)(v31 + 56);
      if (v32 != v33 && v32 * *(int *)(a1 + 340) * *(int *)(a1 + 344) * *(int *)(a1 + 348) != v33)
        goto LABEL_34;
    }
  }
  if (*v23)
  {
    if (ZinIrVector::HasAllZero(*v23))
    {
      v34 = (uint64_t)*v23;
      *v23 = 0;
      if (!v34)
        goto LABEL_31;
      std::default_delete<ZinIrVector>::operator()[abi:ne180100](a1 + 592, v34);
    }
    v35 = *v23;
    if (*v23)
    {
      *(_BYTE *)(a1 + 448) |= 2u;
      if (*((_BYTE *)v35 + 288))
      {
        *(float *)(a1 + 196) = ZinIrVector::GetSingularVal(v35);
        goto LABEL_31;
      }
      *(_BYTE *)(a1 + 201) = 1;
      v36 = *(_QWORD *)(a1 + 248);
      v37 = *((_QWORD *)v35 + 7);
      if (v36 != v37 && v36 * *(int *)(a1 + 340) * *(int *)(a1 + 344) * *(int *)(a1 + 348) != v37)
LABEL_34:
        ZinAssertImpl("Invalid dimensions", v28);
    }
  }
LABEL_31:
  ZinIrKernel::UpdateSHAContextForMemberVariables(a1, 2);
  v38 = *(_QWORD *)(a3 + 152);
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a3 + 160);
  *(_QWORD *)(a1 + 480) = v38;
  v39 = *(_QWORD *)(a3 + 164);
  *(_DWORD *)(a1 + 500) = *(_DWORD *)(a3 + 172);
  *(_QWORD *)(a1 + 492) = v39;
  *(_DWORD *)(a1 + 540) = *(_DWORD *)(a3 + 200);
  v40 = *(_QWORD *)(a3 + 104);
  *(int8x16_t *)(a1 + 456) = vextq_s8(*(int8x16_t *)(a3 + 88), *(int8x16_t *)(a3 + 88), 8uLL);
  *(_QWORD *)(a1 + 472) = v40;
  v41 = *(_QWORD *)(a3 + 208);
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a3 + 216);
  *(_QWORD *)(a1 + 528) = v41;
  v42 = *(_OWORD *)(a3 + 176);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a3 + 192);
  *(_OWORD *)(a1 + 504) = v42;
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a3 + 224);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a3 + 272) >> 7;
  *(_BYTE *)(a1 + 553) = (*(_BYTE *)(a3 + 272) & 0x40) != 0;
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a3 + 204);
  return a1;
}

void sub_207064668(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  std::unique_ptr<ZinMirAneKernel>::reset[abi:ne180100]((uint64_t *)(v1 + 784), 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v6);
  v8 = *v5;
  *v5 = 0;
  if (v8)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v5, v8);
  v9 = *(_QWORD *)(v1 + 584);
  *(_QWORD *)(v1 + 584) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *v4;
  *v4 = 0;
  if (v10)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v4, v10);
  v11 = *v3;
  *v3 = 0;
  if (v11)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v3, v11);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernel::ZinIrKernel(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  __int128 v11;
  int64x2_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  const ZinIrWeight *v37;
  ZinIrWeight *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 IsUnity;
  int v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD *v65;
  uint64_t v66;

  v11 = *a3;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a1 = v11;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v65 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), &byte_207AF6795);
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(*a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(*a2 + 168);
  *(_WORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 188) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  v12 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 248) = v12;
  *(_QWORD *)(a1 + 264) = 1;
  *(int64x2_t *)(a1 + 272) = v12;
  *(int64x2_t *)(a1 + 288) = v12;
  *(int64x2_t *)(a1 + 304) = v12;
  *(_QWORD *)(a1 + 320) = 1;
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  *(int64x2_t *)(a1 + 328) = v12;
  *(_QWORD *)(a1 + 344) = 0x100000001;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 376) = xmmword_207A85790;
  *(_DWORD *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 416) = 1;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  v13 = *a2;
  v14 = (__int128 *)(*a2 + 456);
  v15 = *v14;
  v16 = *(_OWORD *)(*a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(*a2 + 472);
  *(_OWORD *)(a1 + 488) = v16;
  *(_OWORD *)(a1 + 456) = v15;
  v17 = v14[3];
  v18 = v14[4];
  v19 = v14[5];
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(v13 + 552);
  *(_OWORD *)(a1 + 520) = v18;
  *(_OWORD *)(a1 + 536) = v19;
  *(_OWORD *)(a1 + 504) = v17;
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(*a2 + 560);
  v20 = (uint64_t *)(a1 + 568);
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  v21 = *a2;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(*a2 + 600);
  v22 = *(_QWORD *)(v21 + 608);
  *(_QWORD *)(a1 + 608) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (uint64_t *)(a1 + 576);
  v26 = (uint64_t *)(a1 + 592);
  v27 = *a2;
  v28 = (__int128 *)(*a2 + 616);
  v29 = *v28;
  v30 = *(_OWORD *)(*a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(*a2 + 632);
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a1 + 616) = v29;
  v31 = v28[3];
  v32 = v28[4];
  v33 = v28[6];
  *(_OWORD *)(a1 + 696) = v28[5];
  *(_OWORD *)(a1 + 712) = v33;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 680) = v32;
  v34 = v28[7];
  v35 = v28[8];
  v36 = v28[9];
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(v27 + 776);
  *(_OWORD *)(a1 + 744) = v35;
  *(_OWORD *)(a1 + 760) = v36;
  *(_OWORD *)(a1 + 728) = v34;
  *(_QWORD *)(a1 + 784) = 0;
  v37 = *(const ZinIrWeight **)(*a2 + 584);
  if (v37)
  {
    v38 = (ZinIrWeight *)operator new();
    ZinIrWeight::ZinIrWeight(v38, v37);
  }
  else
  {
    v38 = 0;
  }
  v39 = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a1 + 584) = v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
  v40 = *(_QWORD *)(*a2 + 592);
  if (v40)
  {
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v40, &v66);
    v41 = v66;
  }
  else
  {
    v41 = 0;
  }
  v66 = 0;
  v42 = *v26;
  *v26 = v41;
  if (v42)
  {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](a1 + 592, v42);
    v43 = v66;
    v66 = 0;
    if (v43)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v66, v43);
  }
  v44 = *a4;
  if (*a4)
  {
    *a4 = 0;
    v45 = *v20;
    *v20 = v44;
    if (!v45)
      goto LABEL_25;
    v46 = (uint64_t *)(a1 + 568);
    goto LABEL_24;
  }
  v47 = *(_QWORD *)(*a2 + 568);
  if (v47)
  {
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v47, &v66);
    v48 = v66;
  }
  else
  {
    v48 = 0;
  }
  v66 = 0;
  v49 = *v20;
  *v20 = v48;
  if (v49)
  {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](a1 + 568, v49);
    v45 = v66;
    v66 = 0;
    if (v45)
    {
      v46 = &v66;
LABEL_24:
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v46, v45);
    }
  }
LABEL_25:
  v50 = *a5;
  if (*a5)
  {
    *a5 = 0;
    v51 = *v25;
    *v25 = v50;
    if (!v51)
      goto LABEL_35;
    v52 = (uint64_t *)(a1 + 576);
    goto LABEL_34;
  }
  v53 = *(_QWORD *)(*a2 + 576);
  if (v53)
  {
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v53, &v66);
    v54 = v66;
  }
  else
  {
    v54 = 0;
  }
  v66 = 0;
  v55 = *v25;
  *v25 = v54;
  if (v55)
  {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](a1 + 576, v55);
    v51 = v66;
    v66 = 0;
    if (v51)
    {
      v52 = &v66;
LABEL_34:
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v52, v51);
    }
  }
LABEL_35:
  IsUnity = ZinKernelFormatIsUnity(*(_DWORD *)(*a2 + 176));
  v57 = *(_DWORD *)(*a2 + 176);
  if (IsUnity)
    ZinIrKernel::InitializeDescriptor(a1, v57, (__int128 *)(*a2 + 248));
  else
    ZinIrKernel::InitializeDescriptor(a1, v57, 1uLL);
  if (!*a4)
  {
    if (!a6 || !*a5)
      goto LABEL_44;
LABEL_43:
    ZinIrKernel::UpdateSHAContextForMemberVariables(a1, a6);
    return a1;
  }
  if (a6)
    goto LABEL_43;
LABEL_44:
  v58 = *a2;
  if (!*a2 || !*(_BYTE *)(v58 + 156))
    ZinAssertImpl("kernel with invalid sha.", v65, v66);
  v59 = *(_OWORD *)(v58 + 52);
  v60 = *(_OWORD *)(v58 + 68);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(v58 + 84);
  *(_OWORD *)(a1 + 68) = v60;
  *(_OWORD *)(a1 + 52) = v59;
  v61 = *(_OWORD *)(v58 + 100);
  v62 = *(_OWORD *)(v58 + 116);
  v63 = *(_OWORD *)(v58 + 132);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(v58 + 148);
  *(_OWORD *)(a1 + 132) = v63;
  *(_OWORD *)(a1 + 116) = v62;
  *(_OWORD *)(a1 + 100) = v61;
  *(_BYTE *)(a1 + 156) = 1;
  return a1;
}

void sub_207064B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  std::unique_ptr<ZinMirAneKernel>::reset[abi:ne180100]((uint64_t *)(v9 + 784), 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v9 + 600);
  v14 = *v12;
  *v12 = 0;
  if (v14)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v12, v14);
  v15 = *(_QWORD *)(v9 + 584);
  *(_QWORD *)(v9 + 584) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  v16 = *v11;
  *v11 = 0;
  if (v16)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v11, v16);
  v17 = *v10;
  *v10 = 0;
  if (v17)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v10, v17);
  if (*(char *)(v9 + 47) < 0)
    operator delete(*a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernel::ZinIrKernel(uint64_t a1, __int128 *a2, int a3, __int128 *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, int a9)
{
  __int128 v16;
  int64x2_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v16 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v16;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), &byte_207AF6795);
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 188) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  v17 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 248) = v17;
  *(_QWORD *)(a1 + 264) = 1;
  *(int64x2_t *)(a1 + 272) = v17;
  *(int64x2_t *)(a1 + 288) = v17;
  *(int64x2_t *)(a1 + 304) = v17;
  *(_QWORD *)(a1 + 320) = 1;
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  *(int64x2_t *)(a1 + 328) = v17;
  *(_QWORD *)(a1 + 344) = 0x100000001;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 376) = xmmword_207A85790;
  *(_DWORD *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 1;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  v18 = *a4;
  v19 = a4[2];
  *(_OWORD *)(a1 + 472) = a4[1];
  *(_OWORD *)(a1 + 488) = v19;
  *(_OWORD *)(a1 + 456) = v18;
  v20 = a4[3];
  v21 = a4[4];
  v22 = a4[5];
  *(_QWORD *)(a1 + 552) = *((_QWORD *)a4 + 12);
  *(_OWORD *)(a1 + 520) = v21;
  *(_OWORD *)(a1 + 536) = v22;
  *(_OWORD *)(a1 + 504) = v20;
  *(_BYTE *)(a1 + 560) = 0;
  v23 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 568) = v23;
  *(_QWORD *)(a1 + 576) = 0;
  v24 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 584) = v24;
  v25 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 592) = v25;
  *(_OWORD *)(a1 + 600) = 0u;
  ZinIrActivationParams::ZinIrActivationParams(a1 + 616, 0);
  *(_QWORD *)(a1 + 784) = 0;
  ZinIrKernel::InitializeDescriptor(a1, a3, 1uLL);
  if (a8)
  {
    if (!*(_BYTE *)(a8 + 156))
      ZinAssertImpl("kernel with invalid sha.");
    v26 = *(_OWORD *)(a8 + 52);
    v27 = *(_OWORD *)(a8 + 68);
    *(_OWORD *)(a1 + 84) = *(_OWORD *)(a8 + 84);
    *(_OWORD *)(a1 + 68) = v27;
    *(_OWORD *)(a1 + 52) = v26;
    v28 = *(_OWORD *)(a8 + 100);
    v29 = *(_OWORD *)(a8 + 116);
    v30 = *(_OWORD *)(a8 + 132);
    *(_QWORD *)(a1 + 148) = *(_QWORD *)(a8 + 148);
    *(_OWORD *)(a1 + 132) = v30;
    *(_OWORD *)(a1 + 116) = v29;
    *(_OWORD *)(a1 + 100) = v28;
    *(_BYTE *)(a1 + 156) = 1;
  }
  else
  {
    ZinIrKernel::UpdateSHAContextForMemberVariables(a1, a9);
  }
  return a1;
}

{
  return ZinIrKernel::ZinIrKernel(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_207064E14(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  std::unique_ptr<ZinMirAneKernel>::reset[abi:ne180100]((uint64_t *)(v1 + 784), 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v3);
  v6 = v4[52];
  v4[52] = 0;
  if (v6)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)(v4 + 52), v6);
  v7 = v4 + 50;
  v8 = *(_QWORD *)(v1 + 584);
  *(_QWORD *)(v1 + 584) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v9 = v4 + 49;
  v10 = *v7;
  *v7 = 0;
  if (v10)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)(v4 + 50), v10);
  v11 = *v9;
  *v9 = 0;
  if (v11)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)(v4 + 49), v11);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernel::ZinIrKernel(uint64_t a1, __int128 *a2, char *__src, __int128 *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v7 = *a4;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v7;
  }
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 156) = 1;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 172) = 0;
  memcpy((void *)(a1 + 176), __src, 0x118uLL);
  *(int64x2_t *)(a1 + 456) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 472) = 1;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 480) = v8;
  *(_QWORD *)(a1 + 496) = 0x100000001;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 528) = v8;
  *(_QWORD *)(a1 + 544) = 1;
  *(_WORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  LOBYTE(v8) = 0;
  BYTE4(v8) = 0;
  BYTE8(v8) = 0;
  BYTE12(v8) = 0;
  *(_OWORD *)(a1 + 568) = v8;
  *(_OWORD *)(a1 + 584) = v8;
  *(_OWORD *)(a1 + 600) = v8;
  ZinIrActivationParams::ZinIrActivationParams(a1 + 616, 0);
  *(_QWORD *)(a1 + 784) = 0;
  v9 = *((_QWORD *)__src + 19);
  *(_DWORD *)(a1 + 488) = *((_DWORD *)__src + 40);
  *(_QWORD *)(a1 + 480) = v9;
  v10 = *(_QWORD *)(__src + 164);
  *(_DWORD *)(a1 + 500) = *((_DWORD *)__src + 43);
  *(_QWORD *)(a1 + 492) = v10;
  *(_DWORD *)(a1 + 540) = *((_DWORD *)__src + 50);
  v11 = *((_QWORD *)__src + 13);
  *(int8x16_t *)(a1 + 456) = vextq_s8(*(int8x16_t *)(__src + 88), *(int8x16_t *)(__src + 88), 8uLL);
  *(_QWORD *)(a1 + 472) = v11;
  v12 = *((_QWORD *)__src + 26);
  *(_DWORD *)(a1 + 536) = *((_DWORD *)__src + 54);
  *(_QWORD *)(a1 + 528) = v12;
  v13 = *((_OWORD *)__src + 11);
  *(_QWORD *)(a1 + 520) = *((_QWORD *)__src + 24);
  *(_OWORD *)(a1 + 504) = v13;
  *(_QWORD *)(a1 + 544) = *((_QWORD *)__src + 28);
  *(_BYTE *)(a1 + 552) = __src[272] >> 7;
  *(_BYTE *)(a1 + 553) = (__src[272] & 0x40) != 0;
  *(_DWORD *)(a1 + 556) = *((_DWORD *)__src + 51);
  return a1;
}

void sub_207065074(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrKernel::ZinIrKernel(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;
  int64x2_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  const ZinIrWeight *v16;
  ZinIrWeight *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v7 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v7;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), &byte_207AF6795);
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a4 + 160);
  *(_DWORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 188) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  v8 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 248) = v8;
  *(_QWORD *)(a1 + 264) = 1;
  *(int64x2_t *)(a1 + 272) = v8;
  *(int64x2_t *)(a1 + 288) = v8;
  *(int64x2_t *)(a1 + 304) = v8;
  *(_QWORD *)(a1 + 320) = 1;
  v8.i64[0] = 0x100000001;
  v8.i64[1] = 0x100000001;
  *(int64x2_t *)(a1 + 328) = v8;
  *(_QWORD *)(a1 + 344) = 0x100000001;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 376) = xmmword_207A85790;
  *(_DWORD *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 416) = 1;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  v9 = *a3;
  v10 = a3[2];
  *(_OWORD *)(a1 + 472) = a3[1];
  *(_OWORD *)(a1 + 488) = v10;
  *(_OWORD *)(a1 + 456) = v9;
  v11 = a3[3];
  v12 = a3[4];
  v13 = a3[5];
  *(_QWORD *)(a1 + 552) = *((_QWORD *)a3 + 12);
  *(_OWORD *)(a1 + 520) = v12;
  *(_OWORD *)(a1 + 536) = v13;
  *(_OWORD *)(a1 + 504) = v11;
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a4 + 560);
  v14 = *(_QWORD *)(a4 + 568);
  if (v14)
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v14, (uint64_t *)(a1 + 568));
  else
    *(_QWORD *)(a1 + 568) = 0;
  v15 = *(_QWORD *)(a4 + 576);
  if (v15)
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v15, (uint64_t *)(a1 + 576));
  else
    *(_QWORD *)(a1 + 576) = 0;
  v16 = *(const ZinIrWeight **)(a4 + 584);
  if (v16)
  {
    v17 = (ZinIrWeight *)operator new();
    ZinIrWeight::ZinIrWeight(v17, v16);
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a1 + 584) = v17;
  v18 = *(_QWORD *)(a4 + 592);
  if (v18)
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v18, (uint64_t *)(a1 + 592));
  else
    *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a4 + 600);
  v19 = *(_QWORD *)(a4 + 608);
  *(_QWORD *)(a1 + 608) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(_OWORD *)(a4 + 616);
  v23 = *(_OWORD *)(a4 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a4 + 632);
  *(_OWORD *)(a1 + 648) = v23;
  *(_OWORD *)(a1 + 616) = v22;
  v24 = *(_OWORD *)(a4 + 664);
  v25 = *(_OWORD *)(a4 + 680);
  v26 = *(_OWORD *)(a4 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a4 + 696);
  *(_OWORD *)(a1 + 712) = v26;
  *(_OWORD *)(a1 + 664) = v24;
  *(_OWORD *)(a1 + 680) = v25;
  v27 = *(_OWORD *)(a4 + 728);
  v28 = *(_OWORD *)(a4 + 744);
  v29 = *(_OWORD *)(a4 + 760);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a4 + 776);
  *(_OWORD *)(a1 + 744) = v28;
  *(_OWORD *)(a1 + 760) = v29;
  *(_OWORD *)(a1 + 728) = v27;
  *(_QWORD *)(a1 + 784) = 0;
  ZinIrKernel::InitializeDescriptor(a1, *(_DWORD *)(a4 + 176), 1uLL);
  if (!*(_BYTE *)(a4 + 156))
    ZinAssertImpl("kernel with invalid sha.");
  v30 = *(_OWORD *)(a4 + 52);
  v31 = *(_OWORD *)(a4 + 68);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(a4 + 84);
  *(_OWORD *)(a1 + 68) = v31;
  *(_OWORD *)(a1 + 52) = v30;
  v32 = *(_OWORD *)(a4 + 100);
  v33 = *(_OWORD *)(a4 + 116);
  v34 = *(_OWORD *)(a4 + 132);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a4 + 148);
  *(_OWORD *)(a1 + 132) = v34;
  *(_OWORD *)(a1 + 116) = v33;
  *(_OWORD *)(a1 + 100) = v32;
  *(_BYTE *)(a1 + 156) = 1;
  if (ZinIrConvInfo::NeedSHAUpdate(a1 + 456, a4 + 456))
  {
    CC_SHA256_Update((CC_SHA256_CTX *)(a1 + 52), "desc", 4u);
    ZinIrKernel::UpdateSHAContextForDescriptor((ZinIrKernel *)a1);
  }
  return a1;
}

void sub_2070653DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v1 + 584);
  *(_QWORD *)(v1 + 584) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v4, v7);
  v8 = *v3;
  *v3 = 0;
  if (v8)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v3, v8);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t ZinIrKernel::BytesPerSerializedCoutElement(ZinIrKernel *this, const ZinKernelDescriptor *a2)
{
  return ZinKernelSizeEstimateUtil::EstimateKMEMFootprintPerCoutElement((ZinIrKernel *)((char *)this + 176), a2);
}

uint64_t ZinIrKernel::KernelExpansionFactor(ZinIrKernel *this)
{
  return *((int *)this + 86) * (uint64_t)*((int *)this + 85) * *((int *)this + 87);
}

uint64_t ZinIrKernel::Partial@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, ZinKernelSparsityCache *a4@<X4>, uint64_t *a5@<X8>)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const ZinIrHalParameters *v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  std::string __p;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD __dst[35];
  std::string *data;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v10 = (unsigned int *)(a1 + 176);
  memcpy(__dst, (const void *)(a1 + 176), sizeof(__dst));
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  v11 = *(_QWORD *)(a1 + 584);
  if (v11)
  {
    v13 = *a2;
    v12 = a2[1];
    v67 = *a2;
    v68 = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    memset(&__p, 0, sizeof(__p));
    data = &__p;
    v66 = 0;
    v16 = operator new(0x10uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v16 + 2);
    v17 = v68;
    *v16 = v13;
    v16[1] = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v16 + 2);
    ZinIrWeight::Transform(v11, (uint64_t)&__p, &v63);
    data = &__p;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&data);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v67);
    v20 = *(_QWORD *)(v63 + 56);
    __dst[4] = *(_QWORD *)(v63 + 16);
    __dst[9] = v20;
  }
  v21 = *(_QWORD *)(a1 + 576);
  if (v21)
  {
    v22 = a2[1];
    if (*a2)
      v23 = *a2 + 8;
    else
      v23 = 0;
    v67 = v23;
    v68 = v22;
    if (v22)
    {
      v24 = (unint64_t *)(v22 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    memset(&__p, 0, sizeof(__p));
    data = &__p;
    v66 = 0;
    v26 = operator new(0x10uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v26 + 2);
    v27 = v68;
    *v26 = v23;
    v26[1] = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v26 + 2);
    ZinIrVector::Transform(v21, (uint64_t)&__p, &v62);
    data = &__p;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&data);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v67);
    v30 = *(_QWORD *)(v62 + 56);
    __dst[4] = *(_QWORD *)(v62 + 16);
    __dst[9] = v30;
  }
  v31 = *(_QWORD *)(a1 + 568);
  if (v31)
  {
    v32 = a2[1];
    if (*a2)
      v33 = *a2 + 8;
    else
      v33 = 0;
    v67 = v33;
    v68 = v32;
    if (v32)
    {
      v34 = (unint64_t *)(v32 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    memset(&__p, 0, sizeof(__p));
    data = &__p;
    v66 = 0;
    v36 = operator new(0x10uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v36 + 2);
    v37 = v68;
    *v36 = v33;
    v36[1] = v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v36 + 2);
    ZinIrVector::Transform(v31, (uint64_t)&__p, &v61);
    data = &__p;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&data);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v67);
    v40 = *(_QWORD *)(v61 + 56);
    __dst[4] = *(_QWORD *)(v61 + 16);
    __dst[9] = v40;
  }
  v41 = *(_QWORD *)(a1 + 592);
  if (v41)
  {
    if (*(_QWORD *)(a1 + 584) || *(_QWORD *)(a1 + 600))
    {
      if (!ZinKernelFormatIsQuantizationCompatible(*v10))
        ZinAssertImpl("kernel zero point is only supported for int8/uint8 kernels");
      v41 = *(_QWORD *)(a1 + 592);
    }
    v42 = a2[1];
    if (*a2)
      v43 = *a2 + 8;
    else
      v43 = 0;
    v67 = v43;
    v68 = v42;
    if (v42)
    {
      v44 = (unint64_t *)(v42 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    memset(&__p, 0, sizeof(__p));
    data = &__p;
    v66 = 0;
    v46 = operator new(0x10uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v46 + 2);
    v47 = v68;
    *v46 = v43;
    v46[1] = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v46 + 2);
    ZinIrVector::Transform(v41, (uint64_t)&__p, &v60);
    data = &__p;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&data);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v67);
    v50 = *(_QWORD *)(v60 + 56);
    __dst[4] = *(_QWORD *)(v60 + 16);
    __dst[9] = v50;
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v51 = operator new();
  ZinIrKernel::ZinIrKernel(v51, (__int128 *)&__p, (uint64_t)__dst, &v63, &v61, &v62, &v60, 0);
  *a5 = v51;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (ZinIrKernel::ShouldPreserveCompressionInfo((ZinIrKernel *)v51, (const ZinIrKernel *)a1, v52, a4))
    *(_QWORD *)(v51 + 160) = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(v51 + 560) = *(_BYTE *)(a1 + 560);
  if (!*(_BYTE *)(a1 + 156))
    ZinAssertImpl("kernel with invalid sha.");
  *(_OWORD *)(v51 + 100) = *(_OWORD *)(a1 + 100);
  *(_OWORD *)(v51 + 116) = *(_OWORD *)(a1 + 116);
  *(_OWORD *)(v51 + 132) = *(_OWORD *)(a1 + 132);
  *(_QWORD *)(v51 + 148) = *(_QWORD *)(a1 + 148);
  *(_OWORD *)(v51 + 52) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(v51 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(v51 + 84) = *(_OWORD *)(a1 + 84);
  *(_BYTE *)(v51 + 156) = 1;
  v53 = *a2;
  v54 = *(void ***)(*a2 + 24);
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(*a2 + 16);
  data = (std::string *)v54;
  LOBYTE(v67) = *(_BYTE *)(v53 + 32);
  CC_SHA256_Update((CC_SHA256_CTX *)(v51 + 52), "std::unique_ptr<ZinIrKernel> ZinIrKernel::Partial(const std::shared_ptr<ZinIrTransformPartial>, const std::string &, const ZinIrHalParameters &, ZinKernelSparsityCache &) const", 0xB0u);
  CC_SHA256_Update((CC_SHA256_CTX *)(v51 + 52), &__p, 8u);
  CC_SHA256_Update((CC_SHA256_CTX *)(v51 + 52), &data, 8u);
  CC_SHA256_Update((CC_SHA256_CTX *)(v51 + 52), &v67, 1u);
  v55 = v60;
  v60 = 0;
  if (v55)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v60, v55);
  v56 = v61;
  v61 = 0;
  if (v56)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v61, v56);
  v57 = v62;
  v62 = 0;
  if (v57)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v62, v57);
  result = v63;
  v63 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_207065A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a16;
  a16 = 0;
  if (v20)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a16, v20);
  v21 = a17;
  a17 = 0;
  if (v21)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a17, v21);
  v22 = a18;
  a18 = 0;
  if (v22)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a18, v22);
  v23 = a19;
  a19 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinIrKernel::FoldWeightsWithScale@<X0>(_QWORD *this@<X0>, ZinIrKernel *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  void **v8;
  uint64_t v9;
  char *v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  unint64_t *v17;
  void *v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  float *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  float v43;
  ZinIrKernel *v44;
  ZinIrKernel *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  CC_SHA256_CTX *v51;
  ZinIrKernel *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  ZinIrKernel *v58;
  ZinIrKernel *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  ZinIrKernel *v66;
  void *v67[2];
  char v68;
  ZinIrKernel *v69;
  int v70;
  uint64_t v71;
  uint64_t v72[3];
  void *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  void *__p[35];
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (this[72] || (v4 = (uint64_t)this, this[71]) || this[74])
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return this;
  }
  v6 = this[73];
  v7 = *(_OWORD *)(v6 + 72);
  v76 = *(_OWORD *)(v6 + 56);
  v77 = v7;
  v78 = *(_QWORD *)(v6 + 88);
  v83 = 0;
  if (*((_QWORD *)a2 + 71))
  {
    __p[0] = &off_24C05AE40;
    __p[1] = (char *)a2 + 568;
  }
  else
  {
    __p[0] = &off_24C05ADE8;
  }
  __p[3] = __p;
  std::__function::__value_func<float ()(unsigned long)>::swap[abi:ne180100](__p, v82);
  v8 = (void **)__p[3];
  if (__p[3] == __p)
  {
    v9 = 4;
    v8 = __p;
  }
  else
  {
    if (!__p[3])
      goto LABEL_14;
    v9 = 5;
  }
  (*((void (**)(void))*v8 + v9))();
LABEL_14:
  v10 = (char *)a2 + 576;
  v81 = 0;
  if (*((_QWORD *)a2 + 72))
  {
    __p[0] = &off_24C05AEF0;
    __p[1] = (char *)a2 + 576;
  }
  else
  {
    __p[0] = &off_24C05AE98;
  }
  __p[3] = __p;
  std::__function::__value_func<float ()(unsigned long)>::swap[abi:ne180100](__p, v80);
  v11 = (void **)__p[3];
  if (__p[3] == __p)
  {
    v12 = 4;
    v11 = __p;
  }
  else
  {
    if (!__p[3])
      goto LABEL_22;
    v12 = 5;
  }
  (*((void (**)(void))*v11 + v12))();
LABEL_22:
  v75 = 0;
  if (*(_QWORD *)v10)
  {
    std::vector<float>::vector(__p, v76);
    if ((_QWORD)v76)
    {
      v13 = 0;
      do
      {
        v73 = (void *)v13;
        if (!v81 || ((*(void (**)(_QWORD *, void **))(*v81 + 48))(v81, &v73), v73 = (void *)v13, !v83))
          std::__throw_bad_function_call[abi:ne180100]();
        v15 = v14;
        v16 = (*(float (**)(_QWORD *, void **))(*v83 + 48))(v83, &v73);
        *((float *)__p[0] + v13++) = v15 * v16;
      }
      while (v13 < (unint64_t)v76);
    }
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)__p, &v73);
    v18 = v73;
    v17 = (unint64_t *)v74;
    v67[0] = v73;
    v67[1] = v74;
    v19 = *(_BYTE *)(*(_QWORD *)v10 + 280);
    v20 = *(unsigned __int8 *)(*(_QWORD *)v10 + 152);
    v21 = operator new();
    v22 = v21;
    v73 = v18;
    v74 = (std::__shared_weak_count *)v17;
    if (v17)
    {
      v23 = v17 + 1;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    ZinIrVector::ZinIrVector(v21, &v73, v76, 6, 0, v19, v20 != 0);
    v72[0] = v22;
    v25 = v74;
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v72[0];
    v72[0] = 0;
    v29 = v75;
    v75 = v28;
    if (v29)
    {
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v75, v29);
      v72[0] = 0;
    }
    if (v67[1])
    {
      v30 = (unint64_t *)((char *)v67[1] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        (*(void (**)(void *))(*(_QWORD *)v67[1] + 16))(v67[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v67[1]);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)&v73, *((_QWORD *)&v76 + 1) * v76 * v77 * *((_QWORD *)&v77 + 1) * v78);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
  memset(__p, 0, 40);
  v33 = v76;
  if ((uint64_t)v76 >= 1)
  {
    v34 = 0;
    if (v32)
      v35 = (float *)v74;
    else
      v35 = (float *)&v73;
    v36 = *((_QWORD *)&v76 + 1);
    do
    {
      __p[1] = 0;
      if (v36 >= 1)
      {
        v37 = 0;
        v38 = v77;
        do
        {
          __p[2] = 0;
          if (v38 >= 1)
          {
            v39 = 0;
            v40 = *((_QWORD *)&v77 + 1);
            do
            {
              __p[3] = 0;
              if (v40 >= 1)
              {
                v41 = 0;
                v42 = v78;
                do
                {
                  __p[4] = 0;
                  if (v42 >= 1)
                  {
                    do
                    {
                      ZinIrWeightBase::GetAt<float>(*(_QWORD *)(v4 + 584));
                      v67[0] = __p[0];
                      if (!v83)
                        std::__throw_bad_function_call[abi:ne180100]();
                      *v35++ = v43 * (*(float (**)(_QWORD *, void **))(*v83 + 48))(v83, v67);
                      ++__p[4];
                      v42 = v78;
                    }
                    while ((uint64_t)__p[4] < v78);
                    v41 = (char *)__p[3];
                    v40 = *((_QWORD *)&v77 + 1);
                  }
                  __p[3] = ++v41;
                }
                while ((uint64_t)v41 < v40);
                v39 = (char *)__p[2];
                v38 = v77;
              }
              __p[2] = ++v39;
            }
            while ((uint64_t)v39 < v38);
            v37 = (char *)__p[1];
            v36 = *((_QWORD *)&v76 + 1);
          }
          __p[1] = ++v37;
        }
        while ((uint64_t)v37 < v36);
        v34 = (char *)__p[0];
        v33 = v76;
      }
      __p[0] = ++v34;
    }
    while ((uint64_t)v34 < v33);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)&v73, __p);
  *(_OWORD *)v72 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)__p);
  memset(__p, 0, 24);
  LODWORD(v67[0]) = 6;
  std::make_unique[abi:ne180100]<ZinIrWeight,std::shared_ptr<ZinIrConstData> &,std::vector<std::shared_ptr<ZinIrConstData>>,ZinKernelFormat,ZinKernelDimensions &>(v72, (uint64_t)__p, (unsigned int *)v67, (uint64_t)&v76, &v71);
  v67[0] = __p;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
  v70 = 0;
  memcpy(__p, (const void *)(v4 + 176), sizeof(__p));
  LOBYTE(__p[34]) &= 0xE5u;
  HIDWORD(__p[2]) = 0;
  LOWORD(__p[3]) = 0;
  HIDWORD(__p[0]) = 0;
  LOWORD(__p[1]) = 0;
  HIDWORD(__p[1]) = 0;
  LOWORD(__p[2]) = 0;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_weightfolded", (const void **)v4, v67);
  v66 = 0;
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),decltype(nullptr),SHAUpdateMode const&>((__int128 *)v67, (uint64_t)__p, &v71, &v70, (uint64_t *)&v69);
  if (v68 < 0)
    operator delete(v67[0]);
  v44 = v69;
  *((_QWORD *)v69 + 20) = *(_QWORD *)(v4 + 160);
  *((_BYTE *)v44 + 560) = *(_BYTE *)(v4 + 560);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_gocfolded", (const void **)v4, v67);
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),decltype(nullptr),std::unique_ptr<ZinIrVector>,decltype(nullptr),SHAUpdateMode const&>((__int128 *)v67, (uint64_t)__p, &v75, &v70, (uint64_t *)&v66);
  if (v68 < 0)
    operator delete(v67[0]);
  if (!*(_BYTE *)(v4 + 156))
    goto LABEL_90;
  v45 = v69;
  v46 = *(_OWORD *)(v4 + 52);
  v47 = *(_OWORD *)(v4 + 68);
  *(_OWORD *)((char *)v69 + 84) = *(_OWORD *)(v4 + 84);
  *(_OWORD *)((char *)v45 + 68) = v47;
  *(_OWORD *)((char *)v45 + 52) = v46;
  v48 = *(_OWORD *)(v4 + 100);
  v49 = *(_OWORD *)(v4 + 116);
  v50 = *(_OWORD *)(v4 + 132);
  *(_QWORD *)((char *)v45 + 148) = *(_QWORD *)(v4 + 148);
  *(_OWORD *)((char *)v45 + 132) = v50;
  *(_OWORD *)((char *)v45 + 116) = v49;
  *(_OWORD *)((char *)v45 + 100) = v48;
  *((_BYTE *)v45 + 156) = 1;
  if (!a2 || !*((_BYTE *)a2 + 156))
LABEL_90:
    ZinAssertImpl("kernel with invalid sha.", 0, 0, 0);
  v51 = (CC_SHA256_CTX *)((char *)v45 + 52);
  v52 = v66;
  v53 = *(_OWORD *)((char *)a2 + 52);
  v54 = *(_OWORD *)((char *)a2 + 68);
  *(_OWORD *)((char *)v66 + 84) = *(_OWORD *)((char *)a2 + 84);
  *(_OWORD *)((char *)v52 + 68) = v54;
  *(_OWORD *)((char *)v52 + 52) = v53;
  v55 = *(_OWORD *)((char *)a2 + 100);
  v56 = *(_OWORD *)((char *)a2 + 116);
  v57 = *(_OWORD *)((char *)a2 + 132);
  *(_QWORD *)((char *)v52 + 148) = *(_QWORD *)((char *)a2 + 148);
  *(_OWORD *)((char *)v52 + 132) = v57;
  *(_OWORD *)((char *)v52 + 116) = v56;
  *(_OWORD *)((char *)v52 + 100) = v55;
  *((_BYTE *)v52 + 156) = 1;
  CC_SHA256_Update(v51, "FoldWeightsWithScale", 8u);
  CC_SHA256_Update((CC_SHA256_CTX *)((char *)v66 + 52), "FoldWeightsWithScale", 8u);
  *(_DWORD *)a3 = 0;
  v58 = v69;
  v69 = 0;
  v59 = v66;
  v66 = 0;
  *(_QWORD *)(a3 + 8) = v58;
  *(_QWORD *)(a3 + 16) = v59;
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&v66, 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&v69, 0);
  v60 = v71;
  v71 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v72);
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)&v73);
  v62 = v75;
  v75 = 0;
  if (v62)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v75, v62);
  v63 = v81;
  if (v81 == v80)
  {
    v64 = 4;
    v63 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_84;
    v64 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v63 + 8 * v64))(v63, v62, v61);
LABEL_84:
  this = v83;
  if (v83 == v82)
  {
    v65 = 4;
    this = v82;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*this + 8 * v65))(this, v62, v61);
  }
  if (v83)
  {
    v65 = 5;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*this + 8 * v65))(this, v62, v61);
  }
  return this;
}

void sub_207066300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, ZinIrKernel *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a19, 0);
  v39 = a21;
  a21 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)&a25);
  v40 = a29;
  a29 = 0;
  if (v40)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a29, v40);
  v41 = *(_QWORD **)(v37 - 144);
  if (v41 == (_QWORD *)(v37 - 168))
  {
    v42 = 4;
    v41 = (_QWORD *)(v37 - 168);
  }
  else
  {
    if (!v41)
      goto LABEL_12;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_12:
  v43 = *(_QWORD **)(v37 - 112);
  if (v43 == (_QWORD *)(v37 - 136))
  {
    v44 = 4;
    v43 = (_QWORD *)(v37 - 136);
  }
  else
  {
    if (!v43)
      goto LABEL_17;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_17:
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrWeight,std::shared_ptr<ZinIrConstData> &,std::vector<std::shared_ptr<ZinIrConstData>>,ZinKernelFormat,ZinKernelDimensions &>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v10 = operator new();
  v11 = v10;
  v12 = (std::__shared_weak_count *)a1[1];
  v18 = *a1;
  v19 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ZinIrWeight::ZinIrWeight(v10, &v18, a2, *a3, a4, 1, 1262703187, 0);
  *a5 = v11;
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_207066574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v9, 0x10B3C400FFB447ELL);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),decltype(nullptr),SHAUpdateMode const&>@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int *a4@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = operator new();
  v16 = 0;
  v17 = 0;
  v15 = 0;
  result = ZinIrKernel::ZinIrKernel(v10, a1, a2, a3, &v17, &v16, &v15, *a4);
  *a5 = v10;
  v12 = v15;
  v15 = 0;
  if (v12)
    result = std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v15, v12);
  v13 = v16;
  v16 = 0;
  if (v13)
    result = std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v16, v13);
  v14 = v17;
  v17 = 0;
  if (v14)
    return std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v17, v14);
  return result;
}

void sub_207066668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v4 = v5;
  v5 = 0;
  if (v4)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)va, v4);
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),decltype(nullptr),SHAUpdateMode const&>((uint64_t)va, (uint64_t *)va1, (uint64_t *)va2);
  MEMORY[0x20BD002F8](v2, 0x1032C40DEE44497);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),decltype(nullptr),std::unique_ptr<ZinIrVector>,decltype(nullptr),SHAUpdateMode const&>@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X4>, int *a4@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = operator new();
  v15 = 0;
  v16 = 0;
  v14 = 0;
  ZinIrKernel::ZinIrKernel(v10, a1, a2, &v16, &v15, a3, &v14, *a4);
  *a5 = v10;
  v11 = v14;
  v14 = 0;
  if (v11)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v14, v11);
  v12 = v15;
  v15 = 0;
  if (v12)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v15, v12);
  result = v16;
  if (v16)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  return result;
}

void sub_207066778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v4 = v5;
  v5 = 0;
  if (v4)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)va, v4);
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),decltype(nullptr),std::unique_ptr<ZinIrVector>,decltype(nullptr),SHAUpdateMode const&>((uint64_t)va, (uint64_t *)va1, (uint64_t *)va2);
  MEMORY[0x20BD002F8](v2, 0x1032C40DEE44497);
  _Unwind_Resume(a1);
}

void ZinIrKernel::FoldKernelQuantDataIntoWeight(ZinIrKernel *this@<X0>, uint64_t *a2@<X8>)
{
  size_t v4;
  const char *v5;
  size_t v6;
  __int128 *v7;
  ZinIrKernel *v8;
  char *v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD __dst[70];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;

  if ((*((_BYTE *)this + 448) & 2) == 0
    || (v24 = 0,
        ZinFoldKernelQuantInfoIntoWeight((uint64_t *)this + 73, *((int **)this + 74), *((ZinIrVector **)this + 71), &v24, &v23), !v23))
  {
    *a2 = 0;
    return;
  }
  if (*((char *)this + 23) >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  if (v24)
    v5 = "_zero_point_and_scale_folded";
  else
    v5 = "_zero_point_folded";
  if (v24)
    v6 = 28;
  else
    v6 = 18;
  v7 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v4 + v6);
  if (v22 < 0)
    v7 = (__int128 *)v21;
  if (v4)
  {
    if (*((char *)this + 23) >= 0)
      v8 = this;
    else
      v8 = *(ZinIrKernel **)this;
    memmove(v7, v8, v4);
  }
  v9 = (char *)v7 + v4;
  memcpy(v9, v5, v6);
  v9[v6] = 0;
  v10 = *((_BYTE *)this + 448);
  if ((v10 & 8) == 0 || v24)
  {
    v20 = 0;
    if ((v10 & 0x10) != 0)
      goto LABEL_22;
LABEL_25:
    v19 = 0;
    goto LABEL_26;
  }
  std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*((_QWORD *)this + 71), &v20);
  if ((*((_BYTE *)this + 448) & 0x10) == 0)
    goto LABEL_25;
LABEL_22:
  std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*((_QWORD *)this + 72), &v19);
LABEL_26:
  memcpy(__dst, (char *)this + 176, sizeof(__dst));
  v11 = *(_DWORD *)(v23 + 8);
  v12 = __dst[68];
  LOBYTE(__dst[68]) &= ~2u;
  __dst[0] = v11;
  __dst[5] = 0;
  LOWORD(__dst[6]) = 0;
  if (!v20)
  {
    LOBYTE(__dst[68]) = v12 & 0xF5;
    __dst[1] = 0;
    LOWORD(__dst[2]) = 0;
  }
  v13 = operator new();
  v25 = 0;
  ZinIrKernel::ZinIrKernel(v13, &v21, (uint64_t)__dst, &v23, &v20, &v19, &v25, 2);
  *a2 = v13;
  v14 = v25;
  v25 = 0;
  if (v14)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v25, v14);
  v15 = v19;
  v19 = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v19, v15);
  v16 = v20;
  v20 = 0;
  if (v16)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v20, v16);
  if (v22 < 0)
    operator delete((void *)v21);
  v17 = v23;
  v23 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
}

void sub_207066A00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 - 120);
  *(_QWORD *)(v1 - 120) = 0;
  if (v3)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v1 - 120, v3);
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  v4 = *(_QWORD *)(v1 - 88);
  *(_QWORD *)(v1 - 88) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrKernel::HasBias(ZinIrKernel *this)
{
  return (*((unsigned __int8 *)this + 448) >> 4) & 1;
}

uint64_t ZinIrKernel::RemapWeightForUnflatten@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, const ZinTensorDimensions *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  void **v60;
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v59 = 0;
  std::allocate_shared[abi:ne180100]<ZinIrTransformRemap,std::allocator<ZinIrTransformRemap>,ZinTensorDimensions const&,void>(a3, &v57);
  v8 = *(_QWORD *)(a1 + 584);
  if (v8)
  {
    if (v57)
      v9 = v57 + 8;
    else
      v9 = 0;
    v62 = v9;
    v63 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v60 = (void **)&v54;
    v61 = 0;
    v12 = operator new(0x10uLL);
    v54 = v12;
    v55 = v12;
    v56 = v12 + 2;
    v13 = v63;
    *v12 = v9;
    v12[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v55 = v12 + 2;
    ZinIrWeight::Transform(v8, (uint64_t)&v54, &v59);
    v60 = (void **)&v54;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v60);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v62);
    if (!v59)
      goto LABEL_20;
  }
  v53 = 0;
  v16 = *(_QWORD *)(a1 + 568);
  if (*(_BYTE *)(a1 + 185))
  {
    v17 = v57;
    v62 = v57;
    v63 = v58;
    if (v58)
    {
      v18 = (unint64_t *)&v58->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v60 = (void **)&v54;
    v61 = 0;
    v20 = operator new(0x10uLL);
    v54 = v20;
    v55 = v20;
    v56 = v20 + 2;
    v21 = v63;
    *v20 = v17;
    v20[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v55 = v20 + 2;
    ZinIrVector::Transform(v16, (uint64_t)&v54, (uint64_t *)&v53);
    v60 = (void **)&v54;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v60);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v62);
    if (!v53)
    {
LABEL_20:
      *a4 = 0;
      goto LABEL_52;
    }
  }
  else if (v16)
  {
    ZinIrVector::Clone(*(ZinIrVector **)(a1 + 568), (uint64_t *)&v54);
    v24 = (uint64_t)v54;
    v53 = v54;
    v54 = 0;
    if (!v24)
      ZinAssertImpl("Failed to clone scale");
  }
  v52 = 0;
  v25 = *(_QWORD *)(a1 + 576);
  if (!*(_BYTE *)(a1 + 193))
  {
    if (v25)
    {
      ZinIrVector::Clone(*(ZinIrVector **)(a1 + 576), (uint64_t *)&v54);
      v33 = (uint64_t)v54;
      v54 = 0;
      v52 = v33;
      if (!v33)
        ZinAssertImpl("Failed to clone bias");
    }
LABEL_34:
    v51 = 0;
    v34 = *(_QWORD *)(a1 + 592);
    if (*(_BYTE *)(a1 + 201))
    {
      v35 = v57;
      v62 = v57;
      v63 = v58;
      if (v58)
      {
        v36 = (unint64_t *)&v58->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v60 = (void **)&v54;
      v61 = 0;
      v38 = operator new(0x10uLL);
      v54 = v38;
      v55 = v38;
      v56 = v38 + 2;
      v39 = v63;
      *v38 = v35;
      v38[1] = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v55 = v38 + 2;
      ZinIrVector::Transform(v34, (uint64_t)&v54, &v51);
      v60 = (void **)&v54;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v60);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v62);
      if (!v51)
      {
        *a4 = 0;
LABEL_48:
        v45 = v52;
        v52 = 0;
        if (v45)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v52, v45);
        goto LABEL_50;
      }
    }
    else if (v34)
    {
      ZinIrVector::Clone(*(ZinIrVector **)(a1 + 592), (uint64_t *)&v54);
      v42 = (uint64_t)v54;
      v54 = 0;
      v51 = v42;
      if (!v42)
        ZinAssertImpl("Failed to clone zero point");
    }
    v43 = operator new();
    ZinIrKernel::ZinIrKernel(v43, a2, a1 + 176, &v59, (uint64_t *)&v53, &v52, &v51, 0);
    *a4 = v43;
    *(_QWORD *)(v43 + 160) = *(_QWORD *)(a1 + 160);
    *(_BYTE *)(v43 + 560) = *(_BYTE *)(a1 + 560);
    if (!*(_BYTE *)(a1 + 156))
      ZinAssertImpl("kernel with invalid sha.");
    *(_OWORD *)(v43 + 100) = *(_OWORD *)(a1 + 100);
    *(_OWORD *)(v43 + 116) = *(_OWORD *)(a1 + 116);
    *(_OWORD *)(v43 + 132) = *(_OWORD *)(a1 + 132);
    *(_QWORD *)(v43 + 148) = *(_QWORD *)(a1 + 148);
    *(_OWORD *)(v43 + 52) = *(_OWORD *)(a1 + 52);
    *(_OWORD *)(v43 + 68) = *(_OWORD *)(a1 + 68);
    *(_OWORD *)(v43 + 84) = *(_OWORD *)(a1 + 84);
    *(_BYTE *)(v43 + 156) = 1;
    CC_SHA256_Update((CC_SHA256_CTX *)(v43 + 52), "std::unique_ptr<ZinIrKernel> ZinIrKernel::RemapWeightForUnflatten(std::string &&, const ZinTensorDimensions &, const ZinIrHalParameters &) const", 0x90u);
    CC_SHA256_Update((CC_SHA256_CTX *)(v43 + 52), a3, 0x28u);
    v44 = v51;
    v51 = 0;
    if (v44)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v51, v44);
    goto LABEL_48;
  }
  v26 = v57;
  v62 = v57;
  v63 = v58;
  if (v58)
  {
    v27 = (unint64_t *)&v58->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v60 = (void **)&v54;
  v61 = 0;
  v29 = operator new(0x10uLL);
  v54 = v29;
  v55 = v29;
  v56 = v29 + 2;
  v30 = v63;
  *v29 = v26;
  v29[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v55 = v29 + 2;
  ZinIrVector::Transform(v25, (uint64_t)&v54, &v52);
  v60 = (void **)&v54;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v60);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v62);
  if (v52)
    goto LABEL_34;
  *a4 = 0;
LABEL_50:
  v46 = (uint64_t)v53;
  v53 = 0;
  if (v46)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v53, v46);
LABEL_52:
  v47 = v58;
  if (v58)
  {
    v48 = (unint64_t *)&v58->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  result = v59;
  v59 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_20706705C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a9;
  a9 = 0;
  if (v18)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a9, v18);
  v19 = a10;
  a10 = 0;
  if (v19)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a10, v19);
  v20 = a11;
  a11 = 0;
  if (v20)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v20);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v21 = a17;
  a17 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  _Unwind_Resume(a1);
}

void ZinIrKernel::ShuffleChannels(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  ZinIrWeight *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  ZinIrWeight *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  __n128 __p;
  uint64_t v72;
  _BYTE __dst[280];
  void **v74;
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, (const void *)(a1 + 176), sizeof(__dst));
  __p = 0uLL;
  v72 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_QWORD *)&v62 = *(_QWORD *)(a1 + 592);
  std::allocate_shared[abi:ne180100]<ZinIrTransformShuffle,std::allocator<ZinIrTransformShuffle>,std::vector<unsigned long>,ZinIrVector *,void>(&__p, (unint64_t *)&v62, &v69);
  v68 = 0;
  v8 = *(_QWORD *)(a1 + 584);
  if (v8)
  {
    if (v69)
      v9 = v69 + 8;
    else
      v9 = 0;
    v76 = v9;
    v77 = v70;
    if (v70)
    {
      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v62 = 0uLL;
    *(_QWORD *)&v63 = 0;
    v74 = (void **)&v62;
    v75 = 0;
    v12 = operator new(0x10uLL);
    *(_QWORD *)&v62 = v12;
    *((_QWORD *)&v62 + 1) = v12;
    *(_QWORD *)&v63 = v12 + 2;
    v13 = v77;
    *v12 = v9;
    v12[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *((_QWORD *)&v62 + 1) = v12 + 2;
    ZinIrWeight::Transform(v8, (uint64_t)&v62, (uint64_t *)&v68);
    v74 = (void **)&v62;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v74);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v76);
    if (!v68)
    {
      *a4 = 0;
      goto LABEL_75;
    }
    v16 = *(_OWORD *)((char *)v68 + 56);
    v17 = *(_OWORD *)((char *)v68 + 72);
    *(_QWORD *)&__dst[104] = *((_QWORD *)v68 + 11);
    *(_OWORD *)&__dst[88] = v17;
    *(_OWORD *)&__dst[72] = v16;
    v18 = *((_OWORD *)v68 + 1);
    v19 = *((_OWORD *)v68 + 2);
    *(_QWORD *)&__dst[64] = *((_QWORD *)v68 + 6);
    *(_OWORD *)&__dst[32] = v18;
    *(_OWORD *)&__dst[48] = v19;
    if (ZinKernelFormatIsPalette(*(_DWORD *)(*(_QWORD *)(a1 + 584) + 8)))
    {
      if (ZinIrWeight::IsFirstPaletteLUTEntryNonZero(v68))
        v20 = 32;
      else
        v20 = 0;
      __dst[272] = __dst[272] & 0xDF | v20;
      *(_QWORD *)&__dst[240] = *((_QWORD *)v68 + 38);
    }
  }
  v67 = 0;
  v21 = *(_QWORD *)(a1 + 568);
  if (!*(_BYTE *)(a1 + 185))
  {
    if (v21)
    {
      ZinIrVector::Clone(*(ZinIrVector **)(a1 + 568), (uint64_t *)&v62);
      v29 = v62;
      *(_QWORD *)&v62 = 0;
      v30 = v67;
      v67 = v29;
      if (v30)
      {
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v67, v30);
        v31 = v62;
        *(_QWORD *)&v62 = 0;
        if (v31)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v62, v31);
        v29 = v67;
      }
      if (!v29)
        ZinAssertImpl("Failed to clone scale");
    }
LABEL_32:
    v66 = 0;
    v32 = *(_QWORD *)(a1 + 576);
    if (*(_BYTE *)(a1 + 193))
    {
      v33 = v69;
      v76 = v69;
      v77 = v70;
      if (v70)
      {
        v34 = (unint64_t *)&v70->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v62 = 0uLL;
      *(_QWORD *)&v63 = 0;
      v74 = (void **)&v62;
      v75 = 0;
      v36 = operator new(0x10uLL);
      *(_QWORD *)&v62 = v36;
      *((_QWORD *)&v62 + 1) = v36;
      *(_QWORD *)&v63 = v36 + 2;
      v37 = v77;
      *v36 = v33;
      v36[1] = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      *((_QWORD *)&v62 + 1) = v36 + 2;
      ZinIrVector::Transform(v32, (uint64_t)&v62, &v66);
      v74 = (void **)&v62;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v74);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v76);
      if (!v66)
      {
        *a4 = 0;
LABEL_71:
        v57 = v67;
        v67 = 0;
        if (v57)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v67, v57);
        goto LABEL_73;
      }
      *(_QWORD *)&__dst[72] = *(_QWORD *)(v66 + 56);
    }
    else if (v32)
    {
      ZinIrVector::Clone(*(ZinIrVector **)(a1 + 576), (uint64_t *)&v62);
      v40 = v62;
      *(_QWORD *)&v62 = 0;
      v41 = v66;
      v66 = v40;
      if (v41)
      {
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v66, v41);
        v42 = v62;
        *(_QWORD *)&v62 = 0;
        if (v42)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v62, v42);
        v40 = v66;
      }
      if (!v40)
        ZinAssertImpl("Failed to clone bias");
    }
    v65 = 0;
    v43 = *(_QWORD *)(a1 + 592);
    if (*(_BYTE *)(a1 + 201))
    {
      v44 = v69;
      v76 = v69;
      v77 = v70;
      if (v70)
      {
        v45 = (unint64_t *)&v70->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v62 = 0uLL;
      *(_QWORD *)&v63 = 0;
      v74 = (void **)&v62;
      v75 = 0;
      v47 = operator new(0x10uLL);
      *(_QWORD *)&v62 = v47;
      *((_QWORD *)&v62 + 1) = v47;
      *(_QWORD *)&v63 = v47 + 2;
      v48 = v77;
      *v47 = v44;
      v47[1] = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      *((_QWORD *)&v62 + 1) = v47 + 2;
      ZinIrVector::Transform(v43, (uint64_t)&v62, &v65);
      v74 = (void **)&v62;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v74);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v76);
      if (!v65)
      {
        *a4 = 0;
LABEL_69:
        v56 = v66;
        v66 = 0;
        if (v56)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v66, v56);
        goto LABEL_71;
      }
      *(_QWORD *)&__dst[72] = *(_QWORD *)(v65 + 56);
    }
    else if (v43)
    {
      ZinIrVector::Clone(*(ZinIrVector **)(a1 + 592), (uint64_t *)&v62);
      v51 = v62;
      *(_QWORD *)&v62 = 0;
      v52 = v65;
      v65 = v51;
      if (v52)
      {
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v65, v52);
        v53 = v62;
        *(_QWORD *)&v62 = 0;
        if (v53)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v62, v53);
        v51 = v65;
      }
      if (!v51)
        ZinAssertImpl("Failed to clone zero point");
    }
    ZinKernelDescriptorStrides((int *)&__dst[152], (int *)&__dst[164], &__dst[72], &__dst[176], &v62);
    *(_OWORD *)&__dst[112] = v62;
    *(_OWORD *)&__dst[128] = v63;
    *(_QWORD *)&__dst[144] = v64;
    v54 = operator new();
    ZinIrKernel::ZinIrKernel(v54, a2, (uint64_t)__dst, (uint64_t *)&v68, &v67, &v66, &v65, 0);
    *a4 = v54;
    *(_QWORD *)(v54 + 160) = *(_QWORD *)(a1 + 160);
    *(_BYTE *)(v54 + 560) = *(_BYTE *)(a1 + 560);
    if (!*(_BYTE *)(a1 + 156))
      ZinAssertImpl("kernel with invalid sha.");
    *(_OWORD *)(v54 + 100) = *(_OWORD *)(a1 + 100);
    *(_OWORD *)(v54 + 116) = *(_OWORD *)(a1 + 116);
    *(_OWORD *)(v54 + 132) = *(_OWORD *)(a1 + 132);
    *(_QWORD *)(v54 + 148) = *(_QWORD *)(a1 + 148);
    *(_OWORD *)(v54 + 52) = *(_OWORD *)(a1 + 52);
    *(_OWORD *)(v54 + 68) = *(_OWORD *)(a1 + 68);
    *(_OWORD *)(v54 + 84) = *(_OWORD *)(a1 + 84);
    *(_BYTE *)(v54 + 156) = 1;
    CC_SHA256_Update((CC_SHA256_CTX *)(v54 + 52), "std::unique_ptr<ZinIrKernel> ZinIrKernel::ShuffleChannels(std::string &&, const std::vector<size_t> &, const ZinIrHalParameters &) const", 0x88u);
    CC_SHA256_Update((CC_SHA256_CTX *)(v54 + 52), *(const void **)a3, (*(_DWORD *)(a3 + 8) - *(_QWORD *)a3) & 0xFFFFFFF8);
    v55 = v65;
    v65 = 0;
    if (v55)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v65, v55);
    goto LABEL_69;
  }
  v22 = v69;
  v76 = v69;
  v77 = v70;
  if (v70)
  {
    v23 = (unint64_t *)&v70->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v62 = 0uLL;
  *(_QWORD *)&v63 = 0;
  v74 = (void **)&v62;
  v75 = 0;
  v25 = operator new(0x10uLL);
  *(_QWORD *)&v62 = v25;
  *((_QWORD *)&v62 + 1) = v25;
  *(_QWORD *)&v63 = v25 + 2;
  v26 = v77;
  *v25 = v22;
  v25[1] = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *((_QWORD *)&v62 + 1) = v25 + 2;
  ZinIrVector::Transform(v21, (uint64_t)&v62, &v67);
  v74 = (void **)&v62;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v74);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v76);
  if (v67)
  {
    *(_QWORD *)&__dst[72] = *(_QWORD *)(v67 + 56);
    goto LABEL_32;
  }
  *a4 = 0;
LABEL_73:
  v58 = v68;
  v68 = 0;
  if (v58)
    (*(void (**)(ZinIrWeight *))(*(_QWORD *)v58 + 16))(v58);
LABEL_75:
  v59 = v70;
  if (v70)
  {
    v60 = (unint64_t *)&v70->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_20706787C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a14;
  a14 = 0;
  if (v22)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a14, v22);
  v23 = a15;
  a15 = 0;
  if (v23)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a15, v23);
  v24 = a16;
  a16 = 0;
  if (v24)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a16, v24);
  v25 = a17;
  a17 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ZinIrKernel::DuplicateChannels(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  float SingularVal;
  char v16;
  ZinIrVector *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  float v26;
  char v27;
  ZinIrVector *v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  ZinIrVector *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  ZinIrVector *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t data;
  void **v44;
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  data = a3;
  std::allocate_shared[abi:ne180100]<ZinIrTransformDuplicate,std::allocator<ZinIrTransformDuplicate>,unsigned long &,void>(&data, &v41);
  if (*(_QWORD *)(a1 + 584))
  {
LABEL_2:
    *a4 = 0;
    goto LABEL_35;
  }
  v40 = 0;
  v7 = *(_QWORD *)(a1 + 568);
  if (*(_BYTE *)(a1 + 185))
  {
    v8 = v41;
    v46 = v41;
    v47 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v44 = (void **)&v37;
    v45 = 0;
    v11 = operator new(0x10uLL);
    v37 = v11;
    v38 = v11;
    v39 = v11 + 2;
    v12 = v47;
    *v11 = v8;
    v11[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v38 = v11 + 2;
    ZinIrVector::Transform(v7, (uint64_t)&v37, (uint64_t *)&v40);
    v44 = (void **)&v37;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v44);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    if (!v40)
      goto LABEL_2;
  }
  else if (v7)
  {
    SingularVal = ZinIrVector::GetSingularVal(*(ZinIrVector **)(a1 + 568));
    v16 = *(_BYTE *)(*(_QWORD *)(a1 + 568) + 280);
    v17 = (ZinIrVector *)operator new();
    ZinIrVector::ZinIrVector(v17, SingularVal, v16);
    v37 = 0;
    v40 = v17;
  }
  v36 = 0;
  v18 = *(_QWORD *)(a1 + 576);
  if (!*(_BYTE *)(a1 + 193))
  {
    if (v18)
    {
      v26 = ZinIrVector::GetSingularVal(*(ZinIrVector **)(a1 + 576));
      v27 = *(_BYTE *)(*(_QWORD *)(a1 + 576) + 280);
      v28 = (ZinIrVector *)operator new();
      ZinIrVector::ZinIrVector(v28, v26, v27);
      v36 = v28;
      v37 = 0;
    }
    goto LABEL_25;
  }
  v19 = v41;
  v46 = v41;
  v47 = v42;
  if (v42)
  {
    v20 = (unint64_t *)&v42->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v44 = (void **)&v37;
  v45 = 0;
  v22 = operator new(0x10uLL);
  v37 = v22;
  v38 = v22;
  v39 = v22 + 2;
  v23 = v47;
  *v22 = v19;
  v22[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v38 = v22 + 2;
  ZinIrVector::Transform(v18, (uint64_t)&v37, (uint64_t *)&v36);
  v44 = (void **)&v37;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v44);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
  if (v36)
  {
LABEL_25:
    if (*(_QWORD *)(a1 + 592))
      ZinAssertImpl("This transformation is only used for GOC and should not have zero point in kernel");
    v29 = operator new();
    v37 = 0;
    v44 = 0;
    ZinIrKernel::ZinIrKernel(v29, a2, a1 + 176, (uint64_t *)&v37, (uint64_t *)&v40, (uint64_t *)&v36, (uint64_t *)&v44, 0);
    *a4 = v29;
    v30 = v44;
    v44 = 0;
    if (v30)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v44, (uint64_t)v30);
    if (v37)
      (*(void (**)(_QWORD *))(*v37 + 16))(v37);
    if (!*(_BYTE *)(a1 + 156))
      ZinAssertImpl("kernel with invalid sha.");
    *(_OWORD *)(v29 + 100) = *(_OWORD *)(a1 + 100);
    *(_OWORD *)(v29 + 116) = *(_OWORD *)(a1 + 116);
    *(_OWORD *)(v29 + 132) = *(_OWORD *)(a1 + 132);
    *(_QWORD *)(v29 + 148) = *(_QWORD *)(a1 + 148);
    *(_OWORD *)(v29 + 52) = *(_OWORD *)(a1 + 52);
    *(_OWORD *)(v29 + 68) = *(_OWORD *)(a1 + 68);
    *(_OWORD *)(v29 + 84) = *(_OWORD *)(a1 + 84);
    *(_BYTE *)(v29 + 156) = 1;
    CC_SHA256_Update((CC_SHA256_CTX *)(v29 + 52), "std::unique_ptr<ZinIrKernel> ZinIrKernel::DuplicateChannels(std::string &&, size_t) const", 0x59u);
    CC_SHA256_Update((CC_SHA256_CTX *)(v29 + 52), &data, 8u);
    v31 = (uint64_t)v36;
    v36 = 0;
    if (v31)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v36, v31);
    goto LABEL_33;
  }
  *a4 = 0;
LABEL_33:
  v32 = (uint64_t)v40;
  v40 = 0;
  if (v32)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v40, v32);
LABEL_35:
  v33 = v42;
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_207067E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  MEMORY[0x20BD002F8](v2, 0x10B3C400A1ACBE3);
  v4 = v6;
  v6 = 0;
  if (v4)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)va, v4);
  v5 = v11;
  v11 = 0;
  if (v5)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)va1, v5);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void ZinIrKernel::ShuffleKernel(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, ZinKernelSparsityCache *a13, __int128 *a14, char a15, int a16)
{
  uint64_t *v16;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  void **v34;
  void **v35;
  uint64_t *v36;
  int v37;
  __int128 *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  char v78;
  uint64_t v79;
  const ZinIrHalParameters *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  char v93;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  __int16 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  int64x2_t v105;
  int64x2_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void **v130;
  void **v131;
  _QWORD *v132;
  __n128 v133;
  void **v134;
  char v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;

  v16 = a9;
  v140 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 584))
  {
    *a9 = 0;
    return;
  }
  v95 = *(_QWORD **)(a1 + 592);
  std::allocate_shared[abi:ne180100]<ZinIrTransformWeightShuffle,std::allocator<ZinIrTransformWeightShuffle>,ZinKernelDimensions const&,ZinIrScratchBuffer<ZinKernelPosition> &,ZinIrVector *,void>((__int128 *)a11, a3, (uint64_t *)&v95, &v133);
  v132 = 0;
  v24 = *(_QWORD *)(a1 + 584);
  v25 = v133.n128_u64[0];
  v138 = v133;
  if (v133.n128_u64[1])
  {
    v26 = (unint64_t *)(v133.n128_u64[1] + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v130 = (void **)&v95;
  LOBYTE(v131) = 0;
  v28 = operator new(0x10uLL);
  v95 = v28;
  v96 = v28;
  v97 = v28 + 2;
  v29 = v138.n128_u64[1];
  *v28 = v25;
  v28[1] = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v96 = v28 + 2;
  ZinIrWeight::Transform(v24, (uint64_t)&v95, (uint64_t *)&v132);
  v130 = (void **)&v95;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v130);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v138);
  if (v132)
  {
    v32 = v132[7];
    v95 = 0;
    std::vector<unsigned long>::vector(&v130, v32, &v95);
    v33 = (*(uint64_t (**)(_QWORD *))(*v132 + 72))(v132);
    v34 = v130;
    v93 = v33;
    if (v33)
    {
      v35 = v131;
    }
    else
    {
      v35 = v130;
      if (v131 != v130)
      {
        v92 = a5;
        v36 = v16;
        v37 = a7;
        v38 = a2;
        v39 = 0;
        v40 = 0;
        v41 = 40 * v132[12];
        do
        {
          v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
          v43 = (void **)(*(_QWORD *)(a3 + 48) + v39);
          if (!v42)
            v43 = (void **)a3;
          v34 = v130;
          v130[v40++] = *v43;
          v35 = v131;
          v39 += v41;
        }
        while (v40 < v131 - v34);
        a2 = v38;
        a7 = v37;
        v16 = v36;
        a5 = v92;
      }
    }
    v138 = 0uLL;
    v139 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v138, v34, (uint64_t)v35, v35 - v34);
    v95 = *(_QWORD **)(a1 + 592);
    std::allocate_shared[abi:ne180100]<ZinIrTransformShuffle,std::allocator<ZinIrTransformShuffle>,std::vector<unsigned long>,ZinIrVector *,void>(&v138, (unint64_t *)&v95, &v128);
    v127 = 0;
    v44 = *(_QWORD *)(a1 + 568);
    if (*(_BYTE *)(a1 + 185))
    {
      v45 = v128;
      v136 = v128;
      v137 = v129;
      if (v129)
      {
        p_shared_owners = (unint64_t *)&v129->__shared_owners_;
        do
          v47 = __ldxr(p_shared_owners);
        while (__stxr(v47 + 1, p_shared_owners));
      }
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v134 = (void **)&v95;
      v135 = 0;
      v48 = operator new(0x10uLL);
      v95 = v48;
      v96 = v48;
      v97 = v48 + 2;
      v49 = v137;
      *v48 = v45;
      v48[1] = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v96 = v48 + 2;
      ZinIrVector::Transform(v44, (uint64_t)&v95, &v127);
      v134 = (void **)&v95;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v134);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v136);
      if (!v127)
      {
        *v16 = 0;
LABEL_82:
        v85 = v129;
        if (v129)
        {
          v86 = (unint64_t *)&v129->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (v138.n128_u64[0])
        {
          v138.n128_u64[1] = v138.n128_u64[0];
          operator delete((void *)v138.n128_u64[0]);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        v88 = (uint64_t)v132;
        v132 = 0;
        if (v88)
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88);
        goto LABEL_93;
      }
    }
    else if (v44)
    {
      ZinIrVector::Clone(*(ZinIrVector **)(a1 + 568), (uint64_t *)&v95);
      v52 = (uint64_t)v95;
      v95 = 0;
      v53 = v127;
      v127 = v52;
      if (v53)
      {
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v127, v53);
        v54 = (uint64_t)v95;
        v95 = 0;
        if (v54)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v95, v54);
        v52 = v127;
      }
      if (!v52)
        ZinAssertImpl("Failed to clone scale");
    }
    v126 = 0;
    v55 = *(_QWORD *)(a1 + 576);
    if (*(_BYTE *)(a1 + 193))
    {
      v56 = v128;
      v136 = v128;
      v137 = v129;
      if (v129)
      {
        v57 = (unint64_t *)&v129->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v134 = (void **)&v95;
      v135 = 0;
      v59 = operator new(0x10uLL);
      v95 = v59;
      v96 = v59;
      v97 = v59 + 2;
      v60 = v137;
      *v59 = v56;
      v59[1] = v60;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v96 = v59 + 2;
      ZinIrVector::Transform(v55, (uint64_t)&v95, &v126);
      v134 = (void **)&v95;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v134);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v136);
      if (!v126)
      {
        *v16 = 0;
LABEL_80:
        v84 = v127;
        v127 = 0;
        if (v84)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v127, v84);
        goto LABEL_82;
      }
    }
    else if (v55)
    {
      ZinIrVector::Clone(*(ZinIrVector **)(a1 + 576), (uint64_t *)&v95);
      v63 = (uint64_t)v95;
      v95 = 0;
      v64 = v126;
      v126 = v63;
      if (v64)
      {
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v126, v64);
        v65 = (uint64_t)v95;
        v95 = 0;
        if (v65)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v95, v65);
        v63 = v126;
      }
      if (!v63)
        ZinAssertImpl("Failed to clone bias");
    }
    v125 = 0;
    v66 = *(_QWORD *)(a1 + 592);
    if (*(_BYTE *)(a1 + 201))
    {
      v67 = v128;
      v136 = v128;
      v137 = v129;
      if (v129)
      {
        v68 = (unint64_t *)&v129->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v134 = (void **)&v95;
      v135 = 0;
      v70 = operator new(0x10uLL);
      v95 = v70;
      v96 = v70;
      v97 = v70 + 2;
      v71 = v137;
      *v70 = v67;
      v70[1] = v71;
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      v96 = v70 + 2;
      ZinIrVector::Transform(v66, (uint64_t)&v95, &v125);
      v134 = (void **)&v95;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v134);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v136);
      if (!v125)
      {
        *v16 = 0;
LABEL_78:
        v83 = v126;
        v126 = 0;
        if (v83)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v126, v83);
        goto LABEL_80;
      }
    }
    else if (v66)
    {
      ZinIrVector::Clone(*(ZinIrVector **)(a1 + 592), (uint64_t *)&v95);
      v74 = (uint64_t)v95;
      v95 = 0;
      v75 = v125;
      v125 = v74;
      if (v75)
      {
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v125, v75);
        v76 = (uint64_t)v95;
        v95 = 0;
        if (v76)
          std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v95, v76);
        v74 = v125;
      }
      if (!v74)
        ZinAssertImpl("Failed to clone zero point");
    }
    v99 = 0u;
    v100 = 0u;
    v105 = vdupq_n_s64(1uLL);
    v106 = v105;
    v117 = xmmword_207AA1730;
    v77 = *(_OWORD *)(a11 + 16);
    v102 = *(_OWORD *)a11;
    HIDWORD(v96) = 0;
    LOWORD(v97) = 0;
    HIDWORD(v97) = 0;
    v98 = 0;
    v101 = 0;
    v95 = 0;
    LOWORD(v96) = 0;
    v107 = 1;
    v119 = 0;
    v120 = 1;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v103 = v77;
    v104 = *(_QWORD *)(a11 + 32);
    v108 = a4;
    v109 = a5;
    v110 = a6;
    v111 = a7;
    v112 = a8;
    v113 = a10;
    v114 = *a14;
    v115 = *((_QWORD *)a14 + 2);
    v116 = a16;
    v118 = *(_QWORD *)(a1 + 400);
    if (a15)
      v78 = 64;
    else
      v78 = 0;
    LOBYTE(v124) = *(_BYTE *)(a1 + 448) & 0x80 | v78;
    LODWORD(v95) = *(_DWORD *)(a1 + 176);
    v79 = operator new();
    ZinIrKernel::ZinIrKernel(v79, a2, (uint64_t)&v95, (uint64_t *)&v132, &v127, &v126, &v125, 0);
    *v16 = v79;
    *(_BYTE *)(v79 + 560) = *(_BYTE *)(a1 + 560);
    if (!*(_BYTE *)(a1 + 156))
      ZinAssertImpl("kernel with invalid sha.");
    *(_OWORD *)(v79 + 100) = *(_OWORD *)(a1 + 100);
    *(_OWORD *)(v79 + 116) = *(_OWORD *)(a1 + 116);
    *(_OWORD *)(v79 + 132) = *(_OWORD *)(a1 + 132);
    *(_QWORD *)(v79 + 148) = *(_QWORD *)(a1 + 148);
    *(_OWORD *)(v79 + 52) = *(_OWORD *)(a1 + 52);
    *(_OWORD *)(v79 + 68) = *(_OWORD *)(a1 + 68);
    *(_OWORD *)(v79 + 84) = *(_OWORD *)(a1 + 84);
    *(_BYTE *)(v79 + 156) = 1;
    if ((v93 & 1) == 0
      && ZinIrKernel::ShouldPreserveCompressionInfo((ZinIrKernel *)v79, (const ZinIrKernel *)a1, v80, a13))
    {
      *(_QWORD *)(v79 + 160) = *(_QWORD *)(a1 + 160);
    }
    CC_SHA256_Update((CC_SHA256_CTX *)(v79 + 52), "std::unique_ptr<ZinIrKernel> ZinIrKernel::ShuffleKernel(std::string &&, ZinIrScratchBuffer<ZinKernelPosition> &, size_t, size_t, size_t, size_t, size_t, size_t, const ZinKernelDimensions &, const ZinIrHalParameters &, ZinKernelSparsityCache &, const ZinIrPadding &, BOOL, const ZinIrPaddingMode) const", 0x12Du);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
        v81 = *(const void **)(a3 + 48);
      else
        v81 = (const void *)a3;
      CC_SHA256_Update((CC_SHA256_CTX *)(v79 + 52), v81, 1717986920 * ((*(_DWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 3));
    }
    v82 = v125;
    v125 = 0;
    if (v82)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v125, v82);
    goto LABEL_78;
  }
  *v16 = 0;
LABEL_93:
  v89 = (std::__shared_weak_count *)v133.n128_u64[1];
  if (v133.n128_u64[1])
  {
    v90 = (unint64_t *)(v133.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_2070687CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 - 240);
  *(_QWORD *)(v1 - 240) = 0;
  if (v3)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v1 - 240, v3);
  v4 = *(_QWORD *)(v1 - 232);
  *(_QWORD *)(v1 - 232) = 0;
  if (v4)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v1 - 232, v4);
  v5 = *(_QWORD *)(v1 - 224);
  *(_QWORD *)(v1 - 224) = 0;
  if (v5)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v1 - 224, v5);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v1 - 216);
  v6 = *(void **)(v1 - 120);
  if (v6)
  {
    *(_QWORD *)(v1 - 112) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v1 - 200);
  if (v7)
  {
    *(_QWORD *)(v1 - 192) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(v1 - 176);
  *(_QWORD *)(v1 - 176) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v1 - 168);
  _Unwind_Resume(a1);
}

void ZinIrKernel::Create4bitPalKernelFrom3bitPalKernel(ZinIrKernel *this@<X0>, const ZinIrHalParameters *a2@<X1>, ZinKernelSparsityCache *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  int v9;
  size_t v10;
  __int128 *v11;
  ZinIrKernel *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int Upcasted4bitPaletteFormatFrom3bitPaletteFormat;
  ZinIrVector *v22;
  ZinIrVector *v23;
  ZinIrVector *v24;
  uint64_t v25;
  const ZinIrHalParameters *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD __dst[70];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;

  v5 = *((_QWORD *)this + 73);
  if (!v5)
  {
    *a4 = 0;
    return;
  }
  v9 = *(_DWORD *)(v5 + 8);
  if (*((char *)this + 23) >= 0)
    v10 = *((unsigned __int8 *)this + 23);
  else
    v10 = *((_QWORD *)this + 1);
  v11 = &v36;
  std::string::basic_string[abi:ne180100]((uint64_t)&v36, v10 + 12);
  if (v37 < 0)
    v11 = (__int128 *)v36;
  if (v10)
  {
    if (*((char *)this + 23) >= 0)
      v12 = this;
    else
      v12 = *(ZinIrKernel **)this;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "_4b_upcasted");
  if (NeedsUpcastingFrom3bitPaletteTo4bitPalette((uint64_t)a2, v9))
  {
    if (ZinIrKernel::IsMutable(this))
    {
      v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v13)
        ZinIrKernel::Create4bitPalKernelFrom3bitPalKernel(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 73) + 72))(*((_QWORD *)this + 73)))
    {
      Upcasted4bitPaletteFormatFrom3bitPaletteFormat = GetUpcasted4bitPaletteFormatFrom3bitPaletteFormat(v9);
      v22 = (ZinIrVector *)*((_QWORD *)this + 71);
      if (v22)
        ZinIrVector::Clone(v22, &v35);
      else
        v35 = 0;
      v23 = (ZinIrVector *)*((_QWORD *)this + 72);
      if (v23)
        ZinIrVector::Clone(v23, &v34);
      else
        v34 = 0;
      v24 = (ZinIrVector *)*((_QWORD *)this + 74);
      if (v24)
        ZinIrVector::Clone(v24, &v33);
      else
        v33 = 0;
      memcpy(__dst, (char *)this + 176, sizeof(__dst));
      __dst[0] = Upcasted4bitPaletteFormatFrom3bitPaletteFormat;
      v31 = 0;
      ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(*((ZinIrWeight **)this + 73), &v30);
      v31 = v30;
      if (v30)
      {
        v25 = operator new();
        ZinIrKernel::ZinIrKernel(v25, &v36, (uint64_t)__dst, &v31, &v35, &v34, &v33, 0);
        *a4 = v25;
        if (!*((_BYTE *)this + 156))
          ZinAssertImpl("kernel with invalid sha.");
        *(_OWORD *)(v25 + 100) = *(_OWORD *)((char *)this + 100);
        *(_OWORD *)(v25 + 116) = *(_OWORD *)((char *)this + 116);
        *(_OWORD *)(v25 + 132) = *(_OWORD *)((char *)this + 132);
        *(_QWORD *)(v25 + 148) = *(_QWORD *)((char *)this + 148);
        *(_OWORD *)(v25 + 52) = *(_OWORD *)((char *)this + 52);
        *(_OWORD *)(v25 + 68) = *(_OWORD *)((char *)this + 68);
        *(_OWORD *)(v25 + 84) = *(_OWORD *)((char *)this + 84);
        *(_BYTE *)(v25 + 156) = 1;
        if (ZinIrKernel::ShouldPreserveCompressionInfo((ZinIrKernel *)v25, this, v26, a3))
          *(_QWORD *)(v25 + 160) = *((_QWORD *)this + 20);
        CC_SHA256_Update((CC_SHA256_CTX *)(v25 + 52), "std::unique_ptr<ZinIrKernel> ZinIrKernel::Create4bitPalKernelFrom3bitPalKernel(const ZinIrHalParameters &, ZinKernelSparsityCache &) const", 0x8Au);
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      }
      else
      {
        *a4 = 0;
      }
      v27 = v33;
      v33 = 0;
      if (v27)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v33, v27);
      v28 = v34;
      v34 = 0;
      if (v28)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v34, v28);
      v29 = v35;
      v35 = 0;
      if (v29)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v35, v29);
      goto LABEL_19;
    }
  }
  *a4 = 0;
LABEL_19:
  if (v37 < 0)
    operator delete((void *)v36);
}

void sub_207068C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x20BD002F8](v11, 0x1032C40DEE44497);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  v14 = *(_QWORD *)(v12 - 112);
  *(_QWORD *)(v12 - 112) = 0;
  if (v14)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v12 - 112, v14);
  v15 = *(_QWORD *)(v12 - 104);
  *(_QWORD *)(v12 - 104) = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v12 - 104, v15);
  v16 = *(_QWORD *)(v12 - 96);
  *(_QWORD *)(v12 - 96) = 0;
  if (v16)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v12 - 96, v16);
  if (*(char *)(v12 - 65) < 0)
    operator delete(*(void **)(v12 - 88));
  _Unwind_Resume(a1);
}

_QWORD *ZinIrKernel::DilateKernel@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  _QWORD *result;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t data;

  v20 = a5;
  data = a4;
  result = *(_QWORD **)(a1 + 584);
  if (!result
    || (result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 64))(&v19, result, a4, a5, a1 + 592, a6), !v19))
  {
    *a7 = 0;
    return result;
  }
  if (*(_DWORD *)(v19 + 8) == 6)
    v12 = 4;
  else
    v12 = *(_DWORD *)(v19 + 8);
  v13 = *(_BYTE *)(a1 + 448);
  if ((v13 & 8) != 0)
  {
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(a1 + 568), &v18);
    if ((*(_BYTE *)(a1 + 448) & 2) == 0)
      goto LABEL_8;
LABEL_11:
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(a1 + 592), &v17);
    goto LABEL_12;
  }
  v18 = 0;
  if ((v13 & 2) != 0)
    goto LABEL_11;
LABEL_8:
  v17 = 0;
LABEL_12:
  v14 = operator new();
  ZinIrKernel::ZinIrKernel(v14, a2, v12, a3, &v19, &v18, &v17, a1, 2);
  *a7 = v14;
  v15 = v17;
  v17 = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v17, v15);
  v16 = v18;
  v18 = 0;
  if (v16)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v18, v16);
  CC_SHA256_Update((CC_SHA256_CTX *)(v14 + 52), "std::unique_ptr<ZinIrKernel> ZinIrKernel::DilateKernel(std::string &&, const ZinIrConvInfo &, size_t, size_t, const ZinIrHalParameters &, const BOOL) const", 0x9Bu);
  CC_SHA256_Update((CC_SHA256_CTX *)(v14 + 52), &data, 8u);
  CC_SHA256_Update((CC_SHA256_CTX *)(v14 + 52), &v20, 8u);
  result = (_QWORD *)v19;
  v19 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  return result;
}

void sub_207068E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;

  v13 = a11;
  a11 = 0;
  if (v13)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v13);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  _Unwind_Resume(exception_object);
}

void ZinIrKernel::MergeResizeNNIntoConvKernel(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X8>)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v25;
  CC_SHA256_CTX *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  if ((*(_BYTE *)(a1 + 448) & 0x10) != 0)
  {
    v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v14)
      ZinIrKernel::MergeResizeNNIntoConvKernel(v14, v15, v16, v17, v18, v19, v20, v21);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a1 + 448) & 0xA) != 0)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinIrKernel::MergeResizeNNIntoConvKernel(v6, v7, v8, v9, v10, v11, v12, v13);
LABEL_7:
    *a5 = 0;
    return;
  }
  ZinIrWeight::MergeResizeNNConvWeight(*(_QWORD *)(a1 + 584), (int *)(a2 + 36), &v34);
  v33 = 0;
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat const&,ZinIrConvInfo const&,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),decltype(nullptr),SHAUpdateMode const&>(a4, (int *)(a1 + 176), a3, &v34, &v33, a5);
  if (!*(_BYTE *)(a1 + 156))
    ZinAssertImpl("kernel with invalid sha.");
  v25 = *a5;
  v26 = (CC_SHA256_CTX *)(*a5 + 52);
  v27 = *(_OWORD *)(a1 + 52);
  v28 = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(v25 + 84) = *(_OWORD *)(a1 + 84);
  *(_OWORD *)(v25 + 68) = v28;
  *(_OWORD *)(v25 + 52) = v27;
  v29 = *(_OWORD *)(a1 + 100);
  v30 = *(_OWORD *)(a1 + 116);
  v31 = *(_OWORD *)(a1 + 132);
  *(_QWORD *)(v25 + 148) = *(_QWORD *)(a1 + 148);
  *(_OWORD *)(v25 + 132) = v31;
  *(_OWORD *)(v25 + 116) = v30;
  *(_OWORD *)(v25 + 100) = v29;
  *(_BYTE *)(v25 + 156) = 1;
  CC_SHA256_Update(v26, "std::unique_ptr<ZinIrKernel> ZinIrKernel::MergeResizeNNIntoConvKernel(const ZinIrConvInfo &, const ZinIrConvInfo &, std::string &)", 0x82u);
  CC_SHA256_Update((CC_SHA256_CTX *)(*a5 + 52), (char *)a3 + 36, 4u);
  CC_SHA256_Update((CC_SHA256_CTX *)(*a5 + 52), (char *)a3 + 40, 4u);
  CC_SHA256_Update((CC_SHA256_CTX *)(*a5 + 52), (char *)a3 + 8, 8u);
  CC_SHA256_Update((CC_SHA256_CTX *)(*a5 + 52), a3, 8u);
  v32 = v34;
  v34 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
}

void sub_2070690D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat const&,ZinIrConvInfo const&,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),decltype(nullptr),SHAUpdateMode const&>@<X0>(__int128 *a1@<X0>, int *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, int *a5@<X7>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = operator new();
  v13 = *a2;
  v17 = 0;
  v18 = 0;
  result = ZinIrKernel::ZinIrKernel(v12, a1, v13, a3, a4, &v18, &v17, 0, *a5);
  *a6 = v12;
  v15 = v17;
  v17 = 0;
  if (v15)
    result = std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v17, v15);
  v16 = v18;
  v18 = 0;
  if (v16)
    return std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v18, v16);
  return result;
}

void sub_2070691D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a11;
  a11 = 0;
  if (v14)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v14);
  v15 = a12;
  a12 = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a12, v15);
  MEMORY[0x20BD002F8](v12, 0x1032C40DEE44497);
  _Unwind_Resume(a1);
}

void ZinIrKernel::DeInterleaveDeconvKernelHeight(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  ZinIrWeight *v7;
  const void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t data;

  data = a4;
  v7 = *(ZinIrWeight **)(a1 + 584);
  if (!v7 || (v10 = (const void *)(a3 + 88), ZinIrWeight::HeightSplitDeconv(v7, a4, *(_QWORD *)(a3 + 88), &v20), !v20))
  {
    *a5 = 0;
    return;
  }
  v11 = *(_BYTE *)(a1 + 448);
  if ((v11 & 8) == 0)
  {
    v19 = 0;
    if ((v11 & 0x10) == 0)
      goto LABEL_5;
LABEL_9:
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(a1 + 576), &v18);
    if ((*(_BYTE *)(a1 + 448) & 2) == 0)
      goto LABEL_6;
LABEL_10:
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(a1 + 592), &v17);
    goto LABEL_11;
  }
  std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(a1 + 568), &v19);
  v11 = *(_BYTE *)(a1 + 448);
  if ((v11 & 0x10) != 0)
    goto LABEL_9;
LABEL_5:
  v18 = 0;
  if ((v11 & 2) != 0)
    goto LABEL_10;
LABEL_6:
  v17 = 0;
LABEL_11:
  v12 = operator new();
  ZinIrKernel::ZinIrKernel(v12, a2, a3, &v20, &v19, &v18, &v17, 0);
  *a5 = v12;
  ZinIrKernel::SetActivationParams((ZinIrKernel *)v12, (const ZinIrActivationParams *)(a1 + 616));
  if ((*(_QWORD *)(a1 + 584) || *(_QWORD *)(a1 + 600)) && *(_BYTE *)(a1 + 160))
    ZinIrKernel::SetMustCompressWeight(v12, *(_DWORD *)(a1 + 164));
  if (!*(_BYTE *)(a1 + 156))
    ZinAssertImpl("kernel with invalid sha.");
  *(_OWORD *)(v12 + 100) = *(_OWORD *)(a1 + 100);
  *(_OWORD *)(v12 + 116) = *(_OWORD *)(a1 + 116);
  *(_OWORD *)(v12 + 132) = *(_OWORD *)(a1 + 132);
  *(_QWORD *)(v12 + 148) = *(_QWORD *)(a1 + 148);
  *(_OWORD *)(v12 + 52) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(v12 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(v12 + 84) = *(_OWORD *)(a1 + 84);
  *(_BYTE *)(v12 + 156) = 1;
  CC_SHA256_Update((CC_SHA256_CTX *)(v12 + 52), v10, 8u);
  CC_SHA256_Update((CC_SHA256_CTX *)(v12 + 52), &data, 8u);
  v13 = v17;
  v17 = 0;
  if (v13)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v17, v13);
  v14 = v18;
  v18 = 0;
  if (v14)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v18, v14);
  v15 = v19;
  v19 = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v19, v15);
  v16 = v20;
  v20 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
}

void sub_207069420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = a11;
  a11 = 0;
  if (v14)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v14);
  v15 = a12;
  a12 = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a12, v15);
  v16 = a13;
  a13 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrKernel::SetActivationParams(ZinIrKernel *this, const ZinIrActivationParams *a2)
{
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CC_SHA256_CTX *v11;

  v2 = (char *)this + 616;
  v3 = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 632) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 648) = v4;
  *(_OWORD *)((char *)this + 616) = v3;
  v5 = *((_OWORD *)a2 + 3);
  v6 = *((_OWORD *)a2 + 4);
  v7 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)this + 696) = *((_OWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 712) = v7;
  *(_OWORD *)((char *)this + 664) = v5;
  *(_OWORD *)((char *)this + 680) = v6;
  v8 = *((_OWORD *)a2 + 7);
  v9 = *((_OWORD *)a2 + 8);
  v10 = *((_OWORD *)a2 + 9);
  *((_QWORD *)this + 97) = *((_QWORD *)a2 + 20);
  *(_OWORD *)((char *)this + 744) = v9;
  *(_OWORD *)((char *)this + 760) = v10;
  *(_OWORD *)((char *)this + 728) = v8;
  *((_BYTE *)this + 448) = *((_BYTE *)this + 448) & 0xFE | (*(_DWORD *)a2 > 1u);
  v11 = (CC_SHA256_CTX *)((char *)this + 52);
  CC_SHA256_Update((CC_SHA256_CTX *)((char *)this + 52), "lut", 3u);
  return CC_SHA256_Update(v11, v2, 0xA8u);
}

uint64_t ZinIrKernel::SetMustCompressWeight(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  int v5;
  int v6;
  char data;

  if (!*(_BYTE *)(a1 + 160)
    || ((result = IsFormatDMAConvertibleToFP16(a2), !(_DWORD)result) ? (v5 = a2) : (v5 = 3), v5 != *(_DWORD *)(a1 + 164)))
  {
    *(_BYTE *)(a1 + 160) = 1;
    if (IsFormatDMAConvertibleToFP16(a2))
      v6 = 3;
    else
      v6 = a2;
    *(_DWORD *)(a1 + 164) = v6;
    data = *(_BYTE *)(a1 + 160);
    CC_SHA256_Update((CC_SHA256_CTX *)(a1 + 52), &data, 1u);
    return CC_SHA256_Update((CC_SHA256_CTX *)(a1 + 52), (const void *)(a1 + 164), 4u);
  }
  return result;
}

uint64_t ZinIrKernel::CopyWithUpdatedInfo@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;

  v8 = operator new();
  ZinIrKernel::ZinIrKernel(v8, a2, a3, a1);
  *a4 = v8;
  return CC_SHA256_Update((CC_SHA256_CTX *)(v8 + 52), (const void *)(a1 + 52), 0x68u);
}

void sub_207069680(_Unwind_Exception *a1)
{
  ZinIrKernel **v1;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernel::CopyWithPaddingChanged@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14[4];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v7 = *(_QWORD *)(a1 + 552);
  v8 = *(_OWORD *)(a1 + 536);
  v15 = *(_OWORD *)(a1 + 520);
  v16 = v8;
  v9 = *(_OWORD *)(a1 + 472);
  v14[0] = *(_OWORD *)(a1 + 456);
  v14[1] = v9;
  v10 = *(_OWORD *)a3;
  v14[2] = *(_OWORD *)(a1 + 488);
  v14[3] = v10;
  v11 = *(_QWORD *)(a3 + 16);
  v17 = v7;
  *(_QWORD *)&v15 = v11;
  v12 = operator new();
  ZinIrKernel::ZinIrKernel(v12, a2, v14, a1);
  *a4 = v12;
  return CC_SHA256_Update((CC_SHA256_CTX *)(v12 + 52), (const void *)(a1 + 52), 0x68u);
}

void sub_20706975C(_Unwind_Exception *a1)
{
  ZinIrKernel **v1;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernel::CopyWithGroupCountChanged@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13[5];
  __int128 v14;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 552);
  v8 = *(_OWORD *)(a1 + 536);
  v13[4] = *(_OWORD *)(a1 + 520);
  v14 = v8;
  v9 = *(_OWORD *)(a1 + 472);
  v13[0] = *(_OWORD *)(a1 + 456);
  v13[1] = v9;
  v10 = *(_OWORD *)(a1 + 504);
  v13[2] = *(_OWORD *)(a1 + 488);
  v13[3] = v10;
  *((_QWORD *)&v14 + 1) = a3;
  v15 = v7;
  v11 = operator new();
  ZinIrKernel::ZinIrKernel(v11, a2, v13, a1);
  *a4 = v11;
  return CC_SHA256_Update((CC_SHA256_CTX *)(v11 + 52), (const void *)(a1 + 52), 0x68u);
}

void sub_20706982C(_Unwind_Exception *a1)
{
  ZinIrKernel **v1;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ZinIrKernel::CreateOneHotKernel(__int128 *a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t v15;
  std::__shared_weak_count *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  void **v33;
  std::__shared_weak_count *v34;
  void *__p[3];
  uint64_t v36;
  void *v37[3];
  void **v38;
  std::__shared_weak_count *v39;

  v12 = a3->i64[1] * a3->i64[0] * a3[1].i64[0] * a3[1].i64[1] * a3[2].i64[0];
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v37, v12, __p);
  *((_DWORD *)v37[0]
  + a4[4]
  + (a4[3] + (a4[2] + (a4[1] + a3->i64[1] * *a4) * a3[1].i64[0]) * a3[1].i64[1]) * a3[2].i64[0]) = 1065353216;
  if (*(_BYTE *)(a2 + 97))
    v13 = 1145261902;
  else
    v13 = 1262703187;
  ZinIrWeight::CreatePalettizedWeight(2, (float **)v37, 2uLL, a3, a5, v13, &v36);
  v14 = v36;
  if (!v36)
  {
    v15 = a3->i64[1] * a3->i64[0] * a3[1].i64[0] * a3[1].i64[1] * a3[2].i64[0];
    LOBYTE(v30) = 0;
    std::vector<unsigned char>::vector(__p, v15, &v30);
    *((_BYTE *)__p[0]
    + a4[4]
    + (a4[3] + (a4[2] + (a4[1] + a3->i64[1] * *a4) * a3[1].i64[0]) * a3[1].i64[1]) * a3[2].i64[0]) = 1;
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)__p, &v30);
    v17 = v30;
    v16 = v31;
    v33 = v30;
    v34 = v31;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v18 = operator new();
    v19 = v18;
    v38 = v17;
    v39 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    ZinIrWeight::ZinIrWeight(v18, &v38, &v30, 2, a3, 1, 1262703187, 0);
    v22 = v39;
    if (v39)
    {
      v23 = (unint64_t *)&v39->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v36;
    v36 = v19;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    v38 = (void **)&v30;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v38);
    v26 = v34;
    if (v34)
    {
      v27 = (unint64_t *)&v34->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v14 = v36;
  }
  LODWORD(v38) = *(_DWORD *)(v14 + 8);
  __p[0] = 0;
  v30 = 0;
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat,ZinIrConvInfo const&,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr)>(a1, (int *)&v38, (__int128 *)a2, &v36, a6);
  v29 = v36;
  v36 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
}

void sub_207069B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v21 - 88);
  MEMORY[0x20BD002F8](v20, 0x10B3C400FFB447ELL);
  *(_QWORD *)(v21 - 72) = &a10;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 72));
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  v23 = a18;
  a18 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat,ZinIrConvInfo const&,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr)>@<X0>(__int128 *a1@<X0>, int *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = operator new();
  v11 = *a2;
  v15 = 0;
  v16 = 0;
  result = ZinIrKernel::ZinIrKernel(v10, a1, v11, a3, a4, &v16, &v15, 0, 2);
  *a5 = v10;
  v13 = v15;
  v15 = 0;
  if (v13)
    result = std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v15, v13);
  v14 = v16;
  v16 = 0;
  if (v14)
    return std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v16, v14);
  return result;
}

void sub_207069C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a11;
  a11 = 0;
  if (v14)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v14);
  v15 = a12;
  a12 = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a12, v15);
  MEMORY[0x20BD002F8](v12, 0x1032C40DEE44497);
  _Unwind_Resume(a1);
}

void ZinIrKernel::CreateDynamicKernel(__int128 *a1@<X0>, uint64_t a2@<X1>, float **a3@<X2>, uint64_t a4@<X3>, int64x2_t *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v13;
  int v15;
  std::vector<char>::pointer v16;
  float *v17;
  float *v18;
  std::vector<char>::pointer v19;
  int v20;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  int64_t begin;
  float v45;
  float *v46;
  float *v47;
  std::vector<char>::pointer v48;
  float *v49;
  float *v50;
  int64_t v51;
  float v52;
  std::vector<char> *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  std::vector<char>::pointer v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::vector<char> v68;
  std::vector<char> *v69;
  std::__shared_weak_count *v70;
  std::vector<char>::pointer v71;
  std::vector<char> *v72;
  std::__shared_weak_count *v73;

  if (a5->i64[1] * a5->i64[0] * a5[1].i64[0] * a5[1].i64[1] * a5[2].i64[0] != a3[1] - *a3)
  {
    v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v26)
      ZinIrKernel::CreateDynamicKernel(v26, v27, v28, v29, v30, v31, v32, v33);
    goto LABEL_18;
  }
  if (a4 > 5 || ((1 << a4) & 0x36) == 0)
  {
    v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v34)
      ZinIrKernel::CreateDynamicKernel(v34, v35, v36, v37, v38, v39, v40, v41);
LABEL_18:
    *a9 = 0;
    return;
  }
  v13 = a2;
  v71 = 0;
  if (!a8
    || (*(_BYTE *)(a2 + 97) ? (v15 = 1145261902) : (v15 = 1262703187),
        ZinIrWeight::CreatePalettizedWeight(a4, a3, a6, a5, a7, v15, (uint64_t *)&v68),
        v16 = v68.__begin_,
        (v71 = v68.__begin_) == 0))
  {
    v69 = 0;
    v70 = 0;
    switch((_DWORD)a4)
    {
      case 2:
        memset(&v68, 0, sizeof(v68));
        v42 = *a3;
        v43 = a3[1];
        begin = (char *)v43 - (char *)*a3;
        if (v43 != *a3)
        {
          std::vector<char>::__append(&v68, begin >> 2);
          v42 = *a3;
          v43 = a3[1];
          begin = (int64_t)v68.__begin_;
        }
        while (v42 != v43)
        {
          v45 = *v42++;
          *(_BYTE *)begin++ = (int)v45;
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v68, &v72);
        break;
      case 5:
        memset(&v68, 0, sizeof(v68));
        v46 = *a3;
        v47 = a3[1];
        if (v47 == *a3)
        {
          v48 = 0;
        }
        else
        {
          std::vector<char>::__append(&v68, v47 - *a3);
          v46 = *a3;
          v47 = a3[1];
          v48 = v68.__begin_;
        }
        while (v46 != v47)
          *v48++ = ZinF32ToE4M3(*v46++, 1, 0);
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&v68, &v72);
        break;
      case 4:
        memset(&v68, 0, sizeof(v68));
        std::vector<half>::resize((uint64_t)&v68, a3[1] - *a3);
        v17 = *a3;
        v18 = a3[1];
        if (*a3 != v18)
        {
          v19 = v68.__begin_;
          do
          {
            v20 = *(_DWORD *)v17++;
            _S0 = v20;
            __asm { FCVT            H0, S0 }
            *(_WORD *)v19 = _S0;
            v19 += 2;
          }
          while (v17 != v18);
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v68, &v72);
        break;
      default:
        memset(&v68, 0, sizeof(v68));
        v49 = *a3;
        v50 = a3[1];
        v51 = (char *)v50 - (char *)*a3;
        if (v50 != *a3)
        {
          std::vector<char>::__append(&v68, v51 >> 2);
          v49 = *a3;
          v50 = a3[1];
          v51 = (int64_t)v68.__begin_;
        }
        while (v49 != v50)
        {
          v52 = *v49++;
          *(_BYTE *)v51++ = (int)v52;
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&v68, &v72);
        break;
    }
    v53 = v72;
    v54 = v73;
    v69 = v72;
    v70 = v73;
    if (v68.__begin_)
    {
      v68.__end_ = v68.__begin_;
      operator delete(v68.__begin_);
    }
    v55 = v13;
    v56 = *(unsigned __int8 *)(v13 + 97);
    memset(&v68, 0, sizeof(v68));
    v57 = operator new();
    v58 = (std::vector<char>::pointer)v57;
    if (v56)
      v59 = 1145261902;
    else
      v59 = 1262703187;
    v72 = v53;
    v73 = v54;
    v69 = 0;
    v70 = 0;
    ZinIrWeight::ZinIrWeight(v57, &v72, &v68, a4, a5, 0, v59, 0);
    v60 = v73;
    v13 = v55;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v62 = __ldaxr(p_shared_owners);
      while (__stlxr(v62 - 1, p_shared_owners));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = (uint64_t)v71;
    v71 = v58;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
    v72 = &v68;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    v64 = v70;
    if (v70)
    {
      v65 = (unint64_t *)&v70->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v16 = v71;
  }
  LODWORD(v69) = *((_DWORD *)v16 + 2);
  v68.__begin_ = 0;
  v72 = 0;
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat,ZinIrConvInfo const&,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr)>(a1, (int *)&v69, (__int128 *)v13, (uint64_t *)&v71, a9);
  v67 = (uint64_t)v71;
  v71 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
}

void sub_20706A0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ZinIrKernel::FuseBiasWithBottom(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  __int128 v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  __int128 v107;
  __int128 v108;
  void **v109;
  char v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if ((*(_BYTE *)(a1 + 448) & 0x10) == 0)
  {
    if ((*(_BYTE *)(*a2 + 448) & 0x10) == 0)
    {
      *a3 = 0;
      return;
    }
    v9 = *(_QWORD *)(v4 + 576);
    goto LABEL_102;
  }
  if ((*(_BYTE *)(*a2 + 448) & 0x18) == 0)
  {
    v9 = *(_QWORD *)(a1 + 576);
LABEL_102:
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v9, a3);
    return;
  }
  *a3 = 0;
  v7 = *(_QWORD *)(a1 + 576);
  if (v7 && *(_BYTE *)(v7 + 152))
  {
    v8 = *(_QWORD *)(v4 + 568);
    goto LABEL_58;
  }
  v8 = *(_QWORD *)(v4 + 568);
  if (!v8 || !*(_BYTE *)(v8 + 152))
  {
    v10 = *(_QWORD *)(v4 + 576);
    if (!v10 || !*(_BYTE *)(v10 + 152))
    {
LABEL_58:
      v108 = 0uLL;
      v107 = 0uLL;
      if (v8)
      {
        std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>(v8, &v103);
        v44 = v103;
        v103 = 0uLL;
        v45 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
        v108 = v44;
        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(p_shared_owners);
          while (__stlxr(v47 - 1, p_shared_owners));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
        if (*((_QWORD *)&v103 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v4 = *a2;
      }
      v51 = *(_QWORD *)(v4 + 576);
      if (v51)
      {
        std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>(v51, &v103);
        v52 = v103;
        v103 = 0uLL;
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
        v107 = v52;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
        if (*((_QWORD *)&v103 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
      std::allocate_shared[abi:ne180100]<ZinIrVectorFoldBiasWithBotScaleBotBias,std::allocator<ZinIrVectorFoldBiasWithBotScaleBotBias>,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,void>((uint64_t *)&v108, (uint64_t *)&v107, &v105);
      v59 = *(_QWORD *)(a1 + 576);
      v61 = v105;
      v60 = v106;
      v111 = v105;
      v112 = v106;
      if (v106)
      {
        v62 = (unint64_t *)&v106->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v103 = 0uLL;
      v104 = 0;
      v109 = (void **)&v103;
      v110 = 0;
      v64 = operator new(0x10uLL);
      *(_QWORD *)&v103 = v64;
      v104 = v64 + 2;
      *v64 = v61;
      v64[1] = v60;
      if (v60)
      {
        v65 = (unint64_t *)&v60->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      *((_QWORD *)&v103 + 1) = v64 + 2;
      ZinIrVector::Transform(v59, (uint64_t)&v103, a3);
      v109 = (void **)&v103;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v109);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v111);
      v67 = v106;
      if (v106)
      {
        v68 = (unint64_t *)&v106->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (*((_QWORD *)&v108 + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v43 = __ldaxr(v73);
        while (__stlxr(v43 - 1, v73));
LABEL_145:
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        return;
      }
      return;
    }
  }
  v11 = *(_QWORD *)(v4 + 576);
  if (!v11)
  {
    v108 = 0uLL;
    v107 = 0uLL;
    if (!v7)
      goto LABEL_126;
    goto LABEL_116;
  }
  if (!*(_BYTE *)(v11 + 152))
  {
    v108 = 0uLL;
    v107 = 0uLL;
    std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>(v11, &v103);
    v74 = v103;
    v103 = 0uLL;
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    v108 = v74;
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v7 = *(_QWORD *)(a1 + 576);
    if (!v7)
    {
LABEL_126:
      std::allocate_shared[abi:ne180100]<ZinIrVectorFoldBotScaleWithBotBiasBias,std::allocator<ZinIrVectorFoldBotScaleWithBotBiasBias>,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,void>((uint64_t *)&v108, (uint64_t *)&v107, &v105);
      v88 = *(_QWORD *)(*a2 + 568);
      v90 = v105;
      v89 = v106;
      v111 = v105;
      v112 = v106;
      if (v106)
      {
        v91 = (unint64_t *)&v106->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      v103 = 0uLL;
      v104 = 0;
      v109 = (void **)&v103;
      v110 = 0;
      v93 = operator new(0x10uLL);
      *(_QWORD *)&v103 = v93;
      v104 = v93 + 2;
      *v93 = v90;
      v93[1] = v89;
      if (v89)
      {
        v94 = (unint64_t *)&v89->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      *((_QWORD *)&v103 + 1) = v93 + 2;
      ZinIrVector::Transform(v88, (uint64_t)&v103, a3);
      v109 = (void **)&v103;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v109);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v111);
      v96 = v106;
      if (v106)
      {
        v97 = (unint64_t *)&v106->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v99 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (*((_QWORD *)&v108 + 1))
      {
        v102 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v43 = __ldaxr(v102);
        while (__stlxr(v43 - 1, v102));
        goto LABEL_145;
      }
      return;
    }
LABEL_116:
    std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>(v7, &v103);
    v81 = v103;
    v103 = 0uLL;
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
    v107 = v81;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v86 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    goto LABEL_126;
  }
  v108 = 0uLL;
  v107 = 0uLL;
  v12 = *(_QWORD *)(v4 + 568);
  if (v12)
  {
    std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>(v12, &v103);
    v13 = v103;
    v103 = 0uLL;
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    v108 = v13;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v7 = *(_QWORD *)(a1 + 576);
  }
  if (v7)
  {
    std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>(v7, &v103);
    v20 = v103;
    v103 = 0uLL;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
    v107 = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrVectorFoldBotBiasWithBotScaleBias,std::allocator<ZinIrVectorFoldBotBiasWithBotScaleBias>,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,void>((uint64_t *)&v108, (uint64_t *)&v107, &v105);
  v27 = *(_QWORD *)(*a2 + 576);
  v29 = v105;
  v28 = v106;
  v111 = v105;
  v112 = v106;
  if (v106)
  {
    v30 = (unint64_t *)&v106->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v103 = 0uLL;
  v104 = 0;
  v109 = (void **)&v103;
  v110 = 0;
  v32 = operator new(0x10uLL);
  *(_QWORD *)&v103 = v32;
  v104 = v32 + 2;
  *v32 = v29;
  v32[1] = v28;
  if (v28)
  {
    v33 = (unint64_t *)&v28->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *((_QWORD *)&v103 + 1) = v32 + 2;
  ZinIrVector::Transform(v27, (uint64_t)&v103, a3);
  v109 = (void **)&v103;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v109);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v111);
  v35 = v106;
  if (v106)
  {
    v36 = (unint64_t *)&v106->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    goto LABEL_145;
  }
}

void sub_20706A9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v9 = *v7;
  *v7 = 0;
  if (v9)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v7, v9);
  _Unwind_Resume(a1);
}

BOOL ZinIrKernel::HasMutableBias(ZinIrKernel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 72);
  return v1 && *(_BYTE *)(v1 + 152) != 0;
}

BOOL ZinIrKernel::HasMutableScale(ZinIrKernel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 71);
  return v1 && *(_BYTE *)(v1 + 152) != 0;
}

uint64_t ZinIrKernel::HasKernelConstData(ZinIrKernel *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 98);
  if (result)
  {
    if (!*((_QWORD *)this + 75))
      return 1;
    result = ZinMirAneKernel::HasAlignedKDMAData((ZinMirAneKernel *)result);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

void ZinIrKernel::FuseScaleWithBottom(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void **v43;
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if ((*(_BYTE *)(a1 + 448) & 8) == 0)
  {
    if ((*(_BYTE *)(*a2 + 448) & 8) == 0)
    {
      *a3 = 0;
      return;
    }
    v6 = *(_QWORD *)(v4 + 568);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(*a2 + 448) & 8) == 0)
  {
    v6 = *(_QWORD *)(a1 + 568);
LABEL_7:
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v6, a3);
    return;
  }
  *a3 = 0;
  v8 = *(_QWORD *)(v4 + 568);
  if (v8 && *(_BYTE *)(v8 + 152))
  {
    v9 = *(_QWORD *)(a1 + 568);
    goto LABEL_27;
  }
  v9 = *(_QWORD *)(a1 + 568);
  if (!*(_BYTE *)(v9 + 152))
  {
LABEL_27:
    std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>(v9, &v41);
    std::allocate_shared[abi:ne180100]<ZinIrVectorEWMultiply,std::allocator<ZinIrVectorEWMultiply>,std::shared_ptr<ZinIrVector> &,void>(&v41, &v39);
    v24 = *(_QWORD *)(*a2 + 568);
    v26 = v39;
    v25 = v40;
    v45 = v39;
    v46 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v43 = (void **)&v36;
    v44 = 0;
    v29 = operator new(0x10uLL);
    v36 = v29;
    v38 = v29 + 2;
    *v29 = v26;
    v29[1] = v25;
    if (v25)
    {
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v37 = v29 + 2;
    ZinIrVector::Transform(v24, (uint64_t)&v36, a3);
    v43 = (void **)&v36;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v43);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
    v32 = v40;
    if (v40)
    {
      v33 = (unint64_t *)&v40->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v21 = v42;
    if (v42)
    {
      v35 = (unint64_t *)&v42->__shared_owners_;
      do
        v23 = __ldaxr(v35);
      while (__stlxr(v23 - 1, v35));
LABEL_41:
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      return;
    }
    return;
  }
  std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>(v8, &v41);
  std::allocate_shared[abi:ne180100]<ZinIrVectorEWMultiply,std::allocator<ZinIrVectorEWMultiply>,std::shared_ptr<ZinIrVector> &,void>(&v41, &v39);
  v10 = *(_QWORD *)(a1 + 568);
  v12 = v39;
  v11 = v40;
  v45 = v39;
  v46 = v40;
  if (v40)
  {
    v13 = (unint64_t *)&v40->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v43 = (void **)&v36;
  v44 = 0;
  v15 = operator new(0x10uLL);
  v36 = v15;
  v38 = v15 + 2;
  *v15 = v12;
  v15[1] = v11;
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v37 = v15 + 2;
  ZinIrVector::Transform(v10, (uint64_t)&v36, a3);
  v43 = (void **)&v36;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v43);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
  v18 = v40;
  if (v40)
  {
    v19 = (unint64_t *)&v40->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v42;
  if (v42)
  {
    v22 = (unint64_t *)&v42->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    goto LABEL_41;
  }
}

void sub_20706AE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v5 - 56);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v4, v7);
  _Unwind_Resume(a1);
}

void ZinIrKernel::FuseScaleBiasWithBottom(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  char v5;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 v16;
  uint64_t v17;
  CC_SHA256_CTX *v18;
  uint64_t *v19;
  CC_LONG v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  char *v35;
  CC_LONG v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = 0;
  v5 = *(_BYTE *)(a1 + 448);
  if ((v5 & 2) != 0)
  {
    v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v24)
      ZinIrKernel::FuseScaleBiasWithBottom(v24, v25, v26, v27, v28, v29, v30, v31);
    v17 = 0;
    goto LABEL_41;
  }
  if (*a3)
  {
    ZinIrKernel::FuseBiasWithBottom(a1, a3, &v42);
    ZinIrKernel::FuseScaleWithBottom(a1, a3, &v41);
    LODWORD(v38) = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string,std::unique_ptr<ZinIrVector>,std::unique_ptr<ZinIrVector>,SHAUpdateMode>(a3, a2, &v41, &v42, (int *)&v38, &v39);
    v9 = v39;
    v40 = v39;
    v10 = *a3;
    if (!*a3 || !*(_BYTE *)(v10 + 156))
      ZinAssertImpl("kernel with invalid sha.");
    v11 = *(_OWORD *)(v10 + 52);
    v12 = *(_OWORD *)(v10 + 68);
    *(_OWORD *)(v39 + 84) = *(_OWORD *)(v10 + 84);
    *(_OWORD *)(v9 + 68) = v12;
    *(_OWORD *)(v9 + 52) = v11;
    v13 = *(_OWORD *)(v10 + 100);
    v14 = *(_OWORD *)(v10 + 116);
    v15 = *(_OWORD *)(v10 + 132);
    *(_QWORD *)(v9 + 148) = *(_QWORD *)(v10 + 148);
    *(_OWORD *)(v9 + 132) = v15;
    *(_OWORD *)(v9 + 116) = v14;
    *(_OWORD *)(v9 + 100) = v13;
    *(_BYTE *)(v9 + 156) = 1;
    if ((v16 & 1) == 0
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &ZinIrKernel::FuseScaleBiasWithBottom(std::string &&,std::unique_ptr<ZinIrKernel> const&)const::operation_string, &dword_2069AB000);
    }
    v17 = v40;
    v18 = (CC_SHA256_CTX *)(v40 + 52);
    if (byte_2545181CF >= 0)
      v19 = &ZinIrKernel::FuseScaleBiasWithBottom(std::string &&,std::unique_ptr<ZinIrKernel> const&)const::operation_string;
    else
      v19 = (uint64_t *)ZinIrKernel::FuseScaleBiasWithBottom(std::string &&,std::unique_ptr<ZinIrKernel> const&)const::operation_string;
    if (byte_2545181CF >= 0)
      v20 = byte_2545181CF;
    else
      v20 = dword_2545181C0;
    CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 52), v19, v20);
    CC_SHA256_Update(v18, (const void *)(a1 + 52), 0x68u);
    v21 = v41;
    v41 = 0;
    if (v21)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v41, v21);
    v22 = v42;
    v42 = 0;
    if (v22)
    {
      v23 = &v42;
LABEL_40:
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v23, v22);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  if ((*(_BYTE *)(a1 + 448) & 8) != 0)
  {
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(a1 + 568), &v39);
    if ((*(_BYTE *)(a1 + 448) & 0x10) == 0)
      goto LABEL_21;
  }
  else
  {
    v39 = 0;
    if ((v5 & 0x10) == 0)
    {
LABEL_21:
      v38 = 0;
      goto LABEL_24;
    }
  }
  std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(*(_QWORD *)(a1 + 576), &v38);
LABEL_24:
  v32 = operator new();
  v41 = 0;
  v42 = 0;
  ZinIrKernel::ZinIrKernel(v32, a2, a1 + 176, &v42, &v39, &v38, &v41, 0);
  v33 = v41;
  v41 = 0;
  if (v33)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v41, v33);
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
  v40 = v32;
  if (!*(_BYTE *)(a1 + 156))
    ZinAssertImpl("kernel with invalid sha.");
  *(_OWORD *)(v32 + 100) = *(_OWORD *)(a1 + 100);
  *(_OWORD *)(v32 + 116) = *(_OWORD *)(a1 + 116);
  *(_OWORD *)(v32 + 132) = *(_OWORD *)(a1 + 132);
  *(_QWORD *)(v32 + 148) = *(_QWORD *)(a1 + 148);
  *(_OWORD *)(v32 + 52) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(v32 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(v32 + 84) = *(_OWORD *)(a1 + 84);
  *(_BYTE *)(v32 + 156) = 1;
  if ((v34 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], ZinIrKernel::FuseScaleBiasWithBottom(std::string &&,std::unique_ptr<ZinIrKernel> const&)const::operation_string, &dword_2069AB000);
  }
  v17 = v40;
  if (byte_2545181E7 >= 0)
    v35 = ZinIrKernel::FuseScaleBiasWithBottom(std::string &&,std::unique_ptr<ZinIrKernel> const&)const::operation_string;
  else
    v35 = *(char **)ZinIrKernel::FuseScaleBiasWithBottom(std::string &&,std::unique_ptr<ZinIrKernel> const&)const::operation_string;
  if (byte_2545181E7 >= 0)
    v36 = byte_2545181E7;
  else
    v36 = dword_2545181D8;
  CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 52), v35, v36);
  v37 = v38;
  v38 = 0;
  if (v37)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v38, v37);
  v22 = v39;
  v39 = 0;
  if (v22)
  {
    v23 = &v39;
    goto LABEL_40;
  }
LABEL_41:
  *a4 = v17;
}

void sub_20706B228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v4 = v5;
  v5 = 0;
  if (v4)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)va, v4);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string,std::unique_ptr<ZinIrVector>,std::unique_ptr<ZinIrVector>,SHAUpdateMode>@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = operator new();
  v13 = *a3;
  *a3 = 0;
  v14 = *a4;
  *a4 = 0;
  v18 = v14;
  v19 = v13;
  result = ZinIrKernel::ZinIrKernel(v12, a1, a2, &v19, &v18, *a5);
  *a6 = v12;
  v16 = v18;
  v18 = 0;
  if (v16)
    result = std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v18, v16);
  v17 = v19;
  v19 = 0;
  if (v17)
    return std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v19, v17);
  return result;
}

void sub_20706B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string>(&a10);
  MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernel::TransformPerCoutGOCKernelToSingularGOCKernel@<X0>(uint64_t a1@<X0>, char *a2@<X1>, ZinIrVector **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  _BOOL4 IsQualifiedToConvertPerCoutVectorToSingularVector;
  uint64_t result;
  int v13;
  ZinIrVector *v14;
  ZinIrVector *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE __dst[280];
  uint64_t v25;

  memcpy(__dst, (const void *)(a1 + 176), sizeof(__dst));
  if (!*a3)
  {
    result = *a4;
    if (!*a4)
    {
LABEL_9:
      *a6 = 0;
      return result;
    }
    IsQualifiedToConvertPerCoutVectorToSingularVector = 0;
LABEL_7:
    result = ZinIrVector::IsQualifiedToConvertPerCoutVectorToSingularVector((ZinIrVector *)result, a2[728], a2[729]);
    v13 = result;
    if (IsQualifiedToConvertPerCoutVectorToSingularVector)
      goto LABEL_10;
    goto LABEL_8;
  }
  IsQualifiedToConvertPerCoutVectorToSingularVector = ZinIrVector::IsQualifiedToConvertPerCoutVectorToSingularVector(*a3, a2[730], a2[731]);
  result = *a4;
  if (*a4)
    goto LABEL_7;
  v13 = 0;
  if (IsQualifiedToConvertPerCoutVectorToSingularVector)
    goto LABEL_10;
LABEL_8:
  if ((v13 & 1) == 0)
    goto LABEL_9;
LABEL_10:
  if (IsQualifiedToConvertPerCoutVectorToSingularVector)
    __dst[9] = 0;
  if (v13)
    __dst[17] = 0;
  v14 = *a3;
  if (IsQualifiedToConvertPerCoutVectorToSingularVector)
  {
    ZinIrVector::ConvertPerCoutVectorToSingularVector(v14, a2[730], a2[731], &v23);
  }
  else if (v14)
  {
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>((uint64_t)v14, &v23);
  }
  else
  {
    v23 = 0;
  }
  v15 = (ZinIrVector *)*a4;
  if (v13)
  {
    ZinIrVector::ConvertPerCoutVectorToSingularVector(v15, a2[728], a2[729], &v22);
  }
  else if (v15)
  {
    std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>((uint64_t)v15, &v22);
  }
  else
  {
    v22 = 0;
  }
  v21 = 0;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  v16 = operator new();
  v25 = 0;
  ZinIrKernel::ZinIrKernel(v16, (__int128 *)&__p, (uint64_t)__dst, &v21, &v23, &v22, &v25, 2);
  *a6 = v16;
  v17 = v25;
  v25 = 0;
  if (v17)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v25, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = v21;
  if (v21)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  v18 = v22;
  v22 = 0;
  if (v18)
    result = std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v22, v18);
  v19 = v23;
  v23 = 0;
  if (v19)
    return std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v23, v19);
  return result;
}

void sub_20706B5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;

  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 16))(a15);
  v18 = a16;
  a16 = 0;
  if (v18)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a16, v18);
  v19 = a17;
  a17 = 0;
  if (v19)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a17, v19);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrKernel::AdjustPalettizedKernel(const void **a1, ZinIrKernel **a2)
{
  ZinIrWeight *v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  ZinIrKernel *v8;
  uint64_t v9;
  ZinIrKernel *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::string __p;
  _DWORD __dst[70];
  std::string v20;
  uint64_t v21;
  uint64_t v22;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a2, 0);
  v4 = (ZinIrWeight *)a1[73];
  if (v4)
  {
    ZinIrWeight::CreateDePalettizedWeight(v4, 0, &v21);
    if (v21)
    {
      if (*((char *)a1 + 23) >= 0)
        v5 = *((unsigned __int8 *)a1 + 23);
      else
        v5 = (size_t)a1[1];
      v6 = &v20;
      std::string::basic_string[abi:ne180100]((uint64_t)&v20, v5 + 23);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v6 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if (v5)
      {
        if (*((char *)a1 + 23) >= 0)
          v7 = a1;
        else
          v7 = *a1;
        memmove(v6, v7, v5);
      }
      strcpy((char *)v6 + v5, "_AdjustPalettizedKernel");
      memcpy(__dst, a1 + 22, sizeof(__dst));
      __dst[0] = *(_DWORD *)(v21 + 8);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      else
        __p = v20;
      v8 = (ZinIrKernel *)operator new();
      v22 = 0;
      ZinIrKernel::ZinIrKernel((uint64_t)v8, (__int128 *)&__p, (uint64_t)__dst, &v21, (uint64_t *)a1 + 71, (uint64_t *)a1 + 72, &v22, 0);
      v9 = v22;
      v22 = 0;
      if (v9)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v22, v9);
      std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a2, v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!*((_BYTE *)a1 + 156))
        ZinAssertImpl("kernel with invalid sha.");
      v10 = *a2;
      v11 = *(_OWORD *)((char *)a1 + 52);
      v12 = *(_OWORD *)((char *)a1 + 68);
      *(_OWORD *)((char *)v10 + 84) = *(_OWORD *)((char *)a1 + 84);
      *(_OWORD *)((char *)v10 + 68) = v12;
      *(_OWORD *)((char *)v10 + 52) = v11;
      v13 = *(_OWORD *)((char *)a1 + 100);
      v14 = *(_OWORD *)((char *)a1 + 116);
      v15 = *(_OWORD *)((char *)a1 + 132);
      *(_QWORD *)((char *)v10 + 148) = *(const void **)((char *)a1 + 148);
      *(_OWORD *)((char *)v10 + 132) = v15;
      *(_OWORD *)((char *)v10 + 116) = v14;
      *(_OWORD *)((char *)v10 + 100) = v13;
      *((_BYTE *)v10 + 156) = 1;
      CC_SHA256_Update((CC_SHA256_CTX *)((char *)*a2 + 52), "ZinIrStatus ZinIrKernel::AdjustPalettizedKernel(std::unique_ptr<ZinIrKernel> &)", 0x4Fu);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v16 = v21;
      v21 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  return 0;
}

void sub_20706B8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  if (*(char *)(v14 - 65) < 0)
    operator delete(*(void **)(v14 - 88));
  v16 = *(_QWORD *)(v14 - 64);
  *(_QWORD *)(v14 - 64) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrKernel::AdjustUnityKernel(const void **a1, ZinIrKernel **a2)
{
  uint64_t result;
  size_t v5;
  std::string *v6;
  const void *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrKernel *v16;
  uint64_t v17;
  ZinIrKernel *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  std::string __p;
  _DWORD __dst[70];
  std::string v27;
  uint64_t v28;
  uint64_t v29;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a2, 0);
  result = ZinKernelFormatIsUnity(*((_DWORD *)a1 + 44));
  if ((_DWORD)result)
  {
    if (((_BYTE)a1[56] & 2) != 0)
    {
      v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v8)
        ZinIrKernel::AdjustUnityKernel(v8, v9, v10, v11, v12, v13, v14, v15);
      return 3;
    }
    else
    {
      ZinIrWeight::CreatePalettizedUnityWeight(*((_DWORD *)a1 + 44), (int64x2_t *)(a1 + 31), &v28);
      if (*((char *)a1 + 23) >= 0)
        v5 = *((unsigned __int8 *)a1 + 23);
      else
        v5 = (size_t)a1[1];
      v6 = &v27;
      std::string::basic_string[abi:ne180100]((uint64_t)&v27, v5 + 74);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v6 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if (v5)
      {
        if (*((char *)a1 + 23) >= 0)
          v7 = a1;
        else
          v7 = *a1;
        memmove(v6, v7, v5);
      }
      strcpy((char *)v6 + v5, "ZinIrStatus ZinIrKernel::AdjustUnityKernel(std::unique_ptr<ZinIrKernel> &)");
      memcpy(__dst, a1 + 22, sizeof(__dst));
      __dst[0] = *(_DWORD *)(v28 + 8);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      else
        __p = v27;
      v16 = (ZinIrKernel *)operator new();
      v29 = 0;
      ZinIrKernel::ZinIrKernel((uint64_t)v16, (__int128 *)&__p, (uint64_t)__dst, &v28, (uint64_t *)a1 + 71, (uint64_t *)a1 + 72, &v29, 0);
      v17 = v29;
      v29 = 0;
      if (v17)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v29, v17);
      std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a2, v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!*((_BYTE *)a1 + 156))
        ZinAssertImpl("kernel with invalid sha.");
      v18 = *a2;
      v19 = *(_OWORD *)((char *)a1 + 52);
      v20 = *(_OWORD *)((char *)a1 + 68);
      *(_OWORD *)((char *)v18 + 84) = *(_OWORD *)((char *)a1 + 84);
      *(_OWORD *)((char *)v18 + 68) = v20;
      *(_OWORD *)((char *)v18 + 52) = v19;
      v21 = *(_OWORD *)((char *)a1 + 100);
      v22 = *(_OWORD *)((char *)a1 + 116);
      v23 = *(_OWORD *)((char *)a1 + 132);
      *(_QWORD *)((char *)v18 + 148) = *(const void **)((char *)a1 + 148);
      *(_OWORD *)((char *)v18 + 132) = v23;
      *(_OWORD *)((char *)v18 + 116) = v22;
      *(_OWORD *)((char *)v18 + 100) = v21;
      *((_BYTE *)v18 + 156) = 1;
      CC_SHA256_Update((CC_SHA256_CTX *)((char *)*a2 + 52), "ZinIrStatus ZinIrKernel::AdjustUnityKernel(std::unique_ptr<ZinIrKernel> &)", 0x4Au);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v24 = v28;
      v28 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
      return 0;
    }
  }
  return result;
}

void sub_20706BB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  if (*(char *)(v14 - 65) < 0)
    operator delete(*(void **)(v14 - 88));
  v16 = *(_QWORD *)(v14 - 64);
  *(_QWORD *)(v14 - 64) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrKernel::SetSmallSourceMode(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 168) != a2)
    *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t ZinIrKernel::SetDoubleInt8Mode(uint64_t this, char a2)
{
  *(_BYTE *)(this + 172) = a2;
  return this;
}

uint64_t ZinIrKernel::SetHalfWorkUnitMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 173) = a2;
  return result;
}

uint64_t ZinIrKernel::CompressionInfo::Enable(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  int v5;

  *(_BYTE *)a1 = 1;
  result = IsFormatDMAConvertibleToFP16(a2);
  if ((_DWORD)result)
    v5 = 3;
  else
    v5 = a2;
  *(_DWORD *)(a1 + 4) = v5;
  return result;
}

uint64_t ZinIrKernel::SetKernelLayoutFormat(uint64_t a1, int a2)
{
  int data;

  data = a2;
  *(_DWORD *)(a1 + 408) = a2;
  return CC_SHA256_Update((CC_SHA256_CTX *)(a1 + 52), &data, 4u);
}

BOOL ZinIrKernel::AreAllSerializedComponentsMutable(ZinIrKernel *this)
{
  uint64_t v1;
  _BOOL4 v2;
  uint64_t v3;
  _BOOL4 v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 71);
  if (v1)
    v2 = *(_BYTE *)(v1 + 288) == 0;
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 72);
  if (v3)
    v4 = *(_BYTE *)(v3 + 288) == 0;
  else
    v4 = 0;
  result = *((_DWORD *)this + 154) <= 1u
        && ((v6 = *((_QWORD *)this + 74), v7 = *((_QWORD *)this + 73), !v2) || *(_BYTE *)(v1 + 152))
        && (!v4 || *(_BYTE *)(v3 + 152))
        && (!v6 || *(_BYTE *)(v6 + 152))
        && (!v7 || *(_BYTE *)(v7 + 152));
  return result;
}

BOOL ZinIrKernel::HasSingularScale(ZinIrKernel *this)
{
  return (*((_BYTE *)this + 448) & 8) != 0 && *((_BYTE *)this + 185) == 0;
}

BOOL ZinIrKernel::HasSingularScale(ZinIrKernel *this, float *a2)
{
  *a2 = *((float *)this + 45);
  return (*((_BYTE *)this + 448) & 8) != 0 && *((_BYTE *)this + 185) == 0;
}

BOOL ZinIrKernel::HasPerCoutScale(ZinIrKernel *this)
{
  return (*((_BYTE *)this + 448) & 8) != 0 && *((_BYTE *)this + 185) != 0;
}

BOOL ZinIrKernel::HasDefaultScale(ZinIrKernel *this)
{
  if ((*((_BYTE *)this + 448) & 8) == 0)
    return 1;
  if (*((_BYTE *)this + 184) || *((_BYTE *)this + 185))
    return 0;
  _S0 = *((_DWORD *)this + 45);
  __asm { FCVT            H0, S0 }
  return (unsigned __int16)_S0 == 15360;
}

BOOL ZinIrKernel::ReplaceTensorKernel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 600);
  if (v2)
    std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]((_QWORD *)(a1 + 600), a2);
  return v2 != 0;
}

uint64_t ZinIrKernel::GetScaleFormat(ZinIrKernel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 71);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  else
    return 0;
}

BOOL ZinIrKernel::HasSingularBias(ZinIrKernel *this)
{
  return (*((_BYTE *)this + 448) & 0x10) != 0 && *((_BYTE *)this + 193) == 0;
}

BOOL ZinIrKernel::HasSingularBias(ZinIrKernel *this, float *a2)
{
  *a2 = *((float *)this + 47);
  return (*((_BYTE *)this + 448) & 0x10) != 0 && *((_BYTE *)this + 193) == 0;
}

BOOL ZinIrKernel::HasPerCoutBias(ZinIrKernel *this)
{
  return (*((_BYTE *)this + 448) & 0x10) != 0 && *((_BYTE *)this + 193) != 0;
}

BOOL ZinIrKernel::HasDefaultBias(ZinIrKernel *this, int a2)
{
  if ((*((_BYTE *)this + 448) & 0x10) == 0)
    return 1;
  if (*((_BYTE *)this + 193))
    return 0;
  _S0 = *((_DWORD *)this + 47);
  __asm { FCVT            H0, S0 }
  if (a2)
    return (_H0 & 0x7C00) == 0;
  else
    return (_H0 & 0x7FFF) == 0;
}

__n128 ZinIrKernel::GetBiasDimensions@<Q0>(ZinIrKernel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _OWORD *v3;
  BOOL v4;
  _OWORD *v5;
  __n128 result;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v2 = *((_QWORD *)this + 72);
  v3 = (_OWORD *)(v2 + 56);
  v4 = v2 == 0;
  v5 = v8;
  if (!v4)
    v5 = v3;
  result = *(__n128 *)v5;
  v7 = v5[1];
  *(_OWORD *)a2 = *v5;
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)v5 + 4);
  return result;
}

BOOL ZinIrKernel::HasNoBiasNoWeightButSingularScale(ZinIrKernel *this, int a2)
{
  if (*((_QWORD *)this + 73) || *((_QWORD *)this + 75))
    return 0;
  if ((*((_BYTE *)this + 448) & 0x10) != 0)
  {
    if (!*((_BYTE *)this + 193))
    {
      _S0 = *((_DWORD *)this + 47);
      __asm { FCVT            H0, S0 }
      if (a2)
      {
        if ((_H0 & 0x7C00) == 0)
          return (*((_BYTE *)this + 448) & 8) == 0 || *((_BYTE *)this + 185) == 0;
      }
      else if ((_H0 & 0x7FFF) == 0)
      {
        return (*((_BYTE *)this + 448) & 8) == 0 || *((_BYTE *)this + 185) == 0;
      }
    }
    return 0;
  }
  return (*((_BYTE *)this + 448) & 8) == 0 || *((_BYTE *)this + 185) == 0;
}

BOOL ZinIrKernel::HasNoBiasNoWeightButPerChannelScale(ZinIrKernel *this, int a2)
{
  if (*((_QWORD *)this + 73) || *((_QWORD *)this + 75))
    return 0;
  if ((*((_BYTE *)this + 448) & 0x10) != 0)
  {
    if (*((_BYTE *)this + 193))
      return 0;
    _S0 = *((_DWORD *)this + 47);
    __asm { FCVT            H0, S0 }
    if (a2)
    {
      if ((_H0 & 0x7C00) != 0)
        return 0;
    }
    else if ((_H0 & 0x7FFF) != 0)
    {
      return 0;
    }
  }
  if ((*((_BYTE *)this + 448) & 8) == 0)
    return 0;
  return *((_BYTE *)this + 185) != 0;
}

double ZinIrKernel::GetWeightDimensions@<D0>(ZinIrKernel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *((_QWORD *)this + 73);
  if (v2)
  {
    v3 = *(_OWORD *)(v2 + 56);
    v4 = *(_OWORD *)(v2 + 72);
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v2 + 88);
  }
  else if (*((_QWORD *)this + 75))
  {
    v3 = *(_OWORD *)((char *)this + 248);
    *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 35);
    v5 = *(_OWORD *)((char *)this + 264);
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)&v3 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return *(double *)&v3;
}

BOOL ZinIrKernel::HasVectorPalettizedWeight(ZinIrKernel *this)
{
  _BOOL8 result;

  if ((*((_BYTE *)this + 448) & 4) == 0)
    return 0;
  result = ZinKernelFormatIsPalette(*((_DWORD *)this + 44));
  if ((_DWORD)result)
    return *((_QWORD *)this + 52) > 1uLL;
  return result;
}

BOOL ZinIrKernel::HasSingularZeroPoint(ZinIrKernel *this)
{
  return (*((_BYTE *)this + 448) & 2) != 0 && *((_BYTE *)this + 201) == 0;
}

BOOL ZinIrKernel::HasPerCoutZeroPoint(ZinIrKernel *this)
{
  return (*((_BYTE *)this + 448) & 2) != 0 && *((_BYTE *)this + 201) != 0;
}

BOOL ZinIrKernel::HasSingularZeroPoint(ZinIrKernel *this, int *a2)
{
  *a2 = (int)*((float *)this + 49);
  return (*((_BYTE *)this + 448) & 2) != 0 && *((_BYTE *)this + 201) == 0;
}

double ZinIrKernel::GetWeightElementSizeInBytes(ZinIrKernel *this)
{
  return ZinGetWeightElementSizeInBytes(*((_DWORD *)this + 44));
}

void ZinIrKernel::GetSparsityRatio(ZinIrKernel *this, char a2, ZinKernelSparsityCache *a3)
{
  int Hash;
  float v7;
  float v8;

  if (*((_QWORD *)this + 73))
  {
    if ((a2 & 2) != 0)
      ZinIrKernel::CalculateSparsityFromPadding(this);
    if ((a2 & 4) != 0)
    {
      Hash = ZinIrKernel::GetHash(this);
      if (ZinKernelSparsityCache::Contains(a3, Hash))
      {
        ZinKernelSparsityCache::Get(a3, Hash);
      }
      else
      {
        v8 = ZinIrKernel::CalculateSparsityFromWeightScan(this, v7);
        ZinKernelSparsityCache::Add(a3, Hash, v8);
      }
    }
  }
}

float ZinIrKernel::CalculateSparsityFromPadding(ZinIrKernel *this)
{
  uint64_t ProgrammedKernelDimension;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  ProgrammedKernelDimension = details::ZinGetProgrammedKernelDimension(*((int *)this + 82), *((int *)this + 85), *((_QWORD *)this + 34), *((_DWORD *)this + 88));
  v3 = details::ZinGetProgrammedKernelDimension(*((int *)this + 83), *((int *)this + 86), *((_QWORD *)this + 33), *((_DWORD *)this + 90));
  v4 = details::ZinGetProgrammedKernelDimension(*((int *)this + 84), *((int *)this + 87), *((_QWORD *)this + 35), *((_DWORD *)this + 92));
  v5 = *((_QWORD *)this + 33) * *((_QWORD *)this + 34) * *((_QWORD *)this + 35);
  v6 = v3
     * ProgrammedKernelDimension
     * v4
     * *((int *)this + 86)
     * (uint64_t)*((int *)this + 85)
     * *((int *)this + 87)
     * *((int *)this + 82)
     * *((int *)this + 83)
     * *((int *)this + 84);
  if (v5 >= v6)
    v5 = v3
       * ProgrammedKernelDimension
       * v4
       * *((int *)this + 86)
       * (uint64_t)*((int *)this + 85)
       * *((int *)this + 87)
       * *((int *)this + 82)
       * *((int *)this + 83)
       * *((int *)this + 84);
  return 1.0 - (float)((float)v5 / (float)v6);
}

float ZinIrKernel::CalculateSparsityFromWeightScan(ZinIrKernel *this, float a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int ValueAsInt32;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t SerializedWeightElementCount;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 73);
  if (!*(_QWORD *)(v2 + 136))
    ZinAssertImpl("Weight must have data for sparsity check");
  v22 = *(_QWORD *)(v2 + 304);
  if ((*((_BYTE *)this + 448) & 2) == 0)
    goto LABEL_6;
  if ((ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(v2 + 8)) & 1) == 0)
    ZinAssertImpl("incompatible format with zero point");
  if ((_DWORD)v22 != 1)
    ZinAssertImpl("zero point is not supported for vector palettized kernel.");
  v2 = *((_QWORD *)this + 73);
  if (v2)
  {
LABEL_6:
    v21 = *(_QWORD *)(v2 + 56);
    v4 = *(_QWORD *)(v2 + 80);
    v24 = *(_QWORD *)(v2 + 64);
    v25 = *(_QWORD *)(v2 + 72);
    v5 = *(_QWORD *)(v2 + 88);
    v6 = *(_DWORD *)(v2 + 8);
LABEL_7:
    v7 = *(_OWORD *)(v2 + 72);
    v26 = *(_OWORD *)(v2 + 56);
    v27 = v7;
    v28 = *(_QWORD *)(v2 + 88);
    goto LABEL_8;
  }
  v17 = *((_QWORD *)this + 75);
  if (v17)
  {
    v21 = *((_QWORD *)this + 31);
    v4 = *((_QWORD *)this + 34);
    v24 = *((_QWORD *)this + 32);
    v25 = *((_QWORD *)this + 33);
    v5 = *((_QWORD *)this + 35);
    v6 = ZinTensorFormatToKernelFormat(*(_DWORD *)(v17 + 88));
    v2 = *((_QWORD *)this + 73);
    if (v2)
      goto LABEL_7;
  }
  else
  {
    v6 = 0;
    v21 = 0;
    v24 = 0;
    v25 = 0;
    v4 = 0;
    v5 = 0;
  }
  if (*((_QWORD *)this + 75))
  {
    v18 = *(_OWORD *)((char *)this + 248);
    v28 = *((_QWORD *)this + 35);
    v19 = *(_OWORD *)((char *)this + 264);
    v26 = v18;
    v27 = v19;
  }
  else
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
  }
LABEL_8:
  SerializedWeightElementCount = GetSerializedWeightElementCount(v6, (unint64_t *)&v26, v22);
  if (v21 < 1)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v23 = v10;
      if ((*((_BYTE *)this + 448) & 2) != 0)
        ValueAsInt32 = ZinIrVector::GetValueAsInt32(*((ZinIrVector **)this + 74), v8);
      else
        ValueAsInt32 = 0;
      if (v24 >= 1)
      {
        for (i = 0; i != v24; ++i)
        {
          if (v25 >= 1)
          {
            for (j = 0; j != v25; ++j)
            {
              if (v4 >= 1)
              {
                for (k = 0; k != v4; ++k)
                {
                  if (v5 >= 1)
                  {
                    for (m = 0; m != v5; ++m)
                    {
                      *(_QWORD *)&v26 = v8;
                      *((_QWORD *)&v26 + 1) = i;
                      *(_QWORD *)&v27 = j;
                      *((_QWORD *)&v27 + 1) = k;
                      v28 = m;
                      v9 += ZinIrWeight::IsZeroPointAt(*((ZinIrWeight **)this + 73), (uint64_t *)&v26, 0, ValueAsInt32);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v10 = v23 + v22;
      v8 = v23 + (int)v22;
    }
    while (v21 > v8);
  }
  return (float)v9 / (float)SerializedWeightElementCount;
}

uint64_t ZinIrKernel::MirGetPaletteSerializedSize(ZinIrKernel *this, char a2)
{
  _BOOL4 ShouldUseSparseBinaryForCompression;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (!ZinKernelFormatIsPalette(*((_DWORD *)this + 44)))
    return 0;
  v8 = 0;
  if (ZinKernelGetPaletteLUTSize(*((_DWORD *)this + 44), *((_QWORD *)this + 52), &v8))
    ZinAssertImpl("Invalid palette information.");
  if ((a2 & 1) == 0)
    return v8;
  ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(this);
  if (v8 >= 0)
    v5 = v8;
  else
    v5 = v8 + 1;
  v6 = v5 >> 1;
  if (ShouldUseSparseBinaryForCompression)
    return v6;
  else
    return v8;
}

BOOL ZinIrKernel::GetPreferredKernelLayoutFormat(ZinIrKernel *this, const ZinIrHalParameters *a2, int a3, int a4, char a5)
{
  uint64_t v7;
  _BOOL8 result;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;

  v7 = *((_QWORD *)this + 73);
  if (v7 && *(_QWORD *)(v7 + 288) - *(_QWORD *)(v7 + 280) > 0x10uLL)
    return 0;
  v9 = *((_QWORD *)this + 75);
  if (*((_BYTE *)a2 + 1208))
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
    return 1;
  if (*((_BYTE *)a2 + 1258))
    v11 = a4 == 0;
  else
    v11 = 1;
  if (!v11 && (a5 & 1) == 0)
  {
    if (!*((_BYTE *)a2 + 1208))
      ZinAssertImpl("Aligned kernels are required for this FillLowerNEFirst config.");
    return 1;
  }
  v12 = *((_QWORD *)this + 50);
  if (!*((_BYTE *)a2 + 1208) || v9 || v12 > 1 || (ZinIrKernel::IsMutable(this) & 1) != 0)
    return a3 && v12 < 2;
  if (*((_BYTE *)a2 + 1209))
    v13 = 0;
  else
    v13 = v7 == 0;
  result = 1;
  if (!v13 && !a3)
    return 0;
  return result;
}

unint64_t ZinIrKernel::GetOCGChannelCountAfterPaddingFromKernel(ZinIrKernel *this, ZinIrCodegenKernelUtil *a2, const ZinIrHalParameters *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v8 = *((int *)this + 84);
  v9 = *((_QWORD *)this + 73);
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 88);
  }
  else
  {
    if (!*((_QWORD *)this + 75))
    {
      v11 = 0;
      goto LABEL_6;
    }
    v10 = (uint64_t *)((char *)this + 280);
  }
  v11 = *v10;
LABEL_6:
  v12 = details::ZinIrSubchannelKernelDimension(v8, *((int *)this + 87), v11, *((_DWORD *)this + 92));
  LOBYTE(v14) = a4;
  return ZinIrCodegenKernelUtil::GetOCGChannelCountAfterPadding((uint64_t)this + 160, a2, *((int *)this + 85), *((int *)this + 86), *((int *)this + 87), *((_DWORD *)this + 42), v12, *((unsigned __int8 *)this + 172), 0, (uint64_t)a3, (unint64_t)a2, v14);
}

uint64_t std::unordered_set<ZinKernelFormat>::unordered_set(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<Attribute,std::hash<Attribute>,std::equal_to<Attribute>,std::allocator<Attribute>>::__emplace_unique_key_args<Attribute,Attribute const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_20706C72C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0>,float ()(unsigned long)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0>,float ()(unsigned long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C05ADE8;
  return result;
}

void std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0>,float ()(unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C05ADE8;
}

float std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0>,float ()(unsigned long)>::operator()()
{
  return 1.0;
}

uint64_t std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0>,float ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_0>,float ()(unsigned long)>::target_type()
{
}

_QWORD *std::__function::__value_func<float ()(unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20706C94C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1>,float ()(unsigned long)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1>,float ()(unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05AE40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1>,float ()(unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05AE40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1>,float ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return ZinIrVector::GetAt<float>(**(_QWORD **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1>,float ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_1>,float ()(unsigned long)>::target_type()
{
}

void std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2>,float ()(unsigned long)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2>,float ()(unsigned long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C05AE98;
  return result;
}

void std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2>,float ()(unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C05AE98;
}

float std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2>,float ()(unsigned long)>::operator()()
{
  return 0.0;
}

uint64_t std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2>,float ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_2>,float ()(unsigned long)>::target_type()
{
}

void std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3>,float ()(unsigned long)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3>,float ()(unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05AEF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3>,float ()(unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05AEF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3>,float ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return ZinIrVector::GetAt<float>(**(_QWORD **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3>,float ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3,std::allocator<ZinIrKernel::FoldWeightsWithScale(ZinIrKernel*)::$_3>,float ()(unsigned long)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrTransformRemap,std::allocator<ZinIrTransformRemap>,ZinTensorDimensions const&,void>@<X0>(const ZinTensorDimensions *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<ZinIrTransformRemap>::__shared_ptr_emplace[abi:ne180100]<ZinTensorDimensions const&,std::allocator<ZinIrTransformRemap>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20706CBC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrTransformRemap>::__shared_ptr_emplace[abi:ne180100]<ZinTensorDimensions const&,std::allocator<ZinIrTransformRemap>,0>(_QWORD *a1, const ZinTensorDimensions *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05B798;
  a1[1] = 0;
  ZinIrTransformRemap::ZinIrTransformRemap((ZinIrTransformRemap *)(a1 + 3), a2);
  return a1;
}

void sub_20706CC0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrTransformRemap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrTransformRemap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrTransformRemap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<ZinIrTransformShuffle,std::allocator<ZinIrTransformShuffle>,std::vector<unsigned long>,ZinIrVector *,void>@<X0>(__n128 *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<ZinIrTransformShuffle>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned long>,ZinIrVector *,std::allocator<ZinIrTransformShuffle>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_20706CCC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ZinIrTransformShuffle>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned long>,ZinIrVector *,std::allocator<ZinIrTransformShuffle>,0>(uint64_t a1, __n128 *a2, unint64_t *a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C05B9C8;
  ZinIrTransformShuffle::ZinIrTransformShuffle((__n128 *)(a1 + 24), a2, *a3);
  return a1;
}

void sub_20706CD14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrTransformShuffle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrTransformShuffle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrTransformShuffle>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrTransformDuplicate,std::allocator<ZinIrTransformDuplicate>,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<ZinIrTransformDuplicate>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<ZinIrTransformDuplicate>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20706CDC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrTransformDuplicate>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<ZinIrTransformDuplicate>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24C05BA38;
  ZinIrTransformDuplicate::ZinIrTransformDuplicate((ZinIrTransformDuplicate *)(a1 + 3), *a2, 1);
  return a1;
}

void sub_20706CE18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrTransformWeightShuffle,std::allocator<ZinIrTransformWeightShuffle>,ZinKernelDimensions const&,ZinIrScratchBuffer<ZinKernelPosition> &,ZinIrVector *,void>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<ZinIrTransformWeightShuffle>::__shared_ptr_emplace[abi:ne180100]<ZinKernelDimensions const&,ZinIrScratchBuffer<ZinKernelPosition> &,ZinIrVector *,std::allocator<ZinIrTransformWeightShuffle>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_20706CE88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrTransformWeightShuffle>::__shared_ptr_emplace[abi:ne180100]<ZinKernelDimensions const&,ZinIrScratchBuffer<ZinKernelPosition> &,ZinIrVector *,std::allocator<ZinIrTransformWeightShuffle>,0>(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24C05BB88;
  ZinIrTransformWeightShuffle::ZinIrTransformWeightShuffle((uint64_t)(a1 + 3), a2, a3, *a4);
  return a1;
}

void sub_20706CED8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrTransformWeightShuffle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrTransformWeightShuffle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BB88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrTransformWeightShuffle>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrVector,std::allocator<ZinIrVector>,ZinIrVector&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x140uLL);
  result = std::__shared_ptr_emplace<ZinIrVector>::__shared_ptr_emplace[abi:ne180100]<ZinIrVector&,std::allocator<ZinIrVector>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20706CF88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrVector>::__shared_ptr_emplace[abi:ne180100]<ZinIrVector&,std::allocator<ZinIrVector>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05B290;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrVector,ZinIrVector&,ZinIrVector*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_20706CFD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrVector,ZinIrVector&,ZinIrVector*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)a1 = &unk_24C01AFB0;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  std::vector<std::shared_ptr<ZinIrTransform>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform>*,std::shared_ptr<ZinIrTransform>*>((char *)(a1 + 160), *(_QWORD **)(a2 + 160), *(_QWORD **)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 4);
  v14 = (std::string *)(a1 + 184);
  if (*(char *)(a2 + 207) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a2 + 184), *(_QWORD *)(a2 + 192));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  v16 = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v16;
  v17 = *(_OWORD *)(a2 + 232);
  v18 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 260) = *(_OWORD *)(a2 + 260);
  *(_OWORD *)(a1 + 248) = v18;
  *(_OWORD *)(a1 + 232) = v17;
  *(_QWORD *)a1 = &off_24C015D80;
  v19 = *(_QWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = v19;
  return a1;
}

void sub_20706D134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrVectorFoldBiasWithBotScaleBotBias,std::allocator<ZinIrVectorFoldBiasWithBotScaleBotBias>,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<ZinIrVectorFoldBiasWithBotScaleBotBias>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,std::allocator<ZinIrVectorFoldBiasWithBotScaleBotBias>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20706D1A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrVectorFoldBiasWithBotScaleBotBias>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,std::allocator<ZinIrVectorFoldBiasWithBotScaleBotBias>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C05BE28;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrVectorFoldBiasWithBotScaleBotBias,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,ZinIrVectorFoldBiasWithBotScaleBotBias*>(a1 + 3, a2, a3);
  return a1;
}

void sub_20706D1F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrVectorFoldBiasWithBotScaleBotBias>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrVectorFoldBiasWithBotScaleBotBias>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrVectorFoldBiasWithBotScaleBotBias>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::construct_at[abi:ne180100]<ZinIrVectorFoldBiasWithBotScaleBotBias,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,ZinIrVectorFoldBiasWithBotScaleBotBias*>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = a2[1];
  v19 = *a2;
  v20 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  ZinIrVectorFoldBiasWithBotScaleBotBias::ZinIrVectorFoldBiasWithBotScaleBotBias(a1, &v19, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_20706D348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrVectorFoldBotBiasWithBotScaleBias,std::allocator<ZinIrVectorFoldBotBiasWithBotScaleBias>,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<ZinIrVectorFoldBotBiasWithBotScaleBias>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,std::allocator<ZinIrVectorFoldBotBiasWithBotScaleBias>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20706D3B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrVectorFoldBotBiasWithBotScaleBias>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,std::allocator<ZinIrVectorFoldBotBiasWithBotScaleBias>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C05BE60;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrVectorFoldBotBiasWithBotScaleBias,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,ZinIrVectorFoldBotBiasWithBotScaleBias*>(a1 + 3, a2, a3);
  return a1;
}

void sub_20706D3FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrVectorFoldBotBiasWithBotScaleBias>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrVectorFoldBotBiasWithBotScaleBias>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrVectorFoldBotBiasWithBotScaleBias>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::construct_at[abi:ne180100]<ZinIrVectorFoldBotBiasWithBotScaleBias,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,ZinIrVectorFoldBotBiasWithBotScaleBias*>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = a2[1];
  v19 = *a2;
  v20 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  ZinIrVectorFoldBotBiasWithBotScaleBias::ZinIrVectorFoldBotBiasWithBotScaleBias(a1, &v19, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_20706D550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrVectorFoldBotScaleWithBotBiasBias,std::allocator<ZinIrVectorFoldBotScaleWithBotBiasBias>,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<ZinIrVectorFoldBotScaleWithBotBiasBias>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,std::allocator<ZinIrVectorFoldBotScaleWithBotBiasBias>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20706D5B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrVectorFoldBotScaleWithBotBiasBias>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,std::allocator<ZinIrVectorFoldBotScaleWithBotBiasBias>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C05BE98;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrVectorFoldBotScaleWithBotBiasBias,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,ZinIrVectorFoldBotScaleWithBotBiasBias*>(a1 + 3, a2, a3);
  return a1;
}

void sub_20706D604(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrVectorFoldBotScaleWithBotBiasBias>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrVectorFoldBotScaleWithBotBiasBias>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrVectorFoldBotScaleWithBotBiasBias>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::construct_at[abi:ne180100]<ZinIrVectorFoldBotScaleWithBotBiasBias,std::shared_ptr<ZinIrVector> &,std::shared_ptr<ZinIrVector> &,ZinIrVectorFoldBotScaleWithBotBiasBias*>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = a2[1];
  v19 = *a2;
  v20 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  ZinIrVectorFoldBotScaleWithBotBiasBias::ZinIrVectorFoldBotScaleWithBotBiasBias(a1, &v19, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_20706D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrVectorEWMultiply,std::allocator<ZinIrVectorEWMultiply>,std::shared_ptr<ZinIrVector> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<ZinIrVectorEWMultiply>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ZinIrVector> &,std::allocator<ZinIrVectorEWMultiply>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20706D7B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrVectorEWMultiply>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ZinIrVector> &,std::allocator<ZinIrVectorEWMultiply>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05BA00;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinIrVectorEWMultiply,std::shared_ptr<ZinIrVector> &,ZinIrVectorEWMultiply*>(a1 + 3, a2);
  return a1;
}

void sub_20706D804(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrVectorEWMultiply>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrVectorEWMultiply>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05BA00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinIrVectorEWMultiply>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::construct_at[abi:ne180100]<ZinIrVectorEWMultiply,std::shared_ptr<ZinIrVector> &,ZinIrVectorEWMultiply*>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  ZinIrVectorEWMultiply::ZinIrVectorEWMultiply(a1, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_20706D8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrKernel::AddWeightsToSHA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid palette information.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid kernel weight format to add to the SHA\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),decltype(nullptr),SHAUpdateMode const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  if (v4)
    OUTLINED_FUNCTION_7_1((uint64_t)a2, v4);
  v5 = *a3;
  *a3 = 0;
  if (v5)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)a3, v5);
  OUTLINED_FUNCTION_4_0();
}

void std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),decltype(nullptr),std::unique_ptr<ZinIrVector>,decltype(nullptr),SHAUpdateMode const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  if (v4)
    OUTLINED_FUNCTION_7_1((uint64_t)a2, v4);
  if (*a3)
    OUTLINED_FUNCTION_3_0(*a3);
  OUTLINED_FUNCTION_4_0();
}

void ZinIrKernel::DuplicateChannels(uint64_t a1, uint64_t *a2)
{
  if (*a2)
    OUTLINED_FUNCTION_3_0(*a2);
  OUTLINED_FUNCTION_2_5();
}

void sub_20706DA08()
{
  OUTLINED_FUNCTION_4_0();
}

void ZinIrKernel::Create4bitPalKernelFrom3bitPalKernel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: 3bit pal to 4bit pal mutable weight conversion has not been implemented yet.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrKernel::MergeResizeNNIntoConvKernel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Quantization scale and zero point are not supported with deconv.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Bias is assumed to be nullptr at this time.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrKernel::CreateDynamicKernel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported kernel format\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Insufficient kernel coeff\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrKernel::FuseScaleBiasWithBottom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Scale bias configuration.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrKernel::AdjustUnityKernel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid kernel configuration.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrMatrixDecompositionUnit::ZinIrMatrixDecompositionUnit(ZinIrMatrixDecompositionUnit *this, const ZinIrMatrixDecompositionUnitInfo *a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  *(_QWORD *)this = &off_24C024758;
  ZinIrMatrixDecompositionUnitInfo::ZinIrMatrixDecompositionUnitInfo((ZinIrMatrixDecompositionUnit *)((char *)this + 56), a2);
}

void sub_20706DBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit *v11;

  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMatrixDecompositionUnit::TensorDimensions(ZinIrMatrixDecompositionUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  int v4;
  uint64_t v5;

  v4 = *((_DWORD *)this + 34);
  if (!v4)
  {
    v5 = 4;
    goto LABEL_5;
  }
  if (v4 == 1)
  {
    v5 = 3;
LABEL_5:
    *(_QWORD *)a3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *((_QWORD *)a3 + 1) = v5;
    *((_QWORD *)a3 + 2) = 1;
    *((_QWORD *)a3 + 3) = v5;
    *((_QWORD *)a3 + 4) = 1;
  }
  return 0;
}

uint64_t ZinIrMatrixDecompositionUnit::ValidateBottomDimensions(ZinIrMatrixDecompositionUnit *this, CFArrayRef *a2)
{
  int64x2_t *v2;
  int v3;
  uint64_t v4;

  v2 = (int64x2_t *)*((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 34);
  if (v3 == 1)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v2[1], (int64x2_t)xmmword_207A80450), (int32x4_t)vceqq_s64(v2[2], vdupq_n_s64(1uLL)))))) & 1) == 0)return 0;
  }
  else
  {
    if (v3)
      return 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v2[1], (int64x2_t)xmmword_207A9C210), (int32x4_t)vceqq_s64(v2[2], vdupq_n_s64(1uLL)))))) & 1) == 0)
    {
      v4 = *((_QWORD *)this + 19);
      if (v4 == v2->i64[1] && *((_QWORD *)this + 22) == v4 && *((_QWORD *)this + 25) == v4)
        return 0;
    }
  }
  ZinIrUnitStatus::SetError(a2, CFSTR("InvalidMatrixDecompositionInputDims"));
  return 3;
}

uint64_t ZinIrMatrixDecompositionUnit::Validate(ZinIrUnit *this, uint64_t a2, int a3, int a4, CFArrayRef *a5)
{
  uint64_t result;
  const char *v9;
  _QWORD v10[2];
  char v11;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 492)
    && (*(unsigned int (**)(ZinIrUnit *, CFArrayRef *))(*(_QWORD *)this + 144))(this, a5))
  {
    ZinIrUnit::GetUnitTypeString(this, v10);
    if (v11 >= 0)
      v9 = (const char *)v10;
    else
      v9 = (const char *)v10[0];
    ZinAssertImpl("Unit %s is not supported for dynamic shapes", v9);
  }
  result = ZinIrUnit::ValidateBottomCount(this, 1, a5);
  if (!(_DWORD)result)
  {
    result = ZinIrUnit::ValidateFormats(this, a5);
    if (!(_DWORD)result)
      return ZinIrMatrixDecompositionUnit::HWLimits(this, (const ZinIrHalParameters **)a2, a5);
  }
  return result;
}

void sub_20706DDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrMatrixDecompositionUnit::HWLimits(ZinIrMatrixDecompositionUnit *a1, const ZinIrHalParameters **a2, CFArrayRef *a3)
{
  if (ValidateBasicTensorConstraints((const ZinTensorDimensions *)(*((_QWORD *)a1 + 1) + 8), *a2, a3))
    return 3;
  else
    return ZinIrMatrixDecompositionUnit::ValidateBottomDimensions(a1, a3);
}

ZinIrMatrixDecompositionInfo *ZinIrMatrixDecompositionUnit::CreateOpcode@<X0>(ZinIrMatrixDecompositionUnit *this@<X0>, uint64_t a2@<X8>)
{
  const ZinIrMatrixDecompositionUnitInfo *v3;
  ZinIrMatrixDecompositionInfo *v4;
  ZinIrMatrixDecompositionInfo *result;

  v3 = (ZinIrMatrixDecompositionUnit *)((char *)this + 56);
  v4 = (ZinIrMatrixDecompositionInfo *)operator new();
  result = ZinIrMatrixDecompositionInfo::ZinIrMatrixDecompositionInfo(v4, v3);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v4;
  return result;
}

void sub_20706DEAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C402F70AE97);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMatrixDecompositionUnit::CreateLayer(ZinIrMatrixDecompositionUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrMatrixDecompositionUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinMatrixDecompositionLayer::ZinMatrixDecompositionLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_20706DFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrMatrixDecompositionUnit::~ZinIrMatrixDecompositionUnit(ZinIrMatrixDecompositionUnit *this)
{
  ZinIrMatrixDecompositionUnit::~ZinIrMatrixDecompositionUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  void **v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24C024758;
  *((_QWORD *)this + 7) = &unk_24C025B50;
  v2 = (void **)((char *)this + 56);
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
    operator delete(v5);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(this);
}

__n128 ToTensorDimensions@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return result;
}

void FindDimension(const ZinTensorDimensions *a1@<X0>, uint64_t a2@<X1>, std::vector<int> *a3@<X8>)
{
  uint64_t i;
  int v7;
  int *value;
  std::vector<int>::pointer end;
  int *v10;
  std::vector<int>::pointer begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  int v18;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::reserve(a3, 5uLL);
  for (i = 0; i != 5; ++i)
  {
    v7 = dword_207AB4AA8[i];
    if (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)a1, v7) == a2)
    {
      end = a3->__end_;
      value = a3->__end_cap_.__value_;
      if (end >= value)
      {
        begin = a3->__begin_;
        v12 = end - a3->__begin_;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v14 = (char *)value - (char *)begin;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&a3->__end_cap_, v15);
          begin = a3->__begin_;
          end = a3->__end_;
        }
        else
        {
          v16 = 0;
        }
        v17 = (int *)&v16[4 * v12];
        *v17 = v7;
        v10 = v17 + 1;
        while (end != begin)
        {
          v18 = *--end;
          *--v17 = v18;
        }
        a3->__begin_ = v17;
        a3->__end_ = v10;
        a3->__end_cap_.__value_ = (int *)&v16[4 * v15];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v7;
        v10 = end + 1;
      }
      a3->__end_ = v10;
    }
  }
}

void sub_20706E210(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL HasInterleaveMismatch(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (!a2)
    return 0;
  if (a4)
    return a1 != a3;
  return 0;
}

BOOL IsVector(const ZinTensorDimensions *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL8 v9;

  v2 = *((_QWORD *)a1 + 3);
  v1 = *((_QWORD *)a1 + 4);
  v3 = *(_QWORD *)a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = operator new(0x28uLL);
  v7 = 0;
  v8 = 0;
  *v6 = v3;
  v6[1] = v1;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  do
  {
    if ((uint64_t)v6[v7] > 1)
      ++v8;
    ++v7;
  }
  while (v7 != 5);
  v9 = v8 < 2;
  operator delete(v6);
  return v9;
}

uint64_t IsSingularValue(const ZinTensorDimensions *a1)
{
  int64x2_t v1;
  int64x2_t v2;

  v2 = vdupq_n_s64(1uLL);
  v1.i64[1] = *((_QWORD *)a1 + 4);
  v1.i64[0] = *(_QWORD *)a1;
  *(int16x4_t *)v1.i8 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, v2), (int32x4_t)vceqq_s64(*(int64x2_t *)((char *)a1 + 8), v2))));
  v1.i16[0] = vmaxv_u16(*(uint16x4_t *)v1.i8);
  return (*((_QWORD *)a1 + 3) == 1) & ~v1.i32[0];
}

uint64_t GetMacroblockSize(int a1)
{
  if (a1 == 1)
    return 32;
  else
    return 16 * (a1 == 2);
}

uint64_t GetHWDMAFormatMode(int a1, int *a2)
{
  int v3;
  uint64_t result;

  v3 = 0;
  result = 3;
  switch(a1)
  {
    case 0:
    case 8:
    case 14:
    case 15:
      return result;
    case 1:
    case 2:
    case 12:
    case 13:
      goto LABEL_3;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v3 = 2;
      goto LABEL_3;
    case 11:
      v3 = 3;
LABEL_3:
      *a2 = v3;
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t GetHWDMAFormatBytes(int *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 2 * a2;
  v4 = 4;
  if (*a1 != 1)
    v4 = a2;
  if (v2 != 2)
    v3 = v4;
  if (v2 == 3)
    return 4 * a2;
  else
    return v3;
}

uint64_t GetHWChannelFormat(int a1, int *a2)
{
  uint64_t result;
  int v3;

  switch(a1)
  {
    case 0:
    case 14:
    case 15:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        GetHWChannelFormat();
      return 3;
    case 1:
      result = 0;
      v3 = 1;
      goto LABEL_3;
    case 2:
      result = 0;
      *a2 = 0;
      return result;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
      result = 0;
      v3 = 2;
      goto LABEL_3;
    case 12:
      result = 0;
      v3 = 4;
LABEL_3:
      *a2 = v3;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t IsFloatFormat(unsigned int a1)
{
  return (a1 < 0xE) & (0x3808u >> a1);
}

BOOL IsQuantizedFormat(int a1)
{
  uint64_t v2;

  v2 = 0;
  ZinTensorFormatGetSize(a1, &v2);
  return v2 == 1;
}

BOOL ZinTensorFormatSizeGreaterEqual(int a1, int a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ZinTensorFormatGetSize(a1, &v5);
  v3 = v5;
  v5 = 0;
  ZinTensorFormatGetSize(a2, &v5);
  return v3 >= v5;
}

void GetHWChannelFormat()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Attempting to use unsupported tensor format.", v0, 2u);
}

void ZinOperation::ZinOperation(ZinOperation *this, const ZinIrHalParameters *a2)
{
  *(_QWORD *)this = &unk_24BFF2060;
  *((_QWORD *)this + 1) = a2;
}

uint64_t ZinIrAffineTransformUnit::ZinIrAffineTransformUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C022DB0;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v5 + 7), (const ZinIrTextureUnitInfo *)a2);
  *(_QWORD *)(a1 + 56) = &unk_24C0246F0;
  v6 = *(_OWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 216) = v6;
  *(_QWORD *)(a1 + 248) = v7;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::Layer*,ANEDebugInfo::DebugInfoInMem::Layer*>((_QWORD *)(a1 + 256), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2));
  return a1;
}

void sub_20706E5C4(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;
  ZinIrTextureUnitInfo *v2;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrAffineTransformUnit::TensorDimensions(ZinIrAffineTransformUnit *this, const ZinIrHalParameters *a2, int8x16_t *a3, ZinIrUnitStatus *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  a3->i64[1] = v4[2];
  a3[2].i64[0] = v4[5];
  v5 = v4[1];
  v6 = v4[16];
  if (v5 > v6)
    v6 = v5;
  a3->i64[0] = v6;
  a3[1] = vextq_s8(*(int8x16_t *)((char *)this + 216), *(int8x16_t *)((char *)this + 216), 8uLL);
  return 0;
}

ZinIrAffineTransformInfo *ZinIrAffineTransformUnit::CreateOpcode@<X0>(ZinIrAffineTransformUnit *this@<X0>, uint64_t a2@<X8>)
{
  const ZinIrAffineTransformUnitInfo *v3;
  ZinIrAffineTransformInfo *v4;
  ZinIrAffineTransformInfo *result;

  v3 = (ZinIrAffineTransformUnit *)((char *)this + 56);
  v4 = (ZinIrAffineTransformInfo *)operator new();
  result = ZinIrAffineTransformInfo::ZinIrAffineTransformInfo(v4, v3);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v4;
  return result;
}

void sub_20706E67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40B2E4BD66);
  _Unwind_Resume(a1);
}

uint64_t ZinIrAffineTransformUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int v18;
  int8x16_t *v19;

  ZinIrAffineTransformUnit::CreateOpcode((ZinIrAffineTransformUnit *)a1, (uint64_t)&v18);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t *)v19;
  v19[12] = vextq_s8(*(int8x16_t *)(v5 + 24), *(int8x16_t *)(v5 + 24), 8uLL);
  v6[26] = *(_QWORD *)(v5 + 8);
  ZinIrUnit::InferInputTensorFormat(a1, (int *)(a1 + 120));
  if (v18)
  {
    v7 = 0;
    v19 = 0;
LABEL_12:
    (*(void (**)(uint64_t *))(*v6 + 8))(v6);
    return v7;
  }
  v8 = operator new();
  v7 = v8;
  v9 = (std::__shared_weak_count *)(*a3)[1];
  v16 = **a3;
  v17 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ZinAffineTransformLayer::ZinAffineTransformLayer(v8, &v19, &v16, a1 + 64);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ZinIrOpLayer::ValidateSemantics(v7);
  v6 = (uint64_t *)v19;
  v19 = 0;
  if (v6)
    goto LABEL_12;
  return v7;
}

void sub_20706E7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinMirChannelSplit::ComputeChannelDistributionVector(ZinMirChannelSplit *this@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 11);
  v6 = (_QWORD *)*((_QWORD *)this + 12);
  v7 = v5 + 1;
  if (v5 != v6 && v7 != v6)
  {
    do
    {
      v9 = *v7;
      v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v5 + 32))(*v5, 0, 0) + 56);
      if (v10 < *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0)
                           + 56))
        v5 = v7;
      ++v7;
    }
    while (v7 != v6);
  }
  v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v5 + 32))(*v5, 0, 0) + 56);
  v12 = vcvtps_u32_f32((float)v11 / (float)(unint64_t)a2);
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = a3 + 2;
    do
    {
      v16 = v11;
      v17 = v11 < a2;
      v11 -= a2;
      if (v17)
        v18 = v16;
      else
        v18 = a2;
      if ((unint64_t)v13 >= *v15)
      {
        v20 = *a3;
        v21 = v13 - *a3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v23 = *v15 - (_QWORD)v20;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v24);
          v20 = *a3;
          v13 = a3[1];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        *v26 = v18;
        v19 = v26 + 1;
        while (v13 != v20)
        {
          v27 = *--v13;
          *--v26 = v27;
        }
        *a3 = v26;
        a3[1] = v19;
        a3[2] = (uint64_t *)&v25[8 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v13 = v18;
        v19 = v13 + 1;
      }
      a3[1] = v19;
      ++v14;
      v13 = v19;
    }
    while (v14 != v12);
  }
}

void sub_20706EA18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinMirChannelSplit::IsValidInputChannelSplit(ZinMirChannelSplit *this, unint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  ZinIrTensor *v14;
  ZinIrTensor *RootTensor;
  uint64_t Interleave;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t Hal;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 85)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinMirChannelSplit::IsValidInputChannelSplit(result, v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    v12 = (_QWORD *)*((_QWORD *)this + 11);
    v13 = (_QWORD *)*((_QWORD *)this + 12);
    while (1)
    {
      if (v12 == v13)
      {
        v19 = (*(uint64_t (**)(ZinMirChannelSplit *))(*(_QWORD *)this + 408))(this);
        Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
        v37 = 0;
        v22 = (*(uint64_t (**)(ZinMirChannelSplit *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
        ZinTensorFormatGetSize(*(_DWORD *)(v22 + 88), &v37);
        if (!v19 || !(v37 * a2 % *(_QWORD *)(v21 + 528)))
          return 1;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        ZinMirChannelSplit::IsValidInputChannelSplit(result, v23, v24, v25, v26, v27, v28, v29);
        return 0;
      }
      v14 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v12 + 32))(*v12, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v14);
      Interleave = ZinIrTensor::GetInterleave(RootTensor);
      v18 = v17 ? Interleave : 1;
      if (a2 % v18)
        break;
      ++v12;
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinMirChannelSplit::IsValidInputChannelSplit(result, v30, v31, v32, v33, v34, v35, v36);
  }
  return 0;
}

uint64_t ZinMirChannelSplit::ComputeOutDims_Default@<X0>(ZinMirChannelSplit *this@<X0>, const ZinTensorDimensions *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  uint64_t result;
  uint64_t v9;

  v7 = *((_OWORD *)this + 1);
  *(_OWORD *)a4 = *(_OWORD *)this;
  *(_OWORD *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 32) = *((_QWORD *)this + 4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 408))(a3);
  v9 = 8;
  if ((_DWORD)result)
    v9 = 24;
  *(_QWORD *)(a4 + v9) = a2;
  return result;
}

ZinIrOpLayer *ZinMirChannelSplit::SplitPEElementWiseLayerWithPreOps(uint64_t **this, ZinIrOpLayerGraph *a2, ZinPEElementWiseLayer *a3, uint64_t a4, uint64_t a5, ZinObjectNameFactory *a6)
{
  __n128 v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  ZinIrOpLayer *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  _QWORD *v38;
  void *__p[2];
  __int128 v40;
  uint64_t v41;
  void **v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  ZinMirChannelSplit::PrepareInputViews(this, a2, a3, a4, a5, &v37);
  v43[0] = &unk_24BFFEFE0;
  v43[1] = ZinMirChannelSplit::ComputeOutDims_Default;
  v44 = v43;
  v10.n128_f64[0] = ZinMirChannelSplit::CreateOutputTensor(a2, (uint64_t)a3, a5, (uint64_t)v43, &v35);
  v11 = v44;
  if (v44 == v43)
  {
    v12 = 4;
    v11 = v43;
    goto LABEL_5;
  }
  if (v44)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(__n128))(*v11 + 8 * v12))(v10);
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v13 = v37;
  v14 = v38;
  v42 = &v32;
  while (v13 != v14)
  {
    v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)*v13 + 32))(*v13, 0, 0, v10);
    v16 = *(_OWORD *)(v15 + 64);
    *(_OWORD *)__p = *(_OWORD *)(v15 + 48);
    v40 = v16;
    v41 = *(_QWORD *)(v15 + 80);
    std::back_insert_iterator<std::vector<ZinTensorDimensions>>::operator=[abi:ne180100](&v42, (__int128 *)__p);
    ++v13;
  }
  v30 = v35;
  v31 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a5 + 16))(__p, a5, 1, v10);
  v19 = (ZinIrOpLayer *)ZinPEElementWiseLayer::Clone((uint64_t)a2, &v30, &v32, (const void **)__p);
  if (SBYTE7(v40) < 0)
    operator delete(__p[0]);
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v27, v37, (uint64_t)v38, ((char *)v38 - (_BYTE *)v37) >> 3);
  ZinMirChannelSplit::ConnectSplitNodeAndViewLayers(this, &v27, a2, v19);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  return v19;
}

void sub_20706EE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirChannelSplit::PrepareInputViews@<X0>(uint64_t **this@<X0>, ZinIrOpLayerGraph *a2@<X1>, const ZinIrOpLayer *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrOpLayer *View;
  _BOOL4 v24;
  int64x2_t v25;
  _QWORD v28[2];
  void *__p;
  void *v30;
  void *v31;
  _OWORD v32[2];
  uint64_t v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[1] = *MEMORY[0x24BDAC8D0];
  v11 = (uint64_t *)((char *)a2 + 88);
  v12 = (_QWORD *)((char *)a2 + 96);
  v13 = (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3;
  *(_QWORD *)&v42 = 0;
  result = (uint64_t)std::vector<ZinIrOpLayer *>::vector(a6, v13, &v42);
  v15 = *v11;
  if (*v12 != *v11)
  {
    v16 = 0;
    v25 = vdupq_n_s64(1uLL);
    do
    {
      v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8 * v16) + 32))(*(_QWORD *)(v15 + 8 * v16), 0, 0);
      v18 = *(_OWORD *)(v17 + 64);
      v42 = *(_OWORD *)(v17 + 48);
      v43 = v18;
      v44 = *(_QWORD *)(v17 + 80);
      if (ZinIrOpLayer::IsPELayer(a2))
      {
        result = ZinANELayer::GetTextureIndexInput(a2);
        if (result == *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v16)
          && *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 25) + 64) + 8) == 54)
        {
          goto LABEL_12;
        }
        if (ZinPELayer::HasInputTranspose(a2, v16))
          v19 = 4;
        else
          v19 = 2;
      }
      else
      {
        v19 = 2;
      }
      if (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v42, v19) != 1)
      {
        v40[0] = v42;
        v40[1] = v43;
        v41 = v44;
        SetValueAtDimension<ZinTensorDimensions>(v40, v19, (uint64_t)a3);
        v20 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v16);
        v39 = 0;
        v37 = 0u;
        v38 = 0u;
        SetValueAtDimension<ZinTensorPosition>(&v37, v19, a4);
        v21 = *((_QWORD *)a2 + 2);
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a5 + 16))(&__p, a5, 0);
        v22 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0, 0);
        v32[0] = v37;
        v32[1] = v38;
        v33 = v39;
        v34 = v25;
        v35 = v25;
        v36 = 1;
        View = (ZinIrOpLayer *)ZinBuilder::CreateView(v21, (uint64_t)&__p, v22, v40, (uint64_t)v32);
        if (SHIBYTE(v31) < 0)
          operator delete(__p);
        v45[0] = a2;
        v28[0] = v45;
        v28[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, v28);
        v24 = ZinIrOpLayerGraph::AddNode(this, View, (ZinIrOpLayer ***)&__p);
        __p = &unk_24C02BB18;
        if (v30)
        {
          v31 = v30;
          operator delete(v30);
        }
        if (!v24)
        {
          *(_QWORD *)(*a6 + 8 * v16) = View;
LABEL_22:
          ZinAssertImpl("Failed to update graph", *(_OWORD *)&v25);
        }
        result = ZinIrOpLayerGraph::AddEdge((uint64_t)this, v20, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(_QWORD *)(*a6 + 8 * v16) = View;
        if ((result & 1) == 0)
          goto LABEL_22;
        goto LABEL_19;
      }
      result = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v16);
LABEL_12:
      *(_QWORD *)(*a6 + 8 * v16) = result;
LABEL_19:
      ++v16;
      v15 = *((_QWORD *)a2 + 11);
    }
    while (v16 < (*((_QWORD *)a2 + 12) - v15) >> 3);
  }
  return result;
}

void sub_20706F1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

double ZinMirChannelSplit::CreateOutputTensor@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  ZinIrTensor *v16;
  unint64_t Interleave;
  char v18;
  double result;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _QWORD *v30;
  void *__p[2];
  char v32;
  double v33[3];
  __int128 v34;

  v10 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
  std::function<ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::operator()(a4, v10 + 48, a2, (uint64_t)a1);
  v11 = a1[2];
  LODWORD(a2) = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0) + 88);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(__p, a3, 0);
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v23 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  ZinIrTensor::CreateTensor(v11, a2, &v34, (__int128 *)__p, &v30, &v28, &v23, (uint64_t *)v33);
  v12 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v30;
  v30 = 0;
  if (v15)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v30, v15);
  if (v32 < 0)
    operator delete(__p[0]);
  v16 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
  Interleave = ZinIrTensor::GetInterleave(v16);
  if (ZinIrTensor::SetInterleave(*(uint64_t **)&v33[0], Interleave, v18, 1))
  {
    *a5 = 0;
    a5[1] = 0;
    v20 = *(std::__shared_weak_count **)&v33[1];
    if (*(_QWORD *)&v33[1])
    {
      v21 = (unint64_t *)(*(_QWORD *)&v33[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    result = v33[0];
    *(_OWORD *)a5 = *(_OWORD *)v33;
  }
  return result;
}

void sub_20706F424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinMirChannelSplit::ConnectSplitNodeAndViewLayers(uint64_t **a1, _QWORD *a2, ZinIrOpLayer *a3, ZinIrOpLayer *a4)
{
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t IndexOfMatchedIncomingLayer;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  ZinIrOpLayer **v17;
  void *__p;
  void *v19;
  char v20;
  ZinIrOpLayer ***v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x24BDAC8D0];
  v24[0] = a3;
  v21 = (ZinIrOpLayer ***)v24;
  v22 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v17, &v21);
  v8 = ZinIrOpLayerGraph::AddNode(a1, a4, &v17);
  v17 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v9 = *((_QWORD *)a3 + 11);
  if (*((_QWORD *)a3 + 12) != v9)
  {
    v10 = 0;
    do
    {
      IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer((ZinIrOpLayerGraph *)a1, a3, *(const ZinIrOpLayer **)(v9 + 8 * v10));
      if ((v8 & 1) != 0)
        v8 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, *(_QWORD *)(*a2 + 8 * v10), (uint64_t)a4, 0xFFFFFFFFFFFFFFFFLL, IndexOfMatchedIncomingLayer, 0);
      else
        v8 = 0;
      ++v10;
      v9 = *((_QWORD *)a3 + 11);
    }
    while (v10 < (*((_QWORD *)a3 + 12) - v9) >> 3);
  }
  ZinIrContext::GetParameters(*(ZinIrContext **)(*(_QWORD *)*a2 + 16), (uint64_t)&v17);
  v22 = 0;
  v23 = 0;
  v21 = &v17;
  v13 = (_QWORD *)*a2;
  v12 = (_QWORD *)a2[1];
  while (v13 != v12)
  {
    v8 &= (*(unsigned int (**)(_QWORD, uint64_t **, ZinIrOpLayer ****))(*(_QWORD *)*v13 + 168))(*v13, a1, &v21) == 0;
    ++v13;
  }
  if ((v8 & 1) == 0)
    ZinAssertImpl("Failed to update graph");
  v14 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v20 < 0)
    operator delete(v19);
}

void sub_20706F63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinMirChannelSplit::ZinSplitLayerByInputChannelByDistribution(uint64_t **a1, uint64_t a2, unint64_t **a3, __int128 *a4, uint64_t a5)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *p_p;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  ZinObjectNameFactory *v23;
  ZinIrOpLayer *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type size;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t Hal;
  uint64_t v56;
  ZinEngineLayerMirInfo *v57;
  ZinEngineLayerMirInfo *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  __n128 v63;
  __int128 *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  __n128 v72;
  __int128 *v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  ZinEngineLayerMirInfo *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t (*v109)(ZinIrOpLayer *, _QWORD, _QWORD);
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *i8;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  int64x2_t *v122;
  int64x2_t v123;
  char *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char *v128;
  ZinIrOpLayer **v129;
  ZinIrOpLayer **v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  ZinIrOpLayer **v135;
  _QWORD *v136;
  _QWORD *v137;
  ZinIrOpLayer *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  char v142;
  uint64_t *i;
  std::string::size_type v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  const char *v158;
  __int128 *v159;
  int64x2_t v160;
  unint64_t *v161;
  int v163;
  unint64_t v165;
  _QWORD *v166;
  void *v167;
  ZinIrOpLayer **v168;
  unint64_t v169;
  void *v170;
  char *v171;
  char *v172;
  _QWORD v173[3];
  char v174;
  std::string v175;
  std::string v176;
  std::string v177;
  std::string v178;
  std::string v179;
  std::string v180;
  __int128 v181;
  __int128 __p;
  int64_t v183;
  _QWORD v184[3];
  _QWORD *v185;
  std::string v186;
  std::string *v187;
  std::string v188;
  __int128 v189;
  char *v190;
  __int128 *v191;
  uint64_t v192;

  v192 = *MEMORY[0x24BDAC8D0];
  v163 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 408))(a2);
  if (*(char *)(a2 + 47) >= 0)
    v8 = *(unsigned __int8 *)(a2 + 47);
  else
    v8 = *(_QWORD *)(a2 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&v186, v8 + 1);
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v186;
  else
    v9 = (std::string *)v186.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*(char *)(a2 + 47) >= 0)
      v10 = (const void *)(a2 + 24);
    else
      v10 = *(const void **)(a2 + 24);
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 95;
  v11 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v188, "split_inpc");
  v12 = std::string::append(v11, "_xfm", 4uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v183 = v12->__r_.__value_.__r.__words[2];
  __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v183 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v183 >= 0)
    v15 = HIBYTE(v183);
  else
    v15 = *((_QWORD *)&__p + 1);
  v16 = std::string::append(&v186, p_p, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v190 = (char *)v16->__r_.__value_.__r.__words[2];
  v189 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v173, &v189);
  if (SHIBYTE(v190) < 0)
    operator delete((void *)v189);
  if (SHIBYTE(v183) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  v158 = (const char *)(a2 + 24);
  v159 = a4;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v18 = *a3;
  v161 = a3[1];
  if (*a3 != v161)
  {
    v19 = 0;
    v20 = 0;
    v160 = vdupq_n_s64(1uLL);
    while (1)
    {
      v21 = *v18;
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v184, a5);
      v22 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 8);
      v165 = v21;
      if (v22 == 81)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 656))(a2) & 1) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 664))(a2) & 1) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 640))(a2) & 1) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 648))(a2) & 1) != 0)
        {
          v24 = ZinMirChannelSplit::SplitPEElementWiseLayerWithPreOps(a1, (ZinIrOpLayerGraph *)a2, (ZinPEElementWiseLayer *)v21, v19, (uint64_t)v173, v23);
          goto LABEL_182;
        }
        v22 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 8);
      }
      if (v22 != 89)
      {
        if (v22 == 90)
        {
          ZinMirChannelSplit::PrepareInputViews(a1, (ZinIrOpLayerGraph *)a2, (const ZinIrOpLayer *)v21, v19, (uint64_t)v173, &v186);
          v25 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a2 + 88) + 32))(**(_QWORD **)(a2 + 88), 0, 0)+ 56);
          v26 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)
                          + 56);
          if (v25 % v26)
            ZinAssertImpl("In ZinNEElementWiseLayer, input channel count must be a multiple of output channel count.");
          *(_QWORD *)&v189 = &unk_24BFFEFE0;
          *((_QWORD *)&v189 + 1) = ZinMirChannelSplit::ComputeOutDims_Default;
          v191 = &v189;
          v27.n128_f64[0] = ZinMirChannelSplit::CreateOutputTensor((_QWORD *)a2, v21 / (v25 / v26), (uint64_t)v173, (uint64_t)&v189, &v175);
          v28 = v191;
          if (v191 == &v189)
          {
            v28 = &v189;
            v29 = 4;
LABEL_50:
            (*(void (**)(__n128))(*(_QWORD *)v28 + 8 * v29))(v27);
          }
          else if (v191)
          {
            v29 = 5;
            goto LABEL_50;
          }
          (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, __n128))(v173[0] + 16))(&v178, v173, 1, v27);
          v32 = std::string::append(&v178, "_", 1uLL);
          v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          v179.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v33;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v177, v21);
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v177;
          else
            v34 = (std::string *)v177.__r_.__value_.__r.__words[0];
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v177.__r_.__value_.__r.__words[2]);
          else
            size = v177.__r_.__value_.__l.__size_;
          v36 = std::string::append(&v179, (const std::string::value_type *)v34, size);
          v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v180.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          v38 = std::string::append(&v180, "_", 1uLL);
          v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v188.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v176, v19);
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &v176;
          else
            v40 = (std::string *)v176.__r_.__value_.__r.__words[0];
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
          else
            v41 = v176.__r_.__value_.__l.__size_;
          v42 = std::string::append(&v188, (const std::string::value_type *)v40, v41);
          v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v183 = v42->__r_.__value_.__r.__words[2];
          __p = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v188.__r_.__value_.__l.__data_);
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v180.__r_.__value_.__l.__data_);
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v179.__r_.__value_.__l.__data_);
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v178.__r_.__value_.__l.__data_);
          v24 = (ZinIrOpLayer *)operator new();
          *(_OWORD *)&v180.__r_.__value_.__l.__data_ = *(_OWORD *)&v175.__r_.__value_.__l.__data_;
          if (v175.__r_.__value_.__l.__size_)
          {
            v44 = (unint64_t *)(v175.__r_.__value_.__l.__size_ + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v46 = *(_QWORD *)(a2 + 376);
          v47 = *(_QWORD *)(a2 + 456);
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 576))(a2);
          v50 = *(_QWORD *)(a2 + 384);
          v49 = *(_QWORD *)(a2 + 392);
          v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 416))(a2);
          ZinNEElementWiseLayer::ZinNEElementWiseLayer(v24, (uint64_t *)&v180, &__p, v46, a2 + 432, v47, v48, v50, v49, v51, *(_QWORD *)(a2 + 408));
          v52 = (std::__shared_weak_count *)v180.__r_.__value_.__l.__size_;
          if (v180.__r_.__value_.__l.__size_)
          {
            v53 = (unint64_t *)(v180.__r_.__value_.__l.__size_ + 8);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          memset(&v188, 0, sizeof(v188));
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v188, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_, (uint64_t)(v186.__r_.__value_.__l.__size_ - v186.__r_.__value_.__r.__words[0]) >> 3);
          ZinMirChannelSplit::ConnectSplitNodeAndViewLayers(a1, &v188, (ZinIrOpLayer *)a2, v24);
          if (v188.__r_.__value_.__r.__words[0])
          {
            v188.__r_.__value_.__l.__size_ = v188.__r_.__value_.__r.__words[0];
            operator delete(v188.__r_.__value_.__l.__data_);
          }
          Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a2 + 16) + 160));
          v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
          v57 = (ZinEngineLayerMirInfo *)operator new();
          ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v57, *(int *)(v56 + 8));
          v179.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
          if (ZinNELayer::ComputeMirInfo(v24, v56, &v179.__r_.__value_.__l.__data_, 1)
            || !v179.__r_.__value_.__r.__words[0])
          {
            if (*(char *)(a2 + 47) < 0)
              v158 = *(const char **)v158;
            ZinAssertImpl("Failed to split layer %s", v158);
          }
          ZinMirL2Config::ZinMirSetFormats((ZinMirL2Config *)(v179.__r_.__value_.__r.__words[0] + 120), v24);
          ZinANELayer::SetMirInfo((uint64_t)v24, (int **)&v179);
          v58 = (ZinEngineLayerMirInfo *)v179.__r_.__value_.__r.__words[0];
          v179.__r_.__value_.__r.__words[0] = 0;
          if (v58)
          {
            ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v58);
            MEMORY[0x20BD002F8]();
          }
          if (SHIBYTE(v183) < 0)
            operator delete((void *)__p);
          v59 = (std::__shared_weak_count *)v175.__r_.__value_.__l.__size_;
          if (v175.__r_.__value_.__l.__size_)
          {
            v60 = (unint64_t *)(v175.__r_.__value_.__l.__size_ + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
LABEL_121:
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          goto LABEL_123;
        }
        ZinMirChannelSplit::PrepareInputViews(a1, (ZinIrOpLayerGraph *)a2, (const ZinIrOpLayer *)v21, v19, (uint64_t)v173, &v186);
        v31 = (uint64_t)v185;
        if (v185)
        {
          if (v185 != v184)
          {
            v31 = (*(uint64_t (**)(void))(*v185 + 16))();
            goto LABEL_48;
          }
          v191 = &v189;
          (*(void (**)(_QWORD *, __int128 *))(v184[0] + 24))(v184, &v189);
        }
        else
        {
LABEL_48:
          v191 = (__int128 *)v31;
        }
        v63.n128_f64[0] = ZinMirChannelSplit::CreateOutputTensor((_QWORD *)a2, v21, (uint64_t)v173, (uint64_t)&v189, &v188);
        v64 = v191;
        if (v191 == &v189)
        {
          v64 = &v189;
          v65 = 4;
LABEL_105:
          (*(void (**)(__n128))(*(_QWORD *)v64 + 8 * v65))(v63);
        }
        else if (v191)
        {
          v65 = 5;
          goto LABEL_105;
        }
        *(_OWORD *)&v180.__r_.__value_.__l.__data_ = *(_OWORD *)&v188.__r_.__value_.__l.__data_;
        if (v188.__r_.__value_.__l.__size_)
        {
          v66 = (unint64_t *)(v188.__r_.__value_.__l.__size_ + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, __n128))(v173[0] + 16))(&__p, v173, 1, v63);
        v24 = (ZinIrOpLayer *)(*(uint64_t (**)(uint64_t, std::string *, __int128 *))(*(_QWORD *)a2 + 176))(a2, &v180, &__p);
        if (SHIBYTE(v183) < 0)
          operator delete((void *)__p);
        v68 = (std::__shared_weak_count *)v180.__r_.__value_.__l.__size_;
        if (v180.__r_.__value_.__l.__size_)
        {
          v69 = (unint64_t *)(v180.__r_.__value_.__l.__size_ + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        __p = 0uLL;
        v183 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_, (uint64_t)(v186.__r_.__value_.__l.__size_ - v186.__r_.__value_.__r.__words[0]) >> 3);
        ZinMirChannelSplit::ConnectSplitNodeAndViewLayers(a1, &__p, (ZinIrOpLayer *)a2, v24);
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        v59 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
        if (v188.__r_.__value_.__l.__size_)
        {
          v71 = (unint64_t *)(v188.__r_.__value_.__l.__size_ + 8);
          do
            v61 = __ldaxr(v71);
          while (__stlxr(v61 - 1, v71));
          goto LABEL_121;
        }
LABEL_123:
        if (v186.__r_.__value_.__r.__words[0])
        {
          v186.__r_.__value_.__l.__size_ = v186.__r_.__value_.__r.__words[0];
          operator delete(v186.__r_.__value_.__l.__data_);
        }
        goto LABEL_182;
      }
      v30 = (uint64_t)v185;
      if (!v185)
        goto LABEL_44;
      if (v185 != v184)
        break;
      v187 = &v186;
      (*(void (**)(_QWORD *, std::string *))(v184[0] + 24))(v184, &v186);
LABEL_96:
      ZinMirChannelSplit::PrepareInputViews(a1, (ZinIrOpLayerGraph *)a2, (const ZinIrOpLayer *)v21, v19, (uint64_t)v173, &__p);
      v62 = (uint64_t)v187;
      if (!v187)
        goto LABEL_99;
      if (v187 != &v186)
      {
        v62 = (*(uint64_t (**)(void))(v187->__r_.__value_.__r.__words[0] + 16))();
LABEL_99:
        v191 = (__int128 *)v62;
        goto LABEL_126;
      }
      v191 = &v189;
      (*(void (**)(std::string *, __int128 *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, &v189);
LABEL_126:
      v72.n128_f64[0] = ZinMirChannelSplit::CreateOutputTensor((_QWORD *)a2, v21, (uint64_t)v173, (uint64_t)&v189, &v181);
      v73 = v191;
      if (v191 == &v189)
      {
        v73 = &v189;
        v74 = 4;
        goto LABEL_130;
      }
      if (v191)
      {
        v74 = 5;
LABEL_130:
        (*(void (**)(__n128))(*(_QWORD *)v73 + 8 * v74))(v72);
      }
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, __n128))(v173[0] + 16))(&v177, v173, 1, v72);
      v75 = std::string::append(&v177, "_", 1uLL);
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v178.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v176, v21);
      if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v176;
      else
        v77 = (std::string *)v176.__r_.__value_.__r.__words[0];
      if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
      else
        v78 = v176.__r_.__value_.__l.__size_;
      v79 = std::string::append(&v178, (const std::string::value_type *)v77, v78);
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v179.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      v81 = std::string::append(&v179, "_", 1uLL);
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v180.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v175, v19);
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &v175;
      else
        v83 = (std::string *)v175.__r_.__value_.__r.__words[0];
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
      else
        v84 = v175.__r_.__value_.__l.__size_;
      v85 = std::string::append(&v180, (const std::string::value_type *)v83, v84);
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v188.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v180.__r_.__value_.__l.__data_);
      if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v179.__r_.__value_.__l.__data_);
      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v178.__r_.__value_.__l.__data_);
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      v24 = (ZinIrOpLayer *)operator new();
      *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v181;
      if (*((_QWORD *)&v181 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      v89 = *(_QWORD *)(a2 + 432);
      v91 = *(_QWORD *)(a2 + 376);
      v90 = *(_QWORD *)(a2 + 384);
      v92 = *(_QWORD *)(a2 + 392);
      v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 416))(a2);
      ZinNEPoolLayer::ZinNEPoolLayer(v24, (uint64_t *)&v179, (__int128 *)&v188, v91, v89, v90, v92, v93, *(_QWORD *)(a2 + 408));
      v94 = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
      if (v179.__r_.__value_.__l.__size_)
      {
        v95 = (unint64_t *)(v179.__r_.__value_.__l.__size_ + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      memset(&v180, 0, sizeof(v180));
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v180, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
      ZinMirChannelSplit::ConnectSplitNodeAndViewLayers(a1, &v180, (ZinIrOpLayer *)a2, v24);
      if (v180.__r_.__value_.__r.__words[0])
      {
        v180.__r_.__value_.__l.__size_ = v180.__r_.__value_.__r.__words[0];
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      if (*(_QWORD *)(a2 + 264))
      {
        ZinANELayer::CopyMirInfo((ZinANELayer *)a2, (ZinEngineLayerMirInfo **)&v178);
        v97 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v24 + 360))(v24, 2);
        v98 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v24 + 88))(v24);
        *(_QWORD *)(v178.__r_.__value_.__r.__words[0] + 80) = v97 / v98;
        v99 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v24 + 368))(v24, 2);
        v100 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v24 + 88))(v24);
        *(_QWORD *)(v178.__r_.__value_.__r.__words[0] + 88) = v99 / v100;
        ZinANELayer::SetMirInfo((uint64_t)v24, (int **)&v178);
        v101 = (ZinEngineLayerMirInfo *)v178.__r_.__value_.__r.__words[0];
        v178.__r_.__value_.__r.__words[0] = 0;
        if (v101)
        {
          ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v101);
          MEMORY[0x20BD002F8]();
        }
      }
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v188.__r_.__value_.__l.__data_);
      v102 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
      if (*((_QWORD *)&v181 + 1))
      {
        v103 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v105 = v187;
      if (v187 == &v186)
      {
        v105 = &v186;
        v106 = 4;
      }
      else
      {
        if (!v187)
          goto LABEL_182;
        v106 = 5;
      }
      (*(void (**)(void))(v105->__r_.__value_.__r.__words[0] + 8 * v106))();
LABEL_182:
      v107 = v185;
      if (v185 == v184)
      {
        v107 = v184;
        v108 = 4;
        goto LABEL_186;
      }
      if (v185)
      {
        v108 = 5;
LABEL_186:
        (*(void (**)(void))(*v107 + 8 * v108))();
      }
      if (!v24)
        ZinAssertImpl("failed create split by input channel, graph is changed");
      v109 = *(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v24 + 32);
      if (v163)
      {
        v110 = 0;
        v111 = (uint64_t *)(v109(v24, 0, 0) + 72);
        v112 = v20;
      }
      else
      {
        v112 = 0;
        v111 = (uint64_t *)(v109(v24, 0, 0) + 56);
        v110 = v20;
      }
      v113 = *v111;
      v114 = v171;
      if (v171 >= v172)
      {
        v117 = (char *)v170;
        v118 = 0xCCCCCCCCCCCCCCCDLL * ((v171 - (_BYTE *)v170) >> 4);
        v119 = v118 + 1;
        if (v118 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v172 - (_BYTE *)v170) >> 4) > v119)
          v119 = 0x999999999999999ALL * ((v172 - (_BYTE *)v170) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v172 - (_BYTE *)v170) >> 4) >= 0x199999999999999)
          v120 = 0x333333333333333;
        else
          v120 = v119;
        if (v120)
        {
          v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v172, v120);
          v117 = (char *)v170;
          v114 = v171;
        }
        else
        {
          v121 = 0;
        }
        v122 = (int64x2_t *)&v121[80 * v118];
        v122->i64[0] = 0;
        v122->i64[1] = v110;
        v122[1].i64[0] = 0;
        v122[1].i64[1] = v112;
        v123 = vdupq_n_s64(1uLL);
        v122[2] = (int64x2_t)xmmword_207A80930;
        v122[3] = v123;
        v122[4] = v123;
        if (v114 == v117)
        {
          v128 = &v121[80 * v118];
          v116 = v165;
        }
        else
        {
          v124 = &v121[80 * v118];
          v116 = v165;
          do
          {
            *((_OWORD *)v124 - 5) = *((_OWORD *)v114 - 5);
            v125 = *((_OWORD *)v114 - 4);
            v126 = *((_OWORD *)v114 - 3);
            v127 = *((_OWORD *)v114 - 1);
            v128 = v124 - 80;
            *((_OWORD *)v124 - 2) = *((_OWORD *)v114 - 2);
            *((_OWORD *)v124 - 1) = v127;
            *((_OWORD *)v124 - 4) = v125;
            *((_OWORD *)v124 - 3) = v126;
            v114 -= 80;
            v124 -= 80;
          }
          while (v114 != v117);
        }
        i8 = v122[5].i8;
        v170 = v128;
        v171 = v122[5].i8;
        v172 = &v121[80 * v120];
        if (v117)
          operator delete(v117);
      }
      else
      {
        *(_QWORD *)v171 = 0;
        *((_QWORD *)v114 + 1) = v110;
        *((_QWORD *)v114 + 2) = 0;
        *((_QWORD *)v114 + 3) = v112;
        *((_OWORD *)v114 + 2) = xmmword_207A80930;
        *((int64x2_t *)v114 + 3) = v160;
        i8 = v114 + 80;
        *((int64x2_t *)v114 + 4) = v160;
        v116 = v165;
      }
      v171 = i8;
      v129 = v168;
      if ((unint64_t)v168 >= v169)
      {
        v131 = ((char *)v168 - (_BYTE *)v167) >> 3;
        if ((unint64_t)(v131 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v132 = (uint64_t)(v169 - (_QWORD)v167) >> 2;
        if (v132 <= v131 + 1)
          v132 = v131 + 1;
        if (v169 - (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
          v133 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v133 = v132;
        if (v133)
        {
          v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v169, v133);
          v116 = v165;
        }
        else
        {
          v134 = 0;
        }
        v135 = (ZinIrOpLayer **)&v134[8 * v131];
        *v135 = v24;
        v130 = v135 + 1;
        v137 = v167;
        v136 = v168;
        if (v168 != v167)
        {
          do
          {
            v138 = (ZinIrOpLayer *)*--v136;
            *--v135 = v138;
          }
          while (v136 != v137);
          v136 = v167;
        }
        v167 = v135;
        v168 = v130;
        v169 = (unint64_t)&v134[8 * v133];
        if (v136)
          operator delete(v136);
      }
      else
      {
        *v168 = v24;
        v130 = v129 + 1;
      }
      v20 += v113;
      v168 = v130;
      v19 += v116;
      if (++v18 == v161)
        goto LABEL_226;
    }
    v30 = (*(uint64_t (**)(void))(*v185 + 16))();
LABEL_44:
    v187 = (std::string *)v30;
    goto LABEL_96;
  }
LABEL_226:
  if (v163)
    v139 = 3;
  else
    v139 = 0;
  v140 = *(_QWORD *)(a2 + 16);
  v166 = 0;
  ZinBuilder::CreateConcat(v140, (uint64_t)v173, v159, (_QWORD **)&v167, (uint64_t)&v170, v139, 1, &v166, (void **)&v186.__r_.__value_.__l.__data_, 0);
  v141 = v166;
  v166 = 0;
  if (v141)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v166, v141);
  v188.__r_.__value_.__r.__words[0] = a2;
  *(_QWORD *)&__p = &v188;
  *((_QWORD *)&__p + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v189, &__p);
  v142 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)&v167, &v186, (ZinIrOpLayer ***)&v189);
  *(_QWORD *)&v189 = &unk_24C02BB18;
  if (*((_QWORD *)&v189 + 1))
  {
    v190 = (char *)*((_QWORD *)&v189 + 1);
    operator delete(*((void **)&v189 + 1));
  }
  if ((v142 & 1) == 0)
    ZinAssertImpl("Failed add concat to graph");
  if (!*(_QWORD *)(v186.__r_.__value_.__l.__size_ - 8))
    ZinAssertImpl("Failed create concat");
  v189 = 0uLL;
  v190 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v189, v167, (uint64_t)v168, ((char *)v168 - (_BYTE *)v167) >> 3);
  v144 = v186.__r_.__value_.__l.__size_;
  for (i = (uint64_t *)v186.__r_.__value_.__r.__words[0]; i != (uint64_t *)v144; ++i)
  {
    v145 = *i;
    if (*i)
    {
      v146 = *((_QWORD *)&v189 + 1);
      if (*((_QWORD *)&v189 + 1) >= (unint64_t)v190)
      {
        v148 = (uint64_t)(*((_QWORD *)&v189 + 1) - v189) >> 3;
        if ((unint64_t)(v148 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v149 = (uint64_t)&v190[-v189] >> 2;
        if (v149 <= v148 + 1)
          v149 = v148 + 1;
        if ((unint64_t)&v190[-v189] >= 0x7FFFFFFFFFFFFFF8)
          v150 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v150 = v149;
        if (v150)
          v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v190, v150);
        else
          v151 = 0;
        v152 = &v151[8 * v148];
        *(_QWORD *)v152 = v145;
        v147 = v152 + 8;
        v153 = (char *)*((_QWORD *)&v189 + 1);
        v154 = (char *)v189;
        if (*((_QWORD *)&v189 + 1) != (_QWORD)v189)
        {
          do
          {
            v155 = *((_QWORD *)v153 - 1);
            v153 -= 8;
            *((_QWORD *)v152 - 1) = v155;
            v152 -= 8;
          }
          while (v153 != v154);
          v153 = (char *)v189;
        }
        *(_QWORD *)&v189 = v152;
        *((_QWORD *)&v189 + 1) = v147;
        v190 = &v151[8 * v150];
        if (v153)
          operator delete(v153);
      }
      else
      {
        **((_QWORD **)&v189 + 1) = v145;
        v147 = (_QWORD *)(v146 + 8);
      }
      *((_QWORD *)&v189 + 1) = v147;
    }
  }
  ZinMirTensorTransform::PropagateSpatialSplitInfo<std::vector<ZinIrOpLayer *>>(a2, (uint64_t)&v189);
  v156 = *(_QWORD *)(v186.__r_.__value_.__l.__size_ - 8);
  if ((_QWORD)v189)
  {
    *((_QWORD *)&v189 + 1) = v189;
    operator delete((void *)v189);
  }
  if (v186.__r_.__value_.__r.__words[0])
  {
    v186.__r_.__value_.__l.__size_ = v186.__r_.__value_.__r.__words[0];
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  if (v167)
  {
    v168 = (ZinIrOpLayer **)v167;
    operator delete(v167);
  }
  if (v170)
  {
    v171 = (char *)v170;
    operator delete(v170);
  }
  v173[0] = off_24C01FBB0;
  if (v174 < 0)
    operator delete((void *)v173[1]);
  return v156;
}

void sub_207070908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v43;
  void *v44;

  v43 = *(void **)(v41 - 144);
  if (v43)
  {
    *(_QWORD *)(v41 - 136) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(v41 - 208);
  if (v44)
  {
    *(_QWORD *)(v41 - 200) = v44;
    operator delete(v44);
  }
  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

uint64_t ZinMirChannelSplit::ZinSplitLayerByInputChannel(uint64_t **a1, ZinMirChannelSplit *this, ZinANELayer *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  void *__p[3];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!ZinMirChannelSplit::IsValidInputChannelSplit(this, (unint64_t)a3)
    || *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 85)
  {
    return 0;
  }
  ZinMirChannelSplit::ComputeChannelDistributionVector(this, (uint64_t)a3, (uint64_t **)__p);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v15, a5);
  v10 = ZinMirChannelSplit::ZinSplitLayerByInputChannelByDistribution(a1, (uint64_t)this, (unint64_t **)__p, a4, (uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_10;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_10:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_207070F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinMirChannelSplit::SplitByOutputChannelWithTranspose(uint64_t **this, const void **a2, uint64_t a3)
{
  int v6;
  ZinIrOpLayer *v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrTensor *v17;
  uint64_t Interleave;
  char v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Hal;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD **v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrOpLayer *v51;
  _BOOL4 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  _QWORD *v60;
  unint64_t *v61;
  unint64_t v62;
  ZinIrOpLayer *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char v67;
  const ZinIrOpLayer **v68;
  unint64_t v69;
  unint64_t IndexOfMatchedIncomingLayer;
  char *v71;
  int64x2_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int64x2_t v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  ZinIrOpLayer **v92;
  char *v93;
  char *v94;
  ZinIrOpLayer *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t *v103;
  unint64_t v104;
  _BOOL4 v105;
  std::string::size_type v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  __int128 v110;
  _QWORD *v111;
  uint64_t *v112;
  std::__shared_weak_count *v113;
  std::string v114;
  uint64_t v115;
  int v116;
  _QWORD *v117;
  uint64_t *v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  __int128 v121;
  uint64_t v122;
  _QWORD v123[4];
  __int128 v124;
  int64x2_t v125;
  int64x2_t v126;
  __int128 __p;
  __int128 v128;
  uint64_t v129;
  void *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  _QWORD v136[3];
  char v137;
  uint64_t v138;
  const void **v139;
  std::__shared_weak_count *v140;
  std::string v141;
  const void **v142;
  const void **v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2))
  {
    if (((*((uint64_t (**)(const void **))*a2 + 80))(a2) & 1) != 0)
      v6 = 1;
    else
      v6 = (*((uint64_t (**)(const void **))*a2 + 81))(a2);
  }
  else
  {
    v6 = 0;
  }
  if (((*((uint64_t (**)(const void **))*a2 + 51))(a2) & 1) == 0 && !v6
    || ((*((unsigned int (**)(const void **))*a2 + 51))(a2) & v6 & 1) != 0)
  {
    return 0;
  }
  if (*((_DWORD *)a2[8] + 2) == 85)
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinMirChannelSplit::SplitByOutputChannelWithTranspose(v9, v10, v11, v12, v13, v14, v15, v16);
    return 0;
  }
  v17 = (ZinIrTensor *)(*((uint64_t (**)(const void **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
  Interleave = ZinIrTensor::GetInterleave(v17);
  if (v19)
    v20 = Interleave;
  else
    v20 = 1;
  if (a3 % v20)
  {
    v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v21)
      ZinMirChannelSplit::SplitByOutputChannelWithTranspose(v21, v22, v23, v24, v25, v26, v27, v28);
    return 0;
  }
  Hal = ZinIrTarget::GetHal(*((ZinIrTarget **)a2[2] + 20));
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v138 = 0;
  v31 = (*((uint64_t (**)(const void **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
  ZinTensorFormatGetSize(*(_DWORD *)(v31 + 88), &v138);
  if ((unint64_t)(v138 * a3) % *(_QWORD *)(v30 + 528))
  {
    v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v32)
      ZinMirChannelSplit::IsValidInputChannelSplit(v32, v33, v34, v35, v36, v37, v38, v39);
    return 0;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_SplitByCoutWithOutputTranspose", a2 + 3, (void **)&__p);
  ZinObjectNameFactory::ZinObjectNameFactory(v136, &__p);
  if (SBYTE7(v128) < 0)
    operator delete((void *)__p);
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v40 = *(_QWORD *)((*((uint64_t (**)(const void **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0) + 56);
  if (v40 >= 1)
  {
    v41 = 0;
    v107 = v40;
    v108 = a3;
    v109 = v20;
    do
    {
      if (v40 - v41 < a3)
        a3 = v40 - v41;
      v42 = ((_BYTE *)a2[12] - (_BYTE *)a2[11]) >> 3;
      *(_QWORD *)&__p = 0;
      std::vector<ZinIrOpLayer *>::vector(&v142, v42, &__p);
      __p = (__int128)vdupq_n_s64(1uLL);
      v128 = __p;
      v129 = 1;
      v43 = (_QWORD **)a2[11];
      if (a2[12] != v43)
      {
        v44 = 0;
        do
        {
          v45 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v43[v44] + 32))(v43[v44], 0, 0);
          v46 = *(_OWORD *)(v45 + 64);
          __p = *(_OWORD *)(v45 + 48);
          v128 = v46;
          v47 = *(_QWORD *)(v45 + 80);
          *((_QWORD *)&v128 + 1) = a3;
          v129 = v47;
          v48 = *((_QWORD *)a2[11] + v44);
          v49 = (uint64_t)a2[2];
          ZinObjectNameFactory::CreateName((uint64_t)v136, 0, (std::string *)v120);
          v50 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0, 0);
          memset(v123, 0, 24);
          v123[3] = v41;
          v124 = xmmword_207A80930;
          v125 = vdupq_n_s64(1uLL);
          v126 = v125;
          v51 = (ZinIrOpLayer *)ZinBuilder::CreateView(v49, (uint64_t)v120, v50, &__p, (uint64_t)v123);
          if (SBYTE7(v121) < 0)
            operator delete(v120[0]);
          v141.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
          v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
          v114.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v120, &v114);
          v52 = ZinIrOpLayerGraph::AddNode(this, v51, (ZinIrOpLayer ***)v120);
          v120[0] = &unk_24C02BB18;
          if (v120[1])
          {
            *(void **)&v121 = v120[1];
            operator delete(v120[1]);
          }
          if (!v52
            || (ZinIrOpLayerGraph::AddEdge((uint64_t)this, v48, (uint64_t)v51, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
          {
            ZinAssertImpl("Failed to update graph");
          }
          v142[v44++] = v51;
          v43 = (_QWORD **)a2[11];
        }
        while (v44 < ((_BYTE *)a2[12] - (_BYTE *)v43) >> 3);
      }
      v53 = (*((uint64_t (**)(const void **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
      v54 = *(_OWORD *)(v53 + 64);
      *(_OWORD *)v120 = *(_OWORD *)(v53 + 48);
      v121 = v54;
      v122 = *(_QWORD *)(v53 + 80);
      v120[1] = (void *)a3;
      v55 = (uint64_t)a2[2];
      v56 = *(_DWORD *)((*((uint64_t (**)(const void **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0) + 88);
      ZinObjectNameFactory::CreateName((uint64_t)v136, 0, &v141);
      v117 = 0;
      v139 = 0;
      v140 = 0;
      LODWORD(v114.__r_.__value_.__l.__data_) = 0;
      v115 = 0;
      *(_OWORD *)&v114.__r_.__value_.__r.__words[1] = 0uLL;
      v116 = 0;
      ZinIrTensor::CreateTensor(v55, v56, (__int128 *)v120, (__int128 *)&v141, &v117, (uint64_t *)&v139, (unsigned int *)&v114, (uint64_t *)&v118);
      v57 = v140;
      if (v140)
      {
        p_shared_owners = (unint64_t *)&v140->__shared_owners_;
        do
          v59 = __ldaxr(p_shared_owners);
        while (__stlxr(v59 - 1, p_shared_owners));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v117;
      v117 = 0;
      if (v60)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v117, v60);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      if (ZinIrTensor::SetInterleave(v118, v109, 1, 1))
        ZinAssertImpl("Set interleave failed");
      v112 = v118;
      v113 = v119;
      if (v119)
      {
        v61 = (unint64_t *)&v119->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      ZinObjectNameFactory::CreateName((uint64_t)v136, 1u, &v114);
      v63 = (ZinIrOpLayer *)(*((uint64_t (**)(const void **, uint64_t **, std::string *))*a2 + 22))(a2, &v112, &v114);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      v64 = v113;
      if (v113)
      {
        v65 = (unint64_t *)&v113->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v139 = a2;
      v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
      v141.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v114, &v141);
      v67 = ZinIrOpLayerGraph::AddNode(this, v63, (ZinIrOpLayer ***)&v114);
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v114.__r_.__value_.__l.__size_)
      {
        v114.__r_.__value_.__r.__words[2] = v114.__r_.__value_.__l.__size_;
        operator delete((void *)v114.__r_.__value_.__l.__size_);
      }
      v68 = (const ZinIrOpLayer **)a2[11];
      if (a2[12] != v68)
      {
        v69 = 0;
        do
        {
          IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer((ZinIrOpLayerGraph *)this, (ZinIrOpLayer *)a2, v68[v69]);
          if ((v67 & 1) != 0)
            v67 = ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v142[v69], (uint64_t)v63, 0xFFFFFFFFFFFFFFFFLL, IndexOfMatchedIncomingLayer, 0);
          else
            v67 = 0;
          ++v69;
          v68 = (const ZinIrOpLayer **)a2[11];
        }
        while (v69 < ((_BYTE *)a2[12] - (_BYTE *)v68) >> 3);
      }
      if ((v67 & 1) == 0)
        ZinAssertImpl("Failed to update graph");
      v71 = v134;
      if (v134 >= v135)
      {
        v74 = 0xCCCCCCCCCCCCCCCDLL * ((v134 - v133) >> 4);
        v75 = v74 + 1;
        if (v74 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v135 - v133) >> 4) > v75)
          v75 = 0x999999999999999ALL * ((v135 - v133) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v135 - v133) >> 4) >= 0x199999999999999)
          v76 = 0x333333333333333;
        else
          v76 = v75;
        if (v76)
          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v135, v76);
        else
          v77 = 0;
        v78 = &v77[80 * v74];
        *(_QWORD *)v78 = 0;
        *((_QWORD *)v78 + 1) = v41;
        *((_QWORD *)v78 + 3) = 0;
        *((_QWORD *)v78 + 4) = 0;
        *((_QWORD *)v78 + 2) = 0;
        v79 = vdupq_n_s64(1uLL);
        *(int64x2_t *)(v78 + 40) = v79;
        *(int64x2_t *)(v78 + 56) = v79;
        *((_QWORD *)v78 + 9) = 1;
        v81 = v133;
        v80 = v134;
        v82 = v78;
        if (v134 != v133)
        {
          do
          {
            *((_OWORD *)v82 - 5) = *((_OWORD *)v80 - 5);
            v83 = *((_OWORD *)v80 - 4);
            v84 = *((_OWORD *)v80 - 3);
            v85 = *((_OWORD *)v80 - 1);
            *((_OWORD *)v82 - 2) = *((_OWORD *)v80 - 2);
            *((_OWORD *)v82 - 1) = v85;
            *((_OWORD *)v82 - 4) = v83;
            *((_OWORD *)v82 - 3) = v84;
            v82 -= 80;
            v80 -= 80;
          }
          while (v80 != v81);
          v80 = v81;
        }
        v73 = v78 + 80;
        v133 = v82;
        v134 = v78 + 80;
        v135 = &v77[80 * v76];
        if (v80)
          operator delete(v80);
      }
      else
      {
        *(_QWORD *)v134 = 0;
        *((_QWORD *)v71 + 1) = v41;
        *((_QWORD *)v71 + 3) = 0;
        *((_QWORD *)v71 + 4) = 0;
        *((_QWORD *)v71 + 2) = 0;
        v72 = vdupq_n_s64(1uLL);
        *(int64x2_t *)(v71 + 40) = v72;
        *(int64x2_t *)(v71 + 56) = v72;
        *((_QWORD *)v71 + 9) = 1;
        v73 = v71 + 80;
      }
      v134 = v73;
      v86 = v131;
      if (v131 >= v132)
      {
        v88 = (v131 - (_BYTE *)v130) >> 3;
        if ((unint64_t)(v88 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v89 = (v132 - (_BYTE *)v130) >> 2;
        if (v89 <= v88 + 1)
          v89 = v88 + 1;
        if ((unint64_t)(v132 - (_BYTE *)v130) >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
          v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v90);
        else
          v91 = 0;
        v92 = (ZinIrOpLayer **)&v91[8 * v88];
        *v92 = v63;
        v87 = (char *)(v92 + 1);
        v94 = (char *)v130;
        v93 = v131;
        if (v131 != v130)
        {
          do
          {
            v95 = (ZinIrOpLayer *)*((_QWORD *)v93 - 1);
            v93 -= 8;
            *--v92 = v95;
          }
          while (v93 != v94);
          v93 = (char *)v130;
        }
        v130 = v92;
        v131 = v87;
        v132 = &v91[8 * v90];
        if (v93)
          operator delete(v93);
      }
      else
      {
        *(_QWORD *)v131 = v63;
        v87 = v86 + 8;
      }
      v131 = v87;
      v96 = v119;
      a3 = v108;
      if (v119)
      {
        v97 = (unint64_t *)&v119->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      if (v142)
      {
        v143 = v142;
        operator delete(v142);
      }
      v41 += v108;
      v40 = v107;
    }
    while (v41 < v107);
  }
  LODWORD(__p) = 0;
  std::make_unique[abi:ne180100]<ZinIrConcatInfo,ZinIrConcatMode,std::vector<ZinIrTensor::ViewOriginAndStep> &>((unsigned int *)&__p, (uint64_t)&v133, (uint64_t *)&v141);
  v99 = (uint64_t)a2[2];
  v100 = *(_DWORD *)((*((uint64_t (**)(const void **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0) + 88);
  v101 = (*((uint64_t (**)(const void **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
  ZinObjectNameFactory::CreateName((uint64_t)v136, 0, (std::string *)v120);
  v111 = 0;
  v142 = 0;
  v143 = 0;
  LODWORD(__p) = 0;
  v128 = 0uLL;
  *((_QWORD *)&__p + 1) = 0;
  LODWORD(v129) = 0;
  ZinIrTensor::CreateTensor(v99, v100, (__int128 *)(v101 + 48), (__int128 *)v120, &v111, (uint64_t *)&v142, (unsigned int *)&__p, (uint64_t *)&v114);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v142);
  v102 = v111;
  v111 = 0;
  if (v102)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v111, v102);
  if (SBYTE7(v121) < 0)
    operator delete(v120[0]);
  v7 = (ZinIrOpLayer *)operator new();
  v110 = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
  if (v114.__r_.__value_.__l.__size_)
  {
    v103 = (unint64_t *)(v114.__r_.__value_.__l.__size_ + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  ZinObjectNameFactory::CreateName((uint64_t)v136, 1u, (std::string *)&__p);
  ZinConcatLayer::ZinConcatLayer(v7, &v141, &v110, &__p, 0);
  if (SBYTE7(v128) < 0)
    operator delete((void *)__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
  v142 = a2;
  v120[0] = &v142;
  v120[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, v120);
  v105 = ZinIrOpLayerGraph::AddNode(this, v7, (ZinIrOpLayer ***)&__p);
  *(_QWORD *)&__p = &unk_24C02BB18;
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)&v128 = *((_QWORD *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if (!v105
    || (ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)this, (uint64_t *)&v130, (uint64_t)v7) & 1) == 0)
  {
    ZinAssertImpl("Failed to update graph");
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v114);
  v106 = v141.__r_.__value_.__r.__words[0];
  v141.__r_.__value_.__r.__words[0] = 0;
  if (v106)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v106 + 8))(v106);
  if (v130)
  {
    v131 = (char *)v130;
    operator delete(v130);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  v136[0] = off_24C01FBB0;
  if (v137 < 0)
    operator delete((void *)v136[1]);
  return v7;
}

void sub_207071A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,void *a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v63;
  void *v64;

  a55 = &unk_24C02BB18;
  if (__p)
  {
    a57 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  v63 = *(_QWORD *)(v61 - 152);
  *(_QWORD *)(v61 - 152) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  v64 = *(void **)(v61 - 240);
  if (v64)
  {
    *(_QWORD *)(v61 - 232) = v64;
    operator delete(v64);
  }
  *(_QWORD *)(v61 - 216) = off_24C01FBB0;
  if (*(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrConcatInfo,ZinIrConcatMode,std::vector<ZinIrTensor::ViewOriginAndStep> &>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = ZinIrConcatInfo::ZinIrConcatInfo(v6, *a1, a2);
  *a3 = v6;
  return result;
}

void sub_207071D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

BOOL ZinMirChannelSplit::HasSufficientCinToSplit(ZinMirChannelSplit *this, const ZinIrOpLayer *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12);
  if (v2 == v3)
    return 0;
  v5 = v2 + 8;
  do
  {
    v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v5 - 8) + 32))(*(_QWORD *)(v5 - 8), 0, 0)+ 56);
    result = v6 >= (unint64_t)a2;
    v8 = v6 >= (unint64_t)a2 || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t std::function<ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, a2, &v7, &v6);
}

void ***std::back_insert_iterator<std::vector<ZinTensorDimensions>>::operator=[abi:ne180100](void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*v4) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v7, v16);
    else
      v17 = 0;
    v18 = &v17[40 * v13];
    v19 = &v17[40 * v16];
    v20 = *a2;
    v21 = a2[1];
    *((_QWORD *)v18 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    v12 = v18 + 40;
    v23 = (char *)*v4;
    v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        v24 = *(_OWORD *)(v22 - 40);
        v25 = *(_OWORD *)(v22 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v22 - 1);
        *(_OWORD *)(v18 - 24) = v25;
        *(_OWORD *)(v18 - 40) = v24;
        v18 -= 40;
        v22 -= 40;
      }
      while (v22 != v23);
      v22 = (char *)*v4;
    }
    *v4 = v18;
    v4[1] = v12;
    v4[2] = v19;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v10 = *a2;
    v11 = a2[1];
    *((_QWORD *)v5 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v5 = v10;
    *((_OWORD *)v5 + 1) = v11;
    v12 = v5 + 40;
  }
  v4[1] = v12;
  return a1;
}

void ZinMirChannelSplit::IsValidInputChannelSplit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Should not split a conv layer by input channel", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Output CW transpose is enabled. The split channel count should be aligned in width dimension.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "the split channel number should be divisible by interleave factor", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirChannelSplit::SplitByOutputChannelWithTranspose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Splittng output channel for Conv layer should be handled by kernel splitter.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "output channel should be a multiple of interleave factor.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinMirUnit::ZinMirUnit(uint64_t a1, int a2, __int128 *a3)
{
  char v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  char v13;

  v5 = 0;
  v6 = 0;
  *(_QWORD *)a1 = off_24C014F70;
  v7 = *a3;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 8) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 5);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a3 + 56);
  v8 = *((_QWORD *)a3 + 9);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a3 + 10);
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a3 + 88);
  v9 = *(__int128 *)((char *)a3 + 104);
  v10 = *(__int128 *)((char *)a3 + 120);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a3 + 17);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  v11 = a1 + 192;
  v12 = a3 + 9;
  do
  {
    v13 = v5;
    std::__optional_copy_base<ZinIrDMAConvertInfo,false>::__optional_copy_base[abi:ne180100]((ZinIrOpLayerOpCode *)(v11 + 32 * v6), (uint64_t)&v12[2 * v6]);
    v5 = 1;
    v6 = 1;
  }
  while ((v13 & 1) == 0);
  std::__optional_copy_base<ZinIrDMAConvertInfo,false>::__optional_copy_base[abi:ne180100]((ZinIrOpLayerOpCode *)(a1 + 256), (uint64_t)(a3 + 13));
  return a1;
}

void sub_20707213C(_Unwind_Exception *a1, void **a2, ...)
{
  uint64_t v2;
  ZinEngineLayerMirInfo **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a2);
  v6 = 0;
  while (1)
  {
    if (*(_BYTE *)(v2 + v6 + 248))
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(v2 + v6 + 224));
    v6 -= 32;
    if (v6 == -64)
    {
      v7 = *(_QWORD *)(v2 + 120);
      *(_QWORD *)(v2 + 120) = 0;
      if (v7)
        MEMORY[0x20BD002F8](v7, 0x1000C40E8BD624ALL);
      v8 = *(_QWORD *)(v2 + 112);
      *(_QWORD *)(v2 + 112) = 0;
      if (v8)
        MEMORY[0x20BD002F8](v8, 0x1000C40B1DE44C5);
      std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100](v3, 0);
      v9 = *v4;
      *v4 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
      if (*(char *)(v2 + 31) < 0)
        operator delete(*a2);
      _Unwind_Resume(a1);
    }
  }
}

BOOL ZinMirUnit::IsValid(ZinMirUnit *this, ZinMirUnitValidationContext *a2)
{
  int v2;
  unsigned int v5;
  _BOOL8 result;
  unint64_t v7;

  v2 = *((_DWORD *)this + 8);
  if (v2 == 106)
    return 0;
  if (*((char *)this + 31) < 0)
  {
    if (!*((_QWORD *)this + 2))
      return 0;
  }
  else if (!*((_BYTE *)this + 31))
  {
    return 0;
  }
  if (!*((_DWORD *)this + 16)
    || (*((_QWORD *)this + 9) & 0x8000000000000000) != 0
    || *((_QWORD *)this + 16) == -1
    || *((_BYTE *)this + 144) && (*((_QWORD *)this + 17) & 0x8000000000000000) != 0)
  {
    return 0;
  }
  v5 = v2 - 28;
  if ((v5 > 0x2D || ((1 << v5) & 0x200000000003) == 0) && *((_QWORD *)this + 6) == *((_QWORD *)this + 5))
    return 0;
  result = ZinMirUnitValidationContext::InsertValueToSet<std::string>((uint64_t)a2, a2, (unsigned __int8 *)this + 8);
  if (result)
  {
    v7 = *((_QWORD *)this + 10);
    result = ZinMirUnitValidationContext::InsertValueToSet<unsigned long long>((uint64_t)a2, (_QWORD *)a2 + 5, &v7);
    if (result)
    {
      if (!*((_BYTE *)this + 144))
        return 1;
      v7 = *((_QWORD *)this + 17);
      result = ZinMirUnitValidationContext::InsertValueToSet<unsigned long long>((uint64_t)a2, (_QWORD *)a2 + 10, &v7);
      if (result)
        return 1;
    }
  }
  return result;
}

BOOL ZinMirUnit::IsInput(ZinMirUnit *this)
{
  int v1;

  v1 = *((_DWORD *)this + 8);
  return v1 == 28 || v1 == 73;
}

BOOL ZinMirUnit::IsConstIn(ZinMirUnit *this)
{
  return *((_DWORD *)this + 8) == 29;
}

uint64_t ZinMirUnit::Format(ZinMirUnit *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t ZinMirUnit::SetLayerMirInfo(uint64_t a1, ZinEngineLayerMirInfo **a2)
{
  ZinEngineLayerMirInfo *v2;

  v2 = *a2;
  *a2 = 0;
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(a1 + 104), v2);
  return 0;
}

uint64_t ZinMirUnit::SetLayerL2Symbols(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v3;
  if (v4)
    MEMORY[0x20BD002F8](v4, 0x1000C40B1DE44C5);
  return 0;
}

uint64_t ZinMirUnit::SetLayerDRAMSymbols(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v3;
  if (v4)
    MEMORY[0x20BD002F8](v4, 0x1000C40E8BD624ALL);
  return 0;
}

uint64_t ZinMirUnit::InitializeEngineLayer(uint64_t a1, ZinIrOpLayer *this, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  ZinIrTensor *v20;
  ZinIrTensor::MirInfo *v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  ZinIrTensor *v27;
  _QWORD *v28;
  ZinIrTensor::MirInfo *v30;
  std::string v31;
  void *__p[2];
  std::string::size_type v33;
  void *v34;
  void *v35;
  char *v36;
  _QWORD v37[3];
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (ZinIrOpLayer::IsANELayer(this))
  {
    if (!*(_QWORD *)(a1 + 104))
      ZinAssertImpl("Invalid mir info");
    ZinMirUnit::CreateSymbols(a1, a3, a4);
    ZinANELayer::SetMirInfo((uint64_t)this, (int **)(a1 + 104));
    if (!*(_BYTE *)(a1 + 144))
      ZinAssertImpl("Missing TID.");
    v8 = *(_QWORD *)(a1 + 136);
    if (v8 < 0)
      ZinAssertImpl("Invalid TD id");
    *((_QWORD *)this + 45) = v8;
    ZinObjectNameFactory::ZinObjectNameFactory(v37, (char *)this + 24);
    v9 = 0;
    v10 = 1;
    do
    {
      v11 = v10;
      v12 = a1 + 192 + 32 * v9;
      if (*(_BYTE *)(v12 + 24))
      {
        v13 = *((_QWORD *)this + 2);
        (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 80))(&v39, this, 0, 0);
        v14 = operator new(0x78uLL);
        v35 = (char *)v14 + 120;
        v36 = (char *)v14 + 120;
        v15 = v44;
        v14[4] = v43;
        v14[5] = v15;
        v14[6] = v45;
        *((_DWORD *)v14 + 28) = v46;
        v16 = v40;
        *v14 = v39;
        v14[1] = v16;
        v17 = v42;
        v14[2] = v41;
        v14[3] = v17;
        v34 = v14;
        std::to_string(&v31, v9);
        v18 = std::string::insert(&v31, 0, "_src", 4uLL);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v33 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v20 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
        ZinIrTensor::CopyTensorMirInfo(v20, &v30);
        *((_QWORD *)this + v9 + 30) = ZinBuilder::CreateDMAConvertLayer(v13, (uint64_t)v37, &v34, (uint64_t)__p, &v30, *(_QWORD *)(v12 + 12));
        v21 = v30;
        v30 = 0;
        if (v21)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v30, v21);
        if (SHIBYTE(v33) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        if (v34)
        {
          v35 = v34;
          operator delete(v34);
        }
      }
      v10 = 0;
      v9 = 1;
    }
    while ((v11 & 1) != 0);
    if (*(_BYTE *)(a1 + 280))
    {
      v22 = *((_QWORD *)this + 2);
      (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 80))(&v39, this, 0, 0);
      v23 = operator new(0x78uLL);
      v35 = (char *)v23 + 120;
      v36 = (char *)v23 + 120;
      v24 = v44;
      v23[4] = v43;
      v23[5] = v24;
      v23[6] = v45;
      *((_DWORD *)v23 + 28) = v46;
      v25 = v40;
      *v23 = v39;
      v23[1] = v25;
      v26 = v42;
      v23[2] = v41;
      v23[3] = v26;
      v34 = v23;
      std::string::basic_string[abi:ne180100]<0>(__p, "_dst");
      v27 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v27, (ZinIrTensor::MirInfo **)&v31);
      *((_QWORD *)this + 32) = ZinBuilder::CreateDMAConvertLayer(v22, (uint64_t)v37, &v34, (uint64_t)__p, &v31, *(_QWORD *)(a1 + 268));
      v28 = (_QWORD *)v31.__r_.__value_.__r.__words[0];
      v31.__r_.__value_.__r.__words[0] = 0;
      if (v28)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v31, v28);
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
      if (v34)
      {
        v35 = v34;
        operator delete(v34);
      }
    }
    v37[0] = off_24C01FBB0;
    if (v38 < 0)
      operator delete((void *)v37[1]);
  }
  return 0;
}

void sub_207072750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void (**a26)(ZinObjectNameFactory *__hidden this),void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _QWORD *v33;

  v33 = a10;
  a10 = 0;
  if (v33)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a10, v33);
  if (a21 < 0)
    operator delete(__p);
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  a26 = off_24C01FBB0;
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirUnit::CreateSymbols(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;

  if (ZinMirUnit::CreateL2Symbols(a1, a2))
    ZinAssertImpl("Unable to create L2 symbols");
  result = ZinMirUnit::CreateDRAMSymbols(a1, a3);
  if ((_DWORD)result)
    ZinAssertImpl("Unable to create DRAM symbols");
  return result;
}

uint64_t ZinMirUnit::CreateL2Symbols(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Symbol;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  void *__p;
  void *v36;
  _QWORD *v37;

  v2 = *(unsigned int **)(a1 + 112);
  if (!v2)
    return 3;
  v4 = *v2;
  v5 = *a2;
  if (0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 3) <= v4)
    ZinAssertImpl("L2 src1 symbol index is out of bounds.");
  v6 = *(_QWORD *)(v5 + 360 * v4 + 352);
  if (!v6)
    goto LABEL_31;
  Symbol = ZinMirCreateSymbol(v5 + 360 * v4, v6, a2);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = Symbol;
  v36 = v10 + 1;
  v37 = v10 + 1;
  v11 = ZinEngineLayerMirInfo::SetL2RdSymbols(v9, (const ZinIrSymbol ***)&__p, 0, *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4));
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if ((v11 & 1) == 0)
    return 3;
  v12 = *(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(v12 + 16))
  {
    v13 = *(unsigned int *)(v12 + 8);
    v14 = *a2;
    if (0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 3) <= v13)
      ZinAssertImpl("L2 src2 symbol index is out of bounds.");
    v15 = *(_QWORD *)(v14 + 360 * v13 + 352);
    if (!v15)
      goto LABEL_31;
    v16 = ZinMirCreateSymbol(v14 + 360 * v13, v15, a2);
    v17 = *(_QWORD *)(a1 + 104);
    v18 = operator new(8uLL);
    __p = v18;
    *v18 = v16;
    v36 = v18 + 1;
    v37 = v18 + 1;
    v19 = ZinEngineLayerMirInfo::SetL2RdSymbols(v17, (const ZinIrSymbol ***)&__p, 1, *(_DWORD *)(*(_QWORD *)(a1 + 112) + 12));
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (!v19)
      return 3;
    v12 = *(_QWORD *)(a1 + 112);
  }
  if (!*(_BYTE *)(v12 + 28))
    goto LABEL_22;
  v20 = *(unsigned int *)(v12 + 20);
  v21 = *a2;
  if (0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 3) <= v20)
    ZinAssertImpl("L2 idx symbol index is out of bounds.");
  if (!*(_BYTE *)(v12 + 16))
    std::__throw_bad_optional_access[abi:ne180100]();
  v22 = *(_QWORD *)(v21 + 360 * *(unsigned int *)(v12 + 8) + 352);
  if (!v22)
LABEL_31:
    ZinAssertImpl("L2 section is not initialized\n");
  v23 = ZinMirCreateSymbol(v21 + 360 * v20, v22, a2);
  v24 = *(_QWORD *)(a1 + 104);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v23;
  v36 = v25 + 1;
  v37 = v25 + 1;
  v26 = ZinEngineLayerMirInfo::SetL2RdSymbols(v24, (const ZinIrSymbol ***)&__p, 2, *(_DWORD *)(*(_QWORD *)(a1 + 112) + 24));
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if (!v26)
    return 3;
  v12 = *(_QWORD *)(a1 + 112);
LABEL_22:
  v27 = *(unsigned int *)(v12 + 32);
  v28 = *a2;
  if (0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 3) <= v27)
    ZinAssertImpl("L2 dst symbol index is out of bounds.");
  v29 = *(_QWORD *)(v28 + 360 * v27 + 352);
  if (!v29)
    goto LABEL_31;
  v30 = ZinMirCreateSymbol(v28 + 360 * v27, v29, a2);
  v31 = *(_QWORD *)(a1 + 104);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v30;
  v36 = v32 + 1;
  v37 = v32 + 1;
  v33 = ZinEngineLayerMirInfo::SetL2WrSymbols(v31, (const ZinIrSymbol ***)&__p, *(_DWORD *)(*(_QWORD *)(a1 + 112) + 36));
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if (v33)
    return 0;
  else
    return 3;
}

void sub_207072B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirUnit::CreateDRAMSymbols(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Symbol;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 120);
  if (!v2)
    return 3;
  if (*((_BYTE *)v2 + 4))
  {
    v5 = *v2;
    v6 = *a2;
    if (0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 3) <= v5)
      ZinAssertImpl("DRAM src1 symbol index is out of bounds.");
    v7 = *(_QWORD *)(v6 + 360 * v5 + 352);
    if (!v7)
      goto LABEL_16;
    *(_QWORD *)(*(_QWORD *)(a1 + 104) + 752) = ZinMirCreateSymbol(v6 + 360 * v5, v7, a2);
    v2 = *(unsigned int **)(a1 + 120);
  }
  if (*((_BYTE *)v2 + 12))
  {
    v8 = v2[2];
    v9 = *a2;
    if (0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 3) <= v8)
      ZinAssertImpl("DRAM src2 symbol index is out of bounds.");
    v10 = *(_QWORD *)(v9 + 360 * v8 + 352);
    if (!v10)
      goto LABEL_16;
    *(_QWORD *)(*(_QWORD *)(a1 + 104) + 848) = ZinMirCreateSymbol(v9 + 360 * v8, v10, a2);
    v2 = *(unsigned int **)(a1 + 120);
  }
  if (*((_BYTE *)v2 + 20))
  {
    v11 = v2[4];
    v12 = *a2;
    if (0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 3) <= v11)
      ZinAssertImpl("DRAM dst symbol index is out of bounds.");
    v13 = *(_QWORD *)(v12 + 360 * v11 + 352);
    if (v13)
    {
      Symbol = ZinMirCreateSymbol(v12 + 360 * v11, v13, a2);
      result = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 104) + 944) = Symbol;
      return result;
    }
LABEL_16:
    ZinAssertImpl("DRAM section is not initialized\n");
  }
  return 0;
}

uint64_t ZinMirCreateSymbol(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const std::string *v6;
  uint64_t SymbolByName;
  unint64_t v8;
  ZinIrSymbol *Symbol;
  int32x2_t v11;
  std::string __p;
  _BYTE v13[304];
  int32x2_t v14;
  std::string v15;
  _QWORD v16[39];

  v16[38] = *MEMORY[0x24BDAC8D0];
  v6 = (const std::string *)(a1 + 8);
  SymbolByName = ZinIrSymbolTable::GetSymbolByName(a2 + 64, (void **)(a1 + 8));
  if (!SymbolByName)
  {
    if (*(_BYTE *)(a1 + 348))
    {
      v8 = *(unsigned int *)(a1 + 344);
      if (0x4FA4FA4FA4FA4FA5 * ((uint64_t)(a3[1] - *a3) >> 3) <= v8)
        ZinAssertImpl("Symbol index is out of bounds.");
      Symbol = (ZinIrSymbol *)ZinMirCreateSymbol(*a3 + 360 * v8, a2, a3);
    }
    else
    {
      Symbol = 0;
    }
    ZinIrSymbol::Descriptor::Descriptor((ZinIrSymbol::Descriptor *)&v14);
    std::string::operator=(&v15, v6);
    v14 = vrev64_s32(*(int32x2_t *)a1);
    v16[0] = *(_QWORD *)(a1 + 48);
    *(_OWORD *)&v16[1] = *(_OWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 280))
    {
      *(_OWORD *)&v16[21] = *(_OWORD *)(a1 + 216);
      *(_OWORD *)&v16[23] = *(_OWORD *)(a1 + 232);
      *(_OWORD *)&v16[25] = *(_OWORD *)(a1 + 248);
      *(_OWORD *)&v16[13] = *(_OWORD *)(a1 + 152);
      *(_OWORD *)&v16[15] = *(_OWORD *)(a1 + 168);
      *(_OWORD *)&v16[17] = *(_OWORD *)(a1 + 184);
      *(_OWORD *)&v16[19] = *(_OWORD *)(a1 + 200);
      *(_OWORD *)&v16[5] = *(_OWORD *)(a1 + 88);
      *(_OWORD *)&v16[7] = *(_OWORD *)(a1 + 104);
      *(_OWORD *)&v16[9] = *(_OWORD *)(a1 + 120);
      *(_OWORD *)&v16[11] = *(_OWORD *)(a1 + 136);
      *(_OWORD *)&v16[3] = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&v16[27] = *(_OWORD *)(a1 + 264);
    }
    v11 = v14;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      __p = v15;
    memcpy(v13, v16, sizeof(v13));
    if (!*(_BYTE *)(a1 + 304))
      std::__throw_bad_optional_access[abi:ne180100]();
    SymbolByName = ZinIrSection::CreateSymbolAtOffset(a2, (uint64_t)&v11, Symbol, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), a1 + 312);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  return SymbolByName;
}

void sub_207072F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  _Unwind_Resume(exception_object);
}

BOOL ZinMirUnit::IsOutput(ZinMirUnit *this)
{
  return *((_DWORD *)this + 8) == 31;
}

uint64_t ZinMirUnit::GetAotTensorDims(ZinMirUnit *this)
{
  return (uint64_t)this + 152;
}

uint64_t ZinMirUnit::Print@<X0>(ZinMirUnit *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  void *locale;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  uint64_t v29;
  std::locale v31;
  uint64_t v32;
  unsigned __int8 v33;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;
  std::locale v39;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"\t\t\t", 3);
  v5 = *((char *)this + 31);
  if (v5 >= 0)
    v6 = (char *)this + 8;
  else
    v6 = (char *)*((_QWORD *)this + 1);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 31);
  else
    v7 = *((_QWORD *)this + 2);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"</font><br/>", 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"\t\t\t<font face='Arial Rounded MT Bold'>Op:</font> ", 49);
  ZinIrEnumToStringUtil::OpCodeToString(*((_DWORD *)this + 8), &v31);
  if ((v33 & 0x80u) == 0)
    locale = &v31;
  else
    locale = v31.__locale_;
  if ((v33 & 0x80u) == 0)
    v13 = v33;
  else
    v13 = v32;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)locale, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"<br align='left'/>", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
  v16 = std::locale::use_facet(&v39, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v39);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v33 < 0)
    operator delete(v31.__locale_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"\t\t\t<font face='Arial Rounded MT Bold'>ID:</font> ", 49);
  v17 = (_QWORD *)std::ostream::operator<<();
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"<br align='left'/>", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"\t\t\t<font face='Arial Rounded MT Bold'>SCHED:</font> ", 52);
  v20 = (_QWORD *)std::ostream::operator<<();
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"<br align='left'/>", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  if (*((_BYTE *)this + 144))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"\t\t\t<font face='Arial Rounded MT Bold'>TID:</font> ", 50);
    if (!*((_BYTE *)this + 144))
      std::__throw_bad_optional_access[abi:ne180100]();
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"<br align='left'/>", 18);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v31);
    std::ostream::put();
    std::ostream::flush();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"\t\t\t<font face='Arial Rounded MT Bold'>GROUP ID:</font> ", 55);
  v26 = (_QWORD *)std::ostream::operator<<();
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"<br align='left'/>", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
  v28 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v36, a2);
  v34[0] = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v35 = v29;
  v36[0] = MEMORY[0x24BEDB848] + 16;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v38);
}

void sub_207073400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL ZinMirUnitValidationContext::InsertValueToSet<std::string>(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;

  v5 = std::__hash_table<std::__hash_value_type<std::string,PerfTracerCategory>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,PerfTracerCategory>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,PerfTracerCategory>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,PerfTracerCategory>>>::find<std::string>(a2, a3);
  if (!v5)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a2, a3, (uint64_t)a3);
  return v5 == 0;
}

BOOL ZinMirUnitValidationContext::InsertValueToSet<unsigned long long>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v5;

  v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, a3);
  if (!v5)
    std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)a2, a3, a3);
  return v5 == 0;
}

ZinMirAliasUnit *ZinParseMirAliasUnit@<X0>(unint64_t *a1@<X0>, ZinMirUnit::CommonUnitInfo *a2@<X1>, CFArrayRef *a3@<X2>, _QWORD *a4@<X8>)
{
  ZinMirAliasUnit *v8;
  ZinMirAliasUnit *result;
  ZinMirAliasUnit *v10;

  v8 = (ZinMirAliasUnit *)operator new();
  ZinMirAliasUnit::ZinMirAliasUnit(v8, a2);
  v10 = v8;
  result = (ZinMirAliasUnit *)ZinSerial::DeserializeMirAliasUnitFields(a1, &v10);
  if ((_DWORD)result)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidAOTSerializationData"));
    *a4 = 0;
    result = v10;
    v10 = 0;
    if (result)
      return (ZinMirAliasUnit *)(*(uint64_t (**)(ZinMirAliasUnit *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a4 = v10;
  }
  return result;
}

void sub_2070735B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C400EEE3B5BLL);
  _Unwind_Resume(a1);
}

uint64_t ZinParseMirConcatUnit@<X0>(ZinSerial::Deserializer *a1@<X0>, ZinMirUnit::CommonUnitInfo *a2@<X1>, CFArrayRef *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = operator new();
  ZinMirConcatUnit::ZinMirConcatUnit(v8, (__int128 *)a2);
  v10 = v8;
  result = ZinSerial::DeserializeMirConcatUnitFields((unint64_t *)a1, &v10);
  if ((_DWORD)result)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidAOTSerializationData"));
    *a4 = 0;
    result = v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a4 = v10;
  }
  return result;
}

void sub_2070736AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C4070E01257);
  _Unwind_Resume(a1);
}

uint64_t ZinParseMirTransposeUnit@<X0>(ZinSerial::Deserializer *a1@<X0>, ZinMirUnit::CommonUnitInfo *a2@<X1>, CFArrayRef *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = operator new();
  ZinMirTransposeUnit::ZinMirTransposeUnit(v8, (__int128 *)a2);
  v10 = v8;
  result = ZinSerial::DeserializeMirTransposeUnitFields((unint64_t *)a1, &v10);
  if ((_DWORD)result)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidAOTSerializationData"));
    *a4 = 0;
    result = v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a4 = v10;
  }
  return result;
}

void sub_2070737A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C4070E01257);
  _Unwind_Resume(a1);
}

int64x2_t *ZinParseMirViewUnit@<X0>(ZinSerial::Deserializer *a1@<X0>, ZinMirUnit::CommonUnitInfo *a2@<X1>, CFArrayRef *a3@<X2>, _QWORD *a4@<X8>)
{
  ZinMirViewUnit *v8;
  int64x2_t *result;
  int64x2_t *v10;

  v8 = (ZinMirViewUnit *)operator new();
  ZinMirViewUnit::ZinMirViewUnit(v8, a2);
  v10 = (int64x2_t *)v8;
  result = (int64x2_t *)ZinSerial::DeserializeMirViewUnitFields((unint64_t *)a1, &v10);
  if ((_DWORD)result)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidAOTSerializationData"));
    *a4 = 0;
    result = v10;
    v10 = 0;
    if (result)
      return (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
  }
  else
  {
    *a4 = v10;
  }
  return result;
}

void sub_207073894(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40BB21B309);
  _Unwind_Resume(a1);
}

uint64_t ZinParseMirReshapeUnit@<X0>(ZinSerial::Deserializer *a1@<X0>, ZinMirUnit::CommonUnitInfo *a2@<X1>, CFArrayRef *a3@<X2>, ZinMirReshapeUnit **a4@<X8>)
{
  ZinMirReshapeUnit *v8;
  uint64_t result;
  ZinMirReshapeUnit *v10;

  v8 = (ZinMirReshapeUnit *)operator new();
  ZinMirReshapeUnit::ZinMirReshapeUnit(v8, a2);
  v10 = v8;
  result = ZinSerial::DeserializeMirReshapeUnitFields((unint64_t *)a1, (uint64_t *)&v10);
  if ((_DWORD)result)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidAOTSerializationData"));
    *a4 = 0;
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a4 = v10;
  }
  return result;
}

void sub_207073988(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40AC1374BELL);
  _Unwind_Resume(a1);
}

ZinMirConstInUnit *ZinParseMirConstInUnit@<X0>(unint64_t *a1@<X0>, ZinMirUnit::CommonUnitInfo *a2@<X1>, CFArrayRef *a3@<X2>, _QWORD *a4@<X8>)
{
  ZinMirConstInUnit *v8;
  ZinMirConstInUnit *result;
  ZinMirConstInUnit *v10;

  v8 = (ZinMirConstInUnit *)operator new();
  ZinMirConstInUnit::ZinMirConstInUnit(v8, a2);
  v10 = v8;
  result = (ZinMirConstInUnit *)ZinSerial::DeserializeMirConstInUnitFields(a1, &v10);
  if ((_DWORD)result)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidAOTSerializationData"));
    *a4 = 0;
    result = v10;
    v10 = 0;
    if (result)
      return (ZinMirConstInUnit *)(*(uint64_t (**)(ZinMirConstInUnit *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a4 = v10;
  }
  return result;
}

void sub_207073A7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C405AFEF507);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPadUnit::ZinIrPadUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  __int128 v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C0169F0;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v5 + 7), (const ZinIrTextureUnitInfo *)a2);
  *(_QWORD *)(a1 + 56) = &off_24C01BAC0;
  v6 = *(_OWORD *)(a2 + 156);
  v7 = *(_OWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 244) = *(_QWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 228) = v7;
  *(_OWORD *)(a1 + 212) = v6;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 256), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 3);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 224);
  return a1;
}

void sub_207073B5C(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;
  ZinIrTextureUnitInfo *v2;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPadUnit::TensorDimensions(ZinIrPadUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = v4[2];
  v6 = v4[1] + *((int *)this + 61) + (uint64_t)*((int *)this + 62);
  *((_QWORD *)a3 + 4) = v4[5] + *((int *)this + 57) + (uint64_t)*((int *)this + 58);
  v7 = v5 + *((int *)this + 59) + (uint64_t)*((int *)this + 60);
  *(_QWORD *)a3 = v6;
  *((_QWORD *)a3 + 1) = v7;
  v8 = v4[3] + *((int *)this + 55) + (uint64_t)*((int *)this + 56);
  v9 = v4[4] + *((int *)this + 53) + (uint64_t)*((int *)this + 54);
  *((_QWORD *)a3 + 2) = v8;
  *((_QWORD *)a3 + 3) = v9;
  return 0;
}

ZinIrPadInfo *ZinIrPadUnit::CreateOpcode@<X0>(unsigned int **this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  int v6;
  const ZinIrPadUnitInfo *v7;
  ZinIrPadInfo *v8;
  ZinIrPadInfo *result;
  const char *v10;
  _QWORD v11[2];
  char v12;

  v4 = *(_DWORD *)((*((uint64_t (**)(unsigned int **))*this + 14))(this) + 64);
  v5 = *this[1];
  if (v4)
  {
    if (v4 == v5)
      v6 = v4;
    else
      v6 = 3;
  }
  else
  {
    if (v5 == 8)
      ZinAssertImpl("Invalid input tensor format: packed10 for pad layer");
    if ((IsFormatDMAConvertibleToFP16(v5) & 1) != 0)
    {
      v6 = 3;
    }
    else
    {
      if (CheckValidFormat(*this[1]))
      {
        ZinTensorFormatToString(*this[1], v11);
        if (v12 >= 0)
          v10 = (const char *)v11;
        else
          v10 = (const char *)v11[0];
        ZinAssertImpl("Invalid input tensor format: %s for pad layer", v10);
      }
      v6 = *this[1];
    }
  }
  v7 = (const ZinIrPadUnitInfo *)(this + 7);
  v8 = (ZinIrPadInfo *)operator new();
  result = ZinIrPadInfo::ZinIrPadInfo(v8, v7);
  *((_DWORD *)v8 + 20) = v6;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v8;
  return result;
}

void sub_207073CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrPadUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;
  uint64_t v29;

  ZinIrPadUnit::CreateOpcode((unsigned int **)a1, (uint64_t)&v28);
  if (v28)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v26 = **a3;
    v27 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinPadLayer::ZinPadLayer(v6, &v29, &v26, a1 + 64);
    v10 = v27;
    if (v27)
    {
      v11 = (unint64_t *)&v27->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = *(__int128 **)(a1 + 8);
    v21 = v13[4];
    v22 = v13[5];
    v23 = v13[6];
    v24 = *((_DWORD *)v13 + 28);
    v17 = *v13;
    v18 = v13[1];
    v19 = v13[2];
    v20 = v13[3];
    v14 = operator new(0x78uLL);
    v14[4] = v21;
    v14[5] = v22;
    v14[6] = v23;
    *((_DWORD *)v14 + 28) = v24;
    *v14 = v17;
    v14[1] = v18;
    v14[2] = v19;
    v14[3] = v20;
    v25 = v14;
    ZinIrOpLayer::ValidateSemantics(v5);
    if (v25)
      operator delete(v25);
  }
  v15 = v29;
  v29 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v5;
}

void sub_207073EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

BOOL ZinSeedUtils::ValidateHWSeeds(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v5;
  unsigned int *v6;
  BOOL v7;
  unint64_t v8;
  unsigned int v12;

  v5 = *a1;
  v12 = 0;
  v7 = 0;
  if (ZinSeedUtils::GenerateOrValidateLFSR113Seed(0, v5, &v12, a4))
  {
    v7 = 0;
    v8 = 1;
    do
    {
      if (v5 != v12 || v12 == 0)
        break;
      if (v8 == 4)
        return 1;
      v7 = v8 - 1 > 2;
      v5 = a1[v8];
      v12 = 0;
    }
    while (ZinSeedUtils::GenerateOrValidateLFSR113Seed(v8++, v5, &v12, v6));
  }
  return v7;
}

BOOL ZinSeedUtils::GenerateOrValidateLFSR113Seed(unint64_t this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ZinSeedUtils::minimum_seed_values[this] > a2)
  {
    *a3 = 0;
    return 1;
  }
  if (this < 4)
  {
    *a3 = ((((dword_207AA93C0[this] & a2) << dword_207AA93D0[this]) ^ dword_207AA93C0[this] & a2) >> dword_207AA93E0[this]) | dword_207AA93C0[this] & a2;
    return 1;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinSeedUtils::GenerateOrValidateLFSR113Seed(result, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  return result;
}

uint64_t ZinSeedUtils::CreateDeterministicSeeds(uint64_t a1, uint64_t a2)
{
  const char *v4;
  CC_LONG v5;
  unsigned int *v6;
  unint64_t v7;
  int v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  CC_LONG v15;
  unsigned int *v16;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  void *__p[2];
  int64_t v28;
  unsigned int v29;
  _DWORD md[16];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  v5 = strlen(v4);
  CC_SHA512(v4, v5, (unsigned __int8 *)md);
  v7 = 0;
  v8 = 0;
  while (2)
  {
    v29 = 0;
    if (!ZinSeedUtils::GenerateOrValidateLFSR113Seed(v7, md[v7], &v29, v6))
      return 3;
    while (!v29)
    {
      if (v8 >= 10)
      {
        v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v18)
          ZinSeedUtils::CreateDeterministicSeeds(v18, v19, v20, v21, v22, v23, v24, v25);
        return 3;
      }
      std::to_string(&v26, v8 + 1);
      v9 = *(char *)(a1 + 23);
      if (v9 >= 0)
        v10 = (const std::string::value_type *)a1;
      else
        v10 = *(const std::string::value_type **)a1;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      v12 = std::string::insert(&v26, 0, v10, v11);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v28 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (v28 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      v15 = strlen((const char *)v14);
      CC_SHA512(v14, v15, (unsigned __int8 *)md);
      if (SHIBYTE(v28) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      ++v8;
      if (!ZinSeedUtils::GenerateOrValidateLFSR113Seed(v7, md[v7], &v29, v16))
        return 3;
    }
    *(_DWORD *)(a2 + 4 * v7++) = v29;
    if (v7 != 4)
      continue;
    break;
  }
  return 0;
}

void sub_207074224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void ZinSeedUtils::GenerateOrValidateLFSR113Seed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "invalid seed index", a5, a6, a7, a8, 0);
}

void ZinSeedUtils::CreateDeterministicSeeds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to find suitable random number for seed.", a5, a6, a7, a8, 0);
}

void Layer2TDMapper::LayerTracker::GetRootSourceLayerNames(Layer2TDMapper::LayerTracker *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v5;
  __int128 *v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v3)
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)(*v2 + 24);
      if ((unint64_t)v5 >= a2[2])
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)a2, (uint64_t)v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        ++v5;
      }
      a2[1] = v5;
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_207074354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Layer2TDMapper::LayerTracker::SetOption(uint64_t result, int a2)
{
  if (!a2)
    *(_BYTE *)(result + 88) = 1;
  return result;
}

uint64_t std::vector<std::unordered_set<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[40 * v10];
    v18 = &v14[40 * v13];
    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)v16, a2);
    v17 = v16 + 40;
    std::vector<std::unordered_map<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<std::unordered_map<ZinIrOpLayer *,ZinIrOpLayer *>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_20707448C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_map<ZinIrOpLayer *,ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_set<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<std::unordered_set<unsigned long>>::__push_back_slow_path<std::unordered_set<unsigned long> const&>(a1, a2);
  }
  else
  {
    std::unordered_set<unsigned long>::unordered_set(a1[1], a2);
    result = v3 + 40;
    a1[1] = v3 + 40;
  }
  a1[1] = result;
  return result;
}

void sub_2070744EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__int128 *Layer2TDMapper::LayerTracker::EmptySourceIds(Layer2TDMapper::LayerTracker *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    Layer2TDMapper::LayerTracker::EmptySourceIds(void)const::EMPTY_SOURCE_IDS = 0u;
    unk_2545297C8 = 0u;
    dword_2545297D8 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_set<unsigned long>::~unordered_set[abi:ne180100], &Layer2TDMapper::LayerTracker::EmptySourceIds(void)const::EMPTY_SOURCE_IDS, &dword_2069AB000);
  }
  return &Layer2TDMapper::LayerTracker::EmptySourceIds(void)const::EMPTY_SOURCE_IDS;
}

__int128 *Layer2TDMapper::LayerTracker::GetSourceLayerIds(Layer2TDMapper::LayerTracker *this, const ZinIrOpLayer *a2)
{
  uint64_t v2;
  Layer2TDMapper::LayerTracker *v4;
  unint64_t v5;
  _QWORD *GroupId;
  uint64_t v7;

  v2 = *((_QWORD *)this + 9) - *((_QWORD *)this + 8);
  if (v2
    && (v4 = this,
        v5 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 3),
        this = (Layer2TDMapper::LayerTracker *)ZinIrOpLayer::GetGroupId(a2),
        v5 > *(_QWORD *)this))
  {
    GroupId = (_QWORD *)ZinIrOpLayer::GetGroupId(a2);
    v7 = *((_QWORD *)v4 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v4 + 9) - v7) >> 3) <= *GroupId)
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    return (__int128 *)(v7 + 40 * *GroupId);
  }
  else
  {
    Layer2TDMapper::LayerTracker::EmptySourceIds(this);
    return &Layer2TDMapper::LayerTracker::EmptySourceIds(void)const::EMPTY_SOURCE_IDS;
  }
}

void Layer2TDMapper::LayerTracker::GetRootSourceLayers(Layer2TDMapper::LayerTracker *this@<X0>, const ZinIrOpLayer *a2@<X1>, char **a3@<X8>)
{
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = (_QWORD *)*((_QWORD *)Layer2TDMapper::LayerTracker::GetSourceLayerIds(this, a2) + 2);
  if (v5)
  {
    v6 = 0;
    v7 = a3 + 2;
    do
    {
      v8 = v5[2];
      v9 = *(_QWORD *)this;
      if ((unint64_t)v6 >= *v7)
      {
        v10 = (v6 - *a3) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v11 = *v7 - (_QWORD)*a3;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = *(_QWORD *)(v9 + 8 * v8);
        v6 = v15 + 8;
        v17 = *a3;
        v16 = a3[1];
        if (v16 != *a3)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *a3;
        }
        *a3 = v15;
        a3[1] = v6;
        a3[2] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v6 = *(_QWORD *)(v9 + 8 * v8);
        v6 += 8;
      }
      a3[1] = v6;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
}

void sub_207074738(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::unordered_set<unsigned long>>::__push_back_slow_path<std::unordered_set<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[40 * v4];
  v16 = &v10[40 * v9];
  std::unordered_set<unsigned long>::unordered_set((uint64_t)v14, a2);
  v15 = v14 + 40;
  std::vector<std::unordered_map<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::unordered_map<ZinIrOpLayer *,ZinIrOpLayer *>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_20707484C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_map<ZinIrOpLayer *,ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  void ***v15;
  void ***v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char **v34;
  _BYTE v35[8];
  _QWORD v36[3];
  _QWORD *v37;
  _BYTE v38[24];
  _BYTE *v39;
  void **v40[3];
  _QWORD v41[4];
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[4];
  uint64_t v45;
  uint64_t v46[3];
  _QWORD v47[4];
  uint64_t v48;
  uint64_t v49[3];
  _QWORD v50[4];
  uint64_t v51;
  _QWORD v52[23];
  uint64_t v53;
  _QWORD v54[3];

  v54[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v40, "conv");
  v41[0] = &off_24C004BF0;
  v41[3] = v41;
  v25 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v42, &v25, 1);
  std::string::basic_string[abi:ne180100]<0>(v43, "any_goc");
  v44[0] = &off_24C004C48;
  v44[3] = v44;
  v24 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v45, &v24, 1);
  std::string::basic_string[abi:ne180100]<0>(v46, "relu");
  v47[0] = &off_24C004CF8;
  v47[3] = v47;
  v23 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v48, &v23, 1);
  std::string::basic_string[abi:ne180100]<0>(v49, "positive_goc");
  v50[0] = &off_24C004CA0;
  v50[3] = v50;
  v22 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v51, &v22, 1);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v34 = &v26;
  v35[0] = 0;
  v26 = (char *)operator new(0x180uLL);
  v27 = (uint64_t)v26;
  v28 = v26 + 384;
  v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v28, (uint64_t)v40, (uint64_t)v52, (uint64_t)v26);
  v39 = 0;
  ZinLinearPattern::ZinLinearPattern(v52, &v26, a2, 0, v38, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v52, &v29);
  v5 = v29;
  v4 = v30;
  v54[0] = v29;
  v54[1] = v30;
  v29 = 0;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v34 = (char **)&v31;
  v35[0] = 0;
  v6 = operator new(0x10uLL);
  v31 = v6;
  v33 = v6 + 2;
  *v6 = v5;
  v6[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v32 = v6 + 2;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v54);
  v9 = v30;
  if (v30)
  {
    v10 = (unint64_t *)&v30->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v52[0] = &off_24C01BCC8;
  v34 = (char **)&v53;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  ZinPattern::~ZinPattern((ZinPattern *)v52);
  v12 = v39;
  if (v39 == v38)
  {
    v13 = 4;
    v12 = v38;
    goto LABEL_13;
  }
  if (v39)
  {
    v13 = 5;
LABEL_13:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v34 = &v26;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v14 = 384;
  do
  {
    v15 = &v40[v14 / 8];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v38[v14 - 8]);
    v16 = (void ***)v36[v14 / 8 + 2];
    if (&v35[v14] == (_BYTE *)v16)
    {
      v16 = v15 - 9;
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_20;
      v17 = 5;
    }
    ((void (*)(void))(*v16)[v17])();
LABEL_20:
    if ((char)v35[v14 - 1] < 0)
      operator delete(*(v15 - 12));
    v14 -= 96;
  }
  while (v14);
  v36[0] = &off_24C004D50;
  v36[1] = &v31;
  v37 = v36;
  v18 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v36, 1);
  v19 = v37;
  if (v37 == v36)
  {
    v20 = 4;
    v19 = v36;
LABEL_27:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  else if (v37)
  {
    v20 = 5;
    goto LABEL_27;
  }
  v40[0] = (void **)&v31;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v40);
  return v18;
}

void sub_207074C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a25;
  if (a25 == v30)
  {
    v33 = 4;
    v32 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  a30 = (void **)&a16;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a30);
  _Unwind_Resume(a1);
}

void sub_207074D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a30);
  JUMPOUT(0x207074D3CLL);
}

void sub_207074D54()
{
  JUMPOUT(0x207074D3CLL);
}

uint64_t ZinIrOpt::ActivationWithSingularScaleGOC(ZinIrOpt *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  _QWORD *v5;
  uint64_t **v6;
  ZinIrOpLayer ****v7;
  ZinIrOpLayerGraph *v8;
  _QWORD *v9;
  char v10;
  float v11;
  NSObject *v12;
  ZinIrOpLayer *v13;
  uint64_t Hal;
  uint64_t v15;
  ZinIrOpLayer *v16;
  int HasScale;
  float SingularVal;
  uint64_t v19;
  double v20;
  char *v21;
  void *v22;
  char *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  ZinIrOpLayer **v33;
  char *v34;
  char *v35;
  ZinIrOpLayer *v36;
  uint64_t **v37;
  ZinIrOpLayer ****v38;
  ZinIrOpLayer **v39;
  char *v40;
  char *v41;
  ZinIrOpLayer *v42;
  uint64_t ***v43;
  ZinIrOpLayer *v44;
  uint64_t **v45;
  uint64_t ***v46;
  uint64_t **v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t ***v52;
  uint64_t ***v53;
  uint64_t ***v54;
  uint64_t **v55;
  uint64_t ***v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t ***v61;
  uint64_t ***v62;
  uint64_t ***v63;
  uint64_t **v64;
  int v65;
  ZinIrOpLayer **v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t **v70;
  ZinIrOpLayer ****v71;
  ZinIrOpLayer *v72;
  uint64_t v73;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  ZinIrOpLayer *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[2];
  int v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void *__p[2];
  _QWORD v92[2];
  ZinIrOpLayer *v93;
  ZinIrOpLayerGraph *v94;
  uint8_t v95;
  char v96[15];
  uint8_t v97;
  char v98[15];
  _OWORD v99[2];
  int v100;
  uint64_t ***v101;
  uint64_t ***v102;
  _QWORD v103[2];

  v94 = a2;
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 4
    || ZinIrOpLayer::IsTensorFmtQuantized(a2)
    || *((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14) != 8
    || !ZinActivationLayer::AllowsMergeWithScale(a2, 1.0))
  {
    return 0;
  }
  v93 = 0;
  v5 = (_QWORD *)((char *)this + 24);
  *(_QWORD *)&v99[0] = &v94;
  v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 3, (unint64_t **)v99);
  v7 = (ZinIrOpLayer ****)(v6 + 3);
  if (!v6)
    v7 = (ZinIrOpLayer ****)((char *)this + 104);
  v93 = ***v7;
  v8 = v94;
  v9 = operator new(8uLL);
  __p[0] = v9;
  *v9 = v8;
  __p[1] = v9 + 1;
  v92[0] = v9 + 1;
  if (*((_QWORD *)v8 + 15) - *((_QWORD *)v8 + 14) != 8)
  {
LABEL_124:
    v73 = 0;
    goto LABEL_125;
  }
  v10 = 0;
  v11 = 1.0;
  v12 = MEMORY[0x24BDACB70];
  do
  {
    v13 = v93;
    if (!v93)
      break;
    if (*(_DWORD *)(*((_QWORD *)v93 + 8) + 8) != 2)
      break;
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)v93 + 2) + 160));
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    if (!*((_QWORD *)v13 + 17)
      || !ZinIrKernel::HasNoBiasNoWeightButSingularScale(*((ZinIrKernel **)v13 + 17), *(unsigned __int8 *)(v15 + 1244)))
    {
      break;
    }
    v16 = v93;
    HasScale = ZinIrKernel::HasScale(*((ZinIrKernel **)v93 + 17));
    SingularVal = 1.0;
    if (HasScale)
      SingularVal = ZinIrVector::GetSingularVal(*(ZinIrVector **)(*((_QWORD *)v16 + 17) + 568));
    v11 = v11 * SingularVal;
    if (ZinActivationLayer::AllowsMergeWithScale(a2, v11))
    {
      v19 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0, 0);
      *(_DWORD *)(v19 + 88) = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0)+ 88);
      *(float *)&v20 = ZinActivationLayer::FuseIntoPostScale(a2, v11);
      v21 = (char *)__p[1];
      if (__p[1] >= (void *)v92[0])
      {
        v29 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
LABEL_131:
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v30 = (uint64_t)(v92[0] - (unint64_t)__p[0]) >> 2;
        if (v30 <= v29 + 1)
          v30 = v29 + 1;
        if (v92[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v92, v31);
        else
          v32 = 0;
        v39 = (ZinIrOpLayer **)&v32[8 * v29];
        *v39 = v93;
        v22 = v39 + 1;
        v41 = (char *)__p[0];
        v40 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            v42 = (ZinIrOpLayer *)*((_QWORD *)v40 - 1);
            v40 -= 8;
            *--v39 = v42;
          }
          while (v40 != v41);
          v40 = (char *)__p[0];
        }
        __p[0] = v39;
        __p[1] = v22;
        v92[0] = &v32[8 * v31];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)__p[1] = v93;
        v22 = v21 + 8;
      }
      v43 = 0;
      __p[1] = v22;
      v45 = (uint64_t **)v93;
      v44 = v94;
      v101 = 0;
      v102 = 0;
      v103[0] = 0;
      v46 = (uint64_t ***)*((_QWORD *)v94 + 14);
      while (1)
      {
        v47 = *v46;
        if (*v46 == v45)
          break;
        if ((unint64_t)v43 >= v103[0])
        {
          v48 = v43 - v101;
          if ((unint64_t)(v48 + 1) >> 61)
            goto LABEL_130;
          v49 = (uint64_t)(v103[0] - (_QWORD)v101) >> 2;
          if (v49 <= v48 + 1)
            v49 = v48 + 1;
          if (v103[0] - (_QWORD)v101 >= 0x7FFFFFFFFFFFFFF8uLL)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v49;
          if (v50)
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v103, v50);
          else
            v51 = 0;
          v52 = (uint64_t ***)&v51[8 * v48];
          *v52 = v47;
          v43 = v52 + 1;
          v54 = v101;
          v53 = v102;
          if (v102 != v101)
          {
            do
            {
              v55 = *--v53;
              *--v52 = v55;
            }
            while (v53 != v54);
            v53 = v101;
          }
          v101 = v52;
          v102 = v43;
          v103[0] = &v51[8 * v50];
          if (v53)
            operator delete(v53);
        }
        else
        {
          *v43++ = v47;
        }
        v102 = v43;
        v46 = (uint64_t ***)v47[14];
        if ((char *)v47[15] - (char *)v46 != 8)
          ZinAssertImpl("Unexpected number of outgoing layers", v20);
      }
      if ((unint64_t)v43 >= v103[0])
      {
        v57 = v43 - v101;
        if ((unint64_t)(v57 + 1) >> 61)
LABEL_130:
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v58 = (uint64_t)(v103[0] - (_QWORD)v101) >> 2;
        if (v58 <= v57 + 1)
          v58 = v57 + 1;
        if (v103[0] - (_QWORD)v101 >= 0x7FFFFFFFFFFFFFF8uLL)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v103, v59);
        else
          v60 = 0;
        v61 = (uint64_t ***)&v60[8 * v57];
        *v61 = v45;
        v56 = v61 + 1;
        v63 = v101;
        v62 = v102;
        if (v102 != v101)
        {
          do
          {
            v64 = *--v62;
            *--v61 = v64;
          }
          while (v62 != v63);
          v62 = v101;
        }
        v101 = v61;
        v102 = v56;
        v103[0] = &v60[8 * v59];
        if (v62)
          operator delete(v62);
      }
      else
      {
        *v43 = v45;
        v56 = v43 + 1;
      }
      v102 = v56;
      memset(v99, 0, sizeof(v99));
      v100 = 1065353216;
      v65 = ZinIrOpLayerGraph::MoveOutgoingEdges(this, v45, v44, v99);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v99);
      v5 = (_QWORD *)((char *)this + 24);
      if (v65)
      {
        v66 = (ZinIrOpLayer **)v102;
        if (v101 != v102)
        {
          do
          {
            if (!ZinIrOpLayerGraph::RemoveNode(this, *(v66 - 1), 0) && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
              ZinIrOpt::ActivationWithSingularScaleGOC(&v95, v96, v67);
            v66 = (ZinIrOpLayer **)(v102 - 1);
            v102 = (uint64_t ***)v66;
          }
          while (v101 != (uint64_t ***)v66);
          v69 = 0;
          goto LABEL_100;
        }
        v69 = 0;
        v66 = (ZinIrOpLayer **)v101;
        if (v101)
          goto LABEL_100;
      }
      else
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          MirOpt::MergeGOCsToConvs(&v97, v98, v68);
        v69 = 3;
        v66 = (ZinIrOpLayer **)v101;
        if (v101)
        {
LABEL_100:
          v102 = (uint64_t ***)v66;
          operator delete(v66);
        }
      }
      if (v69)
        goto LABEL_129;
      *(_QWORD *)&v99[0] = &v94;
      v70 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 3, (unint64_t **)v99);
      v71 = (ZinIrOpLayer ****)(v70 + 3);
      if (!v70)
        v71 = (ZinIrOpLayer ****)((char *)this + 104);
      v72 = ***v71;
      v93 = v72;
      v11 = 1.0;
      if (v72 && ZinIrOpLayer::IsTensorFmtQuantized(v72))
        goto LABEL_112;
      v10 = 1;
      continue;
    }
    v23 = (char *)__p[1];
    if (__p[1] >= (void *)v92[0])
    {
      v25 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        goto LABEL_131;
      v26 = (uint64_t)(v92[0] - (unint64_t)__p[0]) >> 2;
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      if (v92[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v92, v27);
      else
        v28 = 0;
      v33 = (ZinIrOpLayer **)&v28[8 * v25];
      *v33 = v93;
      v24 = v33 + 1;
      v35 = (char *)__p[0];
      v34 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          v36 = (ZinIrOpLayer *)*((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v33 = v36;
        }
        while (v34 != v35);
        v34 = (char *)__p[0];
      }
      __p[0] = v33;
      __p[1] = v24;
      v92[0] = &v28[8 * v27];
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)__p[1] = v93;
      v24 = v23 + 8;
    }
    __p[1] = v24;
    *(_QWORD *)&v99[0] = &v93;
    v37 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v5, (unint64_t **)v99);
    v38 = (ZinIrOpLayer ****)(v37 + 3);
    if (!v37)
      v38 = (ZinIrOpLayer ****)((char *)this + 104);
    v93 = ***v38;
    if (*((_QWORD *)v93 + 15) - *((_QWORD *)v93 + 14) != 8)
      goto LABEL_124;
  }
  while (*((_QWORD *)v94 + 15) - *((_QWORD *)v94 + 14) == 8);
  if ((v10 & 1) == 0)
    goto LABEL_124;
LABEL_112:
  v75 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, 0, 0);
  v76 = (std::__shared_weak_count *)v75[1];
  v89 = *v75;
  v90 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldxr(p_shared_owners);
    while (__stxr(v78 + 1, p_shared_owners));
  }
  v79 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t *, char *))(*(_QWORD *)a2 + 176))(a2, &v89, (char *)a2 + 24);
  v80 = v90;
  if (v90)
  {
    v81 = (unint64_t *)&v90->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  *(_QWORD *)&v99[0] = &unk_24C02BB18;
  *(_OWORD *)((char *)v99 + 8) = *(_OWORD *)__p;
  *((_QWORD *)&v99[1] + 1) = v92[0];
  __p[0] = 0;
  __p[1] = 0;
  v92[0] = 0;
  ZinIrOpLayerGraph::AddNode((uint64_t **)this, v79, (ZinIrOpLayer ***)v99);
  *(_QWORD *)&v99[0] = &unk_24C02BB18;
  if (*((_QWORD *)&v99[0] + 1))
  {
    *(_QWORD *)&v99[1] = *((_QWORD *)&v99[0] + 1);
    operator delete(*((void **)&v99[0] + 1));
  }
  ZinIrOpLayerGraph::MoveIncomingEdges(this, a2, v79);
  memset(v87, 0, sizeof(v87));
  v88 = 1065353216;
  v83 = ZinIrOpLayerGraph::MoveOutgoingEdges(this, (uint64_t **)a2, v79, v87);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v87);
  if ((v83 & 1) != 0)
  {
    ZinIrOpLayerGraph::RemoveNode(this, a2, 0);
    v73 = 0;
    goto LABEL_125;
  }
  v84 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v84)
    MirOpt::MergeGOCsToConvs(v84, v85, v86);
LABEL_129:
  v73 = 3;
LABEL_125:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v73;
}

void sub_20707554C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C004BF0;
  return result;
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C004BF0;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 0) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C004C48;
  return result;
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C004C48;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 2) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C004CF8;
  return result;
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C004CF8;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 64) + 8) == 4
    && *(_DWORD *)(v2 + 192) == 1
    && *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0, 0) + 88) == 3;
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C004CA0;
  return result;
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C004CA0;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BOOL4 v4;
  signed __int8 v6;
  float v7;
  signed __int8 v8;
  float v9;

  v2 = *(_QWORD **)(a2 + 8);
  if (*(_DWORD *)(v2[8] + 8) == 2
    && *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v2 + 32))(v2, 0, 0) + 88) == 3
    && ZinGOCLayer::IsSingularScaleBias(*(ZinGOCLayer **)(a2 + 8)))
  {
    v9 = 0.0;
    v8 = 0;
    ZinGOCLayer::GetSingularScale(*(ZinGOCLayer **)(a2 + 8), &v9, &v8);
    v7 = 0.0;
    v6 = 0;
    ZinGOCLayer::GetSingularBias(*(ZinGOCLayer **)(a2 + 8), &v7, &v6);
    v4 = v9 > 0.0;
    if (v7 != 0.0)
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  return v4 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C004D50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C004D50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  ZinIrOpLayerGraph *v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrOpLayer *SingleMatch;
  uint64_t v10;
  ZinIrOpLayer *v11;
  void *__p[2];
  char v14;

  v3 = *(uint64_t ***)(a1 + 8);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return 0;
  v6 = *a2;
  v7 = *a3;
  while (1)
  {
    if ((*(unsigned int (**)(uint64_t, ZinIrOpLayerGraph *, uint64_t))(*(_QWORD *)*v4 + 8))(*v4, v6, v7))
    {
      v8 = *v4;
      std::string::basic_string[abi:ne180100]<0>(__p, "relu");
      SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v8, (unsigned __int8 *)__p);
      if (v14 < 0)
        operator delete(__p[0]);
      v10 = *v4;
      std::string::basic_string[abi:ne180100]<0>(__p, "positive_goc");
      v11 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v10, (unsigned __int8 *)__p);
      if (v14 < 0)
        operator delete(__p[0]);
      if ((ZinIrOpLayerGraph::SwapNodes(v6, SingleMatch, v11) & 1) == 0)
        break;
    }
    v4 += 2;
    if (v4 == v5)
      return 0;
  }
  return 3;
}

void sub_207075B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::ZinIrOptSwapReluSingularScalePositive(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinIrOpt::ActivationWithSingularScaleGOC(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in removing node.\n", a1);
}

uint64_t MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(std::unique_ptr<CpTransposeGraph> &,std::unordered_set<unsigned long long> const&,std::string const&,CpTransposeUtils::CpTransposeOptimizationResult &)::dlhandle)
  {
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(std::unique_ptr<CpTransposeGraph> &,std::unordered_set<unsigned long long> const&,std::string const&,CpTransposeUtils::CpTransposeOptimizationResult &)::dlfunc;
    return v8(a1, a2, a3, a4);
  }
  v10 = dlopen("/System/Library/PrivateFrameworks/ANECompiler.framework/libORTools.dylib", 10);
  MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(std::unique_ptr<CpTransposeGraph> &,std::unordered_set<unsigned long long> const&,std::string const&,CpTransposeUtils::CpTransposeOptimizationResult &)::dlhandle = (uint64_t)v10;
  if (v10)
  {
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))dlsym(v10, "ORToolsCpBasedTransposerUtil_CallCpTransposer");
    MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(std::unique_ptr<CpTransposeGraph> &,std::unordered_set<unsigned long long> const&,std::string const&,CpTransposeUtils::CpTransposeOptimizationResult &)::dlfunc = v8;
    if (v8)
      return v8(a1, a2, a3, a4);
    v11 = dlerror();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MirOpt::CpBasedCWTransposeUtil::TransposerWrapper((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    v27 = dlerror();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MirOpt::CpBasedCWTransposeUtil::TransposerWrapper((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34);
    v35 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v35)
      MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(v35, v36, v37, v38, v39, v40, v41, v42);
  }
  return 0;
}

uint64_t ZinCpBasedAllocatorUtil::AllocatorWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (ZinCpBasedAllocatorUtil::AllocatorWrapper(CpAllocGraph *,std::unordered_map<unsigned long long,CpAllocUtils::AllocationType> const&,unsigned long,std::string const&,std::unordered_map<unsigned long long,CpAllocUtils::AllocationType>&)::dlhandle)
  {
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))ZinCpBasedAllocatorUtil::AllocatorWrapper(CpAllocGraph *,std::unordered_map<unsigned long long,CpAllocUtils::AllocationType> const&,unsigned long,std::string const&,std::unordered_map<unsigned long long,CpAllocUtils::AllocationType>&)::dlfunc;
    return v10(a1, a2, a3, a4, a5);
  }
  v12 = dlopen("/System/Library/PrivateFrameworks/ANECompiler.framework/libORTools.dylib", 10);
  ZinCpBasedAllocatorUtil::AllocatorWrapper(CpAllocGraph *,std::unordered_map<unsigned long long,CpAllocUtils::AllocationType> const&,unsigned long,std::string const&,std::unordered_map<unsigned long long,CpAllocUtils::AllocationType>&)::dlhandle = (uint64_t)v12;
  if (v12)
  {
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dlsym(v12, "ORToolsCpBasedAllocatorUtil_CallCpAllocator");
    ZinCpBasedAllocatorUtil::AllocatorWrapper(CpAllocGraph *,std::unordered_map<unsigned long long,CpAllocUtils::AllocationType> const&,unsigned long,std::string const&,std::unordered_map<unsigned long long,CpAllocUtils::AllocationType>&)::dlfunc = v10;
    if (v10)
      return v10(a1, a2, a3, a4, a5);
    v13 = dlerror();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MirOpt::CpBasedCWTransposeUtil::TransposerWrapper((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20);
    v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v21)
      MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    v29 = dlerror();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MirOpt::CpBasedCWTransposeUtil::TransposerWrapper((uint64_t)v29, v30, v31, v32, v33, v34, v35, v36);
    v37 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v37)
      MirOpt::CpBasedCWTransposeUtil::TransposerWrapper(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  return 0;
}

uint64_t mlir::MemoryMapperInterface::canMapOperands(mlir::MemoryMapperInterface *this)
{
  return (**((uint64_t (***)(_QWORD, _QWORD))this + 1))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::MemoryMapperInterface::getOperandRange(mlir::MemoryMapperInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 8))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

void mlir::detail::AllocRange::getRangeForValue(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  uint64_t v12;
  uint64_t InterfaceFor;
  void *v14;
  uint64_t OperandRange;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  mlir::Block *ParentRegion;
  mlir::Block *v20;
  mlir::Block *v21;
  _QWORD *v22;
  ZinIrHalH13g *v23;
  ZinIrHalH13g *v24;
  ZinIrHalH13g *v25;
  mlir::ForwardIterator *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *Shape;
  uint64_t v45;
  uint64_t NumElements;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD v59[5];

  v59[4] = *MEMORY[0x24BDAC8D0];
  v50 = a1;
  v5 = (~a1[2] & 7) == 0 && mlir::detail::AllocRange::allocBlockArgs == 0;
  if (v5
    || (v57 = a1, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v57)) != 0)
    && (v8 = DefiningOp,
        v9 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 48) + 32))(*(_QWORD *)(v8 + 48), v9)))
  {
    *(_QWORD *)a3 = a1;
LABEL_8:
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    *(_OWORD *)(a3 + 8) = v10;
    *(_OWORD *)(a3 + 24) = v10;
    return;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v11 = (void **)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF8);
  else
    v11 = 0;
  if (!v11)
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_8;
  }
  if ((unint64_t)mlir::detail::AllocRange::minimumAlignment <= 1)
    v12 = 1;
  else
    v12 = mlir::detail::AllocRange::minimumAlignment;
  v48 = 0;
  v49 = v12;
  if (mlir::matchThrough<mlir::MinimumAlignmentInterface,mlir::MemoryMapperInterface>((uint64_t)a1, &v48))
  {
    InterfaceFor = mlir::Value::getDefiningOp((mlir::Value *)&v48);
    v14 = (void *)InterfaceFor;
    if (InterfaceFor)
    {
      InterfaceFor = mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
      if (InterfaceFor)
        InterfaceFor = mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v14);
      else
        v14 = 0;
    }
    v57 = v14;
    v58 = InterfaceFor;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v57);
    if (v12 >= 0)
      v16 = v12;
    else
      v16 = -v12;
    LODWORD(v56) = 64;
    v55 = (void **)v16;
    if (OperandRange >= 0)
      v17 = OperandRange;
    else
      v17 = -OperandRange;
    v52 = 64;
    v51 = v17;
    llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v55, (uint64_t)&v51, (uint64_t)&v57);
    if (v58 > 0x40)
    {
      v18 = *(_QWORD *)v57;
      MEMORY[0x20BD002D4]();
    }
    else
    {
      v18 = (unint64_t)v57;
    }
    if (v52 >= 0x41 && v51)
      MEMORY[0x20BD002D4](v51, 0x1000C8000313F17);
    if (v56 >= 0x41 && v55)
      MEMORY[0x20BD002D4](v55, 0x1000C8000313F17);
    v12 = v16 * v17 / v18;
    v49 = v12;
  }
  ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v50);
  v57 = &v50;
  v58 = (uint64_t)&v49;
  v20 = (mlir::Block *)*((_QWORD *)ParentRegion + 1);
  if (v20 != ParentRegion)
  {
    v21 = ParentRegion;
    do
    {
      v22 = (_QWORD *)((char *)v20 - 8);
      if (!v20)
        v22 = 0;
      v23 = (ZinIrHalH13g *)(v22 + 4);
      v24 = (ZinIrHalH13g *)v22[5];
      if (v24 != (ZinIrHalH13g *)(v22 + 4))
      {
        do
        {
          v25 = (ZinIrHalH13g *)*((_QWORD *)v24 + 1);
          ZinIrHalH13g::~ZinIrHalH13g(v24);
          v55 = &v57;
          mlir::detail::walk<mlir::ForwardIterator>(v26, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorERZNS7_10AllocRange16getRangeForValueENS1_5ValueExE3__0NS1_25MinimumAlignmentInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v55, 1);
          v24 = v25;
        }
        while (v25 != v23);
      }
      v20 = (mlir::Block *)*((_QWORD *)v20 + 1);
    }
    while (v20 != v21);
    v12 = v49;
  }
  if (a2 == -1)
    v27 = 0;
  else
    v27 = a2;
  v28 = v27;
  if (v12)
    v28 = (v27 + v12 - 1) / v12 * v12;
  v29 = *v11;
  v30 = mlir::TypeID::get<mlir::ShapedType>();
  v31 = *((unsigned int *)v29 + 4);
  if (!(_DWORD)v31)
    goto LABEL_60;
  v32 = (_QWORD *)v29[1];
  v33 = &v32[2 * v31];
  do
  {
    v34 = v31 >> 1;
    v35 = &v32[2 * (v31 >> 1)];
    v37 = *v35;
    v36 = v35 + 2;
    v31 += ~(v31 >> 1);
    if (v37 < v30)
      v32 = v36;
    else
      v31 = v34;
  }
  while (v31);
  if (v32 != v33 && *v32 == v30)
    v38 = v32[1];
  else
LABEL_60:
    v38 = 0;
  v55 = v11;
  v56 = v38;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v55);
  if (v39)
  {
    if (*((_UNKNOWN **)*v55 + 17) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v40 = (uint64_t)v55;
    else
      v40 = 0;
    v51 = v40;
    if (v40)
    {
      v57 = v59;
      v58 = 0x400000000;
      v54 = 0;
      mlir::getStridesAndOffset(v40, (uint64_t)&v57, &v54);
      v41 = *(_QWORD *)v57;
      v42 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51) * v41;
      v53 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
      v43 = v42 * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v53) >> 3);
      if (v57 != v59)
        free(v57);
    }
    else
    {
      Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v55);
      NumElements = mlir::ShapedType::getNumElements(Shape, v45);
      v57 = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
      v43 = NumElements * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v57) >> 3);
    }
  }
  else
  {
    v57 = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
    v43 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v57) >> 3;
  }
  v47 = v49;
  *(_QWORD *)a3 = v50;
  *(_QWORD *)(a3 + 8) = v27;
  *(_QWORD *)(a3 + 16) = v28;
  *(_QWORD *)(a3 + 24) = v28 + v43 - 1;
  *(_QWORD *)(a3 + 32) = v47;
}

uint64_t mlir::matchThrough<mlir::MinimumAlignmentInterface,mlir::MemoryMapperInterface>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (result)
  {
    v4 = result;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
    if (DefiningOp
      && (v6 = DefiningOp,
          mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp)))
    {
      mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(v6);
      if (a2)
        *a2 = v12;
      return 1;
    }
    else
    {
      result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (result)
      {
        result = mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(result);
        if (result)
        {
          if ((*(_BYTE *)(v4 + 46) & 0x80) != 0 && (v7 = *(unsigned int *)(v4 + 68), (_DWORD)v7))
          {
            v8 = v7 - 1;
            v9 = (uint64_t *)(*(_QWORD *)(v4 + 72) + 24);
            do
            {
              v10 = v8;
              v11 = *v9;
              v9 += 4;
              result = mlir::matchThrough<mlir::MinimumAlignmentInterface,mlir::MemoryMapperInterface>(v11, a2);
              if ((result & 1) != 0)
                break;
              v8 = v10 - 1;
            }
            while (v10);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void mlir::dataflow::OffsetLatticeValue::join(unint64_t **a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  llvm *v27;
  llvm *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  size_t v45;
  void *v46;
  uint64_t v47;
  llvm *v48;
  uint64_t v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *((unsigned int *)a1 + 2);
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6 == (_DWORD)v7)
  {
    if (!(_DWORD)v6)
    {
      *a3 = (unint64_t *)(a3 + 2);
      a3[1] = (unint64_t *)0xA00000000;
      return;
    }
    v8 = 0;
    v9 = (char *)*a1;
    v10 = *(unint64_t **)a2;
    while (*(_QWORD *)&v9[v8 * 8] == v10[v8])
    {
      v8 += 5;
      if (5 * v6 == v8)
      {
        v11 = (unint64_t *)(a3 + 2);
        *a3 = (unint64_t *)(a3 + 2);
        a3[1] = (unint64_t *)0xA00000000;
        if (a3 == a1)
          return;
        if (v6 < 0xB)
        {
          v12 = v6;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v6, 40);
          v12 = *((unsigned int *)a1 + 2);
          if (!(_DWORD)v12)
            goto LABEL_90;
          v11 = *a3;
          v9 = (char *)*a1;
        }
        v45 = 40 * v12;
        goto LABEL_89;
      }
    }
  }
  else
  {
    v10 = *(unint64_t **)a2;
  }
  if (!(_DWORD)v7)
  {
LABEL_21:
    if (!(_DWORD)v6)
    {
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = &v53;
      v52 = 0;
      goto LABEL_41;
    }
    v17 = *a1;
    v18 = 40 * v6;
    v19 = *a1 + 3;
    while (1)
    {
      v20 = *(v19 - 2) == -1 || *(v19 - 1) == -1;
      if (v20 || *v19 == -1)
        break;
      v19 += 5;
      v18 -= 40;
      if (!v18)
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = &v53;
        v52 = 0;
        v22 = 40 * v6;
        do
        {
          llvm::SetVector<mlir::detail::AllocRange,llvm::SmallVector<mlir::detail::AllocRange,0u>,llvm::DenseSet<mlir::detail::AllocRange,llvm::DenseMapInfo<mlir::detail::AllocRange,void>>,0u>::insert((uint64_t)&v48, v17);
          v17 += 5;
          v22 -= 40;
        }
        while (v22);
        v10 = *(unint64_t **)a2;
        v7 = *(unsigned int *)(a2 + 8);
LABEL_41:
        if ((_DWORD)v7)
        {
          v24 = 40 * v7;
          do
          {
            llvm::SetVector<mlir::detail::AllocRange,llvm::SmallVector<mlir::detail::AllocRange,0u>,llvm::DenseSet<mlir::detail::AllocRange,llvm::DenseMapInfo<mlir::detail::AllocRange,void>>,0u>::insert((uint64_t)&v48, v10);
            v10 += 5;
            v24 -= 40;
          }
          while (v24);
        }
        if (v49)
        {
          if (v50 <= 4 * (int)v49 || v50 < 0x41)
          {
            if (v50)
            {
              v27 = v48;
              v28 = (llvm *)((char *)v48 + 40 * v50);
              *(_QWORD *)&v29 = -1;
              *((_QWORD *)&v29 + 1) = -1;
              do
              {
                *(_QWORD *)v27 = -4096;
                *(_OWORD *)((char *)v27 + 8) = v29;
                *(_OWORD *)((char *)v27 + 24) = v29;
                v27 = (llvm *)((char *)v27 + 40);
              }
              while (v27 != v28);
            }
            v49 = 0;
          }
          else
          {
            llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::shrink_and_clear((uint64_t)&v48);
          }
        }
        v46 = &v48;
        v47 = 0;
        if ((_DWORD)v52)
        {
          llvm::SmallVectorImpl<mlir::detail::AllocRange>::operator=((uint64_t)&v46, (uint64_t)&v51);
          v30 = (char *)v46;
        }
        else
        {
          v30 = (char *)&v48;
        }
        v31 = 0;
        for (i = 1; ; ++i)
        {
          if (*(_QWORD *)&v30[v31 + 8] != -1 && *(_QWORD *)&v30[v31 + 16] != -1)
          {
            v33 = (uint64_t)&v30[v31];
            if (*(_QWORD *)&v30[v31 + 24] != -1)
              break;
          }
          v31 += 40;
        }
        v34 = v47;
        if (v47 != i)
        {
          v36 = 0;
          do
          {
            v37 = &v30[v36 + v31];
            if (*((_QWORD *)v37 + 6) != -1)
            {
              v38 = *((_QWORD *)v37 + 7);
              if (v38 != -1)
              {
                v39 = &v30[v36 + v31];
                v40 = *((_QWORD *)v39 + 8);
                if (v40 != -1)
                {
                  v41 = *(_QWORD *)(v33 + 24);
                  v42 = v41 + 1;
                  *((_QWORD *)v37 + 6) = v41 + 1;
                  v43 = *((_QWORD *)v39 + 9);
                  if (v43)
                    v42 = (v43 + v41) / v43 * v43;
                  v33 = (uint64_t)&v30[v31 + 40 + v36];
                  *((_QWORD *)v37 + 7) = v42;
                  *((_QWORD *)v39 + 8) = v40 - v38 + v42;
                }
              }
            }
            v36 += 40;
          }
          while (40 * v34 - v31 - 40 != v36);
        }
        *a3 = (unint64_t *)(a3 + 2);
        a3[1] = (unint64_t *)0xA00000000;
        if (v34 >= 0xB)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v34, 40);
          v35 = *((_DWORD *)a3 + 2);
          goto LABEL_78;
        }
        if ((_DWORD)v34)
        {
          v35 = 0;
LABEL_78:
          memcpy(&(*a3)[5 * v35], v30, 40 * v34);
          v44 = *((_DWORD *)a3 + 2);
        }
        else
        {
          v44 = 0;
        }
        *((_DWORD *)a3 + 2) = v44 + v34;
        if (v46 != &v48)
          free(v46);
        if (v51 != &v53)
          free(v51);
        llvm::deallocate_buffer(v48, (void *)(40 * v50));
      }
    }
    v25 = (unint64_t *)(a3 + 2);
    *a3 = (unint64_t *)(a3 + 2);
    a3[1] = (unint64_t *)0xA00000000;
    if (a3 == (unint64_t **)a2 || !(_DWORD)v7)
      return;
    if (v7 < 0xB)
    {
      v26 = v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v25, v7, 40);
      v26 = *(unsigned int *)(a2 + 8);
      if (!(_DWORD)v26)
      {
LABEL_93:
        *((_DWORD *)a3 + 2) = v7;
        return;
      }
      v25 = *a3;
      v10 = *(unint64_t **)a2;
    }
    memcpy(v25, v10, 40 * v26);
    goto LABEL_93;
  }
  v13 = 40 * v7;
  v14 = v10 + 3;
  while (1)
  {
    v15 = *(v14 - 2) == -1 || *(v14 - 1) == -1;
    if (v15 || *v14 == -1)
      break;
    v14 += 5;
    v13 -= 40;
    if (!v13)
      goto LABEL_21;
  }
  v11 = (unint64_t *)(a3 + 2);
  *a3 = (unint64_t *)(a3 + 2);
  a3[1] = (unint64_t *)0xA00000000;
  if (a3 != a1 && (_DWORD)v6)
  {
    if (v6 < 0xB)
    {
      v23 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v6, 40);
      v23 = *((_DWORD *)a1 + 2);
      if (!v23)
      {
LABEL_90:
        *((_DWORD *)a3 + 2) = v6;
        return;
      }
      v11 = *a3;
    }
    v9 = (char *)*a1;
    v45 = 40 * v23;
LABEL_89:
    memcpy(v11, v9, v45);
    goto LABEL_90;
  }
}

llvm::raw_ostream *mlir::dataflow::OffsetLatticeValue::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = (uint64_t)this;
  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v4)
  {
    this = llvm::raw_ostream::write(a2, "{", 1uLL);
  }
  else
  {
    *v4 = 123;
    ++*((_QWORD *)a2 + 4);
  }
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == 1)
  {
    this = mlir::detail::operator<<(a2, *(unint64_t **)v3);
  }
  else if ((_DWORD)v5)
  {
    v6 = *(unint64_t **)v3;
    v7 = 40 * v5;
    do
    {
      v9 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 2)
      {
        *(_BYTE *)(v9 + 2) = 32;
        *(_WORD *)v9 = 11552;
        *((_QWORD *)a2 + 4) += 3;
        v8 = a2;
      }
      else
      {
        v8 = llvm::raw_ostream::write(a2, " - ", 3uLL);
      }
      this = mlir::detail::operator<<(v8, v6);
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  v10 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v10)
    return llvm::raw_ostream::write(a2, "}", 1uLL);
  *v10 = 125;
  ++*((_QWORD *)a2 + 4);
  return this;
}

llvm::raw_ostream *mlir::detail::operator<<(llvm::raw_ostream *this, unint64_t *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::raw_ostream *v10;
  void *v11;
  _DWORD *v12;
  llvm::raw_ostream *v13;
  unint64_t v15;

  v2 = this;
  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  if (*a2)
  {
    if (v4 == v3)
    {
      this = llvm::raw_ostream::write(this, "[", 1uLL);
    }
    else
    {
      *(_BYTE *)v3 = 91;
      ++*((_QWORD *)this + 4);
    }
    v6 = llvm::raw_ostream::operator<<(this, a2[1]);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if (*((_BYTE **)v6 + 3) == v7)
    {
      v6 = llvm::raw_ostream::write(v6, "/", 1uLL);
    }
    else
    {
      *v7 = 47;
      ++*((_QWORD *)v6 + 4);
    }
    v8 = llvm::raw_ostream::operator<<(v6, a2[2]);
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 8236;
      *((_QWORD *)v8 + 4) += 2;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
    }
    v10 = llvm::raw_ostream::operator<<(v8, a2[3]);
    v11 = (void *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 0xDuLL)
    {
      qmemcpy(v11, "] provenance: ", 14);
      *((_QWORD *)v10 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v10, "] provenance: ", 0xEuLL);
    }
    if ((~*(_DWORD *)(*a2 + 8) & 7) != 0)
    {
      v15 = *a2;
      mlir::Value::print((mlir::Value *)&v15, v2);
    }
    else
    {
      v12 = (_DWORD *)*((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 3) - (_QWORD)v12 > 3uLL)
      {
        *v12 = 1735549221;
        *((_QWORD *)v2 + 4) += 4;
        v13 = v2;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v2, "%arg", 4uLL);
      }
      llvm::raw_ostream::operator<<(v13, *(unsigned int *)(*a2 + 24));
    }
  }
  else if ((unint64_t)(v4 - v3) > 0xA)
  {
    *(_DWORD *)(v3 + 7) = 1046834799;
    *(_QWORD *)v3 = *(_QWORD *)"<tombstone>";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, "<tombstone>", 0xBuLL);
  }
  return v2;
}

uint64_t mlir::dataflow::TensorAllocAnalysis::TensorAllocAnalysis(uint64_t a1, mlir::DataFlowSolver *a2, mlir::StringAttr *a3, const void *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v35;
  uint64_t v36;
  __int16 v37;

  v18 = mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::AbstractSparseForwardDataFlowAnalysis((mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *)a1, a2);
  v19 = 0;
  *(_QWORD *)v18 = off_24C052AD0;
  v20 = (char *)v18 + 80;
  *((_QWORD *)v18 + 8) = (char *)v18 + 80;
  v21 = (uint64_t)v18 + 64;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0x300000000;
  if ((unint64_t)(8 * a5) >= 0x19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v21, v20, (8 * a5) >> 3, 8);
    v19 = *(_DWORD *)(a1 + 72);
  }
  if (a5)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 64) + 8 * v19), a4, 8 * a5);
    v19 = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(a1 + 104) = a1 + 120;
  v22 = (uint64_t **)(a1 + 104);
  *(_DWORD *)(a1 + 72) = v19 + a5;
  *(_QWORD *)(a1 + 112) = 0x300000000;
  v37 = 261;
  v35 = a9;
  v36 = a10;
  *(_QWORD *)(a1 + 144) = mlir::StringAttr::get(a3, (mlir::MLIRContext *)&v35);
  *(_QWORD *)(a1 + 152) = a11;
  *(_BYTE *)(a1 + 160) = a12;
  *(_BYTE *)(a1 + 161) = a13;
  v23 = *(unsigned int *)(a1 + 72);
  v24 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v23 != (_DWORD)v24)
  {
    if (v23 >= v24)
    {
      v25 = *(unsigned int *)(a1 + 112);
      v26 = *(_DWORD *)(a1 + 112);
      if (*(_DWORD *)(a1 + 116) < v23)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, (void *)(a1 + 120), *(unsigned int *)(a1 + 72), 8);
        v25 = *(unsigned int *)(a1 + 112);
        v26 = *(_DWORD *)(a1 + 112);
      }
      bzero(&(*v22)[v25], 8 * (v23 - v24));
      LODWORD(v23) = v26 + v23 - v24;
    }
    *(_DWORD *)(a1 + 112) = v23;
  }
  if (a7)
  {
    v27 = *v22;
    v28 = 24 * a7;
    do
    {
      v29 = *((char *)a6 + 23);
      v30 = v29 < 0;
      v31 = (uint64_t *)*a6;
      if (v29 >= 0)
        v31 = a6;
      v32 = *((unsigned __int8 *)a6 + 23);
      if (v30)
        v32 = a6[1];
      v37 = 261;
      v35 = v31;
      v36 = v32;
      *v27++ = mlir::StringAttr::get(a3, (mlir::MLIRContext *)&v35);
      a6 += 3;
      v28 -= 24;
    }
    while (v28);
  }
  mlir::detail::AllocRange::minimumAlignment = *(_QWORD *)(a1 + 152);
  mlir::detail::AllocRange::allocBlockArgs = a13;
  return a1;
}

{
  return mlir::dataflow::TensorAllocAnalysis::TensorAllocAnalysis(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void mlir::dataflow::TensorAllocAnalysis::visitOperation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t OperandRange;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _BOOL4 isDeadAfter;
  BOOL v32;
  _DWORD **v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *NextResultAtOffset;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t InterfaceFor;
  void *v52[2];
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[52];

  v58[50] = *MEMORY[0x24BDAC8D0];
  v12 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v12))
    mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates((uint64_t)a1, a5, a6);
  if (!a4)
    mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates((uint64_t)a1, a5, a6);
  v56 = v58;
  v57 = 0xA00000000;
  v48 = a5;
  v49 = a6;
  if (mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(a2))
  {
    v50 = a2;
    InterfaceFor = mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(a2);
    if (a2)
    {
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50);
      v15 = OperandRange;
      v16 = (_QWORD *)(a3 + 8 * OperandRange);
      if (v14 == OperandRange)
      {
        v17 = 0;
      }
      else
      {
        v18 = a3 + 8 * OperandRange;
        while (2)
        {
          v19 = *(unsigned int *)(*(_QWORD *)v18 + 176);
          v17 = *(_DWORD *)(*(_QWORD *)v18 + 176) == 0;
          if ((_DWORD)v19)
          {
            v20 = 40 * v19;
            v21 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 168) + 24);
            do
            {
              if (*(v21 - 2) == -1 || *(v21 - 1) == -1 || *v21 == -1)
              {
                v17 = 1;
                goto LABEL_25;
              }
              v21 += 5;
              v20 -= 40;
            }
            while (v20);
            v18 += 8;
            if (v18 != a3 + 8 * v14)
              continue;
          }
          break;
        }
      }
LABEL_25:
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
        v24 = *(_QWORD *)(a2 + 72);
      else
        v24 = 0;
      v25 = v14 - OperandRange;
      v46 = v14;
      if (v14 == OperandRange)
      {
        v47 = 0;
        v26 = 0;
      }
      else
      {
        v27 = ~OperandRange + v14;
        v28 = (void **)(v24 + 32 * OperandRange + 24);
        do
        {
          v29 = *v28;
          v28 += 4;
          isDeadAfter = mlir::Liveness::isDeadAfter(a1[2], v29, v50);
          v32 = v27-- != 0;
        }
        while (isDeadAfter && v32);
        v26 = 0;
        v47 = !isDeadAfter;
        v33 = (_DWORD **)(v24 + 32 * v15 + 24);
        do
        {
          v34 = *v33;
          v33 += 4;
          mlir::detail::AllocRange::getRangeForValue(v34, v26 + 1, (uint64_t)v52);
          if (v54 != -1)
            v26 = v54;
          --v25;
        }
        while (v25);
      }
      v35 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v35)
        v36 = a2 - 16;
      else
        v36 = 0;
      if ((_DWORD)v35)
      {
        v37 = 0;
        v38 = 0;
        while (1)
        {
          NextResultAtOffset = (_DWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v36, v38);
          mlir::detail::AllocRange::getRangeForValue(NextResultAtOffset, v37, (uint64_t)v52);
          if (v55)
            v37 = (v37 + v55 - 1) / v55 * v55;
          if ((uint64_t)(v54 - v53 + v37) > v26)
            break;
          v37 = v54 + 1;
          if (v35 == ++v38)
            goto LABEL_48;
        }
      }
      else
      {
LABEL_48:
        if (((v17 | v47) & 1) == 0
          && mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v50)
          && v46 != v15)
        {
          v40 = 8 * v46 - 8 * v15;
          do
          {
            mlir::dataflow::OffsetLatticeValue::join((unint64_t **)&v56, *v16 + 168, (unint64_t **)v52);
            llvm::SmallVectorImpl<mlir::detail::AllocRange>::operator=((uint64_t)&v56, (uint64_t)v52);
            if (v52[0] != &v53)
              free(v52[0]);
            ++v16;
            v40 -= 8;
          }
          while (v40);
        }
      }
    }
  }
  else
  {
    v50 = 0;
    InterfaceFor = 0;
  }
  if (!(_DWORD)v57)
    mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates((uint64_t)a1, v48, v49);
  v41 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v41)
    v42 = a2 - 16;
  else
    v42 = 0;
  if ((_DWORD)v41)
  {
    for (i = 0; i != v41; ++i)
    {
      v44 = mlir::detail::OpResultImpl::getNextResultAtOffset(v42, i);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 48))(a1, v44);
      mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::join(v45, (uint64_t)&v56);
    }
  }
  if (v56 != v58)
    free(v56);
}

uint64_t mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::join(uint64_t a1, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *__src;
  unsigned int v12;
  _QWORD v13[51];

  v13[50] = *MEMORY[0x24BDAC8D0];
  v3 = (void **)(a1 + 168);
  mlir::dataflow::OffsetLatticeValue::join((unint64_t **)(a1 + 168), a2, (unint64_t **)&__src);
  v4 = v12;
  v5 = *(unsigned int *)(a1 + 176);
  if (v12 == (_DWORD)v5)
  {
    if (!v12)
    {
LABEL_6:
      v9 = 0;
      goto LABEL_20;
    }
    v6 = __src;
    v7 = *v3;
    v8 = 40 * v12;
    while (*v6 == *v7)
    {
      v6 += 5;
      v7 += 5;
      v8 -= 40;
      if (!v8)
        goto LABEL_6;
    }
  }
  if (v3 != &__src)
  {
    if (v5 >= v12)
    {
      if (v12)
        memmove(*v3, __src, 40 * v12);
      goto LABEL_18;
    }
    if (*(_DWORD *)(a1 + 180) >= v12)
    {
      if ((_DWORD)v5)
      {
        memmove(*v3, __src, 40 * v5);
        goto LABEL_16;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 176) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3, (void *)(a1 + 184), v4, 40);
    }
    v5 = 0;
LABEL_16:
    if (v5 != v12)
      memcpy((char *)*v3 + 40 * v5, (char *)__src + 40 * v5, 40 * v12 - 40 * v5);
LABEL_18:
    *(_DWORD *)(a1 + 176) = v4;
  }
  v9 = 1;
LABEL_20:
  if (__src != v13)
    free(__src);
  return v9;
}

{
  return mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::join(a1, a2 + 168);
}

void mlir::dataflow::TensorAllocAnalysis::buildAllocInfoMap(mlir::dataflow::TensorAllocAnalysis *this, mlir::Operation *a2)
{
  uint64_t v3;
  ZinIrHalH13g **v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t InherentAttr;
  char v19;
  uint64_t v20;
  char *Value;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  char *v32;
  mlir::dataflow::TensorAllocAnalysis *v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ZinIrHalH13g *v52;
  mlir::Operation *v53;
  __n128 v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t **v60;
  unsigned int v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  unint64_t v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t Loc;
  const char *v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t *v91;
  int64x2_t v92;
  int64x2_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  BOOL v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  BOOL v106;
  int v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  BOOL v112;
  char *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  __int128 v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  char *v131;
  BOOL v132;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  BOOL v149;
  __n128 *v150;
  char *v151;
  __n128 *v152;
  __n128 v153;
  int64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  void *v159;
  BOOL v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t DefiningOp;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _DWORD *NextResultAtOffset;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void **p_b;
  unint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  int v191;
  char *v192;
  uint64_t *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  char *v199;
  uint64_t v200;
  unsigned int v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  BOOL v206;
  mlir::Operation *v208;
  _QWORD *v209;
  __int128 v211;
  __int128 v212;
  mlir::Operation *v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  void *v228;
  ZinIrHalH13g *v229;
  uint64_t **v230;
  ZinIrHalH13g **v231;
  mlir::detail::OpResultImpl *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v238;
  uint64_t v239;
  mlir::Operation *v240;
  char *v241;
  uint64_t v242;
  char *v243;
  mlir::detail::AsmStateImpl *v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  void *v251;
  void *v252;
  void *v253;
  uint64_t v254;
  _QWORD v255[375];
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  _BYTE v259[24];
  void *v260;
  uint64_t v261;
  _BYTE v262[32];
  __int128 v263;
  __int128 v264;
  unint64_t *v265;
  _QWORD *v266;
  unint64_t v267;
  void *__b;
  unint64_t *v269;
  _BYTE v270[32];
  void *v271;
  __int128 v272;
  unint64_t v273;
  unsigned int v274;
  unsigned int v275;
  _QWORD v276[24];

  v276[21] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)((((unint64_t)a2
                   + 16 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)a2 + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)a2 + 10)
                 + 8);
  if (v3)
    v4 = (ZinIrHalH13g **)(v3 - 8);
  else
    v4 = 0;
  v230 = (uint64_t **)((char *)this + 64);
  if (*((_DWORD *)this + 18))
  {
    v5 = 0;
    v6 = (_QWORD *)*((_QWORD *)this + 8);
    v7 = (char *)this + 104;
    v243 = (char *)a2 + 56;
    do
    {
      if (*v6 == -3)
      {
        mlir::Block::getTerminator(v4);
        if ((*(_BYTE *)(v13 + 46) & 0x80) != 0 && *(_DWORD *)(v13 + 68))
        {
          v14 = *((_QWORD *)this + 13);
          v15 = v14 + 8 * v5;
          v16 = *((unsigned int *)this + 28);
          v17 = v14 + 8 * v16;
          if (v17 != v15 + 8)
          {
            memmove((void *)v15, (const void *)(v15 + 8), v17 - (v15 + 8));
            LODWORD(v16) = *((_DWORD *)this + 28);
            v14 = *((_QWORD *)this + 13);
          }
          *((_DWORD *)this + 28) = v16 - 1;
          if (*((_BYTE *)a2 + 47)
            && (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"output_names", 12), v19))
          {
            if (InherentAttr)
            {
LABEL_22:
              if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
                v20 = InherentAttr;
              else
                v20 = 0;
              goto LABEL_27;
            }
          }
          else
          {
            InherentAttr = mlir::DictionaryAttr::get((uint64_t)v243, "output_names", 0xCuLL);
            if (InherentAttr)
              goto LABEL_22;
          }
          v20 = 0;
LABEL_27:
          *(_QWORD *)&v263 = v20;
          Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v263);
          v22 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v263);
          llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)v7, v14 + 8 * v5, Value, (char *)(v22 + 8 * v23));
          v252 = &v254;
          v253 = (void *)0x500000000;
          mlir::Block::getTerminator(v4);
          if ((*(_BYTE *)(v24 + 46) & 0x80) != 0 && (v25 = *(unsigned int *)(v24 + 68), (_DWORD)v25))
          {
            v26 = (_DWORD **)(*(_QWORD *)(v24 + 72) + 24);
            do
            {
              mlir::detail::AllocRange::getRangeForValue(*v26, 0, (uint64_t)&v271);
              v27 = v273;
              v28 = v272;
              v29 = v253;
              if (v253 >= (unint64_t)HIDWORD(v253))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v252, &v254, v253 + 1, 8);
                v29 = v253;
              }
              *((_QWORD *)v252 + v29) = v27 - v28 + 1;
              v30 = (_DWORD)v253 + 1;
              LODWORD(v253) = (_DWORD)v253 + 1;
              v26 += 4;
              --v25;
            }
            while (v25);
          }
          else
          {
            v30 = v253;
          }
          v31 = (char *)v252 + 8 * v30;
          v32 = (char *)v252 + 8;
          *v6 = *(_QWORD *)v252;
          v6 = (_QWORD *)llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)v230, (uint64_t)(v6 + 1), v32, v31);
          if (v252 != &v254)
            free(v252);
        }
      }
      else if (*v6 == -2)
      {
        mlir::Block::getTerminator(v4);
        if ((*(_BYTE *)(v8 + 46) & 0x80) != 0 && (v9 = *(unsigned int *)(v8 + 68), (_DWORD)v9))
        {
          v10 = 0;
          v11 = (_DWORD **)(*(_QWORD *)(v8 + 72) + 24);
          do
          {
            v12 = *v11;
            v11 += 4;
            mlir::detail::AllocRange::getRangeForValue(v12, v10, (uint64_t)&v252);
            v10 = v10 + v255[0] - (_QWORD)v253 + 1;
            --v9;
          }
          while (v9);
          *v6 = v10;
        }
        else
        {
          *v6 = 0;
        }
      }
      ++v5;
      ++v6;
    }
    while (v6 != (_QWORD *)(*((_QWORD *)this + 8) + 8 * *((unsigned int *)this + 18)));
  }
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v252);
  mlir::AsmState::AsmState(&v244, a2, &v252, 0, 0);
  v33 = this;
  v34 = (uint64_t *)*((_QWORD *)this + 8);
  v35 = *((unsigned int *)this + 18);
  LOBYTE(v252) = *((_BYTE *)this + 160);
  v253 = v255;
  v254 = 0x300000000;
  if ((_DWORD)v35)
  {
    if (v35 < 4)
    {
      v42 = 0;
      v36 = v255;
    }
    else
    {
      v271 = 0;
      v36 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v253, v255, v35, 1000, (unint64_t *)&v271);
      v37 = (char *)v253;
      if ((_DWORD)v254)
      {
        v38 = 0;
        v39 = (char *)v253 + 1000 * v254;
        do
        {
          v40 = &v36[v38];
          v41 = &v37[v38 * 8];
          *v40 = *(_QWORD *)&v37[v38 * 8];
          v36[v38 + 1] = &v36[v38 + 3];
          v40[2] = 0xA00000000;
          if (*(_DWORD *)&v37[v38 * 8 + 16])
            llvm::SmallVectorImpl<mlir::detail::AllocRange>::operator=((uint64_t)&v36[v38 + 1], (uint64_t)(v41 + 8));
          v40[53] = v40 + 55;
          v40[54] = 0xA00000000;
          if (*((_DWORD *)v41 + 108))
            llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::operator=((uint64_t)(v40 + 53), (uint64_t *)&v37[v38 * 8 + 424]);
          v38 += 125;
        }
        while (v41 + 1000 != v39);
        v37 = (char *)v253;
        v43 = v254;
      }
      else
      {
        v43 = 0;
      }
      v44 = (int)v271;
      if (v253 != v255)
        free(v253);
      v253 = v36;
      HIDWORD(v254) = v44;
      v42 = v254;
      v33 = this;
      if (v254 == v35)
        goto LABEL_55;
    }
    v45 = 1000 * v42;
    v46 = 1000 * v35;
    do
    {
      v47 = &v36[(unint64_t)v45 / 8];
      bzero(&v36[(unint64_t)v45 / 8 + 3], 0x3D0uLL);
      *v47 = -1;
      v47[1] = &v36[(unint64_t)v45 / 8 + 3];
      v47[2] = 0xA00000000;
      v47[53] = v47 + 55;
      v46 -= 1000;
      v36 += 125;
      *((_DWORD *)v47 + 109) = 10;
    }
    while (v45 != v46);
    v36 = v253;
    v33 = this;
LABEL_55:
    LODWORD(v254) = v35;
    v48 = 1000 * v35;
    do
    {
      v49 = *v34++;
      v50 = v49 - 1;
      if (v49 == -1)
        v51 = -1;
      else
        v51 = v50;
      *v36 = v51;
      v36 += 125;
      v48 -= 1000;
    }
    while (v48);
  }
  v52 = v4[4];
  v229 = (ZinIrHalH13g *)(v4 + 4);
  if (v52 == (ZinIrHalH13g *)(v4 + 4))
    goto LABEL_371;
  v233 = (uint64_t)v33 + 24;
  v228 = (char *)v33 + 80;
  while (2)
  {
    v231 = (ZinIrHalH13g **)v52;
    ZinIrHalH13g::~ZinIrHalH13g(v52);
    v240 = v53;
    if ((*((_BYTE *)v53 + 46) & 0x80) == 0)
      goto LABEL_291;
    v238 = *((unsigned int *)v53 + 17);
    if (!(_DWORD)v238)
      goto LABEL_218;
    v55 = 0;
    v235 = *((_QWORD *)v53 + 9);
    do
    {
      v56 = *(void **)(v235 + 32 * v55 + 24);
      v57 = (*(uint64_t (**)(mlir::dataflow::TensorAllocAnalysis *, void *))(*(_QWORD *)v33 + 48))(v33, v56);
      v58 = *(unsigned int *)(v57 + 176);
      if (!(_DWORD)v58)
        goto LABEL_66;
      v59 = v57;
      v251 = v56;
      __b = v270;
      HIDWORD(v269) = 4;
      if (v58 <= 4)
      {
        memset(v270, 255, 8 * v58);
        LODWORD(v269) = v58;
        v60 = (uint64_t **)v270;
        v62 = *(_QWORD **)(v59 + 168);
        v63 = &v62[5 * v58];
      }
      else
      {
        LODWORD(v269) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v270, v58, 8);
        v60 = (uint64_t **)__b;
        memset(__b, 255, 8 * v58);
        v61 = *(_DWORD *)(v59 + 176);
        LODWORD(v269) = v58;
        if (!v61)
        {
          v74 = 1;
          goto LABEL_93;
        }
        v62 = *(_QWORD **)(v59 + 168);
        v63 = &v62[5 * v61];
      }
      v64 = 0;
      do
      {
        if (v62[1] != -1 && v62[2] != -1 && v62[3] != -1 && (_DWORD)v254)
        {
          v65 = 0;
          v66 = v253;
          while (1)
          {
            v67 = v66[1];
            v68 = *((unsigned int *)v66 + 4);
            if ((_DWORD)v68)
            {
              v69 = 40 * v68;
              v70 = (_QWORD *)v66[1];
              while (*v70 != *v62)
              {
                v70 += 5;
                v69 -= 40;
                if (!v69)
                {
                  v70 = (_QWORD *)(v67 + 40 * v68);
                  break;
                }
              }
            }
            else
            {
              v70 = (_QWORD *)v66[1];
            }
            v71 = (char *)v70 - v67;
            v72 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v70 - v67) >> 3);
            v73 = v71 == (char *)-40 || v72 == v68;
            if (!v73)
              break;
            ++v65;
            v66 += 125;
            if (v66 == (_QWORD *)((char *)v253 + 1000 * v254))
              goto LABEL_73;
          }
          v271 = v251;
          llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::insert(v66[53] + 56 * v72, (unint64_t *)&v271);
          v60 = (uint64_t **)__b;
          *((_QWORD *)__b + v64) = v65;
        }
LABEL_73:
        ++v64;
        v62 += 5;
      }
      while (v62 != v63);
      v58 = v269;
      v74 = (int)v269;
      v33 = this;
LABEL_93:
      *(_QWORD *)&v263 = &v264;
      *((_QWORD *)&v263 + 1) = 0x200000000;
      v266 = 0;
      v267 = 0;
      v265 = (unint64_t *)&v266;
      if (!v74)
        goto LABEL_148;
      v75 = 8 * v58;
      do
      {
        llvm::SmallSet<long long,2u,std::less<long long>>::insert((uint64_t)&v263, v60++, (uint64_t)&v271);
        v75 -= 8;
      }
      while (v75);
      if (!v267)
      {
        if (DWORD2(v263) > 2)
        {
LABEL_117:
          Loc = mlir::Value::getLoc((mlir::Value *)&v251);
          v87 = "Cannot pack an OffsetLatticeValue that contains ranges that were already allocated to different buffers."
                " This is an invalid program state.";
          goto LABEL_124;
        }
        if (DWORD2(v263) == 1)
        {
          v88 = (_QWORD *)v263;
          goto LABEL_128;
        }
        if (DWORD2(v263) == 2)
        {
          v79 = (unint64_t *)v263;
          if (*(_QWORD *)v263 != -1 && *(_QWORD *)(v263 + 8) != -1)
            goto LABEL_123;
          v80 = (unint64_t *)(v263 + 16);
          while (1)
          {
LABEL_133:
            v90 = v79 + 4;
            if (!v267)
              v90 = v79;
            v81 = *v90;
            if (v81 != -1)
              break;
            if (v267)
            {
              v91 = (unint64_t *)v79[1];
              if (v91)
              {
                do
                {
                  v89 = v91;
                  v91 = (unint64_t *)*v91;
                }
                while (v91);
              }
              else
              {
                do
                {
                  v89 = (unint64_t *)v79[2];
                  v73 = *v89 == (_QWORD)v79;
                  v79 = v89;
                }
                while (!v73);
              }
            }
            else
            {
              v89 = v79 + 1;
            }
            v79 = v89;
            if (v89 == v80)
              goto LABEL_107;
          }
LABEL_108:
          v82 = v269;
          if ((_DWORD)v269)
          {
            if (v269 < 4)
            {
              v83 = (unint64_t *)__b;
              v84 = v269;
LABEL_146:
              v95 = v84 + 1;
              do
              {
                *v83++ = v81;
                --v95;
              }
              while (v95 > 1);
              goto LABEL_148;
            }
            v83 = (unint64_t *)((char *)__b + 8 * (v269 & 0xFFFFFFFC));
            v84 = v269 & 3;
            v92 = vdupq_n_s64(v81);
            v93 = (int64x2_t *)((char *)__b + 16);
            v94 = v269 & 0xFFFFFFFC;
            do
            {
              v93[-1] = v92;
              *v93 = v92;
              v93 += 2;
              v94 -= 4;
            }
            while (v94);
            if ((v82 & 0xFFFFFFFC) != v82)
              goto LABEL_146;
          }
        }
LABEL_148:
        v96 = *(_QWORD *)__b;
        v97 = *(unsigned int *)(v59 + 176);
        if ((_DWORD)v97)
        {
          v98 = 40 * v97;
          v99 = *(_QWORD **)(v59 + 168);
          while (1)
          {
            v100 = v99[1] == -1 || v99[2] == -1;
            if (!v100 && v99[3] != -1)
              break;
            v99 += 5;
            v98 -= 40;
            if (!v98)
            {
              v101 = 0;
              v271 = (char *)&v272 + 8;
              DWORD1(v272) = 4;
              goto LABEL_183;
            }
          }
        }
        else
        {
          v99 = *(_QWORD **)(v59 + 168);
        }
        v102 = *(_QWORD *)(v59 + 168) + 40 * v97;
        v271 = (char *)&v272 + 8;
        *(_QWORD *)&v272 = 0x400000000;
        if (v99 == (_QWORD *)v102)
        {
          v101 = 0;
        }
        else
        {
          v103 = 0;
          v104 = v99;
LABEL_161:
          v105 = v103++;
          while (1)
          {
            v104 += 5;
            if (v104 == (_QWORD *)v102)
              break;
            v106 = v104[1] == -1 || v104[2] == -1;
            if (!v106 && v104[3] != -1)
            {
              if (v104 != (_QWORD *)v102)
                goto LABEL_161;
              break;
            }
          }
          if (v105 < 4)
          {
            v107 = 0;
            v108 = (char *)&v272 + 8;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (char *)&v272 + 8, v103, 40);
            v107 = v272;
            v108 = (char *)v271;
          }
          v109 = &v108[40 * v107];
LABEL_174:
          v110 = *(_OWORD *)v99;
          v111 = *((_OWORD *)v99 + 1);
          *((_QWORD *)v109 + 4) = v99[4];
          *(_OWORD *)v109 = v110;
          *((_OWORD *)v109 + 1) = v111;
          while (1)
          {
            v99 += 5;
            if (v99 == (_QWORD *)v102)
              break;
            v112 = v99[1] == -1 || v99[2] == -1;
            if (!v112 && v99[3] != -1)
            {
              v109 += 40;
              if (v99 != (_QWORD *)v102)
                goto LABEL_174;
              break;
            }
          }
          v101 = v272 + v103;
        }
LABEL_183:
        LODWORD(v272) = v101;
        v260 = v262;
        v261 = 0x400000000;
        v113 = (char *)v253;
        if (v96 == -1)
        {
          if ((_DWORD)v254)
          {
            v114 = 1000 * v254;
            while (1)
            {
              LODWORD(v261) = 0;
              v113 += 1000;
              v114 -= 1000;
              if (!v114)
                goto LABEL_190;
            }
          }
          else
          {
LABEL_190:
            v113 = 0;
          }
        }
        else
        {
          v113 = (char *)v253 + 1000 * v96;
          {
LABEL_209:
            if (v260 != v262)
              free(v260);
            v33 = this;
            if (v271 != (char *)&v272 + 8)
              free(v271);
            goto LABEL_213;
          }
        }
        if (*(_DWORD *)(v59 + 176))
          v115 = (_DWORD)v261 == 0;
        else
          v115 = 1;
        if (!v115)
        {
          v116 = *(_QWORD *)(v59 + 168);
          v117 = *(_QWORD *)v260;
          v118 = *(_QWORD *)(v116 + 32);
          v119 = *(_OWORD *)(v116 + 16);
          *(_QWORD *)&v248 = *(_QWORD *)v116;
          v249 = v119;
          v250 = v118;
          *((_QWORD *)&v248 + 1) = v117;
          if (v118)
            v117 = (v117 + v118 - 1) / v118 * v118;
          *(_QWORD *)&v249 = v117;
          *((_QWORD *)&v249 + 1) = *((_QWORD *)&v119 + 1) - v119 + v117;
          v256 = 0uLL;
          LODWORD(v257) = 0;
          *((_QWORD *)&v257 + 1) = v259;
          v258 = 0x200000000;
          llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::insert((uint64_t)&v256, (unint64_t *)&v248);
          llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::insert((uint64_t)&v256, (unint64_t *)&v251);
          v247 = v250;
          v245 = v248;
          v246 = v249;
          v120 = *((_QWORD *)v113 + 1);
          v121 = *((unsigned int *)v113 + 4);
          if (!(_DWORD)v121)
          {
            v122 = *((_QWORD *)v113 + 1);
LABEL_206:
            v126 = v122 - v120;
            llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::insert_one_impl<llvm::SmallSetVector<mlir::Value,2u> const&>((uint64_t)(v113 + 424), *((_QWORD *)v113 + 53) - 0x3333333333333328 * ((v122 - v120) >> 3), (unint64_t)&v256);
            llvm::SmallVectorImpl<mlir::detail::AllocRange>::insert_one_impl<mlir::detail::AllocRange const&>((uint64_t)(v113 + 8), *((_QWORD *)v113 + 1) + v126, (unint64_t)&v245);
            if (*((_BYTE **)&v257 + 1) != v259)
              free(*((void **)&v257 + 1));
            llvm::deallocate_buffer((llvm *)v256, (void *)(8 * v257));
          }
          v122 = *((_QWORD *)v113 + 1);
          while (2)
          {
            v123 = v121 >> 1;
            v124 = v122 + 40 * (v121 >> 1);
            v125 = *(_QWORD *)(v124 + 8);
            if (*((_QWORD *)&v245 + 1) == v125)
            {
              if (*((_QWORD *)&v246 + 1) - *((_QWORD *)&v245 + 1) + 1 >= *(_QWORD *)(v122 + 40 * v123 + 24)
                                                                          - *((_QWORD *)&v245 + 1)
                                                                          + 1)
              {
LABEL_204:
                v122 = v124 + 40;
                v123 = v121 + ~v123;
              }
            }
            else if (*((uint64_t *)&v245 + 1) >= v125)
            {
              goto LABEL_204;
            }
            v121 = v123;
            if (!v123)
              goto LABEL_206;
            continue;
          }
        }
        goto LABEL_209;
      }
      if (v267 > 2)
        goto LABEL_117;
      if (v267 == 2)
      {
        v76 = v266;
        if (v266)
        {
          v77 = v266;
          while (1)
          {
            v78 = v77[4];
            if (v78 < 0)
            {
              if (v78 == -1)
              {
                v79 = v265;
                v80 = (unint64_t *)&v266;
                if (v265 != (unint64_t *)&v266)
                  goto LABEL_133;
LABEL_107:
                v81 = -1;
                goto LABEL_108;
              }
              ++v77;
            }
            v77 = (_QWORD *)*v77;
            if (!v77)
            {
              while (1)
              {
                v85 = v76[4];
                if (v85 < 0)
                {
                  if (v85 == -1)
                    goto LABEL_148;
                  ++v76;
                }
                v76 = (_QWORD *)*v76;
                if (!v76)
                  goto LABEL_123;
              }
            }
          }
        }
LABEL_123:
        Loc = mlir::Value::getLoc((mlir::Value *)&v251);
        v87 = "Operands were allocated into multiple buffers. This is an invalid program state.";
LABEL_124:
        *(_QWORD *)&v256 = v87;
        LOWORD(v258) = 259;
        mlir::emitError(Loc, (uint64_t)&v256, (uint64_t)&v271);
        mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v271);
        if (v271)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v271);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v272);
        goto LABEL_213;
      }
      v88 = v265 + 4;
LABEL_128:
      if (*v88 == -1)
        goto LABEL_148;
LABEL_213:
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v265, v266);
      if ((__int128 *)v263 != &v264)
        free((void *)v263);
      if (__b != v270)
        free(__b);
LABEL_66:
      ++v55;
    }
    while (v55 != v238);
    v53 = v240;
    if ((*((_BYTE *)v240 + 46) & 0x80) != 0)
    {
LABEL_218:
      v236 = *((unsigned int *)v53 + 17);
      if ((_DWORD)v236)
      {
        v127 = 0;
        v234 = *((_QWORD *)v53 + 9);
        do
        {
          v239 = v127;
          v129 = *(_DWORD **)(v234 + 32 * v127 + 24);
          v260 = v129;
          if ((_DWORD)v254)
          {
            v130 = 0;
            v131 = (char *)v253;
            v241 = (char *)v253 + 1000 * v254;
            while (1)
            {
              v271 = (char *)&v272 + 8;
              *(_QWORD *)&v272 = 0x400000000;
              v134 = *((_DWORD *)v131 + 108);
              if (v134)
              {
                v135 = 0;
                v136 = 0;
                v137 = *((_QWORD *)v131 + 53);
                v138 = v137 + 56 * v134;
                do
                {
                  v142 = *(_QWORD *)(v137 + 24);
                  v143 = *(unsigned int *)(v137 + 32);
                  if ((_DWORD)v143)
                  {
                    v144 = 8 * v143;
                    v145 = *(_QWORD **)(v137 + 24);
                    while ((_DWORD *)*v145 != v129)
                    {
                      ++v145;
                      v144 -= 8;
                      if (!v144)
                      {
                        v145 = (_QWORD *)(v142 + 8 * v143);
                        break;
                      }
                    }
                  }
                  else
                  {
                    v145 = *(_QWORD **)(v137 + 24);
                  }
                  v146 = ((uint64_t)v145 - v142) >> 3;
                  if (v146 != v143)
                  {
                    v147 = *((_QWORD *)v131 + 1) + 40 * v136;
                    v256 = *(_OWORD *)v147;
                    v257 = *(_OWORD *)(v147 + 16);
                    v258 = *(_QWORD *)(v147 + 32);
                    if (v135 < DWORD1(v272))
                    {
                      v139 = (char *)v271 + 48 * v135;
                      v54 = *(__n128 *)v147;
                      v140 = *(_OWORD *)(v147 + 16);
                      v141 = *(_QWORD *)(v147 + 32);
                      *(__n128 *)v139 = v54;
                      *((_OWORD *)v139 + 1) = v140;
                      *((_QWORD *)v139 + 4) = v141;
                      *((_QWORD *)v139 + 5) = v146;
                    }
                    else
                    {
                      v263 = v256;
                      v264 = v257;
                      v265 = (unint64_t *)v258;
                      v266 = (_QWORD *)v146;
                      v148 = v135 + 1;
                      v149 = (char *)v271 + 48 * v135 > (char *)&v263;
                      if (v271 <= &v263 && v149)
                      {
                        v154 = (char *)&v263 - (_BYTE *)v271;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (char *)&v272 + 8, v148, 48);
                        v151 = (char *)v271;
                        v150 = (__n128 *)((char *)v271 + v154);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (char *)&v272 + 8, v148, 48);
                        v150 = (__n128 *)&v263;
                        v151 = (char *)v271;
                      }
                      v152 = (__n128 *)&v151[48 * v272];
                      v54 = *v150;
                      v153 = v150[2];
                      v152[1] = v150[1];
                      v152[2] = v153;
                      *v152 = v54;
                    }
                    v135 = v272 + 1;
                    LODWORD(v272) = v272 + 1;
                  }
                  ++v136;
                  v137 += 56;
                }
                while (v137 != v138);
                v155 = (char *)v271;
                if (v135)
                {
                  v156 = v135;
                  v157 = (char *)v271 + 48 * v135;
                  v158 = v135;
                  if (v135 < 0x81)
                  {
LABEL_255:
                  }
                  else
                  {
                    while (1)
                    {
                      v159 = operator new(48 * v158, MEMORY[0x24BEDB6B8]);
                      if (v159)
                        break;
                      v160 = v158 > 1;
                      v158 >>= 1;
                      if (!v160)
                        goto LABEL_255;
                    }
                    v165 = v159;
                    operator delete(v165);
                  }
                  v155 = (char *)v271;
                  v161 = *(void **)v271;
                  v164 = *((_QWORD *)v271 + 1);
                  v163 = *((_QWORD *)v271 + 2);
                  v162 = *((_QWORD *)v271 + 3);
                }
                else
                {
                  v161 = 0;
                  v162 = -1;
                  v163 = -1;
                  v164 = -1;
                }
                if (v155 != (char *)&v272 + 8)
                  free(v155);
                v132 = v164 == -1 || v163 == -1;
                if (!v132 && v162 != -1)
                  break;
              }
              ++v130;
              v131 += 1000;
              if (v131 == v241)
                goto LABEL_278;
            }
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v260);
            if (!DefiningOp
              || (v167 = DefiningOp,
                  !mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp))
              || (mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(v167),
                  v242 = *(unsigned int *)(v167 + 36),
                  v242 < 2)
              || v161 == v260)
            {
              v33 = this;
LABEL_271:
              v171 = *(_QWORD *)(*((_QWORD *)v33 + 13) + 8 * v130);
              v271 = v129;
              *(_QWORD *)&v272 = v163;
              *((_QWORD *)&v272 + 1) = v171;
              llvm::MapVector<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo,llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,llvm::SmallVector<std::pair<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo>,0u>>::try_emplace<mlir::dataflow::TensorAllocAnalysis::AllocInfo>(v233, (unint64_t *)&v271, &v272);
              v172 = v239;
              goto LABEL_221;
            }
            v168 = 0;
            v232 = (mlir::detail::OpResultImpl *)(v167 - 16);
            v169 = v164;
            while (1)
            {
              NextResultAtOffset = (_DWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v232, v168);
              mlir::detail::AllocRange::getRangeForValue(NextResultAtOffset, v169, (uint64_t)&v263);
              if (*((uint64_t *)&v264 + 1) > v162)
              {
                v173 = mlir::Value::getLoc((mlir::Value *)&v260);
                *(_QWORD *)&v256 = "Attempted to subdivide a range that isn't large enough. This usually happens when the"
                                   " requested alignment is incompatible with your tensor shapes. The required alignment was: ";
                LOWORD(v258) = 259;
                mlir::emitError(v173, (uint64_t)&v256, (uint64_t)&v271);
                if (v271)
                {
                  LODWORD(__b) = 2;
                  v269 = v265;
                  v174 = v273;
                  if (v274 >= v275)
                  {
                    v181 = v274 + 1;
                    if (v273 <= (unint64_t)&__b && v273 + 24 * v274 > (unint64_t)&__b)
                    {
                      v182 = (char *)&__b - v273;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, v276, v181, 24);
                      v174 = v273;
                      p_b = (void **)&v182[v273];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, v276, v181, 24);
                      p_b = &__b;
                      v174 = v273;
                    }
                  }
                  else
                  {
                    p_b = &__b;
                  }
                  v176 = v174 + 24 * v274;
                  v177 = *(_OWORD *)p_b;
                  *(_QWORD *)(v176 + 16) = p_b[2];
                  *(_OWORD *)v176 = v177;
                  ++v274;
                  if (v271)
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v271);
                }
                std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v272);
                goto LABEL_278;
              }
              if (v260 == NextResultAtOffset)
                break;
              v169 = *((_QWORD *)&v264 + 1) + 1;
              if (v242 == ++v168)
                goto LABEL_283;
            }
            v164 = *((_QWORD *)&v263 + 1);
            v162 = *((_QWORD *)&v264 + 1);
            v163 = v264;
LABEL_283:
            v33 = this;
            if (v164 != -1 && v163 != -1 && v162 != -1)
              goto LABEL_271;
          }
          else
          {
LABEL_278:
            v33 = this;
          }
          v172 = v239;
          if ((~v129[2] & 7) != 0)
          {
            v271 = v129;
            v178 = mlir::Value::getDefiningOp((mlir::Value *)&v271);
            if (v178)
            {
              v179 = v178;
              v180 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v179 + 48) + 32))(*(_QWORD *)(v179 + 48), v180);
            }
          }
          v128 = *((_QWORD *)v33 + 18);
          v271 = v129;
          *(_QWORD *)&v272 = -1;
          *((_QWORD *)&v272 + 1) = v128;
          llvm::MapVector<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo,llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,llvm::SmallVector<std::pair<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo>,0u>>::try_emplace<mlir::dataflow::TensorAllocAnalysis::AllocInfo>(v233, (unint64_t *)&v271, &v272);
LABEL_221:
          v127 = v172 + 1;
        }
        while (v127 != v236);
      }
    }
LABEL_291:
    v183 = v254;
    v184 = *((unsigned int *)v33 + 18);
    v185 = v254 - v184;
    if ((_DWORD)v254 == (_DWORD)v184)
    {
      v186 = v254;
      if (!(_DWORD)v254)
        goto LABEL_62;
LABEL_300:
      v192 = (char *)v253;
      v193 = *v230;
      v194 = (char *)v253 + 8;
      v195 = 1000 * v183;
      while (2)
      {
        v196 = *((_QWORD *)v194 - 1);
        if (v196 == -1)
        {
          v198 = *((_DWORD *)v194 + 2);
          if (!v198)
          {
            v197 = 0;
            goto LABEL_305;
          }
          v196 = *(_QWORD *)(*(_QWORD *)v194 + 40 * v198 - 16);
        }
        if (v196)
          v197 = v196 + 1;
        else
          v197 = 0;
LABEL_305:
        if (*v193 > v197)
          v197 = *v193;
        *v193++ = v197;
        v194 += 1000;
        v195 -= 1000;
        if (!v195)
        {
          if (!(_BYTE)v252)
            goto LABEL_62;
          v199 = &v192[1000 * v186];
          while (2)
          {
            v202 = (_QWORD *)*((_QWORD *)v192 + 1);
            v203 = *((unsigned int *)v192 + 4);
            v204 = &v202[5 * v203];
            if ((_DWORD)v203)
            {
              v205 = 40 * v203;
              while (1)
              {
                v206 = v202[1] == -1 || v202[2] == -1;
                if (v206 || v202[3] == -1)
                  break;
                if ((~*(_DWORD *)(*v202 + 8) & 7) != 0)
                {
                  v208 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v202);
                  if (mlir::Operation::isBeforeInBlock((mlir::Block **)v240, v208) || v208 == v240)
                    break;
                }
                v202 += 5;
                v205 -= 40;
                if (!v205)
                {
                  v202 = v204;
                  goto LABEL_349;
                }
              }
            }
            v209 = v202 + 5;
            if (v202 != v204 && v209 != v204)
            {
              do
              {
                if (v209[1] != -1 && v209[2] != -1 && v209[3] != -1)
                {
                  if ((~*(_DWORD *)(*v209 + 8) & 7) == 0
                    || (v215 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v209),
                        !mlir::Operation::isBeforeInBlock((mlir::Block **)v240, v215))
                    && v215 != v240)
                  {
                    v211 = *(_OWORD *)v209;
                    v212 = *((_OWORD *)v209 + 1);
                    v202[4] = v209[4];
                    *(_OWORD *)v202 = v211;
                    *((_OWORD *)v202 + 1) = v212;
                    v202 += 5;
                  }
                }
                v209 += 5;
              }
              while (v209 != v204);
            }
LABEL_349:
            v216 = (_QWORD *)*((_QWORD *)v192 + 1);
            v217 = 0xCCCCCCCCCCCCCCCDLL * (v202 - v216);
            *((_DWORD *)v192 + 4) = v217;
            v200 = *((_QWORD *)v192 + 53);
            v201 = *((_DWORD *)v192 + 108);
            v218 = v200 + 56 * v201;
            v219 = v200;
            if (v201 && (v219 = *((_QWORD *)v192 + 53), (_DWORD)v217))
            {
              v219 = *((_QWORD *)v192 + 53);
              do
              {
                v220 = 0xFFFFFFF800000008 * (v202 - v216);
                v221 = v216;
                while (*v221 != **(_QWORD **)(v219 + 24))
                {
                  v221 += 5;
                  v220 -= 40;
                  if (!v220)
                    goto LABEL_358;
                }
                v219 += 56;
              }
              while (v219 != v218);
LABEL_368:
              v223 = v200 + 56 * v201;
            }
            else
            {
LABEL_358:
              if (v219 == v218)
                goto LABEL_368;
              v222 = v219 + 56;
              if (v219 + 56 == v218)
              {
                v223 = v219;
              }
              else
              {
                v223 = v219;
                do
                {
                  v224 = v219;
                  v219 = v222;
                  v225 = *((unsigned int *)v192 + 4);
                  if ((_DWORD)v225)
                  {
                    v226 = (_QWORD *)*((_QWORD *)v192 + 1);
                    v227 = 40 * v225;
                    do
                    {
                      if (*v226 == **(_QWORD **)(v224 + 80))
                        llvm::deallocate_buffer(*(llvm **)v223, (void *)(8 * *(unsigned int *)(v223 + 16)));
                      v226 += 5;
                      v227 -= 40;
                    }
                    while (v227);
                  }
                  v222 = v219 + 56;
                }
                while (v219 + 56 != v218);
                v200 = *((_QWORD *)v192 + 53);
                v201 = *((_DWORD *)v192 + 108);
              }
            }
            llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::erase((uint64_t *)v192 + 53, v223, v200 + 56 * v201);
            v192 += 1000;
            if (v192 == v199)
              goto LABEL_62;
            continue;
          }
        }
        continue;
      }
    }
    if (v254 >= v184)
    {
      v188 = v254;
      v189 = *((_DWORD *)v33 + 19);
      v186 = v254;
      v190 = v184;
      v191 = v184;
      if (v189 < v254)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v230, v228, v254, 8);
        v190 = *((unsigned int *)this + 18);
        v188 = v254;
        v186 = v254;
        v191 = *((_DWORD *)this + 18);
      }
      bzero(&(*v230)[v190], 8 * (v183 - v184));
      v187 = v185 + v191;
      LODWORD(v183) = v188;
    }
    else
    {
      v186 = v254;
      v187 = v254;
    }
    *((_DWORD *)this + 18) = v187;
    if (v186)
      goto LABEL_300;
LABEL_62:
    v52 = *v231;
    v33 = this;
    if (*v231 != v229)
      continue;
    break;
  }
  LODWORD(v35) = v254;
LABEL_371:
  if (v253 != v255)
    free(v253);
  mlir::AsmState::~AsmState(&v244);
}

uint64_t llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *__srca;

  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v10 = *(unsigned int *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 - __src;
  v13 = (a4 - __src) >> 3;
  v14 = v13 + v10;
  if (*(_QWORD *)a1 + 8 * v10 != a2)
  {
    if (v14 > v9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v14, 8);
      v7 = *(_QWORD *)a1;
      v10 = *(unsigned int *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 8);
    }
    v15 = (char *)(v7 + 8 * v10);
    __srca = (char *)(v7 + 8 * v8);
    v16 = v15 - __srca;
    v17 = (v15 - __srca) >> 3;
    if (v17 < v13)
    {
      v18 = v11 + (v12 >> 3);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 == v10)
      {
        v19 = __src;
        v21 = v7 + 8 * v8;
        v20 = a4;
        goto LABEL_34;
      }
      v21 = v7 + 8 * v8;
      memcpy((void *)(v7 + 8 * v18 - 8 * v17), __srca, v16);
      if (v16 < 0x20 || (unint64_t)(__srca - __src) < 0x20)
      {
        v28 = (char *)(v7 + 8 * v8);
        v29 = (v15 - __srca) >> 3;
        v19 = __src;
        v20 = a4;
      }
      else
      {
        v27 = 8 * (v17 & 0xFFFFFFFFFFFFFFFCLL);
        v28 = &__srca[v27];
        v29 = (v16 >> 3) & 3;
        v19 = &__src[v27];
        v30 = (__int128 *)(__src + 16);
        v31 = (_OWORD *)(v7 + 8 * v8 + 16);
        v32 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 4;
        }
        while (v32);
        v20 = a4;
        if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          if (v19 != v20)
            memcpy(v15, v19, v20 - v19);
          return v21;
        }
      }
      do
      {
        v42 = *(_QWORD *)v19;
        v19 += 8;
        *(_QWORD *)v28 = v42;
        v28 += 8;
        --v29;
      }
      while (v29);
      goto LABEL_34;
    }
    v22 = 8 * v13;
    v23 = v10;
    if (v13 + v10 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v13 + v10, 8);
      v23 = *(unsigned int *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 8);
    }
    v24 = &v15[-v22];
    if (a4 == __src)
      goto LABEL_28;
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    if (v12 - 8 >= 0x78)
    {
      v34 = 8 * v23 + *(_QWORD *)a1;
      v26 = &v15[-v22];
      if ((v12 & 0xFFFFFFFFFFFFFFF8) - v7 - 8 * v10 + v34 >= 0x20)
      {
        v35 = ((v12 - 8) >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v25 = (_QWORD *)((char *)v25 + v36);
        v26 = &v24[v36];
        v37 = (__int128 *)(8 * v10 - 8 * v13 + v7 + 16);
        v38 = (_OWORD *)(v34 + 16);
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    else
    {
      v26 = &v15[-v22];
    }
    do
    {
      v41 = *(_QWORD *)v26;
      v26 += 8;
      *v25++ = v41;
    }
    while (v26 != v15);
LABEL_28:
    *(_DWORD *)(a1 + 8) = v11 + v13;
    v21 = v7 + 8 * v8;
    if (v24 != __srca)
      memmove(&__srca[v22], __srca, &v15[-v22] - __srca);
    if (a4 != __src)
      memmove(__srca, __src, v12);
    return v21;
  }
  if (v14 > v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v14, 8);
    v11 = *(_DWORD *)(a1 + 8);
    v7 = *(_QWORD *)a1;
  }
  if (__src != a4)
  {
    memcpy((void *)(v7 + 8 * v11), __src, v12);
    v11 = *(_DWORD *)(a1 + 8);
    v7 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v11 + (v12 >> 3);
  return v7 + 8 * v8;
}

void mlir::dataflow::TensorAllocAnalysis::getAnalysis(mlir::dataflow::TensorAllocAnalysis *this, mlir::DataFlowSolver *a2, mlir::Operation *a3)
{
  mlir::Liveness *v4;

  mlir::DataFlowSolver::load<mlir::dataflow::DeadCodeAnalysis>((uint64_t)a2);
  v4 = (mlir::Liveness *)operator new();
  mlir::Liveness::Liveness(v4, a3);
}

void sub_207078CE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  Operation *v14;
  mlir::dataflow::TensorAllocAnalysis *v15;
  mlir::DataFlowSolver *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *((_QWORD *)v15 + 2);
  *((_QWORD *)v15 + 2) = v17;
  if (v18)
    std::default_delete<mlir::Liveness>::operator()[abi:nn180100]((uint64_t)v15 + 16, v18);
  mlir::DataFlowSolver::initializeAndRun(v16, v14);
  mlir::dataflow::TensorAllocAnalysis::buildAllocInfoMap(v15, v14);
}

uint64_t mlir::DataFlowSolver::load<mlir::dataflow::DeadCodeAnalysis>(uint64_t a1)
{
  mlir::dataflow::DeadCodeAnalysis *v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;

  v2 = (mlir::dataflow::DeadCodeAnalysis *)operator new();
  mlir::dataflow::DeadCodeAnalysis::DeadCodeAnalysis(v2, (mlir::DataFlowSolver *)a1);
  v3 = *(unsigned int *)(a1 + 56);
  if (v3 < *(_DWORD *)(a1 + 60))
  {
    v4 = *(char **)(a1 + 48);
    *(_QWORD *)&v4[8 * v3] = v2;
    v5 = v3 + 1;
    goto LABEL_3;
  }
  v7 = (char **)(a1 + 48);
  v25 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 48, (void *)(a1 + 64), 0, 8, &v25);
  v8 = *(unsigned int *)(a1 + 56);
  v9 = 8 * v8;
  *(_QWORD *)&v4[8 * v8] = v2;
  v10 = *(char **)(a1 + 48);
  if ((_DWORD)v8)
  {
    v11 = (v8 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v11 >= 0xB)
    {
      if (v10 >= &v4[v9] || (v12 = v4, v13 = *(char **)(a1 + 48), v4 >= &v10[v9]))
      {
        v14 = v11 + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v12 = &v4[v15];
        v13 = &v10[v15];
        v16 = (__int128 *)(v10 + 16);
        v17 = v4 + 16;
        v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *(v16 - 1);
          v20 = *v16;
          *(v16 - 1) = 0uLL;
          *v16 = 0uLL;
          *(v17 - 1) = v19;
          *v17 = v20;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_13:
          v22 = (uint64_t)(*v7 - 8);
          do
          {
            v23 = *(_QWORD *)(v22 + v9);
            *(_QWORD *)(v22 + v9) = 0;
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v9 -= 8;
          }
          while (v9);
          v10 = *v7;
          goto LABEL_18;
        }
      }
    }
    else
    {
      v12 = v4;
      v13 = *(char **)(a1 + 48);
    }
    do
    {
      v21 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      v13 += 8;
      *(_QWORD *)v12 = v21;
      v12 += 8;
    }
    while (v13 != &v10[v9]);
    goto LABEL_13;
  }
LABEL_18:
  v24 = v25;
  if (v10 != (char *)(a1 + 64))
    free(v10);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_DWORD *)(a1 + 56) + 1;
  *(_DWORD *)(a1 + 60) = v24;
LABEL_3:
  *(_DWORD *)(a1 + 56) = v5;
  return *(_QWORD *)&v4[8 * v5 - 8];
}

void mlir::dataflow::TensorAllocAnalysis::~TensorAllocAnalysis(mlir::dataflow::TensorAllocAnalysis *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_24C052AD0;
  v2 = (char *)*((_QWORD *)this + 13);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 80)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 6);
  if (v4 != (char *)this + 64)
    free(v4);
  llvm::deallocate_buffer(*((llvm **)this + 3), (void *)(16 * *((unsigned int *)this + 10)));
}

{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_24C052AD0;
  v2 = (char *)*((_QWORD *)this + 13);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 80)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 6);
  if (v4 != (char *)this + 64)
    free(v4);
  llvm::deallocate_buffer(*((llvm **)this + 3), (void *)(16 * *((unsigned int *)this + 10)));
}

void sub_207078F34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  uint64_t v13;

  v13 = *((_QWORD *)v12 + 2);
  *((_QWORD *)v12 + 2) = 0;
  if (v13)
    std::default_delete<mlir::Liveness>::operator()[abi:nn180100]((uint64_t)v12 + 16, v13);
  ZinIrHalH13g::~ZinIrHalH13g(v12);
}

void sub_207078FC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  uint64_t v13;

  v13 = *((_QWORD *)v12 + 2);
  *((_QWORD *)v12 + 2) = 0;
  if (v13)
    std::default_delete<mlir::Liveness>::operator()[abi:nn180100]((uint64_t)v12 + 16, v13);
  ZinIrHalH13g::~ZinIrHalH13g(v12);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::visitOperationImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::visitNonControlFlowArgumentsImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::getLatticeElement(uint64_t a1, uint64_t a2)
{
  return mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>,mlir::Value>(*(_QWORD *)(a1 + 8), a2);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::setToEntryState(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::visitNonControlFlowArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, unsigned int a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = a6;
  if (a5 >= a6)
    v11 = a6;
  else
    v11 = a5;
  mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates(a1, a4, v11);
  return mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates(a1, &a4[*(_QWORD *)(a3 + 16) + v10], a5 - (*(_QWORD *)(a3 + 16) + v10));
}

void mlir::dataflow::TensorAllocAnalysis::setToEntryState(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5[2];
  _QWORD v6[51];

  v6[50] = *MEMORY[0x24BDAC8D0];
  mlir::detail::AllocRange::getRangeForValue((_DWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v6);
  v5[0] = v6;
  v5[1] = (void *)0xA00000001;
  v4 = mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::join(a2, (uint64_t)v5);
  mlir::DataFlowAnalysis::propagateIfChanged(a1, a2, v4);
  if (v5[0] != v6)
    free(v5[0]);
}

uint64_t mlir::TypeID::get<mlir::ShapedType>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_254519000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_254519000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      v12 = 66;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_254519000;
    }
  }
  return v1[369];
}

uint64_t mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::MemoryMapperInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::MemoryMapperInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::MemoryMapperInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::MemoryMapperInterface>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_254519000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_254519000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryMapperInterface]";
      v12 = 77;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::MemoryMapperInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_254519000;
    }
  }
  return v1[371];
}

uint64_t llvm::SmallVectorImpl<mlir::detail::AllocRange>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 40 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 40 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 40);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 40 * v9), (const void *)(*(_QWORD *)a2 + 40 * v9), *(_QWORD *)a2 + 40 * v10 - (*(_QWORD *)a2 + 40 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<`anonymous namespace'::CurrentlyLive::Buffer,false>::destroy_range(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = v2 - 1000;
      v5 = *(_QWORD *)(v2 - 576);
      v6 = *(unsigned int *)(v2 - 568);
      if ((_DWORD)v6)
      {
        v7 = 56 * v6;
        v8 = *(void **)(v5 + v7 - 32);
        if ((void *)(v5 + v7 - 16) != v8)
          free(v8);
        llvm::deallocate_buffer(*(llvm **)(v5 + v7 - 56), (void *)(8 * *(unsigned int *)(v5 + v7 - 40)));
      }
      if (v5 != v2 - 560)
        free(*(void **)(v2 - 576));
      v9 = *(void **)(v2 - 992);
      if (v9 != (void *)(v2 - 976))
        free(v9);
      v2 -= 1000;
    }
    while (v4 != a1);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  unint64_t v11;
  uint64_t v12;
  llvm **v13;
  uint64_t v14;
  llvm **v15;
  llvm **v16;
  llvm **v17;
  uint64_t v18;
  int v19;
  llvm **v20;
  llvm **v21;
  llvm **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;

  if ((uint64_t *)a1 != a2)
  {
    v4 = a2 + 2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      v9 = a2 + 1;
      v11 = *((unsigned int *)a2 + 2);
      v12 = *(unsigned int *)(a1 + 8);
      if (v12 >= v11)
      {
        v16 = *(llvm ***)a1;
        if ((_DWORD)v11)
          llvm::deallocate_buffer(*v16, (void *)(8 * *((unsigned int *)v16 + 4)));
        if (&v16[7 * v12] != v16)
        {
          v20 = &v16[7 * v12];
          v21 = v20 - 2;
          v22 = (llvm **)*(v20 - 4);
          if (v21 != v22)
            free(v22);
          llvm::deallocate_buffer(*(v21 - 5), (void *)(8 * *((unsigned int *)v21 - 6)));
        }
        *(_DWORD *)(a1 + 8) = 0;
        v23 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v23)
        {
          v24 = *a2;
          v25 = 56 * v23;
          v26 = *(void **)(v24 + v25 - 32);
          if ((void *)(v24 + v25 - 16) != v26)
            free(v26);
          llvm::deallocate_buffer(*(llvm **)(v24 + v25 - 56), (void *)(8 * *(unsigned int *)(v24 + v25 - 40)));
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v11)
        {
          v17 = *(llvm ***)a1;
          if ((_DWORD)v12)
            llvm::deallocate_buffer(*v17, (void *)(8 * *((unsigned int *)v17 + 4)));
        }
        else
        {
          if ((_DWORD)v12)
          {
            v13 = *(llvm ***)a1;
            v14 = 7 * v12;
            v15 = (llvm **)v13[v14 - 4];
            if (&v13[v14 - 2] != v15)
              free(v15);
            llvm::deallocate_buffer(v13[v14 - 7], (void *)(8 * LODWORD(v13[v14 - 5])));
          }
          *(_DWORD *)(a1 + 8) = 0;
          v35 = 0;
          v18 = a1 + 16;
          v17 = (llvm **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v11, 56, &v35);
          llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::moveElementsForGrow(a1, (uint64_t)v17);
          v19 = v35;
          if (*(_QWORD *)a1 != v18)
            free(*(void **)a1);
          *(_QWORD *)a1 = v17;
          *(_DWORD *)(a1 + 12) = v19;
        }
        v27 = *a2;
        if (*((_DWORD *)a2 + 2))
        {
          v28 = v27 + 56 * *((unsigned int *)a2 + 2);
          do
          {
            v29 = v27;
            *v17 = 0;
            v17[1] = 0;
            *((_DWORD *)v17 + 4) = 0;
            *v17 = *(llvm **)v27;
            *(_QWORD *)v27 = 0;
            *((_DWORD *)v17 + 2) = *(_DWORD *)(v27 + 8);
            *(_DWORD *)(v27 + 8) = 0;
            v17[3] = (llvm *)(v17 + 5);
            v30 = *((_DWORD *)v17 + 3);
            *((_DWORD *)v17 + 3) = *(_DWORD *)(v27 + 12);
            *(_DWORD *)(v27 + 12) = v30;
            v31 = *((_DWORD *)v17 + 4);
            *((_DWORD *)v17 + 4) = *(_DWORD *)(v27 + 16);
            *(_DWORD *)(v27 + 16) = v31;
            v17[4] = (llvm *)0x200000000;
            if (*(_DWORD *)(v27 + 32))
              llvm::SmallVectorImpl<mlir::Value>::operator=((uint64_t)(v17 + 3), v27 + 24);
            v17 += 7;
            v27 += 56;
          }
          while (v29 + 56 != v28);
          v27 = *a2;
        }
        *(_DWORD *)(a1 + 8) = v11;
        v32 = *v9;
        if ((_DWORD)v32)
        {
          v33 = 56 * v32;
          v34 = *(void **)(v27 + v33 - 32);
          if ((void *)(v27 + v33 - 16) != v34)
            free(v34);
          llvm::deallocate_buffer(*(llvm **)(v27 + v33 - 56), (void *)(8 * *(unsigned int *)(v27 + v33 - 40)));
        }
      }
    }
    else
    {
      v5 = *(char **)a1;
      v6 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v6)
      {
        v7 = 56 * v6;
        v8 = *(char **)&v5[v7 - 32];
        if (&v5[v7 - 16] != v8)
          free(v8);
        llvm::deallocate_buffer(*(llvm **)&v5[v7 - 56], (void *)(8 * *(unsigned int *)&v5[v7 - 40]));
      }
      if (v5 != (char *)(a1 + 16))
        free(*(void **)a1);
      *(_QWORD *)a1 = *a2;
      v9 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    *v9 = 0;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<mlir::Value>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 8 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 8 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 8);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::moveElementsForGrow(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = *(_QWORD *)result;
    v7 = *(_QWORD *)result + 56 * v2;
    do
    {
      v8 = v6 + v5;
      v9 = a2 + v5;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = *(_QWORD *)(v6 + v5);
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v6 + v5 + 8);
      *(_DWORD *)(v8 + 8) = 0;
      *(_QWORD *)(a2 + v5 + 24) = a2 + v5 + 40;
      result = a2 + v5 + 24;
      v10 = *(_DWORD *)(a2 + v5 + 12);
      *(_DWORD *)(result - 12) = *(_DWORD *)(v6 + v5 + 12);
      *(_DWORD *)(v8 + 12) = v10;
      v11 = *(_DWORD *)(a2 + v5 + 16);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v6 + v5 + 16);
      *(_DWORD *)(v8 + 16) = v11;
      *(_QWORD *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(v6 + v5 + 32))
        result = llvm::SmallVectorImpl<mlir::Value>::operator=(result, v8 + 24);
      v5 += 56;
    }
    while (v8 + 56 != v7);
    v12 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)v4;
      v14 = 56 * v12;
      v15 = *(void **)(v13 + v14 - 32);
      if ((void *)(v13 + v14 - 16) != v15)
        free(v15);
      llvm::deallocate_buffer(*(llvm **)(v13 + v14 - 56), (void *)(8 * *(unsigned int *)(v13 + v14 - 40)));
    }
  }
  return result;
}

uint64_t `anonymous namespace'::CurrentlyLive::Buffer::findSlotsFor(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t FirstSlotFor;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD v34[5];
  _OWORD v35[2];
  uint64_t v36;
  llvm *v37[2];
  void *v38[2];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[2];
  _QWORD v46[72];

  v46[70] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  if (a3 != 1)
  {
    v41 = -1;
    v42 = &v44;
    v43 = 0xA00000000;
    v45[0] = v46;
    v45[1] = (void *)0xA00000000;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = 40 * v11;
      v13 = *(_QWORD **)(a1 + 8);
      do
      {
        if (*v13 == *a2)
          goto LABEL_16;
        v13 += 5;
        v12 -= 40;
      }
      while (v12);
      v13 = (_QWORD *)(v10 + 40 * v11);
    }
    else
    {
      v13 = *(_QWORD **)(a1 + 8);
    }
LABEL_16:
    v14 = (uint64_t)v13 - v10;
    if (v14 != -40 && 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3) != v11)
    {
      v26 = (__int128 *)(v10 + 8 * (v14 >> 3));
      v27 = *v26;
      v28 = v26[1];
      v36 = *((_QWORD *)v26 + 4);
      v35[0] = v27;
      v35[1] = v28;
      v38[0] = 0;
      v39 = 0u;
      v40 = 0;
      *(_OWORD *)v37 = 0u;
      v38[1] = (char *)&v39 + 8;
      DWORD1(v39) = 2;
      v30 = 40 * v43;
      llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::insert_one_impl<llvm::SmallSetVector<mlir::Value,2u> const&>((uint64_t)v45, (uint64_t)v45[0] - 0x3333333333333328 * (v30 >> 3), (unint64_t)v37);
      v31 = (char *)v42 + v30;
      v32 = v35;
      goto LABEL_33;
    }
    v17 = a2[4];
    v18 = FirstSlotFor;
    if (v17)
      v18 = (FirstSlotFor + v17 - 1) / v17 * v17;
    v19 = a2[3] - a2[2] + v18;
    v34[0] = *a2;
    v34[1] = FirstSlotFor;
    v34[2] = v18;
    v34[3] = v19;
    v34[4] = v17;
    v38[0] = 0;
    v39 = 0u;
    v40 = 0;
    *(_OWORD *)v37 = 0u;
    v38[1] = (char *)&v39 + 8;
    DWORD1(v39) = 2;
    v20 = v43;
    if (!(_DWORD)v43)
    {
      v22 = (char *)v42 + 40 * v43;
LABEL_32:
      v29 = v22 - (_BYTE *)v42;
      llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::insert_one_impl<llvm::SmallSetVector<mlir::Value,2u> const&>((uint64_t)v45, (uint64_t)v45[0] - 0x3333333333333328 * ((v22 - (_BYTE *)v42) >> 3), (unint64_t)v37);
      v31 = (char *)v42 + v29;
      v32 = v34;
LABEL_33:
      llvm::SmallVectorImpl<mlir::detail::AllocRange>::insert_one_impl<mlir::detail::AllocRange const&>((uint64_t)&v42, (unint64_t)v31, (unint64_t)v32);
      if (v38[1] != (char *)&v39 + 8)
        free(v38[1]);
      llvm::deallocate_buffer(v37[0], (void *)(8 * LODWORD(v38[0])));
    }
    v21 = v19 - FirstSlotFor + 1;
    v22 = (char *)v42;
    while (1)
    {
      v23 = v20 >> 1;
      v24 = &v22[40 * (v20 >> 1)];
      v25 = *((_QWORD *)v24 + 1);
      if (FirstSlotFor == v25)
      {
        if (v21 >= *(_QWORD *)&v22[40 * v23 + 24] - FirstSlotFor + 1)
          goto LABEL_30;
      }
      else if (FirstSlotFor >= v25)
      {
LABEL_30:
        v22 = v24 + 40;
        v23 = v20 + ~v23;
      }
      v20 = v23;
      if (!v23)
        goto LABEL_32;
    }
  }
  if (v6 == -1)
    return 0;
  v7 = v6;
  v8 = *(unsigned int *)(a4 + 8);
  if (v8 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v8) = v7;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::insert(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD **v16;
  _QWORD *v17;

  if (!*(_DWORD *)(a1 + 8))
  {
    v6 = (_QWORD **)(a1 + 24);
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v7;
    if ((_DWORD)v8)
    {
      v10 = 8 * v8;
      v9 = *(_QWORD **)(a1 + 24);
      while (*v9 != *a2)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
        {
          v9 = &v7[v8];
          break;
        }
      }
    }
    if (v8 == v9 - v7)
    {
      v11 = *a2;
      if (v8 >= *(_DWORD *)(a1 + 36))
      {
        v16 = (_QWORD **)(a1 + 24);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8 + 1, 8);
        v6 = v16;
        v8 = *(unsigned int *)(a1 + 32);
        v7 = *(_QWORD **)(a1 + 24);
      }
      v7[v8] = v11;
      v12 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v12;
      if (v12 >= 3)
      {
        v13 = *v6;
        v14 = 8 * v12;
        do
        {
          v17 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v13, &v17) & 1) == 0)*llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)v13, v13, v17) = *v13;
          ++v13;
          v14 -= 8;
        }
        while (v14);
      }
      return 1;
    }
    return 0;
  }
  v17 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a2, &v17) & 1) != 0)return 0;
  *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)a2, a2, v17) = *a2;
  v4 = *a2;
  v5 = *(unsigned int *)(a1 + 32);
  if (v5 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 32);
  return 1;
}

void llvm::SmallSet<long long,2u,std::less<long long>>::insert(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  if (!*(_QWORD *)(a1 + 48))
  {
    v15 = *(uint64_t ***)a1;
    v16 = *(unsigned int *)(a1 + 8);
    v17 = *a2;
    if (!(_DWORD)v16)
      goto LABEL_21;
    v18 = 8 * v16;
    v9 = *(uint64_t ***)a1;
    while (*v9 != v17)
    {
      ++v9;
      v18 -= 8;
      if (!v18)
        goto LABEL_20;
    }
    if (v18)
    {
      v19 = 0;
      v14 = 1;
      goto LABEL_25;
    }
LABEL_20:
    if (v16 <= 1)
    {
LABEL_21:
      if (v16 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v16 + 1, 8);
        v16 = *(unsigned int *)(a1 + 8);
        v15 = *(uint64_t ***)a1;
      }
      v15[v16] = v17;
      v20 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v20;
      v9 = (uint64_t **)(*(_QWORD *)a1 + 8 * v20 - 8);
      v14 = 1;
      goto LABEL_24;
    }
    v7 = (uint64_t **)(a1 + 40);
    do
    {
      v22 = *(uint64_t **)(a1 + 40);
      v23 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v16 - 8);
      v24 = (uint64_t **)(a1 + 40);
      v25 = (uint64_t **)(a1 + 40);
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v22;
            v26 = v22[4];
            if (v23 >= v26)
              break;
            v22 = *v25;
            v24 = v25;
            if (!*v25)
              goto LABEL_37;
          }
          if (v26 >= v23)
            break;
          v22 = v25[1];
          if (!v22)
          {
            v24 = v25 + 1;
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_37:
        v27 = (uint64_t *)operator new(0x28uLL);
        v27[4] = v23;
        *v27 = 0;
        v27[1] = 0;
        v27[2] = (uint64_t)v25;
        *v24 = v27;
        v28 = **(_QWORD **)(a1 + 32);
        if (v28)
        {
          *(_QWORD *)(a1 + 32) = v28;
          v21 = *v24;
        }
        else
        {
          v21 = v27;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v21);
        ++*(_QWORD *)(a1 + 48);
        LODWORD(v16) = *(_DWORD *)(a1 + 8);
      }
      LODWORD(v16) = v16 - 1;
      *(_DWORD *)(a1 + 8) = v16;
    }
    while ((_DWORD)v16);
    v8 = *a2;
    v29 = *v7;
    v9 = (uint64_t **)(a1 + 40);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v29;
          v30 = v29[4];
          if ((uint64_t)v8 >= v30)
            break;
          v29 = *v9;
          v7 = v9;
          if (!*v9)
            goto LABEL_9;
        }
        if (v30 >= (uint64_t)v8)
          break;
        v29 = v9[1];
        if (!v29)
        {
LABEL_8:
          v7 = v9 + 1;
          goto LABEL_9;
        }
      }
      v14 = 0;
      goto LABEL_24;
    }
LABEL_9:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x28uLL);
    v9[4] = v8;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 32);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 32) = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v13);
    v14 = 0;
    ++*(_QWORD *)(a1 + 48);
LABEL_24:
    v19 = 1;
    goto LABEL_25;
  }
  v7 = (uint64_t **)(a1 + 40);
  v6 = *(uint64_t **)(a1 + 40);
  v8 = *a2;
  if (!v6)
  {
    v9 = (uint64_t **)(a1 + 40);
    goto LABEL_9;
  }
  while (1)
  {
    while (1)
    {
      v9 = (uint64_t **)v6;
      v10 = (uint64_t *)v6[4];
      if ((uint64_t)v8 >= (uint64_t)v10)
        break;
      v6 = *v9;
      v7 = v9;
      if (!*v9)
        goto LABEL_9;
    }
    if ((uint64_t)v10 >= (uint64_t)v8)
      break;
    v6 = v9[1];
    if (!v6)
      goto LABEL_8;
  }
  v14 = 0;
  v19 = 0;
LABEL_25:
  *(_BYTE *)(a3 + 8) = v14;
  *(_QWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = v19;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (*(_BYTE *)(a1 + 176))
  {
    v2 = *(_QWORD **)(a1 + 152);
    if (v2)
    {
      v3 = *(_QWORD **)(a1 + 160);
      v4 = *(void **)(a1 + 152);
      if (v3 != v2)
      {
        do
          v3 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v3 - 1);
        while (v3 != v2);
        v4 = *(void **)(a1 + 152);
      }
      *(_QWORD *)(a1 + 160) = v2;
      operator delete(v4);
    }
    v5 = *(_QWORD **)(a1 + 128);
    if (v5)
    {
      v6 = *(_QWORD **)(a1 + 136);
      v7 = *(void **)(a1 + 128);
      if (v6 != v5)
      {
        do
        {
          v9 = *--v6;
          v8 = v9;
          *v6 = 0;
          if (v9)
            MEMORY[0x20BD002D4](v8, 0x1000C8077774924);
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 128);
      }
      *(_QWORD *)(a1 + 136) = v5;
      operator delete(v7);
    }
    v10 = *(void **)(a1 + 16);
    if (v10 != (void *)(a1 + 32))
      free(v10);
  }
  return a1;
}

_QWORD *std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[19];
    if (v3)
    {
      v4 = v2[20];
      v5 = (void *)v2[19];
      if (v4 != v3)
      {
        do
          v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 8);
        while (v4 != v3);
        v5 = (void *)v2[19];
      }
      v2[20] = v3;
      operator delete(v5);
    }
    v6 = (_QWORD *)v2[16];
    if (v6)
    {
      v7 = (_QWORD *)v2[17];
      v8 = (void *)v2[16];
      if (v7 != v6)
      {
        do
        {
          v10 = *--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            MEMORY[0x20BD002D4](v9, 0x1000C8077774924);
        }
        while (v7 != v6);
        v8 = (void *)v2[16];
      }
      v2[17] = v6;
      operator delete(v8);
    }
    v11 = (_QWORD *)v2[2];
    if (v11 != v2 + 4)
      free(v11);
    MEMORY[0x20BD002F8](v2, 0x10A0C403EC7AAD9);
  }
  return a1;
}

uint64_t `anonymous namespace'::CurrentlyLive::Buffer::findFirstSlotFor(uint64_t a1, _QWORD *a2)
{
  int64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 16);
  if (*(_QWORD *)a1 == -1)
  {
    if (v3)
    {
      v4 = a1 + 8;
      if (v3 != 1)
        goto LABEL_26;
      return *(_QWORD *)(*(_QWORD *)v4 + 24) + 1;
    }
    return 0;
  }
  if (!v3)
  {
    v9 = a2[4];
    if (v9)
      v10 = (v9 - 1) / v9 * v9;
    else
      v10 = 0;
    v14 = a2[3] - a2[2];
    if ((uint64_t)(v14 + v10) > v2)
      return -1;
    if (v9)
      v9 *= (v9 - 1) / v9;
    if ((uint64_t)(v14 + v9) > v2)
      return 0;
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v4 = a1 + 8;
  v6 = *(_QWORD *)(v5 + 40 * v3 - 16);
  v7 = a2[4];
  if (v7)
    v8 = (v7 + v6) / v7 * v7;
  else
    v8 = v6 + 1;
  v11 = a2[3] - a2[2];
  if ((uint64_t)(v11 + v8) > v2)
    return -1;
  if (v3 != 1)
    goto LABEL_26;
  v12 = *(_QWORD *)(*(_QWORD *)v4 + 24);
  if (v7)
    v13 = (v7 + v12) / v7 * v7;
  else
    v13 = v12 + 1;
  if ((uint64_t)(v11 + v13) <= v2)
    return *(_QWORD *)(*(_QWORD *)v4 + 24) + 1;
  v3 = 1;
LABEL_26:
  v16 = a2[4];
  v17 = 40 * v3;
  v18 = (uint64_t *)(*(_QWORD *)v4 + 24);
  v19 = -1;
  do
  {
    v20 = *(v18 - 2);
    v21 = *v18;
    v22 = v19 + 1;
    if (v20 > v19 + 1)
    {
      if (v16)
        v22 = (v16 + v19) / v16 * v16;
      if (a2[3] - a2[2] + v22 < v20)
        break;
    }
    v18 += 5;
    v19 = v21;
    v17 -= 40;
  }
  while (v17);
  return v19 + 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &unk_254519000;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &unk_254519000;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = (_QWORD *)&unk_254519000;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[373] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 8 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 8 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_6;
      }
      result = 0;
      if (v16)
        v13 = v16;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_6:
  *a3 = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  unint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (unint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

unint64_t llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::insert_one_impl<llvm::SmallSetVector<mlir::Value,2u> const&>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  char *Address;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  llvm **v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL4 v14;

  if (*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8) == a2)
    llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::push_back(a1, a3);
  v4 = a2 - *(_QWORD *)a1;
  Address = llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::reserveForParamAndGetAddress(a1, a3, 1);
  v6 = *(_QWORD *)a1 + v4;
  v7 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(v7 - 56);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v7 - 48);
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v7 - 40);
  *(_DWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  *(_QWORD *)(v7 + 32) = 0x200000000;
  if (*(_DWORD *)(v7 - 24))
    llvm::SmallVectorImpl<mlir::Value>::operator=(v7 + 24, v7 - 32);
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = (llvm **)(*(_QWORD *)a1 + 56 * v9 - 56);
  if (v10 != (llvm **)v6)
    llvm::deallocate_buffer(*v10, (void *)(8 * *(unsigned int *)(*(_QWORD *)a1 + 56 * v9 - 40)));
  v11 = v9 + 1;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = v8 + 56 * v11;
  v14 = (unint64_t)Address >= v6 && (unint64_t)Address < v12;
  llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::operator=(v6, (uint64_t)&Address[56 * v14]);
  return v6;
}

void llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::push_back(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::reserveForParamAndGetAddress(a1, a2, 1);
  v3 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 0;
  llvm::deallocate_buffer(0, 0);
}

void sub_20707B088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *buffer;
  void *v5;
  unsigned int v6;
  unsigned int v8;

  v3 = *(unsigned int *)(v1 + 16);
  *(_DWORD *)(v2 + 16) = v3;
  if ((_DWORD)v3)
  {
    buffer = llvm::allocate_buffer(8 * v3, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = buffer;
    *(_QWORD *)(v2 + 8) = *(_QWORD *)(v1 + 8);
    memcpy(buffer, *(const void **)v1, 8 * *(unsigned int *)(v2 + 16));
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
  }
  v5 = (void *)(v2 + 40);
  *(_QWORD *)(v2 + 24) = v2 + 40;
  *(_QWORD *)(v2 + 32) = 0x200000000;
  v6 = *(_DWORD *)(v1 + 32);
  if (v2 != v1 && v6 != 0)
  {
    if (v6 < 3)
    {
      v8 = *(_DWORD *)(v1 + 32);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 24, (void *)(v2 + 40), *(unsigned int *)(v1 + 32), 8);
      v8 = *(_DWORD *)(v1 + 32);
      if (!v8)
      {
LABEL_13:
        *(_DWORD *)(v2 + 32) = v6;
        goto LABEL_14;
      }
      v5 = *(void **)(v2 + 24);
    }
    memcpy(v5, *(const void **)(v1 + 24), 8 * v8);
    goto LABEL_13;
  }
LABEL_14:
  ++*(_DWORD *)(v0 + 8);
}

char *llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - *(_QWORD *)a1) >> 3);
      v17 = 0;
      v14 = a1 + 16;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 56, &v17);
      llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(_QWORD *)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      *(_DWORD *)(a1 + 12) = v16;
      return &v15[56 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 16;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 56, &v17);
      llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(_QWORD *)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
    }
  }
  return (char *)v3;
}

uint64_t llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::operator=(uint64_t result, uint64_t a2)
{
  if (a2 != result)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * *(unsigned int *)(result + 16)));
  return result;
}

uint64_t llvm::SmallVectorImpl<mlir::detail::AllocRange>::insert_one_impl<mlir::detail::AllocRange const&>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  _BOOL4 v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v26;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a1 + 40 * v6;
  if (v7 == a2)
  {
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      v28 = v6 + 1;
      if (v5 <= a3 && a2 > a3)
      {
        v31 = a3 - v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v28, 40);
        v5 = *(_QWORD *)a1;
        a3 = *(_QWORD *)a1 + v31;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v28, 40);
        v5 = *(_QWORD *)a1;
      }
    }
    v22 = v5 + 40 * *(unsigned int *)(a1 + 8);
    v23 = *(_OWORD *)a3;
    v24 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)v22 = v23;
    *(_OWORD *)(v22 + 16) = v24;
    LODWORD(v22) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v22;
    return *(_QWORD *)a1 + 40 * v22 - 40;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v5) >> 3);
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      v26 = v6 + 1;
      if (v5 <= a3 && v7 > a3)
      {
        v30 = a3 - v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v26, 40);
        v5 = *(_QWORD *)a1;
        a3 = *(_QWORD *)a1 + v30;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v26, 40);
        v5 = *(_QWORD *)a1;
      }
    }
    v9 = (_OWORD *)(v5 + 40 * v8);
    v10 = v5 + 40 * *(unsigned int *)(a1 + 8);
    v11 = *(_OWORD *)(v10 - 24);
    *(_OWORD *)v10 = *(_OWORD *)(v10 - 40);
    *(_OWORD *)(v10 + 16) = v11;
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v10 - 8);
    v12 = *(_QWORD *)a1;
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_QWORD *)a1 + 40 * v13 - 40;
    if ((_OWORD *)v14 != v9)
    {
      memmove((char *)v9 + 40, v9, v14 - (_QWORD)v9);
      v13 = *(_DWORD *)(a1 + 8);
      v12 = *(_QWORD *)a1;
    }
    v15 = v13 + 1;
    *(_DWORD *)(a1 + 8) = v15;
    v16 = v12 + 40 * v15;
    v18 = a3 >= (unint64_t)v9 && a3 < v16;
    v19 = a3 + 40 * v18;
    v20 = *(_OWORD *)v19;
    v21 = *(_OWORD *)(v19 + 16);
    *((_QWORD *)v9 + 4) = *(_QWORD *)(v19 + 32);
    *v9 = v20;
    v9[1] = v21;
  }
  return (uint64_t)v9;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::{lambda(`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&)#1} &,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match*>(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  uint64_t v41;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      if (*((_QWORD *)a2 - 1) < *(_QWORD *)(a1 + 40))
      {
        result = *(__n128 *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)(a1 + 32);
        v11 = *((_OWORD *)a2 - 2);
        v10 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *((_OWORD *)a2 - 3);
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v10;
        *((_OWORD *)a2 - 2) = v8;
        *((_OWORD *)a2 - 1) = v9;
        *((__n128 *)a2 - 3) = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v23 = a4;
      v24 = a3 >> 1;
      v25 = a1 + 48 * (a3 >> 1);
      v26 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v28 = v23 + 48 * v24;
        v29 = v23 + 48 * a3;
        v30 = v28;
        while (v30 != v29)
        {
          if (*(_QWORD *)(v30 + 40) >= *(_QWORD *)(v23 + 40))
          {
            result = *(__n128 *)v23;
            v31 = *(_OWORD *)(v23 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v23 + 16);
            *(_OWORD *)(v7 + 32) = v31;
            *(__n128 *)v7 = result;
            v23 += 48;
          }
          else
          {
            result = *(__n128 *)v30;
            v32 = *(_OWORD *)(v30 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v30 + 16);
            *(_OWORD *)(v7 + 32) = v32;
            *(__n128 *)v7 = result;
            v30 += 48;
          }
          v7 += 48;
          if (v23 == v28)
          {
            if (v30 != v29)
            {
              v36 = 0;
              do
              {
                v37 = v7 + v36;
                result = *(__n128 *)(v30 + v36);
                v38 = *(_OWORD *)(v30 + v36 + 32);
                *(_OWORD *)(v37 + 16) = *(_OWORD *)(v30 + v36 + 16);
                *(_OWORD *)(v37 + 32) = v38;
                *(__n128 *)v37 = result;
                v36 += 48;
              }
              while (v30 + v36 != v29);
            }
            return result;
          }
        }
        if (v23 != v28)
        {
          v33 = 0;
          do
          {
            v34 = v7 + v33;
            result = *(__n128 *)(v23 + v33);
            v35 = *(_OWORD *)(v23 + v33 + 32);
            *(_OWORD *)(v34 + 16) = *(_OWORD *)(v23 + v33 + 16);
            *(_OWORD *)(v34 + 32) = v35;
            *(__n128 *)v34 = result;
            v33 += 48;
          }
          while (v23 + v33 != v28);
        }
      }
      else
      {
      }
    }
    else if ((char *)a1 != a2)
    {
      v13 = a1 + 48;
      if ((char *)(a1 + 48) != a2)
      {
        v14 = 0;
        v15 = a1;
        do
        {
          v17 = *(_QWORD *)(v15 + 88);
          v18 = *(_QWORD *)(v15 + 40);
          v15 = v13;
          if (v17 < v18)
          {
            v39 = *(__n128 *)v13;
            v40 = *(_OWORD *)(v13 + 16);
            v41 = *(_QWORD *)(v13 + 32);
            v19 = v14;
            do
            {
              v20 = (_OWORD *)(a1 + v19);
              v21 = *(_OWORD *)(a1 + v19 + 16);
              v20[3] = *(_OWORD *)(a1 + v19);
              v20[4] = v21;
              v20[5] = *(_OWORD *)(a1 + v19 + 32);
              if (!v19)
              {
                v16 = a1;
                goto LABEL_10;
              }
              v19 -= 48;
            }
            while (v17 < *((_QWORD *)v20 - 1));
            v16 = a1 + v19 + 48;
LABEL_10:
            result = v39;
            *(__n128 *)v16 = v39;
            *(_OWORD *)(v16 + 16) = v40;
            *(_QWORD *)(v16 + 32) = v41;
            *(_QWORD *)(v16 + 40) = v17;
          }
          v13 = v15 + 48;
          v14 += 48;
        }
        while ((char *)(v15 + 48) != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::{lambda(`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&)#1} &,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match*>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  __n128 *v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v10 = (__n128 *)(a2 - 48);
      if (*(_QWORD *)(a2 - 8) >= *(_QWORD *)(a1 + 40))
      {
        v26 = *(__n128 *)a1;
        v27 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(a4 + 32) = v27;
        *(__n128 *)a4 = v26;
        result = *v10;
        v13 = *(_OWORD *)(a2 - 32);
        v14 = *(_OWORD *)(a2 - 16);
      }
      else
      {
        v11 = *v10;
        v12 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a4 + 32) = v12;
        *(__n128 *)a4 = v11;
        result = *(__n128 *)a1;
        v13 = *(_OWORD *)(a1 + 16);
        v14 = *(_OWORD *)(a1 + 32);
      }
      *(_OWORD *)(a4 + 64) = v13;
      *(_OWORD *)(a4 + 80) = v14;
      *(__n128 *)(a4 + 48) = result;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      v9 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a4 + 32) = v9;
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v28 = a3 >> 1;
      v29 = 48 * (a3 >> 1);
      v30 = a1 + v29;
      v31 = v8 + v29;
      while (v31 != a2)
      {
        if (*(_QWORD *)(v31 + 40) >= *(_QWORD *)(v8 + 40))
        {
          result = *(__n128 *)v8;
          v32 = *(_OWORD *)(v8 + 32);
          *(_OWORD *)(v5 + 16) = *(_OWORD *)(v8 + 16);
          *(_OWORD *)(v5 + 32) = v32;
          *(__n128 *)v5 = result;
          v8 += 48;
        }
        else
        {
          result = *(__n128 *)v31;
          v33 = *(_OWORD *)(v31 + 32);
          *(_OWORD *)(v5 + 16) = *(_OWORD *)(v31 + 16);
          *(_OWORD *)(v5 + 32) = v33;
          *(__n128 *)v5 = result;
          v31 += 48;
        }
        v5 += 48;
        if (v8 == v30)
        {
          if (v31 != a2)
          {
            v37 = 0;
            do
            {
              v38 = v5 + v37;
              result = *(__n128 *)(v31 + v37);
              v39 = *(_OWORD *)(v31 + v37 + 32);
              *(_OWORD *)(v38 + 16) = *(_OWORD *)(v31 + v37 + 16);
              *(_OWORD *)(v38 + 32) = v39;
              *(__n128 *)v38 = result;
              v37 += 48;
            }
            while (v31 + v37 != a2);
          }
          return result;
        }
      }
      if (v8 != v30)
      {
        v34 = 0;
        do
        {
          v35 = v5 + v34;
          result = *(__n128 *)(v8 + v34);
          v36 = *(_OWORD *)(v8 + v34 + 32);
          *(_OWORD *)(v35 + 16) = *(_OWORD *)(v8 + v34 + 16);
          *(_OWORD *)(v35 + 32) = v36;
          *(__n128 *)v35 = result;
          v34 += 48;
        }
        while (v8 + v34 != v30);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      v15 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a4 + 32) = v15;
      *(__n128 *)a4 = result;
      v16 = a1 + 48;
      if (a1 + 48 != a2)
      {
        v17 = 0;
        v18 = (_OWORD *)a4;
        do
        {
          v20 = v8;
          v21 = v18;
          v8 = v16;
          v18 += 3;
          v22 = v18;
          if (*(_QWORD *)(v20 + 88) < *((_QWORD *)v21 + 5))
          {
            v23 = v21[1];
            *v18 = *v21;
            v18[1] = v23;
            v18[2] = v21[2];
            v22 = (_OWORD *)a4;
            if (v21 != (_OWORD *)a4)
            {
              v24 = v17;
              while (1)
              {
                v22 = (_OWORD *)(a4 + v24);
                if (*(_QWORD *)(v20 + 88) >= *(_QWORD *)(a4 + v24 - 8))
                  break;
                v25 = *(v22 - 2);
                *v22 = *(v22 - 3);
                v22[1] = v25;
                v22[2] = *(v22 - 1);
                v24 -= 48;
                if (!v24)
                {
                  v22 = (_OWORD *)a4;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v8;
          v19 = *(_OWORD *)(v8 + 32);
          v22[1] = *(_OWORD *)(v8 + 16);
          v22[2] = v19;
          *v22 = result;
          v16 = v8 + 48;
          v17 += 48;
        }
        while (v8 + 48 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::{lambda(`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&)#1} &,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match*>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 *v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;

  if (a5)
  {
    v7 = a5;
    while (v7 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = -a4;
      while (1)
      {
        v12 = &result[v10];
        if (*((_QWORD *)a2 + 5) < *(_QWORD *)&result[v10 + 40])
          break;
        v10 += 48;
        v71 = __CFADD__(v11++, 1);
        if (v71)
          return result;
      }
      v13 = -v11;
      if (-v11 >= v7)
      {
        if (v11 == -1)
        {
          v84 = (__int128 *)&result[v10];
          v105 = v84[1];
          v110 = v84[2];
          v101 = *v84;
          v85 = *(_OWORD *)a2;
          v86 = *((_OWORD *)a2 + 2);
          v84[1] = *((_OWORD *)a2 + 1);
          v84[2] = v86;
          *v84 = v85;
          *((_OWORD *)a2 + 1) = v105;
          *((_OWORD *)a2 + 2) = v110;
          *(_OWORD *)a2 = v101;
          return result;
        }
        if (v11 > 0)
          v13 = 1 - v11;
        v23 = v13 >> 1;
        if (a3 == a2)
        {
          v25 = a3;
        }
        else
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
          v25 = a2;
          do
          {
            v26 = v24 >> 1;
            v27 = &v25[48 * (v24 >> 1)];
            v28 = *((_QWORD *)v27 + 5);
            v29 = v27 + 48;
            v24 += ~(v24 >> 1);
            if (v28 < *(_QWORD *)&result[48 * v23 + 40 + v10])
              v25 = v29;
            else
              v24 = v26;
          }
          while (v24);
        }
        v18 = &result[48 * v23 + v10];
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 4);
      }
      else
      {
        if (v7 >= 0)
          v14 = v7;
        else
          v14 = v7 + 1;
        v15 = v14 >> 1;
        if (v12 == a2)
        {
          v16 = &result[v10];
          v18 = a2;
        }
        else
        {
          v16 = &result[v10];
          v17 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 4);
          v18 = &result[v10];
          do
          {
            v19 = v17 >> 1;
            v20 = &v18[48 * (v17 >> 1)];
            v21 = *((_QWORD *)v20 + 5);
            v22 = v20 + 48;
            v17 += ~(v17 >> 1);
            if (*(_QWORD *)&a2[48 * v15 + 40] < v21)
              v17 = v19;
            else
              v18 = v22;
          }
          while (v17);
        }
        v25 = &a2[48 * v15];
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v16) >> 4);
      }
      v30 = v25;
      v96 = a6;
      if (v18 != a2)
      {
        v30 = v18;
        if (a2 != v25)
        {
          if (v18 + 48 == a2)
          {
            v103 = *((_OWORD *)v18 + 1);
            v107 = *((_OWORD *)v18 + 2);
            v98 = *(_OWORD *)v18;
            v37 = (char *)(v25 - a2);
            v38 = a3;
            v91 = a7;
            v93 = v23;
            v39 = v15;
            memmove(v18, a2, v25 - a2);
            a7 = v91;
            v23 = v93;
            v15 = v39;
            a3 = v38;
            v30 = &v37[(_QWORD)v18];
            *(_OWORD *)v30 = v98;
            *((_OWORD *)v30 + 1) = v103;
            *((_OWORD *)v30 + 2) = v107;
          }
          else if (a2 + 48 == v25)
          {
            v30 = v18 + 48;
            v104 = *((_OWORD *)v25 - 2);
            v108 = *((_OWORD *)v25 - 1);
            v99 = *((_OWORD *)v25 - 3);
            if (v25 - 48 != v18)
            {
              v40 = a3;
              v92 = a7;
              v94 = v23;
              v41 = v15;
              memmove(v18 + 48, v18, v25 - 48 - v18);
              a7 = v92;
              v23 = v94;
              v15 = v41;
              a3 = v40;
            }
            *((_OWORD *)v18 + 1) = v104;
            *((_OWORD *)v18 + 2) = v108;
            *(_OWORD *)v18 = v99;
          }
          else
          {
            v31 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 4);
            if (v31 == 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 4))
            {
              v32 = 0;
              do
              {
                v33 = &a2[v32];
                v34 = &v18[v32];
                v102 = *(_OWORD *)&v18[v32 + 16];
                v106 = *(_OWORD *)&v18[v32 + 32];
                v97 = *(_OWORD *)&v18[v32];
                v35 = *(_OWORD *)&a2[v32];
                v36 = *(_OWORD *)&a2[v32 + 32];
                *((_OWORD *)v34 + 1) = *(_OWORD *)&a2[v32 + 16];
                *((_OWORD *)v34 + 2) = v36;
                *(_OWORD *)v34 = v35;
                *((_OWORD *)v33 + 1) = v102;
                *((_OWORD *)v33 + 2) = v106;
                *(_OWORD *)v33 = v97;
                if (&v18[v32 + 48] == a2)
                  break;
                v32 += 48;
              }
              while (v33 + 48 != v25);
              v30 = a2;
            }
            else
            {
              v42 = 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 4);
              v43 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 4);
              do
              {
                v44 = v43;
                v43 = v42;
                v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                v45 = &v18[48 * v43];
                do
                {
                  v46 = *((_OWORD *)v45 - 3);
                  v47 = *((_OWORD *)v45 - 2);
                  v48 = *((_OWORD *)v45 - 1);
                  v45 -= 48;
                  v109 = v48;
                  v100 = v46;
                  v49 = &v45[16 * ((a2 - v18) >> 4)];
                  v50 = v45;
                  do
                  {
                    v51 = v50;
                    v50 = v49;
                    v52 = *(_OWORD *)v49;
                    v53 = *((_OWORD *)v49 + 2);
                    *((_OWORD *)v51 + 1) = *((_OWORD *)v49 + 1);
                    *((_OWORD *)v51 + 2) = v53;
                    *(_OWORD *)v51 = v52;
                    v54 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v49) >> 4);
                    v55 = __OFSUB__(v31, v54);
                    v57 = v31 - v54;
                    v56 = (v57 < 0) ^ v55;
                    v49 = &v18[48 * v57];
                    if (v56)
                      v49 = &v50[16 * ((a2 - v18) >> 4)];
                  }
                  while (v49 != v45);
                  *((_OWORD *)v50 + 1) = v47;
                  *((_OWORD *)v50 + 2) = v109;
                  *(_OWORD *)v50 = v100;
                }
                while (v45 != v18);
              }
              v30 = &v18[16 * ((v25 - a2) >> 4)];
            }
          }
        }
      }
      a4 = -(v23 + v11);
      v58 = v7 - v15;
      if (v23 + v15 >= v7 - (v23 + v15) - v11)
      {
        v95 = v23;
        v61 = -(v23 + v11);
        v62 = v15;
        v59 = a7;
        v25 = v18;
        v58 = v62;
        a4 = v95;
        a3 = v30;
      }
      else
      {
        v59 = a7;
        v60 = a3;
        a3 = v60;
        v12 = v30;
      }
      v7 = v58;
      result = v12;
      a2 = v25;
      a6 = v96;
      a7 = v59;
      if (!v58)
        return result;
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        v75 = 0;
        do
        {
          v76 = &a6[v75];
          v77 = *(_OWORD *)&result[v75];
          v78 = *(_OWORD *)&result[v75 + 32];
          *((_OWORD *)v76 + 1) = *(_OWORD *)&result[v75 + 16];
          *((_OWORD *)v76 + 2) = v78;
          *(_OWORD *)v76 = v77;
          v75 += 48;
        }
        while (&result[v75] != a2);
        if (v75)
        {
          v79 = a6;
          while (a2 != a3)
          {
            if (*((_QWORD *)a2 + 5) >= *((_QWORD *)v79 + 5))
            {
              v80 = *(_OWORD *)v79;
              v81 = *((_OWORD *)v79 + 2);
              *((_OWORD *)result + 1) = *((_OWORD *)v79 + 1);
              *((_OWORD *)result + 2) = v81;
              *(_OWORD *)result = v80;
              v79 += 48;
            }
            else
            {
              v82 = *(_OWORD *)a2;
              v83 = *((_OWORD *)a2 + 2);
              *((_OWORD *)result + 1) = *((_OWORD *)a2 + 1);
              *((_OWORD *)result + 2) = v83;
              *(_OWORD *)result = v82;
              a2 += 48;
            }
            result += 48;
            if (&a6[v75] == v79)
              return result;
          }
          return (char *)memmove(result, v79, a6 - v79 + v75);
        }
      }
    }
    else if (a2 != a3)
    {
      v63 = 0;
      do
      {
        v64 = &a6[v63];
        v65 = *(_OWORD *)&a2[v63];
        v66 = *(_OWORD *)&a2[v63 + 32];
        *((_OWORD *)v64 + 1) = *(_OWORD *)&a2[v63 + 16];
        *((_OWORD *)v64 + 2) = v66;
        *(_OWORD *)v64 = v65;
        v63 += 48;
      }
      while (&a2[v63] != a3);
      if (v63)
      {
        v67 = &a6[v63];
        v68 = a3 - 48;
        while (a2 != result)
        {
          v69 = *((_QWORD *)v67 - 1);
          v70 = *((_QWORD *)a2 - 1);
          v71 = v69 >= v70;
          if (v69 >= v70)
            v72 = v67 - 48;
          else
            v72 = a2 - 48;
          if (v71)
            v67 -= 48;
          else
            a2 -= 48;
          v73 = *(_OWORD *)v72;
          v74 = *((_OWORD *)v72 + 2);
          *((_OWORD *)v68 + 1) = *((_OWORD *)v72 + 1);
          *((_OWORD *)v68 + 2) = v74;
          *(_OWORD *)v68 = v73;
          v68 -= 48;
          if (v67 == a6)
            return result;
        }
        v87 = 0;
        do
        {
          v88 = &v68[v87];
          v89 = *(_OWORD *)&v67[v87 - 48];
          v90 = *(_OWORD *)&v67[v87 - 16];
          *((_OWORD *)v88 + 1) = *(_OWORD *)&v67[v87 - 32];
          *((_OWORD *)v88 + 2) = v90;
          *(_OWORD *)v88 = v89;
          v87 -= 48;
        }
        while (&v67[v87] != a6);
      }
    }
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::erase(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  llvm **v6;
  llvm **v7;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  if (*a1 + 56 * v4 != a3)
    llvm::deallocate_buffer(*(llvm **)a2, (void *)(8 * *(unsigned int *)(a2 + 16)));
  if (v3 + 56 * v4 != a2)
  {
    v5 = v3 + 56 * v4;
    v6 = (llvm **)(v5 - 16);
    v7 = *(llvm ***)(v5 - 32);
    if (v6 != v7)
      free(v7);
    llvm::deallocate_buffer(*(v6 - 5), (void *)(8 * *((unsigned int *)v6 - 6)));
  }
  *((_DWORD *)a1 + 2) = -1227133513 * ((unint64_t)(a2 - v3) >> 3);
  return a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_254519000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_254519000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ConstantLike<Empty>]";
      v12 = 84;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_254519000;
    }
  }
  return v1[375];
}

uint64_t mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::MinimumAlignmentInterface>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_254519000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_254519000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MinimumAlignmentInterface]";
      v12 = 81;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::MinimumAlignmentInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_254519000;
    }
  }
  return v1[377];
}

ZinIrHalH13g *mlir::detail::walk<mlir::ForwardIterator>(mlir::ForwardIterator *a1, mlir::Operation *a2, uint64_t a3, int a4)
{
  ZinIrHalH13g *result;
  uint64_t v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  ZinIrHalH13g *i;
  _QWORD *v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;

  if (!a4)
    ((void (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
  result = (ZinIrHalH13g *)mlir::ForwardIterator::makeIterable(a1, a2);
  if (v8)
  {
    v9 = result;
    v10 = (ZinIrHalH13g *)((char *)result + 24 * v8);
    do
    {
      for (i = (ZinIrHalH13g *)*((_QWORD *)v9 + 1); i != v9; i = (ZinIrHalH13g *)*((_QWORD *)i + 1))
      {
        v12 = (_QWORD *)((char *)i - 8);
        if (!i)
          v12 = 0;
        v13 = (ZinIrHalH13g *)(v12 + 4);
        result = (ZinIrHalH13g *)v12[5];
        if (result != (ZinIrHalH13g *)(v12 + 4))
        {
          do
          {
            v14 = (ZinIrHalH13g *)*((_QWORD *)result + 1);
            ZinIrHalH13g::~ZinIrHalH13g(result);
            mlir::detail::walk<mlir::ForwardIterator>();
            result = v14;
          }
          while (v14 != v13);
        }
      }
      v9 = (ZinIrHalH13g *)((char *)v9 + 24);
    }
    while (v9 != v10);
  }
  if (a4 == 1)
    return (ZinIrHalH13g *)((uint64_t (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
  return result;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorERZNS7_10AllocRange16getRangeForValueENS1_5ValueExE3__0NS1_25MinimumAlignmentInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t ***a1, uint64_t a2)
{
  uint64_t InterfaceFor;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t canMapOperands;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  unsigned int v18;

  if (mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(a2))
  {
    if (a2)
    {
      InterfaceFor = mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(a2);
      v5 = *a1;
      v12[0] = a2;
      v12[1] = InterfaceFor;
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      {
        v6 = *(unsigned int *)(a2 + 68);
        if ((_DWORD)v6)
        {
          v7 = (uint64_t *)(*(_QWORD *)(a2 + 72) + 24);
          do
          {
            if (mlir::matchValueThrough<mlir::MemoryMapperInterface>(*v7, **v5))
            {
              v8 = *v5[1];
              canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v12);
              if (v8 < 0)
                v8 = -v8;
              v16 = 64;
              v15 = v8;
              if (canMapOperands >= 0)
                v10 = canMapOperands;
              else
                v10 = -canMapOperands;
              v14 = 64;
              v13 = v10;
              llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v15, (uint64_t)&v13, (uint64_t)&v17);
              if (v18 > 0x40)
              {
                v11 = *v17;
                MEMORY[0x20BD002D4](v17, 0x1000C8000313F17);
              }
              else
              {
                v11 = (unint64_t)v17;
              }
              if (v14 >= 0x41 && v13)
                MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
              if (v16 >= 0x41)
              {
                if (v15)
                  MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
              }
              *v5[1] = v10 * v8 / v11;
            }
            v7 += 4;
            --v6;
          }
          while (v6);
        }
      }
    }
  }
}

uint64_t mlir::matchValueThrough<mlir::MemoryMapperInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  if (a1 == a2)
    return 1;
  result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
  if (result)
  {
    v4 = result;
    result = mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(result);
    if (result)
    {
      if ((*(_BYTE *)(v4 + 46) & 0x80) != 0 && (v5 = *(unsigned int *)(v4 + 68), (_DWORD)v5))
      {
        v6 = v5 - 1;
        v7 = (uint64_t *)(*(_QWORD *)(v4 + 72) + 24);
        do
        {
          v8 = v6;
          v9 = *v7;
          v7 += 4;
          result = mlir::matchValueThrough<mlir::MemoryMapperInterface>(v9, a2);
          if ((result & 1) != 0)
            break;
          v6 = v8 - 1;
        }
        while (v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::SetVector<mlir::detail::AllocRange,llvm::SmallVector<mlir::detail::AllocRange,0u>,llvm::DenseSet<mlir::detail::AllocRange,llvm::DenseMapInfo<mlir::detail::AllocRange,void>>,0u>::insert(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v2 = (unint64_t)a2;
  v17 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::LookupBucketFor<mlir::detail::AllocRange>((uint64_t *)a1, a2, &v17);
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::InsertIntoBucketImpl<mlir::detail::AllocRange>(a1, v2, (unint64_t *)v2, v17);
    v6 = *(_OWORD *)v2;
    v7 = *(_OWORD *)(v2 + 16);
    v5[4] = *(_QWORD *)(v2 + 32);
    *(_OWORD *)v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    v8 = a1 + 24;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(unsigned int *)(a1 + 32);
    if (v10 >= *(_DWORD *)(a1 + 36))
    {
      v15 = v10 + 1;
      if (v9 <= v2 && v9 + 40 * v10 > v2)
      {
        v16 = v2 - v9;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 40), v15, 40);
        v9 = *(_QWORD *)(a1 + 24);
        v2 = v9 + v16;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 40), v15, 40);
        v9 = *(_QWORD *)(a1 + 24);
      }
    }
    v11 = v9 + 40 * *(unsigned int *)(a1 + 32);
    v12 = *(_OWORD *)v2;
    v13 = *(_OWORD *)(v2 + 16);
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(v2 + 32);
    *(_OWORD *)v11 = v12;
    *(_OWORD *)(v11 + 16) = v13;
    ++*(_DWORD *)(a1 + 32);
  }
  return v4 ^ 1u;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::LookupBucketFor<mlir::detail::AllocRange>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &unk_254519000;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &unk_254519000;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = (_QWORD *)&unk_254519000;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[373] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 40 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 40 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_6;
      }
      result = 0;
      if (v16)
        v13 = v16;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_6:
  *a3 = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::InsertIntoBucketImpl<mlir::detail::AllocRange>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::LookupBucketFor<mlir::detail::AllocRange>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char *llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  llvm *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char *v19;
  __int128 v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)llvm::allocate_buffer(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[40 * v10];
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
      do
      {
        *(_QWORD *)result = -4096;
        *(_OWORD *)(result + 8) = v12;
        *(_OWORD *)(result + 24) = v12;
        result += 40;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 40 * v3;
      v14 = v4;
      do
      {
        if ((*(_QWORD *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v21 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::LookupBucketFor<mlir::detail::AllocRange>((uint64_t *)a1, (unint64_t *)v14, &v21);
          v15 = (_OWORD *)v21;
          v16 = *(_OWORD *)v14;
          v17 = *((_OWORD *)v14 + 1);
          *(_QWORD *)(v21 + 32) = *((_QWORD *)v14 + 4);
          *v15 = v16;
          v15[1] = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm *)((char *)v14 + 40);
        v13 -= 40;
      }
      while (v13);
    }
    llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    v19 = &result[40 * v18];
    *(_QWORD *)&v20 = -1;
    *((_QWORD *)&v20 + 1) = -1;
    do
    {
      *(_QWORD *)result = -4096;
      *(_OWORD *)(result + 8) = v20;
      *(_OWORD *)(result + 24) = v20;
      result += 40;
    }
    while (result != v19);
  }
  return result;
}

uint64_t llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  uint64_t v6;
  __int128 v7;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(40 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = *(_QWORD *)result + 40 * v1;
    *(_QWORD *)&v7 = -1;
    *((_QWORD *)&v7 + 1) = -1;
    do
    {
      *(_QWORD *)v5 = -4096;
      *(_OWORD *)((char *)v5 + 8) = v7;
      *(_OWORD *)((char *)v5 + 24) = v7;
      v5 = (llvm *)((char *)v5 + 40);
    }
    while (v5 != (llvm *)v6);
  }
  return result;
}

void std::default_delete<mlir::Liveness>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  llvm *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    v4 = *(llvm **)(a2 + 8);
    if (v3)
    {
      v5 = 336 * v3;
      do
      {
        if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v6 = (void *)*((_QWORD *)v4 + 23);
          if (v6 != *((void **)v4 + 22))
            free(v6);
          v7 = (void *)*((_QWORD *)v4 + 3);
          if (v7 != *((void **)v4 + 2))
            free(v7);
        }
        v4 = (llvm *)((char *)v4 + 336);
        v5 -= 336;
      }
      while (v5);
      v4 = *(llvm **)(a2 + 8);
      v8 = 336 * *(unsigned int *)(a2 + 24);
    }
    else
    {
      v8 = 0;
    }
    llvm::deallocate_buffer(v4, (void *)v8);
  }
}

void sub_20707CDD4()
{
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>,mlir::Value>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(a1 + 120);
  v3 = a2 & 0xFFFFFFFFFFFFFFF9 | 4;
  v9 = v3;
  v10 = mlir::TypeID::get<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>();
  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::LookupBucketFor<std::pair<mlir::ProgramPoint,mlir::TypeID>>(v2, (uint64_t *)&v9, &v8);
  v5 = v8;
  if ((v4 & 1) != 0)
  {
    result = v8[2];
    if (result)
      return result;
  }
  else
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>((uint64_t)v2, (uint64_t)&v9, (uint64_t *)&v9, v8);
    *v5 = v9;
    v5[1] = v10;
    v5[2] = 0;
  }
  result = operator new();
  *(_QWORD *)(result + 56) = result + 88;
  *(_QWORD *)(result + 40) = result + 56;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 64) = result + 88;
  *(_QWORD *)(result + 72) = 4;
  *(_DWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 120) = result + 136;
  *(_QWORD *)(result + 128) = 0x400000000;
  *(_QWORD *)result = off_24C052C38;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 168) = result + 184;
  *(_QWORD *)(result + 176) = 0xA00000000;
  v7 = v5[2];
  v5[2] = result;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return v5[2];
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_254519000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_254519000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>]";
      v12 = 109;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_254519000;
    }
  }
  return v1[379];
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::LookupBucketFor<std::pair<mlir::ProgramPoint,mlir::TypeID>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((0x2500000000 * *a2) | (v6 >> 4) ^ (v6 >> 9))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 24 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v5 == *v13 && v6 == v14)
    {
      result = 1;
      *a3 = v13;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v15 != -4096 || v14 != -4096)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v14 == -8192;
        if (v20 && v15 == -8192)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v22 & v11));
        v15 = *v13;
        v14 = v13[1];
        if (v5 == *v13 && v6 == v14)
        {
          *a3 = v13;
          return result;
        }
      }
      result = 0;
      if (v17)
        v13 = v17;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::LookupBucketFor<std::pair<mlir::ProgramPoint,mlir::TypeID>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int64x2_t *v13;
  unint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  int64x2_t *v17;
  int64x2_t *v18;
  int64x2_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 3 * v3;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::moveFromOldBuckets(a1, v4, &v4[v10]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(v10 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 24 * v11 - 24;
    if (v12 < 0x18)
    {
      v13 = result;
LABEL_12:
      v18 = (int64x2_t *)((char *)result + 24 * v11);
      v19 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v13 = v19;
        v13 = (int64x2_t *)((char *)v13 + 24);
      }
      while (v13 != v18);
      return result;
    }
    v14 = v12 / 0x18 + 1;
    v13 = (int64x2_t *)((char *)result + 24 * (v14 & 0x1FFFFFFFFFFFFFFELL));
    v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v16 = v14 & 0x1FFFFFFFFFFFFFFELL;
    v17 = result;
    do
    {
      *v17 = v15;
      *(int64x2_t *)((char *)v17 + 24) = v15;
      v17 += 3;
      v16 -= 2;
    }
    while (v16);
    if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6 - 24;
    if (v8 < 0x18)
    {
      v9 = *(int64x2_t **)result;
LABEL_7:
      v14 = (int64x2_t *)((char *)v7 + 24 * v6);
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v9 = v15;
        v9 = (int64x2_t *)((char *)v9 + 24);
      }
      while (v9 != v14);
      goto LABEL_11;
    }
    v10 = v8 / 0x18 + 1;
    v9 = (int64x2_t *)((char *)v7 + 24 * (v10 & 0x1FFFFFFFFFFFFFFELL));
    v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v12 = v10 & 0x1FFFFFFFFFFFFFFELL;
    v13 = *(int64x2_t **)result;
    do
    {
      *v13 = v11;
      *(int64x2_t *)((char *)v13 + 24) = v11;
      v13 += 3;
      v12 -= 2;
    }
    while (v12);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_11:
  while (a2 != a3)
  {
    v16 = a2[1];
    if ((*a2 != -4096 || v16 != -4096) && (*a2 != -8192 || v16 != -8192))
    {
      v19 = 0;
      llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::LookupBucketFor<std::pair<mlir::ProgramPoint,mlir::TypeID>>((uint64_t *)v5, a2, &v19);
      v17 = v19;
      *v19 = *a2;
      v17[1] = a2[1];
      v18 = a2[2];
      a2[2] = 0;
      v17[2] = v18;
      ++*(_DWORD *)(v5 + 8);
      result = a2[2];
      a2[2] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 3;
  }
  return result;
}

void mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::~Lattice(mlir::AnalysisState *this)
{
  char *v2;
  char *v3;
  void *v4;

  *(_QWORD *)this = off_24C052C38;
  v2 = (char *)*((_QWORD *)this + 21);
  if (v2 != (char *)this + 184)
    free(v2);
  *(_QWORD *)this = &unk_24C052B38;
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 != (char *)this + 136)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4 != *((void **)this + 7))
    free(v4);
  mlir::AnalysisState::~AnalysisState(this);
}

{
  char *v2;
  char *v3;
  void *v4;

  *(_QWORD *)this = off_24C052C38;
  v2 = (char *)*((_QWORD *)this + 21);
  if (v2 != (char *)this + 184)
    free(v2);
  *(_QWORD *)this = &unk_24C052B38;
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 != (char *)this + 136)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4 != *((void **)this + 7))
    free(v4);
  mlir::AnalysisState::~AnalysisState(this);
}

void sub_20707D534()
{
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::dataflow::OffsetLatticeValue::print((llvm::raw_ostream *)(a1 + 168), a2);
}

uint64_t mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::meet()
{
  return 0;
}

uint64_t llvm::MapVector<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo,llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,llvm::SmallVector<std::pair<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo>,0u>>::try_emplace<mlir::dataflow::TensorAllocAnalysis::AllocInfo>(uint64_t a1, unint64_t *a2, __int128 *a3)
{
  unint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;

  v6 = *a2;
  v20 = 0;
  v21 = v6;
  LODWORD(v22) = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v21, &v20) & 1) != 0)return *(_QWORD *)(a1 + 24) + 24 * *((unsigned int *)v20 + 2);
  v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v21, &v21, v20);
  *v8 = v21;
  *((_DWORD *)v8 + 2) = v22;
  v9 = (_QWORD *)(a1 + 24);
  v10 = *(unsigned int *)(a1 + 32);
  *((_DWORD *)v8 + 2) = v10;
  if (v10 >= *(_DWORD *)(a1 + 36))
  {
    v21 = *a2;
    v22 = *a3;
    v13 = v10 + 1;
    v14 = *v9 + 24 * (unint64_t)v10 > (unint64_t)&v21;
    if (*v9 <= (unint64_t)&v21 && v14)
    {
      v19 = (char *)&v21 - *v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v13, 24);
      v15 = *(_QWORD *)(a1 + 24);
      v16 = (unint64_t *)&v19[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v13, 24);
      v15 = *(_QWORD *)(a1 + 24);
      v16 = &v21;
    }
    v17 = v15 + 24 * *(unsigned int *)(a1 + 32);
    v18 = *(_OWORD *)v16;
    *(_QWORD *)(v17 + 16) = v16[2];
    *(_OWORD *)v17 = v18;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 24) + 24 * v10;
    *(_QWORD *)v11 = *a2;
    *(_OWORD *)(v11 + 8) = *a3;
  }
  v12 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v12;
  return *v9 + 24 * v12 - 24;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &unk_254519000;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &unk_254519000;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = (_QWORD *)&unk_254519000;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[373] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 16 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 16 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_6;
      }
      result = 0;
      if (v16)
        v13 = v16;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_6:
  *a3 = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  llvm *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v17 = 16 * v3;
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          v19 = v25;
          *v25 = *(_QWORD *)v18;
          *((_DWORD *)v19 + 2) = *((_DWORD *)v18 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 16);
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = result + 2;
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v24 = &result[2 * v20];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t mlir::Pass::initialize()
{
  return 1;
}

BOOL llvm::cl::OptionValueCopy<long long>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence();
}

BOOL mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  uint64_t i;
  uint64_t v14;
  _QWORD v15[4];
  _QWORD v16[2];

  if (*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
    v11 = *(_QWORD *)(a1 + 128);
    for (i = *(_QWORD *)(a1 + 136); i != v11; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    *(_QWORD *)(a1 + 136) = v11;
    *(_BYTE *)(a1 + 176) = 0;
  }
  *(_BYTE *)(a1 + 256) = 1;
  v14 = a1;
  v15[0] = a1 + 264;
  v16[0] = a3;
  v16[1] = a4;
  v15[1] = a1;
  v15[2] = v16;
  v15[3] = &v14;
  return mlir::detail::pass_options::parseCommaSeparatedList(a1, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, unint64_t))llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>::callback_fn<mlir::LogicalResult mlir::detail::pass_options::parseCommaSeparatedList<llvm::cl::parser<std::string>,mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(std::string const&)#1}>(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::cl::parser<std::string> &,mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(std::string const&)#1} &&)::{lambda(llvm::StringRef)#1}>, (uint64_t)v15) == 0;
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

void mlir::Pass::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(_QWORD *a1)
{
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 208, a1);
}

llvm::raw_ostream *llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 208), (const llvm::cl::Option *)a1, a2);
}

void llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::setDefault(_QWORD *a1)
{
  uint64_t v2;
  std::string *v3;
  std::string *i;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;

  v2 = (uint64_t)(a1 + 16);
  v3 = (std::string *)a1[16];
  a1[24] = a1[23];
  for (i = (std::string *)a1[17]; i != v3; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  a1[17] = v3;
  v5 = a1[19];
  v6 = a1[20];
  while (v5 != v6)
  {
    v7 = (__int128 *)(v5 + 8);
    if ((unint64_t)v3 >= a1[18])
    {
      v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v2, (uint64_t)v7);
    }
    else
    {
      if (*(char *)(v5 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *v7;
        v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
        *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v8;
      }
      ++v3;
    }
    a1[17] = v3;
    v5 += 40;
  }
}

llvm::raw_ostream *mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::print(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  size_t v11;
  uint64_t i;
  int v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;

  if (*((_QWORD *)result + 17) != *((_QWORD *)result + 16))
  {
    v3 = result;
    v4 = (const void *)*((_QWORD *)result + 2);
    v5 = *((_QWORD *)result + 3);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
    if (v5 <= *((_QWORD *)this + 3) - (_QWORD)result)
    {
      if (v5)
      {
        memcpy(result, v4, v5);
        result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + v5);
        *((_QWORD *)this + 4) = result;
      }
      v6 = this;
    }
    else
    {
      v6 = llvm::raw_ostream::write(this, (const char *)v4, v5);
      result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
    }
    if ((unint64_t)result >= *((_QWORD *)v6 + 3))
    {
      result = llvm::raw_ostream::write(v6, 61);
    }
    else
    {
      *((_QWORD *)v6 + 4) = (char *)result + 1;
      *(_BYTE *)result = 61;
    }
    v8 = *((_QWORD *)v3 + 16);
    v7 = *((_QWORD *)v3 + 17);
    if (v8 != v7)
    {
      v9 = *(char *)(v8 + 23);
      v10 = v9 >= 0 ? (const char *)*((_QWORD *)v3 + 16) : *(const char **)v8;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(_QWORD *)(v8 + 8);
      result = llvm::raw_ostream::write(this, v10, v11);
      for (i = v8 + 24; i != v7; i += 24)
      {
        v16 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v16)
        {
          llvm::raw_ostream::write(this, ",", 1uLL);
        }
        else
        {
          *v16 = 44;
          ++*((_QWORD *)this + 4);
        }
        v13 = *(char *)(i + 23);
        if (v13 >= 0)
          v14 = (const char *)i;
        else
          v14 = *(const char **)i;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(i + 23);
        else
          v15 = *(_QWORD *)(i + 8);
        result = llvm::raw_ostream::write(this, v14, v15);
      }
    }
  }
  return result;
}

void mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string const*,std::string const*>(a1 + 128, *(std::string **)(a2 - 120), *(std::string **)(a2 - 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 - 112) - *(_QWORD *)(a2 - 120)) >> 3));
  *(_BYTE *)(a1 + 256) = 1;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 8);
}

_QWORD *`non-virtual thunk to'mlir::Pass::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(uint64_t a1)
{
  return llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)(a1 - 248));
}

void `non-virtual thunk to'mlir::Pass::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(uint64_t a1)
{
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)(a1 - 248));
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::print((llvm::raw_ostream *)(a1 - 248), a2);
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::getOption(uint64_t a1)
{
  return a1 - 248;
}

void `non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string const*,std::string const*>(a1 - 120, *(std::string **)(a2 - 120), *(std::string **)(a2 - 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 - 112) - *(_QWORD *)(a2 - 120)) >> 3));
  *(_BYTE *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
}

void mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(_QWORD *a1)
{
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(a1);
  JUMPOUT(0x20BD002F8);
}

_QWORD *`non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(uint64_t a1)
{
  return llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)(a1 - 248));
}

void `non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(uint64_t a1)
{
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)(a1 - 248));
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  uint64_t v10;
  uint64_t i;
  __int128 *p_dst;
  size_t v13;
  size_t v14;
  unint64_t v15;
  __int128 v16;
  std::string *v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  void *__p[2];
  unint64_t v41;
  __int128 __dst;
  unint64_t v43;

  __p[0] = 0;
  __p[1] = 0;
  v41 = 0;
  if (*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
    v10 = *(_QWORD *)(a1 + 128);
    for (i = *(_QWORD *)(a1 + 136); i != v10; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    *(_QWORD *)(a1 + 136) = v10;
    *(_BYTE *)(a1 + 176) = 0;
  }
  if (!__src)
  {
    __dst = 0uLL;
    v43 = 0;
    goto LABEL_20;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_51;
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v43 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_17;
  }
  HIBYTE(v43) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_17:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
LABEL_20:
  *(_OWORD *)__p = __dst;
  v41 = v43;
  v15 = *(_QWORD *)(a1 + 136);
  if (v15 >= *(_QWORD *)(a1 + 144))
  {
    v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 128, (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 136), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v16 = *(_OWORD *)__p;
      *(_QWORD *)(v15 + 16) = v41;
      *(_OWORD *)v15 = v16;
    }
    v17 = (std::string *)(v15 + 24);
  }
  *(_QWORD *)(a1 + 136) = v17;
  *(_WORD *)(a1 + 12) = a2;
  v19 = *(char **)(a1 + 192);
  v18 = *(_QWORD *)(a1 + 200);
  if ((unint64_t)v19 >= v18)
  {
    v21 = *(char **)(a1 + 184);
    v22 = (v19 - v21) >> 2;
    v23 = v22 + 1;
    if (!((unint64_t)(v22 + 1) >> 62))
    {
      v24 = v18 - (_QWORD)v21;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 62)
          goto LABEL_53;
        v26 = operator new(4 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *v27 = a2;
      v20 = v27 + 1;
      if (v19 != v21)
      {
        v29 = v19 - v21 - 4;
        if (v29 < 0x2C)
          goto LABEL_56;
        if ((unint64_t)(v21 - v26) < 0x20)
          goto LABEL_56;
        v30 = (v29 >> 2) + 1;
        v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        v32 = &v19[-v31];
        v27 = (_DWORD *)((char *)v27 - v31);
        v33 = &v26[4 * v22 - 16];
        v34 = v19 - 16;
        v35 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 8;
        }
        while (v35);
        v19 = v32;
        if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_56:
          do
          {
            v37 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *--v27 = v37;
          }
          while (v19 != v21);
        }
      }
      *(_QWORD *)(a1 + 184) = v27;
      *(_QWORD *)(a1 + 192) = v20;
      *(_QWORD *)(a1 + 200) = v28;
      if (v21)
        operator delete(v21);
      goto LABEL_47;
    }
LABEL_51:
    abort();
  }
  *(_DWORD *)v19 = a2;
  v20 = v19 + 4;
LABEL_47:
  *(_QWORD *)(a1 + 192) = v20;
  v38 = *(_QWORD *)(a1 + 240);
  if (!v38)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v38 + 48))(v38, __p);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  return 0;
}

void llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(_QWORD *a1)
{
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(a1);
  JUMPOUT(0x20BD002F8);
}

void std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0536F0;
  return result;
}

void std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0536F0;
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  std::string *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  void **v14;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[24 * v8];
  v12 = v10 + 1;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v3 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v13;
      --v10;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 3;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v14 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    while (v14 != v2)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t llvm::cl::OptionValueCopy<std::string>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  if (!*(_BYTE *)(a2 + 32) || !*(_BYTE *)(a1 + 32))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 8);
  if (v5 >= 0)
    v7 = (unsigned __int8 *)(a2 + 8);
  else
    v7 = *(unsigned __int8 **)(a2 + 8);
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v8 = v2 - 1;
  do
  {
    v10 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v9 = v10;
    v12 = *v7++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

_QWORD *llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  *a1 = &off_24C02E0D8;
  v2 = a1 + 27;
  v3 = (_QWORD *)a1[30];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[23];
  if (v5)
  {
    a1[24] = v5;
    operator delete(v5);
  }
  v6 = a1[19];
  if (v6)
  {
    v7 = a1[20];
    v8 = (void *)a1[19];
    if (v7 != v6)
    {
      v9 = a1[20];
      do
      {
        *(_QWORD *)(v9 - 40) = &off_24C02DE48;
        v9 -= 40;
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v6);
      v8 = (void *)a1[19];
    }
    a1[20] = v6;
    operator delete(v8);
  }
  v10 = a1[16];
  if (v10)
  {
    v11 = a1[17];
    v12 = (void *)a1[16];
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0)
          operator delete(*(void **)(v11 - 24));
        v11 -= 24;
      }
      while (v11 != v10);
      v12 = (void *)a1[16];
    }
    a1[17] = v10;
    operator delete(v12);
  }
  *a1 = &unk_24C02E140;
  v13 = (void *)a1[12];
  if (v13 != (void *)a1[11])
    free(v13);
  v14 = (_QWORD *)a1[8];
  if (v14 != a1 + 10)
    free(v14);
  return a1;
}

uint64_t mlir::detail::pass_options::parseCommaSeparatedList<llvm::cl::parser<std::string>,mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(std::string const&)#1}>(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::cl::parser<std::string> &,mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(std::string const&)#1} &&)::{lambda(llvm::StringRef)#1}::operator()(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  std::string *v13;
  char v14;
  void *__p[2];
  unint64_t v17;
  __int128 __dst;
  unint64_t v19;

  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  if (!__src)
  {
    __dst = 0uLL;
    v19 = 0;
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v19 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v19) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_10:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
LABEL_13:
  *(_OWORD *)__p = __dst;
  v17 = v19;
  v9 = **(_QWORD **)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 136);
  if (v10 >= *(_QWORD *)(v9 + 144))
  {
    v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v9 + 128, (uint64_t)__p);
    v14 = HIBYTE(v17);
    *(_QWORD *)(v9 + 136) = v13;
    if (v14 < 0)
LABEL_17:
      operator delete(__p[0]);
  }
  else
  {
    v11 = HIBYTE(v17);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(v9 + 136), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v12 = *(_OWORD *)__p;
      *(_QWORD *)(v10 + 16) = v17;
      *(_OWORD *)v10 = v12;
    }
    *(_QWORD *)(v9 + 136) = v10 + 24;
    if (v11 < 0)
      goto LABEL_17;
  }
  return 1;
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string const*,std::string const*>(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::string *v23;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        v18 = *(std::string **)a1;
      }
      else
      {
        v18 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v18;
        }
        while (v6 != a3);
        v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v18)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        --v12;
      }
      *(_QWORD *)(a1 + 8) = v18;
    }
    else
    {
      v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        v9 = *(std::string **)(a1 + 8);
      }
      v15 = v9;
      if (v13 != a3)
      {
        v15 = v9;
        v16 = v9;
        do
        {
          if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v16, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
          }
          else
          {
            v17 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
            v16->__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
          }
          ++v13;
          ++v16;
          ++v15;
        }
        while (v13 != a3);
      }
      *(_QWORD *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_46;
    v19 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v20 = 2 * v19;
    if (2 * v19 <= __sz)
      v20 = __sz;
    v21 = v19 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v20;
    if (v21 > 0xAAAAAAAAAAAAAAALL)
LABEL_46:
      abort();
    v22 = v21;
    v23 = (std::string *)operator new(24 * v21);
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v23;
    *(_QWORD *)(a1 + 16) = &v23[v22];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v23, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      }
      ++v6;
      ++v23;
    }
    *(_QWORD *)(a1 + 8) = v23;
  }
}

_QWORD *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, int **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[3];
  _QWORD *v37;
  const void *v38[3];
  const void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v35[0] = a3;
  v35[1] = a4;
  v38[0] = a2;
  v8 = llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)a1, (uint64_t)v35, v38, a5, a6);
  *(_QWORD *)(v8 + 200) = &unk_24C052030;
  v9 = v8 + 200;
  *(_BYTE *)(v8 + 208) = 0;
  *(_QWORD *)v8 = off_24C051FB0;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    v14 = (uint64_t *)a2[20];
    v15 = v11 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 != v14)
    {
      v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v14 - v19) < 0x20)
        goto LABEL_38;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      v20 = (uint64_t *)((char *)v20 - v24);
      v25 = &v19[8 * v15 - 16];
      v26 = v11 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *--v12;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v11 = v9;
    v13 = v11 + 1;
  }
  a2[21] = v13;
  v36[0] = &off_24C05A518;
  v36[1] = a1;
  v37 = v36;
  v38[0] = &off_24C05A518;
  v39 = v38;
  v38[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v38, a1 + 21);
  v30 = v39;
  if (v39 == v38)
  {
    v31 = 4;
    v30 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_28;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_28:
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v33 = 5;
LABEL_32:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = llvm::cl::parser<long long>::parse(a1 + 160, (_QWORD *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  *(_QWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::getValueExpectedFlagDefault()
{
  return 2;
}

_QWORD *mlir::Pass::Option<long long,llvm::cl::parser<long long>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_24C02E070;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::Pass::Option<long long,llvm::cl::parser<long long>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_24C02E070;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, a2);
}

void llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 152) || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 128))
  {
    v3 = *(_QWORD *)(a1 + 128);
    v4 = *(_QWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 152);
    v5[0] = &off_24C02DE08;
    v5[1] = v4;
    llvm::cl::parser<long long>::printOptionDiff((llvm *)(a1 + 160), a1, v3, (uint64_t)v5, a2);
  }
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::setDefault(uint64_t result)
{
  if (*(_BYTE *)(result + 152))
    *(_QWORD *)(result + 128) = *(_QWORD *)(result + 144);
  else
    *(_QWORD *)(result + 128) = 0;
  return result;
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::print(_QWORD *a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v4 = (const void *)a1[2];
  v5 = a1[3];
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  return llvm::raw_ostream::operator<<(this, a1[16]);
}

uint64_t mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 128) = *(_QWORD *)(a2 - 72);
  *(_BYTE *)(result + 208) = *(_BYTE *)(a2 + 8);
  return result;
}

void `non-virtual thunk to'mlir::Pass::Option<long long,llvm::cl::parser<long long>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 200) = off_24C02E070;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_24C02E140;
  v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112))
    free(v5);
  v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120))
    free(v6);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 200) = off_24C02E070;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_24C02E140;
  v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112))
    free(v5);
  v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120))
    free(v6);
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v4 = *(const void **)(a1 - 184);
  v5 = *(_QWORD *)(a1 - 176);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  return llvm::raw_ostream::operator<<(this, *(_QWORD *)(a1 - 72));
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::getOption(uint64_t a1)
{
  return a1 - 200;
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result - 72) = *(_QWORD *)(a2 - 72);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5)
{
  void *v10;
  uint64_t v11;
  _QWORD *GeneralCategory;
  uint64_t v13;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_24C02DE08;
  *(_QWORD *)a1 = off_24C02E070;
  *(_QWORD *)(a1 + 160) = &unk_24C02E288;
  *(_QWORD *)(a1 + 168) = &off_24C0536A8;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_24C02E070;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_24C02E070;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 200) = off_24C02E070;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_24C02E140;
  v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112))
    free(v5);
  v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120))
    free(v6);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 200) = off_24C02E070;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_24C02E140;
  v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112))
    free(v5);
  v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120))
    free(v6);
  JUMPOUT(0x20BD002F8);
}

__n128 llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5)
{
  const void *v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v9 = *a3;
  v10 = *(_QWORD *)(a1 + 96);
  if (v10 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v9);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v10 + 8 * v13) = v9;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v9)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v9;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = **a5;
  *(_QWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = v12;
  return result;
}

_QWORD *llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_24C02E070;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_24C02E070;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  JUMPOUT(0x20BD002F8);
}

void std::__function::__func<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1},std::allocator<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1}>,void ()(long long const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1},std::allocator<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1}>,void ()(long long const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0536A8;
  return result;
}

void std::__function::__func<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1},std::allocator<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1}>,void ()(long long const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0536A8;
}

_QWORD *std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05A518;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05A518;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEEclESR_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 208) = 1;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, _BYTE **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[3];
  _QWORD *v37;
  const void *v38[3];
  const void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v35[0] = a3;
  v35[1] = a4;
  v38[0] = a2;
  v8 = llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>>((uint64_t)a1, (uint64_t)v35, v38, a5, a6);
  *(_QWORD *)(v8 + 192) = &unk_24C051EB0;
  v9 = v8 + 192;
  *(_BYTE *)(v8 + 200) = 0;
  *(_QWORD *)v8 = &off_24C051E30;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    v14 = (uint64_t *)a2[20];
    v15 = v11 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 != v14)
    {
      v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v14 - v19) < 0x20)
        goto LABEL_38;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      v20 = (uint64_t *)((char *)v20 - v24);
      v25 = &v19[8 * v15 - 16];
      v26 = v11 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *--v12;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v11 = v9;
    v13 = v11 + 1;
  }
  a2[21] = v13;
  v36[0] = &off_24C05A440;
  v36[1] = a1;
  v37 = v36;
  v38[0] = &off_24C05A440;
  v39 = v38;
  v38[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v38, a1 + 20);
  v30 = v39;
  if (v39 == v38)
  {
    v31 = 4;
    v30 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_28;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_28:
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v33 = 5;
LABEL_32:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

_QWORD *mlir::Pass::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_24C02DF38;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::Pass::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_24C02DF38;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  BOOL v8;
  size_t v9;
  const char *v10;
  void *v11;
  llvm::raw_ostream *result;

  v4 = *(const void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  v8 = *(_BYTE *)(a1 + 128) == 0;
  if (*(_BYTE *)(a1 + 128))
    v9 = 4;
  else
    v9 = 5;
  if (v8)
    v10 = "false";
  else
    v10 = "true";
  v11 = (void *)*((_QWORD *)this + 4);
  if (v9 > *((_QWORD *)this + 3) - (_QWORD)v11)
    return llvm::raw_ostream::write(this, v10, v9);
  result = (llvm::raw_ostream *)memcpy(v11, v10, v9);
  *((_QWORD *)this + 4) += v9;
  return result;
}

uint64_t mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 128) = *(_BYTE *)(a2 - 64);
  *(_BYTE *)(result + 200) = *(_BYTE *)(a2 + 8);
  return result;
}

void `non-virtual thunk to'mlir::Pass::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_24C02DF38;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_24C02E140;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_24C02DF38;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_24C02E140;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::print(a1 - 192, a2);
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::getOption(uint64_t a1)
{
  return a1 - 192;
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result - 64) = *(_BYTE *)(a2 - 64);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, _BYTE **a5)
{
  void *v10;
  uint64_t v11;
  _QWORD *GeneralCategory;
  uint64_t v13;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_24C02DDC8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_24C02DF38;
  *(_QWORD *)(a1 + 152) = &unk_24C02E228;
  *(_QWORD *)(a1 + 160) = &off_24C0535D0;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_24C02DF38;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_24C02DF38;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_24C02DF38;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_24C02E140;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_24C02DF38;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_24C02E140;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
  JUMPOUT(0x20BD002F8);
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, _BYTE **a5)
{
  const void *v9;
  uint64_t v10;
  __n128 result;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v9 = *a3;
  v10 = *(_QWORD *)(a1 + 96);
  if (v10 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v9);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v10 + 8 * v13) = v9;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v9)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v9;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v12;
  return result;
}

BOOL llvm::cl::OptionValueCopy<BOOL>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 9) && *(_BYTE *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0535D0;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0535D0;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKbEED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKbEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05A440;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKbEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05A440;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKbEEclESR_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 200) = 1;
  return result;
}

void mlir::Pass::~Pass(mlir::Pass *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  char *v7;
  char *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &unk_24C050C10;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {
    *((_QWORD *)this + 40) = v2;
    operator delete(v2);
  }
  if (*((_DWORD *)this + 73))
  {
    v3 = *((unsigned int *)this + 72);
    if ((_DWORD)v3)
    {
      v4 = 0;
      do
      {
        v5 = *(llvm **)(*((_QWORD *)this + 35) + v4);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v4 += 8;
      }
      while (8 * v3 != v4);
    }
  }
  free(*((void **)this + 35));
  v7 = (char *)*((_QWORD *)this + 29);
  if (v7 != (char *)this + 248)
    free(v7);
  v8 = (char *)*((_QWORD *)this + 23);
  if (v8 != (char *)this + 200)
    free(v8);
  v9 = (void *)*((_QWORD *)this + 16);
  if (v9)
  {
    *((_QWORD *)this + 17) = v9;
    operator delete(v9);
  }
  if (*((_BYTE *)this + 120))
  {
    v10 = (void *)*((_QWORD *)this + 8);
    if (v10 != *((void **)this + 7))
      free(v10);
  }
}

void mlir::Operation::setAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AttrData;
  uint64_t v6;
  char v7;
  mlir::MLIRContext *Context;
  uint64_t v9;
  void *v10[2];
  _QWORD v11[10];

  v11[9] = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  if (*(_BYTE *)(a1 + 47)
    && (AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9),
        mlir::Operation::getInherentAttr(a1, AttrData, v6),
        v7))
  {
    mlir::Operation::setInherentAttr(a1, v9, a3);
  }
  else
  {
    mlir::NamedAttrList::NamedAttrList(v10, *(_QWORD *)(a1 + 56));
    if (mlir::NamedAttrList::set((uint64_t)v10, v9, a3) != a3)
    {
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
      *(_QWORD *)(a1 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v10, Context);
    }
    if (v10[0] != v11)
      free(v10[0]);
  }
}

void mlir::DataFlowSolver::~DataFlowSolver(mlir::DataFlowSolver *this)
{
  unsigned int v2;
  llvm *v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)this + 34);
  v3 = (llvm *)*((_QWORD *)this + 15);
  if (v2)
  {
    v4 = (char *)v3 + 24 * v2;
    v5 = (uint64_t *)((char *)v3 + 16);
    do
    {
      v7 = *(v5 - 2);
      v6 = *(v5 - 1);
      v8 = v5 - 2;
      if ((v7 != -4096 || v6 != -4096) && (v7 != -8192 || v6 != -8192))
      {
        v9 = *v5;
        *v5 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      v5 += 3;
    }
    while (v8 + 3 != (uint64_t *)v4);
    v3 = (llvm *)*((_QWORD *)this + 15);
    v10 = 24 * *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v10);
}

uint64_t std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void mlir::AnalysisState::~AnalysisState(mlir::AnalysisState *this)
{
  char *v2;

  *(_QWORD *)this = off_24C033FB0;
  v2 = (char *)*((_QWORD *)this + 5);
  if (v2 != (char *)this + 56)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 2), (void *)(16 * *((unsigned int *)this + 8)));
}

uint64_t sub_207080920()
{
  uint64_t v0;

  return v0;
}

uint64_t mlir::ProgramPoint::getLoc(mlir::ProgramPoint *this)
{
  uint64_t v1;
  mlir::Block *v2;
  BOOL v3;
  mlir::Block *v5;
  mlir::Region *Parent;
  mlir::Block *v8;

  v1 = *(_QWORD *)this & 6;
  v2 = (mlir::Block *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
  if (v1)
    v3 = 1;
  else
    v3 = v2 == 0;
  if (!v3)
    return (*(uint64_t (**)(mlir::Block *))(*(_QWORD *)v2 + 16))(v2);
  if (v1 == 2 && v2 != 0)
    return *((_QWORD *)v2 + 3);
  if (v1 == 4)
    v5 = v2;
  else
    v5 = 0;
  v8 = v5;
  if (v5)
    return mlir::Value::getLoc((mlir::Value *)&v8);
  Parent = (mlir::Region *)mlir::Block::getParent(v2);
  return mlir::Region::getLoc(Parent);
}

uint64_t mlir::DataFlowSolver::initializeAndRun(mlir::DataFlowSolver *this, Operation *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((unsigned int *)this + 14);
  if ((_DWORD)v3)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 6);
    v6 = 8 * v3;
    while ((*(unsigned __int8 (**)(_QWORD, Operation *))(*(_QWORD *)*v5 + 16))(*v5, a2))
    {
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_7;
    }
    return 0;
  }
  else
  {
LABEL_7:
    while (1)
    {
      v7 = *((_QWORD *)this + 5);
      if (!v7)
        break;
      v8 = (void **)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 4);
      v10 = (uint64_t *)(*(char **)((char *)v8 + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v9);
      v11 = *v10;
      v12 = v10[1];
      *((_QWORD *)this + 4) = ++v9;
      *((_QWORD *)this + 5) = v7 - 1;
      if (v9 >= 0x200)
      {
        operator delete(*v8);
        *((_QWORD *)this + 1) += 8;
        *((_QWORD *)this + 4) -= 256;
      }
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, v11))
        return 0;
    }
    return 1;
  }
}

_QWORD *mlir::DataFlowAnalysis::DataFlowAnalysis(_QWORD *this, mlir::DataFlowSolver *a2)
{
  *this = off_24C0342A0;
  this[1] = a2;
  return this;
}

void mlir::DataFlowAnalysis::addDependency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v7[31];
  uint64_t v8[3];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8[0] = a3;
  v8[1] = a1;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>,std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2 + 16, v8, (uint64_t)v7);
  if (v7[16])
  {
    v4 = *(_OWORD *)v8;
    v5 = *(unsigned int *)(a2 + 48);
    if (v5 >= *(_DWORD *)(a2 + 52))
    {
      v6 = *(_OWORD *)v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 40, (void *)(a2 + 56), v5 + 1, 16);
      v4 = v6;
      LODWORD(v5) = *(_DWORD *)(a2 + 48);
    }
    *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * v5) = v4;
    ++*(_DWORD *)(a2 + 48);
  }
}

uint64_t mlir::DataFlowAnalysis::propagateIfChanged(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 1)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(result + 8));
  return result;
}

void mlir::AnalysisState::onUpdate(mlir::AnalysisState *this, mlir::DataFlowSolver *a2)
{
  uint64_t v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;

  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2)
  {
    v4 = (__int128 *)*((_QWORD *)this + 5);
    v5 = *((_QWORD *)a2 + 5);
    v6 = 16 * v2;
    do
    {
      v7 = *((_QWORD *)a2 + 2);
      v8 = *((_QWORD *)a2 + 1);
      v9 = *v4;
      if (v7 == v8)
        v10 = 0;
      else
        v10 = 32 * (v7 - v8) - 1;
      v11 = v5 + *((_QWORD *)a2 + 4);
      if (v10 == v11)
      {
        v12 = *v4;
        std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity((uint64_t)a2);
        v9 = v12;
        v8 = *((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
      }
      *(_OWORD *)(*(_QWORD *)(v8 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11) = v9;
      v5 = *((_QWORD *)a2 + 5) + 1;
      *((_QWORD *)a2 + 5) = v5;
      ++v4;
      v6 -= 16;
    }
    while (v6);
  }
}

void std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *v92;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v76 = &v37[8 * v35];
            v43 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              v77 = (v42 >> 3) + 1;
              v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v78];
              v7 += v78;
              v79 = (__int128 *)(v6 + 3);
              v80 = v76 + 16;
              v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v83 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v83;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_74;
      }
LABEL_84:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v92 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v92);
      return;
    }
    v92 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v92);
    v44 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v44 + 1);
    v8 = *v44;
    *(_QWORD *)(a1 + 8) = v44 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v45 = (v5 - v9) >> 2;
      if (v5 == v9)
        v45 = 1;
      if (!(v45 >> 61))
      {
        v46 = v45 >> 2;
        v47 = 8 * v45;
        v37 = (char *)operator new(8 * v45);
        v38 = &v37[8 * v46];
        v39 = &v37[v47];
        v48 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v48 & 0xFFFFFFFFFFFFFFF8];
          v49 = v48 - 8;
          if ((unint64_t)(v48 - 8) >= 0x38)
          {
            v84 = &v37[8 * v46];
            v50 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v49 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v50 = &v38[v86];
              v7 += v86;
              v87 = (__int128 *)(v44 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v50 = &v37[8 * v46];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v50 = v91;
            v50 += 8;
          }
          while (v50 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v37;
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v39;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_84;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  v28 = operator new(0x1000uLL);
  v29 = v28;
  if (v21 != v24)
    goto LABEL_23;
  if (v20 >= 1)
  {
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v26 -= 8 * (v30 >> 1);
LABEL_23:
    *(_QWORD *)v26 = v28;
    v31 = v26 + 8;
    if (v18 != v19)
      goto LABEL_49;
    goto LABEL_24;
  }
  if (v18 == v19)
    v51 = 1;
  else
    v51 = v20 >> 2;
  if (v51 >> 61)
    goto LABEL_84;
  v52 = 8 * v51;
  v53 = (char *)operator new(8 * v51);
  v26 = &v53[8 * (v51 >> 2)];
  v27 = &v53[v52];
  operator delete(v25);
  v54 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v25 = v53;
  *(_QWORD *)v26 = v29;
  v31 = v26 + 8;
  if (v18 != v54)
  {
    while (1)
    {
LABEL_49:
      if (v26 == v25)
      {
        if (v31 >= v27)
        {
          v61 = (v27 - v26) >> 2;
          if (v27 == v26)
            v61 = 1;
          if (v61 >> 61)
            goto LABEL_84;
          v62 = (v61 + 3) >> 2;
          v63 = 8 * v61;
          v64 = (char *)operator new(8 * v61);
          v25 = v64;
          v55 = &v64[8 * v62];
          v65 = v31 - v26;
          v40 = v31 == v26;
          v31 = v55;
          if (!v40)
          {
            v31 = &v55[v65 & 0xFFFFFFFFFFFFFFF8];
            v66 = v65 - 8;
            v67 = &v64[8 * v62];
            v68 = v26;
            if (v66 < 0x38)
              goto LABEL_87;
            v67 = &v64[8 * v62];
            v68 = v26;
            if ((unint64_t)(v67 - v26) < 0x20)
              goto LABEL_87;
            v69 = (v66 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v67 = &v55[v70];
            v68 = &v26[v70];
            v71 = (__int128 *)(v26 + 16);
            v72 = &v64[8 * v62 + 16];
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *v71;
              *((_OWORD *)v72 - 1) = *(v71 - 1);
              *(_OWORD *)v72 = v74;
              v71 += 2;
              v72 += 32;
              v73 -= 4;
            }
            while (v73);
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_87:
              do
              {
                v75 = *(_QWORD *)v68;
                v68 += 8;
                *(_QWORD *)v67 = v75;
                v67 += 8;
              }
              while (v67 != v31);
            }
          }
          v27 = &v64[v63];
          operator delete(v26);
        }
        else
        {
          v57 = (v27 - v31) >> 3;
          if (v57 >= -1)
            v58 = v57 + 1;
          else
            v58 = v57 + 2;
          v59 = &v31[8 * (v58 >> 1)];
          v55 = &v59[-(v31 - v26)];
          v60 = v31 - v26;
          v40 = v31 == v26;
          v31 = v59;
          if (!v40)
            memmove(v55, v26, v60);
          v25 = v26;
        }
      }
      else
      {
        v55 = v26;
      }
      v56 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v55 - 1) = v56;
      v32 = v55 - 8;
      v26 = v32;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_25;
    }
  }
LABEL_24:
  v32 = v26;
LABEL_25:
  v33 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v27;
  if (v33)
    operator delete(v33);
}

